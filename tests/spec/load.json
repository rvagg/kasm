{
  "bin": {
    "load.0.wasm": "AGFzbQEAAAABFQRgA39/fwF/YAABf2AAAGACf38BfwMnJgECAQECAQEBAQEBAwMBAAEBAQEBAQECAQIBAQICAgIBAQEBAQEBBAUBcAEBAQUDAQABBgYBfwFBAAsHtwUlC2FzLWJyLXZhbHVlAAANYXMtYnJfaWYtY29uZAABDmFzLWJyX2lmLXZhbHVlAAITYXMtYnJfaWYtdmFsdWUtY29uZAADEWFzLWJyX3RhYmxlLWluZGV4AAQRYXMtYnJfdGFibGUtdmFsdWUABRdhcy1icl90YWJsZS12YWx1ZS1pbmRleAAGD2FzLXJldHVybi12YWx1ZQAHCmFzLWlmLWNvbmQACAphcy1pZi10aGVuAAkKYXMtaWYtZWxzZQAKD2FzLXNlbGVjdC1maXJzdAALEGFzLXNlbGVjdC1zZWNvbmQADA5hcy1zZWxlY3QtY29uZAANDWFzLWNhbGwtZmlyc3QADwthcy1jYWxsLW1pZAAQDGFzLWNhbGwtbGFzdAARFmFzLWNhbGxfaW5kaXJlY3QtZmlyc3QAEhRhcy1jYWxsX2luZGlyZWN0LW1pZAATFWFzLWNhbGxfaW5kaXJlY3QtbGFzdAAUFmFzLWNhbGxfaW5kaXJlY3QtaW5kZXgAFRJhcy1sb2NhbC5zZXQtdmFsdWUAFhJhcy1sb2NhbC50ZWUtdmFsdWUAFxNhcy1nbG9iYWwuc2V0LXZhbHVlABgPYXMtbG9hZC1hZGRyZXNzABkQYXMtbG9hZE4tYWRkcmVzcwAaEGFzLXN0b3JlLWFkZHJlc3MAGw5hcy1zdG9yZS12YWx1ZQAcEWFzLXN0b3JlTi1hZGRyZXNzAB0PYXMtc3RvcmVOLXZhbHVlAB4QYXMtdW5hcnktb3BlcmFuZAAfDmFzLWJpbmFyeS1sZWZ0ACAPYXMtYmluYXJ5LXJpZ2h0ACEPYXMtdGVzdC1vcGVyYW5kACIPYXMtY29tcGFyZS1sZWZ0ACMQYXMtY29tcGFyZS1yaWdodAAkE2FzLW1lbW9yeS5ncm93LXNpemUAJQkHAQBBAAsBDgqGBCYMAAJ/QQAoAgAMAAsLDAACQEEAKAIADQALCxEAAn9BACgCAEEBDQAaQQcLCxEAAn9BBkEAKAIADQAaQQcLCw8AAkBBACgCAA4CAAAACwsTAAJ/QQAoAgBBAQ4CAAAAQQcLCxIAAn9BBkEAKAIADgEAAEEHCwsIAEEAKAIADwsPAEEAKAIABH9BAAVBAQsLDwBBAQR/QQAoAgAFQQALCw8AQQAEf0EABUEAKAIACwsMAEEAKAIAIAAgARsLDAAgAEEAKAIAIAEbCwwAQQBBAUEAKAIAGwsEAEF/Cw0AQQAoAgBBAkEDEA4LDQBBAUEAKAIAQQMQDgsNAEEBQQJBACgCABAOCxAAQQAoAgBBAkEDQQARAAALEABBAUEAKAIAQQNBABEAAAsQAEEBQQJBACgCAEEAEQAACxAAQQFBAkEDQQAoAgARAAALCwEBf0EAKAIAIQALCwEBf0EAKAIAIgALCwEBf0EAKAIAJAALCgBBACgCACgCAAsKAEEAKAIALAAACwwAQQAoAgBBBzYCAAsMAEECQQAoAgA2AgALDABBACwAAEEHOgAACwwAQQJBACgCADsBAAsJAEHkACgCAGcLCwBB5AAoAgBBCmoLCwBBCkHkACgCAGsLCQBB5AAoAgBFCwsAQeQAKAIAQQpMCwsAQQpB5AAoAgBHCwoAQeQAKAIAQAAL",
    "load.1.wat": "KG1lbW9yeSAxKShmdW5jIChwYXJhbSBpMzIpIChyZXN1bHQgaTMyKSAoaTMyLmxvYWQzMiAobG9jYWwuZ2V0IDApKSk=",
    "load.10.wat": "KG1lbW9yeSAxKShmdW5jIChwYXJhbSBpMzIpIChyZXN1bHQgZjMyKSAoZjMyLmxvYWQzMiAobG9jYWwuZ2V0IDApKSk=",
    "load.11.wat": "KG1lbW9yeSAxKShmdW5jIChwYXJhbSBpMzIpIChyZXN1bHQgZjMyKSAoZjMyLmxvYWQ2NCAobG9jYWwuZ2V0IDApKSk=",
    "load.12.wat": "KG1lbW9yeSAxKShmdW5jIChwYXJhbSBpMzIpIChyZXN1bHQgZjY0KSAoZjY0LmxvYWQzMiAobG9jYWwuZ2V0IDApKSk=",
    "load.13.wat": "KG1lbW9yeSAxKShmdW5jIChwYXJhbSBpMzIpIChyZXN1bHQgZjY0KSAoZjY0LmxvYWQ2NCAobG9jYWwuZ2V0IDApKSk=",
    "load.14.wasm": "AGFzbQEAAAABBAFgAAADAgEABQMBAAEKCQEHAEEAKAIACw==",
    "load.15.wasm": "AGFzbQEAAAABBAFgAAADAgEABQMBAAEKCQEHAEEALAAACw==",
    "load.16.wasm": "AGFzbQEAAAABBAFgAAADAgEABQMBAAEKCQEHAEEALQAACw==",
    "load.17.wasm": "AGFzbQEAAAABBAFgAAADAgEABQMBAAEKCQEHAEEALgEACw==",
    "load.18.wasm": "AGFzbQEAAAABBAFgAAADAgEABQMBAAEKCQEHAEEALwEACw==",
    "load.19.wasm": "AGFzbQEAAAABBAFgAAADAgEABQMBAAEKCQEHAEEAKQMACw==",
    "load.2.wat": "KG1lbW9yeSAxKShmdW5jIChwYXJhbSBpMzIpIChyZXN1bHQgaTMyKSAoaTMyLmxvYWQzMl91IChsb2NhbC5nZXQgMCkpKQ==",
    "load.20.wasm": "AGFzbQEAAAABBAFgAAADAgEABQMBAAEKCQEHAEEAMAAACw==",
    "load.21.wasm": "AGFzbQEAAAABBAFgAAADAgEABQMBAAEKCQEHAEEAMQAACw==",
    "load.22.wasm": "AGFzbQEAAAABBAFgAAADAgEABQMBAAEKCQEHAEEAMgEACw==",
    "load.23.wasm": "AGFzbQEAAAABBAFgAAADAgEABQMBAAEKCQEHAEEAMwEACw==",
    "load.24.wasm": "AGFzbQEAAAABBAFgAAADAgEABQMBAAEKCQEHAEEANAIACw==",
    "load.25.wasm": "AGFzbQEAAAABBAFgAAADAgEABQMBAAEKCQEHAEEANQIACw==",
    "load.26.wasm": "AGFzbQEAAAABBAFgAAADAgEABQMBAAEKCQEHAEEAKgIACw==",
    "load.27.wasm": "AGFzbQEAAAABBAFgAAADAgEABQMBAAEKCQEHAEEAKwMACw==",
    "load.28.wasm": "AGFzbQEAAAABBQFgAAF/AwIBAAUDAQABCgwBCgBDAAAAACgCAAs=",
    "load.29.wasm": "AGFzbQEAAAABBQFgAAF/AwIBAAUDAQABCgwBCgBDAAAAACwAAAs=",
    "load.3.wat": "KG1lbW9yeSAxKShmdW5jIChwYXJhbSBpMzIpIChyZXN1bHQgaTMyKSAoaTMyLmxvYWQzMl9zIChsb2NhbC5nZXQgMCkpKQ==",
    "load.30.wasm": "AGFzbQEAAAABBQFgAAF/AwIBAAUDAQABCgwBCgBDAAAAAC0AAAs=",
    "load.31.wasm": "AGFzbQEAAAABBQFgAAF/AwIBAAUDAQABCgwBCgBDAAAAAC4BAAs=",
    "load.32.wasm": "AGFzbQEAAAABBQFgAAF/AwIBAAUDAQABCgwBCgBDAAAAAC8BAAs=",
    "load.33.wasm": "AGFzbQEAAAABBQFgAAF+AwIBAAUDAQABCgwBCgBDAAAAACkDAAs=",
    "load.34.wasm": "AGFzbQEAAAABBQFgAAF+AwIBAAUDAQABCgwBCgBDAAAAADAAAAs=",
    "load.35.wasm": "AGFzbQEAAAABBQFgAAF+AwIBAAUDAQABCgwBCgBDAAAAADEAAAs=",
    "load.36.wasm": "AGFzbQEAAAABBQFgAAF+AwIBAAUDAQABCgwBCgBDAAAAADIBAAs=",
    "load.37.wasm": "AGFzbQEAAAABBQFgAAF+AwIBAAUDAQABCgwBCgBDAAAAADMBAAs=",
    "load.38.wasm": "AGFzbQEAAAABBQFgAAF+AwIBAAUDAQABCgwBCgBDAAAAADQCAAs=",
    "load.39.wasm": "AGFzbQEAAAABBQFgAAF+AwIBAAUDAQABCgwBCgBDAAAAADUCAAs=",
    "load.4.wat": "KG1lbW9yeSAxKShmdW5jIChwYXJhbSBpMzIpIChyZXN1bHQgaTMyKSAoaTMyLmxvYWQ2NCAobG9jYWwuZ2V0IDApKSk=",
    "load.40.wasm": "AGFzbQEAAAABBQFgAAF9AwIBAAUDAQABCgwBCgBDAAAAACoCAAs=",
    "load.41.wasm": "AGFzbQEAAAABBQFgAAF8AwIBAAUDAQABCgwBCgBDAAAAACsDAAs=",
    "load.42.wasm": "AGFzbQEAAAABBAFgAAADAgEABQMBAAAKCAEGACgCABoL",
    "load.43.wasm": "AGFzbQEAAAABBAFgAAADAgEABQMBAAAKDQELAEEAAkAoAgAaCws=",
    "load.44.wasm": "AGFzbQEAAAABBAFgAAADAgEABQMBAAAKDQELAEEAA0AoAgAaCws=",
    "load.45.wasm": "AGFzbQEAAAABBAFgAAADAgEABQMBAAAKDwENAEEAQQAEQCgCABoLCw==",
    "load.46.wasm": "AGFzbQEAAAABBAFgAAADAgEABQMBAAAKEgEQAEEAQQAEf0EABSgCAAsaCw==",
    "load.47.wasm": "AGFzbQEAAAABBAFgAAADAgEABQMBAAAKDwENAEEAAkAoAgAMABoLCw==",
    "load.48.wasm": "AGFzbQEAAAABBAFgAAADAgEABQMBAAAKEQEPAEEAAkAoAgBBAQ0AGgsL",
    "load.49.wasm": "AGFzbQEAAAABBAFgAAADAgEABQMBAAAKEAEOAEEAAkAoAgAOAAAaCws=",
    "load.5.wat": "KG1lbW9yeSAxKShmdW5jIChwYXJhbSBpMzIpIChyZXN1bHQgaTMyKSAoaTMyLmxvYWQ2NF91IChsb2NhbC5nZXQgMCkpKQ==",
    "load.50.wasm": "AGFzbQEAAAABBAFgAAADAgEABQMBAAAKCQEHACgCAA8aCw==",
    "load.51.wasm": "AGFzbQEAAAABBAFgAAADAgEABQMBAAAKDQELACgCAEEBQQIbGgs=",
    "load.52.wasm": "AGFzbQEAAAABCQJgAABgAX8BfwMDAgABBQMBAAAKDwIIACgCABABGgsEACAACw==",
    "load.53.wasm": "AGFzbQEAAAABCQJgAX8Bf2AAAAMDAgABBAUBcAEBAQUDAQAACQcBAEEACwEAChUCBAAgAAsOAAJ/KAIAQQARAAAaCws=",
    "load.54.wasm": "AGFzbQEAAAABBAFgAAADAgEABQMBAAAKDgEMAQF/KAIAIQAgABoL",
    "load.55.wasm": "AGFzbQEAAAABBAFgAAADAgEABQMBAAAKDAEKAQF/KAIAIgAaCw==",
    "load.56.wasm": "AGFzbQEAAAABBAFgAAADAgEABQMBAAAGBgF/AUEACwoMAQoAKAIAJAAjABoL",
    "load.57.wasm": "AGFzbQEAAAABBAFgAAADAgEABQMBAAAKCgEIACgCAEAAGgs=",
    "load.58.wasm": "AGFzbQEAAAABBAFgAAADAgEABQMBAAAKCwEJACgCACgCABoL",
    "load.59.wasm": "AGFzbQEAAAABBAFgAAADAgEABQMBAAEKDAEKACgCAEEBNgIACw==",
    "load.6.wat": "KG1lbW9yeSAxKShmdW5jIChwYXJhbSBpMzIpIChyZXN1bHQgaTMyKSAoaTMyLmxvYWQ2NF9zIChsb2NhbC5nZXQgMCkpKQ==",
    "load.7.wat": "KG1lbW9yeSAxKShmdW5jIChwYXJhbSBpMzIpIChyZXN1bHQgaTY0KSAoaTY0LmxvYWQ2NCAobG9jYWwuZ2V0IDApKSk=",
    "load.8.wat": "KG1lbW9yeSAxKShmdW5jIChwYXJhbSBpMzIpIChyZXN1bHQgaTY0KSAoaTY0LmxvYWQ2NF91IChsb2NhbC5nZXQgMCkpKQ==",
    "load.9.wat": "KG1lbW9yeSAxKShmdW5jIChwYXJhbSBpMzIpIChyZXN1bHQgaTY0KSAoaTY0LmxvYWQ2NF9zIChsb2NhbC5nZXQgMCkpKQ=="
  },
  "spec": {"source_filename": "/workspace/wasm-spec/test/core/load.wast",
 "commands": [
  {"type": "module", "line": 3, "filename": "load.0.wasm"}, 
  {"type": "assert_return", "line": 161, "action": {"type": "invoke", "field": "as-br-value", "args": []}, "expected": [{"type": "i32", "value": "0"}]}, 
  {"type": "assert_return", "line": 163, "action": {"type": "invoke", "field": "as-br_if-cond", "args": []}, "expected": []}, 
  {"type": "assert_return", "line": 164, "action": {"type": "invoke", "field": "as-br_if-value", "args": []}, "expected": [{"type": "i32", "value": "0"}]}, 
  {"type": "assert_return", "line": 165, "action": {"type": "invoke", "field": "as-br_if-value-cond", "args": []}, "expected": [{"type": "i32", "value": "7"}]}, 
  {"type": "assert_return", "line": 167, "action": {"type": "invoke", "field": "as-br_table-index", "args": []}, "expected": []}, 
  {"type": "assert_return", "line": 168, "action": {"type": "invoke", "field": "as-br_table-value", "args": []}, "expected": [{"type": "i32", "value": "0"}]}, 
  {"type": "assert_return", "line": 169, "action": {"type": "invoke", "field": "as-br_table-value-index", "args": []}, "expected": [{"type": "i32", "value": "6"}]}, 
  {"type": "assert_return", "line": 171, "action": {"type": "invoke", "field": "as-return-value", "args": []}, "expected": [{"type": "i32", "value": "0"}]}, 
  {"type": "assert_return", "line": 173, "action": {"type": "invoke", "field": "as-if-cond", "args": []}, "expected": [{"type": "i32", "value": "1"}]}, 
  {"type": "assert_return", "line": 174, "action": {"type": "invoke", "field": "as-if-then", "args": []}, "expected": [{"type": "i32", "value": "0"}]}, 
  {"type": "assert_return", "line": 175, "action": {"type": "invoke", "field": "as-if-else", "args": []}, "expected": [{"type": "i32", "value": "0"}]}, 
  {"type": "assert_return", "line": 177, "action": {"type": "invoke", "field": "as-select-first", "args": [{"type": "i32", "value": "0"}, {"type": "i32", "value": "1"}]}, "expected": [{"type": "i32", "value": "0"}]}, 
  {"type": "assert_return", "line": 178, "action": {"type": "invoke", "field": "as-select-second", "args": [{"type": "i32", "value": "0"}, {"type": "i32", "value": "0"}]}, "expected": [{"type": "i32", "value": "0"}]}, 
  {"type": "assert_return", "line": 179, "action": {"type": "invoke", "field": "as-select-cond", "args": []}, "expected": [{"type": "i32", "value": "1"}]}, 
  {"type": "assert_return", "line": 181, "action": {"type": "invoke", "field": "as-call-first", "args": []}, "expected": [{"type": "i32", "value": "4294967295"}]}, 
  {"type": "assert_return", "line": 182, "action": {"type": "invoke", "field": "as-call-mid", "args": []}, "expected": [{"type": "i32", "value": "4294967295"}]}, 
  {"type": "assert_return", "line": 183, "action": {"type": "invoke", "field": "as-call-last", "args": []}, "expected": [{"type": "i32", "value": "4294967295"}]}, 
  {"type": "assert_return", "line": 185, "action": {"type": "invoke", "field": "as-call_indirect-first", "args": []}, "expected": [{"type": "i32", "value": "4294967295"}]}, 
  {"type": "assert_return", "line": 186, "action": {"type": "invoke", "field": "as-call_indirect-mid", "args": []}, "expected": [{"type": "i32", "value": "4294967295"}]}, 
  {"type": "assert_return", "line": 187, "action": {"type": "invoke", "field": "as-call_indirect-last", "args": []}, "expected": [{"type": "i32", "value": "4294967295"}]}, 
  {"type": "assert_return", "line": 188, "action": {"type": "invoke", "field": "as-call_indirect-index", "args": []}, "expected": [{"type": "i32", "value": "4294967295"}]}, 
  {"type": "assert_return", "line": 190, "action": {"type": "invoke", "field": "as-local.set-value", "args": []}, "expected": []}, 
  {"type": "assert_return", "line": 191, "action": {"type": "invoke", "field": "as-local.tee-value", "args": []}, "expected": [{"type": "i32", "value": "0"}]}, 
  {"type": "assert_return", "line": 192, "action": {"type": "invoke", "field": "as-global.set-value", "args": []}, "expected": []}, 
  {"type": "assert_return", "line": 194, "action": {"type": "invoke", "field": "as-load-address", "args": []}, "expected": [{"type": "i32", "value": "0"}]}, 
  {"type": "assert_return", "line": 195, "action": {"type": "invoke", "field": "as-loadN-address", "args": []}, "expected": [{"type": "i32", "value": "0"}]}, 
  {"type": "assert_return", "line": 196, "action": {"type": "invoke", "field": "as-store-address", "args": []}, "expected": []}, 
  {"type": "assert_return", "line": 197, "action": {"type": "invoke", "field": "as-store-value", "args": []}, "expected": []}, 
  {"type": "assert_return", "line": 198, "action": {"type": "invoke", "field": "as-storeN-address", "args": []}, "expected": []}, 
  {"type": "assert_return", "line": 199, "action": {"type": "invoke", "field": "as-storeN-value", "args": []}, "expected": []}, 
  {"type": "assert_return", "line": 201, "action": {"type": "invoke", "field": "as-unary-operand", "args": []}, "expected": [{"type": "i32", "value": "32"}]}, 
  {"type": "assert_return", "line": 203, "action": {"type": "invoke", "field": "as-binary-left", "args": []}, "expected": [{"type": "i32", "value": "10"}]}, 
  {"type": "assert_return", "line": 204, "action": {"type": "invoke", "field": "as-binary-right", "args": []}, "expected": [{"type": "i32", "value": "10"}]}, 
  {"type": "assert_return", "line": 206, "action": {"type": "invoke", "field": "as-test-operand", "args": []}, "expected": [{"type": "i32", "value": "1"}]}, 
  {"type": "assert_return", "line": 208, "action": {"type": "invoke", "field": "as-compare-left", "args": []}, "expected": [{"type": "i32", "value": "1"}]}, 
  {"type": "assert_return", "line": 209, "action": {"type": "invoke", "field": "as-compare-right", "args": []}, "expected": [{"type": "i32", "value": "1"}]}, 
  {"type": "assert_return", "line": 211, "action": {"type": "invoke", "field": "as-memory.grow-size", "args": []}, "expected": [{"type": "i32", "value": "1"}]}, 
  {"type": "assert_malformed", "line": 214, "filename": "load.1.wat", "text": "unknown operator", "module_type": "text"}, 
  {"type": "assert_malformed", "line": 221, "filename": "load.2.wat", "text": "unknown operator", "module_type": "text"}, 
  {"type": "assert_malformed", "line": 228, "filename": "load.3.wat", "text": "unknown operator", "module_type": "text"}, 
  {"type": "assert_malformed", "line": 235, "filename": "load.4.wat", "text": "unknown operator", "module_type": "text"}, 
  {"type": "assert_malformed", "line": 242, "filename": "load.5.wat", "text": "unknown operator", "module_type": "text"}, 
  {"type": "assert_malformed", "line": 249, "filename": "load.6.wat", "text": "unknown operator", "module_type": "text"}, 
  {"type": "assert_malformed", "line": 257, "filename": "load.7.wat", "text": "unknown operator", "module_type": "text"}, 
  {"type": "assert_malformed", "line": 264, "filename": "load.8.wat", "text": "unknown operator", "module_type": "text"}, 
  {"type": "assert_malformed", "line": 271, "filename": "load.9.wat", "text": "unknown operator", "module_type": "text"}, 
  {"type": "assert_malformed", "line": 279, "filename": "load.10.wat", "text": "unknown operator", "module_type": "text"}, 
  {"type": "assert_malformed", "line": 286, "filename": "load.11.wat", "text": "unknown operator", "module_type": "text"}, 
  {"type": "assert_malformed", "line": 294, "filename": "load.12.wat", "text": "unknown operator", "module_type": "text"}, 
  {"type": "assert_malformed", "line": 301, "filename": "load.13.wat", "text": "unknown operator", "module_type": "text"}, 
  {"type": "assert_invalid", "line": 312, "filename": "load.14.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 316, "filename": "load.15.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 320, "filename": "load.16.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 324, "filename": "load.17.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 328, "filename": "load.18.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 332, "filename": "load.19.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 336, "filename": "load.20.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 340, "filename": "load.21.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 344, "filename": "load.22.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 348, "filename": "load.23.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 352, "filename": "load.24.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 356, "filename": "load.25.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 360, "filename": "load.26.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 364, "filename": "load.27.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 371, "filename": "load.28.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 372, "filename": "load.29.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 373, "filename": "load.30.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 374, "filename": "load.31.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 375, "filename": "load.32.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 376, "filename": "load.33.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 377, "filename": "load.34.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 378, "filename": "load.35.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 379, "filename": "load.36.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 380, "filename": "load.37.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 381, "filename": "load.38.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 382, "filename": "load.39.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 383, "filename": "load.40.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 384, "filename": "load.41.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 388, "filename": "load.42.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 397, "filename": "load.43.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 407, "filename": "load.44.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 417, "filename": "load.45.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 427, "filename": "load.46.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 437, "filename": "load.47.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 447, "filename": "load.48.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 457, "filename": "load.49.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 467, "filename": "load.50.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 476, "filename": "load.51.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 485, "filename": "load.52.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 495, "filename": "load.53.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 512, "filename": "load.54.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 522, "filename": "load.55.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 532, "filename": "load.56.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 542, "filename": "load.57.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 551, "filename": "load.58.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 560, "filename": "load.59.wasm", "text": "type mismatch", "module_type": "binary"}]},
  "code": [
    "(module (memory 1)\n  (func (export \"as-br-value\") (result i32) (block (result i32) (br 0 (i32.load (i32.const 0)))) )\n  (func (export \"as-br_if-cond\") (block (br_if 0 (i32.load (i32.const 0)))) )\n  (func (export \"as-br_if-value\") (result i32) (block (result i32) (drop (br_if 0 (i32.load (i32.const 0)) (i32.const 1))) (i32.const 7) ) )\n  (func (export \"as-br_if-value-cond\") (result i32) (block (result i32) (drop (br_if 0 (i32.const 6) (i32.load (i32.const 0)))) (i32.const 7) ) )\n  (func (export \"as-br_table-index\") (block (br_table 0 0 0 (i32.load (i32.const 0)))) )\n  (func (export \"as-br_table-value\") (result i32) (block (result i32) (br_table 0 0 0 (i32.load (i32.const 0)) (i32.const 1)) (i32.const 7) ) )\n  (func (export \"as-br_table-value-index\") (result i32) (block (result i32) (br_table 0 0 (i32.const 6) (i32.load (i32.const 0))) (i32.const 7) ) )\n  (func (export \"as-return-value\") (result i32) (return (i32.load (i32.const 0))) )\n  (func (export \"as-if-cond\") (result i32) (if (result i32) (i32.load (i32.const 0)) (then (i32.const 0)) (else (i32.const 1)) ) )\n  (func (export \"as-if-then\") (result i32) (if (result i32) (i32.const 1) (then (i32.load (i32.const 0))) (else (i32.const 0)) ) )\n  (func (export \"as-if-else\") (result i32) (if (result i32) (i32.const 0) (then (i32.const 0)) (else (i32.load (i32.const 0))) ) )\n  (func (export \"as-select-first\") (param i32 i32) (result i32) (select (i32.load (i32.const 0)) (local.get 0) (local.get 1)) )\n  (func (export \"as-select-second\") (param i32 i32) (result i32) (select (local.get 0) (i32.load (i32.const 0)) (local.get 1)) )\n  (func (export \"as-select-cond\") (result i32) (select (i32.const 0) (i32.const 1) (i32.load (i32.const 0))) )\n  (func $f (param i32 i32 i32) (result i32) (i32.const -1))\n  (func (export \"as-call-first\") (result i32) (call $f (i32.load (i32.const 0)) (i32.const 2) (i32.const 3)) )\n  (func (export \"as-call-mid\") (result i32) (call $f (i32.const 1) (i32.load (i32.const 0)) (i32.const 3)) )\n  (func (export \"as-call-last\") (result i32) (call $f (i32.const 1) (i32.const 2) (i32.load (i32.const 0))) ) (type $sig (func (param i32 i32 i32) (result i32))) (table funcref (elem $f))\n  (func (export \"as-call_indirect-first\") (result i32) (call_indirect (type $sig) (i32.load (i32.const 0)) (i32.const 2) (i32.const 3) (i32.const 0) ) )\n  (func (export \"as-call_indirect-mid\") (result i32) (call_indirect (type $sig) (i32.const 1) (i32.load (i32.const 0)) (i32.const 3) (i32.const 0) ) )\n  (func (export \"as-call_indirect-last\") (result i32) (call_indirect (type $sig) (i32.const 1) (i32.const 2) (i32.load (i32.const 0)) (i32.const 0) ) )\n  (func (export \"as-call_indirect-index\") (result i32) (call_indirect (type $sig) (i32.const 1) (i32.const 2) (i32.const 3) (i32.load (i32.const 0)) ) )\n  (func (export \"as-local.set-value\") (local i32) (local.set 0 (i32.load (i32.const 0))) )\n  (func (export \"as-local.tee-value\") (result i32) (local i32) (local.tee 0 (i32.load (i32.const 0))) ) (global $g (mut i32) (i32.const 0))\n  (func (export \"as-global.set-value\") (local i32) (global.set $g (i32.load (i32.const 0))) )\n  (func (export \"as-load-address\") (result i32) (i32.load (i32.load (i32.const 0))) )\n  (func (export \"as-loadN-address\") (result i32) (i32.load8_s (i32.load (i32.const 0))) )\n  (func (export \"as-store-address\") (i32.store (i32.load (i32.const 0)) (i32.const 7)) )\n  (func (export \"as-store-value\") (i32.store (i32.const 2) (i32.load (i32.const 0))) )\n  (func (export \"as-storeN-address\") (i32.store8 (i32.load8_s (i32.const 0)) (i32.const 7)) )\n  (func (export \"as-storeN-value\") (i32.store16 (i32.const 2) (i32.load (i32.const 0))) )\n  (func (export \"as-unary-operand\") (result i32) (i32.clz (i32.load (i32.const 100))) )\n  (func (export \"as-binary-left\") (result i32) (i32.add (i32.load (i32.const 100)) (i32.const 10)) )\n  (func (export \"as-binary-right\") (result i32) (i32.sub (i32.const 10) (i32.load (i32.const 100))) )\n  (func (export \"as-test-operand\") (result i32) (i32.eqz (i32.load (i32.const 100))) )\n  (func (export \"as-compare-left\") (result i32) (i32.le_s (i32.load (i32.const 100)) (i32.const 10)) )\n  (func (export \"as-compare-right\") (result i32) (i32.ne (i32.const 10) (i32.load (i32.const 100))) )\n  (func (export \"as-memory.grow-size\") (result i32) (memory.grow (i32.load (i32.const 100))) ))",
    "(assert_return (invoke \"as-br-value\") (i32.const 0))",
    "(assert_return (invoke \"as-br_if-cond\"))",
    "(assert_return (invoke \"as-br_if-value\") (i32.const 0))",
    "(assert_return (invoke \"as-br_if-value-cond\") (i32.const 7))",
    "(assert_return (invoke \"as-br_table-index\"))",
    "(assert_return (invoke \"as-br_table-value\") (i32.const 0))",
    "(assert_return (invoke \"as-br_table-value-index\") (i32.const 6))",
    "(assert_return (invoke \"as-return-value\") (i32.const 0))",
    "(assert_return (invoke \"as-if-cond\") (i32.const 1))",
    "(assert_return (invoke \"as-if-then\") (i32.const 0))",
    "(assert_return (invoke \"as-if-else\") (i32.const 0))",
    "(assert_return (invoke \"as-select-first\" (i32.const 0) (i32.const 1)) (i32.const 0))",
    "(assert_return (invoke \"as-select-second\" (i32.const 0) (i32.const 0)) (i32.const 0))",
    "(assert_return (invoke \"as-select-cond\") (i32.const 1))",
    "(assert_return (invoke \"as-call-first\") (i32.const -1))",
    "(assert_return (invoke \"as-call-mid\") (i32.const -1))",
    "(assert_return (invoke \"as-call-last\") (i32.const -1))",
    "(assert_return (invoke \"as-call_indirect-first\") (i32.const -1))",
    "(assert_return (invoke \"as-call_indirect-mid\") (i32.const -1))",
    "(assert_return (invoke \"as-call_indirect-last\") (i32.const -1))",
    "(assert_return (invoke \"as-call_indirect-index\") (i32.const -1))",
    "(assert_return (invoke \"as-local.set-value\"))",
    "(assert_return (invoke \"as-local.tee-value\") (i32.const 0))",
    "(assert_return (invoke \"as-global.set-value\"))",
    "(assert_return (invoke \"as-load-address\") (i32.const 0))",
    "(assert_return (invoke \"as-loadN-address\") (i32.const 0))",
    "(assert_return (invoke \"as-store-address\"))",
    "(assert_return (invoke \"as-store-value\"))",
    "(assert_return (invoke \"as-storeN-address\"))",
    "(assert_return (invoke \"as-storeN-value\"))",
    "(assert_return (invoke \"as-unary-operand\") (i32.const 32))",
    "(assert_return (invoke \"as-binary-left\") (i32.const 10))",
    "(assert_return (invoke \"as-binary-right\") (i32.const 10))",
    "(assert_return (invoke \"as-test-operand\") (i32.const 1))",
    "(assert_return (invoke \"as-compare-left\") (i32.const 1))",
    "(assert_return (invoke \"as-compare-right\") (i32.const 1))",
    "(assert_return (invoke \"as-memory.grow-size\") (i32.const 1))",
    "(assert_malformed (module quote \"(memory 1)\" \"(func (param i32) (result i32) (i32.load32 (local.get 0)))\" ) \"unknown operator\")",
    "(assert_malformed (module quote \"(memory 1)\" \"(func (param i32) (result i32) (i32.load32_u (local.get 0)))\" ) \"unknown operator\")",
    "(assert_malformed (module quote \"(memory 1)\" \"(func (param i32) (result i32) (i32.load32_s (local.get 0)))\" ) \"unknown operator\")",
    "(assert_malformed (module quote \"(memory 1)\" \"(func (param i32) (result i32) (i32.load64 (local.get 0)))\" ) \"unknown operator\")",
    "(assert_malformed (module quote \"(memory 1)\" \"(func (param i32) (result i32) (i32.load64_u (local.get 0)))\" ) \"unknown operator\")",
    "(assert_malformed (module quote \"(memory 1)\" \"(func (param i32) (result i32) (i32.load64_s (local.get 0)))\" ) \"unknown operator\")",
    "(assert_malformed (module quote \"(memory 1)\" \"(func (param i32) (result i64) (i64.load64 (local.get 0)))\" ) \"unknown operator\")",
    "(assert_malformed (module quote \"(memory 1)\" \"(func (param i32) (result i64) (i64.load64_u (local.get 0)))\" ) \"unknown operator\")",
    "(assert_malformed (module quote \"(memory 1)\" \"(func (param i32) (result i64) (i64.load64_s (local.get 0)))\" ) \"unknown operator\")",
    "(assert_malformed (module quote \"(memory 1)\" \"(func (param i32) (result f32) (f32.load32 (local.get 0)))\" ) \"unknown operator\")",
    "(assert_malformed (module quote \"(memory 1)\" \"(func (param i32) (result f32) (f32.load64 (local.get 0)))\" ) \"unknown operator\")",
    "(assert_malformed (module quote \"(memory 1)\" \"(func (param i32) (result f64) (f64.load32 (local.get 0)))\" ) \"unknown operator\")",
    "(assert_malformed (module quote \"(memory 1)\" \"(func (param i32) (result f64) (f64.load64 (local.get 0)))\" ) \"unknown operator\")",
    "(assert_invalid (module (memory 1) (func $load_i32 (i32.load (i32.const 0)))) \"type mismatch\")",
    "(assert_invalid (module (memory 1) (func $load8_s_i32 (i32.load8_s (i32.const 0)))) \"type mismatch\")",
    "(assert_invalid (module (memory 1) (func $load8_u_i32 (i32.load8_u (i32.const 0)))) \"type mismatch\")",
    "(assert_invalid (module (memory 1) (func $load16_s_i32 (i32.load16_s (i32.const 0)))) \"type mismatch\")",
    "(assert_invalid (module (memory 1) (func $load16_u_i32 (i32.load16_u (i32.const 0)))) \"type mismatch\")",
    "(assert_invalid (module (memory 1) (func $load_i64 (i64.load (i32.const 0)))) \"type mismatch\")",
    "(assert_invalid (module (memory 1) (func $load8_s_i64 (i64.load8_s (i32.const 0)))) \"type mismatch\")",
    "(assert_invalid (module (memory 1) (func $load8_u_i64 (i64.load8_u (i32.const 0)))) \"type mismatch\")",
    "(assert_invalid (module (memory 1) (func $load16_s_i64 (i64.load16_s (i32.const 0)))) \"type mismatch\")",
    "(assert_invalid (module (memory 1) (func $load16_u_i64 (i64.load16_u (i32.const 0)))) \"type mismatch\")",
    "(assert_invalid (module (memory 1) (func $load32_s_i64 (i64.load32_s (i32.const 0)))) \"type mismatch\")",
    "(assert_invalid (module (memory 1) (func $load32_u_i64 (i64.load32_u (i32.const 0)))) \"type mismatch\")",
    "(assert_invalid (module (memory 1) (func $load_f32 (f32.load (i32.const 0)))) \"type mismatch\")",
    "(assert_invalid (module (memory 1) (func $load_f64 (f64.load (i32.const 0)))) \"type mismatch\")",
    "(assert_invalid (module (memory 1) (func (result i32) (i32.load (f32.const 0)))) \"type mismatch\")",
    "(assert_invalid (module (memory 1) (func (result i32) (i32.load8_s (f32.const 0)))) \"type mismatch\")",
    "(assert_invalid (module (memory 1) (func (result i32) (i32.load8_u (f32.const 0)))) \"type mismatch\")",
    "(assert_invalid (module (memory 1) (func (result i32) (i32.load16_s (f32.const 0)))) \"type mismatch\")",
    "(assert_invalid (module (memory 1) (func (result i32) (i32.load16_u (f32.const 0)))) \"type mismatch\")",
    "(assert_invalid (module (memory 1) (func (result i64) (i64.load (f32.const 0)))) \"type mismatch\")",
    "(assert_invalid (module (memory 1) (func (result i64) (i64.load8_s (f32.const 0)))) \"type mismatch\")",
    "(assert_invalid (module (memory 1) (func (result i64) (i64.load8_u (f32.const 0)))) \"type mismatch\")",
    "(assert_invalid (module (memory 1) (func (result i64) (i64.load16_s (f32.const 0)))) \"type mismatch\")",
    "(assert_invalid (module (memory 1) (func (result i64) (i64.load16_u (f32.const 0)))) \"type mismatch\")",
    "(assert_invalid (module (memory 1) (func (result i64) (i64.load32_s (f32.const 0)))) \"type mismatch\")",
    "(assert_invalid (module (memory 1) (func (result i64) (i64.load32_u (f32.const 0)))) \"type mismatch\")",
    "(assert_invalid (module (memory 1) (func (result f32) (f32.load (f32.const 0)))) \"type mismatch\")",
    "(assert_invalid (module (memory 1) (func (result f64) (f64.load (f32.const 0)))) \"type mismatch\")",
    "(assert_invalid (module (memory 0) (func $type-address-empty (i32.load) (drop) ) ) \"type mismatch\")",
    "(assert_invalid (module (memory 0) (func $type-address-empty-in-block (i32.const 0) (block (i32.load) (drop)) ) ) \"type mismatch\")",
    "(assert_invalid (module (memory 0) (func $type-address-empty-in-loop (i32.const 0) (loop (i32.load) (drop)) ) ) \"type mismatch\")",
    "(assert_invalid (module (memory 0) (func $type-address-empty-in-then (i32.const 0) (i32.const 0) (if (then (i32.load) (drop))) ) ) \"type mismatch\")",
    "(assert_invalid (module (memory 0) (func $type-address-empty-in-else (i32.const 0) (i32.const 0) (if (result i32) (then (i32.const 0)) (else (i32.load))) (drop) ) ) \"type mismatch\")",
    "(assert_invalid (module (memory 0) (func $type-address-empty-in-br (i32.const 0) (block (br 0 (i32.load)) (drop)) ) ) \"type mismatch\")",
    "(assert_invalid (module (memory 0) (func $type-address-empty-in-br_if (i32.const 0) (block (br_if 0 (i32.load) (i32.const 1)) (drop)) ) ) \"type mismatch\")",
    "(assert_invalid (module (memory 0) (func $type-address-empty-in-br_table (i32.const 0) (block (br_table 0 (i32.load)) (drop)) ) ) \"type mismatch\")",
    "(assert_invalid (module (memory 0) (func $type-address-empty-in-return (return (i32.load)) (drop) ) ) \"type mismatch\")",
    "(assert_invalid (module (memory 0) (func $type-address-empty-in-select (select (i32.load) (i32.const 1) (i32.const 2)) (drop) ) ) \"type mismatch\")",
    "(assert_invalid (module (memory 0) (func $type-address-empty-in-call (call 1 (i32.load)) (drop) ) (func (param i32) (result i32) (local.get 0)) ) \"type mismatch\")",
    "(assert_invalid (module (memory 0) (func $f (param i32) (result i32) (local.get 0)) (type $sig (func (param i32) (result i32))) (table funcref (elem $f)) (func $type-address-empty-in-call_indirect (block (result i32) (call_indirect (type $sig) (i32.load) (i32.const 0) ) (drop) ) ) ) \"type mismatch\")",
    "(assert_invalid (module (memory 0) (func $type-address-empty-in-local.set (local i32) (local.set 0 (i32.load)) (local.get 0) (drop) ) ) \"type mismatch\")",
    "(assert_invalid (module (memory 0) (func $type-address-empty-in-local.tee (local i32) (local.tee 0 (i32.load)) (drop) ) ) \"type mismatch\")",
    "(assert_invalid (module (memory 0) (global $x (mut i32) (i32.const 0)) (func $type-address-empty-in-global.set (global.set $x (i32.load)) (global.get $x) (drop) ) ) \"type mismatch\")",
    "(assert_invalid (module (memory 0) (func $type-address-empty-in-memory.grow (memory.grow (i32.load)) (drop) ) ) \"type mismatch\")",
    "(assert_invalid (module (memory 0) (func $type-address-empty-in-load (i32.load (i32.load)) (drop) ) ) \"type mismatch\")",
    "(assert_invalid (module (memory 1) (func $type-address-empty-in-store (i32.store (i32.load) (i32.const 1)) ) ) \"type mismatch\")"
  ],
  "dump": {
    "load.0.wasm": {
      "header": "\nload.0.wasm:\tfile format wasm 0x1\n\nSections:\n\n     Type start=0x0000000a end=0x0000001f (size=0x00000015) count: 4\n Function start=0x00000021 end=0x00000048 (size=0x00000027) count: 38\n    Table start=0x0000004a end=0x0000004f (size=0x00000005) count: 1\n   Memory start=0x00000051 end=0x00000054 (size=0x00000003) count: 1\n   Global start=0x00000056 end=0x0000005c (size=0x00000006) count: 1\n   Export start=0x0000005f end=0x00000316 (size=0x000002b7) count: 37\n     Elem start=0x00000318 end=0x0000031f (size=0x00000007) count: 1\n     Code start=0x00000322 end=0x00000528 (size=0x00000206) count: 38\n",
      "details": "\nload.0.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nType[4]:\n - type[0] (i32, i32, i32) -> i32\n - type[1] () -> i32\n - type[2] () -> nil\n - type[3] (i32, i32) -> i32\nFunction[38]:\n - func[0] sig=1 <as-br-value>\n - func[1] sig=2 <as-br_if-cond>\n - func[2] sig=1 <as-br_if-value>\n - func[3] sig=1 <as-br_if-value-cond>\n - func[4] sig=2 <as-br_table-index>\n - func[5] sig=1 <as-br_table-value>\n - func[6] sig=1 <as-br_table-value-index>\n - func[7] sig=1 <as-return-value>\n - func[8] sig=1 <as-if-cond>\n - func[9] sig=1 <as-if-then>\n - func[10] sig=1 <as-if-else>\n - func[11] sig=3 <as-select-first>\n - func[12] sig=3 <as-select-second>\n - func[13] sig=1 <as-select-cond>\n - func[14] sig=0\n - func[15] sig=1 <as-call-first>\n - func[16] sig=1 <as-call-mid>\n - func[17] sig=1 <as-call-last>\n - func[18] sig=1 <as-call_indirect-first>\n - func[19] sig=1 <as-call_indirect-mid>\n - func[20] sig=1 <as-call_indirect-last>\n - func[21] sig=1 <as-call_indirect-index>\n - func[22] sig=2 <as-local.set-value>\n - func[23] sig=1 <as-local.tee-value>\n - func[24] sig=2 <as-global.set-value>\n - func[25] sig=1 <as-load-address>\n - func[26] sig=1 <as-loadN-address>\n - func[27] sig=2 <as-store-address>\n - func[28] sig=2 <as-store-value>\n - func[29] sig=2 <as-storeN-address>\n - func[30] sig=2 <as-storeN-value>\n - func[31] sig=1 <as-unary-operand>\n - func[32] sig=1 <as-binary-left>\n - func[33] sig=1 <as-binary-right>\n - func[34] sig=1 <as-test-operand>\n - func[35] sig=1 <as-compare-left>\n - func[36] sig=1 <as-compare-right>\n - func[37] sig=1 <as-memory.grow-size>\nTable[1]:\n - table[0] type=funcref initial=1 max=1\nMemory[1]:\n - memory[0] pages: initial=1\nGlobal[1]:\n - global[0] i32 mutable=1 - init i32=0\nExport[37]:\n - func[0] <as-br-value> -> \"as-br-value\"\n - func[1] <as-br_if-cond> -> \"as-br_if-cond\"\n - func[2] <as-br_if-value> -> \"as-br_if-value\"\n - func[3] <as-br_if-value-cond> -> \"as-br_if-value-cond\"\n - func[4] <as-br_table-index> -> \"as-br_table-index\"\n - func[5] <as-br_table-value> -> \"as-br_table-value\"\n - func[6] <as-br_table-value-index> -> \"as-br_table-value-index\"\n - func[7] <as-return-value> -> \"as-return-value\"\n - func[8] <as-if-cond> -> \"as-if-cond\"\n - func[9] <as-if-then> -> \"as-if-then\"\n - func[10] <as-if-else> -> \"as-if-else\"\n - func[11] <as-select-first> -> \"as-select-first\"\n - func[12] <as-select-second> -> \"as-select-second\"\n - func[13] <as-select-cond> -> \"as-select-cond\"\n - func[15] <as-call-first> -> \"as-call-first\"\n - func[16] <as-call-mid> -> \"as-call-mid\"\n - func[17] <as-call-last> -> \"as-call-last\"\n - func[18] <as-call_indirect-first> -> \"as-call_indirect-first\"\n - func[19] <as-call_indirect-mid> -> \"as-call_indirect-mid\"\n - func[20] <as-call_indirect-last> -> \"as-call_indirect-last\"\n - func[21] <as-call_indirect-index> -> \"as-call_indirect-index\"\n - func[22] <as-local.set-value> -> \"as-local.set-value\"\n - func[23] <as-local.tee-value> -> \"as-local.tee-value\"\n - func[24] <as-global.set-value> -> \"as-global.set-value\"\n - func[25] <as-load-address> -> \"as-load-address\"\n - func[26] <as-loadN-address> -> \"as-loadN-address\"\n - func[27] <as-store-address> -> \"as-store-address\"\n - func[28] <as-store-value> -> \"as-store-value\"\n - func[29] <as-storeN-address> -> \"as-storeN-address\"\n - func[30] <as-storeN-value> -> \"as-storeN-value\"\n - func[31] <as-unary-operand> -> \"as-unary-operand\"\n - func[32] <as-binary-left> -> \"as-binary-left\"\n - func[33] <as-binary-right> -> \"as-binary-right\"\n - func[34] <as-test-operand> -> \"as-test-operand\"\n - func[35] <as-compare-left> -> \"as-compare-left\"\n - func[36] <as-compare-right> -> \"as-compare-right\"\n - func[37] <as-memory.grow-size> -> \"as-memory.grow-size\"\nElem[1]:\n - segment[0] flags=0 table=0 count=1 - init i32=0\n  - elem[0] = ref.func:14\nCode[38]:\n - func[0] size=12 <as-br-value>\n - func[1] size=12 <as-br_if-cond>\n - func[2] size=17 <as-br_if-value>\n - func[3] size=17 <as-br_if-value-cond>\n - func[4] size=15 <as-br_table-index>\n - func[5] size=19 <as-br_table-value>\n - func[6] size=18 <as-br_table-value-index>\n - func[7] size=8 <as-return-value>\n - func[8] size=15 <as-if-cond>\n - func[9] size=15 <as-if-then>\n - func[10] size=15 <as-if-else>\n - func[11] size=12 <as-select-first>\n - func[12] size=12 <as-select-second>\n - func[13] size=12 <as-select-cond>\n - func[14] size=4\n - func[15] size=13 <as-call-first>\n - func[16] size=13 <as-call-mid>\n - func[17] size=13 <as-call-last>\n - func[18] size=16 <as-call_indirect-first>\n - func[19] size=16 <as-call_indirect-mid>\n - func[20] size=16 <as-call_indirect-last>\n - func[21] size=16 <as-call_indirect-index>\n - func[22] size=11 <as-local.set-value>\n - func[23] size=11 <as-local.tee-value>\n - func[24] size=11 <as-global.set-value>\n - func[25] size=10 <as-load-address>\n - func[26] size=10 <as-loadN-address>\n - func[27] size=12 <as-store-address>\n - func[28] size=12 <as-store-value>\n - func[29] size=12 <as-storeN-address>\n - func[30] size=12 <as-storeN-value>\n - func[31] size=9 <as-unary-operand>\n - func[32] size=11 <as-binary-left>\n - func[33] size=11 <as-binary-right>\n - func[34] size=9 <as-test-operand>\n - func[35] size=11 <as-compare-left>\n - func[36] size=11 <as-compare-right>\n - func[37] size=10 <as-memory.grow-size>\n",
      "disassemble": "\nload.0.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n000324 func[0] <as-br-value>:\n 000325: 02 7f                      | block i32\n 000327: 41 00                      |   i32.const 0\n 000329: 28 02 00                   |   i32.load 2 0\n 00032c: 0c 00                      |   br 0\n 00032e: 0b                         | end\n 00032f: 0b                         | end\n000331 func[1] <as-br_if-cond>:\n 000332: 02 40                      | block\n 000334: 41 00                      |   i32.const 0\n 000336: 28 02 00                   |   i32.load 2 0\n 000339: 0d 00                      |   br_if 0\n 00033b: 0b                         | end\n 00033c: 0b                         | end\n00033e func[2] <as-br_if-value>:\n 00033f: 02 7f                      | block i32\n 000341: 41 00                      |   i32.const 0\n 000343: 28 02 00                   |   i32.load 2 0\n 000346: 41 01                      |   i32.const 1\n 000348: 0d 00                      |   br_if 0\n 00034a: 1a                         |   drop\n 00034b: 41 07                      |   i32.const 7\n 00034d: 0b                         | end\n 00034e: 0b                         | end\n000350 func[3] <as-br_if-value-cond>:\n 000351: 02 7f                      | block i32\n 000353: 41 06                      |   i32.const 6\n 000355: 41 00                      |   i32.const 0\n 000357: 28 02 00                   |   i32.load 2 0\n 00035a: 0d 00                      |   br_if 0\n 00035c: 1a                         |   drop\n 00035d: 41 07                      |   i32.const 7\n 00035f: 0b                         | end\n 000360: 0b                         | end\n000362 func[4] <as-br_table-index>:\n 000363: 02 40                      | block\n 000365: 41 00                      |   i32.const 0\n 000367: 28 02 00                   |   i32.load 2 0\n 00036a: 0e 02 00 00 00             |   br_table 0 0 0\n 00036f: 0b                         | end\n 000370: 0b                         | end\n000372 func[5] <as-br_table-value>:\n 000373: 02 7f                      | block i32\n 000375: 41 00                      |   i32.const 0\n 000377: 28 02 00                   |   i32.load 2 0\n 00037a: 41 01                      |   i32.const 1\n 00037c: 0e 02 00 00 00             |   br_table 0 0 0\n 000381: 41 07                      |   i32.const 7\n 000383: 0b                         | end\n 000384: 0b                         | end\n000386 func[6] <as-br_table-value-index>:\n 000387: 02 7f                      | block i32\n 000389: 41 06                      |   i32.const 6\n 00038b: 41 00                      |   i32.const 0\n 00038d: 28 02 00                   |   i32.load 2 0\n 000390: 0e 01 00 00                |   br_table 0 0\n 000394: 41 07                      |   i32.const 7\n 000396: 0b                         | end\n 000397: 0b                         | end\n000399 func[7] <as-return-value>:\n 00039a: 41 00                      | i32.const 0\n 00039c: 28 02 00                   | i32.load 2 0\n 00039f: 0f                         | return\n 0003a0: 0b                         | end\n0003a2 func[8] <as-if-cond>:\n 0003a3: 41 00                      | i32.const 0\n 0003a5: 28 02 00                   | i32.load 2 0\n 0003a8: 04 7f                      | if i32\n 0003aa: 41 00                      |   i32.const 0\n 0003ac: 05                         | else\n 0003ad: 41 01                      |   i32.const 1\n 0003af: 0b                         | end\n 0003b0: 0b                         | end\n0003b2 func[9] <as-if-then>:\n 0003b3: 41 01                      | i32.const 1\n 0003b5: 04 7f                      | if i32\n 0003b7: 41 00                      |   i32.const 0\n 0003b9: 28 02 00                   |   i32.load 2 0\n 0003bc: 05                         | else\n 0003bd: 41 00                      |   i32.const 0\n 0003bf: 0b                         | end\n 0003c0: 0b                         | end\n0003c2 func[10] <as-if-else>:\n 0003c3: 41 00                      | i32.const 0\n 0003c5: 04 7f                      | if i32\n 0003c7: 41 00                      |   i32.const 0\n 0003c9: 05                         | else\n 0003ca: 41 00                      |   i32.const 0\n 0003cc: 28 02 00                   |   i32.load 2 0\n 0003cf: 0b                         | end\n 0003d0: 0b                         | end\n0003d2 func[11] <as-select-first>:\n 0003d3: 41 00                      | i32.const 0\n 0003d5: 28 02 00                   | i32.load 2 0\n 0003d8: 20 00                      | local.get 0\n 0003da: 20 01                      | local.get 1\n 0003dc: 1b                         | select\n 0003dd: 0b                         | end\n0003df func[12] <as-select-second>:\n 0003e0: 20 00                      | local.get 0\n 0003e2: 41 00                      | i32.const 0\n 0003e4: 28 02 00                   | i32.load 2 0\n 0003e7: 20 01                      | local.get 1\n 0003e9: 1b                         | select\n 0003ea: 0b                         | end\n0003ec func[13] <as-select-cond>:\n 0003ed: 41 00                      | i32.const 0\n 0003ef: 41 01                      | i32.const 1\n 0003f1: 41 00                      | i32.const 0\n 0003f3: 28 02 00                   | i32.load 2 0\n 0003f6: 1b                         | select\n 0003f7: 0b                         | end\n0003f9 func[14]:\n 0003fa: 41 7f                      | i32.const 4294967295\n 0003fc: 0b                         | end\n0003fe func[15] <as-call-first>:\n 0003ff: 41 00                      | i32.const 0\n 000401: 28 02 00                   | i32.load 2 0\n 000404: 41 02                      | i32.const 2\n 000406: 41 03                      | i32.const 3\n 000408: 10 0e                      | call 14\n 00040a: 0b                         | end\n00040c func[16] <as-call-mid>:\n 00040d: 41 01                      | i32.const 1\n 00040f: 41 00                      | i32.const 0\n 000411: 28 02 00                   | i32.load 2 0\n 000414: 41 03                      | i32.const 3\n 000416: 10 0e                      | call 14\n 000418: 0b                         | end\n00041a func[17] <as-call-last>:\n 00041b: 41 01                      | i32.const 1\n 00041d: 41 02                      | i32.const 2\n 00041f: 41 00                      | i32.const 0\n 000421: 28 02 00                   | i32.load 2 0\n 000424: 10 0e                      | call 14\n 000426: 0b                         | end\n000428 func[18] <as-call_indirect-first>:\n 000429: 41 00                      | i32.const 0\n 00042b: 28 02 00                   | i32.load 2 0\n 00042e: 41 02                      | i32.const 2\n 000430: 41 03                      | i32.const 3\n 000432: 41 00                      | i32.const 0\n 000434: 11 00 00                   | call_indirect 0 (type 0)\n 000437: 0b                         | end\n000439 func[19] <as-call_indirect-mid>:\n 00043a: 41 01                      | i32.const 1\n 00043c: 41 00                      | i32.const 0\n 00043e: 28 02 00                   | i32.load 2 0\n 000441: 41 03                      | i32.const 3\n 000443: 41 00                      | i32.const 0\n 000445: 11 00 00                   | call_indirect 0 (type 0)\n 000448: 0b                         | end\n00044a func[20] <as-call_indirect-last>:\n 00044b: 41 01                      | i32.const 1\n 00044d: 41 02                      | i32.const 2\n 00044f: 41 00                      | i32.const 0\n 000451: 28 02 00                   | i32.load 2 0\n 000454: 41 00                      | i32.const 0\n 000456: 11 00 00                   | call_indirect 0 (type 0)\n 000459: 0b                         | end\n00045b func[21] <as-call_indirect-index>:\n 00045c: 41 01                      | i32.const 1\n 00045e: 41 02                      | i32.const 2\n 000460: 41 03                      | i32.const 3\n 000462: 41 00                      | i32.const 0\n 000464: 28 02 00                   | i32.load 2 0\n 000467: 11 00 00                   | call_indirect 0 (type 0)\n 00046a: 0b                         | end\n00046c func[22] <as-local.set-value>:\n 00046d: 01 7f                      | local[0] type=i32\n 00046f: 41 00                      | i32.const 0\n 000471: 28 02 00                   | i32.load 2 0\n 000474: 21 00                      | local.set 0\n 000476: 0b                         | end\n000478 func[23] <as-local.tee-value>:\n 000479: 01 7f                      | local[0] type=i32\n 00047b: 41 00                      | i32.const 0\n 00047d: 28 02 00                   | i32.load 2 0\n 000480: 22 00                      | local.tee 0\n 000482: 0b                         | end\n000484 func[24] <as-global.set-value>:\n 000485: 01 7f                      | local[0] type=i32\n 000487: 41 00                      | i32.const 0\n 000489: 28 02 00                   | i32.load 2 0\n 00048c: 24 00                      | global.set 0\n 00048e: 0b                         | end\n000490 func[25] <as-load-address>:\n 000491: 41 00                      | i32.const 0\n 000493: 28 02 00                   | i32.load 2 0\n 000496: 28 02 00                   | i32.load 2 0\n 000499: 0b                         | end\n00049b func[26] <as-loadN-address>:\n 00049c: 41 00                      | i32.const 0\n 00049e: 28 02 00                   | i32.load 2 0\n 0004a1: 2c 00 00                   | i32.load8_s 0 0\n 0004a4: 0b                         | end\n0004a6 func[27] <as-store-address>:\n 0004a7: 41 00                      | i32.const 0\n 0004a9: 28 02 00                   | i32.load 2 0\n 0004ac: 41 07                      | i32.const 7\n 0004ae: 36 02 00                   | i32.store 2 0\n 0004b1: 0b                         | end\n0004b3 func[28] <as-store-value>:\n 0004b4: 41 02                      | i32.const 2\n 0004b6: 41 00                      | i32.const 0\n 0004b8: 28 02 00                   | i32.load 2 0\n 0004bb: 36 02 00                   | i32.store 2 0\n 0004be: 0b                         | end\n0004c0 func[29] <as-storeN-address>:\n 0004c1: 41 00                      | i32.const 0\n 0004c3: 2c 00 00                   | i32.load8_s 0 0\n 0004c6: 41 07                      | i32.const 7\n 0004c8: 3a 00 00                   | i32.store8 0 0\n 0004cb: 0b                         | end\n0004cd func[30] <as-storeN-value>:\n 0004ce: 41 02                      | i32.const 2\n 0004d0: 41 00                      | i32.const 0\n 0004d2: 28 02 00                   | i32.load 2 0\n 0004d5: 3b 01 00                   | i32.store16 1 0\n 0004d8: 0b                         | end\n0004da func[31] <as-unary-operand>:\n 0004db: 41 e4 00                   | i32.const 100\n 0004de: 28 02 00                   | i32.load 2 0\n 0004e1: 67                         | i32.clz\n 0004e2: 0b                         | end\n0004e4 func[32] <as-binary-left>:\n 0004e5: 41 e4 00                   | i32.const 100\n 0004e8: 28 02 00                   | i32.load 2 0\n 0004eb: 41 0a                      | i32.const 10\n 0004ed: 6a                         | i32.add\n 0004ee: 0b                         | end\n0004f0 func[33] <as-binary-right>:\n 0004f1: 41 0a                      | i32.const 10\n 0004f3: 41 e4 00                   | i32.const 100\n 0004f6: 28 02 00                   | i32.load 2 0\n 0004f9: 6b                         | i32.sub\n 0004fa: 0b                         | end\n0004fc func[34] <as-test-operand>:\n 0004fd: 41 e4 00                   | i32.const 100\n 000500: 28 02 00                   | i32.load 2 0\n 000503: 45                         | i32.eqz\n 000504: 0b                         | end\n000506 func[35] <as-compare-left>:\n 000507: 41 e4 00                   | i32.const 100\n 00050a: 28 02 00                   | i32.load 2 0\n 00050d: 41 0a                      | i32.const 10\n 00050f: 4c                         | i32.le_s\n 000510: 0b                         | end\n000512 func[36] <as-compare-right>:\n 000513: 41 0a                      | i32.const 10\n 000515: 41 e4 00                   | i32.const 100\n 000518: 28 02 00                   | i32.load 2 0\n 00051b: 47                         | i32.ne\n 00051c: 0b                         | end\n00051e func[37] <as-memory.grow-size>:\n 00051f: 41 e4 00                   | i32.const 100\n 000522: 28 02 00                   | i32.load 2 0\n 000525: 40 00                      | memory.grow 0\n 000527: 0b                         | end\n"
    }
  }
}
