{
  "bin": {
    "table_set.0.wasm": "AGFzbQEAAAABIgdgAABgAX8Bb2ABfwFwYAJ/bwBgAn9wAGACf38AYAF/AX8DCAcAAQIDBAUGBAcCbwABcAACB2IGDWdldC1leHRlcm5yZWYAAQtnZXQtZnVuY3JlZgACDXNldC1leHRlcm5yZWYAAwtzZXQtZnVuY3JlZgAEEHNldC1mdW5jcmVmLWZyb20ABQ9pc19udWxsLWZ1bmNyZWYABgkJAQIBQQELAAEACjcHAgALBgAgACUACwYAIAAlAQsIACAAIAEmAAsIACAAIAEmAQsKACAAIAElASYBCwcAIAAQAtEL",
    "table_set.1.wasm": "AGFzbQEAAAABBAFgAAADAgEABAQBbwAKCgYBBAAmAAs=",
    "table_set.2.wasm": "AGFzbQEAAAABBAFgAAADAgEABAQBbwAKCggBBgDQbyYACw==",
    "table_set.3.wasm": "AGFzbQEAAAABBAFgAAADAgEABAQBbwAKCggBBgBBASYACw==",
    "table_set.4.wasm": "AGFzbQEAAAABBAFgAAADAgEABAQBbwAKCg0BCwBDAACAP9BvJgAL",
    "table_set.5.wasm": "AGFzbQEAAAABBQFgAW8AAwIBAAQEAXAACgoKAQgAQQEgACYACw==",
    "table_set.6.wasm": "AGFzbQEAAAABBQFgAW8AAwIBAAQHAm8AAXAAAQoKAQgAQQAgACYBCw==",
    "table_set.7.wasm": "AGFzbQEAAAABBQFgAAF/AwIBAAQEAW8ACgoKAQgAQQDQbyYACw=="
  },
  "spec": {"source_filename": "/workspace/wasm-spec/test/core/table_set.wast",
 "commands": [
  {"type": "module", "line": 1, "filename": "table_set.0.wasm"}, 
  {"type": "assert_return", "line": 29, "action": {"type": "invoke", "field": "get-externref", "args": [{"type": "i32", "value": "0"}]}, "expected": [{"type": "externref", "value": "null"}]}, 
  {"type": "assert_return", "line": 30, "action": {"type": "invoke", "field": "set-externref", "args": [{"type": "i32", "value": "0"}, {"type": "externref", "value": "1"}]}, "expected": []}, 
  {"type": "assert_return", "line": 31, "action": {"type": "invoke", "field": "get-externref", "args": [{"type": "i32", "value": "0"}]}, "expected": [{"type": "externref", "value": "1"}]}, 
  {"type": "assert_return", "line": 32, "action": {"type": "invoke", "field": "set-externref", "args": [{"type": "i32", "value": "0"}, {"type": "externref", "value": "null"}]}, "expected": []}, 
  {"type": "assert_return", "line": 33, "action": {"type": "invoke", "field": "get-externref", "args": [{"type": "i32", "value": "0"}]}, "expected": [{"type": "externref", "value": "null"}]}, 
  {"type": "assert_return", "line": 35, "action": {"type": "invoke", "field": "get-funcref", "args": [{"type": "i32", "value": "0"}]}, "expected": [{"type": "funcref", "value": "null"}]}, 
  {"type": "assert_return", "line": 36, "action": {"type": "invoke", "field": "set-funcref-from", "args": [{"type": "i32", "value": "0"}, {"type": "i32", "value": "1"}]}, "expected": []}, 
  {"type": "assert_return", "line": 37, "action": {"type": "invoke", "field": "is_null-funcref", "args": [{"type": "i32", "value": "0"}]}, "expected": [{"type": "i32", "value": "0"}]}, 
  {"type": "assert_return", "line": 38, "action": {"type": "invoke", "field": "set-funcref", "args": [{"type": "i32", "value": "0"}, {"type": "funcref", "value": "null"}]}, "expected": []}, 
  {"type": "assert_return", "line": 39, "action": {"type": "invoke", "field": "get-funcref", "args": [{"type": "i32", "value": "0"}]}, "expected": [{"type": "funcref", "value": "null"}]}, 
  {"type": "assert_trap", "line": 41, "action": {"type": "invoke", "field": "set-externref", "args": [{"type": "i32", "value": "2"}, {"type": "externref", "value": "null"}]}, "text": "out of bounds table access", "expected": []}, 
  {"type": "assert_trap", "line": 42, "action": {"type": "invoke", "field": "set-funcref", "args": [{"type": "i32", "value": "3"}, {"type": "funcref", "value": "null"}]}, "text": "out of bounds table access", "expected": []}, 
  {"type": "assert_trap", "line": 43, "action": {"type": "invoke", "field": "set-externref", "args": [{"type": "i32", "value": "4294967295"}, {"type": "externref", "value": "null"}]}, "text": "out of bounds table access", "expected": []}, 
  {"type": "assert_trap", "line": 44, "action": {"type": "invoke", "field": "set-funcref", "args": [{"type": "i32", "value": "4294967295"}, {"type": "funcref", "value": "null"}]}, "text": "out of bounds table access", "expected": []}, 
  {"type": "assert_trap", "line": 46, "action": {"type": "invoke", "field": "set-externref", "args": [{"type": "i32", "value": "2"}, {"type": "externref", "value": "0"}]}, "text": "out of bounds table access", "expected": []}, 
  {"type": "assert_trap", "line": 47, "action": {"type": "invoke", "field": "set-funcref-from", "args": [{"type": "i32", "value": "3"}, {"type": "i32", "value": "1"}]}, "text": "out of bounds table access", "expected": []}, 
  {"type": "assert_trap", "line": 48, "action": {"type": "invoke", "field": "set-externref", "args": [{"type": "i32", "value": "4294967295"}, {"type": "externref", "value": "0"}]}, "text": "out of bounds table access", "expected": []}, 
  {"type": "assert_trap", "line": 49, "action": {"type": "invoke", "field": "set-funcref-from", "args": [{"type": "i32", "value": "4294967295"}, {"type": "i32", "value": "1"}]}, "text": "out of bounds table access", "expected": []}, 
  {"type": "assert_invalid", "line": 55, "filename": "table_set.1.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 64, "filename": "table_set.2.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 73, "filename": "table_set.3.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 82, "filename": "table_set.4.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 91, "filename": "table_set.5.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 101, "filename": "table_set.6.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 112, "filename": "table_set.7.wasm", "text": "type mismatch", "module_type": "binary"}]},
  "code": [
    "(module (table $t2 1 externref) (table $t3 2 funcref) (elem (table $t3) (i32.const 1) $dummy)\n  (func $dummy)\n  (func (export \"get-externref\") (param $i i32) (result externref) (table.get $t2 (local.get $i)) )\n  (func $f3 (export \"get-funcref\") (param $i i32) (result funcref) (table.get $t3 (local.get $i)) )\n  (func (export \"set-externref\") (param $i i32) (param $r externref) (table.set (local.get $i) (local.get $r)) )\n  (func (export \"set-funcref\") (param $i i32) (param $r funcref) (table.set $t3 (local.get $i) (local.get $r)) )\n  (func (export \"set-funcref-from\") (param $i i32) (param $j i32) (table.set $t3 (local.get $i) (table.get $t3 (local.get $j))) )\n  (func (export \"is_null-funcref\") (param $i i32) (result i32) (ref.is_null (call $f3 (local.get $i))) ))",
    "(assert_return (invoke \"get-externref\" (i32.const 0)) (ref.null extern))",
    "(assert_return (invoke \"set-externref\" (i32.const 0) (ref.extern 1)))",
    "(assert_return (invoke \"get-externref\" (i32.const 0)) (ref.extern 1))",
    "(assert_return (invoke \"set-externref\" (i32.const 0) (ref.null extern)))",
    "(assert_return (invoke \"get-externref\" (i32.const 0)) (ref.null extern))",
    "(assert_return (invoke \"get-funcref\" (i32.const 0)) (ref.null func))",
    "(assert_return (invoke \"set-funcref-from\" (i32.const 0) (i32.const 1)))",
    "(assert_return (invoke \"is_null-funcref\" (i32.const 0)) (i32.const 0))",
    "(assert_return (invoke \"set-funcref\" (i32.const 0) (ref.null func)))",
    "(assert_return (invoke \"get-funcref\" (i32.const 0)) (ref.null func))",
    "(assert_trap (invoke \"set-externref\" (i32.const 2) (ref.null extern)) \"out of bounds table access\")",
    "(assert_trap (invoke \"set-funcref\" (i32.const 3) (ref.null func)) \"out of bounds table access\")",
    "(assert_trap (invoke \"set-externref\" (i32.const -1) (ref.null extern)) \"out of bounds table access\")",
    "(assert_trap (invoke \"set-funcref\" (i32.const -1) (ref.null func)) \"out of bounds table access\")",
    "(assert_trap (invoke \"set-externref\" (i32.const 2) (ref.extern 0)) \"out of bounds table access\")",
    "(assert_trap (invoke \"set-funcref-from\" (i32.const 3) (i32.const 1)) \"out of bounds table access\")",
    "(assert_trap (invoke \"set-externref\" (i32.const -1) (ref.extern 0)) \"out of bounds table access\")",
    "(assert_trap (invoke \"set-funcref-from\" (i32.const -1) (i32.const 1)) \"out of bounds table access\")",
    "(assert_invalid (module (table $t 10 externref) (func $type-index-value-empty-vs-i32-externref (table.set $t) ) ) \"type mismatch\")",
    "(assert_invalid (module (table $t 10 externref) (func $type-index-empty-vs-i32 (table.set $t (ref.null extern)) ) ) \"type mismatch\")",
    "(assert_invalid (module (table $t 10 externref) (func $type-value-empty-vs-externref (table.set $t (i32.const 1)) ) ) \"type mismatch\")",
    "(assert_invalid (module (table $t 10 externref) (func $type-size-f32-vs-i32 (table.set $t (f32.const 1) (ref.null extern)) ) ) \"type mismatch\")",
    "(assert_invalid (module (table $t 10 funcref) (func $type-value-externref-vs-funcref (param $r externref) (table.set $t (i32.const 1) (local.get $r)) ) ) \"type mismatch\")",
    "(assert_invalid (module (table $t1 1 externref) (table $t2 1 funcref) (func $type-value-externref-vs-funcref-multi (param $r externref) (table.set $t2 (i32.const 0) (local.get $r)) ) ) \"type mismatch\")",
    "(assert_invalid (module (table $t 10 externref) (func $type-result-empty-vs-num (result i32) (table.set $t (i32.const 0) (ref.null extern)) ) ) \"type mismatch\")"
  ],
  "dump": {
    "table_set.0.wasm": {
      "header": "\ntable_set.0.wasm:\tfile format wasm 0x1\n\nSections:\n\n     Type start=0x0000000a end=0x0000002c (size=0x00000022) count: 7\n Function start=0x0000002e end=0x00000036 (size=0x00000008) count: 7\n    Table start=0x00000038 end=0x0000003f (size=0x00000007) count: 2\n   Export start=0x00000041 end=0x000000a3 (size=0x00000062) count: 6\n     Elem start=0x000000a5 end=0x000000ae (size=0x00000009) count: 1\n     Code start=0x000000b0 end=0x000000e7 (size=0x00000037) count: 7\n",
      "details": "\ntable_set.0.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nType[7]:\n - type[0] () -> nil\n - type[1] (i32) -> externref\n - type[2] (i32) -> funcref\n - type[3] (i32, externref) -> nil\n - type[4] (i32, funcref) -> nil\n - type[5] (i32, i32) -> nil\n - type[6] (i32) -> i32\nFunction[7]:\n - func[0] sig=0\n - func[1] sig=1 <get-externref>\n - func[2] sig=2 <get-funcref>\n - func[3] sig=3 <set-externref>\n - func[4] sig=4 <set-funcref>\n - func[5] sig=5 <set-funcref-from>\n - func[6] sig=6 <is_null-funcref>\nTable[2]:\n - table[0] type=externref initial=1\n - table[1] type=funcref initial=2\nExport[6]:\n - func[1] <get-externref> -> \"get-externref\"\n - func[2] <get-funcref> -> \"get-funcref\"\n - func[3] <set-externref> -> \"set-externref\"\n - func[4] <set-funcref> -> \"set-funcref\"\n - func[5] <set-funcref-from> -> \"set-funcref-from\"\n - func[6] <is_null-funcref> -> \"is_null-funcref\"\nElem[1]:\n - segment[0] flags=2 table=1 count=1 - init i32=1\n  - elem[1] = ref.func:0\nCode[7]:\n - func[0] size=2\n - func[1] size=6 <get-externref>\n - func[2] size=6 <get-funcref>\n - func[3] size=8 <set-externref>\n - func[4] size=8 <set-funcref>\n - func[5] size=10 <set-funcref-from>\n - func[6] size=7 <is_null-funcref>\n",
      "disassemble": "\ntable_set.0.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n0000b2 func[0]:\n 0000b3: 0b                         | end\n0000b5 func[1] <get-externref>:\n 0000b6: 20 00                      | local.get 0\n 0000b8: 25 00                      | table.get 0\n 0000ba: 0b                         | end\n0000bc func[2] <get-funcref>:\n 0000bd: 20 00                      | local.get 0\n 0000bf: 25 01                      | table.get 1\n 0000c1: 0b                         | end\n0000c3 func[3] <set-externref>:\n 0000c4: 20 00                      | local.get 0\n 0000c6: 20 01                      | local.get 1\n 0000c8: 26 00                      | table.set 0\n 0000ca: 0b                         | end\n0000cc func[4] <set-funcref>:\n 0000cd: 20 00                      | local.get 0\n 0000cf: 20 01                      | local.get 1\n 0000d1: 26 01                      | table.set 1\n 0000d3: 0b                         | end\n0000d5 func[5] <set-funcref-from>:\n 0000d6: 20 00                      | local.get 0\n 0000d8: 20 01                      | local.get 1\n 0000da: 25 01                      | table.get 1\n 0000dc: 26 01                      | table.set 1\n 0000de: 0b                         | end\n0000e0 func[6] <is_null-funcref>:\n 0000e1: 20 00                      | local.get 0\n 0000e3: 10 02                      | call 2 <get-funcref>\n 0000e5: d1                         | ref.is_null\n 0000e6: 0b                         | end\n"
    }
  }
}
