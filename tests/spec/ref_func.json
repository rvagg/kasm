{
  "bin": {
    "ref_func.0.wasm": "AGFzbQEAAAABBgFgAX8BfwMCAQAHBQEBZgAACgYBBAAgAAs=",
    "ref_func.1.wasm": "AGFzbQEAAAABDQNgAX8Bf2AAAGAAAX8CBwEBTQFmAAADDw4AAQEBAQECAgIBAQAAAAQEAXAAAQYaBXAA0gALcADSAQtwAdIAC3AA0gMLcADSBAsHUAgJaXNfbnVsbC1mAAcJaXNfbnVsbC1nAAgJaXNfbnVsbC12AAkFc2V0LWYACgVzZXQtZwALBmNhbGwtZgAMBmNhbGwtZwANBmNhbGwtdgAOCRADAwACAwUDAAIEBgMAAgABCm4OBwAgAEEBagsIANIFGtIGGgsCAAsCAAsCAAsCAAsFANIA0QsFANIB0QsFACMC0QsGANIAJAILBgDSASQCCw8AQQDSACYAIABBABEAAAsPAEEA0gEmACAAQQARAAALDwBBACMCJgAgAEEAEQAACw==",
    "ref_func.2.wasm": "AGFzbQEAAAABBgFgAX8BfwINAgFNAWYAAAFNAWcAAAYGAXAA0gcL",
    "ref_func.3.wasm": "AGFzbQEAAAABBAFgAAADCAcAAAAAAAAABAQBcAABBgYBcADSAAsHBQEBZgABCRUEAEEACwECAEEACwEDAQABBAEAAQUKIwcCAAsCAAsCAAsCAAsCAAsCAAsPANIA0gHSAtID0gTSBQ8L",
    "ref_func.4.wasm": "AGFzbQEAAAABBAFgAAADAgEACgcBBQDSABoL",
    "ref_func.5.wasm": "AGFzbQEAAAABBAFgAAADAgEACAEACgcBBQDSABoL"
  },
  "spec": {"source_filename": "/workspace/wasm-spec/test/core/ref_func.wast",
 "commands": [
  {"type": "module", "line": 1, "filename": "ref_func.0.wasm"}, 
  {"type": "register", "line": 4, "as": "M"}, 
  {"type": "module", "line": 6, "filename": "ref_func.1.wasm"}, 
  {"type": "assert_return", "line": 56, "action": {"type": "invoke", "field": "is_null-f", "args": []}, "expected": [{"type": "i32", "value": "0"}]}, 
  {"type": "assert_return", "line": 57, "action": {"type": "invoke", "field": "is_null-g", "args": []}, "expected": [{"type": "i32", "value": "0"}]}, 
  {"type": "assert_return", "line": 58, "action": {"type": "invoke", "field": "is_null-v", "args": []}, "expected": [{"type": "i32", "value": "0"}]}, 
  {"type": "assert_return", "line": 60, "action": {"type": "invoke", "field": "call-f", "args": [{"type": "i32", "value": "4"}]}, "expected": [{"type": "i32", "value": "4"}]}, 
  {"type": "assert_return", "line": 61, "action": {"type": "invoke", "field": "call-g", "args": [{"type": "i32", "value": "4"}]}, "expected": [{"type": "i32", "value": "5"}]}, 
  {"type": "assert_return", "line": 62, "action": {"type": "invoke", "field": "call-v", "args": [{"type": "i32", "value": "4"}]}, "expected": [{"type": "i32", "value": "4"}]}, 
  {"type": "action", "line": 63, "action": {"type": "invoke", "field": "set-g", "args": []}, "expected": []}, 
  {"type": "assert_return", "line": 64, "action": {"type": "invoke", "field": "call-v", "args": [{"type": "i32", "value": "4"}]}, "expected": [{"type": "i32", "value": "5"}]}, 
  {"type": "action", "line": 65, "action": {"type": "invoke", "field": "set-f", "args": []}, "expected": []}, 
  {"type": "assert_return", "line": 66, "action": {"type": "invoke", "field": "call-v", "args": [{"type": "i32", "value": "4"}]}, "expected": [{"type": "i32", "value": "4"}]}, 
  {"type": "assert_invalid", "line": 69, "filename": "ref_func.2.wasm", "text": "unknown function 7", "module_type": "binary"}, 
  {"type": "module", "line": 80, "filename": "ref_func.3.wasm"}, 
  {"type": "assert_invalid", "line": 109, "filename": "ref_func.4.wasm", "text": "undeclared function reference", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 113, "filename": "ref_func.5.wasm", "text": "undeclared function reference", "module_type": "binary"}]},
  "code": [
    "(module \n  (func (export \"f\") (param $x i32) (result i32) (local.get $x)))",
    "(register \"M\")",
    "(module \n  (func $f (import \"M\" \"f\") (param i32) (result i32))\n  (func $g (param $x i32) (result i32) (i32.add (local.get $x) (i32.const 1)) ) (global funcref (ref.func $f)) (global funcref (ref.func $g)) (global $v (mut funcref) (ref.func $f)) (global funcref (ref.func $gf1)) (global funcref (ref.func $gf2))\n  (func (drop (ref.func $ff1)) (drop (ref.func $ff2))) (elem declare $gf1 $ff1) (elem declare funcref (ref.func $gf2) (ref.func $ff2))\n  (func $gf1)\n  (func $gf2)\n  (func $ff1)\n  (func $ff2)\n  (func (export \"is_null-f\") (result i32) (ref.is_null (ref.func $f)) )\n  (func (export \"is_null-g\") (result i32) (ref.is_null (ref.func $g)) )\n  (func (export \"is_null-v\") (result i32) (ref.is_null (global.get $v)) )\n  (func (export \"set-f\") (global.set $v (ref.func $f)))\n  (func (export \"set-g\") (global.set $v (ref.func $g))) (table $t 1 funcref) (elem declare $f $g)\n  (func (export \"call-f\") (param $x i32) (result i32) (table.set $t (i32.const 0) (ref.func $f)) (call_indirect $t (param i32) (result i32) (local.get $x) (i32.const 0)) )\n  (func (export \"call-g\") (param $x i32) (result i32) (table.set $t (i32.const 0) (ref.func $g)) (call_indirect $t (param i32) (result i32) (local.get $x) (i32.const 0)) )\n  (func (export \"call-v\") (param $x i32) (result i32) (table.set $t (i32.const 0) (global.get $v)) (call_indirect $t (param i32) (result i32) (local.get $x) (i32.const 0)) ))",
    "(assert_return (invoke \"is_null-f\") (i32.const 0))",
    "(assert_return (invoke \"is_null-g\") (i32.const 0))",
    "(assert_return (invoke \"is_null-v\") (i32.const 0))",
    "(assert_return (invoke \"call-f\" (i32.const 4)) (i32.const 4))",
    "(assert_return (invoke \"call-g\" (i32.const 4)) (i32.const 5))",
    "(assert_return (invoke \"call-v\" (i32.const 4)) (i32.const 4))",
    "(invoke \"set-g\")",
    "(assert_return (invoke \"call-v\" (i32.const 4)) (i32.const 5))",
    "(invoke \"set-f\")",
    "(assert_return (invoke \"call-v\" (i32.const 4)) (i32.const 4))",
    "(assert_invalid (module (func $f (import \"M\" \"f\") (param i32) (result i32)) (func $g (import \"M\" \"g\") (param i32) (result i32)) (global funcref (ref.func 7)) ) \"unknown function 7\")",
    "(module \n  (func $f1)\n  (func $f2)\n  (func $f3)\n  (func $f4)\n  (func $f5)\n  (func $f6) (table $t 1 funcref) (global funcref (ref.func $f1)) (export \"f\" (func $f2)) (elem (table $t) (i32.const 0) $f3) (elem (table $t) (i32.const 0) funcref (ref.func $f4)) (elem $f5) (elem funcref (ref.func $f6))\n  (func (ref.func $f1) (ref.func $f2) (ref.func $f3) (ref.func $f4) (ref.func $f5) (ref.func $f6) (return) ))",
    "(assert_invalid (module (func $f (drop (ref.func $f)))) \"undeclared function reference\")",
    "(assert_invalid (module (start $f) (func $f (drop (ref.func $f)))) \"undeclared function reference\")"
  ],
  "dump": {
    "ref_func.0.wasm": {
      "header": "\nref_func.0.wasm:\tfile format wasm 0x1\n\nSections:\n\n     Type start=0x0000000a end=0x00000010 (size=0x00000006) count: 1\n Function start=0x00000012 end=0x00000014 (size=0x00000002) count: 1\n   Export start=0x00000016 end=0x0000001b (size=0x00000005) count: 1\n     Code start=0x0000001d end=0x00000023 (size=0x00000006) count: 1\n",
      "details": "\nref_func.0.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nType[1]:\n - type[0] (i32) -> i32\nFunction[1]:\n - func[0] sig=0 <f>\nExport[1]:\n - func[0] <f> -> \"f\"\nCode[1]:\n - func[0] size=4 <f>\n",
      "disassemble": "\nref_func.0.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n00001f func[0] <f>:\n 000020: 20 00                      | local.get 0\n 000022: 0b                         | end\n"
    },
    "ref_func.1.wasm": {
      "header": "\nref_func.1.wasm:\tfile format wasm 0x1\n\nSections:\n\n     Type start=0x0000000a end=0x00000017 (size=0x0000000d) count: 3\n   Import start=0x00000019 end=0x00000020 (size=0x00000007) count: 1\n Function start=0x00000022 end=0x00000031 (size=0x0000000f) count: 14\n    Table start=0x00000033 end=0x00000037 (size=0x00000004) count: 1\n   Global start=0x00000039 end=0x00000053 (size=0x0000001a) count: 5\n   Export start=0x00000055 end=0x000000a5 (size=0x00000050) count: 8\n     Elem start=0x000000a7 end=0x000000b7 (size=0x00000010) count: 3\n     Code start=0x000000b9 end=0x00000127 (size=0x0000006e) count: 14\n",
      "details": "\nref_func.1.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nType[3]:\n - type[0] (i32) -> i32\n - type[1] () -> nil\n - type[2] () -> i32\nImport[1]:\n - func[0] sig=0 <M.f> <- M.f\nFunction[14]:\n - func[1] sig=0\n - func[2] sig=1\n - func[3] sig=1\n - func[4] sig=1\n - func[5] sig=1\n - func[6] sig=1\n - func[7] sig=2 <is_null-f>\n - func[8] sig=2 <is_null-g>\n - func[9] sig=2 <is_null-v>\n - func[10] sig=1 <set-f>\n - func[11] sig=1 <set-g>\n - func[12] sig=0 <call-f>\n - func[13] sig=0 <call-g>\n - func[14] sig=0 <call-v>\nTable[1]:\n - table[0] type=funcref initial=1\nGlobal[5]:\n - global[0] funcref mutable=0 - init ref.func:0 <M.f>\n - global[1] funcref mutable=0 - init ref.func:1\n - global[2] funcref mutable=1 - init ref.func:0 <M.f>\n - global[3] funcref mutable=0 - init ref.func:3\n - global[4] funcref mutable=0 - init ref.func:4\nExport[8]:\n - func[7] <is_null-f> -> \"is_null-f\"\n - func[8] <is_null-g> -> \"is_null-g\"\n - func[9] <is_null-v> -> \"is_null-v\"\n - func[10] <set-f> -> \"set-f\"\n - func[11] <set-g> -> \"set-g\"\n - func[12] <call-f> -> \"call-f\"\n - func[13] <call-g> -> \"call-g\"\n - func[14] <call-v> -> \"call-v\"\nElem[3]:\n - segment[0] flags=3 table=0 count=2\n  - elem[0] = ref.func:3\n  - elem[1] = ref.func:5\n - segment[1] flags=3 table=0 count=2\n  - elem[0] = ref.func:4\n  - elem[1] = ref.func:6\n - segment[2] flags=3 table=0 count=2\n  - elem[0] = ref.func:0 <M.f>\n  - elem[1] = ref.func:1\nCode[14]:\n - func[1] size=7\n - func[2] size=8\n - func[3] size=2\n - func[4] size=2\n - func[5] size=2\n - func[6] size=2\n - func[7] size=5 <is_null-f>\n - func[8] size=5 <is_null-g>\n - func[9] size=5 <is_null-v>\n - func[10] size=6 <set-f>\n - func[11] size=6 <set-g>\n - func[12] size=15 <call-f>\n - func[13] size=15 <call-g>\n - func[14] size=15 <call-v>\n",
      "disassemble": "\nref_func.1.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n0000bb func[1]:\n 0000bc: 20 00                      | local.get 0\n 0000be: 41 01                      | i32.const 1\n 0000c0: 6a                         | i32.add\n 0000c1: 0b                         | end\n0000c3 func[2]:\n 0000c4: d2 05                      | ref.func 5\n 0000c6: 1a                         | drop\n 0000c7: d2 06                      | ref.func 6\n 0000c9: 1a                         | drop\n 0000ca: 0b                         | end\n0000cc func[3]:\n 0000cd: 0b                         | end\n0000cf func[4]:\n 0000d0: 0b                         | end\n0000d2 func[5]:\n 0000d3: 0b                         | end\n0000d5 func[6]:\n 0000d6: 0b                         | end\n0000d8 func[7] <is_null-f>:\n 0000d9: d2 00                      | ref.func 0\n 0000db: d1                         | ref.is_null\n 0000dc: 0b                         | end\n0000de func[8] <is_null-g>:\n 0000df: d2 01                      | ref.func 1\n 0000e1: d1                         | ref.is_null\n 0000e2: 0b                         | end\n0000e4 func[9] <is_null-v>:\n 0000e5: 23 02                      | global.get 2\n 0000e7: d1                         | ref.is_null\n 0000e8: 0b                         | end\n0000ea func[10] <set-f>:\n 0000eb: d2 00                      | ref.func 0\n 0000ed: 24 02                      | global.set 2\n 0000ef: 0b                         | end\n0000f1 func[11] <set-g>:\n 0000f2: d2 01                      | ref.func 1\n 0000f4: 24 02                      | global.set 2\n 0000f6: 0b                         | end\n0000f8 func[12] <call-f>:\n 0000f9: 41 00                      | i32.const 0\n 0000fb: d2 00                      | ref.func 0\n 0000fd: 26 00                      | table.set 0\n 0000ff: 20 00                      | local.get 0\n 000101: 41 00                      | i32.const 0\n 000103: 11 00 00                   | call_indirect 0 (type 0)\n 000106: 0b                         | end\n000108 func[13] <call-g>:\n 000109: 41 00                      | i32.const 0\n 00010b: d2 01                      | ref.func 1\n 00010d: 26 00                      | table.set 0\n 00010f: 20 00                      | local.get 0\n 000111: 41 00                      | i32.const 0\n 000113: 11 00 00                   | call_indirect 0 (type 0)\n 000116: 0b                         | end\n000118 func[14] <call-v>:\n 000119: 41 00                      | i32.const 0\n 00011b: 23 02                      | global.get 2\n 00011d: 26 00                      | table.set 0\n 00011f: 20 00                      | local.get 0\n 000121: 41 00                      | i32.const 0\n 000123: 11 00 00                   | call_indirect 0 (type 0)\n 000126: 0b                         | end\n"
    },
    "ref_func.3.wasm": {
      "header": "\nref_func.3.wasm:\tfile format wasm 0x1\n\nSections:\n\n     Type start=0x0000000a end=0x0000000e (size=0x00000004) count: 1\n Function start=0x00000010 end=0x00000018 (size=0x00000008) count: 7\n    Table start=0x0000001a end=0x0000001e (size=0x00000004) count: 1\n   Global start=0x00000020 end=0x00000026 (size=0x00000006) count: 1\n   Export start=0x00000028 end=0x0000002d (size=0x00000005) count: 1\n     Elem start=0x0000002f end=0x00000044 (size=0x00000015) count: 4\n     Code start=0x00000046 end=0x00000069 (size=0x00000023) count: 7\n",
      "details": "\nref_func.3.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nType[1]:\n - type[0] () -> nil\nFunction[7]:\n - func[0] sig=0\n - func[1] sig=0 <f>\n - func[2] sig=0\n - func[3] sig=0\n - func[4] sig=0\n - func[5] sig=0\n - func[6] sig=0\nTable[1]:\n - table[0] type=funcref initial=1\nGlobal[1]:\n - global[0] funcref mutable=0 - init ref.func:0\nExport[1]:\n - func[1] <f> -> \"f\"\nElem[4]:\n - segment[0] flags=0 table=0 count=1 - init i32=0\n  - elem[0] = ref.func:2\n - segment[1] flags=0 table=0 count=1 - init i32=0\n  - elem[0] = ref.func:3\n - segment[2] flags=1 table=0 count=1\n  - elem[0] = ref.func:4\n - segment[3] flags=1 table=0 count=1\n  - elem[0] = ref.func:5\nCode[7]:\n - func[0] size=2\n - func[1] size=2 <f>\n - func[2] size=2\n - func[3] size=2\n - func[4] size=2\n - func[5] size=2\n - func[6] size=15\n",
      "disassemble": "\nref_func.3.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n000048 func[0]:\n 000049: 0b                         | end\n00004b func[1] <f>:\n 00004c: 0b                         | end\n00004e func[2]:\n 00004f: 0b                         | end\n000051 func[3]:\n 000052: 0b                         | end\n000054 func[4]:\n 000055: 0b                         | end\n000057 func[5]:\n 000058: 0b                         | end\n00005a func[6]:\n 00005b: d2 00                      | ref.func 0\n 00005d: d2 01                      | ref.func 1\n 00005f: d2 02                      | ref.func 2\n 000061: d2 03                      | ref.func 3\n 000063: d2 04                      | ref.func 4\n 000065: d2 05                      | ref.func 5\n 000067: 0f                         | return\n 000068: 0b                         | end\n"
    }
  }
}
