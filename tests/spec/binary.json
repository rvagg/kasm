{
  "bin": {
    "binary.0.wasm": "AGFzbQEAAAA=",
    "binary.1.wasm": "AGFzbQEAAAA=",
    "binary.10.wasm": "bXNhAAAAAAE=",
    "binary.100.wasm": "AGFzbQEAAAABBAFgAAADAgEABAQBcAABCQcCAEEACwEA",
    "binary.101.wasm": "AGFzbQEAAAABBAFgAAADAgEABAQBcAABCQoCAEEACwEAAEEA",
    "binary.102.wasm": "AGFzbQEAAAABBAFgAAADAgEABAQBcAABCQ0BAEEACwEAAEEACwEACgQBAgAL",
    "binary.103.wasm": "AGFzbQEAAAAFAwEAAQsBAA==",
    "binary.104.wasm": "AGFzbQEAAAAFAwEAAQsHAgBBAAsBYQ==",
    "binary.105.wasm": "AGFzbQEAAAAFAwEAAQsNAQBBAAsBYQBBAQsBYg==",
    "binary.106.wasm": "AGFzbQEAAAAFAwEAAQsMAQBBAwsHYWJjZGVm",
    "binary.107.wasm": "AGFzbQEAAAAFAwEAAQsMAQBBAAsFYWJjZGVm",
    "binary.108.wasm": "AGFzbQEAAAABBAFgAAADAgEAChEBDwACQEEBBEBBAQ4AAgsLCw==",
    "binary.109.wasm": "AGFzbQEAAAABJQxgAABgAABgAABgAABgAABgAABgAABgAABgAABgAABgAABgAAADAgEAChMBEQACQEEBBEBBAQ4BAAECCwsL",
    "binary.11.wasm": "YXNtAQAAAAA=",
    "binary.110.wasm": "AGFzbQEAAAABBAFgAAADAgEACAEACgQBAgAL",
    "binary.111.wasm": "AGFzbQEAAAABBAFgAAADAgEACAEACAEACgQBAgAL",
    "binary.12.wasm": "d2FzbQEAAAA=",
    "binary.13.wasm": "f2FzbQEAAAA=",
    "binary.14.wasm": "gGFzbQEAAAA=",
    "binary.15.wasm": "gmFzbQEAAAA=",
    "binary.16.wasm": "/2FzbQEAAAA=",
    "binary.17.wasm": "AAAAAW1zYQA=",
    "binary.18.wasm": "YQBtcwABAAA=",
    "binary.19.wasm": "c20AYQAAAQA=",
    "binary.2.wasm": "AGFzbQEAAAA=",
    "binary.20.wasm": "AEFTTQEAAAA=",
    "binary.21.wasm": "AIGilAEAAAA=",
    "binary.22.wasm": "77u/AGFzbQEAAAA=",
    "binary.23.wasm": "AGFzbQ==",
    "binary.24.wasm": "AGFzbQE=",
    "binary.25.wasm": "AGFzbQEAAA==",
    "binary.26.wasm": "AGFzbQAAAAA=",
    "binary.27.wasm": "AGFzbQ0AAAA=",
    "binary.28.wasm": "AGFzbQ4AAAA=",
    "binary.29.wasm": "AGFzbQABAAA=",
    "binary.3.wasm": "AGFzbQEAAAA=",
    "binary.30.wasm": "AGFzbQAAAQA=",
    "binary.31.wasm": "AGFzbQAAAAE=",
    "binary.32.wasm": "AGFzbQEAAAAOAQA=",
    "binary.33.wasm": "AGFzbQEAAAB/AQA=",
    "binary.34.wasm": "AGFzbQEAAACAAQABAQA=",
    "binary.35.wasm": "AGFzbQEAAACBAQABAQA=",
    "binary.36.wasm": "AGFzbQEAAAD/AQABAQA=",
    "binary.37.wasm": "AGFzbQEAAAABBAFgAAADAwIAAAoMAgQAQQEaBQBBARoL",
    "binary.38.wasm": "AGFzbQEAAAABBAFgAAADAgEACgYBBABBARo=",
    "binary.39.wasm": "AGFzbQEAAAABBAFgAAADAgEACgYBBABBARoLAwEBAA==",
    "binary.4.wasm": "",
    "binary.40.wasm": "AGFzbQEAAAABBAFgAAADAgEABgUBfwBBAAoEAQIACw==",
    "binary.41.wasm": "AGFzbQEAAAABBAFgAAADAgEABQMBAAAKCQEHAEEAQAEaCw==",
    "binary.42.wasm": "AGFzbQEAAAABBAFgAAADAgEABQMBAAAKCgEIAEEAQIAAGgs=",
    "binary.43.wasm": "AGFzbQEAAAABBAFgAAADAgEABQMBAAAKCwEJAEEAQICAABoL",
    "binary.44.wasm": "AGFzbQEAAAABBAFgAAADAgEABQMBAAAKDAEKAEEAQICAgAAaCw==",
    "binary.45.wasm": "AGFzbQEAAAABBAFgAAADAgEABQMBAAAKDQELAEEAQICAgIAAGgs=",
    "binary.46.wasm": "AGFzbQEAAAABBAFgAAADAgEABQMBAAAKBwEFAD8BGgs=",
    "binary.47.wasm": "AGFzbQEAAAABBAFgAAADAgEABQMBAAAKCAEGAD+AABoL",
    "binary.48.wasm": "AGFzbQEAAAABBAFgAAADAgEABQMBAAAKCQEHAD+AgAAaCw==",
    "binary.49.wasm": "AGFzbQEAAAABBAFgAAADAgEABQMBAAAKCgEIAD+AgIAAGgs=",
    "binary.5.wasm": "AQ==",
    "binary.50.wasm": "AGFzbQEAAAABBAFgAAADAgEABQMBAAAKCwEJAD+AgICAABoL",
    "binary.51.wasm": "AGFzbQEAAAABBAFgAAADAgEACgwBCgKAgICAEH8Cfgs=",
    "binary.52.wasm": "AGFzbQEAAAABBAFgAAADAgEACgwBCgKAgICAEH8Cfgs=",
    "binary.53.wasm": "AGFzbQEAAAABBAFgAAADAgEACgwBCgL/////D38Cfgs=",
    "binary.54.wasm": "AGFzbQEAAAABBgFgAn9/AAMCAQAKHAEaBICAgIAEf4CAgIAEfoCAgIAEfYCAgIAEfAs=",
    "binary.55.wasm": "AGFzbQEAAAABBAFgAAADAgEACgoBCAMAfwB+An0L",
    "binary.56.wasm": "AGFzbQEAAAABBAFgAAADAwIAAA==",
    "binary.57.wasm": "AGFzbQEAAAAKBAECAAs=",
    "binary.58.wasm": "AGFzbQEAAAABBAFgAAADAwIAAAoEAQIACw==",
    "binary.59.wasm": "AGFzbQEAAAABBAFgAAADAgEACgcCAgALAgAL",
    "binary.6.wasm": "AGFz",
    "binary.60.wasm": "AGFzbQEAAAADAQA=",
    "binary.61.wasm": "AGFzbQEAAAAKAQA=",
    "binary.62.wasm": "AGFzbQEAAAAMAQMLBQIBAAEA",
    "binary.63.wasm": "AGFzbQEAAAAMAQELBQIBAAEA",
    "binary.64.wasm": "AGFzbQEAAAABBAFgAAADAgEABQMBAAAKDgEMAEEAQQBBAPwIAAALCwMBAQA=",
    "binary.65.wasm": "AGFzbQEAAAABBAFgAAADAgEABQMBAAAKBwEFAPwJAAsLAwEBAA==",
    "binary.66.wasm": "AGFzbQEAAAABBAFgAAADAgEABAQBcAAABQMBAAAJBwEFcAHzAAsKBAECAAs=",
    "binary.67.wasm": "AGFzbQEAAAABBAFgAAADAgEABAQBcAAABQMBAAAJBwEFfwHSAAsKBAECAAs=",
    "binary.68.wasm": "AGFzbQEAAAABBAFgAAADAgEABAQBcAAABQMBAAAJBwEFcAHSAAsKBAECAAs=",
    "binary.69.wasm": "AGFzbQEAAAABBAFgAAADAgEABAQBcAAABQMBAAAJBwEFcAHQcAsKBAECAAs=",
    "binary.7.wasm": "YXNtAA==",
    "binary.70.wasm": "AGFzbQEAAAABAQA=",
    "binary.71.wasm": "AGFzbQEAAAABBwJgAAA=",
    "binary.72.wasm": "AGFzbQEAAAABBwFgAABgAAA=",
    "binary.73.wasm": "AGFzbQEAAAABBQFgAX8AAgEA",
    "binary.74.wasm": "AGFzbQEAAAACBAEAAAQ=",
    "binary.75.wasm": "AGFzbQEAAAACBQEAAAQA",
    "binary.76.wasm": "AGFzbQEAAAACBAEAAAU=",
    "binary.77.wasm": "AGFzbQEAAAACBQEAAAUA",
    "binary.78.wasm": "AGFzbQEAAAACBAEAAIA=",
    "binary.79.wasm": "AGFzbQEAAAACBQEAAIAA",
    "binary.8.wasm": "bXNhAA==",
    "binary.80.wasm": "AGFzbQEAAAABBQFgAX8AAhYCCHNwZWN0ZXN0CXByaW50X2kzMgAA",
    "binary.81.wasm": "AGFzbQEAAAABCQJgAX8AYAF9AAIrAQhzcGVjdGVzdAlwcmludF9pMzIAAAhzcGVjdGVzdAlwcmludF9mMzIAAQ==",
    "binary.82.wasm": "AGFzbQEAAAAEAQA=",
    "binary.83.wasm": "AGFzbQEAAAAEAQE=",
    "binary.84.wasm": "AGFzbQEAAAAEAwFwAg==",
    "binary.85.wasm": "AGFzbQEAAAAEBAFwAgA=",
    "binary.86.wasm": "AGFzbQEAAAAEBgFwgQAAAA==",
    "binary.87.wasm": "AGFzbQEAAAAFAQA=",
    "binary.88.wasm": "AGFzbQEAAAAFAQE=",
    "binary.89.wasm": "AGFzbQEAAAAFAgEC",
    "binary.9.wasm": "bXNhAAEAAAA=",
    "binary.90.wasm": "AGFzbQEAAAAFAwECAA==",
    "binary.91.wasm": "AGFzbQEAAAAFBQGBAAAA",
    "binary.92.wasm": "AGFzbQEAAAAFBQGBAQAA",
    "binary.93.wasm": "AGFzbQEAAAAGAQA=",
    "binary.94.wasm": "AGFzbQEAAAAGBgJ/AEEACw==",
    "binary.95.wasm": "AGFzbQEAAAAGCwF/AEEAC38AQQAL",
    "binary.96.wasm": "AGFzbQEAAAABBAFgAAADAwIAAAcBAAoHAgIACwIACw==",
    "binary.97.wasm": "AGFzbQEAAAABBAFgAAADAwIAAAcGAgJmMQAACgcCAgALAgAL",
    "binary.98.wasm": "AGFzbQEAAAABBAFgAAADAwIAAAcLAQJmMQAAAmYyAAEKBwICAAsCAAs=",
    "binary.99.wasm": "AGFzbQEAAAABBAFgAAADAgEABAQBcAABCQEACgQBAgAL"
  },
  "spec": {"source_filename": "/home/rvagg/git/webassembly/spec/test/core/binary.wast",
 "commands": [
  {"type": "module", "line": 1, "filename": "binary.0.wasm"}, 
  {"type": "module", "line": 2, "filename": "binary.1.wasm"}, 
  {"type": "module", "line": 3, "name": "$M1", "filename": "binary.2.wasm"}, 
  {"type": "module", "line": 4, "name": "$M2", "filename": "binary.3.wasm"}, 
  {"type": "assert_malformed", "line": 6, "filename": "binary.4.wasm", "text": "unexpected end", "module_type": "binary"}, 
  {"type": "assert_malformed", "line": 7, "filename": "binary.5.wasm", "text": "unexpected end", "module_type": "binary"}, 
  {"type": "assert_malformed", "line": 8, "filename": "binary.6.wasm", "text": "unexpected end", "module_type": "binary"}, 
  {"type": "assert_malformed", "line": 9, "filename": "binary.7.wasm", "text": "magic header not detected", "module_type": "binary"}, 
  {"type": "assert_malformed", "line": 10, "filename": "binary.8.wasm", "text": "magic header not detected", "module_type": "binary"}, 
  {"type": "assert_malformed", "line": 11, "filename": "binary.9.wasm", "text": "magic header not detected", "module_type": "binary"}, 
  {"type": "assert_malformed", "line": 12, "filename": "binary.10.wasm", "text": "magic header not detected", "module_type": "binary"}, 
  {"type": "assert_malformed", "line": 13, "filename": "binary.11.wasm", "text": "magic header not detected", "module_type": "binary"}, 
  {"type": "assert_malformed", "line": 14, "filename": "binary.12.wasm", "text": "magic header not detected", "module_type": "binary"}, 
  {"type": "assert_malformed", "line": 15, "filename": "binary.13.wasm", "text": "magic header not detected", "module_type": "binary"}, 
  {"type": "assert_malformed", "line": 16, "filename": "binary.14.wasm", "text": "magic header not detected", "module_type": "binary"}, 
  {"type": "assert_malformed", "line": 17, "filename": "binary.15.wasm", "text": "magic header not detected", "module_type": "binary"}, 
  {"type": "assert_malformed", "line": 18, "filename": "binary.16.wasm", "text": "magic header not detected", "module_type": "binary"}, 
  {"type": "assert_malformed", "line": 21, "filename": "binary.17.wasm", "text": "magic header not detected", "module_type": "binary"}, 
  {"type": "assert_malformed", "line": 24, "filename": "binary.18.wasm", "text": "magic header not detected", "module_type": "binary"}, 
  {"type": "assert_malformed", "line": 25, "filename": "binary.19.wasm", "text": "magic header not detected", "module_type": "binary"}, 
  {"type": "assert_malformed", "line": 28, "filename": "binary.20.wasm", "text": "magic header not detected", "module_type": "binary"}, 
  {"type": "assert_malformed", "line": 31, "filename": "binary.21.wasm", "text": "magic header not detected", "module_type": "binary"}, 
  {"type": "assert_malformed", "line": 34, "filename": "binary.22.wasm", "text": "magic header not detected", "module_type": "binary"}, 
  {"type": "assert_malformed", "line": 37, "filename": "binary.23.wasm", "text": "unexpected end", "module_type": "binary"}, 
  {"type": "assert_malformed", "line": 38, "filename": "binary.24.wasm", "text": "unexpected end", "module_type": "binary"}, 
  {"type": "assert_malformed", "line": 39, "filename": "binary.25.wasm", "text": "unexpected end", "module_type": "binary"}, 
  {"type": "assert_malformed", "line": 40, "filename": "binary.26.wasm", "text": "unknown binary version", "module_type": "binary"}, 
  {"type": "assert_malformed", "line": 41, "filename": "binary.27.wasm", "text": "unknown binary version", "module_type": "binary"}, 
  {"type": "assert_malformed", "line": 42, "filename": "binary.28.wasm", "text": "unknown binary version", "module_type": "binary"}, 
  {"type": "assert_malformed", "line": 43, "filename": "binary.29.wasm", "text": "unknown binary version", "module_type": "binary"}, 
  {"type": "assert_malformed", "line": 44, "filename": "binary.30.wasm", "text": "unknown binary version", "module_type": "binary"}, 
  {"type": "assert_malformed", "line": 45, "filename": "binary.31.wasm", "text": "unknown binary version", "module_type": "binary"}, 
  {"type": "assert_malformed", "line": 48, "filename": "binary.32.wasm", "text": "malformed section id", "module_type": "binary"}, 
  {"type": "assert_malformed", "line": 49, "filename": "binary.33.wasm", "text": "malformed section id", "module_type": "binary"}, 
  {"type": "assert_malformed", "line": 50, "filename": "binary.34.wasm", "text": "malformed section id", "module_type": "binary"}, 
  {"type": "assert_malformed", "line": 51, "filename": "binary.35.wasm", "text": "malformed section id", "module_type": "binary"}, 
  {"type": "assert_malformed", "line": 52, "filename": "binary.36.wasm", "text": "malformed section id", "module_type": "binary"}, 
  {"type": "assert_malformed", "line": 56, "filename": "binary.37.wasm", "text": "END opcode expected", "module_type": "binary"}, 
  {"type": "assert_malformed", "line": 77, "filename": "binary.38.wasm", "text": "unexpected end of section or function", "module_type": "binary"}, 
  {"type": "assert_malformed", "line": 93, "filename": "binary.39.wasm", "text": "section size mismatch", "module_type": "binary"}, 
  {"type": "assert_malformed", "line": 113, "filename": "binary.40.wasm", "text": "illegal opcode", "module_type": "binary"}, 
  {"type": "assert_malformed", "line": 126, "filename": "binary.41.wasm", "text": "zero byte expected", "module_type": "binary"}, 
  {"type": "assert_malformed", "line": 146, "filename": "binary.42.wasm", "text": "zero byte expected", "module_type": "binary"}, 
  {"type": "assert_malformed", "line": 166, "filename": "binary.43.wasm", "text": "zero byte expected", "module_type": "binary"}, 
  {"type": "assert_malformed", "line": 185, "filename": "binary.44.wasm", "text": "zero byte expected", "module_type": "binary"}, 
  {"type": "assert_malformed", "line": 204, "filename": "binary.45.wasm", "text": "zero byte expected", "module_type": "binary"}, 
  {"type": "assert_malformed", "line": 224, "filename": "binary.46.wasm", "text": "zero byte expected", "module_type": "binary"}, 
  {"type": "assert_malformed", "line": 243, "filename": "binary.47.wasm", "text": "zero byte expected", "module_type": "binary"}, 
  {"type": "assert_malformed", "line": 262, "filename": "binary.48.wasm", "text": "zero byte expected", "module_type": "binary"}, 
  {"type": "assert_malformed", "line": 280, "filename": "binary.49.wasm", "text": "zero byte expected", "module_type": "binary"}, 
  {"type": "assert_malformed", "line": 298, "filename": "binary.50.wasm", "text": "zero byte expected", "module_type": "binary"}, 
  {"type": "assert_malformed", "line": 317, "filename": "binary.51.wasm", "text": "integer too large", "module_type": "binary"}, 
  {"type": "assert_malformed", "line": 334, "filename": "binary.52.wasm", "text": "integer too large", "module_type": "binary"}, 
  {"type": "assert_malformed", "line": 351, "filename": "binary.53.wasm", "text": "too many locals", "module_type": "binary"}, 
  {"type": "assert_malformed", "line": 367, "filename": "binary.54.wasm", "text": "too many locals", "module_type": "binary"}, 
  {"type": "module", "line": 385, "filename": "binary.55.wasm"}, 
  {"type": "assert_malformed", "line": 401, "filename": "binary.56.wasm", "text": "function and code section have inconsistent lengths", "module_type": "binary"}, 
  {"type": "assert_malformed", "line": 411, "filename": "binary.57.wasm", "text": "function and code section have inconsistent lengths", "module_type": "binary"}, 
  {"type": "assert_malformed", "line": 420, "filename": "binary.58.wasm", "text": "function and code section have inconsistent lengths", "module_type": "binary"}, 
  {"type": "assert_malformed", "line": 431, "filename": "binary.59.wasm", "text": "function and code section have inconsistent lengths", "module_type": "binary"}, 
  {"type": "module", "line": 441, "filename": "binary.60.wasm"}, 
  {"type": "module", "line": 447, "filename": "binary.61.wasm"}, 
  {"type": "assert_malformed", "line": 454, "filename": "binary.62.wasm", "text": "data count and data section have inconsistent lengths", "module_type": "binary"}, 
  {"type": "assert_malformed", "line": 464, "filename": "binary.63.wasm", "text": "data count and data section have inconsistent lengths", "module_type": "binary"}, 
  {"type": "assert_malformed", "line": 474, "filename": "binary.64.wasm", "text": "data count section required", "module_type": "binary"}, 
  {"type": "assert_malformed", "line": 496, "filename": "binary.65.wasm", "text": "data count section required", "module_type": "binary"}, 
  {"type": "assert_malformed", "line": 515, "filename": "binary.66.wasm", "text": "illegal opcode", "module_type": "binary"}, 
  {"type": "assert_malformed", "line": 541, "filename": "binary.67.wasm", "text": "malformed reference type", "module_type": "binary"}, 
  {"type": "module", "line": 566, "filename": "binary.68.wasm"}, 
  {"type": "module", "line": 590, "filename": "binary.69.wasm"}, 
  {"type": "module", "line": 615, "filename": "binary.70.wasm"}, 
  {"type": "assert_malformed", "line": 622, "filename": "binary.71.wasm", "text": "length out of bounds", "module_type": "binary"}, 
  {"type": "assert_malformed", "line": 633, "filename": "binary.72.wasm", "text": "section size mismatch", "module_type": "binary"}, 
  {"type": "module", "line": 643, "filename": "binary.73.wasm"}, 
  {"type": "assert_malformed", "line": 652, "filename": "binary.74.wasm", "text": "malformed import kind", "module_type": "binary"}, 
  {"type": "assert_malformed", "line": 662, "filename": "binary.75.wasm", "text": "malformed import kind", "module_type": "binary"}, 
  {"type": "assert_malformed", "line": 673, "filename": "binary.76.wasm", "text": "malformed import kind", "module_type": "binary"}, 
  {"type": "assert_malformed", "line": 683, "filename": "binary.77.wasm", "text": "malformed import kind", "module_type": "binary"}, 
  {"type": "assert_malformed", "line": 694, "filename": "binary.78.wasm", "text": "malformed import kind", "module_type": "binary"}, 
  {"type": "assert_malformed", "line": 704, "filename": "binary.79.wasm", "text": "malformed import kind", "module_type": "binary"}, 
  {"type": "assert_malformed", "line": 717, "filename": "binary.80.wasm", "text": "unexpected end of section or function", "module_type": "binary"}, 
  {"type": "assert_malformed", "line": 736, "filename": "binary.81.wasm", "text": "section size mismatch", "module_type": "binary"}, 
  {"type": "module", "line": 760, "filename": "binary.82.wasm"}, 
  {"type": "assert_malformed", "line": 767, "filename": "binary.83.wasm", "text": "unexpected end of section or function", "module_type": "binary"}, 
  {"type": "assert_malformed", "line": 777, "filename": "binary.84.wasm", "text": "integer too large", "module_type": "binary"}, 
  {"type": "assert_malformed", "line": 786, "filename": "binary.85.wasm", "text": "integer too large", "module_type": "binary"}, 
  {"type": "assert_malformed", "line": 796, "filename": "binary.86.wasm", "text": "integer representation too long", "module_type": "binary"}, 
  {"type": "module", "line": 807, "filename": "binary.87.wasm"}, 
  {"type": "assert_malformed", "line": 814, "filename": "binary.88.wasm", "text": "unexpected end of section or function", "module_type": "binary"}, 
  {"type": "assert_malformed", "line": 824, "filename": "binary.89.wasm", "text": "integer too large", "module_type": "binary"}, 
  {"type": "assert_malformed", "line": 832, "filename": "binary.90.wasm", "text": "integer too large", "module_type": "binary"}, 
  {"type": "assert_malformed", "line": 841, "filename": "binary.91.wasm", "text": "integer representation too long", "module_type": "binary"}, 
  {"type": "assert_malformed", "line": 850, "filename": "binary.92.wasm", "text": "integer representation too long", "module_type": "binary"}, 
  {"type": "module", "line": 860, "filename": "binary.93.wasm"}, 
  {"type": "assert_malformed", "line": 867, "filename": "binary.94.wasm", "text": "unexpected end of section or function", "module_type": "binary"}, 
  {"type": "assert_malformed", "line": 878, "filename": "binary.95.wasm", "text": "section size mismatch", "module_type": "binary"}, 
  {"type": "module", "line": 888, "filename": "binary.96.wasm"}, 
  {"type": "assert_malformed", "line": 901, "filename": "binary.97.wasm", "text": "length out of bounds", "module_type": "binary"}, 
  {"type": "assert_malformed", "line": 922, "filename": "binary.98.wasm", "text": "section size mismatch", "module_type": "binary"}, 
  {"type": "module", "line": 942, "filename": "binary.99.wasm"}, 
  {"type": "assert_malformed", "line": 956, "filename": "binary.100.wasm", "text": "unexpected end", "module_type": "binary"}, 
  {"type": "assert_malformed", "line": 972, "filename": "binary.101.wasm", "text": "unexpected end", "module_type": "binary"}, 
  {"type": "assert_malformed", "line": 989, "filename": "binary.102.wasm", "text": "section size mismatch", "module_type": "binary"}, 
  {"type": "module", "line": 1006, "filename": "binary.103.wasm"}, 
  {"type": "assert_malformed", "line": 1015, "filename": "binary.104.wasm", "text": "unexpected end of section or function", "module_type": "binary"}, 
  {"type": "assert_malformed", "line": 1028, "filename": "binary.105.wasm", "text": "section size mismatch", "module_type": "binary"}, 
  {"type": "assert_malformed", "line": 1041, "filename": "binary.106.wasm", "text": "unexpected end of section or function", "module_type": "binary"}, 
  {"type": "assert_malformed", "line": 1055, "filename": "binary.107.wasm", "text": "section size mismatch", "module_type": "binary"}, 
  {"type": "module", "line": 1068, "filename": "binary.108.wasm"}, 
  {"type": "assert_malformed", "line": 1086, "filename": "binary.109.wasm", "text": "unexpected end", "module_type": "binary"}, 
  {"type": "module", "line": 1119, "filename": "binary.110.wasm"}, 
  {"type": "assert_malformed", "line": 1133, "filename": "binary.111.wasm", "text": "unexpected content after last section", "module_type": "binary"}]},
  "code": [
    "(module binary \"\\00asm\\01\\00\\00\\00\")",
    "(module binary \"\\00asm\" \"\\01\\00\\00\\00\")",
    "(module $M1 binary \"\\00asm\\01\\00\\00\\00\")",
    "(module $M2 binary \"\\00asm\" \"\\01\\00\\00\\00\")",
    "(assert_malformed (module binary \"\") \"unexpected end\")",
    "(assert_malformed (module binary \"\\01\") \"unexpected end\")",
    "(assert_malformed (module binary \"\\00as\") \"unexpected end\")",
    "(assert_malformed (module binary \"asm\\00\") \"magic header not detected\")",
    "(assert_malformed (module binary \"msa\\00\") \"magic header not detected\")",
    "(assert_malformed (module binary \"msa\\00\\01\\00\\00\\00\") \"magic header not detected\")",
    "(assert_malformed (module binary \"msa\\00\\00\\00\\00\\01\") \"magic header not detected\")",
    "(assert_malformed (module binary \"asm\\01\\00\\00\\00\\00\") \"magic header not detected\")",
    "(assert_malformed (module binary \"wasm\\01\\00\\00\\00\") \"magic header not detected\")",
    "(assert_malformed (module binary \"\\7fasm\\01\\00\\00\\00\") \"magic header not detected\")",
    "(assert_malformed (module binary \"\\80asm\\01\\00\\00\\00\") \"magic header not detected\")",
    "(assert_malformed (module binary \"\\82asm\\01\\00\\00\\00\") \"magic header not detected\")",
    "(assert_malformed (module binary \"\\ffasm\\01\\00\\00\\00\") \"magic header not detected\")",
    "(assert_malformed (module binary \"\\00\\00\\00\\01msa\\00\") \"magic header not detected\")",
    "(assert_malformed (module binary \"a\\00ms\\00\\01\\00\\00\") \"magic header not detected\")",
    "(assert_malformed (module binary \"sm\\00a\\00\\00\\01\\00\") \"magic header not detected\")",
    "(assert_malformed (module binary \"\\00ASM\\01\\00\\00\\00\") \"magic header not detected\")",
    "(assert_malformed (module binary \"\\00\\81\\a2\\94\\01\\00\\00\\00\") \"magic header not detected\")",
    "(assert_malformed (module binary \"\\ef\\bb\\bf\\00asm\\01\\00\\00\\00\") \"magic header not detected\")",
    "(assert_malformed (module binary \"\\00asm\") \"unexpected end\")",
    "(assert_malformed (module binary \"\\00asm\\01\") \"unexpected end\")",
    "(assert_malformed (module binary \"\\00asm\\01\\00\\00\") \"unexpected end\")",
    "(assert_malformed (module binary \"\\00asm\\00\\00\\00\\00\") \"unknown binary version\")",
    "(assert_malformed (module binary \"\\00asm\\0d\\00\\00\\00\") \"unknown binary version\")",
    "(assert_malformed (module binary \"\\00asm\\0e\\00\\00\\00\") \"unknown binary version\")",
    "(assert_malformed (module binary \"\\00asm\\00\\01\\00\\00\") \"unknown binary version\")",
    "(assert_malformed (module binary \"\\00asm\\00\\00\\01\\00\") \"unknown binary version\")",
    "(assert_malformed (module binary \"\\00asm\\00\\00\\00\\01\") \"unknown binary version\")",
    "(assert_malformed (module binary \"\\00asm\" \"\\01\\00\\00\\00\" \"\\0e\\01\\00\") \"malformed section id\")",
    "(assert_malformed (module binary \"\\00asm\" \"\\01\\00\\00\\00\" \"\\7f\\01\\00\") \"malformed section id\")",
    "(assert_malformed (module binary \"\\00asm\" \"\\01\\00\\00\\00\" \"\\80\\01\\00\\01\\01\\00\") \"malformed section id\")",
    "(assert_malformed (module binary \"\\00asm\" \"\\01\\00\\00\\00\" \"\\81\\01\\00\\01\\01\\00\") \"malformed section id\")",
    "(assert_malformed (module binary \"\\00asm\" \"\\01\\00\\00\\00\" \"\\ff\\01\\00\\01\\01\\00\") \"malformed section id\")",
    "(assert_malformed (module binary \"\\00asm\" \"\\01\\00\\00\\00\" \"\\01\\04\\01\\60\\00\\00\" \"\\03\\03\\02\\00\\00\" \"\\0a\\0c\\02\" \"\\04\\00\" \"\\41\\01\" \"\\1a\" \"\\05\\00\" \"\\41\\01\" \"\\1a\" \"\\0b\" ) \"END opcode expected\")",
    "(assert_malformed (module binary \"\\00asm\" \"\\01\\00\\00\\00\" \"\\01\\04\\01\\60\\00\\00\" \"\\03\\02\\01\\00\" \"\\0a\\06\\01\" \"\\04\\00\" \"\\41\\01\" \"\\1a\" ) \"unexpected end of section or function\")",
    "(assert_malformed (module binary \"\\00asm\" \"\\01\\00\\00\\00\" \"\\01\\04\\01\\60\\00\\00\" \"\\03\\02\\01\\00\" \"\\0a\\06\\01\" \"\\04\\00\" \"\\41\\01\" \"\\1a\" \"\\0b\\03\\01\\01\\00\" ) \"section size mismatch\")",
    "(assert_malformed (module binary \"\\00asm\" \"\\01\\00\\00\\00\" \"\\01\\04\\01\\60\\00\\00\" \"\\03\\02\\01\\00\" \"\\06\\05\\01\\7f\\00\\41\\00\" \"\\0a\\04\\01\\02\\00\\0b\" ) \"illegal opcode\")",
    "(assert_malformed (module binary \"\\00asm\" \"\\01\\00\\00\\00\" \"\\01\\04\\01\\60\\00\\00\" \"\\03\\02\\01\\00\" \"\\05\\03\\01\\00\\00\" \"\\0a\\09\\01\" \"\\07\\00\" \"\\41\\00\" \"\\40\" \"\\01\" \"\\1a\" \"\\0b\" ) \"zero byte expected\")",
    "(assert_malformed (module binary \"\\00asm\" \"\\01\\00\\00\\00\" \"\\01\\04\\01\\60\\00\\00\" \"\\03\\02\\01\\00\" \"\\05\\03\\01\\00\\00\" \"\\0a\\0a\\01\" \"\\08\\00\" \"\\41\\00\" \"\\40\" \"\\80\\00\" \"\\1a\" \"\\0b\" ) \"zero byte expected\")",
    "(assert_malformed (module binary \"\\00asm\" \"\\01\\00\\00\\00\" \"\\01\\04\\01\\60\\00\\00\" \"\\03\\02\\01\\00\" \"\\05\\03\\01\\00\\00\" \"\\0a\\0b\\01\" \"\\09\\00\" \"\\41\\00\" \"\\40\" \"\\80\\80\\00\" \"\\1a\" \"\\0b\" ) \"zero byte expected\")",
    "(assert_malformed (module binary \"\\00asm\" \"\\01\\00\\00\\00\" \"\\01\\04\\01\\60\\00\\00\" \"\\03\\02\\01\\00\" \"\\05\\03\\01\\00\\00\" \"\\0a\\0c\\01\" \"\\0a\\00\" \"\\41\\00\" \"\\40\" \"\\80\\80\\80\\00\" \"\\1a\" \"\\0b\" ) \"zero byte expected\")",
    "(assert_malformed (module binary \"\\00asm\" \"\\01\\00\\00\\00\" \"\\01\\04\\01\\60\\00\\00\" \"\\03\\02\\01\\00\" \"\\05\\03\\01\\00\\00\" \"\\0a\\0d\\01\" \"\\0b\\00\" \"\\41\\00\" \"\\40\" \"\\80\\80\\80\\80\\00\" \"\\1a\" \"\\0b\" ) \"zero byte expected\")",
    "(assert_malformed (module binary \"\\00asm\" \"\\01\\00\\00\\00\" \"\\01\\04\\01\\60\\00\\00\" \"\\03\\02\\01\\00\" \"\\05\\03\\01\\00\\00\" \"\\0a\\07\\01\" \"\\05\\00\" \"\\3f\" \"\\01\" \"\\1a\" \"\\0b\" ) \"zero byte expected\")",
    "(assert_malformed (module binary \"\\00asm\" \"\\01\\00\\00\\00\" \"\\01\\04\\01\\60\\00\\00\" \"\\03\\02\\01\\00\" \"\\05\\03\\01\\00\\00\" \"\\0a\\08\\01\" \"\\06\\00\" \"\\3f\" \"\\80\\00\" \"\\1a\" \"\\0b\" ) \"zero byte expected\")",
    "(assert_malformed (module binary \"\\00asm\" \"\\01\\00\\00\\00\" \"\\01\\04\\01\\60\\00\\00\" \"\\03\\02\\01\\00\" \"\\05\\03\\01\\00\\00\" \"\\0a\\09\\01\" \"\\07\\00\" \"\\3f\" \"\\80\\80\\00\" \"\\1a\" \"\\0b\" ) \"zero byte expected\")",
    "(assert_malformed (module binary \"\\00asm\" \"\\01\\00\\00\\00\" \"\\01\\04\\01\\60\\00\\00\" \"\\03\\02\\01\\00\" \"\\05\\03\\01\\00\\00\" \"\\0a\\0a\\01\" \"\\08\\00\" \"\\3f\" \"\\80\\80\\80\\00\" \"\\1a\" \"\\0b\" ) \"zero byte expected\")",
    "(assert_malformed (module binary \"\\00asm\" \"\\01\\00\\00\\00\" \"\\01\\04\\01\\60\\00\\00\" \"\\03\\02\\01\\00\" \"\\05\\03\\01\\00\\00\" \"\\0a\\0b\\01\" \"\\09\\00\" \"\\3f\" \"\\80\\80\\80\\80\\00\" \"\\1a\" \"\\0b\" ) \"zero byte expected\")",
    "(assert_malformed (module binary \"\\00asm\" \"\\01\\00\\00\\00\" \"\\01\\04\\01\\60\\00\\00\" \"\\03\\02\\01\\00\" \"\\0a\\0c\\01\" \"\\0a\\02\" \"\\80\\80\\80\\80\\10\\7f\" \"\\02\\7e\" \"\\0b\" ) \"integer too large\")",
    "(assert_malformed (module binary \"\\00asm\" \"\\01\\00\\00\\00\" \"\\01\\04\\01\\60\\00\\00\" \"\\03\\02\\01\\00\" \"\\0a\\0c\\01\" \"\\0a\\02\" \"\\80\\80\\80\\80\\10\\7f\" \"\\02\\7e\" \"\\0b\" ) \"integer too large\")",
    "(assert_malformed (module binary \"\\00asm\" \"\\01\\00\\00\\00\" \"\\01\\04\\01\\60\\00\\00\" \"\\03\\02\\01\\00\" \"\\0a\\0c\\01\" \"\\0a\\02\" \"\\ff\\ff\\ff\\ff\\0f\\7f\" \"\\02\\7e\" \"\\0b\" ) \"too many locals\")",
    "(assert_malformed (module binary \"\\00asm\" \"\\01\\00\\00\\00\" \"\\01\\06\\01\\60\\02\\7f\\7f\\00\" \"\\03\\02\\01\\00\" \"\\0a\\1c\\01\" \"\\1a\\04\" \"\\80\\80\\80\\80\\04\\7f\" \"\\80\\80\\80\\80\\04\\7e\" \"\\80\\80\\80\\80\\04\\7d\" \"\\80\\80\\80\\80\\04\\7c\" \"\\0b\" ) \"too many locals\")",
    "(module binary \"\\00asm\" \"\\01\\00\\00\\00\" \"\\01\\04\\01\\60\\00\\00\" \"\\03\\02\\01\\00\" \"\\0a\\0a\\01\" \"\\08\\03\" \"\\00\\7f\" \"\\00\\7e\" \"\\02\\7d\" \"\\0b\" )",
    "(assert_malformed (module binary \"\\00asm\" \"\\01\\00\\00\\00\" \"\\01\\04\\01\\60\\00\\00\" \"\\03\\03\\02\\00\\00\" ) \"function and code section have inconsistent lengths\")",
    "(assert_malformed (module binary \"\\00asm\" \"\\01\\00\\00\\00\" \"\\0a\\04\\01\\02\\00\\0b\" ) \"function and code section have inconsistent lengths\")",
    "(assert_malformed (module binary \"\\00asm\" \"\\01\\00\\00\\00\" \"\\01\\04\\01\\60\\00\\00\" \"\\03\\03\\02\\00\\00\" \"\\0a\\04\\01\\02\\00\\0b\" ) \"function and code section have inconsistent lengths\")",
    "(assert_malformed (module binary \"\\00asm\" \"\\01\\00\\00\\00\" \"\\01\\04\\01\\60\\00\\00\" \"\\03\\02\\01\\00\" \"\\0a\\07\\02\\02\\00\\0b\\02\\00\\0b\" ) \"function and code section have inconsistent lengths\")",
    "(module binary \"\\00asm\" \"\\01\\00\\00\\00\" \"\\03\\01\\00\" )",
    "(module binary \"\\00asm\" \"\\01\\00\\00\\00\" \"\\0a\\01\\00\" )",
    "(assert_malformed (module binary \"\\00asm\" \"\\01\\00\\00\\00\" \"\\0c\\01\\03\" \"\\0b\\05\\02\" \"\\01\\00\" \"\\01\\00\") \"data count and data section have inconsistent lengths\")",
    "(assert_malformed (module binary \"\\00asm\" \"\\01\\00\\00\\00\" \"\\0c\\01\\01\" \"\\0b\\05\\02\" \"\\01\\00\" \"\\01\\00\") \"data count and data section have inconsistent lengths\")",
    "(assert_malformed (module binary \"\\00asm\" \"\\01\\00\\00\\00\" \"\\01\\04\\01\\60\\00\\00\" \"\\03\\02\\01\\00\" \"\\05\\03\\01\\00\\00\" \"\\0a\\0e\\01\" \"\\0c\\00\" \"\\41\\00\" \"\\41\\00\" \"\\41\\00\" \"\\fc\\08\\00\\00\" \"\\0b\" \"\\0b\\03\\01\\01\\00\" ) \"data count section required\")",
    "(assert_malformed (module binary \"\\00asm\" \"\\01\\00\\00\\00\" \"\\01\\04\\01\\60\\00\\00\" \"\\03\\02\\01\\00\" \"\\05\\03\\01\\00\\00\" \"\\0a\\07\\01\" \"\\05\\00\" \"\\fc\\09\\00\" \"\\0b\" \"\\0b\\03\\01\\01\\00\" ) \"data count section required\")",
    "(assert_malformed (module binary \"\\00asm\" \"\\01\\00\\00\\00\" \"\\01\\04\\01\\60\\00\\00\" \"\\03\\02\\01\\00\" \"\\04\\04\\01\" \"\\70\\00\\00\" \"\\05\\03\\01\\00\\00\" \"\\09\\07\\01\" \"\\05\\70\" \"\\01\" \"\\f3\\00\\0b\" \"\\0a\\04\\01\" \"\\02\\00\" \"\\0b\") \"illegal opcode\")",
    "(assert_malformed (module binary \"\\00asm\" \"\\01\\00\\00\\00\" \"\\01\\04\\01\\60\\00\\00\" \"\\03\\02\\01\\00\" \"\\04\\04\\01\" \"\\70\\00\\00\" \"\\05\\03\\01\\00\\00\" \"\\09\\07\\01\" \"\\05\\7f\" \"\\01\" \"\\d2\\00\\0b\" \"\\0a\\04\\01\" \"\\02\\00\" \"\\0b\") \"malformed reference type\")",
    "(module binary \"\\00asm\" \"\\01\\00\\00\\00\" \"\\01\\04\\01\\60\\00\\00\" \"\\03\\02\\01\\00\" \"\\04\\04\\01\" \"\\70\\00\\00\" \"\\05\\03\\01\\00\\00\" \"\\09\\07\\01\" \"\\05\\70\" \"\\01\" \"\\d2\\00\\0b\" \"\\0a\\04\\01\" \"\\02\\00\" \"\\0b\")",
    "(module binary \"\\00asm\" \"\\01\\00\\00\\00\" \"\\01\\04\\01\\60\\00\\00\" \"\\03\\02\\01\\00\" \"\\04\\04\\01\" \"\\70\\00\\00\" \"\\05\\03\\01\\00\\00\" \"\\09\\07\\01\" \"\\05\\70\" \"\\01\" \"\\d0\\70\\0b\" \"\\0a\\04\\01\" \"\\02\\00\" \"\\0b\")",
    "(module binary \"\\00asm\" \"\\01\\00\\00\\00\" \"\\01\\01\\00\" )",
    "(assert_malformed (module binary \"\\00asm\" \"\\01\\00\\00\\00\" \"\\01\\07\\02\" \"\\60\\00\\00\" ) \"length out of bounds\")",
    "(assert_malformed (module binary \"\\00asm\" \"\\01\\00\\00\\00\" \"\\01\\07\\01\" \"\\60\\00\\00\" \"\\60\\00\\00\" ) \"section size mismatch\")",
    "(module binary \"\\00asm\" \"\\01\\00\\00\\00\" \"\\01\\05\\01\" \"\\60\\01\\7f\\00\" \"\\02\\01\\00\" )",
    "(assert_malformed (module binary \"\\00asm\" \"\\01\\00\\00\\00\" \"\\02\\04\\01\" \"\\00\" \"\\00\" \"\\04\" ) \"malformed import kind\")",
    "(assert_malformed (module binary \"\\00asm\" \"\\01\\00\\00\\00\" \"\\02\\05\\01\" \"\\00\" \"\\00\" \"\\04\" \"\\00\" ) \"malformed import kind\")",
    "(assert_malformed (module binary \"\\00asm\" \"\\01\\00\\00\\00\" \"\\02\\04\\01\" \"\\00\" \"\\00\" \"\\05\" ) \"malformed import kind\")",
    "(assert_malformed (module binary \"\\00asm\" \"\\01\\00\\00\\00\" \"\\02\\05\\01\" \"\\00\" \"\\00\" \"\\05\" \"\\00\" ) \"malformed import kind\")",
    "(assert_malformed (module binary \"\\00asm\" \"\\01\\00\\00\\00\" \"\\02\\04\\01\" \"\\00\" \"\\00\" \"\\80\" ) \"malformed import kind\")",
    "(assert_malformed (module binary \"\\00asm\" \"\\01\\00\\00\\00\" \"\\02\\05\\01\" \"\\00\" \"\\00\" \"\\80\" \"\\00\" ) \"malformed import kind\")",
    "(assert_malformed (module binary \"\\00asm\" \"\\01\\00\\00\\00\" \"\\01\\05\\01\" \"\\60\\01\\7f\\00\" \"\\02\\16\\02\" \"\\08\" \"\\73\\70\\65\\63\\74\\65\\73\\74\" \"\\09\" \"\\70\\72\\69\\6e\\74\\5f\\69\\33\\32\" \"\\00\\00\" ) \"unexpected end of section or function\")",
    "(assert_malformed (module binary \"\\00asm\" \"\\01\\00\\00\\00\" \"\\01\\09\\02\" \"\\60\\01\\7f\\00\" \"\\60\\01\\7d\\00\" \"\\02\\2b\\01\" \"\\08\" \"\\73\\70\\65\\63\\74\\65\\73\\74\" \"\\09\" \"\\70\\72\\69\\6e\\74\\5f\\69\\33\\32\" \"\\00\\00\" \"\\08\" \"\\73\\70\\65\\63\\74\\65\\73\\74\" \"\\09\" \"\\70\\72\\69\\6e\\74\\5f\\66\\33\\32\" \"\\00\\01\" ) \"section size mismatch\")",
    "(module binary \"\\00asm\" \"\\01\\00\\00\\00\" \"\\04\\01\\00\" )",
    "(assert_malformed (module binary \"\\00asm\" \"\\01\\00\\00\\00\" \"\\04\\01\\01\" ) \"unexpected end of section or function\")",
    "(assert_malformed (module binary \"\\00asm\" \"\\01\\00\\00\\00\" \"\\04\\03\\01\" \"\\70\" \"\\02\" ) \"integer too large\")",
    "(assert_malformed (module binary \"\\00asm\" \"\\01\\00\\00\\00\" \"\\04\\04\\01\" \"\\70\" \"\\02\" \"\\00\" ) \"integer too large\")",
    "(assert_malformed (module binary \"\\00asm\" \"\\01\\00\\00\\00\" \"\\04\\06\\01\" \"\\70\" \"\\81\\00\" \"\\00\\00\" ) \"integer representation too long\")",
    "(module binary \"\\00asm\" \"\\01\\00\\00\\00\" \"\\05\\01\\00\" )",
    "(assert_malformed (module binary \"\\00asm\" \"\\01\\00\\00\\00\" \"\\05\\01\\01\" ) \"unexpected end of section or function\")",
    "(assert_malformed (module binary \"\\00asm\" \"\\01\\00\\00\\00\" \"\\05\\02\\01\" \"\\02\" ) \"integer too large\")",
    "(assert_malformed (module binary \"\\00asm\" \"\\01\\00\\00\\00\" \"\\05\\03\\01\" \"\\02\" \"\\00\" ) \"integer too large\")",
    "(assert_malformed (module binary \"\\00asm\" \"\\01\\00\\00\\00\" \"\\05\\05\\01\" \"\\81\\00\" \"\\00\\00\" ) \"integer representation too long\")",
    "(assert_malformed (module binary \"\\00asm\" \"\\01\\00\\00\\00\" \"\\05\\05\\01\" \"\\81\\01\" \"\\00\\00\" ) \"integer representation too long\")",
    "(module binary \"\\00asm\" \"\\01\\00\\00\\00\" \"\\06\\01\\00\" )",
    "(assert_malformed (module binary \"\\00asm\" \"\\01\\00\\00\\00\" \"\\06\\06\\02\" \"\\7f\\00\\41\\00\\0b\" ) \"unexpected end of section or function\")",
    "(assert_malformed (module binary \"\\00asm\" \"\\01\\00\\00\\00\" \"\\06\\0b\\01\" \"\\7f\\00\\41\\00\\0b\" \"\\7f\\00\\41\\00\\0b\" ) \"section size mismatch\")",
    "(module binary \"\\00asm\" \"\\01\\00\\00\\00\" \"\\01\\04\\01\" \"\\60\\00\\00\" \"\\03\\03\\02\\00\\00\" \"\\07\\01\\00\" \"\\0a\\07\\02\" \"\\02\\00\\0b\" \"\\02\\00\\0b\" )",
    "(assert_malformed (module binary \"\\00asm\" \"\\01\\00\\00\\00\" \"\\01\\04\\01\" \"\\60\\00\\00\" \"\\03\\03\\02\\00\\00\" \"\\07\\06\\02\" \"\\02\" \"\\66\\31\" \"\\00\\00\" \"\\0a\\07\\02\" \"\\02\\00\\0b\" \"\\02\\00\\0b\" ) \"length out of bounds\")",
    "(assert_malformed (module binary \"\\00asm\" \"\\01\\00\\00\\00\" \"\\01\\04\\01\" \"\\60\\00\\00\" \"\\03\\03\\02\\00\\00\" \"\\07\\0b\\01\" \"\\02\" \"\\66\\31\" \"\\00\\00\" \"\\02\" \"\\66\\32\" \"\\00\\01\" \"\\0a\\07\\02\" \"\\02\\00\\0b\" \"\\02\\00\\0b\" ) \"section size mismatch\")",
    "(module binary \"\\00asm\" \"\\01\\00\\00\\00\" \"\\01\\04\\01\" \"\\60\\00\\00\" \"\\03\\02\\01\\00\" \"\\04\\04\\01\" \"\\70\\00\\01\" \"\\09\\01\\00\" \"\\0a\\04\\01\" \"\\02\\00\\0b\" )",
    "(assert_malformed (module binary \"\\00asm\" \"\\01\\00\\00\\00\" \"\\01\\04\\01\" \"\\60\\00\\00\" \"\\03\\02\\01\\00\" \"\\04\\04\\01\" \"\\70\\00\\01\" \"\\09\\07\\02\" \"\\00\\41\\00\\0b\\01\\00\" ) \"unexpected end\")",
    "(assert_malformed (module binary \"\\00asm\" \"\\01\\00\\00\\00\" \"\\01\\04\\01\" \"\\60\\00\\00\" \"\\03\\02\\01\\00\" \"\\04\\04\\01\" \"\\70\\00\\01\" \"\\09\\0a\\02\" \"\\00\\41\\00\\0b\\01\\00\" \"\\00\\41\\00\" ) \"unexpected end\")",
    "(assert_malformed (module binary \"\\00asm\" \"\\01\\00\\00\\00\" \"\\01\\04\\01\" \"\\60\\00\\00\" \"\\03\\02\\01\\00\" \"\\04\\04\\01\" \"\\70\\00\\01\" \"\\09\\0d\\01\" \"\\00\\41\\00\\0b\\01\\00\" \"\\00\\41\\00\\0b\\01\\00\" \"\\0a\\04\\01\" \"\\02\\00\\0b\" ) \"section size mismatch\")",
    "(module binary \"\\00asm\" \"\\01\\00\\00\\00\" \"\\05\\03\\01\" \"\\00\\01\" \"\\0b\\01\\00\" )",
    "(assert_malformed (module binary \"\\00asm\" \"\\01\\00\\00\\00\" \"\\05\\03\\01\" \"\\00\\01\" \"\\0b\\07\\02\" \"\\00\\41\\00\\0b\\01\\61\" ) \"unexpected end of section or function\")",
    "(assert_malformed (module binary \"\\00asm\" \"\\01\\00\\00\\00\" \"\\05\\03\\01\" \"\\00\\01\" \"\\0b\\0d\\01\" \"\\00\\41\\00\\0b\\01\\61\" \"\\00\\41\\01\\0b\\01\\62\" ) \"section size mismatch\")",
    "(assert_malformed (module binary \"\\00asm\" \"\\01\\00\\00\\00\" \"\\05\\03\\01\" \"\\00\\01\" \"\\0b\\0c\\01\" \"\\00\\41\\03\\0b\" \"\\07\" \"\\61\\62\\63\\64\\65\\66\" ) \"unexpected end of section or function\")",
    "(assert_malformed (module binary \"\\00asm\" \"\\01\\00\\00\\00\" \"\\05\\03\\01\" \"\\00\\01\" \"\\0b\\0c\\01\" \"\\00\\41\\00\\0b\" \"\\05\" \"\\61\\62\\63\\64\\65\\66\" ) \"section size mismatch\")",
    "(module binary \"\\00asm\" \"\\01\\00\\00\\00\" \"\\01\\04\\01\" \"\\60\\00\\00\" \"\\03\\02\\01\\00\" \"\\0a\\11\\01\" \"\\0f\\00\" \"\\02\\40\" \"\\41\\01\" \"\\04\\40\" \"\\41\\01\" \"\\0e\\00\" \"\\02\" \"\\0b\\0b\\0b\" )",
    "(assert_malformed (module binary \"\\00asm\" \"\\01\\00\\00\\00\" \"\\01\\25\\0c\" \"\\60\\00\\00\" \"\\60\\00\\00\" \"\\60\\00\\00\" \"\\60\\00\\00\" \"\\60\\00\\00\" \"\\60\\00\\00\" \"\\60\\00\\00\" \"\\60\\00\\00\" \"\\60\\00\\00\" \"\\60\\00\\00\" \"\\60\\00\\00\" \"\\60\\00\\00\" \"\\03\\02\\01\\00\" \"\\0a\\13\\01\" \"\\11\\00\" \"\\02\\40\" \"\\41\\01\" \"\\04\\40\" \"\\41\\01\" \"\\0e\\01\" \"\\00\" \"\\01\" \"\\02\" \"\\0b\" \"\\0b\\0b\" ) \"unexpected end\")",
    "(module binary \"\\00asm\" \"\\01\\00\\00\\00\" \"\\01\\04\\01\\60\\00\\00\" \"\\03\\02\\01\\00\" \"\\08\\01\\00\" \"\\0a\\04\\01\" \"\\02\\00\" \"\\0b\" )",
    "(assert_malformed (module binary \"\\00asm\" \"\\01\\00\\00\\00\" \"\\01\\04\\01\\60\\00\\00\" \"\\03\\02\\01\\00\" \"\\08\\01\\00\" \"\\08\\01\\00\" \"\\0a\\04\\01\" \"\\02\\00\" \"\\0b\" ) \"unexpected content after last section\")"
  ],
  "dump": {
    "binary.0.wasm": {
      "header": "\nbinary.0.wasm:\tfile format wasm 0x1\n\nSections:\n\n",
      "details": "\nbinary.0.wasm:\tfile format wasm 0x1\n\nSection Details:\n\n",
      "disassemble": "\nbinary.0.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n"
    },
    "binary.1.wasm": {
      "header": "\nbinary.1.wasm:\tfile format wasm 0x1\n\nSections:\n\n",
      "details": "\nbinary.1.wasm:\tfile format wasm 0x1\n\nSection Details:\n\n",
      "disassemble": "\nbinary.1.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n"
    },
    "binary.2.wasm": {
      "header": "\nbinary.2.wasm:\tfile format wasm 0x1\n\nSections:\n\n",
      "details": "\nbinary.2.wasm:\tfile format wasm 0x1\n\nSection Details:\n\n",
      "disassemble": "\nbinary.2.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n"
    },
    "binary.3.wasm": {
      "header": "\nbinary.3.wasm:\tfile format wasm 0x1\n\nSections:\n\n",
      "details": "\nbinary.3.wasm:\tfile format wasm 0x1\n\nSection Details:\n\n",
      "disassemble": "\nbinary.3.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n"
    },
    "binary.55.wasm": {
      "header": "\nbinary.55.wasm:\tfile format wasm 0x1\n\nSections:\n\n     Type start=0x0000000a end=0x0000000e (size=0x00000004) count: 1\n Function start=0x00000010 end=0x00000012 (size=0x00000002) count: 1\n     Code start=0x00000014 end=0x0000001e (size=0x0000000a) count: 1\n",
      "details": "\nbinary.55.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nType[1]:\n - type[0] () -> nil\nFunction[1]:\n - func[0] sig=0\nCode[1]:\n - func[0] size=8\n",
      "disassemble": "\nbinary.55.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n000016 func[0]:\n 000017: 00 7f                      | local[] type=i32\n 000019: 00 7e                      | local[] type=i64\n 00001b: 02 7d                      | local[0..1] type=f32\n 00001d: 0b                         | end\n"
    },
    "binary.60.wasm": {
      "header": "\nbinary.60.wasm:\tfile format wasm 0x1\n\nSections:\n\n Function start=0x0000000a end=0x0000000b (size=0x00000001) count: 0\n",
      "details": "\nbinary.60.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nFunction[0]:\n",
      "disassemble": "\nbinary.60.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n"
    },
    "binary.61.wasm": {
      "header": "\nbinary.61.wasm:\tfile format wasm 0x1\n\nSections:\n\n     Code start=0x0000000a end=0x0000000b (size=0x00000001) count: 0\n",
      "details": "\nbinary.61.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nCode[0]:\n",
      "disassemble": "\nbinary.61.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n"
    },
    "binary.68.wasm": {
      "header": "\nbinary.68.wasm:\tfile format wasm 0x1\n\nSections:\n\n     Type start=0x0000000a end=0x0000000e (size=0x00000004) count: 1\n Function start=0x00000010 end=0x00000012 (size=0x00000002) count: 1\n    Table start=0x00000014 end=0x00000018 (size=0x00000004) count: 1\n   Memory start=0x0000001a end=0x0000001d (size=0x00000003) count: 1\n     Elem start=0x0000001f end=0x00000026 (size=0x00000007) count: 1\n     Code start=0x00000028 end=0x0000002c (size=0x00000004) count: 1\n",
      "details": "\nbinary.68.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nType[1]:\n - type[0] () -> nil\nFunction[1]:\n - func[0] sig=0\nTable[1]:\n - table[0] type=funcref initial=0\nMemory[1]:\n - memory[0] pages: initial=0\nElem[1]:\n - segment[0] flags=5 table=0 count=1\n  - elem[0] = ref.func:0\nCode[1]:\n - func[0] size=2\n",
      "disassemble": "\nbinary.68.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n00002a func[0]:\n 00002b: 0b                         | end\n"
    },
    "binary.69.wasm": {
      "header": "\nbinary.69.wasm:\tfile format wasm 0x1\n\nSections:\n\n     Type start=0x0000000a end=0x0000000e (size=0x00000004) count: 1\n Function start=0x00000010 end=0x00000012 (size=0x00000002) count: 1\n    Table start=0x00000014 end=0x00000018 (size=0x00000004) count: 1\n   Memory start=0x0000001a end=0x0000001d (size=0x00000003) count: 1\n     Elem start=0x0000001f end=0x00000026 (size=0x00000007) count: 1\n     Code start=0x00000028 end=0x0000002c (size=0x00000004) count: 1\n",
      "details": "\nbinary.69.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nType[1]:\n - type[0] () -> nil\nFunction[1]:\n - func[0] sig=0\nTable[1]:\n - table[0] type=funcref initial=0\nMemory[1]:\n - memory[0] pages: initial=0\nElem[1]:\n - segment[0] flags=5 table=0 count=1\n  - elem[0] = ref.null funcref\nCode[1]:\n - func[0] size=2\n",
      "disassemble": "\nbinary.69.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n00002a func[0]:\n 00002b: 0b                         | end\n"
    },
    "binary.70.wasm": {
      "header": "\nbinary.70.wasm:\tfile format wasm 0x1\n\nSections:\n\n     Type start=0x0000000a end=0x0000000b (size=0x00000001) count: 0\n",
      "details": "\nbinary.70.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nType[0]:\n",
      "disassemble": "\nbinary.70.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n"
    },
    "binary.73.wasm": {
      "header": "\nbinary.73.wasm:\tfile format wasm 0x1\n\nSections:\n\n     Type start=0x0000000a end=0x0000000f (size=0x00000005) count: 1\n   Import start=0x00000011 end=0x00000012 (size=0x00000001) count: 0\n",
      "details": "\nbinary.73.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nType[1]:\n - type[0] (i32) -> nil\nImport[0]:\n",
      "disassemble": "\nbinary.73.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n"
    },
    "binary.82.wasm": {
      "header": "\nbinary.82.wasm:\tfile format wasm 0x1\n\nSections:\n\n    Table start=0x0000000a end=0x0000000b (size=0x00000001) count: 0\n",
      "details": "\nbinary.82.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nTable[0]:\n",
      "disassemble": "\nbinary.82.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n"
    },
    "binary.87.wasm": {
      "header": "\nbinary.87.wasm:\tfile format wasm 0x1\n\nSections:\n\n   Memory start=0x0000000a end=0x0000000b (size=0x00000001) count: 0\n",
      "details": "\nbinary.87.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nMemory[0]:\n",
      "disassemble": "\nbinary.87.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n"
    },
    "binary.93.wasm": {
      "header": "\nbinary.93.wasm:\tfile format wasm 0x1\n\nSections:\n\n   Global start=0x0000000a end=0x0000000b (size=0x00000001) count: 0\n",
      "details": "\nbinary.93.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nGlobal[0]:\n",
      "disassemble": "\nbinary.93.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n"
    },
    "binary.96.wasm": {
      "header": "\nbinary.96.wasm:\tfile format wasm 0x1\n\nSections:\n\n     Type start=0x0000000a end=0x0000000e (size=0x00000004) count: 1\n Function start=0x00000010 end=0x00000013 (size=0x00000003) count: 2\n   Export start=0x00000015 end=0x00000016 (size=0x00000001) count: 0\n     Code start=0x00000018 end=0x0000001f (size=0x00000007) count: 2\n",
      "details": "\nbinary.96.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nType[1]:\n - type[0] () -> nil\nFunction[2]:\n - func[0] sig=0\n - func[1] sig=0\nExport[0]:\nCode[2]:\n - func[0] size=2\n - func[1] size=2\n",
      "disassemble": "\nbinary.96.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n00001a func[0]:\n 00001b: 0b                         | end\n00001d func[1]:\n 00001e: 0b                         | end\n"
    },
    "binary.99.wasm": {
      "header": "\nbinary.99.wasm:\tfile format wasm 0x1\n\nSections:\n\n     Type start=0x0000000a end=0x0000000e (size=0x00000004) count: 1\n Function start=0x00000010 end=0x00000012 (size=0x00000002) count: 1\n    Table start=0x00000014 end=0x00000018 (size=0x00000004) count: 1\n     Elem start=0x0000001a end=0x0000001b (size=0x00000001) count: 0\n     Code start=0x0000001d end=0x00000021 (size=0x00000004) count: 1\n",
      "details": "\nbinary.99.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nType[1]:\n - type[0] () -> nil\nFunction[1]:\n - func[0] sig=0\nTable[1]:\n - table[0] type=funcref initial=1\nElem[0]:\nCode[1]:\n - func[0] size=2\n",
      "disassemble": "\nbinary.99.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n00001f func[0]:\n 000020: 0b                         | end\n"
    },
    "binary.103.wasm": {
      "header": "\nbinary.103.wasm:\tfile format wasm 0x1\n\nSections:\n\n   Memory start=0x0000000a end=0x0000000d (size=0x00000003) count: 1\n     Data start=0x0000000f end=0x00000010 (size=0x00000001) count: 0\n",
      "details": "\nbinary.103.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nMemory[1]:\n - memory[0] pages: initial=1\nData[0]:\n",
      "disassemble": "\nbinary.103.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n"
    },
    "binary.108.wasm": {
      "header": "\nbinary.108.wasm:\tfile format wasm 0x1\n\nSections:\n\n     Type start=0x0000000a end=0x0000000e (size=0x00000004) count: 1\n Function start=0x00000010 end=0x00000012 (size=0x00000002) count: 1\n     Code start=0x00000014 end=0x00000025 (size=0x00000011) count: 1\n",
      "details": "\nbinary.108.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nType[1]:\n - type[0] () -> nil\nFunction[1]:\n - func[0] sig=0\nCode[1]:\n - func[0] size=15\n",
      "disassemble": "\nbinary.108.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n000016 func[0]:\n 000017: 02 40                      | block\n 000019: 41 01                      |   i32.const 1\n 00001b: 04 40                      |   if\n 00001d: 41 01                      |     i32.const 1\n 00001f: 0e 00 02                   |     br_table 2\n 000022: 0b                         |   end\n 000023: 0b                         | end\n 000024: 0b                         | end\n"
    },
    "binary.110.wasm": {
      "header": "\nbinary.110.wasm:\tfile format wasm 0x1\n\nSections:\n\n     Type start=0x0000000a end=0x0000000e (size=0x00000004) count: 1\n Function start=0x00000010 end=0x00000012 (size=0x00000002) count: 1\n    Start start=0x00000014 end=0x00000015 (size=0x00000001) start: 0\n     Code start=0x00000017 end=0x0000001b (size=0x00000004) count: 1\n",
      "details": "\nbinary.110.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nType[1]:\n - type[0] () -> nil\nFunction[1]:\n - func[0] sig=0\nStart:\n - start function: 0\nCode[1]:\n - func[0] size=2\n",
      "disassemble": "\nbinary.110.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n000019 func[0]:\n 00001a: 0b                         | end\n"
    }
  }
}
