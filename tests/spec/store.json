{
  "bin": {
    "store.0.wasm": "AGFzbQEAAAABBAFgAAADCgkAAAAAAAAAAAAFAwEAAQeXAQkOYXMtYmxvY2stdmFsdWUAAA1hcy1sb29wLXZhbHVlAAELYXMtYnItdmFsdWUAAg5hcy1icl9pZi12YWx1ZQADE2FzLWJyX2lmLXZhbHVlLWNvbmQABBFhcy1icl90YWJsZS12YWx1ZQAFD2FzLXJldHVybi12YWx1ZQAGCmFzLWlmLXRoZW4ABwphcy1pZi1lbHNlAAgKiAEJDAACQEEAQQE2AgALCwwAA0BBAEEBNgIACwsOAAJAQQBBATYCAAwACwsQAAJAQQBBATYCAEEBDQALCxAAAkBBBkEAQQE2AgANAAsLEQACQEEAQQE2AgBBAQ4AAAsLCgBBAEEBNgIADwsOAEEBBEBBAEEBNgIACwsPAEEABEAFQQBBATYCAAsL",
    "store.1.wat": "KG1lbW9yeSAxKShmdW5jIChwYXJhbSBpMzIpIChpMzIuc3RvcmUzMiAobG9jYWwuZ2V0IDApIChpMzIuY29uc3QgMCkpKQ==",
    "store.10.wasm": "AGFzbQEAAAABBgFgAX0BfQMCAQAFAwEAAQoOAQwAQQBDAACAPzgCAAs=",
    "store.11.wasm": "AGFzbQEAAAABBgFgAXwBfAMCAQAFAwEAAQoSARAAQQBEAAAAAAAA8D85AwAL",
    "store.12.wasm": "AGFzbQEAAAABBgFgAX8BfwMCAQAFAwEAAQoLAQkAQQBBAToAAAs=",
    "store.13.wasm": "AGFzbQEAAAABBgFgAX8BfwMCAQAFAwEAAQoLAQkAQQBBATsBAAs=",
    "store.14.wasm": "AGFzbQEAAAABBgFgAX4BfgMCAQAFAwEAAQoLAQkAQQBCATwAAAs=",
    "store.15.wasm": "AGFzbQEAAAABBgFgAX4BfgMCAQAFAwEAAQoLAQkAQQBCAT0BAAs=",
    "store.16.wasm": "AGFzbQEAAAABBgFgAX4BfgMCAQAFAwEAAQoLAQkAQQBCAT4CAAs=",
    "store.17.wasm": "AGFzbQEAAAABBAFgAAADAgEABQMBAAEKBwEFADYCAAs=",
    "store.18.wasm": "AGFzbQEAAAABBAFgAAADAgEABQMBAAEKCQEHAEEANgIACw==",
    "store.19.wasm": "AGFzbQEAAAABBAFgAAADAgEABQMBAAEKDgEMAEEAQQACQDYCAAsL",
    "store.2.wat": "KG1lbW9yeSAxKShmdW5jIChwYXJhbSBpMzIpIChpMzIuc3RvcmU2NCAobG9jYWwuZ2V0IDApIChpNjQuY29uc3QgMCkpKQ==",
    "store.20.wasm": "AGFzbQEAAAABBAFgAAADAgEABQMBAAEKDgEMAEEAAkBBADYCAAsL",
    "store.21.wasm": "AGFzbQEAAAABBAFgAAADAgEABQMBAAEKDgEMAEEAQQADQDYCAAsL",
    "store.22.wasm": "AGFzbQEAAAABBAFgAAADAgEABQMBAAEKDgEMAEEAA0BBADYCAAsL",
    "store.23.wasm": "AGFzbQEAAAABBAFgAAADAgEABQMBAAEKDgEMAEEAQQAEQDYCAAsL",
    "store.24.wasm": "AGFzbQEAAAABBAFgAAADAgEABQMBAAEKDgEMAEEABEBBADYCAAsL",
    "store.25.wasm": "AGFzbQEAAAABBAFgAAADAgEABQMBAAEKEQEPAEEAQQAEf0EABTYCAAsL",
    "store.26.wasm": "AGFzbQEAAAABBAFgAAADAgEABQMBAAEKEQEPAEEABH9BAAVBADYCAAsL",
    "store.27.wasm": "AGFzbQEAAAABBAFgAAADAgEABQMBAAEKEAEOAEEAQQACQDYCAAwACws=",
    "store.28.wasm": "AGFzbQEAAAABBAFgAAADAgEABQMBAAEKEAEOAEEAAkBBADYCAAwACws=",
    "store.29.wasm": "AGFzbQEAAAABBAFgAAADAgEABQMBAAEKEgEQAEEAQQACQDYCAEEBDQALCw==",
    "store.3.wat": "KG1lbW9yeSAxKShmdW5jIChwYXJhbSBpMzIpIChpNjQuc3RvcmU2NCAobG9jYWwuZ2V0IDApIChpNjQuY29uc3QgMCkpKQ==",
    "store.30.wasm": "AGFzbQEAAAABBAFgAAADAgEABQMBAAEKEgEQAEEAAkBBADYCAEEBDQALCw==",
    "store.31.wasm": "AGFzbQEAAAABBAFgAAADAgEABQMBAAEKEQEPAEEAQQACQDYCAA4AAAsL",
    "store.32.wasm": "AGFzbQEAAAABBAFgAAADAgEABQMBAAEKEQEPAEEAAkBBADYCAA4AAAsL",
    "store.33.wasm": "AGFzbQEAAAABBAFgAAADAgEABQMBAAEKCAEGADYCAA8L",
    "store.34.wasm": "AGFzbQEAAAABBAFgAAADAgEABQMBAAEKCgEIAEEANgIADws=",
    "store.35.wasm": "AGFzbQEAAAABBAFgAAADAgEABQMBAAEKDAEKADYCAEEBQQIbCw==",
    "store.36.wasm": "AGFzbQEAAAABBAFgAAADAgEABQMBAAEKDgEMAEEANgIAQQFBAhsL",
    "store.37.wasm": "AGFzbQEAAAABCQJgAABgAX8BfwMDAgABBQMBAAEKDgIHADYCABABCwQAIAAL",
    "store.38.wasm": "AGFzbQEAAAABCQJgAABgAX8BfwMDAgABBQMBAAEKEAIJAEEANgIAEAELBAAgAAs=",
    "store.39.wasm": "AGFzbQEAAAABCQJgAX8Bf2AAAAMDAgABBAUBcAEBAQUDAQABCQcBAEEACwEAChQCBAAgAAsNAAJ/NgIAQQARAAALCw==",
    "store.4.wat": "KG1lbW9yeSAxKShmdW5jIChwYXJhbSBpMzIpIChmMzIuc3RvcmUzMiAobG9jYWwuZ2V0IDApIChmMzIuY29uc3QgMCkpKQ==",
    "store.40.wasm": "AGFzbQEAAAABCQJgAX8Bf2AAAAMDAgABBAUBcAEBAQUDAQABCQcBAEEACwEAChYCBAAgAAsPAAJ/QQA2AgBBABEAAAsL",
    "store.41.wasm": "AGFzbQEAAAABBAFgAAADAgEABQMBAAEKDgEMAEMAAAAAQQA2AgAL",
    "store.42.wasm": "AGFzbQEAAAABBAFgAAADAgEABQMBAAEKDgEMAEMAAAAAQQA6AAAL",
    "store.43.wasm": "AGFzbQEAAAABBAFgAAADAgEABQMBAAEKDgEMAEMAAAAAQQA7AQAL",
    "store.44.wasm": "AGFzbQEAAAABBAFgAAADAgEABQMBAAEKDgEMAEMAAAAAQQA3AwAL",
    "store.45.wasm": "AGFzbQEAAAABBAFgAAADAgEABQMBAAEKDgEMAEMAAAAAQgA8AAAL",
    "store.46.wasm": "AGFzbQEAAAABBAFgAAADAgEABQMBAAEKDgEMAEMAAAAAQgA9AQAL",
    "store.47.wasm": "AGFzbQEAAAABBAFgAAADAgEABQMBAAEKDgEMAEMAAAAAQgA+AgAL",
    "store.48.wasm": "AGFzbQEAAAABBAFgAAADAgEABQMBAAEKEQEPAEMAAAAAQwAAAAA4AgAL",
    "store.49.wasm": "AGFzbQEAAAABBAFgAAADAgEABQMBAAEKFQETAEMAAAAARAAAAAAAAAAAOQMACw==",
    "store.5.wat": "KG1lbW9yeSAxKShmdW5jIChwYXJhbSBpMzIpIChmMzIuc3RvcmU2NCAobG9jYWwuZ2V0IDApIChmNjQuY29uc3QgMCkpKQ==",
    "store.50.wasm": "AGFzbQEAAAABBAFgAAADAgEABQMBAAEKDgEMAEEAQwAAAAA2AgAL",
    "store.51.wasm": "AGFzbQEAAAABBAFgAAADAgEABQMBAAEKDgEMAEEAQwAAAAA6AAAL",
    "store.52.wasm": "AGFzbQEAAAABBAFgAAADAgEABQMBAAEKDgEMAEEAQwAAAAA7AQAL",
    "store.53.wasm": "AGFzbQEAAAABBAFgAAADAgEABQMBAAEKDgEMAEEAQwAAAAA3AwAL",
    "store.54.wasm": "AGFzbQEAAAABBAFgAAADAgEABQMBAAEKEgEQAEEARAAAAAAAAAAAPAAACw==",
    "store.55.wasm": "AGFzbQEAAAABBAFgAAADAgEABQMBAAEKEgEQAEEARAAAAAAAAAAAPQEACw==",
    "store.56.wasm": "AGFzbQEAAAABBAFgAAADAgEABQMBAAEKEgEQAEEARAAAAAAAAAAAPgIACw==",
    "store.57.wasm": "AGFzbQEAAAABBAFgAAADAgEABQMBAAEKCwEJAEEAQQA4AgAL",
    "store.58.wasm": "AGFzbQEAAAABBAFgAAADAgEABQMBAAEKCwEJAEEAQgA5AwAL",
    "store.6.wat": "KG1lbW9yeSAxKShmdW5jIChwYXJhbSBpMzIpIChmNjQuc3RvcmUzMiAobG9jYWwuZ2V0IDApIChmMzIuY29uc3QgMCkpKQ==",
    "store.7.wat": "KG1lbW9yeSAxKShmdW5jIChwYXJhbSBpMzIpIChmNjQuc3RvcmU2NCAobG9jYWwuZ2V0IDApIChmNjQuY29uc3QgMCkpKQ==",
    "store.8.wasm": "AGFzbQEAAAABBgFgAX8BfwMCAQAFAwEAAQoLAQkAQQBBATYCAAs=",
    "store.9.wasm": "AGFzbQEAAAABBgFgAX4BfgMCAQAFAwEAAQoLAQkAQQBCATcDAAs="
  },
  "spec": {"source_filename": "/workspace/wasm-spec/test/core/store.wast",
 "commands": [
  {"type": "module", "line": 3, "filename": "store.0.wasm"}, 
  {"type": "assert_return", "line": 44, "action": {"type": "invoke", "field": "as-block-value", "args": []}, "expected": []}, 
  {"type": "assert_return", "line": 45, "action": {"type": "invoke", "field": "as-loop-value", "args": []}, "expected": []}, 
  {"type": "assert_return", "line": 47, "action": {"type": "invoke", "field": "as-br-value", "args": []}, "expected": []}, 
  {"type": "assert_return", "line": 48, "action": {"type": "invoke", "field": "as-br_if-value", "args": []}, "expected": []}, 
  {"type": "assert_return", "line": 49, "action": {"type": "invoke", "field": "as-br_if-value-cond", "args": []}, "expected": []}, 
  {"type": "assert_return", "line": 50, "action": {"type": "invoke", "field": "as-br_table-value", "args": []}, "expected": []}, 
  {"type": "assert_return", "line": 52, "action": {"type": "invoke", "field": "as-return-value", "args": []}, "expected": []}, 
  {"type": "assert_return", "line": 54, "action": {"type": "invoke", "field": "as-if-then", "args": []}, "expected": []}, 
  {"type": "assert_return", "line": 55, "action": {"type": "invoke", "field": "as-if-else", "args": []}, "expected": []}, 
  {"type": "assert_malformed", "line": 58, "filename": "store.1.wat", "text": "unknown operator", "module_type": "text"}, 
  {"type": "assert_malformed", "line": 65, "filename": "store.2.wat", "text": "unknown operator", "module_type": "text"}, 
  {"type": "assert_malformed", "line": 73, "filename": "store.3.wat", "text": "unknown operator", "module_type": "text"}, 
  {"type": "assert_malformed", "line": 81, "filename": "store.4.wat", "text": "unknown operator", "module_type": "text"}, 
  {"type": "assert_malformed", "line": 88, "filename": "store.5.wat", "text": "unknown operator", "module_type": "text"}, 
  {"type": "assert_malformed", "line": 96, "filename": "store.6.wat", "text": "unknown operator", "module_type": "text"}, 
  {"type": "assert_malformed", "line": 103, "filename": "store.7.wat", "text": "unknown operator", "module_type": "text"}, 
  {"type": "assert_invalid", "line": 112, "filename": "store.8.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 116, "filename": "store.9.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 120, "filename": "store.10.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 124, "filename": "store.11.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 128, "filename": "store.12.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 132, "filename": "store.13.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 136, "filename": "store.14.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 140, "filename": "store.15.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 144, "filename": "store.16.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 150, "filename": "store.17.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 159, "filename": "store.18.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 168, "filename": "store.19.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 178, "filename": "store.20.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 188, "filename": "store.21.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 198, "filename": "store.22.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 208, "filename": "store.23.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 218, "filename": "store.24.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 228, "filename": "store.25.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 238, "filename": "store.26.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 248, "filename": "store.27.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 258, "filename": "store.28.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 268, "filename": "store.29.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 278, "filename": "store.30.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 288, "filename": "store.31.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 298, "filename": "store.32.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 308, "filename": "store.33.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 317, "filename": "store.34.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 326, "filename": "store.35.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 335, "filename": "store.36.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 344, "filename": "store.37.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 354, "filename": "store.38.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 364, "filename": "store.39.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 380, "filename": "store.40.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 399, "filename": "store.41.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 400, "filename": "store.42.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 401, "filename": "store.43.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 402, "filename": "store.44.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 403, "filename": "store.45.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 404, "filename": "store.46.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 405, "filename": "store.47.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 406, "filename": "store.48.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 407, "filename": "store.49.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 409, "filename": "store.50.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 410, "filename": "store.51.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 411, "filename": "store.52.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 412, "filename": "store.53.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 413, "filename": "store.54.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 414, "filename": "store.55.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 415, "filename": "store.56.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 416, "filename": "store.57.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 417, "filename": "store.58.wasm", "text": "type mismatch", "module_type": "binary"}]},
  "code": [
    "(module (memory 1)\n  (func (export \"as-block-value\") (block (i32.store (i32.const 0) (i32.const 1))) )\n  (func (export \"as-loop-value\") (loop (i32.store (i32.const 0) (i32.const 1))) )\n  (func (export \"as-br-value\") (block (br 0 (i32.store (i32.const 0) (i32.const 1)))) )\n  (func (export \"as-br_if-value\") (block (br_if 0 (i32.store (i32.const 0) (i32.const 1)) (i32.const 1)) ) )\n  (func (export \"as-br_if-value-cond\") (block (br_if 0 (i32.const 6) (i32.store (i32.const 0) (i32.const 1))) ) )\n  (func (export \"as-br_table-value\") (block (br_table 0 (i32.store (i32.const 0) (i32.const 1)) (i32.const 1)) ) )\n  (func (export \"as-return-value\") (return (i32.store (i32.const 0) (i32.const 1))) )\n  (func (export \"as-if-then\") (if (i32.const 1) (then (i32.store (i32.const 0) (i32.const 1)))) )\n  (func (export \"as-if-else\") (if (i32.const 0) (then) (else (i32.store (i32.const 0) (i32.const 1)))) ))",
    "(assert_return (invoke \"as-block-value\"))",
    "(assert_return (invoke \"as-loop-value\"))",
    "(assert_return (invoke \"as-br-value\"))",
    "(assert_return (invoke \"as-br_if-value\"))",
    "(assert_return (invoke \"as-br_if-value-cond\"))",
    "(assert_return (invoke \"as-br_table-value\"))",
    "(assert_return (invoke \"as-return-value\"))",
    "(assert_return (invoke \"as-if-then\"))",
    "(assert_return (invoke \"as-if-else\"))",
    "(assert_malformed (module quote \"(memory 1)\" \"(func (param i32) (i32.store32 (local.get 0) (i32.const 0)))\" ) \"unknown operator\")",
    "(assert_malformed (module quote \"(memory 1)\" \"(func (param i32) (i32.store64 (local.get 0) (i64.const 0)))\" ) \"unknown operator\")",
    "(assert_malformed (module quote \"(memory 1)\" \"(func (param i32) (i64.store64 (local.get 0) (i64.const 0)))\" ) \"unknown operator\")",
    "(assert_malformed (module quote \"(memory 1)\" \"(func (param i32) (f32.store32 (local.get 0) (f32.const 0)))\" ) \"unknown operator\")",
    "(assert_malformed (module quote \"(memory 1)\" \"(func (param i32) (f32.store64 (local.get 0) (f64.const 0)))\" ) \"unknown operator\")",
    "(assert_malformed (module quote \"(memory 1)\" \"(func (param i32) (f64.store32 (local.get 0) (f32.const 0)))\" ) \"unknown operator\")",
    "(assert_malformed (module quote \"(memory 1)\" \"(func (param i32) (f64.store64 (local.get 0) (f64.const 0)))\" ) \"unknown operator\")",
    "(assert_invalid (module (memory 1) (func (param i32) (result i32) (i32.store (i32.const 0) (i32.const 1)))) \"type mismatch\")",
    "(assert_invalid (module (memory 1) (func (param i64) (result i64) (i64.store (i32.const 0) (i64.const 1)))) \"type mismatch\")",
    "(assert_invalid (module (memory 1) (func (param f32) (result f32) (f32.store (i32.const 0) (f32.const 1)))) \"type mismatch\")",
    "(assert_invalid (module (memory 1) (func (param f64) (result f64) (f64.store (i32.const 0) (f64.const 1)))) \"type mismatch\")",
    "(assert_invalid (module (memory 1) (func (param i32) (result i32) (i32.store8 (i32.const 0) (i32.const 1)))) \"type mismatch\")",
    "(assert_invalid (module (memory 1) (func (param i32) (result i32) (i32.store16 (i32.const 0) (i32.const 1)))) \"type mismatch\")",
    "(assert_invalid (module (memory 1) (func (param i64) (result i64) (i64.store8 (i32.const 0) (i64.const 1)))) \"type mismatch\")",
    "(assert_invalid (module (memory 1) (func (param i64) (result i64) (i64.store16 (i32.const 0) (i64.const 1)))) \"type mismatch\")",
    "(assert_invalid (module (memory 1) (func (param i64) (result i64) (i64.store32 (i32.const 0) (i64.const 1)))) \"type mismatch\")",
    "(assert_invalid (module (memory 1) (func $type-address-empty (i32.store) ) ) \"type mismatch\")",
    "(assert_invalid (module (memory 1) (func $type-value-empty (i32.const 0) (i32.store) ) ) \"type mismatch\")",
    "(assert_invalid (module (memory 1) (func $type-address-empty-in-block (i32.const 0) (i32.const 0) (block (i32.store)) ) ) \"type mismatch\")",
    "(assert_invalid (module (memory 1) (func $type-value-empty-in-block (i32.const 0) (block (i32.const 0) (i32.store)) ) ) \"type mismatch\")",
    "(assert_invalid (module (memory 1) (func $type-address-empty-in-loop (i32.const 0) (i32.const 0) (loop (i32.store)) ) ) \"type mismatch\")",
    "(assert_invalid (module (memory 1) (func $type-value-empty-in-loop (i32.const 0) (loop (i32.const 0) (i32.store)) ) ) \"type mismatch\")",
    "(assert_invalid (module (memory 1) (func $type-address-empty-in-then (i32.const 0) (i32.const 0) (if (then (i32.store))) ) ) \"type mismatch\")",
    "(assert_invalid (module (memory 1) (func $type-value-empty-in-then (i32.const 0) (if (then (i32.const 0) (i32.store))) ) ) \"type mismatch\")",
    "(assert_invalid (module (memory 1) (func $type-address-empty-in-else (i32.const 0) (i32.const 0) (if (result i32) (then (i32.const 0)) (else (i32.store))) ) ) \"type mismatch\")",
    "(assert_invalid (module (memory 1) (func $type-value-empty-in-else (i32.const 0) (if (result i32) (then (i32.const 0)) (else (i32.const 0) (i32.store))) ) ) \"type mismatch\")",
    "(assert_invalid (module (memory 1) (func $type-address-empty-in-br (i32.const 0) (i32.const 0) (block (br 0 (i32.store))) ) ) \"type mismatch\")",
    "(assert_invalid (module (memory 1) (func $type-value-empty-in-br (i32.const 0) (block (br 0 (i32.const 0) (i32.store))) ) ) \"type mismatch\")",
    "(assert_invalid (module (memory 1) (func $type-address-empty-in-br_if (i32.const 0) (i32.const 0) (block (br_if 0 (i32.store) (i32.const 1)) ) ) ) \"type mismatch\")",
    "(assert_invalid (module (memory 1) (func $type-value-empty-in-br_if (i32.const 0) (block (br_if 0 (i32.const 0) (i32.store) (i32.const 1)) ) ) ) \"type mismatch\")",
    "(assert_invalid (module (memory 1) (func $type-address-empty-in-br_table (i32.const 0) (i32.const 0) (block (br_table 0 (i32.store))) ) ) \"type mismatch\")",
    "(assert_invalid (module (memory 1) (func $type-value-empty-in-br_table (i32.const 0) (block (br_table 0 (i32.const 0) (i32.store))) ) ) \"type mismatch\")",
    "(assert_invalid (module (memory 1) (func $type-address-empty-in-return (return (i32.store)) ) ) \"type mismatch\")",
    "(assert_invalid (module (memory 1) (func $type-value-empty-in-return (return (i32.const 0) (i32.store)) ) ) \"type mismatch\")",
    "(assert_invalid (module (memory 1) (func $type-address-empty-in-select (select (i32.store) (i32.const 1) (i32.const 2)) ) ) \"type mismatch\")",
    "(assert_invalid (module (memory 1) (func $type-value-empty-in-select (select (i32.const 0) (i32.store) (i32.const 1) (i32.const 2)) ) ) \"type mismatch\")",
    "(assert_invalid (module (memory 1) (func $type-address-empty-in-call (call 1 (i32.store)) ) (func (param i32) (result i32) (local.get 0)) ) \"type mismatch\")",
    "(assert_invalid (module (memory 1) (func $type-value-empty-in-call (call 1 (i32.const 0) (i32.store)) ) (func (param i32) (result i32) (local.get 0)) ) \"type mismatch\")",
    "(assert_invalid (module (memory 1) (func $f (param i32) (result i32) (local.get 0)) (type $sig (func (param i32) (result i32))) (table funcref (elem $f)) (func $type-address-empty-in-call_indirect (block (result i32) (call_indirect (type $sig) (i32.store) (i32.const 0) ) ) ) ) \"type mismatch\")",
    "(assert_invalid (module (memory 1) (func $f (param i32) (result i32) (local.get 0)) (type $sig (func (param i32) (result i32))) (table funcref (elem $f)) (func $type-value-empty-in-call_indirect (block (result i32) (call_indirect (type $sig) (i32.const 0) (i32.store) (i32.const 0) ) ) ) ) \"type mismatch\")",
    "(assert_invalid (module (memory 1) (func (i32.store (f32.const 0) (i32.const 0)))) \"type mismatch\")",
    "(assert_invalid (module (memory 1) (func (i32.store8 (f32.const 0) (i32.const 0)))) \"type mismatch\")",
    "(assert_invalid (module (memory 1) (func (i32.store16 (f32.const 0) (i32.const 0)))) \"type mismatch\")",
    "(assert_invalid (module (memory 1) (func (i64.store (f32.const 0) (i32.const 0)))) \"type mismatch\")",
    "(assert_invalid (module (memory 1) (func (i64.store8 (f32.const 0) (i64.const 0)))) \"type mismatch\")",
    "(assert_invalid (module (memory 1) (func (i64.store16 (f32.const 0) (i64.const 0)))) \"type mismatch\")",
    "(assert_invalid (module (memory 1) (func (i64.store32 (f32.const 0) (i64.const 0)))) \"type mismatch\")",
    "(assert_invalid (module (memory 1) (func (f32.store (f32.const 0) (f32.const 0)))) \"type mismatch\")",
    "(assert_invalid (module (memory 1) (func (f64.store (f32.const 0) (f64.const 0)))) \"type mismatch\")",
    "(assert_invalid (module (memory 1) (func (i32.store (i32.const 0) (f32.const 0)))) \"type mismatch\")",
    "(assert_invalid (module (memory 1) (func (i32.store8 (i32.const 0) (f32.const 0)))) \"type mismatch\")",
    "(assert_invalid (module (memory 1) (func (i32.store16 (i32.const 0) (f32.const 0)))) \"type mismatch\")",
    "(assert_invalid (module (memory 1) (func (i64.store (i32.const 0) (f32.const 0)))) \"type mismatch\")",
    "(assert_invalid (module (memory 1) (func (i64.store8 (i32.const 0) (f64.const 0)))) \"type mismatch\")",
    "(assert_invalid (module (memory 1) (func (i64.store16 (i32.const 0) (f64.const 0)))) \"type mismatch\")",
    "(assert_invalid (module (memory 1) (func (i64.store32 (i32.const 0) (f64.const 0)))) \"type mismatch\")",
    "(assert_invalid (module (memory 1) (func (f32.store (i32.const 0) (i32.const 0)))) \"type mismatch\")",
    "(assert_invalid (module (memory 1) (func (f64.store (i32.const 0) (i64.const 0)))) \"type mismatch\")"
  ],
  "dump": {
    "store.0.wasm": {
      "header": "\nstore.0.wasm:\tfile format wasm 0x1\n\nSections:\n\n     Type start=0x0000000a end=0x0000000e (size=0x00000004) count: 1\n Function start=0x00000010 end=0x0000001a (size=0x0000000a) count: 9\n   Memory start=0x0000001c end=0x0000001f (size=0x00000003) count: 1\n   Export start=0x00000022 end=0x000000b9 (size=0x00000097) count: 9\n     Code start=0x000000bc end=0x00000144 (size=0x00000088) count: 9\n",
      "details": "\nstore.0.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nType[1]:\n - type[0] () -> nil\nFunction[9]:\n - func[0] sig=0 <as-block-value>\n - func[1] sig=0 <as-loop-value>\n - func[2] sig=0 <as-br-value>\n - func[3] sig=0 <as-br_if-value>\n - func[4] sig=0 <as-br_if-value-cond>\n - func[5] sig=0 <as-br_table-value>\n - func[6] sig=0 <as-return-value>\n - func[7] sig=0 <as-if-then>\n - func[8] sig=0 <as-if-else>\nMemory[1]:\n - memory[0] pages: initial=1\nExport[9]:\n - func[0] <as-block-value> -> \"as-block-value\"\n - func[1] <as-loop-value> -> \"as-loop-value\"\n - func[2] <as-br-value> -> \"as-br-value\"\n - func[3] <as-br_if-value> -> \"as-br_if-value\"\n - func[4] <as-br_if-value-cond> -> \"as-br_if-value-cond\"\n - func[5] <as-br_table-value> -> \"as-br_table-value\"\n - func[6] <as-return-value> -> \"as-return-value\"\n - func[7] <as-if-then> -> \"as-if-then\"\n - func[8] <as-if-else> -> \"as-if-else\"\nCode[9]:\n - func[0] size=12 <as-block-value>\n - func[1] size=12 <as-loop-value>\n - func[2] size=14 <as-br-value>\n - func[3] size=16 <as-br_if-value>\n - func[4] size=16 <as-br_if-value-cond>\n - func[5] size=17 <as-br_table-value>\n - func[6] size=10 <as-return-value>\n - func[7] size=14 <as-if-then>\n - func[8] size=15 <as-if-else>\n",
      "disassemble": "\nstore.0.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n0000be func[0] <as-block-value>:\n 0000bf: 02 40                      | block\n 0000c1: 41 00                      |   i32.const 0\n 0000c3: 41 01                      |   i32.const 1\n 0000c5: 36 02 00                   |   i32.store 2 0\n 0000c8: 0b                         | end\n 0000c9: 0b                         | end\n0000cb func[1] <as-loop-value>:\n 0000cc: 03 40                      | loop\n 0000ce: 41 00                      |   i32.const 0\n 0000d0: 41 01                      |   i32.const 1\n 0000d2: 36 02 00                   |   i32.store 2 0\n 0000d5: 0b                         | end\n 0000d6: 0b                         | end\n0000d8 func[2] <as-br-value>:\n 0000d9: 02 40                      | block\n 0000db: 41 00                      |   i32.const 0\n 0000dd: 41 01                      |   i32.const 1\n 0000df: 36 02 00                   |   i32.store 2 0\n 0000e2: 0c 00                      |   br 0\n 0000e4: 0b                         | end\n 0000e5: 0b                         | end\n0000e7 func[3] <as-br_if-value>:\n 0000e8: 02 40                      | block\n 0000ea: 41 00                      |   i32.const 0\n 0000ec: 41 01                      |   i32.const 1\n 0000ee: 36 02 00                   |   i32.store 2 0\n 0000f1: 41 01                      |   i32.const 1\n 0000f3: 0d 00                      |   br_if 0\n 0000f5: 0b                         | end\n 0000f6: 0b                         | end\n0000f8 func[4] <as-br_if-value-cond>:\n 0000f9: 02 40                      | block\n 0000fb: 41 06                      |   i32.const 6\n 0000fd: 41 00                      |   i32.const 0\n 0000ff: 41 01                      |   i32.const 1\n 000101: 36 02 00                   |   i32.store 2 0\n 000104: 0d 00                      |   br_if 0\n 000106: 0b                         | end\n 000107: 0b                         | end\n000109 func[5] <as-br_table-value>:\n 00010a: 02 40                      | block\n 00010c: 41 00                      |   i32.const 0\n 00010e: 41 01                      |   i32.const 1\n 000110: 36 02 00                   |   i32.store 2 0\n 000113: 41 01                      |   i32.const 1\n 000115: 0e 00 00                   |   br_table 0\n 000118: 0b                         | end\n 000119: 0b                         | end\n00011b func[6] <as-return-value>:\n 00011c: 41 00                      | i32.const 0\n 00011e: 41 01                      | i32.const 1\n 000120: 36 02 00                   | i32.store 2 0\n 000123: 0f                         | return\n 000124: 0b                         | end\n000126 func[7] <as-if-then>:\n 000127: 41 01                      | i32.const 1\n 000129: 04 40                      | if\n 00012b: 41 00                      |   i32.const 0\n 00012d: 41 01                      |   i32.const 1\n 00012f: 36 02 00                   |   i32.store 2 0\n 000132: 0b                         | end\n 000133: 0b                         | end\n000135 func[8] <as-if-else>:\n 000136: 41 00                      | i32.const 0\n 000138: 04 40                      | if\n 00013a: 05                         | else\n 00013b: 41 00                      |   i32.const 0\n 00013d: 41 01                      |   i32.const 1\n 00013f: 36 02 00                   |   i32.store 2 0\n 000142: 0b                         | end\n 000143: 0b                         | end\n"
    }
  }
}
