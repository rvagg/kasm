{
  "bin": {
    "global.0.wasm": "AGFzbQEAAAABNw1gAn9/AX9gAAF/YAABfmAAAW9gAX8AYAF+AGABbwBgAAF9YAABfGABfQBgAXwAYAAAYAF/AX8CLwIIc3BlY3Rlc3QKZ2xvYmFsX2kzMgN/AAhzcGVjdGVzdApnbG9iYWxfaTY0A34AAzMyAQIDAwECAQIEBQYHCAcICQoLAQEBAQEBAQEBAQEBAQABAQELCwEBDAEBCwEMDAEBAQEEBQFwAQEBBQMBAAEGVg1/AEF+C30AQwAAQMALfABEAAAAAAAAEMALfgBCewt/AUF0C30BQwAAUMELfAFEAAAAAAAALMALfgFCcQt/ACMAC34AIwELbwDQbwtvAdBvC3AA0HALB7EFLwVnZXQtYQAABWdldC1iAAEFZ2V0LXIAAgZnZXQtbXIAAwVnZXQteAAEBWdldC15AAUGZ2V0LXoxAAYGZ2V0LXoyAAcFc2V0LXgACAVzZXQteQAJBnNldC1tcgAKBWdldC0zAAsFZ2V0LTQADAVnZXQtNwANBWdldC04AA4Fc2V0LTcADwVzZXQtOAAQD2FzLXNlbGVjdC1maXJzdAASDWFzLXNlbGVjdC1taWQAEw5hcy1zZWxlY3QtbGFzdAAUDWFzLWxvb3AtZmlyc3QAFQthcy1sb29wLW1pZAAWDGFzLWxvb3AtbGFzdAAXD2FzLWlmLWNvbmRpdGlvbgAYCmFzLWlmLXRoZW4AGQphcy1pZi1lbHNlABoOYXMtYnJfaWYtZmlyc3QAGw1hcy1icl9pZi1sYXN0ABwRYXMtYnJfdGFibGUtZmlyc3QAHRBhcy1icl90YWJsZS1sYXN0AB4WYXMtY2FsbF9pbmRpcmVjdC1maXJzdAAgFGFzLWNhbGxfaW5kaXJlY3QtbWlkACEVYXMtY2FsbF9pbmRpcmVjdC1sYXN0ACIOYXMtc3RvcmUtZmlyc3QAIw1hcy1zdG9yZS1sYXN0ACQPYXMtbG9hZC1vcGVyYW5kACUUYXMtbWVtb3J5Lmdyb3ctdmFsdWUAJg1hcy1jYWxsLXZhbHVlACgPYXMtcmV0dXJuLXZhbHVlACkPYXMtZHJvcC1vcGVyYW5kACoLYXMtYnItdmFsdWUAKxJhcy1sb2NhbC5zZXQtdmFsdWUALBJhcy1sb2NhbC50ZWUtdmFsdWUALRNhcy1nbG9iYWwuc2V0LXZhbHVlAC4QYXMtdW5hcnktb3BlcmFuZAAvEWFzLWJpbmFyeS1vcGVyYW5kADASYXMtY29tcGFyZS1vcGVyYW5kADEJBwEAQQALAR8KsAMyBAAjAgsEACMFCwQAIwwLBAAjDQsEACMGCwQAIwkLBAAjCgsEACMLCwYAIAAkBgsGACAAJAkLBgAgACQNCwQAIwMLBAAjBAsEACMHCwQAIwgLBgAgACQHCwYAIAAkCAsCAAsJACMGQQJBAxsLCQBBAiMGQQMbCwkAQQJBAyMGGwsLAAN/IwYQERARCwsLAAN/EBEjBhARCwsLAAN/EBEQESMGCwsQACMGBH8QEUECBRARQQMLCwwAQQEEfyMGBUECCwsMAEEABH9BAgUjBgsLDgACfyMGQQINAEEDDwsLDgACf0ECIwYNAEEDDwsLDQACfyMGQQIOAQAACwsNAAJ/QQIjBg4BAAALCwQAIAALDgACfyMGQQJBABEAAAsLDgACf0ECIwZBABEAAAsLDgACf0ECQQAjBhEAAAsLCQAjBkEBNgIACwkAQQAjBjYCAAsHACMGKAIACwYAIwZAAAsEACAACwYAIwYQJwsFACMGDwsFACMGGgsJAAJ/IwYMAAsLCAAjBiEAIAALBgAjBiIACwgAIwYkBiMGCwUAIwZFCwcAIwYjBmwLBwAjAEEBSws=",
    "global.1.wasm": "AGFzbQEAAAABBAFgAAADAgEABgkBfQBDAAAAAAsKCwEJAEMAAIA/JAAL",
    "global.10.wasm": "AGFzbQEAAAAGBQF/AAEL",
    "global.11.wasm": "AGFzbQEAAAAGCQF/AEMAAAAACw==",
    "global.12.wasm": "AGFzbQEAAAAGCAF/AEEAQQAL",
    "global.13.wasm": "AGFzbQEAAAAGBAF/AAs=",
    "global.14.wasm": "AGFzbQEAAAACBgEAAANvAAYGAXAAIwAL",
    "global.15.wasm": "AGFzbQEAAAACFAEEdGVzdApnbG9iYWwtaTMyA38ABggBfwAjACMACw==",
    "global.16.wasm": "AGFzbQEAAAACFAEEdGVzdApnbG9iYWwtaTMyA38ABggBfwBBACMACw==",
    "global.17.wasm": "AGFzbQEAAAAGBgF/ACMACw==",
    "global.18.wasm": "AGFzbQEAAAAGCwJ/AEEAC38AIwAL",
    "global.19.wasm": "AGFzbQEAAAAGCwJ/AEEAC38AIwAL",
    "global.2.wasm": "AGFzbQEAAAABBAFgAAACGAEIc3BlY3Rlc3QKZ2xvYmFsX2kzMgN/AAMCAQAKCAEGAEEBJAAL",
    "global.20.wasm": "AGFzbQEAAAAGCwJ/ACMBC38AQQAL",
    "global.21.wasm": "AGFzbQEAAAACFAEEdGVzdApnbG9iYWwtaTMyA38ABgYBfwAjAgs=",
    "global.22.wasm": "AGFzbQEAAAACGAEEdGVzdA5nbG9iYWwtbXV0LWkzMgN/AQYGAX8AIwAL",
    "global.23.wasm": "AGFzbQEAAAACGAEIc3BlY3Rlc3QKZ2xvYmFsX2kzMgN/AA==",
    "global.24.wasm": "AGFzbQEAAAACmICAgAABCHNwZWN0ZXN0Cmdsb2JhbF9pMzIDfwI=",
    "global.25.wasm": "AGFzbQEAAAACmICAgAABCHNwZWN0ZXN0Cmdsb2JhbF9pMzIDf/8=",
    "global.26.wasm": "AGFzbQEAAAAGBgF/AEEACw==",
    "global.27.wasm": "AGFzbQEAAAAGhoCAgAABfwJBAAs=",
    "global.28.wasm": "AGFzbQEAAAAGhoCAgAABf/9BAAs=",
    "global.29.wasm": "AGFzbQEAAAABBQFgAAF/AwIBAAoGAQQAIwAL",
    "global.3.wasm": "AGFzbQEAAAAGCQF9AUMAAAAACwcFAQFhAwA=",
    "global.30.wasm": "AGFzbQEAAAABBQFgAAF/AwIBAAYGAX8AQQALCgYBBAAjAQs=",
    "global.31.wasm": "AGFzbQEAAAABBQFgAAF/AhgBCHNwZWN0ZXN0Cmdsb2JhbF9pMzIDfwADAgEACgYBBAAjAQs=",
    "global.32.wasm": "AGFzbQEAAAABBQFgAAF/AhgBCHNwZWN0ZXN0Cmdsb2JhbF9pMzIDfwADAgEABgYBfwBBAAsKBgEEACMCCw==",
    "global.33.wasm": "AGFzbQEAAAABBAFgAAADAgEACggBBgBBACQACw==",
    "global.34.wasm": "AGFzbQEAAAABBAFgAAADAgEABgYBfwBBAAsKCAEGAEEAJAEL",
    "global.35.wasm": "AGFzbQEAAAABBAFgAAACGAEIc3BlY3Rlc3QKZ2xvYmFsX2kzMgN/AAMCAQAKCAEGAEEAJAEL",
    "global.36.wasm": "AGFzbQEAAAABBAFgAAACGAEIc3BlY3Rlc3QKZ2xvYmFsX2kzMgN/AAMCAQAGBgF/AEEACwoIAQYAQQAkAgs=",
    "global.37.wasm": "AGFzbQEAAAABBAFgAAADAgEABgYBfwFBAAsKBgEEACQACw==",
    "global.38.wasm": "AGFzbQEAAAABBAFgAAADAgEABgYBfwFBAAsKCwEJAEEAAkAkAAsL",
    "global.39.wasm": "AGFzbQEAAAABBAFgAAADAgEABgYBfwFBAAsKCwEJAEEAA0AkAAsL",
    "global.4.wasm": "AGFzbQEAAAAGCQF9AUMAAAAACwcFAQFhAwA=",
    "global.40.wasm": "AGFzbQEAAAABBAFgAAADAgEABgYBfwFBAAsKDQELAEEAQQAEQCQACws=",
    "global.41.wasm": "AGFzbQEAAAABBAFgAAADAgEABgYBfwFBAAsKEAEOAEEAQQAEf0EABSQACws=",
    "global.42.wasm": "AGFzbQEAAAABBAFgAAADAgEABgYBfwFBAAsKDQELAEEAAkAkAAwACws=",
    "global.43.wasm": "AGFzbQEAAAABBAFgAAADAgEABgYBfwFBAAsKDQELAEEAAkAkAA0ACws=",
    "global.44.wasm": "AGFzbQEAAAABBAFgAAADAgEABgYBfwFBAAsKDgEMAEEAAkAkAA4AAAsL",
    "global.45.wasm": "AGFzbQEAAAABBAFgAAADAgEABgYBfwFBAAsKBwEFACQADws=",
    "global.46.wasm": "AGFzbQEAAAABBAFgAAADAgEABgYBfwFBAAsKCwEJACQAQQFBAhsL",
    "global.47.wasm": "AGFzbQEAAAABCQJgAABgAX8BfwMDAgABBgYBfwFBAAsKDQIGACQAEAELBAAgAAs=",
    "global.48.wasm": "AGFzbQEAAAABCQJgAX8Bf2AAAAMDAgABBAUBcAEBAQYGAX8BQQALCQcBAEEACwEAChMCBAAgAAsMAAJ/JABBABEAAAsL",
    "global.49.wat": "KGdsb2JhbCAkZm9vIGkzMiAoaTMyLmNvbnN0IDApKShnbG9iYWwgJGZvbyBpMzIgKGkzMi5jb25zdCAwKSk=",
    "global.5.wasm": "AGFzbQEAAAAGCgF9AEMAAAAAjAs=",
    "global.50.wat": "KGltcG9ydCAiIiAiIiAoZ2xvYmFsICRmb28gaTMyKSkoZ2xvYmFsICRmb28gaTMyIChpMzIuY29uc3QgMCkp",
    "global.51.wat": "KGltcG9ydCAiIiAiIiAoZ2xvYmFsICRmb28gaTMyKSkoaW1wb3J0ICIiICIiIChnbG9iYWwgJGZvbyBpMzIpKQ==",
    "global.6.wasm": "AGFzbQEAAAAGBgF9ACAACw==",
    "global.7.wasm": "AGFzbQEAAAAGCgF9AEMAAIA/jAs=",
    "global.8.wasm": "AGFzbQEAAAAGBwF/AEEAAQs=",
    "global.9.wasm": "AGFzbQEAAAAGBwF/AEEAaAs="
  },
  "spec": {"source_filename": "/workspace/wasm-spec/test/core/global.wast",
 "commands": [
  {"type": "module", "line": 3, "filename": "global.0.wasm"}, 
  {"type": "assert_return", "line": 196, "action": {"type": "invoke", "field": "get-a", "args": []}, "expected": [{"type": "i32", "value": "4294967294"}]}, 
  {"type": "assert_return", "line": 197, "action": {"type": "invoke", "field": "get-b", "args": []}, "expected": [{"type": "i64", "value": "18446744073709551611"}]}, 
  {"type": "assert_return", "line": 198, "action": {"type": "invoke", "field": "get-r", "args": []}, "expected": [{"type": "externref", "value": "null"}]}, 
  {"type": "assert_return", "line": 199, "action": {"type": "invoke", "field": "get-mr", "args": []}, "expected": [{"type": "externref", "value": "null"}]}, 
  {"type": "assert_return", "line": 200, "action": {"type": "invoke", "field": "get-x", "args": []}, "expected": [{"type": "i32", "value": "4294967284"}]}, 
  {"type": "assert_return", "line": 201, "action": {"type": "invoke", "field": "get-y", "args": []}, "expected": [{"type": "i64", "value": "18446744073709551601"}]}, 
  {"type": "assert_return", "line": 202, "action": {"type": "invoke", "field": "get-z1", "args": []}, "expected": [{"type": "i32", "value": "666"}]}, 
  {"type": "assert_return", "line": 203, "action": {"type": "invoke", "field": "get-z2", "args": []}, "expected": [{"type": "i64", "value": "666"}]}, 
  {"type": "assert_return", "line": 205, "action": {"type": "invoke", "field": "get-3", "args": []}, "expected": [{"type": "f32", "value": "3225419776"}]}, 
  {"type": "assert_return", "line": 206, "action": {"type": "invoke", "field": "get-4", "args": []}, "expected": [{"type": "f64", "value": "13839561654909534208"}]}, 
  {"type": "assert_return", "line": 207, "action": {"type": "invoke", "field": "get-7", "args": []}, "expected": [{"type": "f32", "value": "3243245568"}]}, 
  {"type": "assert_return", "line": 208, "action": {"type": "invoke", "field": "get-8", "args": []}, "expected": [{"type": "f64", "value": "13847442954257432576"}]}, 
  {"type": "assert_return", "line": 210, "action": {"type": "invoke", "field": "set-x", "args": [{"type": "i32", "value": "6"}]}, "expected": []}, 
  {"type": "assert_return", "line": 211, "action": {"type": "invoke", "field": "set-y", "args": [{"type": "i64", "value": "7"}]}, "expected": []}, 
  {"type": "assert_return", "line": 213, "action": {"type": "invoke", "field": "set-7", "args": [{"type": "f32", "value": "1090519040"}]}, "expected": []}, 
  {"type": "assert_return", "line": 214, "action": {"type": "invoke", "field": "set-8", "args": [{"type": "f64", "value": "4621256167635550208"}]}, "expected": []}, 
  {"type": "assert_return", "line": 216, "action": {"type": "invoke", "field": "get-x", "args": []}, "expected": [{"type": "i32", "value": "6"}]}, 
  {"type": "assert_return", "line": 217, "action": {"type": "invoke", "field": "get-y", "args": []}, "expected": [{"type": "i64", "value": "7"}]}, 
  {"type": "assert_return", "line": 218, "action": {"type": "invoke", "field": "get-7", "args": []}, "expected": [{"type": "f32", "value": "1090519040"}]}, 
  {"type": "assert_return", "line": 219, "action": {"type": "invoke", "field": "get-8", "args": []}, "expected": [{"type": "f64", "value": "4621256167635550208"}]}, 
  {"type": "assert_return", "line": 221, "action": {"type": "invoke", "field": "set-7", "args": [{"type": "f32", "value": "1090519040"}]}, "expected": []}, 
  {"type": "assert_return", "line": 222, "action": {"type": "invoke", "field": "set-8", "args": [{"type": "f64", "value": "4621256167635550208"}]}, "expected": []}, 
  {"type": "assert_return", "line": 223, "action": {"type": "invoke", "field": "set-mr", "args": [{"type": "externref", "value": "10"}]}, "expected": []}, 
  {"type": "assert_return", "line": 225, "action": {"type": "invoke", "field": "get-x", "args": []}, "expected": [{"type": "i32", "value": "6"}]}, 
  {"type": "assert_return", "line": 226, "action": {"type": "invoke", "field": "get-y", "args": []}, "expected": [{"type": "i64", "value": "7"}]}, 
  {"type": "assert_return", "line": 227, "action": {"type": "invoke", "field": "get-7", "args": []}, "expected": [{"type": "f32", "value": "1090519040"}]}, 
  {"type": "assert_return", "line": 228, "action": {"type": "invoke", "field": "get-8", "args": []}, "expected": [{"type": "f64", "value": "4621256167635550208"}]}, 
  {"type": "assert_return", "line": 229, "action": {"type": "invoke", "field": "get-mr", "args": []}, "expected": [{"type": "externref", "value": "10"}]}, 
  {"type": "assert_return", "line": 231, "action": {"type": "invoke", "field": "as-select-first", "args": []}, "expected": [{"type": "i32", "value": "6"}]}, 
  {"type": "assert_return", "line": 232, "action": {"type": "invoke", "field": "as-select-mid", "args": []}, "expected": [{"type": "i32", "value": "2"}]}, 
  {"type": "assert_return", "line": 233, "action": {"type": "invoke", "field": "as-select-last", "args": []}, "expected": [{"type": "i32", "value": "2"}]}, 
  {"type": "assert_return", "line": 235, "action": {"type": "invoke", "field": "as-loop-first", "args": []}, "expected": [{"type": "i32", "value": "6"}]}, 
  {"type": "assert_return", "line": 236, "action": {"type": "invoke", "field": "as-loop-mid", "args": []}, "expected": [{"type": "i32", "value": "6"}]}, 
  {"type": "assert_return", "line": 237, "action": {"type": "invoke", "field": "as-loop-last", "args": []}, "expected": [{"type": "i32", "value": "6"}]}, 
  {"type": "assert_return", "line": 239, "action": {"type": "invoke", "field": "as-if-condition", "args": []}, "expected": [{"type": "i32", "value": "2"}]}, 
  {"type": "assert_return", "line": 240, "action": {"type": "invoke", "field": "as-if-then", "args": []}, "expected": [{"type": "i32", "value": "6"}]}, 
  {"type": "assert_return", "line": 241, "action": {"type": "invoke", "field": "as-if-else", "args": []}, "expected": [{"type": "i32", "value": "6"}]}, 
  {"type": "assert_return", "line": 243, "action": {"type": "invoke", "field": "as-br_if-first", "args": []}, "expected": [{"type": "i32", "value": "6"}]}, 
  {"type": "assert_return", "line": 244, "action": {"type": "invoke", "field": "as-br_if-last", "args": []}, "expected": [{"type": "i32", "value": "2"}]}, 
  {"type": "assert_return", "line": 246, "action": {"type": "invoke", "field": "as-br_table-first", "args": []}, "expected": [{"type": "i32", "value": "6"}]}, 
  {"type": "assert_return", "line": 247, "action": {"type": "invoke", "field": "as-br_table-last", "args": []}, "expected": [{"type": "i32", "value": "2"}]}, 
  {"type": "assert_return", "line": 249, "action": {"type": "invoke", "field": "as-call_indirect-first", "args": []}, "expected": [{"type": "i32", "value": "6"}]}, 
  {"type": "assert_return", "line": 250, "action": {"type": "invoke", "field": "as-call_indirect-mid", "args": []}, "expected": [{"type": "i32", "value": "2"}]}, 
  {"type": "assert_trap", "line": 251, "action": {"type": "invoke", "field": "as-call_indirect-last", "args": []}, "text": "undefined element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_return", "line": 253, "action": {"type": "invoke", "field": "as-store-first", "args": []}, "expected": []}, 
  {"type": "assert_return", "line": 254, "action": {"type": "invoke", "field": "as-store-last", "args": []}, "expected": []}, 
  {"type": "assert_return", "line": 255, "action": {"type": "invoke", "field": "as-load-operand", "args": []}, "expected": [{"type": "i32", "value": "1"}]}, 
  {"type": "assert_return", "line": 256, "action": {"type": "invoke", "field": "as-memory.grow-value", "args": []}, "expected": [{"type": "i32", "value": "1"}]}, 
  {"type": "assert_return", "line": 258, "action": {"type": "invoke", "field": "as-call-value", "args": []}, "expected": [{"type": "i32", "value": "6"}]}, 
  {"type": "assert_return", "line": 260, "action": {"type": "invoke", "field": "as-return-value", "args": []}, "expected": [{"type": "i32", "value": "6"}]}, 
  {"type": "assert_return", "line": 261, "action": {"type": "invoke", "field": "as-drop-operand", "args": []}, "expected": []}, 
  {"type": "assert_return", "line": 262, "action": {"type": "invoke", "field": "as-br-value", "args": []}, "expected": [{"type": "i32", "value": "6"}]}, 
  {"type": "assert_return", "line": 264, "action": {"type": "invoke", "field": "as-local.set-value", "args": [{"type": "i32", "value": "1"}]}, "expected": [{"type": "i32", "value": "6"}]}, 
  {"type": "assert_return", "line": 265, "action": {"type": "invoke", "field": "as-local.tee-value", "args": [{"type": "i32", "value": "1"}]}, "expected": [{"type": "i32", "value": "6"}]}, 
  {"type": "assert_return", "line": 266, "action": {"type": "invoke", "field": "as-global.set-value", "args": []}, "expected": [{"type": "i32", "value": "6"}]}, 
  {"type": "assert_return", "line": 268, "action": {"type": "invoke", "field": "as-unary-operand", "args": []}, "expected": [{"type": "i32", "value": "0"}]}, 
  {"type": "assert_return", "line": 269, "action": {"type": "invoke", "field": "as-binary-operand", "args": []}, "expected": [{"type": "i32", "value": "36"}]}, 
  {"type": "assert_return", "line": 270, "action": {"type": "invoke", "field": "as-compare-operand", "args": []}, "expected": [{"type": "i32", "value": "1"}]}, 
  {"type": "assert_invalid", "line": 273, "filename": "global.1.wasm", "text": "global is immutable", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 278, "filename": "global.2.wasm", "text": "global is immutable", "module_type": "binary"}, 
  {"type": "module", "line": 283, "filename": "global.3.wasm"}, 
  {"type": "module", "line": 284, "filename": "global.4.wasm"}, 
  {"type": "assert_invalid", "line": 287, "filename": "global.5.wasm", "text": "constant expression required", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 292, "filename": "global.6.wasm", "text": "constant expression required", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 297, "filename": "global.7.wasm", "text": "constant expression required", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 302, "filename": "global.8.wasm", "text": "constant expression required", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 307, "filename": "global.9.wasm", "text": "constant expression required", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 312, "filename": "global.10.wasm", "text": "constant expression required", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 317, "filename": "global.11.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 322, "filename": "global.12.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 327, "filename": "global.13.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 332, "filename": "global.14.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 337, "filename": "global.15.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 342, "filename": "global.16.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 347, "filename": "global.17.wasm", "text": "unknown global", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 352, "filename": "global.18.wasm", "text": "unknown global", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 356, "filename": "global.19.wasm", "text": "unknown global", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 361, "filename": "global.20.wasm", "text": "unknown global", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 366, "filename": "global.21.wasm", "text": "unknown global", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 371, "filename": "global.22.wasm", "text": "constant expression required", "module_type": "binary"}, 
  {"type": "module", "line": 375, "filename": "global.23.wasm"}, 
  {"type": "assert_malformed", "line": 379, "filename": "global.24.wasm", "text": "malformed mutability", "module_type": "binary"}, 
  {"type": "assert_malformed", "line": 392, "filename": "global.25.wasm", "text": "malformed mutability", "module_type": "binary"}, 
  {"type": "module", "line": 405, "filename": "global.26.wasm"}, 
  {"type": "assert_malformed", "line": 409, "filename": "global.27.wasm", "text": "malformed mutability", "module_type": "binary"}, 
  {"type": "assert_malformed", "line": 421, "filename": "global.28.wasm", "text": "malformed mutability", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 435, "filename": "global.29.wasm", "text": "unknown global", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 440, "filename": "global.30.wasm", "text": "unknown global", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 448, "filename": "global.31.wasm", "text": "unknown global", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 456, "filename": "global.32.wasm", "text": "unknown global", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 466, "filename": "global.33.wasm", "text": "unknown global", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 471, "filename": "global.34.wasm", "text": "unknown global", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 479, "filename": "global.35.wasm", "text": "unknown global", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 487, "filename": "global.36.wasm", "text": "unknown global", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 497, "filename": "global.37.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 506, "filename": "global.38.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 516, "filename": "global.39.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 526, "filename": "global.40.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 536, "filename": "global.41.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 546, "filename": "global.42.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 556, "filename": "global.43.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 566, "filename": "global.44.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 576, "filename": "global.45.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 585, "filename": "global.46.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 594, "filename": "global.47.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 604, "filename": "global.48.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_malformed", "line": 622, "filename": "global.49.wat", "text": "duplicate global", "module_type": "text"}, 
  {"type": "assert_malformed", "line": 626, "filename": "global.50.wat", "text": "duplicate global", "module_type": "text"}, 
  {"type": "assert_malformed", "line": 630, "filename": "global.51.wat", "text": "duplicate global", "module_type": "text"}]},
  "code": [
    "(module (global (import \"spectest\" \"global_i32\") i32) (global (import \"spectest\" \"global_i64\") i64) (global $a i32 (i32.const -2)) (global f32 (f32.const -3)) (global f64 (f64.const -4)) (global $b i64 (i64.const -5)) (global $x (mut i32) (i32.const -12)) (global (mut f32) (f32.const -13)) (global (mut f64) (f64.const -14)) (global $y (mut i64) (i64.const -15)) (global $z1 i32 (global.get 0)) (global $z2 i64 (global.get 1)) (global $r externref (ref.null extern)) (global $mr (mut externref) (ref.null extern)) (global funcref (ref.null func))\n  (func (export \"get-a\") (result i32) (global.get $a))\n  (func (export \"get-b\") (result i64) (global.get $b))\n  (func (export \"get-r\") (result externref) (global.get $r))\n  (func (export \"get-mr\") (result externref) (global.get $mr))\n  (func (export \"get-x\") (result i32) (global.get $x))\n  (func (export \"get-y\") (result i64) (global.get $y))\n  (func (export \"get-z1\") (result i32) (global.get $z1))\n  (func (export \"get-z2\") (result i64) (global.get $z2))\n  (func (export \"set-x\") (param i32) (global.set $x (local.get 0)))\n  (func (export \"set-y\") (param i64) (global.set $y (local.get 0)))\n  (func (export \"set-mr\") (param externref) (global.set $mr (local.get 0)))\n  (func (export \"get-3\") (result f32) (global.get 3))\n  (func (export \"get-4\") (result f64) (global.get 4))\n  (func (export \"get-7\") (result f32) (global.get 7))\n  (func (export \"get-8\") (result f64) (global.get 8))\n  (func (export \"set-7\") (param f32) (global.set 7 (local.get 0)))\n  (func (export \"set-8\") (param f64) (global.set 8 (local.get 0))) (memory 1)\n  (func $dummy)\n  (func (export \"as-select-first\") (result i32) (select (global.get $x) (i32.const 2) (i32.const 3)) )\n  (func (export \"as-select-mid\") (result i32) (select (i32.const 2) (global.get $x) (i32.const 3)) )\n  (func (export \"as-select-last\") (result i32) (select (i32.const 2) (i32.const 3) (global.get $x)) )\n  (func (export \"as-loop-first\") (result i32) (loop (result i32) (global.get $x) (call $dummy) (call $dummy) ) )\n  (func (export \"as-loop-mid\") (result i32) (loop (result i32) (call $dummy) (global.get $x) (call $dummy) ) )\n  (func (export \"as-loop-last\") (result i32) (loop (result i32) (call $dummy) (call $dummy) (global.get $x) ) )\n  (func (export \"as-if-condition\") (result i32) (if (result i32) (global.get $x) (then (call $dummy) (i32.const 2)) (else (call $dummy) (i32.const 3)) ) )\n  (func (export \"as-if-then\") (result i32) (if (result i32) (i32.const 1) (then (global.get $x)) (else (i32.const 2)) ) )\n  (func (export \"as-if-else\") (result i32) (if (result i32) (i32.const 0) (then (i32.const 2)) (else (global.get $x)) ) )\n  (func (export \"as-br_if-first\") (result i32) (block (result i32) (br_if 0 (global.get $x) (i32.const 2)) (return (i32.const 3)) ) )\n  (func (export \"as-br_if-last\") (result i32) (block (result i32) (br_if 0 (i32.const 2) (global.get $x)) (return (i32.const 3)) ) )\n  (func (export \"as-br_table-first\") (result i32) (block (result i32) (global.get $x) (i32.const 2) (br_table 0 0) ) )\n  (func (export \"as-br_table-last\") (result i32) (block (result i32) (i32.const 2) (global.get $x) (br_table 0 0) ) )\n  (func $ (param i32 i32) (result i32) (local.get 0)) (type $check (func (param i32 i32) (result i32))) (table funcref (elem $func))\n  (func (export \"as-call_indirect-first\") (result i32) (block (result i32) (call_indirect (type $check) (global.get $x) (i32.const 2) (i32.const 0) ) ) )\n  (func (export \"as-call_indirect-mid\") (result i32) (block (result i32) (call_indirect (type $check) (i32.const 2) (global.get $x) (i32.const 0) ) ) )\n  (func (export \"as-call_indirect-last\") (result i32) (block (result i32) (call_indirect (type $check) (i32.const 2) (i32.const 0) (global.get $x) ) ) )\n  (func (export \"as-store-first\") (global.get $x) (i32.const 1) (i32.store) )\n  (func (export \"as-store-last\") (i32.const 0) (global.get $x) (i32.store) )\n  (func (export \"as-load-operand\") (result i32) (i32.load (global.get $x)) )\n  (func (export \"as-memory.grow-value\") (result i32) (memory.grow (global.get $x)) )\n  (func $f (param i32) (result i32) (local.get 0))\n  (func (export \"as-call-value\") (result i32) (call $f (global.get $x)) )\n  (func (export \"as-return-value\") (result i32) (global.get $x) (return) )\n  (func (export \"as-drop-operand\") (drop (global.get $x)) )\n  (func (export \"as-br-value\") (result i32) (block (result i32) (br 0 (global.get $x))) )\n  (func (export \"as-local.set-value\") (param i32) (result i32) (local.set 0 (global.get $x)) (local.get 0) )\n  (func (export \"as-local.tee-value\") (param i32) (result i32) (local.tee 0 (global.get $x)) )\n  (func (export \"as-global.set-value\") (result i32) (global.set $x (global.get $x)) (global.get $x) )\n  (func (export \"as-unary-operand\") (result i32) (i32.eqz (global.get $x)) )\n  (func (export \"as-binary-operand\") (result i32) (i32.mul (global.get $x) (global.get $x) ) )\n  (func (export \"as-compare-operand\") (result i32) (i32.gt_u (global.get 0) (i32.const 1) ) ))",
    "(assert_return (invoke \"get-a\") (i32.const -2))",
    "(assert_return (invoke \"get-b\") (i64.const -5))",
    "(assert_return (invoke \"get-r\") (ref.null extern))",
    "(assert_return (invoke \"get-mr\") (ref.null extern))",
    "(assert_return (invoke \"get-x\") (i32.const -12))",
    "(assert_return (invoke \"get-y\") (i64.const -15))",
    "(assert_return (invoke \"get-z1\") (i32.const 666))",
    "(assert_return (invoke \"get-z2\") (i64.const 666))",
    "(assert_return (invoke \"get-3\") (f32.const -3))",
    "(assert_return (invoke \"get-4\") (f64.const -4))",
    "(assert_return (invoke \"get-7\") (f32.const -13))",
    "(assert_return (invoke \"get-8\") (f64.const -14))",
    "(assert_return (invoke \"set-x\" (i32.const 6)))",
    "(assert_return (invoke \"set-y\" (i64.const 7)))",
    "(assert_return (invoke \"set-7\" (f32.const 8)))",
    "(assert_return (invoke \"set-8\" (f64.const 9)))",
    "(assert_return (invoke \"get-x\") (i32.const 6))",
    "(assert_return (invoke \"get-y\") (i64.const 7))",
    "(assert_return (invoke \"get-7\") (f32.const 8))",
    "(assert_return (invoke \"get-8\") (f64.const 9))",
    "(assert_return (invoke \"set-7\" (f32.const 8)))",
    "(assert_return (invoke \"set-8\" (f64.const 9)))",
    "(assert_return (invoke \"set-mr\" (ref.extern 10)))",
    "(assert_return (invoke \"get-x\") (i32.const 6))",
    "(assert_return (invoke \"get-y\") (i64.const 7))",
    "(assert_return (invoke \"get-7\") (f32.const 8))",
    "(assert_return (invoke \"get-8\") (f64.const 9))",
    "(assert_return (invoke \"get-mr\") (ref.extern 10))",
    "(assert_return (invoke \"as-select-first\") (i32.const 6))",
    "(assert_return (invoke \"as-select-mid\") (i32.const 2))",
    "(assert_return (invoke \"as-select-last\") (i32.const 2))",
    "(assert_return (invoke \"as-loop-first\") (i32.const 6))",
    "(assert_return (invoke \"as-loop-mid\") (i32.const 6))",
    "(assert_return (invoke \"as-loop-last\") (i32.const 6))",
    "(assert_return (invoke \"as-if-condition\") (i32.const 2))",
    "(assert_return (invoke \"as-if-then\") (i32.const 6))",
    "(assert_return (invoke \"as-if-else\") (i32.const 6))",
    "(assert_return (invoke \"as-br_if-first\") (i32.const 6))",
    "(assert_return (invoke \"as-br_if-last\") (i32.const 2))",
    "(assert_return (invoke \"as-br_table-first\") (i32.const 6))",
    "(assert_return (invoke \"as-br_table-last\") (i32.const 2))",
    "(assert_return (invoke \"as-call_indirect-first\") (i32.const 6))",
    "(assert_return (invoke \"as-call_indirect-mid\") (i32.const 2))",
    "(assert_trap (invoke \"as-call_indirect-last\") \"undefined element\")",
    "(assert_return (invoke \"as-store-first\"))",
    "(assert_return (invoke \"as-store-last\"))",
    "(assert_return (invoke \"as-load-operand\") (i32.const 1))",
    "(assert_return (invoke \"as-memory.grow-value\") (i32.const 1))",
    "(assert_return (invoke \"as-call-value\") (i32.const 6))",
    "(assert_return (invoke \"as-return-value\") (i32.const 6))",
    "(assert_return (invoke \"as-drop-operand\"))",
    "(assert_return (invoke \"as-br-value\") (i32.const 6))",
    "(assert_return (invoke \"as-local.set-value\" (i32.const 1)) (i32.const 6))",
    "(assert_return (invoke \"as-local.tee-value\" (i32.const 1)) (i32.const 6))",
    "(assert_return (invoke \"as-global.set-value\") (i32.const 6))",
    "(assert_return (invoke \"as-unary-operand\") (i32.const 0))",
    "(assert_return (invoke \"as-binary-operand\") (i32.const 36))",
    "(assert_return (invoke \"as-compare-operand\") (i32.const 1))",
    "(assert_invalid (module (global f32 (f32.const 0)) (func (global.set 0 (f32.const 1)))) \"global is immutable\")",
    "(assert_invalid (module (import \"spectest\" \"global_i32\" (global i32)) (func (global.set 0 (i32.const 1)))) \"global is immutable\")",
    "(module (global (mut f32) (f32.const 0)) (export \"a\" (global 0)))",
    "(module (global (export \"a\") (mut f32) (f32.const 0)))",
    "(assert_invalid (module (global f32 (f32.neg (f32.const 0)))) \"constant expression required\")",
    "(assert_invalid (module (global f32 (local.get 0))) \"constant expression required\")",
    "(assert_invalid (module (global f32 (f32.neg (f32.const 1)))) \"constant expression required\")",
    "(assert_invalid (module (global i32 (i32.const 0) (nop))) \"constant expression required\")",
    "(assert_invalid (module (global i32 (i32.ctz (i32.const 0)))) \"constant expression required\")",
    "(assert_invalid (module (global i32 (nop))) \"constant expression required\")",
    "(assert_invalid (module (global i32 (f32.const 0))) \"type mismatch\")",
    "(assert_invalid (module (global i32 (i32.const 0) (i32.const 0))) \"type mismatch\")",
    "(assert_invalid (module (global i32 )) \"type mismatch\")",
    "(assert_invalid (module (global (import \"\" \"\") externref) (global funcref (global.get 0))) \"type mismatch\")",
    "(assert_invalid (module (global (import \"test\" \"global-i32\") i32) (global i32 (global.get 0) (global.get 0))) \"type mismatch\")",
    "(assert_invalid (module (global (import \"test\" \"global-i32\") i32) (global i32 (i32.const 0) (global.get 0))) \"type mismatch\")",
    "(assert_invalid (module (global i32 (global.get 0))) \"unknown global\")",
    "(assert_invalid (module (global i32 (i32.const 0)) (global i32 (global.get 0))) \"unknown global\")",
    "(assert_invalid (module (global $g i32 (i32.const 0)) (global i32 (global.get $g))) \"unknown global\")",
    "(assert_invalid (module (global i32 (global.get 1)) (global i32 (i32.const 0))) \"unknown global\")",
    "(assert_invalid (module (global (import \"test\" \"global-i32\") i32) (global i32 (global.get 2))) \"unknown global\")",
    "(assert_invalid (module (global (import \"test\" \"global-mut-i32\") (mut i32)) (global i32 (global.get 0))) \"constant expression required\")",
    "(module (import \"spectest\" \"global_i32\" (global i32)))",
    "(assert_malformed (module binary \"\\00asm\" \"\\01\\00\\00\\00\" \"\\02\\98\\80\\80\\80\\00\" \"\\01\" \"\\08\\73\\70\\65\\63\\74\\65\\73\\74\" \"\\0a\\67\\6c\\6f\\62\\61\\6c\\5f\\69\\33\\32\" \"\\03\" \"\\7f\" \"\\02\" ) \"malformed mutability\")",
    "(assert_malformed (module binary \"\\00asm\" \"\\01\\00\\00\\00\" \"\\02\\98\\80\\80\\80\\00\" \"\\01\" \"\\08\\73\\70\\65\\63\\74\\65\\73\\74\" \"\\0a\\67\\6c\\6f\\62\\61\\6c\\5f\\69\\33\\32\" \"\\03\" \"\\7f\" \"\\ff\" ) \"malformed mutability\")",
    "(module (global i32 (i32.const 0)))",
    "(assert_malformed (module binary \"\\00asm\" \"\\01\\00\\00\\00\" \"\\06\\86\\80\\80\\80\\00\" \"\\01\" \"\\7f\" \"\\02\" \"\\41\\00\" \"\\0b\" ) \"malformed mutability\")",
    "(assert_malformed (module binary \"\\00asm\" \"\\01\\00\\00\\00\" \"\\06\\86\\80\\80\\80\\00\" \"\\01\" \"\\7f\" \"\\ff\" \"\\41\\00\" \"\\0b\" ) \"malformed mutability\")",
    "(assert_invalid (module (func (result i32) (global.get 0))) \"unknown global\")",
    "(assert_invalid (module (global i32 (i32.const 0)) (func (result i32) (global.get 1)) ) \"unknown global\")",
    "(assert_invalid (module (import \"spectest\" \"global_i32\" (global i32)) (func (result i32) (global.get 1)) ) \"unknown global\")",
    "(assert_invalid (module (import \"spectest\" \"global_i32\" (global i32)) (global i32 (i32.const 0)) (func (result i32) (global.get 2)) ) \"unknown global\")",
    "(assert_invalid (module (func (i32.const 0) (global.set 0))) \"unknown global\")",
    "(assert_invalid (module (global i32 (i32.const 0)) (func (i32.const 0) (global.set 1)) ) \"unknown global\")",
    "(assert_invalid (module (import \"spectest\" \"global_i32\" (global i32)) (func (i32.const 0) (global.set 1)) ) \"unknown global\")",
    "(assert_invalid (module (import \"spectest\" \"global_i32\" (global i32)) (global i32 (i32.const 0)) (func (i32.const 0) (global.set 2)) ) \"unknown global\")",
    "(assert_invalid (module (global $x (mut i32) (i32.const 0)) (func $type-global.set-value-empty (global.set $x) ) ) \"type mismatch\")",
    "(assert_invalid (module (global $x (mut i32) (i32.const 0)) (func $type-global.set-value-empty-in-block (i32.const 0) (block (global.set $x)) ) ) \"type mismatch\")",
    "(assert_invalid (module (global $x (mut i32) (i32.const 0)) (func $type-global.set-value-empty-in-loop (i32.const 0) (loop (global.set $x)) ) ) \"type mismatch\")",
    "(assert_invalid (module (global $x (mut i32) (i32.const 0)) (func $type-global.set-value-empty-in-then (i32.const 0) (i32.const 0) (if (then (global.set $x))) ) ) \"type mismatch\")",
    "(assert_invalid (module (global $x (mut i32) (i32.const 0)) (func $type-global.set-value-empty-in-else (i32.const 0) (i32.const 0) (if (result i32) (then (i32.const 0)) (else (global.set $x))) ) ) \"type mismatch\")",
    "(assert_invalid (module (global $x (mut i32) (i32.const 0)) (func $type-global.set-value-empty-in-br (i32.const 0) (block (br 0 (global.set $x))) ) ) \"type mismatch\")",
    "(assert_invalid (module (global $x (mut i32) (i32.const 0)) (func $type-global.set-value-empty-in-br_if (i32.const 0) (block (br_if 0 (global.set $x))) ) ) \"type mismatch\")",
    "(assert_invalid (module (global $x (mut i32) (i32.const 0)) (func $type-global.set-value-empty-in-br_table (i32.const 0) (block (br_table 0 (global.set $x))) ) ) \"type mismatch\")",
    "(assert_invalid (module (global $x (mut i32) (i32.const 0)) (func $type-global.set-value-empty-in-return (return (global.set $x)) ) ) \"type mismatch\")",
    "(assert_invalid (module (global $x (mut i32) (i32.const 0)) (func $type-global.set-value-empty-in-select (select (global.set $x) (i32.const 1) (i32.const 2)) ) ) \"type mismatch\")",
    "(assert_invalid (module (global $x (mut i32) (i32.const 0)) (func $type-global.set-value-empty-in-call (call 1 (global.set $x)) ) (func (param i32) (result i32) (local.get 0)) ) \"type mismatch\")",
    "(assert_invalid (module (global $x (mut i32) (i32.const 0)) (func $f (param i32) (result i32) (local.get 0)) (type $sig (func (param i32) (result i32))) (table funcref (elem $f)) (func $type-global.set-value-empty-in-call_indirect (block (result i32) (call_indirect (type $sig) (global.set $x) (i32.const 0) ) ) ) ) \"type mismatch\")",
    "(assert_malformed (module quote \"(global $foo i32 (i32.const 0))\" \"(global $foo i32 (i32.const 0))\") \"duplicate global\")",
    "(assert_malformed (module quote \"(import \\\"\\\" \\\"\\\" (global $foo i32))\" \"(global $foo i32 (i32.const 0))\") \"duplicate global\")",
    "(assert_malformed (module quote \"(import \\\"\\\" \\\"\\\" (global $foo i32))\" \"(import \\\"\\\" \\\"\\\" (global $foo i32))\") \"duplicate global\")"
  ],
  "dump": {
    "global.0.wasm": {
      "header": "\nglobal.0.wasm:\tfile format wasm 0x1\n\nSections:\n\n     Type start=0x0000000a end=0x00000041 (size=0x00000037) count: 13\n   Import start=0x00000043 end=0x00000072 (size=0x0000002f) count: 2\n Function start=0x00000074 end=0x000000a7 (size=0x00000033) count: 50\n    Table start=0x000000a9 end=0x000000ae (size=0x00000005) count: 1\n   Memory start=0x000000b0 end=0x000000b3 (size=0x00000003) count: 1\n   Global start=0x000000b5 end=0x0000010b (size=0x00000056) count: 13\n   Export start=0x0000010e end=0x000003bf (size=0x000002b1) count: 47\n     Elem start=0x000003c1 end=0x000003c8 (size=0x00000007) count: 1\n     Code start=0x000003cb end=0x0000057b (size=0x000001b0) count: 50\n",
      "details": "\nglobal.0.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nType[13]:\n - type[0] (i32, i32) -> i32\n - type[1] () -> i32\n - type[2] () -> i64\n - type[3] () -> externref\n - type[4] (i32) -> nil\n - type[5] (i64) -> nil\n - type[6] (externref) -> nil\n - type[7] () -> f32\n - type[8] () -> f64\n - type[9] (f32) -> nil\n - type[10] (f64) -> nil\n - type[11] () -> nil\n - type[12] (i32) -> i32\nImport[2]:\n - global[0] i32 mutable=0 <- spectest.global_i32\n - global[1] i64 mutable=0 <- spectest.global_i64\nFunction[50]:\n - func[0] sig=1 <get-a>\n - func[1] sig=2 <get-b>\n - func[2] sig=3 <get-r>\n - func[3] sig=3 <get-mr>\n - func[4] sig=1 <get-x>\n - func[5] sig=2 <get-y>\n - func[6] sig=1 <get-z1>\n - func[7] sig=2 <get-z2>\n - func[8] sig=4 <set-x>\n - func[9] sig=5 <set-y>\n - func[10] sig=6 <set-mr>\n - func[11] sig=7 <get-3>\n - func[12] sig=8 <get-4>\n - func[13] sig=7 <get-7>\n - func[14] sig=8 <get-8>\n - func[15] sig=9 <set-7>\n - func[16] sig=10 <set-8>\n - func[17] sig=11\n - func[18] sig=1 <as-select-first>\n - func[19] sig=1 <as-select-mid>\n - func[20] sig=1 <as-select-last>\n - func[21] sig=1 <as-loop-first>\n - func[22] sig=1 <as-loop-mid>\n - func[23] sig=1 <as-loop-last>\n - func[24] sig=1 <as-if-condition>\n - func[25] sig=1 <as-if-then>\n - func[26] sig=1 <as-if-else>\n - func[27] sig=1 <as-br_if-first>\n - func[28] sig=1 <as-br_if-last>\n - func[29] sig=1 <as-br_table-first>\n - func[30] sig=1 <as-br_table-last>\n - func[31] sig=0\n - func[32] sig=1 <as-call_indirect-first>\n - func[33] sig=1 <as-call_indirect-mid>\n - func[34] sig=1 <as-call_indirect-last>\n - func[35] sig=11 <as-store-first>\n - func[36] sig=11 <as-store-last>\n - func[37] sig=1 <as-load-operand>\n - func[38] sig=1 <as-memory.grow-value>\n - func[39] sig=12\n - func[40] sig=1 <as-call-value>\n - func[41] sig=1 <as-return-value>\n - func[42] sig=11 <as-drop-operand>\n - func[43] sig=1 <as-br-value>\n - func[44] sig=12 <as-local.set-value>\n - func[45] sig=12 <as-local.tee-value>\n - func[46] sig=1 <as-global.set-value>\n - func[47] sig=1 <as-unary-operand>\n - func[48] sig=1 <as-binary-operand>\n - func[49] sig=1 <as-compare-operand>\nTable[1]:\n - table[0] type=funcref initial=1 max=1\nMemory[1]:\n - memory[0] pages: initial=1\nGlobal[13]:\n - global[2] i32 mutable=0 - init i32=-2\n - global[3] f32 mutable=0 - init f32=-0x1.8p+1\n - global[4] f64 mutable=0 - init f64=-0x1p+2\n - global[5] i64 mutable=0 - init i64=-5\n - global[6] i32 mutable=1 - init i32=-12\n - global[7] f32 mutable=1 - init f32=-0x1.ap+3\n - global[8] f64 mutable=1 - init f64=-0x1.cp+3\n - global[9] i64 mutable=1 - init i64=-15\n - global[10] i32 mutable=0 - init global=0 <spectest.global_i32>\n - global[11] i64 mutable=0 - init global=1 <spectest.global_i64>\n - global[12] externref mutable=0 - init ref.null externref\n - global[13] externref mutable=1 - init ref.null externref\n - global[14] funcref mutable=0 - init ref.null funcref\nExport[47]:\n - func[0] <get-a> -> \"get-a\"\n - func[1] <get-b> -> \"get-b\"\n - func[2] <get-r> -> \"get-r\"\n - func[3] <get-mr> -> \"get-mr\"\n - func[4] <get-x> -> \"get-x\"\n - func[5] <get-y> -> \"get-y\"\n - func[6] <get-z1> -> \"get-z1\"\n - func[7] <get-z2> -> \"get-z2\"\n - func[8] <set-x> -> \"set-x\"\n - func[9] <set-y> -> \"set-y\"\n - func[10] <set-mr> -> \"set-mr\"\n - func[11] <get-3> -> \"get-3\"\n - func[12] <get-4> -> \"get-4\"\n - func[13] <get-7> -> \"get-7\"\n - func[14] <get-8> -> \"get-8\"\n - func[15] <set-7> -> \"set-7\"\n - func[16] <set-8> -> \"set-8\"\n - func[18] <as-select-first> -> \"as-select-first\"\n - func[19] <as-select-mid> -> \"as-select-mid\"\n - func[20] <as-select-last> -> \"as-select-last\"\n - func[21] <as-loop-first> -> \"as-loop-first\"\n - func[22] <as-loop-mid> -> \"as-loop-mid\"\n - func[23] <as-loop-last> -> \"as-loop-last\"\n - func[24] <as-if-condition> -> \"as-if-condition\"\n - func[25] <as-if-then> -> \"as-if-then\"\n - func[26] <as-if-else> -> \"as-if-else\"\n - func[27] <as-br_if-first> -> \"as-br_if-first\"\n - func[28] <as-br_if-last> -> \"as-br_if-last\"\n - func[29] <as-br_table-first> -> \"as-br_table-first\"\n - func[30] <as-br_table-last> -> \"as-br_table-last\"\n - func[32] <as-call_indirect-first> -> \"as-call_indirect-first\"\n - func[33] <as-call_indirect-mid> -> \"as-call_indirect-mid\"\n - func[34] <as-call_indirect-last> -> \"as-call_indirect-last\"\n - func[35] <as-store-first> -> \"as-store-first\"\n - func[36] <as-store-last> -> \"as-store-last\"\n - func[37] <as-load-operand> -> \"as-load-operand\"\n - func[38] <as-memory.grow-value> -> \"as-memory.grow-value\"\n - func[40] <as-call-value> -> \"as-call-value\"\n - func[41] <as-return-value> -> \"as-return-value\"\n - func[42] <as-drop-operand> -> \"as-drop-operand\"\n - func[43] <as-br-value> -> \"as-br-value\"\n - func[44] <as-local.set-value> -> \"as-local.set-value\"\n - func[45] <as-local.tee-value> -> \"as-local.tee-value\"\n - func[46] <as-global.set-value> -> \"as-global.set-value\"\n - func[47] <as-unary-operand> -> \"as-unary-operand\"\n - func[48] <as-binary-operand> -> \"as-binary-operand\"\n - func[49] <as-compare-operand> -> \"as-compare-operand\"\nElem[1]:\n - segment[0] flags=0 table=0 count=1 - init i32=0\n  - elem[0] = ref.func:31\nCode[50]:\n - func[0] size=4 <get-a>\n - func[1] size=4 <get-b>\n - func[2] size=4 <get-r>\n - func[3] size=4 <get-mr>\n - func[4] size=4 <get-x>\n - func[5] size=4 <get-y>\n - func[6] size=4 <get-z1>\n - func[7] size=4 <get-z2>\n - func[8] size=6 <set-x>\n - func[9] size=6 <set-y>\n - func[10] size=6 <set-mr>\n - func[11] size=4 <get-3>\n - func[12] size=4 <get-4>\n - func[13] size=4 <get-7>\n - func[14] size=4 <get-8>\n - func[15] size=6 <set-7>\n - func[16] size=6 <set-8>\n - func[17] size=2\n - func[18] size=9 <as-select-first>\n - func[19] size=9 <as-select-mid>\n - func[20] size=9 <as-select-last>\n - func[21] size=11 <as-loop-first>\n - func[22] size=11 <as-loop-mid>\n - func[23] size=11 <as-loop-last>\n - func[24] size=16 <as-if-condition>\n - func[25] size=12 <as-if-then>\n - func[26] size=12 <as-if-else>\n - func[27] size=14 <as-br_if-first>\n - func[28] size=14 <as-br_if-last>\n - func[29] size=13 <as-br_table-first>\n - func[30] size=13 <as-br_table-last>\n - func[31] size=4\n - func[32] size=14 <as-call_indirect-first>\n - func[33] size=14 <as-call_indirect-mid>\n - func[34] size=14 <as-call_indirect-last>\n - func[35] size=9 <as-store-first>\n - func[36] size=9 <as-store-last>\n - func[37] size=7 <as-load-operand>\n - func[38] size=6 <as-memory.grow-value>\n - func[39] size=4\n - func[40] size=6 <as-call-value>\n - func[41] size=5 <as-return-value>\n - func[42] size=5 <as-drop-operand>\n - func[43] size=9 <as-br-value>\n - func[44] size=8 <as-local.set-value>\n - func[45] size=6 <as-local.tee-value>\n - func[46] size=8 <as-global.set-value>\n - func[47] size=5 <as-unary-operand>\n - func[48] size=7 <as-binary-operand>\n - func[49] size=7 <as-compare-operand>\n",
      "disassemble": "\nglobal.0.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n0003cd func[0] <get-a>:\n 0003ce: 23 02                      | global.get 2\n 0003d0: 0b                         | end\n0003d2 func[1] <get-b>:\n 0003d3: 23 05                      | global.get 5\n 0003d5: 0b                         | end\n0003d7 func[2] <get-r>:\n 0003d8: 23 0c                      | global.get 12\n 0003da: 0b                         | end\n0003dc func[3] <get-mr>:\n 0003dd: 23 0d                      | global.get 13\n 0003df: 0b                         | end\n0003e1 func[4] <get-x>:\n 0003e2: 23 06                      | global.get 6\n 0003e4: 0b                         | end\n0003e6 func[5] <get-y>:\n 0003e7: 23 09                      | global.get 9\n 0003e9: 0b                         | end\n0003eb func[6] <get-z1>:\n 0003ec: 23 0a                      | global.get 10\n 0003ee: 0b                         | end\n0003f0 func[7] <get-z2>:\n 0003f1: 23 0b                      | global.get 11\n 0003f3: 0b                         | end\n0003f5 func[8] <set-x>:\n 0003f6: 20 00                      | local.get 0\n 0003f8: 24 06                      | global.set 6\n 0003fa: 0b                         | end\n0003fc func[9] <set-y>:\n 0003fd: 20 00                      | local.get 0\n 0003ff: 24 09                      | global.set 9\n 000401: 0b                         | end\n000403 func[10] <set-mr>:\n 000404: 20 00                      | local.get 0\n 000406: 24 0d                      | global.set 13\n 000408: 0b                         | end\n00040a func[11] <get-3>:\n 00040b: 23 03                      | global.get 3\n 00040d: 0b                         | end\n00040f func[12] <get-4>:\n 000410: 23 04                      | global.get 4\n 000412: 0b                         | end\n000414 func[13] <get-7>:\n 000415: 23 07                      | global.get 7\n 000417: 0b                         | end\n000419 func[14] <get-8>:\n 00041a: 23 08                      | global.get 8\n 00041c: 0b                         | end\n00041e func[15] <set-7>:\n 00041f: 20 00                      | local.get 0\n 000421: 24 07                      | global.set 7\n 000423: 0b                         | end\n000425 func[16] <set-8>:\n 000426: 20 00                      | local.get 0\n 000428: 24 08                      | global.set 8\n 00042a: 0b                         | end\n00042c func[17]:\n 00042d: 0b                         | end\n00042f func[18] <as-select-first>:\n 000430: 23 06                      | global.get 6\n 000432: 41 02                      | i32.const 2\n 000434: 41 03                      | i32.const 3\n 000436: 1b                         | select\n 000437: 0b                         | end\n000439 func[19] <as-select-mid>:\n 00043a: 41 02                      | i32.const 2\n 00043c: 23 06                      | global.get 6\n 00043e: 41 03                      | i32.const 3\n 000440: 1b                         | select\n 000441: 0b                         | end\n000443 func[20] <as-select-last>:\n 000444: 41 02                      | i32.const 2\n 000446: 41 03                      | i32.const 3\n 000448: 23 06                      | global.get 6\n 00044a: 1b                         | select\n 00044b: 0b                         | end\n00044d func[21] <as-loop-first>:\n 00044e: 03 7f                      | loop i32\n 000450: 23 06                      |   global.get 6\n 000452: 10 11                      |   call 17\n 000454: 10 11                      |   call 17\n 000456: 0b                         | end\n 000457: 0b                         | end\n000459 func[22] <as-loop-mid>:\n 00045a: 03 7f                      | loop i32\n 00045c: 10 11                      |   call 17\n 00045e: 23 06                      |   global.get 6\n 000460: 10 11                      |   call 17\n 000462: 0b                         | end\n 000463: 0b                         | end\n000465 func[23] <as-loop-last>:\n 000466: 03 7f                      | loop i32\n 000468: 10 11                      |   call 17\n 00046a: 10 11                      |   call 17\n 00046c: 23 06                      |   global.get 6\n 00046e: 0b                         | end\n 00046f: 0b                         | end\n000471 func[24] <as-if-condition>:\n 000472: 23 06                      | global.get 6\n 000474: 04 7f                      | if i32\n 000476: 10 11                      |   call 17\n 000478: 41 02                      |   i32.const 2\n 00047a: 05                         | else\n 00047b: 10 11                      |   call 17\n 00047d: 41 03                      |   i32.const 3\n 00047f: 0b                         | end\n 000480: 0b                         | end\n000482 func[25] <as-if-then>:\n 000483: 41 01                      | i32.const 1\n 000485: 04 7f                      | if i32\n 000487: 23 06                      |   global.get 6\n 000489: 05                         | else\n 00048a: 41 02                      |   i32.const 2\n 00048c: 0b                         | end\n 00048d: 0b                         | end\n00048f func[26] <as-if-else>:\n 000490: 41 00                      | i32.const 0\n 000492: 04 7f                      | if i32\n 000494: 41 02                      |   i32.const 2\n 000496: 05                         | else\n 000497: 23 06                      |   global.get 6\n 000499: 0b                         | end\n 00049a: 0b                         | end\n00049c func[27] <as-br_if-first>:\n 00049d: 02 7f                      | block i32\n 00049f: 23 06                      |   global.get 6\n 0004a1: 41 02                      |   i32.const 2\n 0004a3: 0d 00                      |   br_if 0\n 0004a5: 41 03                      |   i32.const 3\n 0004a7: 0f                         |   return\n 0004a8: 0b                         | end\n 0004a9: 0b                         | end\n0004ab func[28] <as-br_if-last>:\n 0004ac: 02 7f                      | block i32\n 0004ae: 41 02                      |   i32.const 2\n 0004b0: 23 06                      |   global.get 6\n 0004b2: 0d 00                      |   br_if 0\n 0004b4: 41 03                      |   i32.const 3\n 0004b6: 0f                         |   return\n 0004b7: 0b                         | end\n 0004b8: 0b                         | end\n0004ba func[29] <as-br_table-first>:\n 0004bb: 02 7f                      | block i32\n 0004bd: 23 06                      |   global.get 6\n 0004bf: 41 02                      |   i32.const 2\n 0004c1: 0e 01 00 00                |   br_table 0 0\n 0004c5: 0b                         | end\n 0004c6: 0b                         | end\n0004c8 func[30] <as-br_table-last>:\n 0004c9: 02 7f                      | block i32\n 0004cb: 41 02                      |   i32.const 2\n 0004cd: 23 06                      |   global.get 6\n 0004cf: 0e 01 00 00                |   br_table 0 0\n 0004d3: 0b                         | end\n 0004d4: 0b                         | end\n0004d6 func[31]:\n 0004d7: 20 00                      | local.get 0\n 0004d9: 0b                         | end\n0004db func[32] <as-call_indirect-first>:\n 0004dc: 02 7f                      | block i32\n 0004de: 23 06                      |   global.get 6\n 0004e0: 41 02                      |   i32.const 2\n 0004e2: 41 00                      |   i32.const 0\n 0004e4: 11 00 00                   |   call_indirect 0 (type 0)\n 0004e7: 0b                         | end\n 0004e8: 0b                         | end\n0004ea func[33] <as-call_indirect-mid>:\n 0004eb: 02 7f                      | block i32\n 0004ed: 41 02                      |   i32.const 2\n 0004ef: 23 06                      |   global.get 6\n 0004f1: 41 00                      |   i32.const 0\n 0004f3: 11 00 00                   |   call_indirect 0 (type 0)\n 0004f6: 0b                         | end\n 0004f7: 0b                         | end\n0004f9 func[34] <as-call_indirect-last>:\n 0004fa: 02 7f                      | block i32\n 0004fc: 41 02                      |   i32.const 2\n 0004fe: 41 00                      |   i32.const 0\n 000500: 23 06                      |   global.get 6\n 000502: 11 00 00                   |   call_indirect 0 (type 0)\n 000505: 0b                         | end\n 000506: 0b                         | end\n000508 func[35] <as-store-first>:\n 000509: 23 06                      | global.get 6\n 00050b: 41 01                      | i32.const 1\n 00050d: 36 02 00                   | i32.store 2 0\n 000510: 0b                         | end\n000512 func[36] <as-store-last>:\n 000513: 41 00                      | i32.const 0\n 000515: 23 06                      | global.get 6\n 000517: 36 02 00                   | i32.store 2 0\n 00051a: 0b                         | end\n00051c func[37] <as-load-operand>:\n 00051d: 23 06                      | global.get 6\n 00051f: 28 02 00                   | i32.load 2 0\n 000522: 0b                         | end\n000524 func[38] <as-memory.grow-value>:\n 000525: 23 06                      | global.get 6\n 000527: 40 00                      | memory.grow 0\n 000529: 0b                         | end\n00052b func[39]:\n 00052c: 20 00                      | local.get 0\n 00052e: 0b                         | end\n000530 func[40] <as-call-value>:\n 000531: 23 06                      | global.get 6\n 000533: 10 27                      | call 39\n 000535: 0b                         | end\n000537 func[41] <as-return-value>:\n 000538: 23 06                      | global.get 6\n 00053a: 0f                         | return\n 00053b: 0b                         | end\n00053d func[42] <as-drop-operand>:\n 00053e: 23 06                      | global.get 6\n 000540: 1a                         | drop\n 000541: 0b                         | end\n000543 func[43] <as-br-value>:\n 000544: 02 7f                      | block i32\n 000546: 23 06                      |   global.get 6\n 000548: 0c 00                      |   br 0\n 00054a: 0b                         | end\n 00054b: 0b                         | end\n00054d func[44] <as-local.set-value>:\n 00054e: 23 06                      | global.get 6\n 000550: 21 00                      | local.set 0\n 000552: 20 00                      | local.get 0\n 000554: 0b                         | end\n000556 func[45] <as-local.tee-value>:\n 000557: 23 06                      | global.get 6\n 000559: 22 00                      | local.tee 0\n 00055b: 0b                         | end\n00055d func[46] <as-global.set-value>:\n 00055e: 23 06                      | global.get 6\n 000560: 24 06                      | global.set 6\n 000562: 23 06                      | global.get 6\n 000564: 0b                         | end\n000566 func[47] <as-unary-operand>:\n 000567: 23 06                      | global.get 6\n 000569: 45                         | i32.eqz\n 00056a: 0b                         | end\n00056c func[48] <as-binary-operand>:\n 00056d: 23 06                      | global.get 6\n 00056f: 23 06                      | global.get 6\n 000571: 6c                         | i32.mul\n 000572: 0b                         | end\n000574 func[49] <as-compare-operand>:\n 000575: 23 00                      | global.get 0 <spectest.global_i32>\n 000577: 41 01                      | i32.const 1\n 000579: 4b                         | i32.gt_u\n 00057a: 0b                         | end\n"
    },
    "global.3.wasm": {
      "header": "\nglobal.3.wasm:\tfile format wasm 0x1\n\nSections:\n\n   Global start=0x0000000a end=0x00000013 (size=0x00000009) count: 1\n   Export start=0x00000015 end=0x0000001a (size=0x00000005) count: 1\n",
      "details": "\nglobal.3.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nGlobal[1]:\n - global[0] f32 mutable=1 <a> - init f32=0x0p+0\nExport[1]:\n - global[0] -> \"a\"\n",
      "disassemble": "\nglobal.3.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n"
    },
    "global.4.wasm": {
      "header": "\nglobal.4.wasm:\tfile format wasm 0x1\n\nSections:\n\n   Global start=0x0000000a end=0x00000013 (size=0x00000009) count: 1\n   Export start=0x00000015 end=0x0000001a (size=0x00000005) count: 1\n",
      "details": "\nglobal.4.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nGlobal[1]:\n - global[0] f32 mutable=1 <a> - init f32=0x0p+0\nExport[1]:\n - global[0] -> \"a\"\n",
      "disassemble": "\nglobal.4.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n"
    },
    "global.23.wasm": {
      "header": "\nglobal.23.wasm:\tfile format wasm 0x1\n\nSections:\n\n   Import start=0x0000000a end=0x00000022 (size=0x00000018) count: 1\n",
      "details": "\nglobal.23.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nImport[1]:\n - global[0] i32 mutable=0 <- spectest.global_i32\n",
      "disassemble": "\nglobal.23.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n"
    },
    "global.26.wasm": {
      "header": "\nglobal.26.wasm:\tfile format wasm 0x1\n\nSections:\n\n   Global start=0x0000000a end=0x00000010 (size=0x00000006) count: 1\n",
      "details": "\nglobal.26.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nGlobal[1]:\n - global[0] i32 mutable=0 - init i32=0\n",
      "disassemble": "\nglobal.26.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n"
    }
  }
}
