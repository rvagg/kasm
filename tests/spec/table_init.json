{
  "bin": {
    "table_init.0.wasm": "AGFzbQEAAAABBQFgAAF/AwYFAAAAAAAHHwUDZWYwAAADZWYxAAEDZWYyAAIDZWYzAAMDZWY0AAQKGgUEAEEACwQAQQELBABBAgsEAEEDCwQAQQQL",
    "table_init.1.wasm": "AGFzbQEAAAABDQNgAAF/YAAAYAF/AX8CKQUBYQNlZjAAAAFhA2VmMQAAAWEDZWYyAAABYQNlZjMAAAFhA2VmNAAAAwgHAAAAAAABAgQJAnABHh5wAR4eBxACBHRlc3QACgVjaGVjawALCSMEAEECCwQDAQQBAQAEAgcBCABBDAsFBwUCAwYBAAUFCQIHBgovBwQAQQULBABBBgsEAEEHCwQAQQgLBABBCQsMAEEHQQBBBPwMAQALBwAgABEAAAs=",
    "table_init.10.wasm": "AGFzbQEAAAABCAJgAAF/YAAAAwMCAAEHCAEEdGVzdAABCQUBAQABAAoTAgQAQQALDABBDEEBQQH8DAQACw==",
    "table_init.100.wasm": "AGFzbQEAAAABDwNgAAF/YAF/AX9gAn9/AAMTEgAAAAAAAAAAAAAAAAAAAAABAgQFAXABEBAHZBICZjAAAAJmMQABAmYyAAICZjMAAwJmNAAEAmY1AAUCZjYABgJmNwAHAmY4AAgCZjkACQNmMTAACgNmMTEACwNmMTIADANmMTMADQNmMTQADgNmMTUADwR0ZXN0ABADcnVuABEJFAEBABAAAQIDBAUGBwgJCgsMDQ4PCmYSBABBAAsEAEEBCwQAQQILBABBAwsEAEEECwQAQQULBABBBgsEAEEHCwQAQQgLBABBCQsEAEEKCwQAQQsLBABBDAsEAEENCwQAQQ4LBABBDwsHACAAEQAACwwAIABBCCAB/AwAAAs=",
    "table_init.101.wasm": "AGFzbQEAAAABBAFgAAADAgEABAQBcAABCcQBQQEAAAEAAAEAAAEAAAEAAAEAAAEAAAEAAAEAAAEAAAEAAAEAAAEAAAEAAAEAAAEAAAEAAAEAAAEAAAEAAAEAAAEAAAEAAAEAAAEAAAEAAAEAAAEAAAEAAAEAAAEAAAEAAAEAAAEAAAEAAAEAAAEAAAEAAAEAAAEAAAEAAAEAAAEAAAEAAAEAAAEAAAEAAAEAAAEAAAEAAAEAAAEAAAEAAAEAAAEAAAEAAAEAAAEAAAEAAAEAAAEAAAEAAAEAAAEAAAEAAAoOAQwAQQBBAEEA/AxAAAs=",
    "table_init.11.wasm": "AGFzbQEAAAABCAJgAAF/YAAAAwwLAAAAAAAAAAAAAAEECQJwAR4ecAEcHAcIAQR0ZXN0AAoJIwQAQQILBAMBBAEBAAQCBwEIAEEMCwUHBQIDBgEABQUJAgcGCjkLBABBAAsEAEEBCwQAQQILBABBAwsEAEEECwQAQQULBABBBgsEAEEHCwQAQQgLBABBCQsFAPwNAgs=",
    "table_init.12.wasm": "AGFzbQEAAAABCAJgAAF/YAAAAwwLAAAAAAAAAAAAAAEECQJwAR4ecAEcHAcIAQR0ZXN0AAoJIwQAQQILBAMBBAEBAAQCBwEIAEEMCwUHBQIDBgEABQUJAgcGCkALBABBAAsEAEEBCwQAQQILBABBAwsEAEEECwQAQQULBABBBgsEAEEHCwQAQQgLBABBCQsMAEEMQQFBAfwMAgAL",
    "table_init.13.wasm": "AGFzbQEAAAABCAJgAAF/YAAAAwwLAAAAAAAAAAAAAAEECQJwAR4ecAEcHAcIAQR0ZXN0AAoJIwQAQQILBAMBBAEBAAQCBwEIAEEMCwUHBQIDBgEABQUJAgcGCkoLBABBAAsEAEEBCwQAQQILBABBAwsEAEEECwQAQQULBABBBgsEAEEHCwQAQQgLBABBCQsWAEEMQQFBAfwMAQBBFUEBQQH8DAEACw==",
    "table_init.14.wasm": "AGFzbQEAAAABCAJgAAF/YAAAAwwLAAAAAAAAAAAAAAEECQJwAR4ecAEcHAcIAQR0ZXN0AAoJIwQAQQILBAMBBAEBAAQCBwEIAEEMCwUHBQIDBgEABQUJAgcGCjwLBABBAAsEAEEBCwQAQQILBABBAwsEAEEECwQAQQULBABBBgsEAEEHCwQAQQgLBABBCQsIAPwNAfwNAQs=",
    "table_init.15.wasm": "AGFzbQEAAAABCAJgAAF/YAAAAwwLAAAAAAAAAAAAAAEECQJwAR4ecAEcHAcIAQR0ZXN0AAoJIwQAQQILBAMBBAEBAAQCBwEIAEEMCwUHBQIDBgEABQUJAgcGCkMLBABBAAsEAEEBCwQAQQILBABBAwsEAEEECwQAQQULBABBBgsEAEEHCwQAQQgLBABBCQsPAPwNAUEMQQFBAfwMAQAL",
    "table_init.16.wasm": "AGFzbQEAAAABCAJgAAF/YAAAAwwLAAAAAAAAAAAAAAEECQJwAR4ecAEcHAcIAQR0ZXN0AAoJIwQAQQILBAMBBAEBAAQCBwEIAEEMCwUHBQIDBgEABQUJAgcGCkALBABBAAsEAEEBCwQAQQILBABBAwsEAEEECwQAQQULBABBBgsEAEEHCwQAQQgLBABBCQsMAEEMQQBBBfwMAQAL",
    "table_init.17.wasm": "AGFzbQEAAAABCAJgAAF/YAAAAwwLAAAAAAAAAAAAAAEECQJwAR4ecAEcHAcIAQR0ZXN0AAoJIwQAQQILBAMBBAEBAAQCBwEIAEEMCwUHBQIDBgEABQUJAgcGCkALBABBAAsEAEEBCwQAQQILBABBAwsEAEEECwQAQQULBABBBgsEAEEHCwQAQQgLBABBCQsMAEEMQQJBA/wMAQAL",
    "table_init.18.wasm": "AGFzbQEAAAABCAJgAAF/YAAAAwwLAAAAAAAAAAAAAAEECQJwAR4ecAEcHAcIAQR0ZXN0AAoJIwQAQQILBAMBBAEBAAQCBwEIAEEMCwUHBQIDBgEABQUJAgcGCkALBABBAAsEAEEBCwQAQQILBABBAwsEAEEECwQAQQULBABBBgsEAEEHCwQAQQgLBABBCQsMAEEcQQFBA/wMAQAL",
    "table_init.19.wasm": "AGFzbQEAAAABCAJgAAF/YAAAAwwLAAAAAAAAAAAAAAEECQJwAR4ecAEcHAcIAQR0ZXN0AAoJIwQAQQILBAMBBAEBAAQCBwEIAEEMCwUHBQIDBgEABQUJAgcGCkALBABBAAsEAEEBCwQAQQILBABBAwsEAEEECwQAQQULBABBBgsEAEEHCwQAQQgLBABBCQsMAEEMQQRBAPwMAQAL",
    "table_init.2.wasm": "AGFzbQEAAAABDQNgAAF/YAAAYAF/AX8CKQUBYQNlZjAAAAFhA2VmMQAAAWEDZWYyAAABYQNlZjMAAAFhA2VmNAAAAwgHAAAAAAABAgQJAnABHh5wAR4eBxACBHRlc3QACgVjaGVjawALCSMEAEECCwQDAQQBAQAEAgcBCABBDAsFBwUCAwYBAAUFCQIHBgovBwQAQQULBABBBgsEAEEHCwQAQQgLBABBCQsMAEEPQQFBA/wMAwALBwAgABEAAAs=",
    "table_init.20.wasm": "AGFzbQEAAAABCAJgAAF/YAAAAwwLAAAAAAAAAAAAAAEECQJwAR4ecAEcHAcIAQR0ZXN0AAoJIwQAQQILBAMBBAEBAAQCBwEIAEEMCwUHBQIDBgEABQUJAgcGCkALBABBAAsEAEEBCwQAQQILBABBAwsEAEEECwQAQQULBABBBgsEAEEHCwQAQQgLBABBCQsMAEEMQQVBAPwMAQAL",
    "table_init.21.wasm": "AGFzbQEAAAABCAJgAAF/YAAAAwwLAAAAAAAAAAAAAAEECQJwAR4ecAEcHAcIAQR0ZXN0AAoJIwQAQQILBAMBBAEBAAQCBwEIAEEMCwUHBQIDBgEABQUJAgcGCkALBABBAAsEAEEBCwQAQQILBABBAwsEAEEECwQAQQULBABBBgsEAEEHCwQAQQgLBABBCQsMAEEeQQJBAPwMAQAL",
    "table_init.22.wasm": "AGFzbQEAAAABCAJgAAF/YAAAAwwLAAAAAAAAAAAAAAEECQJwAR4ecAEcHAcIAQR0ZXN0AAoJIwQAQQILBAMBBAEBAAQCBwEIAEEMCwUHBQIDBgEABQUJAgcGCkALBABBAAsEAEEBCwQAQQILBABBAwsEAEEECwQAQQULBABBBgsEAEEHCwQAQQgLBABBCQsMAEEfQQJBAPwMAQAL",
    "table_init.23.wasm": "AGFzbQEAAAABCAJgAAF/YAAAAwwLAAAAAAAAAAAAAAEECQJwAR4ecAEcHAcIAQR0ZXN0AAoJIwQAQQILBAMBBAEBAAQCBwEIAEEMCwUHBQIDBgEABQUJAgcGCkALBABBAAsEAEEBCwQAQQILBABBAwsEAEEECwQAQQULBABBBgsEAEEHCwQAQQgLBABBCQsMAEEeQQRBAPwMAQAL",
    "table_init.24.wasm": "AGFzbQEAAAABCAJgAAF/YAAAAwwLAAAAAAAAAAAAAAEECQJwAR4ecAEcHAcIAQR0ZXN0AAoJIwQAQQILBAMBBAEBAAQCBwEIAEEMCwUHBQIDBgEABQUJAgcGCkALBABBAAsEAEEBCwQAQQILBABBAwsEAEEECwQAQQULBABBBgsEAEEHCwQAQQgLBABBCQsMAEEfQQVBAPwMAQAL",
    "table_init.25.wasm": "AGFzbQEAAAABCAJgAAF/YAAAAwwLAAAAAAAAAAAAAAEECQJwAR4ecAEcHAcIAQR0ZXN0AAoJJwQCAUECCwAEAwEEAQEABAIHAQgCAUEMCwAFBwUCAwYBAAUFCQIHBgpACwQAQQALBABBAQsEAEECCwQAQQMLBABBBAsEAEEFCwQAQQYLBABBBwsEAEEICwQAQQkLDABBGkEBQQP8DAEBCw==",
    "table_init.26.wasm": "AGFzbQEAAAABCAJgAAF/YAAAAwwLAAAAAAAAAAAAAAEECQJwAR4ecAEcHAcIAQR0ZXN0AAoJJwQCAUECCwAEAwEEAQEABAIHAQgCAUEMCwAFBwUCAwYBAAUFCQIHBgpACwQAQQALBABBAQsEAEECCwQAQQMLBABBBAsEAEEFCwQAQQYLBABBBwsEAEEICwQAQQkLDABBDEEEQQD8DAEBCw==",
    "table_init.27.wasm": "AGFzbQEAAAABCAJgAAF/YAAAAwwLAAAAAAAAAAAAAAEECQJwAR4ecAEcHAcIAQR0ZXN0AAoJJwQCAUECCwAEAwEEAQEABAIHAQgCAUEMCwAFBwUCAwYBAAUFCQIHBgpACwQAQQALBABBAQsEAEECCwQAQQMLBABBBAsEAEEFCwQAQQYLBABBBwsEAEEICwQAQQkLDABBDEEFQQD8DAEBCw==",
    "table_init.28.wasm": "AGFzbQEAAAABCAJgAAF/YAAAAwwLAAAAAAAAAAAAAAEECQJwAR4ecAEcHAcIAQR0ZXN0AAoJJwQCAUECCwAEAwEEAQEABAIHAQgCAUEMCwAFBwUCAwYBAAUFCQIHBgpACwQAQQALBABBAQsEAEECCwQAQQMLBABBBAsEAEEFCwQAQQYLBABBBwsEAEEICwQAQQkLDABBHEECQQD8DAEBCw==",
    "table_init.29.wasm": "AGFzbQEAAAABCAJgAAF/YAAAAwwLAAAAAAAAAAAAAAEECQJwAR4ecAEcHAcIAQR0ZXN0AAoJJwQCAUECCwAEAwEEAQEABAIHAQgCAUEMCwAFBwUCAwYBAAUFCQIHBgpACwQAQQALBABBAQsEAEECCwQAQQMLBABBBAsEAEEFCwQAQQYLBABBBwsEAEEICwQAQQkLDABBHUECQQD8DAEBCw==",
    "table_init.3.wasm": "AGFzbQEAAAABDQNgAAF/YAAAYAF/AX8CKQUBYQNlZjAAAAFhA2VmMQAAAWEDZWYyAAABYQNlZjMAAAFhA2VmNAAAAwgHAAAAAAABAgQJAnABHh5wAR4eBxACBHRlc3QACgVjaGVjawALCSMEAEECCwQDAQQBAQAEAgcBCABBDAsFBwUCAwYBAAUFCQIHBgpxBwQAQQULBABBBgsEAEEHCwQAQQgLBABBCQtOAEEHQQBBBPwMAQD8DQFBD0EBQQP8DAMA/A0DQRRBD0EF/A4AAEEVQR1BAfwOAABBGEEKQQH8DgAAQQ1BC0EE/A4AAEETQRRBBfwOAAALBwAgABEAAAs=",
    "table_init.30.wasm": "AGFzbQEAAAABCAJgAAF/YAAAAwwLAAAAAAAAAAAAAAEECQJwAR4ecAEcHAcIAQR0ZXN0AAoJJwQCAUECCwAEAwEEAQEABAIHAQgCAUEMCwAFBwUCAwYBAAUFCQIHBgpACwQAQQALBABBAQsEAEECCwQAQQMLBABBBAsEAEEFCwQAQQYLBABBBwsEAEEICwQAQQkLDABBHEEEQQD8DAEBCw==",
    "table_init.31.wasm": "AGFzbQEAAAABCAJgAAF/YAAAAwwLAAAAAAAAAAAAAAEECQJwAR4ecAEcHAcIAQR0ZXN0AAoJJwQCAUECCwAEAwEEAQEABAIHAQgCAUEMCwAFBwUCAwYBAAUFCQIHBgpACwQAQQALBABBAQsEAEECCwQAQQMLBABBBAsEAEEFCwQAQQYLBABBBwsEAEEICwQAQQkLDABBHUEFQQD8DAEBCw==",
    "table_init.32.wasm": "AGFzbQEAAAABBAFgAAADAwIAAAQEAXAACgcIAQR0ZXN0AAEJBwEBAAMAAAAKFAICAAsPAEEBQQFDAACAP/wMAAAL",
    "table_init.33.wasm": "AGFzbQEAAAABBAFgAAADAwIAAAQEAXAACgcIAQR0ZXN0AAEJBwEBAAMAAAAKEQICAAsMAEEBQQFCAfwMAAAL",
    "table_init.34.wasm": "AGFzbQEAAAABBAFgAAADAwIAAAQEAXAACgcIAQR0ZXN0AAEJBwEBAAMAAAAKGAICAAsTAEEBQQFEAAAAAAAA8D/8DAAACw==",
    "table_init.35.wasm": "AGFzbQEAAAABBAFgAAADAwIAAAQEAXAACgcIAQR0ZXN0AAEJBwEBAAMAAAAKFAICAAsPAEEBQwAAgD9BAfwMAAAL",
    "table_init.36.wasm": "AGFzbQEAAAABBAFgAAADAwIAAAQEAXAACgcIAQR0ZXN0AAEJBwEBAAMAAAAKFwICAAsSAEEBQwAAgD9DAACAP/wMAAAL",
    "table_init.37.wasm": "AGFzbQEAAAABBAFgAAADAwIAAAQEAXAACgcIAQR0ZXN0AAEJBwEBAAMAAAAKFAICAAsPAEEBQwAAgD9CAfwMAAAL",
    "table_init.38.wasm": "AGFzbQEAAAABBAFgAAADAwIAAAQEAXAACgcIAQR0ZXN0AAEJBwEBAAMAAAAKGwICAAsWAEEBQwAAgD9EAAAAAAAA8D/8DAAACw==",
    "table_init.39.wasm": "AGFzbQEAAAABBAFgAAADAwIAAAQEAXAACgcIAQR0ZXN0AAEJBwEBAAMAAAAKEQICAAsMAEEBQgFBAfwMAAAL",
    "table_init.4.wasm": "AGFzbQEAAAABDQNgAAF/YAAAYAF/AX8CKQUBYQNlZjAAAAFhA2VmMQAAAWEDZWYyAAABYQNlZjMAAAFhA2VmNAAAAwgHAAAAAAABAgQJAnABHh5wAR4eBxACBHRlc3QACgVjaGVjawALCScEAgFBAgsABAMBBAEBAAQCBwEIAgFBDAsABQcFAgMGAQAFBQkCBwYKLwcEAEEFCwQAQQYLBABBBwsEAEEICwQAQQkLDABBB0EAQQT8DAEBCwcAIAARAAEL",
    "table_init.40.wasm": "AGFzbQEAAAABBAFgAAADAwIAAAQEAXAACgcIAQR0ZXN0AAEJBwEBAAMAAAAKFAICAAsPAEEBQgFDAACAP/wMAAAL",
    "table_init.41.wasm": "AGFzbQEAAAABBAFgAAADAwIAAAQEAXAACgcIAQR0ZXN0AAEJBwEBAAMAAAAKEQICAAsMAEEBQgFCAfwMAAAL",
    "table_init.42.wasm": "AGFzbQEAAAABBAFgAAADAwIAAAQEAXAACgcIAQR0ZXN0AAEJBwEBAAMAAAAKGAICAAsTAEEBQgFEAAAAAAAA8D/8DAAACw==",
    "table_init.43.wasm": "AGFzbQEAAAABBAFgAAADAwIAAAQEAXAACgcIAQR0ZXN0AAEJBwEBAAMAAAAKGAICAAsTAEEBRAAAAAAAAPA/QQH8DAAACw==",
    "table_init.44.wasm": "AGFzbQEAAAABBAFgAAADAwIAAAQEAXAACgcIAQR0ZXN0AAEJBwEBAAMAAAAKGwICAAsWAEEBRAAAAAAAAPA/QwAAgD/8DAAACw==",
    "table_init.45.wasm": "AGFzbQEAAAABBAFgAAADAwIAAAQEAXAACgcIAQR0ZXN0AAEJBwEBAAMAAAAKGAICAAsTAEEBRAAAAAAAAPA/QgH8DAAACw==",
    "table_init.46.wasm": "AGFzbQEAAAABBAFgAAADAwIAAAQEAXAACgcIAQR0ZXN0AAEJBwEBAAMAAAAKHwICAAsaAEEBRAAAAAAAAPA/RAAAAAAAAPA//AwAAAs=",
    "table_init.47.wasm": "AGFzbQEAAAABBAFgAAADAwIAAAQEAXAACgcIAQR0ZXN0AAEJBwEBAAMAAAAKFAICAAsPAEMAAIA/QQFBAfwMAAAL",
    "table_init.48.wasm": "AGFzbQEAAAABBAFgAAADAwIAAAQEAXAACgcIAQR0ZXN0AAEJBwEBAAMAAAAKFwICAAsSAEMAAIA/QQFDAACAP/wMAAAL",
    "table_init.49.wasm": "AGFzbQEAAAABBAFgAAADAwIAAAQEAXAACgcIAQR0ZXN0AAEJBwEBAAMAAAAKFAICAAsPAEMAAIA/QQFCAfwMAAAL",
    "table_init.5.wasm": "AGFzbQEAAAABDQNgAAF/YAAAYAF/AX8CKQUBYQNlZjAAAAFhA2VmMQAAAWEDZWYyAAABYQNlZjMAAAFhA2VmNAAAAwgHAAAAAAABAgQJAnABHh5wAR4eBxACBHRlc3QACgVjaGVjawALCScEAgFBAgsABAMBBAEBAAQCBwEIAgFBDAsABQcFAgMGAQAFBQkCBwYKLwcEAEEFCwQAQQYLBABBBwsEAEEICwQAQQkLDABBD0EBQQP8DAMBCwcAIAARAAEL",
    "table_init.50.wasm": "AGFzbQEAAAABBAFgAAADAwIAAAQEAXAACgcIAQR0ZXN0AAEJBwEBAAMAAAAKGwICAAsWAEMAAIA/QQFEAAAAAAAA8D/8DAAACw==",
    "table_init.51.wasm": "AGFzbQEAAAABBAFgAAADAwIAAAQEAXAACgcIAQR0ZXN0AAEJBwEBAAMAAAAKFwICAAsSAEMAAIA/QwAAgD9BAfwMAAAL",
    "table_init.52.wasm": "AGFzbQEAAAABBAFgAAADAwIAAAQEAXAACgcIAQR0ZXN0AAEJBwEBAAMAAAAKGgICAAsVAEMAAIA/QwAAgD9DAACAP/wMAAAL",
    "table_init.53.wasm": "AGFzbQEAAAABBAFgAAADAwIAAAQEAXAACgcIAQR0ZXN0AAEJBwEBAAMAAAAKFwICAAsSAEMAAIA/QwAAgD9CAfwMAAAL",
    "table_init.54.wasm": "AGFzbQEAAAABBAFgAAADAwIAAAQEAXAACgcIAQR0ZXN0AAEJBwEBAAMAAAAKHgICAAsZAEMAAIA/QwAAgD9EAAAAAAAA8D/8DAAACw==",
    "table_init.55.wasm": "AGFzbQEAAAABBAFgAAADAwIAAAQEAXAACgcIAQR0ZXN0AAEJBwEBAAMAAAAKFAICAAsPAEMAAIA/QgFBAfwMAAAL",
    "table_init.56.wasm": "AGFzbQEAAAABBAFgAAADAwIAAAQEAXAACgcIAQR0ZXN0AAEJBwEBAAMAAAAKFwICAAsSAEMAAIA/QgFDAACAP/wMAAAL",
    "table_init.57.wasm": "AGFzbQEAAAABBAFgAAADAwIAAAQEAXAACgcIAQR0ZXN0AAEJBwEBAAMAAAAKFAICAAsPAEMAAIA/QgFCAfwMAAAL",
    "table_init.58.wasm": "AGFzbQEAAAABBAFgAAADAwIAAAQEAXAACgcIAQR0ZXN0AAEJBwEBAAMAAAAKGwICAAsWAEMAAIA/QgFEAAAAAAAA8D/8DAAACw==",
    "table_init.59.wasm": "AGFzbQEAAAABBAFgAAADAwIAAAQEAXAACgcIAQR0ZXN0AAEJBwEBAAMAAAAKGwICAAsWAEMAAIA/RAAAAAAAAPA/QQH8DAAACw==",
    "table_init.6.wasm": "AGFzbQEAAAABDQNgAAF/YAAAYAF/AX8CKQUBYQNlZjAAAAFhA2VmMQAAAWEDZWYyAAABYQNlZjMAAAFhA2VmNAAAAwgHAAAAAAABAgQJAnABHh5wAR4eBxACBHRlc3QACgVjaGVjawALCScEAgFBAgsABAMBBAEBAAQCBwEIAgFBDAsABQcFAgMGAQAFBQkCBwYKcQcEAEEFCwQAQQYLBABBBwsEAEEICwQAQQkLTgBBB0EAQQT8DAEB/A0BQQ9BAUED/AwDAfwNA0EUQQ9BBfwOAQFBFUEdQQH8DgEBQRhBCkEB/A4BAUENQQtBBPwOAQFBE0EUQQX8DgEBCwcAIAARAAEL",
    "table_init.60.wasm": "AGFzbQEAAAABBAFgAAADAwIAAAQEAXAACgcIAQR0ZXN0AAEJBwEBAAMAAAAKHgICAAsZAEMAAIA/RAAAAAAAAPA/QwAAgD/8DAAACw==",
    "table_init.61.wasm": "AGFzbQEAAAABBAFgAAADAwIAAAQEAXAACgcIAQR0ZXN0AAEJBwEBAAMAAAAKGwICAAsWAEMAAIA/RAAAAAAAAPA/QgH8DAAACw==",
    "table_init.62.wasm": "AGFzbQEAAAABBAFgAAADAwIAAAQEAXAACgcIAQR0ZXN0AAEJBwEBAAMAAAAKIgICAAsdAEMAAIA/RAAAAAAAAPA/RAAAAAAAAPA//AwAAAs=",
    "table_init.63.wasm": "AGFzbQEAAAABBAFgAAADAwIAAAQEAXAACgcIAQR0ZXN0AAEJBwEBAAMAAAAKEQICAAsMAEIBQQFBAfwMAAAL",
    "table_init.64.wasm": "AGFzbQEAAAABBAFgAAADAwIAAAQEAXAACgcIAQR0ZXN0AAEJBwEBAAMAAAAKFAICAAsPAEIBQQFDAACAP/wMAAAL",
    "table_init.65.wasm": "AGFzbQEAAAABBAFgAAADAwIAAAQEAXAACgcIAQR0ZXN0AAEJBwEBAAMAAAAKEQICAAsMAEIBQQFCAfwMAAAL",
    "table_init.66.wasm": "AGFzbQEAAAABBAFgAAADAwIAAAQEAXAACgcIAQR0ZXN0AAEJBwEBAAMAAAAKGAICAAsTAEIBQQFEAAAAAAAA8D/8DAAACw==",
    "table_init.67.wasm": "AGFzbQEAAAABBAFgAAADAwIAAAQEAXAACgcIAQR0ZXN0AAEJBwEBAAMAAAAKFAICAAsPAEIBQwAAgD9BAfwMAAAL",
    "table_init.68.wasm": "AGFzbQEAAAABBAFgAAADAwIAAAQEAXAACgcIAQR0ZXN0AAEJBwEBAAMAAAAKFwICAAsSAEIBQwAAgD9DAACAP/wMAAAL",
    "table_init.69.wasm": "AGFzbQEAAAABBAFgAAADAwIAAAQEAXAACgcIAQR0ZXN0AAEJBwEBAAMAAAAKFAICAAsPAEIBQwAAgD9CAfwMAAAL",
    "table_init.7.wasm": "AGFzbQEAAAABBAFgAAADAgEABwgBBHRlc3QAAAoHAQUA/A0ACw==",
    "table_init.70.wasm": "AGFzbQEAAAABBAFgAAADAwIAAAQEAXAACgcIAQR0ZXN0AAEJBwEBAAMAAAAKGwICAAsWAEIBQwAAgD9EAAAAAAAA8D/8DAAACw==",
    "table_init.71.wasm": "AGFzbQEAAAABBAFgAAADAwIAAAQEAXAACgcIAQR0ZXN0AAEJBwEBAAMAAAAKEQICAAsMAEIBQgFBAfwMAAAL",
    "table_init.72.wasm": "AGFzbQEAAAABBAFgAAADAwIAAAQEAXAACgcIAQR0ZXN0AAEJBwEBAAMAAAAKFAICAAsPAEIBQgFDAACAP/wMAAAL",
    "table_init.73.wasm": "AGFzbQEAAAABBAFgAAADAwIAAAQEAXAACgcIAQR0ZXN0AAEJBwEBAAMAAAAKEQICAAsMAEIBQgFCAfwMAAAL",
    "table_init.74.wasm": "AGFzbQEAAAABBAFgAAADAwIAAAQEAXAACgcIAQR0ZXN0AAEJBwEBAAMAAAAKGAICAAsTAEIBQgFEAAAAAAAA8D/8DAAACw==",
    "table_init.75.wasm": "AGFzbQEAAAABBAFgAAADAwIAAAQEAXAACgcIAQR0ZXN0AAEJBwEBAAMAAAAKGAICAAsTAEIBRAAAAAAAAPA/QQH8DAAACw==",
    "table_init.76.wasm": "AGFzbQEAAAABBAFgAAADAwIAAAQEAXAACgcIAQR0ZXN0AAEJBwEBAAMAAAAKGwICAAsWAEIBRAAAAAAAAPA/QwAAgD/8DAAACw==",
    "table_init.77.wasm": "AGFzbQEAAAABBAFgAAADAwIAAAQEAXAACgcIAQR0ZXN0AAEJBwEBAAMAAAAKGAICAAsTAEIBRAAAAAAAAPA/QgH8DAAACw==",
    "table_init.78.wasm": "AGFzbQEAAAABBAFgAAADAwIAAAQEAXAACgcIAQR0ZXN0AAEJBwEBAAMAAAAKHwICAAsaAEIBRAAAAAAAAPA/RAAAAAAAAPA//AwAAAs=",
    "table_init.79.wasm": "AGFzbQEAAAABBAFgAAADAwIAAAQEAXAACgcIAQR0ZXN0AAEJBwEBAAMAAAAKGAICAAsTAEQAAAAAAADwP0EBQQH8DAAACw==",
    "table_init.8.wasm": "AGFzbQEAAAABBAFgAAADAgEABwgBBHRlc3QAAAoOAQwAQQxBAUEB/AwAAAs=",
    "table_init.80.wasm": "AGFzbQEAAAABBAFgAAADAwIAAAQEAXAACgcIAQR0ZXN0AAEJBwEBAAMAAAAKGwICAAsWAEQAAAAAAADwP0EBQwAAgD/8DAAACw==",
    "table_init.81.wasm": "AGFzbQEAAAABBAFgAAADAwIAAAQEAXAACgcIAQR0ZXN0AAEJBwEBAAMAAAAKGAICAAsTAEQAAAAAAADwP0EBQgH8DAAACw==",
    "table_init.82.wasm": "AGFzbQEAAAABBAFgAAADAwIAAAQEAXAACgcIAQR0ZXN0AAEJBwEBAAMAAAAKHwICAAsaAEQAAAAAAADwP0EBRAAAAAAAAPA//AwAAAs=",
    "table_init.83.wasm": "AGFzbQEAAAABBAFgAAADAwIAAAQEAXAACgcIAQR0ZXN0AAEJBwEBAAMAAAAKGwICAAsWAEQAAAAAAADwP0MAAIA/QQH8DAAACw==",
    "table_init.84.wasm": "AGFzbQEAAAABBAFgAAADAwIAAAQEAXAACgcIAQR0ZXN0AAEJBwEBAAMAAAAKHgICAAsZAEQAAAAAAADwP0MAAIA/QwAAgD/8DAAACw==",
    "table_init.85.wasm": "AGFzbQEAAAABBAFgAAADAwIAAAQEAXAACgcIAQR0ZXN0AAEJBwEBAAMAAAAKGwICAAsWAEQAAAAAAADwP0MAAIA/QgH8DAAACw==",
    "table_init.86.wasm": "AGFzbQEAAAABBAFgAAADAwIAAAQEAXAACgcIAQR0ZXN0AAEJBwEBAAMAAAAKIgICAAsdAEQAAAAAAADwP0MAAIA/RAAAAAAAAPA//AwAAAs=",
    "table_init.87.wasm": "AGFzbQEAAAABBAFgAAADAwIAAAQEAXAACgcIAQR0ZXN0AAEJBwEBAAMAAAAKGAICAAsTAEQAAAAAAADwP0IBQQH8DAAACw==",
    "table_init.88.wasm": "AGFzbQEAAAABBAFgAAADAwIAAAQEAXAACgcIAQR0ZXN0AAEJBwEBAAMAAAAKGwICAAsWAEQAAAAAAADwP0IBQwAAgD/8DAAACw==",
    "table_init.89.wasm": "AGFzbQEAAAABBAFgAAADAwIAAAQEAXAACgcIAQR0ZXN0AAEJBwEBAAMAAAAKGAICAAsTAEQAAAAAAADwP0IBQgH8DAAACw==",
    "table_init.9.wasm": "AGFzbQEAAAABCAJgAAF/YAAAAwMCAAEHCAEEdGVzdAABCQUBAQABAAoMAgQAQQALBQD8DQQL",
    "table_init.90.wasm": "AGFzbQEAAAABBAFgAAADAwIAAAQEAXAACgcIAQR0ZXN0AAEJBwEBAAMAAAAKHwICAAsaAEQAAAAAAADwP0IBRAAAAAAAAPA//AwAAAs=",
    "table_init.91.wasm": "AGFzbQEAAAABBAFgAAADAwIAAAQEAXAACgcIAQR0ZXN0AAEJBwEBAAMAAAAKHwICAAsaAEQAAAAAAADwP0QAAAAAAADwP0EB/AwAAAs=",
    "table_init.92.wasm": "AGFzbQEAAAABBAFgAAADAwIAAAQEAXAACgcIAQR0ZXN0AAEJBwEBAAMAAAAKIgICAAsdAEQAAAAAAADwP0QAAAAAAADwP0MAAIA//AwAAAs=",
    "table_init.93.wasm": "AGFzbQEAAAABBAFgAAADAwIAAAQEAXAACgcIAQR0ZXN0AAEJBwEBAAMAAAAKHwICAAsaAEQAAAAAAADwP0QAAAAAAADwP0IB/AwAAAs=",
    "table_init.94.wasm": "AGFzbQEAAAABBAFgAAADAwIAAAQEAXAACgcIAQR0ZXN0AAEJBwEBAAMAAAAKJgICAAshAEQAAAAAAADwP0QAAAAAAADwP0QAAAAAAADwP/wMAAAL",
    "table_init.95.wasm": "AGFzbQEAAAABDwNgAAF/YAF/AX9gAn9/AAMTEgAAAAAAAAAAAAAAAAAAAAABAgQFAXABIEAHZBICZjAAAAJmMQABAmYyAAICZjMAAwJmNAAEAmY1AAUCZjYABgJmNwAHAmY4AAgCZjkACQNmMTAACgNmMTEACwNmMTIADANmMTMADQNmMTQADgNmMTUADwR0ZXN0ABADcnVuABEJFAEBABAAAQIDBAUGBwgJCgsMDQ4PCmYSBABBAAsEAEEBCwQAQQILBABBAwsEAEEECwQAQQULBABBBgsEAEEHCwQAQQgLBABBCQsEAEEKCwQAQQsLBABBDAsEAEENCwQAQQ4LBABBDwsHACAAEQAACwwAIABBACAB/AwAAAs=",
    "table_init.96.wasm": "AGFzbQEAAAABDwNgAAF/YAF/AX9gAn9/AAMTEgAAAAAAAAAAAAAAAAAAAAABAgQFAXABIEAHZBICZjAAAAJmMQABAmYyAAICZjMAAwJmNAAEAmY1AAUCZjYABgJmNwAHAmY4AAgCZjkACQNmMTAACgNmMTEACwNmMTIADANmMTMADQNmMTQADgNmMTUADwR0ZXN0ABADcnVuABEJFAEBABAAAQIDBAUGBwgJCgsMDQ4PCmYSBABBAAsEAEEBCwQAQQILBABBAwsEAEEECwQAQQULBABBBgsEAEEHCwQAQQgLBABBCQsEAEEKCwQAQQsLBABBDAsEAEENCwQAQQ4LBABBDwsHACAAEQAACwwAIABBACAB/AwAAAs=",
    "table_init.97.wasm": "AGFzbQEAAAABDwNgAAF/YAF/AX9gAn9/AAMTEgAAAAAAAAAAAAAAAAAAAAABAgQHAXABoAHAAgdkEgJmMAAAAmYxAAECZjIAAgJmMwADAmY0AAQCZjUABQJmNgAGAmY3AAcCZjgACAJmOQAJA2YxMAAKA2YxMQALA2YxMgAMA2YxMwANA2YxNAAOA2YxNQAPBHRlc3QAEANydW4AEQkUAQEAEAABAgMEBQYHCAkKCwwNDg8KZhIEAEEACwQAQQELBABBAgsEAEEDCwQAQQQLBABBBQsEAEEGCwQAQQcLBABBCAsEAEEJCwQAQQoLBABBCwsEAEEMCwQAQQ0LBABBDgsEAEEPCwcAIAARAAALDAAgAEEAIAH8DAAACw==",
    "table_init.98.wasm": "AGFzbQEAAAABDwNgAAF/YAF/AX9gAn9/AAMTEgAAAAAAAAAAAAAAAAAAAAABAgQHAXABoAHAAgdkEgJmMAAAAmYxAAECZjIAAgJmMwADAmY0AAQCZjUABQJmNgAGAmY3AAcCZjgACAJmOQAJA2YxMAAKA2YxMQALA2YxMgAMA2YxMwANA2YxNAAOA2YxNQAPBHRlc3QAEANydW4AEQkUAQEAEAABAgMEBQYHCAkKCwwNDg8KZhIEAEEACwQAQQELBABBAgsEAEEDCwQAQQQLBABBBQsEAEEGCwQAQQcLBABBCAsEAEEJCwQAQQoLBABBCwsEAEEMCwQAQQ0LBABBDgsEAEEPCwcAIAARAAALDAAgAEEAIAH8DAAACw==",
    "table_init.99.wasm": "AGFzbQEAAAABDwNgAAF/YAF/AX9gAn9/AAMTEgAAAAAAAAAAAAAAAAAAAAABAgQFAXABQEAHZBICZjAAAAJmMQABAmYyAAICZjMAAwJmNAAEAmY1AAUCZjYABgJmNwAHAmY4AAgCZjkACQNmMTAACgNmMTEACwNmMTIADANmMTMADQNmMTQADgNmMTUADwR0ZXN0ABADcnVuABEJFAEBABAAAQIDBAUGBwgJCgsMDQ4PCmYSBABBAAsEAEEBCwQAQQILBABBAwsEAEEECwQAQQULBABBBgsEAEEHCwQAQQgLBABBCQsEAEEKCwQAQQsLBABBDAsEAEENCwQAQQ4LBABBDwsHACAAEQAACwwAIABBACAB/AwAAAs="
  },
  "spec": {"source_filename": "/workspace/wasm-spec/test/core/table_init.wast",
 "commands": [
  {"type": "module", "line": 6, "filename": "table_init.0.wasm"}, 
  {"type": "register", "line": 13, "as": "a"}, 
  {"type": "module", "line": 15, "filename": "table_init.1.wasm"}, 
  {"type": "action", "line": 41, "action": {"type": "invoke", "field": "test", "args": []}, "expected": []}, 
  {"type": "assert_trap", "line": 42, "action": {"type": "invoke", "field": "check", "args": [{"type": "i32", "value": "0"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 43, "action": {"type": "invoke", "field": "check", "args": [{"type": "i32", "value": "1"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_return", "line": 44, "action": {"type": "invoke", "field": "check", "args": [{"type": "i32", "value": "2"}]}, "expected": [{"type": "i32", "value": "3"}]}, 
  {"type": "assert_return", "line": 45, "action": {"type": "invoke", "field": "check", "args": [{"type": "i32", "value": "3"}]}, "expected": [{"type": "i32", "value": "1"}]}, 
  {"type": "assert_return", "line": 46, "action": {"type": "invoke", "field": "check", "args": [{"type": "i32", "value": "4"}]}, "expected": [{"type": "i32", "value": "4"}]}, 
  {"type": "assert_return", "line": 47, "action": {"type": "invoke", "field": "check", "args": [{"type": "i32", "value": "5"}]}, "expected": [{"type": "i32", "value": "1"}]}, 
  {"type": "assert_trap", "line": 48, "action": {"type": "invoke", "field": "check", "args": [{"type": "i32", "value": "6"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_return", "line": 49, "action": {"type": "invoke", "field": "check", "args": [{"type": "i32", "value": "7"}]}, "expected": [{"type": "i32", "value": "2"}]}, 
  {"type": "assert_return", "line": 50, "action": {"type": "invoke", "field": "check", "args": [{"type": "i32", "value": "8"}]}, "expected": [{"type": "i32", "value": "7"}]}, 
  {"type": "assert_return", "line": 51, "action": {"type": "invoke", "field": "check", "args": [{"type": "i32", "value": "9"}]}, "expected": [{"type": "i32", "value": "1"}]}, 
  {"type": "assert_return", "line": 52, "action": {"type": "invoke", "field": "check", "args": [{"type": "i32", "value": "10"}]}, "expected": [{"type": "i32", "value": "8"}]}, 
  {"type": "assert_trap", "line": 53, "action": {"type": "invoke", "field": "check", "args": [{"type": "i32", "value": "11"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_return", "line": 54, "action": {"type": "invoke", "field": "check", "args": [{"type": "i32", "value": "12"}]}, "expected": [{"type": "i32", "value": "7"}]}, 
  {"type": "assert_return", "line": 55, "action": {"type": "invoke", "field": "check", "args": [{"type": "i32", "value": "13"}]}, "expected": [{"type": "i32", "value": "5"}]}, 
  {"type": "assert_return", "line": 56, "action": {"type": "invoke", "field": "check", "args": [{"type": "i32", "value": "14"}]}, "expected": [{"type": "i32", "value": "2"}]}, 
  {"type": "assert_return", "line": 57, "action": {"type": "invoke", "field": "check", "args": [{"type": "i32", "value": "15"}]}, "expected": [{"type": "i32", "value": "3"}]}, 
  {"type": "assert_return", "line": 58, "action": {"type": "invoke", "field": "check", "args": [{"type": "i32", "value": "16"}]}, "expected": [{"type": "i32", "value": "6"}]}, 
  {"type": "assert_trap", "line": 59, "action": {"type": "invoke", "field": "check", "args": [{"type": "i32", "value": "17"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 60, "action": {"type": "invoke", "field": "check", "args": [{"type": "i32", "value": "18"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 61, "action": {"type": "invoke", "field": "check", "args": [{"type": "i32", "value": "19"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 62, "action": {"type": "invoke", "field": "check", "args": [{"type": "i32", "value": "20"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 63, "action": {"type": "invoke", "field": "check", "args": [{"type": "i32", "value": "21"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 64, "action": {"type": "invoke", "field": "check", "args": [{"type": "i32", "value": "22"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 65, "action": {"type": "invoke", "field": "check", "args": [{"type": "i32", "value": "23"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 66, "action": {"type": "invoke", "field": "check", "args": [{"type": "i32", "value": "24"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 67, "action": {"type": "invoke", "field": "check", "args": [{"type": "i32", "value": "25"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 68, "action": {"type": "invoke", "field": "check", "args": [{"type": "i32", "value": "26"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 69, "action": {"type": "invoke", "field": "check", "args": [{"type": "i32", "value": "27"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 70, "action": {"type": "invoke", "field": "check", "args": [{"type": "i32", "value": "28"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 71, "action": {"type": "invoke", "field": "check", "args": [{"type": "i32", "value": "29"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "module", "line": 73, "filename": "table_init.2.wasm"}, 
  {"type": "action", "line": 99, "action": {"type": "invoke", "field": "test", "args": []}, "expected": []}, 
  {"type": "assert_trap", "line": 100, "action": {"type": "invoke", "field": "check", "args": [{"type": "i32", "value": "0"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 101, "action": {"type": "invoke", "field": "check", "args": [{"type": "i32", "value": "1"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_return", "line": 102, "action": {"type": "invoke", "field": "check", "args": [{"type": "i32", "value": "2"}]}, "expected": [{"type": "i32", "value": "3"}]}, 
  {"type": "assert_return", "line": 103, "action": {"type": "invoke", "field": "check", "args": [{"type": "i32", "value": "3"}]}, "expected": [{"type": "i32", "value": "1"}]}, 
  {"type": "assert_return", "line": 104, "action": {"type": "invoke", "field": "check", "args": [{"type": "i32", "value": "4"}]}, "expected": [{"type": "i32", "value": "4"}]}, 
  {"type": "assert_return", "line": 105, "action": {"type": "invoke", "field": "check", "args": [{"type": "i32", "value": "5"}]}, "expected": [{"type": "i32", "value": "1"}]}, 
  {"type": "assert_trap", "line": 106, "action": {"type": "invoke", "field": "check", "args": [{"type": "i32", "value": "6"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 107, "action": {"type": "invoke", "field": "check", "args": [{"type": "i32", "value": "7"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 108, "action": {"type": "invoke", "field": "check", "args": [{"type": "i32", "value": "8"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 109, "action": {"type": "invoke", "field": "check", "args": [{"type": "i32", "value": "9"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 110, "action": {"type": "invoke", "field": "check", "args": [{"type": "i32", "value": "10"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 111, "action": {"type": "invoke", "field": "check", "args": [{"type": "i32", "value": "11"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_return", "line": 112, "action": {"type": "invoke", "field": "check", "args": [{"type": "i32", "value": "12"}]}, "expected": [{"type": "i32", "value": "7"}]}, 
  {"type": "assert_return", "line": 113, "action": {"type": "invoke", "field": "check", "args": [{"type": "i32", "value": "13"}]}, "expected": [{"type": "i32", "value": "5"}]}, 
  {"type": "assert_return", "line": 114, "action": {"type": "invoke", "field": "check", "args": [{"type": "i32", "value": "14"}]}, "expected": [{"type": "i32", "value": "2"}]}, 
  {"type": "assert_return", "line": 115, "action": {"type": "invoke", "field": "check", "args": [{"type": "i32", "value": "15"}]}, "expected": [{"type": "i32", "value": "9"}]}, 
  {"type": "assert_return", "line": 116, "action": {"type": "invoke", "field": "check", "args": [{"type": "i32", "value": "16"}]}, "expected": [{"type": "i32", "value": "2"}]}, 
  {"type": "assert_return", "line": 117, "action": {"type": "invoke", "field": "check", "args": [{"type": "i32", "value": "17"}]}, "expected": [{"type": "i32", "value": "7"}]}, 
  {"type": "assert_trap", "line": 118, "action": {"type": "invoke", "field": "check", "args": [{"type": "i32", "value": "18"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 119, "action": {"type": "invoke", "field": "check", "args": [{"type": "i32", "value": "19"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 120, "action": {"type": "invoke", "field": "check", "args": [{"type": "i32", "value": "20"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 121, "action": {"type": "invoke", "field": "check", "args": [{"type": "i32", "value": "21"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 122, "action": {"type": "invoke", "field": "check", "args": [{"type": "i32", "value": "22"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 123, "action": {"type": "invoke", "field": "check", "args": [{"type": "i32", "value": "23"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 124, "action": {"type": "invoke", "field": "check", "args": [{"type": "i32", "value": "24"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 125, "action": {"type": "invoke", "field": "check", "args": [{"type": "i32", "value": "25"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 126, "action": {"type": "invoke", "field": "check", "args": [{"type": "i32", "value": "26"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 127, "action": {"type": "invoke", "field": "check", "args": [{"type": "i32", "value": "27"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 128, "action": {"type": "invoke", "field": "check", "args": [{"type": "i32", "value": "28"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 129, "action": {"type": "invoke", "field": "check", "args": [{"type": "i32", "value": "29"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "module", "line": 131, "filename": "table_init.3.wasm"}, 
  {"type": "action", "line": 165, "action": {"type": "invoke", "field": "test", "args": []}, "expected": []}, 
  {"type": "assert_trap", "line": 166, "action": {"type": "invoke", "field": "check", "args": [{"type": "i32", "value": "0"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 167, "action": {"type": "invoke", "field": "check", "args": [{"type": "i32", "value": "1"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_return", "line": 168, "action": {"type": "invoke", "field": "check", "args": [{"type": "i32", "value": "2"}]}, "expected": [{"type": "i32", "value": "3"}]}, 
  {"type": "assert_return", "line": 169, "action": {"type": "invoke", "field": "check", "args": [{"type": "i32", "value": "3"}]}, "expected": [{"type": "i32", "value": "1"}]}, 
  {"type": "assert_return", "line": 170, "action": {"type": "invoke", "field": "check", "args": [{"type": "i32", "value": "4"}]}, "expected": [{"type": "i32", "value": "4"}]}, 
  {"type": "assert_return", "line": 171, "action": {"type": "invoke", "field": "check", "args": [{"type": "i32", "value": "5"}]}, "expected": [{"type": "i32", "value": "1"}]}, 
  {"type": "assert_trap", "line": 172, "action": {"type": "invoke", "field": "check", "args": [{"type": "i32", "value": "6"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_return", "line": 173, "action": {"type": "invoke", "field": "check", "args": [{"type": "i32", "value": "7"}]}, "expected": [{"type": "i32", "value": "2"}]}, 
  {"type": "assert_return", "line": 174, "action": {"type": "invoke", "field": "check", "args": [{"type": "i32", "value": "8"}]}, "expected": [{"type": "i32", "value": "7"}]}, 
  {"type": "assert_return", "line": 175, "action": {"type": "invoke", "field": "check", "args": [{"type": "i32", "value": "9"}]}, "expected": [{"type": "i32", "value": "1"}]}, 
  {"type": "assert_return", "line": 176, "action": {"type": "invoke", "field": "check", "args": [{"type": "i32", "value": "10"}]}, "expected": [{"type": "i32", "value": "8"}]}, 
  {"type": "assert_trap", "line": 177, "action": {"type": "invoke", "field": "check", "args": [{"type": "i32", "value": "11"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_return", "line": 178, "action": {"type": "invoke", "field": "check", "args": [{"type": "i32", "value": "12"}]}, "expected": [{"type": "i32", "value": "7"}]}, 
  {"type": "assert_trap", "line": 179, "action": {"type": "invoke", "field": "check", "args": [{"type": "i32", "value": "13"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_return", "line": 180, "action": {"type": "invoke", "field": "check", "args": [{"type": "i32", "value": "14"}]}, "expected": [{"type": "i32", "value": "7"}]}, 
  {"type": "assert_return", "line": 181, "action": {"type": "invoke", "field": "check", "args": [{"type": "i32", "value": "15"}]}, "expected": [{"type": "i32", "value": "5"}]}, 
  {"type": "assert_return", "line": 182, "action": {"type": "invoke", "field": "check", "args": [{"type": "i32", "value": "16"}]}, "expected": [{"type": "i32", "value": "2"}]}, 
  {"type": "assert_return", "line": 183, "action": {"type": "invoke", "field": "check", "args": [{"type": "i32", "value": "17"}]}, "expected": [{"type": "i32", "value": "7"}]}, 
  {"type": "assert_trap", "line": 184, "action": {"type": "invoke", "field": "check", "args": [{"type": "i32", "value": "18"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_return", "line": 185, "action": {"type": "invoke", "field": "check", "args": [{"type": "i32", "value": "19"}]}, "expected": [{"type": "i32", "value": "9"}]}, 
  {"type": "assert_trap", "line": 186, "action": {"type": "invoke", "field": "check", "args": [{"type": "i32", "value": "20"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_return", "line": 187, "action": {"type": "invoke", "field": "check", "args": [{"type": "i32", "value": "21"}]}, "expected": [{"type": "i32", "value": "7"}]}, 
  {"type": "assert_trap", "line": 188, "action": {"type": "invoke", "field": "check", "args": [{"type": "i32", "value": "22"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_return", "line": 189, "action": {"type": "invoke", "field": "check", "args": [{"type": "i32", "value": "23"}]}, "expected": [{"type": "i32", "value": "8"}]}, 
  {"type": "assert_return", "line": 190, "action": {"type": "invoke", "field": "check", "args": [{"type": "i32", "value": "24"}]}, "expected": [{"type": "i32", "value": "8"}]}, 
  {"type": "assert_trap", "line": 191, "action": {"type": "invoke", "field": "check", "args": [{"type": "i32", "value": "25"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 192, "action": {"type": "invoke", "field": "check", "args": [{"type": "i32", "value": "26"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 193, "action": {"type": "invoke", "field": "check", "args": [{"type": "i32", "value": "27"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 194, "action": {"type": "invoke", "field": "check", "args": [{"type": "i32", "value": "28"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 195, "action": {"type": "invoke", "field": "check", "args": [{"type": "i32", "value": "29"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "module", "line": 197, "filename": "table_init.4.wasm"}, 
  {"type": "action", "line": 223, "action": {"type": "invoke", "field": "test", "args": []}, "expected": []}, 
  {"type": "assert_trap", "line": 224, "action": {"type": "invoke", "field": "check", "args": [{"type": "i32", "value": "0"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 225, "action": {"type": "invoke", "field": "check", "args": [{"type": "i32", "value": "1"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_return", "line": 226, "action": {"type": "invoke", "field": "check", "args": [{"type": "i32", "value": "2"}]}, "expected": [{"type": "i32", "value": "3"}]}, 
  {"type": "assert_return", "line": 227, "action": {"type": "invoke", "field": "check", "args": [{"type": "i32", "value": "3"}]}, "expected": [{"type": "i32", "value": "1"}]}, 
  {"type": "assert_return", "line": 228, "action": {"type": "invoke", "field": "check", "args": [{"type": "i32", "value": "4"}]}, "expected": [{"type": "i32", "value": "4"}]}, 
  {"type": "assert_return", "line": 229, "action": {"type": "invoke", "field": "check", "args": [{"type": "i32", "value": "5"}]}, "expected": [{"type": "i32", "value": "1"}]}, 
  {"type": "assert_trap", "line": 230, "action": {"type": "invoke", "field": "check", "args": [{"type": "i32", "value": "6"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_return", "line": 231, "action": {"type": "invoke", "field": "check", "args": [{"type": "i32", "value": "7"}]}, "expected": [{"type": "i32", "value": "2"}]}, 
  {"type": "assert_return", "line": 232, "action": {"type": "invoke", "field": "check", "args": [{"type": "i32", "value": "8"}]}, "expected": [{"type": "i32", "value": "7"}]}, 
  {"type": "assert_return", "line": 233, "action": {"type": "invoke", "field": "check", "args": [{"type": "i32", "value": "9"}]}, "expected": [{"type": "i32", "value": "1"}]}, 
  {"type": "assert_return", "line": 234, "action": {"type": "invoke", "field": "check", "args": [{"type": "i32", "value": "10"}]}, "expected": [{"type": "i32", "value": "8"}]}, 
  {"type": "assert_trap", "line": 235, "action": {"type": "invoke", "field": "check", "args": [{"type": "i32", "value": "11"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_return", "line": 236, "action": {"type": "invoke", "field": "check", "args": [{"type": "i32", "value": "12"}]}, "expected": [{"type": "i32", "value": "7"}]}, 
  {"type": "assert_return", "line": 237, "action": {"type": "invoke", "field": "check", "args": [{"type": "i32", "value": "13"}]}, "expected": [{"type": "i32", "value": "5"}]}, 
  {"type": "assert_return", "line": 238, "action": {"type": "invoke", "field": "check", "args": [{"type": "i32", "value": "14"}]}, "expected": [{"type": "i32", "value": "2"}]}, 
  {"type": "assert_return", "line": 239, "action": {"type": "invoke", "field": "check", "args": [{"type": "i32", "value": "15"}]}, "expected": [{"type": "i32", "value": "3"}]}, 
  {"type": "assert_return", "line": 240, "action": {"type": "invoke", "field": "check", "args": [{"type": "i32", "value": "16"}]}, "expected": [{"type": "i32", "value": "6"}]}, 
  {"type": "assert_trap", "line": 241, "action": {"type": "invoke", "field": "check", "args": [{"type": "i32", "value": "17"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 242, "action": {"type": "invoke", "field": "check", "args": [{"type": "i32", "value": "18"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 243, "action": {"type": "invoke", "field": "check", "args": [{"type": "i32", "value": "19"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 244, "action": {"type": "invoke", "field": "check", "args": [{"type": "i32", "value": "20"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 245, "action": {"type": "invoke", "field": "check", "args": [{"type": "i32", "value": "21"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 246, "action": {"type": "invoke", "field": "check", "args": [{"type": "i32", "value": "22"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 247, "action": {"type": "invoke", "field": "check", "args": [{"type": "i32", "value": "23"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 248, "action": {"type": "invoke", "field": "check", "args": [{"type": "i32", "value": "24"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 249, "action": {"type": "invoke", "field": "check", "args": [{"type": "i32", "value": "25"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 250, "action": {"type": "invoke", "field": "check", "args": [{"type": "i32", "value": "26"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 251, "action": {"type": "invoke", "field": "check", "args": [{"type": "i32", "value": "27"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 252, "action": {"type": "invoke", "field": "check", "args": [{"type": "i32", "value": "28"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 253, "action": {"type": "invoke", "field": "check", "args": [{"type": "i32", "value": "29"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "module", "line": 255, "filename": "table_init.5.wasm"}, 
  {"type": "action", "line": 281, "action": {"type": "invoke", "field": "test", "args": []}, "expected": []}, 
  {"type": "assert_trap", "line": 282, "action": {"type": "invoke", "field": "check", "args": [{"type": "i32", "value": "0"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 283, "action": {"type": "invoke", "field": "check", "args": [{"type": "i32", "value": "1"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_return", "line": 284, "action": {"type": "invoke", "field": "check", "args": [{"type": "i32", "value": "2"}]}, "expected": [{"type": "i32", "value": "3"}]}, 
  {"type": "assert_return", "line": 285, "action": {"type": "invoke", "field": "check", "args": [{"type": "i32", "value": "3"}]}, "expected": [{"type": "i32", "value": "1"}]}, 
  {"type": "assert_return", "line": 286, "action": {"type": "invoke", "field": "check", "args": [{"type": "i32", "value": "4"}]}, "expected": [{"type": "i32", "value": "4"}]}, 
  {"type": "assert_return", "line": 287, "action": {"type": "invoke", "field": "check", "args": [{"type": "i32", "value": "5"}]}, "expected": [{"type": "i32", "value": "1"}]}, 
  {"type": "assert_trap", "line": 288, "action": {"type": "invoke", "field": "check", "args": [{"type": "i32", "value": "6"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 289, "action": {"type": "invoke", "field": "check", "args": [{"type": "i32", "value": "7"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 290, "action": {"type": "invoke", "field": "check", "args": [{"type": "i32", "value": "8"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 291, "action": {"type": "invoke", "field": "check", "args": [{"type": "i32", "value": "9"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 292, "action": {"type": "invoke", "field": "check", "args": [{"type": "i32", "value": "10"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 293, "action": {"type": "invoke", "field": "check", "args": [{"type": "i32", "value": "11"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_return", "line": 294, "action": {"type": "invoke", "field": "check", "args": [{"type": "i32", "value": "12"}]}, "expected": [{"type": "i32", "value": "7"}]}, 
  {"type": "assert_return", "line": 295, "action": {"type": "invoke", "field": "check", "args": [{"type": "i32", "value": "13"}]}, "expected": [{"type": "i32", "value": "5"}]}, 
  {"type": "assert_return", "line": 296, "action": {"type": "invoke", "field": "check", "args": [{"type": "i32", "value": "14"}]}, "expected": [{"type": "i32", "value": "2"}]}, 
  {"type": "assert_return", "line": 297, "action": {"type": "invoke", "field": "check", "args": [{"type": "i32", "value": "15"}]}, "expected": [{"type": "i32", "value": "9"}]}, 
  {"type": "assert_return", "line": 298, "action": {"type": "invoke", "field": "check", "args": [{"type": "i32", "value": "16"}]}, "expected": [{"type": "i32", "value": "2"}]}, 
  {"type": "assert_return", "line": 299, "action": {"type": "invoke", "field": "check", "args": [{"type": "i32", "value": "17"}]}, "expected": [{"type": "i32", "value": "7"}]}, 
  {"type": "assert_trap", "line": 300, "action": {"type": "invoke", "field": "check", "args": [{"type": "i32", "value": "18"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 301, "action": {"type": "invoke", "field": "check", "args": [{"type": "i32", "value": "19"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 302, "action": {"type": "invoke", "field": "check", "args": [{"type": "i32", "value": "20"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 303, "action": {"type": "invoke", "field": "check", "args": [{"type": "i32", "value": "21"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 304, "action": {"type": "invoke", "field": "check", "args": [{"type": "i32", "value": "22"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 305, "action": {"type": "invoke", "field": "check", "args": [{"type": "i32", "value": "23"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 306, "action": {"type": "invoke", "field": "check", "args": [{"type": "i32", "value": "24"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 307, "action": {"type": "invoke", "field": "check", "args": [{"type": "i32", "value": "25"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 308, "action": {"type": "invoke", "field": "check", "args": [{"type": "i32", "value": "26"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 309, "action": {"type": "invoke", "field": "check", "args": [{"type": "i32", "value": "27"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 310, "action": {"type": "invoke", "field": "check", "args": [{"type": "i32", "value": "28"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 311, "action": {"type": "invoke", "field": "check", "args": [{"type": "i32", "value": "29"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "module", "line": 313, "filename": "table_init.6.wasm"}, 
  {"type": "action", "line": 347, "action": {"type": "invoke", "field": "test", "args": []}, "expected": []}, 
  {"type": "assert_trap", "line": 348, "action": {"type": "invoke", "field": "check", "args": [{"type": "i32", "value": "0"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 349, "action": {"type": "invoke", "field": "check", "args": [{"type": "i32", "value": "1"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_return", "line": 350, "action": {"type": "invoke", "field": "check", "args": [{"type": "i32", "value": "2"}]}, "expected": [{"type": "i32", "value": "3"}]}, 
  {"type": "assert_return", "line": 351, "action": {"type": "invoke", "field": "check", "args": [{"type": "i32", "value": "3"}]}, "expected": [{"type": "i32", "value": "1"}]}, 
  {"type": "assert_return", "line": 352, "action": {"type": "invoke", "field": "check", "args": [{"type": "i32", "value": "4"}]}, "expected": [{"type": "i32", "value": "4"}]}, 
  {"type": "assert_return", "line": 353, "action": {"type": "invoke", "field": "check", "args": [{"type": "i32", "value": "5"}]}, "expected": [{"type": "i32", "value": "1"}]}, 
  {"type": "assert_trap", "line": 354, "action": {"type": "invoke", "field": "check", "args": [{"type": "i32", "value": "6"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_return", "line": 355, "action": {"type": "invoke", "field": "check", "args": [{"type": "i32", "value": "7"}]}, "expected": [{"type": "i32", "value": "2"}]}, 
  {"type": "assert_return", "line": 356, "action": {"type": "invoke", "field": "check", "args": [{"type": "i32", "value": "8"}]}, "expected": [{"type": "i32", "value": "7"}]}, 
  {"type": "assert_return", "line": 357, "action": {"type": "invoke", "field": "check", "args": [{"type": "i32", "value": "9"}]}, "expected": [{"type": "i32", "value": "1"}]}, 
  {"type": "assert_return", "line": 358, "action": {"type": "invoke", "field": "check", "args": [{"type": "i32", "value": "10"}]}, "expected": [{"type": "i32", "value": "8"}]}, 
  {"type": "assert_trap", "line": 359, "action": {"type": "invoke", "field": "check", "args": [{"type": "i32", "value": "11"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_return", "line": 360, "action": {"type": "invoke", "field": "check", "args": [{"type": "i32", "value": "12"}]}, "expected": [{"type": "i32", "value": "7"}]}, 
  {"type": "assert_trap", "line": 361, "action": {"type": "invoke", "field": "check", "args": [{"type": "i32", "value": "13"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_return", "line": 362, "action": {"type": "invoke", "field": "check", "args": [{"type": "i32", "value": "14"}]}, "expected": [{"type": "i32", "value": "7"}]}, 
  {"type": "assert_return", "line": 363, "action": {"type": "invoke", "field": "check", "args": [{"type": "i32", "value": "15"}]}, "expected": [{"type": "i32", "value": "5"}]}, 
  {"type": "assert_return", "line": 364, "action": {"type": "invoke", "field": "check", "args": [{"type": "i32", "value": "16"}]}, "expected": [{"type": "i32", "value": "2"}]}, 
  {"type": "assert_return", "line": 365, "action": {"type": "invoke", "field": "check", "args": [{"type": "i32", "value": "17"}]}, "expected": [{"type": "i32", "value": "7"}]}, 
  {"type": "assert_trap", "line": 366, "action": {"type": "invoke", "field": "check", "args": [{"type": "i32", "value": "18"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_return", "line": 367, "action": {"type": "invoke", "field": "check", "args": [{"type": "i32", "value": "19"}]}, "expected": [{"type": "i32", "value": "9"}]}, 
  {"type": "assert_trap", "line": 368, "action": {"type": "invoke", "field": "check", "args": [{"type": "i32", "value": "20"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_return", "line": 369, "action": {"type": "invoke", "field": "check", "args": [{"type": "i32", "value": "21"}]}, "expected": [{"type": "i32", "value": "7"}]}, 
  {"type": "assert_trap", "line": 370, "action": {"type": "invoke", "field": "check", "args": [{"type": "i32", "value": "22"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_return", "line": 371, "action": {"type": "invoke", "field": "check", "args": [{"type": "i32", "value": "23"}]}, "expected": [{"type": "i32", "value": "8"}]}, 
  {"type": "assert_return", "line": 372, "action": {"type": "invoke", "field": "check", "args": [{"type": "i32", "value": "24"}]}, "expected": [{"type": "i32", "value": "8"}]}, 
  {"type": "assert_trap", "line": 373, "action": {"type": "invoke", "field": "check", "args": [{"type": "i32", "value": "25"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 374, "action": {"type": "invoke", "field": "check", "args": [{"type": "i32", "value": "26"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 375, "action": {"type": "invoke", "field": "check", "args": [{"type": "i32", "value": "27"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 376, "action": {"type": "invoke", "field": "check", "args": [{"type": "i32", "value": "28"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 377, "action": {"type": "invoke", "field": "check", "args": [{"type": "i32", "value": "29"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_invalid", "line": 379, "filename": "table_init.7.wasm", "text": "unknown elem segment 0", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 385, "filename": "table_init.8.wasm", "text": "unknown table 0", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 391, "filename": "table_init.9.wasm", "text": "unknown elem segment 4", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 399, "filename": "table_init.10.wasm", "text": "unknown table 0", "module_type": "binary"}, 
  {"type": "module", "line": 407, "filename": "table_init.11.wasm"}, 
  {"type": "action", "line": 429, "action": {"type": "invoke", "field": "test", "args": []}, "expected": []}, 
  {"type": "module", "line": 431, "filename": "table_init.12.wasm"}, 
  {"type": "assert_trap", "line": 453, "action": {"type": "invoke", "field": "test", "args": []}, "text": "out of bounds table access", "expected": []}, 
  {"type": "module", "line": 455, "filename": "table_init.13.wasm"}, 
  {"type": "action", "line": 477, "action": {"type": "invoke", "field": "test", "args": []}, "expected": []}, 
  {"type": "module", "line": 479, "filename": "table_init.14.wasm"}, 
  {"type": "action", "line": 501, "action": {"type": "invoke", "field": "test", "args": []}, "expected": []}, 
  {"type": "module", "line": 503, "filename": "table_init.15.wasm"}, 
  {"type": "assert_trap", "line": 525, "action": {"type": "invoke", "field": "test", "args": []}, "text": "out of bounds table access", "expected": []}, 
  {"type": "module", "line": 527, "filename": "table_init.16.wasm"}, 
  {"type": "assert_trap", "line": 549, "action": {"type": "invoke", "field": "test", "args": []}, "text": "out of bounds table access", "expected": []}, 
  {"type": "module", "line": 551, "filename": "table_init.17.wasm"}, 
  {"type": "assert_trap", "line": 573, "action": {"type": "invoke", "field": "test", "args": []}, "text": "out of bounds table access", "expected": []}, 
  {"type": "module", "line": 575, "filename": "table_init.18.wasm"}, 
  {"type": "assert_trap", "line": 597, "action": {"type": "invoke", "field": "test", "args": []}, "text": "out of bounds table access", "expected": []}, 
  {"type": "module", "line": 599, "filename": "table_init.19.wasm"}, 
  {"type": "action", "line": 621, "action": {"type": "invoke", "field": "test", "args": []}, "expected": []}, 
  {"type": "module", "line": 623, "filename": "table_init.20.wasm"}, 
  {"type": "assert_trap", "line": 645, "action": {"type": "invoke", "field": "test", "args": []}, "text": "out of bounds table access", "expected": []}, 
  {"type": "module", "line": 647, "filename": "table_init.21.wasm"}, 
  {"type": "action", "line": 669, "action": {"type": "invoke", "field": "test", "args": []}, "expected": []}, 
  {"type": "module", "line": 671, "filename": "table_init.22.wasm"}, 
  {"type": "assert_trap", "line": 693, "action": {"type": "invoke", "field": "test", "args": []}, "text": "out of bounds table access", "expected": []}, 
  {"type": "module", "line": 695, "filename": "table_init.23.wasm"}, 
  {"type": "action", "line": 717, "action": {"type": "invoke", "field": "test", "args": []}, "expected": []}, 
  {"type": "module", "line": 719, "filename": "table_init.24.wasm"}, 
  {"type": "assert_trap", "line": 741, "action": {"type": "invoke", "field": "test", "args": []}, "text": "out of bounds table access", "expected": []}, 
  {"type": "module", "line": 743, "filename": "table_init.25.wasm"}, 
  {"type": "assert_trap", "line": 765, "action": {"type": "invoke", "field": "test", "args": []}, "text": "out of bounds table access", "expected": []}, 
  {"type": "module", "line": 767, "filename": "table_init.26.wasm"}, 
  {"type": "action", "line": 789, "action": {"type": "invoke", "field": "test", "args": []}, "expected": []}, 
  {"type": "module", "line": 791, "filename": "table_init.27.wasm"}, 
  {"type": "assert_trap", "line": 813, "action": {"type": "invoke", "field": "test", "args": []}, "text": "out of bounds table access", "expected": []}, 
  {"type": "module", "line": 815, "filename": "table_init.28.wasm"}, 
  {"type": "action", "line": 837, "action": {"type": "invoke", "field": "test", "args": []}, "expected": []}, 
  {"type": "module", "line": 839, "filename": "table_init.29.wasm"}, 
  {"type": "assert_trap", "line": 861, "action": {"type": "invoke", "field": "test", "args": []}, "text": "out of bounds table access", "expected": []}, 
  {"type": "module", "line": 863, "filename": "table_init.30.wasm"}, 
  {"type": "action", "line": 885, "action": {"type": "invoke", "field": "test", "args": []}, "expected": []}, 
  {"type": "module", "line": 887, "filename": "table_init.31.wasm"}, 
  {"type": "assert_trap", "line": 909, "action": {"type": "invoke", "field": "test", "args": []}, "text": "out of bounds table access", "expected": []}, 
  {"type": "assert_invalid", "line": 912, "filename": "table_init.32.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 921, "filename": "table_init.33.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 930, "filename": "table_init.34.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 939, "filename": "table_init.35.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 948, "filename": "table_init.36.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 957, "filename": "table_init.37.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 966, "filename": "table_init.38.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 975, "filename": "table_init.39.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 984, "filename": "table_init.40.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 993, "filename": "table_init.41.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 1002, "filename": "table_init.42.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 1011, "filename": "table_init.43.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 1020, "filename": "table_init.44.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 1029, "filename": "table_init.45.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 1038, "filename": "table_init.46.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 1047, "filename": "table_init.47.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 1056, "filename": "table_init.48.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 1065, "filename": "table_init.49.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 1074, "filename": "table_init.50.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 1083, "filename": "table_init.51.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 1092, "filename": "table_init.52.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 1101, "filename": "table_init.53.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 1110, "filename": "table_init.54.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 1119, "filename": "table_init.55.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 1128, "filename": "table_init.56.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 1137, "filename": "table_init.57.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 1146, "filename": "table_init.58.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 1155, "filename": "table_init.59.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 1164, "filename": "table_init.60.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 1173, "filename": "table_init.61.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 1182, "filename": "table_init.62.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 1191, "filename": "table_init.63.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 1200, "filename": "table_init.64.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 1209, "filename": "table_init.65.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 1218, "filename": "table_init.66.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 1227, "filename": "table_init.67.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 1236, "filename": "table_init.68.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 1245, "filename": "table_init.69.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 1254, "filename": "table_init.70.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 1263, "filename": "table_init.71.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 1272, "filename": "table_init.72.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 1281, "filename": "table_init.73.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 1290, "filename": "table_init.74.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 1299, "filename": "table_init.75.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 1308, "filename": "table_init.76.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 1317, "filename": "table_init.77.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 1326, "filename": "table_init.78.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 1335, "filename": "table_init.79.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 1344, "filename": "table_init.80.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 1353, "filename": "table_init.81.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 1362, "filename": "table_init.82.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 1371, "filename": "table_init.83.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 1380, "filename": "table_init.84.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 1389, "filename": "table_init.85.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 1398, "filename": "table_init.86.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 1407, "filename": "table_init.87.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 1416, "filename": "table_init.88.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 1425, "filename": "table_init.89.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 1434, "filename": "table_init.90.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 1443, "filename": "table_init.91.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 1452, "filename": "table_init.92.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 1461, "filename": "table_init.93.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 1470, "filename": "table_init.94.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "module", "line": 1478, "filename": "table_init.95.wasm"}, 
  {"type": "assert_trap", "line": 1506, "action": {"type": "invoke", "field": "run", "args": [{"type": "i32", "value": "24"}, {"type": "i32", "value": "16"}]}, "text": "out of bounds table access", "expected": []}, 
  {"type": "assert_trap", "line": 1507, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "0"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 1508, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "1"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 1509, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "2"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 1510, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "3"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 1511, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "4"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 1512, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "5"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 1513, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "6"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 1514, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "7"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 1515, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "8"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 1516, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "9"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 1517, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "10"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 1518, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "11"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 1519, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "12"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 1520, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "13"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 1521, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "14"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 1522, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "15"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 1523, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "16"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 1524, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "17"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 1525, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "18"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 1526, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "19"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 1527, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "20"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 1528, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "21"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 1529, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "22"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 1530, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "23"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 1531, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "24"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 1532, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "25"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 1533, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "26"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 1534, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "27"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 1535, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "28"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 1536, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "29"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 1537, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "30"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 1538, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "31"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "module", "line": 1540, "filename": "table_init.96.wasm"}, 
  {"type": "assert_trap", "line": 1568, "action": {"type": "invoke", "field": "run", "args": [{"type": "i32", "value": "25"}, {"type": "i32", "value": "16"}]}, "text": "out of bounds table access", "expected": []}, 
  {"type": "assert_trap", "line": 1569, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "0"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 1570, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "1"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 1571, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "2"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 1572, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "3"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 1573, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "4"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 1574, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "5"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 1575, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "6"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 1576, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "7"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 1577, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "8"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 1578, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "9"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 1579, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "10"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 1580, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "11"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 1581, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "12"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 1582, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "13"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 1583, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "14"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 1584, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "15"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 1585, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "16"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 1586, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "17"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 1587, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "18"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 1588, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "19"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 1589, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "20"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 1590, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "21"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 1591, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "22"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 1592, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "23"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 1593, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "24"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 1594, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "25"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 1595, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "26"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 1596, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "27"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 1597, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "28"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 1598, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "29"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 1599, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "30"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 1600, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "31"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "module", "line": 1602, "filename": "table_init.97.wasm"}, 
  {"type": "assert_trap", "line": 1630, "action": {"type": "invoke", "field": "run", "args": [{"type": "i32", "value": "96"}, {"type": "i32", "value": "32"}]}, "text": "out of bounds table access", "expected": []}, 
  {"type": "assert_trap", "line": 1631, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "0"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 1632, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "1"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 1633, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "2"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 1634, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "3"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 1635, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "4"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 1636, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "5"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 1637, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "6"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 1638, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "7"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 1639, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "8"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 1640, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "9"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 1641, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "10"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 1642, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "11"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 1643, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "12"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 1644, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "13"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 1645, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "14"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 1646, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "15"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 1647, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "16"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 1648, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "17"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 1649, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "18"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 1650, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "19"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 1651, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "20"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 1652, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "21"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 1653, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "22"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 1654, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "23"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 1655, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "24"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 1656, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "25"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 1657, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "26"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 1658, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "27"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 1659, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "28"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 1660, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "29"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 1661, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "30"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 1662, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "31"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 1663, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "32"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 1664, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "33"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 1665, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "34"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 1666, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "35"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 1667, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "36"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 1668, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "37"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 1669, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "38"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 1670, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "39"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 1671, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "40"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 1672, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "41"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 1673, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "42"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 1674, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "43"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 1675, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "44"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 1676, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "45"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 1677, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "46"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 1678, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "47"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 1679, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "48"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 1680, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "49"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 1681, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "50"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 1682, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "51"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 1683, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "52"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 1684, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "53"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 1685, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "54"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 1686, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "55"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 1687, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "56"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 1688, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "57"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 1689, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "58"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 1690, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "59"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 1691, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "60"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 1692, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "61"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 1693, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "62"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 1694, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "63"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 1695, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "64"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 1696, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "65"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 1697, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "66"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 1698, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "67"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 1699, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "68"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 1700, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "69"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 1701, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "70"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 1702, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "71"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 1703, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "72"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 1704, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "73"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 1705, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "74"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 1706, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "75"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 1707, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "76"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 1708, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "77"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 1709, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "78"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 1710, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "79"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 1711, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "80"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 1712, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "81"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 1713, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "82"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 1714, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "83"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 1715, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "84"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 1716, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "85"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 1717, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "86"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 1718, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "87"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 1719, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "88"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 1720, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "89"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 1721, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "90"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 1722, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "91"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 1723, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "92"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 1724, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "93"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 1725, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "94"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 1726, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "95"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 1727, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "96"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 1728, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "97"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 1729, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "98"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 1730, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "99"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 1731, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "100"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 1732, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "101"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 1733, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "102"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 1734, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "103"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 1735, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "104"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 1736, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "105"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 1737, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "106"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 1738, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "107"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 1739, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "108"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 1740, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "109"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 1741, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "110"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 1742, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "111"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 1743, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "112"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 1744, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "113"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 1745, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "114"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 1746, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "115"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 1747, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "116"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 1748, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "117"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 1749, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "118"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 1750, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "119"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 1751, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "120"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 1752, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "121"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 1753, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "122"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 1754, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "123"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 1755, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "124"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 1756, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "125"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 1757, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "126"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 1758, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "127"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 1759, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "128"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 1760, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "129"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 1761, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "130"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 1762, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "131"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 1763, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "132"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 1764, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "133"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 1765, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "134"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 1766, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "135"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 1767, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "136"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 1768, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "137"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 1769, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "138"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 1770, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "139"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 1771, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "140"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 1772, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "141"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 1773, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "142"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 1774, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "143"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 1775, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "144"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 1776, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "145"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 1777, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "146"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 1778, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "147"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 1779, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "148"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 1780, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "149"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 1781, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "150"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 1782, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "151"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 1783, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "152"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 1784, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "153"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 1785, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "154"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 1786, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "155"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 1787, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "156"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 1788, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "157"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 1789, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "158"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 1790, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "159"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "module", "line": 1792, "filename": "table_init.98.wasm"}, 
  {"type": "assert_trap", "line": 1820, "action": {"type": "invoke", "field": "run", "args": [{"type": "i32", "value": "97"}, {"type": "i32", "value": "31"}]}, "text": "out of bounds table access", "expected": []}, 
  {"type": "assert_trap", "line": 1821, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "0"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 1822, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "1"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 1823, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "2"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 1824, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "3"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 1825, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "4"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 1826, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "5"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 1827, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "6"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 1828, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "7"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 1829, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "8"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 1830, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "9"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 1831, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "10"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 1832, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "11"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 1833, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "12"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 1834, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "13"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 1835, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "14"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 1836, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "15"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 1837, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "16"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 1838, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "17"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 1839, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "18"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 1840, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "19"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 1841, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "20"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 1842, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "21"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 1843, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "22"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 1844, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "23"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 1845, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "24"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 1846, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "25"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 1847, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "26"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 1848, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "27"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 1849, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "28"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 1850, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "29"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 1851, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "30"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 1852, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "31"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 1853, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "32"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 1854, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "33"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 1855, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "34"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 1856, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "35"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 1857, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "36"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 1858, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "37"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 1859, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "38"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 1860, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "39"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 1861, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "40"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 1862, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "41"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 1863, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "42"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 1864, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "43"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 1865, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "44"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 1866, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "45"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 1867, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "46"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 1868, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "47"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 1869, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "48"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 1870, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "49"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 1871, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "50"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 1872, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "51"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 1873, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "52"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 1874, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "53"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 1875, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "54"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 1876, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "55"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 1877, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "56"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 1878, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "57"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 1879, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "58"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 1880, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "59"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 1881, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "60"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 1882, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "61"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 1883, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "62"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 1884, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "63"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 1885, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "64"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 1886, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "65"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 1887, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "66"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 1888, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "67"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 1889, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "68"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 1890, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "69"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 1891, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "70"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 1892, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "71"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 1893, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "72"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 1894, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "73"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 1895, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "74"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 1896, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "75"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 1897, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "76"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 1898, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "77"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 1899, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "78"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 1900, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "79"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 1901, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "80"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 1902, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "81"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 1903, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "82"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 1904, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "83"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 1905, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "84"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 1906, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "85"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 1907, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "86"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 1908, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "87"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 1909, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "88"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 1910, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "89"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 1911, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "90"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 1912, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "91"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 1913, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "92"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 1914, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "93"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 1915, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "94"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 1916, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "95"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 1917, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "96"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 1918, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "97"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 1919, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "98"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 1920, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "99"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 1921, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "100"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 1922, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "101"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 1923, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "102"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 1924, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "103"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 1925, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "104"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 1926, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "105"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 1927, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "106"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 1928, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "107"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 1929, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "108"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 1930, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "109"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 1931, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "110"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 1932, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "111"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 1933, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "112"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 1934, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "113"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 1935, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "114"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 1936, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "115"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 1937, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "116"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 1938, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "117"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 1939, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "118"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 1940, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "119"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 1941, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "120"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 1942, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "121"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 1943, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "122"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 1944, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "123"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 1945, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "124"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 1946, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "125"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 1947, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "126"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 1948, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "127"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 1949, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "128"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 1950, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "129"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 1951, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "130"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 1952, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "131"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 1953, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "132"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 1954, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "133"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 1955, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "134"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 1956, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "135"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 1957, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "136"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 1958, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "137"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 1959, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "138"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 1960, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "139"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 1961, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "140"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 1962, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "141"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 1963, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "142"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 1964, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "143"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 1965, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "144"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 1966, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "145"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 1967, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "146"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 1968, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "147"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 1969, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "148"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 1970, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "149"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 1971, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "150"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 1972, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "151"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 1973, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "152"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 1974, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "153"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 1975, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "154"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 1976, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "155"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 1977, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "156"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 1978, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "157"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 1979, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "158"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 1980, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "159"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "module", "line": 1982, "filename": "table_init.99.wasm"}, 
  {"type": "assert_trap", "line": 2010, "action": {"type": "invoke", "field": "run", "args": [{"type": "i32", "value": "48"}, {"type": "i32", "value": "4294967280"}]}, "text": "out of bounds table access", "expected": []}, 
  {"type": "assert_trap", "line": 2011, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "0"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 2012, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "1"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 2013, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "2"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 2014, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "3"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 2015, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "4"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 2016, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "5"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 2017, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "6"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 2018, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "7"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 2019, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "8"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 2020, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "9"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 2021, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "10"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 2022, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "11"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 2023, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "12"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 2024, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "13"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 2025, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "14"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 2026, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "15"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 2027, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "16"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 2028, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "17"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 2029, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "18"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 2030, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "19"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 2031, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "20"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 2032, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "21"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 2033, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "22"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 2034, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "23"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 2035, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "24"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 2036, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "25"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 2037, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "26"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 2038, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "27"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 2039, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "28"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 2040, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "29"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 2041, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "30"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 2042, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "31"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 2043, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "32"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 2044, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "33"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 2045, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "34"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 2046, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "35"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 2047, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "36"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 2048, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "37"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 2049, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "38"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 2050, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "39"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 2051, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "40"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 2052, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "41"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 2053, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "42"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 2054, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "43"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 2055, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "44"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 2056, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "45"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 2057, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "46"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 2058, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "47"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 2059, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "48"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 2060, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "49"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 2061, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "50"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 2062, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "51"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 2063, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "52"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 2064, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "53"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 2065, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "54"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 2066, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "55"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 2067, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "56"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 2068, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "57"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 2069, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "58"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 2070, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "59"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 2071, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "60"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 2072, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "61"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 2073, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "62"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 2074, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "63"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "module", "line": 2076, "filename": "table_init.100.wasm"}, 
  {"type": "assert_trap", "line": 2104, "action": {"type": "invoke", "field": "run", "args": [{"type": "i32", "value": "0"}, {"type": "i32", "value": "4294967292"}]}, "text": "out of bounds table access", "expected": []}, 
  {"type": "assert_trap", "line": 2105, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "0"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 2106, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "1"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 2107, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "2"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 2108, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "3"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 2109, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "4"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 2110, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "5"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 2111, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "6"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 2112, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "7"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 2113, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "8"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 2114, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "9"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 2115, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "10"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 2116, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "11"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 2117, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "12"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 2118, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "13"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 2119, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "14"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 2120, "action": {"type": "invoke", "field": "test", "args": [{"type": "i32", "value": "15"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "module", "line": 2122, "filename": "table_init.101.wasm"}]},
  "code": [
    "(module \n  (func (export \"ef0\") (result i32) (i32.const 0))\n  (func (export \"ef1\") (result i32) (i32.const 1))\n  (func (export \"ef2\") (result i32) (i32.const 2))\n  (func (export \"ef3\") (result i32) (i32.const 3))\n  (func (export \"ef4\") (result i32) (i32.const 4)))",
    "(register \"a\")",
    "(module (type (func (result i32))) (import \"a\" \"ef0\" (func (result i32))) (import \"a\" \"ef1\" (func (result i32))) (import \"a\" \"ef2\" (func (result i32))) (import \"a\" \"ef3\" (func (result i32))) (import \"a\" \"ef4\" (func (result i32))) (table $t0 30 30 funcref) (table $t1 30 30 funcref) (elem (table $t0) (i32.const 2) 3 1 4 1) (elem funcref (ref.func 2) (ref.func 7) (ref.func 1) (ref.func 8)) (elem (table $t0) (i32.const 12) 7 5 2 3 6) (elem funcref (ref.func 5) (ref.func 9) (ref.func 2) (ref.func 7) (ref.func 6))\n  (func (result i32) (i32.const 5))\n  (func (result i32) (i32.const 6))\n  (func (result i32) (i32.const 7))\n  (func (result i32) (i32.const 8))\n  (func (result i32) (i32.const 9))\n  (func (export \"test\") (table.init $t0 1 (i32.const 7) (i32.const 0) (i32.const 4)))\n  (func (export \"check\") (param i32) (result i32) (call_indirect $t0 (type 0) (local.get 0))))",
    "(invoke \"test\")",
    "(assert_trap (invoke \"check\" (i32.const 0)) \"uninitialized element\")",
    "(assert_trap (invoke \"check\" (i32.const 1)) \"uninitialized element\")",
    "(assert_return (invoke \"check\" (i32.const 2)) (i32.const 3))",
    "(assert_return (invoke \"check\" (i32.const 3)) (i32.const 1))",
    "(assert_return (invoke \"check\" (i32.const 4)) (i32.const 4))",
    "(assert_return (invoke \"check\" (i32.const 5)) (i32.const 1))",
    "(assert_trap (invoke \"check\" (i32.const 6)) \"uninitialized element\")",
    "(assert_return (invoke \"check\" (i32.const 7)) (i32.const 2))",
    "(assert_return (invoke \"check\" (i32.const 8)) (i32.const 7))",
    "(assert_return (invoke \"check\" (i32.const 9)) (i32.const 1))",
    "(assert_return (invoke \"check\" (i32.const 10)) (i32.const 8))",
    "(assert_trap (invoke \"check\" (i32.const 11)) \"uninitialized element\")",
    "(assert_return (invoke \"check\" (i32.const 12)) (i32.const 7))",
    "(assert_return (invoke \"check\" (i32.const 13)) (i32.const 5))",
    "(assert_return (invoke \"check\" (i32.const 14)) (i32.const 2))",
    "(assert_return (invoke \"check\" (i32.const 15)) (i32.const 3))",
    "(assert_return (invoke \"check\" (i32.const 16)) (i32.const 6))",
    "(assert_trap (invoke \"check\" (i32.const 17)) \"uninitialized element\")",
    "(assert_trap (invoke \"check\" (i32.const 18)) \"uninitialized element\")",
    "(assert_trap (invoke \"check\" (i32.const 19)) \"uninitialized element\")",
    "(assert_trap (invoke \"check\" (i32.const 20)) \"uninitialized element\")",
    "(assert_trap (invoke \"check\" (i32.const 21)) \"uninitialized element\")",
    "(assert_trap (invoke \"check\" (i32.const 22)) \"uninitialized element\")",
    "(assert_trap (invoke \"check\" (i32.const 23)) \"uninitialized element\")",
    "(assert_trap (invoke \"check\" (i32.const 24)) \"uninitialized element\")",
    "(assert_trap (invoke \"check\" (i32.const 25)) \"uninitialized element\")",
    "(assert_trap (invoke \"check\" (i32.const 26)) \"uninitialized element\")",
    "(assert_trap (invoke \"check\" (i32.const 27)) \"uninitialized element\")",
    "(assert_trap (invoke \"check\" (i32.const 28)) \"uninitialized element\")",
    "(assert_trap (invoke \"check\" (i32.const 29)) \"uninitialized element\")",
    "(module (type (func (result i32))) (import \"a\" \"ef0\" (func (result i32))) (import \"a\" \"ef1\" (func (result i32))) (import \"a\" \"ef2\" (func (result i32))) (import \"a\" \"ef3\" (func (result i32))) (import \"a\" \"ef4\" (func (result i32))) (table $t0 30 30 funcref) (table $t1 30 30 funcref) (elem (table $t0) (i32.const 2) 3 1 4 1) (elem funcref (ref.func 2) (ref.func 7) (ref.func 1) (ref.func 8)) (elem (table $t0) (i32.const 12) 7 5 2 3 6) (elem funcref (ref.func 5) (ref.func 9) (ref.func 2) (ref.func 7) (ref.func 6))\n  (func (result i32) (i32.const 5))\n  (func (result i32) (i32.const 6))\n  (func (result i32) (i32.const 7))\n  (func (result i32) (i32.const 8))\n  (func (result i32) (i32.const 9))\n  (func (export \"test\") (table.init $t0 3 (i32.const 15) (i32.const 1) (i32.const 3)))\n  (func (export \"check\") (param i32) (result i32) (call_indirect $t0 (type 0) (local.get 0))))",
    "(invoke \"test\")",
    "(assert_trap (invoke \"check\" (i32.const 0)) \"uninitialized element\")",
    "(assert_trap (invoke \"check\" (i32.const 1)) \"uninitialized element\")",
    "(assert_return (invoke \"check\" (i32.const 2)) (i32.const 3))",
    "(assert_return (invoke \"check\" (i32.const 3)) (i32.const 1))",
    "(assert_return (invoke \"check\" (i32.const 4)) (i32.const 4))",
    "(assert_return (invoke \"check\" (i32.const 5)) (i32.const 1))",
    "(assert_trap (invoke \"check\" (i32.const 6)) \"uninitialized element\")",
    "(assert_trap (invoke \"check\" (i32.const 7)) \"uninitialized element\")",
    "(assert_trap (invoke \"check\" (i32.const 8)) \"uninitialized element\")",
    "(assert_trap (invoke \"check\" (i32.const 9)) \"uninitialized element\")",
    "(assert_trap (invoke \"check\" (i32.const 10)) \"uninitialized element\")",
    "(assert_trap (invoke \"check\" (i32.const 11)) \"uninitialized element\")",
    "(assert_return (invoke \"check\" (i32.const 12)) (i32.const 7))",
    "(assert_return (invoke \"check\" (i32.const 13)) (i32.const 5))",
    "(assert_return (invoke \"check\" (i32.const 14)) (i32.const 2))",
    "(assert_return (invoke \"check\" (i32.const 15)) (i32.const 9))",
    "(assert_return (invoke \"check\" (i32.const 16)) (i32.const 2))",
    "(assert_return (invoke \"check\" (i32.const 17)) (i32.const 7))",
    "(assert_trap (invoke \"check\" (i32.const 18)) \"uninitialized element\")",
    "(assert_trap (invoke \"check\" (i32.const 19)) \"uninitialized element\")",
    "(assert_trap (invoke \"check\" (i32.const 20)) \"uninitialized element\")",
    "(assert_trap (invoke \"check\" (i32.const 21)) \"uninitialized element\")",
    "(assert_trap (invoke \"check\" (i32.const 22)) \"uninitialized element\")",
    "(assert_trap (invoke \"check\" (i32.const 23)) \"uninitialized element\")",
    "(assert_trap (invoke \"check\" (i32.const 24)) \"uninitialized element\")",
    "(assert_trap (invoke \"check\" (i32.const 25)) \"uninitialized element\")",
    "(assert_trap (invoke \"check\" (i32.const 26)) \"uninitialized element\")",
    "(assert_trap (invoke \"check\" (i32.const 27)) \"uninitialized element\")",
    "(assert_trap (invoke \"check\" (i32.const 28)) \"uninitialized element\")",
    "(assert_trap (invoke \"check\" (i32.const 29)) \"uninitialized element\")",
    "(module (type (func (result i32))) (import \"a\" \"ef0\" (func (result i32))) (import \"a\" \"ef1\" (func (result i32))) (import \"a\" \"ef2\" (func (result i32))) (import \"a\" \"ef3\" (func (result i32))) (import \"a\" \"ef4\" (func (result i32))) (table $t0 30 30 funcref) (table $t1 30 30 funcref) (elem (table $t0) (i32.const 2) 3 1 4 1) (elem funcref (ref.func 2) (ref.func 7) (ref.func 1) (ref.func 8)) (elem (table $t0) (i32.const 12) 7 5 2 3 6) (elem funcref (ref.func 5) (ref.func 9) (ref.func 2) (ref.func 7) (ref.func 6))\n  (func (result i32) (i32.const 5))\n  (func (result i32) (i32.const 6))\n  (func (result i32) (i32.const 7))\n  (func (result i32) (i32.const 8))\n  (func (result i32) (i32.const 9))\n  (func (export \"test\") (table.init $t0 1 (i32.const 7) (i32.const 0) (i32.const 4)) (elem.drop 1) (table.init $t0 3 (i32.const 15) (i32.const 1) (i32.const 3)) (elem.drop 3) (table.copy $t0 0 (i32.const 20) (i32.const 15) (i32.const 5)) (table.copy $t0 0 (i32.const 21) (i32.const 29) (i32.const 1)) (table.copy $t0 0 (i32.const 24) (i32.const 10) (i32.const 1)) (table.copy $t0 0 (i32.const 13) (i32.const 11) (i32.const 4)) (table.copy $t0 0 (i32.const 19) (i32.const 20) (i32.const 5)))\n  (func (export \"check\") (param i32) (result i32) (call_indirect $t0 (type 0) (local.get 0))))",
    "(invoke \"test\")",
    "(assert_trap (invoke \"check\" (i32.const 0)) \"uninitialized element\")",
    "(assert_trap (invoke \"check\" (i32.const 1)) \"uninitialized element\")",
    "(assert_return (invoke \"check\" (i32.const 2)) (i32.const 3))",
    "(assert_return (invoke \"check\" (i32.const 3)) (i32.const 1))",
    "(assert_return (invoke \"check\" (i32.const 4)) (i32.const 4))",
    "(assert_return (invoke \"check\" (i32.const 5)) (i32.const 1))",
    "(assert_trap (invoke \"check\" (i32.const 6)) \"uninitialized element\")",
    "(assert_return (invoke \"check\" (i32.const 7)) (i32.const 2))",
    "(assert_return (invoke \"check\" (i32.const 8)) (i32.const 7))",
    "(assert_return (invoke \"check\" (i32.const 9)) (i32.const 1))",
    "(assert_return (invoke \"check\" (i32.const 10)) (i32.const 8))",
    "(assert_trap (invoke \"check\" (i32.const 11)) \"uninitialized element\")",
    "(assert_return (invoke \"check\" (i32.const 12)) (i32.const 7))",
    "(assert_trap (invoke \"check\" (i32.const 13)) \"uninitialized element\")",
    "(assert_return (invoke \"check\" (i32.const 14)) (i32.const 7))",
    "(assert_return (invoke \"check\" (i32.const 15)) (i32.const 5))",
    "(assert_return (invoke \"check\" (i32.const 16)) (i32.const 2))",
    "(assert_return (invoke \"check\" (i32.const 17)) (i32.const 7))",
    "(assert_trap (invoke \"check\" (i32.const 18)) \"uninitialized element\")",
    "(assert_return (invoke \"check\" (i32.const 19)) (i32.const 9))",
    "(assert_trap (invoke \"check\" (i32.const 20)) \"uninitialized element\")",
    "(assert_return (invoke \"check\" (i32.const 21)) (i32.const 7))",
    "(assert_trap (invoke \"check\" (i32.const 22)) \"uninitialized element\")",
    "(assert_return (invoke \"check\" (i32.const 23)) (i32.const 8))",
    "(assert_return (invoke \"check\" (i32.const 24)) (i32.const 8))",
    "(assert_trap (invoke \"check\" (i32.const 25)) \"uninitialized element\")",
    "(assert_trap (invoke \"check\" (i32.const 26)) \"uninitialized element\")",
    "(assert_trap (invoke \"check\" (i32.const 27)) \"uninitialized element\")",
    "(assert_trap (invoke \"check\" (i32.const 28)) \"uninitialized element\")",
    "(assert_trap (invoke \"check\" (i32.const 29)) \"uninitialized element\")",
    "(module (type (func (result i32))) (import \"a\" \"ef0\" (func (result i32))) (import \"a\" \"ef1\" (func (result i32))) (import \"a\" \"ef2\" (func (result i32))) (import \"a\" \"ef3\" (func (result i32))) (import \"a\" \"ef4\" (func (result i32))) (table $t0 30 30 funcref) (table $t1 30 30 funcref) (elem (table $t1) (i32.const 2) 3 1 4 1) (elem funcref (ref.func 2) (ref.func 7) (ref.func 1) (ref.func 8)) (elem (table $t1) (i32.const 12) 7 5 2 3 6) (elem funcref (ref.func 5) (ref.func 9) (ref.func 2) (ref.func 7) (ref.func 6))\n  (func (result i32) (i32.const 5))\n  (func (result i32) (i32.const 6))\n  (func (result i32) (i32.const 7))\n  (func (result i32) (i32.const 8))\n  (func (result i32) (i32.const 9))\n  (func (export \"test\") (table.init $t1 1 (i32.const 7) (i32.const 0) (i32.const 4)))\n  (func (export \"check\") (param i32) (result i32) (call_indirect $t1 (type 0) (local.get 0))))",
    "(invoke \"test\")",
    "(assert_trap (invoke \"check\" (i32.const 0)) \"uninitialized element\")",
    "(assert_trap (invoke \"check\" (i32.const 1)) \"uninitialized element\")",
    "(assert_return (invoke \"check\" (i32.const 2)) (i32.const 3))",
    "(assert_return (invoke \"check\" (i32.const 3)) (i32.const 1))",
    "(assert_return (invoke \"check\" (i32.const 4)) (i32.const 4))",
    "(assert_return (invoke \"check\" (i32.const 5)) (i32.const 1))",
    "(assert_trap (invoke \"check\" (i32.const 6)) \"uninitialized element\")",
    "(assert_return (invoke \"check\" (i32.const 7)) (i32.const 2))",
    "(assert_return (invoke \"check\" (i32.const 8)) (i32.const 7))",
    "(assert_return (invoke \"check\" (i32.const 9)) (i32.const 1))",
    "(assert_return (invoke \"check\" (i32.const 10)) (i32.const 8))",
    "(assert_trap (invoke \"check\" (i32.const 11)) \"uninitialized element\")",
    "(assert_return (invoke \"check\" (i32.const 12)) (i32.const 7))",
    "(assert_return (invoke \"check\" (i32.const 13)) (i32.const 5))",
    "(assert_return (invoke \"check\" (i32.const 14)) (i32.const 2))",
    "(assert_return (invoke \"check\" (i32.const 15)) (i32.const 3))",
    "(assert_return (invoke \"check\" (i32.const 16)) (i32.const 6))",
    "(assert_trap (invoke \"check\" (i32.const 17)) \"uninitialized element\")",
    "(assert_trap (invoke \"check\" (i32.const 18)) \"uninitialized element\")",
    "(assert_trap (invoke \"check\" (i32.const 19)) \"uninitialized element\")",
    "(assert_trap (invoke \"check\" (i32.const 20)) \"uninitialized element\")",
    "(assert_trap (invoke \"check\" (i32.const 21)) \"uninitialized element\")",
    "(assert_trap (invoke \"check\" (i32.const 22)) \"uninitialized element\")",
    "(assert_trap (invoke \"check\" (i32.const 23)) \"uninitialized element\")",
    "(assert_trap (invoke \"check\" (i32.const 24)) \"uninitialized element\")",
    "(assert_trap (invoke \"check\" (i32.const 25)) \"uninitialized element\")",
    "(assert_trap (invoke \"check\" (i32.const 26)) \"uninitialized element\")",
    "(assert_trap (invoke \"check\" (i32.const 27)) \"uninitialized element\")",
    "(assert_trap (invoke \"check\" (i32.const 28)) \"uninitialized element\")",
    "(assert_trap (invoke \"check\" (i32.const 29)) \"uninitialized element\")",
    "(module (type (func (result i32))) (import \"a\" \"ef0\" (func (result i32))) (import \"a\" \"ef1\" (func (result i32))) (import \"a\" \"ef2\" (func (result i32))) (import \"a\" \"ef3\" (func (result i32))) (import \"a\" \"ef4\" (func (result i32))) (table $t0 30 30 funcref) (table $t1 30 30 funcref) (elem (table $t1) (i32.const 2) 3 1 4 1) (elem funcref (ref.func 2) (ref.func 7) (ref.func 1) (ref.func 8)) (elem (table $t1) (i32.const 12) 7 5 2 3 6) (elem funcref (ref.func 5) (ref.func 9) (ref.func 2) (ref.func 7) (ref.func 6))\n  (func (result i32) (i32.const 5))\n  (func (result i32) (i32.const 6))\n  (func (result i32) (i32.const 7))\n  (func (result i32) (i32.const 8))\n  (func (result i32) (i32.const 9))\n  (func (export \"test\") (table.init $t1 3 (i32.const 15) (i32.const 1) (i32.const 3)))\n  (func (export \"check\") (param i32) (result i32) (call_indirect $t1 (type 0) (local.get 0))))",
    "(invoke \"test\")",
    "(assert_trap (invoke \"check\" (i32.const 0)) \"uninitialized element\")",
    "(assert_trap (invoke \"check\" (i32.const 1)) \"uninitialized element\")",
    "(assert_return (invoke \"check\" (i32.const 2)) (i32.const 3))",
    "(assert_return (invoke \"check\" (i32.const 3)) (i32.const 1))",
    "(assert_return (invoke \"check\" (i32.const 4)) (i32.const 4))",
    "(assert_return (invoke \"check\" (i32.const 5)) (i32.const 1))",
    "(assert_trap (invoke \"check\" (i32.const 6)) \"uninitialized element\")",
    "(assert_trap (invoke \"check\" (i32.const 7)) \"uninitialized element\")",
    "(assert_trap (invoke \"check\" (i32.const 8)) \"uninitialized element\")",
    "(assert_trap (invoke \"check\" (i32.const 9)) \"uninitialized element\")",
    "(assert_trap (invoke \"check\" (i32.const 10)) \"uninitialized element\")",
    "(assert_trap (invoke \"check\" (i32.const 11)) \"uninitialized element\")",
    "(assert_return (invoke \"check\" (i32.const 12)) (i32.const 7))",
    "(assert_return (invoke \"check\" (i32.const 13)) (i32.const 5))",
    "(assert_return (invoke \"check\" (i32.const 14)) (i32.const 2))",
    "(assert_return (invoke \"check\" (i32.const 15)) (i32.const 9))",
    "(assert_return (invoke \"check\" (i32.const 16)) (i32.const 2))",
    "(assert_return (invoke \"check\" (i32.const 17)) (i32.const 7))",
    "(assert_trap (invoke \"check\" (i32.const 18)) \"uninitialized element\")",
    "(assert_trap (invoke \"check\" (i32.const 19)) \"uninitialized element\")",
    "(assert_trap (invoke \"check\" (i32.const 20)) \"uninitialized element\")",
    "(assert_trap (invoke \"check\" (i32.const 21)) \"uninitialized element\")",
    "(assert_trap (invoke \"check\" (i32.const 22)) \"uninitialized element\")",
    "(assert_trap (invoke \"check\" (i32.const 23)) \"uninitialized element\")",
    "(assert_trap (invoke \"check\" (i32.const 24)) \"uninitialized element\")",
    "(assert_trap (invoke \"check\" (i32.const 25)) \"uninitialized element\")",
    "(assert_trap (invoke \"check\" (i32.const 26)) \"uninitialized element\")",
    "(assert_trap (invoke \"check\" (i32.const 27)) \"uninitialized element\")",
    "(assert_trap (invoke \"check\" (i32.const 28)) \"uninitialized element\")",
    "(assert_trap (invoke \"check\" (i32.const 29)) \"uninitialized element\")",
    "(module (type (func (result i32))) (import \"a\" \"ef0\" (func (result i32))) (import \"a\" \"ef1\" (func (result i32))) (import \"a\" \"ef2\" (func (result i32))) (import \"a\" \"ef3\" (func (result i32))) (import \"a\" \"ef4\" (func (result i32))) (table $t0 30 30 funcref) (table $t1 30 30 funcref) (elem (table $t1) (i32.const 2) 3 1 4 1) (elem funcref (ref.func 2) (ref.func 7) (ref.func 1) (ref.func 8)) (elem (table $t1) (i32.const 12) 7 5 2 3 6) (elem funcref (ref.func 5) (ref.func 9) (ref.func 2) (ref.func 7) (ref.func 6))\n  (func (result i32) (i32.const 5))\n  (func (result i32) (i32.const 6))\n  (func (result i32) (i32.const 7))\n  (func (result i32) (i32.const 8))\n  (func (result i32) (i32.const 9))\n  (func (export \"test\") (table.init $t1 1 (i32.const 7) (i32.const 0) (i32.const 4)) (elem.drop 1) (table.init $t1 3 (i32.const 15) (i32.const 1) (i32.const 3)) (elem.drop 3) (table.copy $t1 1 (i32.const 20) (i32.const 15) (i32.const 5)) (table.copy $t1 1 (i32.const 21) (i32.const 29) (i32.const 1)) (table.copy $t1 1 (i32.const 24) (i32.const 10) (i32.const 1)) (table.copy $t1 1 (i32.const 13) (i32.const 11) (i32.const 4)) (table.copy $t1 1 (i32.const 19) (i32.const 20) (i32.const 5)))\n  (func (export \"check\") (param i32) (result i32) (call_indirect $t1 (type 0) (local.get 0))))",
    "(invoke \"test\")",
    "(assert_trap (invoke \"check\" (i32.const 0)) \"uninitialized element\")",
    "(assert_trap (invoke \"check\" (i32.const 1)) \"uninitialized element\")",
    "(assert_return (invoke \"check\" (i32.const 2)) (i32.const 3))",
    "(assert_return (invoke \"check\" (i32.const 3)) (i32.const 1))",
    "(assert_return (invoke \"check\" (i32.const 4)) (i32.const 4))",
    "(assert_return (invoke \"check\" (i32.const 5)) (i32.const 1))",
    "(assert_trap (invoke \"check\" (i32.const 6)) \"uninitialized element\")",
    "(assert_return (invoke \"check\" (i32.const 7)) (i32.const 2))",
    "(assert_return (invoke \"check\" (i32.const 8)) (i32.const 7))",
    "(assert_return (invoke \"check\" (i32.const 9)) (i32.const 1))",
    "(assert_return (invoke \"check\" (i32.const 10)) (i32.const 8))",
    "(assert_trap (invoke \"check\" (i32.const 11)) \"uninitialized element\")",
    "(assert_return (invoke \"check\" (i32.const 12)) (i32.const 7))",
    "(assert_trap (invoke \"check\" (i32.const 13)) \"uninitialized element\")",
    "(assert_return (invoke \"check\" (i32.const 14)) (i32.const 7))",
    "(assert_return (invoke \"check\" (i32.const 15)) (i32.const 5))",
    "(assert_return (invoke \"check\" (i32.const 16)) (i32.const 2))",
    "(assert_return (invoke \"check\" (i32.const 17)) (i32.const 7))",
    "(assert_trap (invoke \"check\" (i32.const 18)) \"uninitialized element\")",
    "(assert_return (invoke \"check\" (i32.const 19)) (i32.const 9))",
    "(assert_trap (invoke \"check\" (i32.const 20)) \"uninitialized element\")",
    "(assert_return (invoke \"check\" (i32.const 21)) (i32.const 7))",
    "(assert_trap (invoke \"check\" (i32.const 22)) \"uninitialized element\")",
    "(assert_return (invoke \"check\" (i32.const 23)) (i32.const 8))",
    "(assert_return (invoke \"check\" (i32.const 24)) (i32.const 8))",
    "(assert_trap (invoke \"check\" (i32.const 25)) \"uninitialized element\")",
    "(assert_trap (invoke \"check\" (i32.const 26)) \"uninitialized element\")",
    "(assert_trap (invoke \"check\" (i32.const 27)) \"uninitialized element\")",
    "(assert_trap (invoke \"check\" (i32.const 28)) \"uninitialized element\")",
    "(assert_trap (invoke \"check\" (i32.const 29)) \"uninitialized element\")",
    "(assert_invalid (module (func (export \"test\") (elem.drop 0))) \"unknown elem segment 0\")",
    "(assert_invalid (module (func (export \"test\") (table.init 0 (i32.const 12) (i32.const 1) (i32.const 1)))) \"unknown table 0\")",
    "(assert_invalid (module (elem funcref (ref.func 0)) (func (result i32) (i32.const 0)) (func (export \"test\") (elem.drop 4))) \"unknown elem segment 4\")",
    "(assert_invalid (module (elem funcref (ref.func 0)) (func (result i32) (i32.const 0)) (func (export \"test\") (table.init 4 (i32.const 12) (i32.const 1) (i32.const 1)))) \"unknown table 0\")",
    "(module (table $t0 30 30 funcref) (table $t1 28 28 funcref) (elem (table $t0) (i32.const 2) 3 1 4 1) (elem funcref (ref.func 2) (ref.func 7) (ref.func 1) (ref.func 8)) (elem (table $t0) (i32.const 12) 7 5 2 3 6) (elem funcref (ref.func 5) (ref.func 9) (ref.func 2) (ref.func 7) (ref.func 6))\n  (func (result i32) (i32.const 0))\n  (func (result i32) (i32.const 1))\n  (func (result i32) (i32.const 2))\n  (func (result i32) (i32.const 3))\n  (func (result i32) (i32.const 4))\n  (func (result i32) (i32.const 5))\n  (func (result i32) (i32.const 6))\n  (func (result i32) (i32.const 7))\n  (func (result i32) (i32.const 8))\n  (func (result i32) (i32.const 9))\n  (func (export \"test\") (elem.drop 2) ))",
    "(invoke \"test\")",
    "(module (table $t0 30 30 funcref) (table $t1 28 28 funcref) (elem (table $t0) (i32.const 2) 3 1 4 1) (elem funcref (ref.func 2) (ref.func 7) (ref.func 1) (ref.func 8)) (elem (table $t0) (i32.const 12) 7 5 2 3 6) (elem funcref (ref.func 5) (ref.func 9) (ref.func 2) (ref.func 7) (ref.func 6))\n  (func (result i32) (i32.const 0))\n  (func (result i32) (i32.const 1))\n  (func (result i32) (i32.const 2))\n  (func (result i32) (i32.const 3))\n  (func (result i32) (i32.const 4))\n  (func (result i32) (i32.const 5))\n  (func (result i32) (i32.const 6))\n  (func (result i32) (i32.const 7))\n  (func (result i32) (i32.const 8))\n  (func (result i32) (i32.const 9))\n  (func (export \"test\") (table.init 2 (i32.const 12) (i32.const 1) (i32.const 1)) ))",
    "(assert_trap (invoke \"test\") \"out of bounds table access\")",
    "(module (table $t0 30 30 funcref) (table $t1 28 28 funcref) (elem (table $t0) (i32.const 2) 3 1 4 1) (elem funcref (ref.func 2) (ref.func 7) (ref.func 1) (ref.func 8)) (elem (table $t0) (i32.const 12) 7 5 2 3 6) (elem funcref (ref.func 5) (ref.func 9) (ref.func 2) (ref.func 7) (ref.func 6))\n  (func (result i32) (i32.const 0))\n  (func (result i32) (i32.const 1))\n  (func (result i32) (i32.const 2))\n  (func (result i32) (i32.const 3))\n  (func (result i32) (i32.const 4))\n  (func (result i32) (i32.const 5))\n  (func (result i32) (i32.const 6))\n  (func (result i32) (i32.const 7))\n  (func (result i32) (i32.const 8))\n  (func (result i32) (i32.const 9))\n  (func (export \"test\") (table.init 1 (i32.const 12) (i32.const 1) (i32.const 1)) (table.init 1 (i32.const 21) (i32.const 1) (i32.const 1))))",
    "(invoke \"test\")",
    "(module (table $t0 30 30 funcref) (table $t1 28 28 funcref) (elem (table $t0) (i32.const 2) 3 1 4 1) (elem funcref (ref.func 2) (ref.func 7) (ref.func 1) (ref.func 8)) (elem (table $t0) (i32.const 12) 7 5 2 3 6) (elem funcref (ref.func 5) (ref.func 9) (ref.func 2) (ref.func 7) (ref.func 6))\n  (func (result i32) (i32.const 0))\n  (func (result i32) (i32.const 1))\n  (func (result i32) (i32.const 2))\n  (func (result i32) (i32.const 3))\n  (func (result i32) (i32.const 4))\n  (func (result i32) (i32.const 5))\n  (func (result i32) (i32.const 6))\n  (func (result i32) (i32.const 7))\n  (func (result i32) (i32.const 8))\n  (func (result i32) (i32.const 9))\n  (func (export \"test\") (elem.drop 1) (elem.drop 1)))",
    "(invoke \"test\")",
    "(module (table $t0 30 30 funcref) (table $t1 28 28 funcref) (elem (table $t0) (i32.const 2) 3 1 4 1) (elem funcref (ref.func 2) (ref.func 7) (ref.func 1) (ref.func 8)) (elem (table $t0) (i32.const 12) 7 5 2 3 6) (elem funcref (ref.func 5) (ref.func 9) (ref.func 2) (ref.func 7) (ref.func 6))\n  (func (result i32) (i32.const 0))\n  (func (result i32) (i32.const 1))\n  (func (result i32) (i32.const 2))\n  (func (result i32) (i32.const 3))\n  (func (result i32) (i32.const 4))\n  (func (result i32) (i32.const 5))\n  (func (result i32) (i32.const 6))\n  (func (result i32) (i32.const 7))\n  (func (result i32) (i32.const 8))\n  (func (result i32) (i32.const 9))\n  (func (export \"test\") (elem.drop 1) (table.init 1 (i32.const 12) (i32.const 1) (i32.const 1))))",
    "(assert_trap (invoke \"test\") \"out of bounds table access\")",
    "(module (table $t0 30 30 funcref) (table $t1 28 28 funcref) (elem (table $t0) (i32.const 2) 3 1 4 1) (elem funcref (ref.func 2) (ref.func 7) (ref.func 1) (ref.func 8)) (elem (table $t0) (i32.const 12) 7 5 2 3 6) (elem funcref (ref.func 5) (ref.func 9) (ref.func 2) (ref.func 7) (ref.func 6))\n  (func (result i32) (i32.const 0))\n  (func (result i32) (i32.const 1))\n  (func (result i32) (i32.const 2))\n  (func (result i32) (i32.const 3))\n  (func (result i32) (i32.const 4))\n  (func (result i32) (i32.const 5))\n  (func (result i32) (i32.const 6))\n  (func (result i32) (i32.const 7))\n  (func (result i32) (i32.const 8))\n  (func (result i32) (i32.const 9))\n  (func (export \"test\") (table.init 1 (i32.const 12) (i32.const 0) (i32.const 5)) ))",
    "(assert_trap (invoke \"test\") \"out of bounds table access\")",
    "(module (table $t0 30 30 funcref) (table $t1 28 28 funcref) (elem (table $t0) (i32.const 2) 3 1 4 1) (elem funcref (ref.func 2) (ref.func 7) (ref.func 1) (ref.func 8)) (elem (table $t0) (i32.const 12) 7 5 2 3 6) (elem funcref (ref.func 5) (ref.func 9) (ref.func 2) (ref.func 7) (ref.func 6))\n  (func (result i32) (i32.const 0))\n  (func (result i32) (i32.const 1))\n  (func (result i32) (i32.const 2))\n  (func (result i32) (i32.const 3))\n  (func (result i32) (i32.const 4))\n  (func (result i32) (i32.const 5))\n  (func (result i32) (i32.const 6))\n  (func (result i32) (i32.const 7))\n  (func (result i32) (i32.const 8))\n  (func (result i32) (i32.const 9))\n  (func (export \"test\") (table.init 1 (i32.const 12) (i32.const 2) (i32.const 3)) ))",
    "(assert_trap (invoke \"test\") \"out of bounds table access\")",
    "(module (table $t0 30 30 funcref) (table $t1 28 28 funcref) (elem (table $t0) (i32.const 2) 3 1 4 1) (elem funcref (ref.func 2) (ref.func 7) (ref.func 1) (ref.func 8)) (elem (table $t0) (i32.const 12) 7 5 2 3 6) (elem funcref (ref.func 5) (ref.func 9) (ref.func 2) (ref.func 7) (ref.func 6))\n  (func (result i32) (i32.const 0))\n  (func (result i32) (i32.const 1))\n  (func (result i32) (i32.const 2))\n  (func (result i32) (i32.const 3))\n  (func (result i32) (i32.const 4))\n  (func (result i32) (i32.const 5))\n  (func (result i32) (i32.const 6))\n  (func (result i32) (i32.const 7))\n  (func (result i32) (i32.const 8))\n  (func (result i32) (i32.const 9))\n  (func (export \"test\") (table.init $t0 1 (i32.const 28) (i32.const 1) (i32.const 3)) ))",
    "(assert_trap (invoke \"test\") \"out of bounds table access\")",
    "(module (table $t0 30 30 funcref) (table $t1 28 28 funcref) (elem (table $t0) (i32.const 2) 3 1 4 1) (elem funcref (ref.func 2) (ref.func 7) (ref.func 1) (ref.func 8)) (elem (table $t0) (i32.const 12) 7 5 2 3 6) (elem funcref (ref.func 5) (ref.func 9) (ref.func 2) (ref.func 7) (ref.func 6))\n  (func (result i32) (i32.const 0))\n  (func (result i32) (i32.const 1))\n  (func (result i32) (i32.const 2))\n  (func (result i32) (i32.const 3))\n  (func (result i32) (i32.const 4))\n  (func (result i32) (i32.const 5))\n  (func (result i32) (i32.const 6))\n  (func (result i32) (i32.const 7))\n  (func (result i32) (i32.const 8))\n  (func (result i32) (i32.const 9))\n  (func (export \"test\") (table.init $t0 1 (i32.const 12) (i32.const 4) (i32.const 0)) ))",
    "(invoke \"test\")",
    "(module (table $t0 30 30 funcref) (table $t1 28 28 funcref) (elem (table $t0) (i32.const 2) 3 1 4 1) (elem funcref (ref.func 2) (ref.func 7) (ref.func 1) (ref.func 8)) (elem (table $t0) (i32.const 12) 7 5 2 3 6) (elem funcref (ref.func 5) (ref.func 9) (ref.func 2) (ref.func 7) (ref.func 6))\n  (func (result i32) (i32.const 0))\n  (func (result i32) (i32.const 1))\n  (func (result i32) (i32.const 2))\n  (func (result i32) (i32.const 3))\n  (func (result i32) (i32.const 4))\n  (func (result i32) (i32.const 5))\n  (func (result i32) (i32.const 6))\n  (func (result i32) (i32.const 7))\n  (func (result i32) (i32.const 8))\n  (func (result i32) (i32.const 9))\n  (func (export \"test\") (table.init $t0 1 (i32.const 12) (i32.const 5) (i32.const 0)) ))",
    "(assert_trap (invoke \"test\") \"out of bounds table access\")",
    "(module (table $t0 30 30 funcref) (table $t1 28 28 funcref) (elem (table $t0) (i32.const 2) 3 1 4 1) (elem funcref (ref.func 2) (ref.func 7) (ref.func 1) (ref.func 8)) (elem (table $t0) (i32.const 12) 7 5 2 3 6) (elem funcref (ref.func 5) (ref.func 9) (ref.func 2) (ref.func 7) (ref.func 6))\n  (func (result i32) (i32.const 0))\n  (func (result i32) (i32.const 1))\n  (func (result i32) (i32.const 2))\n  (func (result i32) (i32.const 3))\n  (func (result i32) (i32.const 4))\n  (func (result i32) (i32.const 5))\n  (func (result i32) (i32.const 6))\n  (func (result i32) (i32.const 7))\n  (func (result i32) (i32.const 8))\n  (func (result i32) (i32.const 9))\n  (func (export \"test\") (table.init $t0 1 (i32.const 30) (i32.const 2) (i32.const 0)) ))",
    "(invoke \"test\")",
    "(module (table $t0 30 30 funcref) (table $t1 28 28 funcref) (elem (table $t0) (i32.const 2) 3 1 4 1) (elem funcref (ref.func 2) (ref.func 7) (ref.func 1) (ref.func 8)) (elem (table $t0) (i32.const 12) 7 5 2 3 6) (elem funcref (ref.func 5) (ref.func 9) (ref.func 2) (ref.func 7) (ref.func 6))\n  (func (result i32) (i32.const 0))\n  (func (result i32) (i32.const 1))\n  (func (result i32) (i32.const 2))\n  (func (result i32) (i32.const 3))\n  (func (result i32) (i32.const 4))\n  (func (result i32) (i32.const 5))\n  (func (result i32) (i32.const 6))\n  (func (result i32) (i32.const 7))\n  (func (result i32) (i32.const 8))\n  (func (result i32) (i32.const 9))\n  (func (export \"test\") (table.init $t0 1 (i32.const 31) (i32.const 2) (i32.const 0)) ))",
    "(assert_trap (invoke \"test\") \"out of bounds table access\")",
    "(module (table $t0 30 30 funcref) (table $t1 28 28 funcref) (elem (table $t0) (i32.const 2) 3 1 4 1) (elem funcref (ref.func 2) (ref.func 7) (ref.func 1) (ref.func 8)) (elem (table $t0) (i32.const 12) 7 5 2 3 6) (elem funcref (ref.func 5) (ref.func 9) (ref.func 2) (ref.func 7) (ref.func 6))\n  (func (result i32) (i32.const 0))\n  (func (result i32) (i32.const 1))\n  (func (result i32) (i32.const 2))\n  (func (result i32) (i32.const 3))\n  (func (result i32) (i32.const 4))\n  (func (result i32) (i32.const 5))\n  (func (result i32) (i32.const 6))\n  (func (result i32) (i32.const 7))\n  (func (result i32) (i32.const 8))\n  (func (result i32) (i32.const 9))\n  (func (export \"test\") (table.init $t0 1 (i32.const 30) (i32.const 4) (i32.const 0)) ))",
    "(invoke \"test\")",
    "(module (table $t0 30 30 funcref) (table $t1 28 28 funcref) (elem (table $t0) (i32.const 2) 3 1 4 1) (elem funcref (ref.func 2) (ref.func 7) (ref.func 1) (ref.func 8)) (elem (table $t0) (i32.const 12) 7 5 2 3 6) (elem funcref (ref.func 5) (ref.func 9) (ref.func 2) (ref.func 7) (ref.func 6))\n  (func (result i32) (i32.const 0))\n  (func (result i32) (i32.const 1))\n  (func (result i32) (i32.const 2))\n  (func (result i32) (i32.const 3))\n  (func (result i32) (i32.const 4))\n  (func (result i32) (i32.const 5))\n  (func (result i32) (i32.const 6))\n  (func (result i32) (i32.const 7))\n  (func (result i32) (i32.const 8))\n  (func (result i32) (i32.const 9))\n  (func (export \"test\") (table.init $t0 1 (i32.const 31) (i32.const 5) (i32.const 0)) ))",
    "(assert_trap (invoke \"test\") \"out of bounds table access\")",
    "(module (table $t0 30 30 funcref) (table $t1 28 28 funcref) (elem (table $t1) (i32.const 2) 3 1 4 1) (elem funcref (ref.func 2) (ref.func 7) (ref.func 1) (ref.func 8)) (elem (table $t1) (i32.const 12) 7 5 2 3 6) (elem funcref (ref.func 5) (ref.func 9) (ref.func 2) (ref.func 7) (ref.func 6))\n  (func (result i32) (i32.const 0))\n  (func (result i32) (i32.const 1))\n  (func (result i32) (i32.const 2))\n  (func (result i32) (i32.const 3))\n  (func (result i32) (i32.const 4))\n  (func (result i32) (i32.const 5))\n  (func (result i32) (i32.const 6))\n  (func (result i32) (i32.const 7))\n  (func (result i32) (i32.const 8))\n  (func (result i32) (i32.const 9))\n  (func (export \"test\") (table.init $t1 1 (i32.const 26) (i32.const 1) (i32.const 3)) ))",
    "(assert_trap (invoke \"test\") \"out of bounds table access\")",
    "(module (table $t0 30 30 funcref) (table $t1 28 28 funcref) (elem (table $t1) (i32.const 2) 3 1 4 1) (elem funcref (ref.func 2) (ref.func 7) (ref.func 1) (ref.func 8)) (elem (table $t1) (i32.const 12) 7 5 2 3 6) (elem funcref (ref.func 5) (ref.func 9) (ref.func 2) (ref.func 7) (ref.func 6))\n  (func (result i32) (i32.const 0))\n  (func (result i32) (i32.const 1))\n  (func (result i32) (i32.const 2))\n  (func (result i32) (i32.const 3))\n  (func (result i32) (i32.const 4))\n  (func (result i32) (i32.const 5))\n  (func (result i32) (i32.const 6))\n  (func (result i32) (i32.const 7))\n  (func (result i32) (i32.const 8))\n  (func (result i32) (i32.const 9))\n  (func (export \"test\") (table.init $t1 1 (i32.const 12) (i32.const 4) (i32.const 0)) ))",
    "(invoke \"test\")",
    "(module (table $t0 30 30 funcref) (table $t1 28 28 funcref) (elem (table $t1) (i32.const 2) 3 1 4 1) (elem funcref (ref.func 2) (ref.func 7) (ref.func 1) (ref.func 8)) (elem (table $t1) (i32.const 12) 7 5 2 3 6) (elem funcref (ref.func 5) (ref.func 9) (ref.func 2) (ref.func 7) (ref.func 6))\n  (func (result i32) (i32.const 0))\n  (func (result i32) (i32.const 1))\n  (func (result i32) (i32.const 2))\n  (func (result i32) (i32.const 3))\n  (func (result i32) (i32.const 4))\n  (func (result i32) (i32.const 5))\n  (func (result i32) (i32.const 6))\n  (func (result i32) (i32.const 7))\n  (func (result i32) (i32.const 8))\n  (func (result i32) (i32.const 9))\n  (func (export \"test\") (table.init $t1 1 (i32.const 12) (i32.const 5) (i32.const 0)) ))",
    "(assert_trap (invoke \"test\") \"out of bounds table access\")",
    "(module (table $t0 30 30 funcref) (table $t1 28 28 funcref) (elem (table $t1) (i32.const 2) 3 1 4 1) (elem funcref (ref.func 2) (ref.func 7) (ref.func 1) (ref.func 8)) (elem (table $t1) (i32.const 12) 7 5 2 3 6) (elem funcref (ref.func 5) (ref.func 9) (ref.func 2) (ref.func 7) (ref.func 6))\n  (func (result i32) (i32.const 0))\n  (func (result i32) (i32.const 1))\n  (func (result i32) (i32.const 2))\n  (func (result i32) (i32.const 3))\n  (func (result i32) (i32.const 4))\n  (func (result i32) (i32.const 5))\n  (func (result i32) (i32.const 6))\n  (func (result i32) (i32.const 7))\n  (func (result i32) (i32.const 8))\n  (func (result i32) (i32.const 9))\n  (func (export \"test\") (table.init $t1 1 (i32.const 28) (i32.const 2) (i32.const 0)) ))",
    "(invoke \"test\")",
    "(module (table $t0 30 30 funcref) (table $t1 28 28 funcref) (elem (table $t1) (i32.const 2) 3 1 4 1) (elem funcref (ref.func 2) (ref.func 7) (ref.func 1) (ref.func 8)) (elem (table $t1) (i32.const 12) 7 5 2 3 6) (elem funcref (ref.func 5) (ref.func 9) (ref.func 2) (ref.func 7) (ref.func 6))\n  (func (result i32) (i32.const 0))\n  (func (result i32) (i32.const 1))\n  (func (result i32) (i32.const 2))\n  (func (result i32) (i32.const 3))\n  (func (result i32) (i32.const 4))\n  (func (result i32) (i32.const 5))\n  (func (result i32) (i32.const 6))\n  (func (result i32) (i32.const 7))\n  (func (result i32) (i32.const 8))\n  (func (result i32) (i32.const 9))\n  (func (export \"test\") (table.init $t1 1 (i32.const 29) (i32.const 2) (i32.const 0)) ))",
    "(assert_trap (invoke \"test\") \"out of bounds table access\")",
    "(module (table $t0 30 30 funcref) (table $t1 28 28 funcref) (elem (table $t1) (i32.const 2) 3 1 4 1) (elem funcref (ref.func 2) (ref.func 7) (ref.func 1) (ref.func 8)) (elem (table $t1) (i32.const 12) 7 5 2 3 6) (elem funcref (ref.func 5) (ref.func 9) (ref.func 2) (ref.func 7) (ref.func 6))\n  (func (result i32) (i32.const 0))\n  (func (result i32) (i32.const 1))\n  (func (result i32) (i32.const 2))\n  (func (result i32) (i32.const 3))\n  (func (result i32) (i32.const 4))\n  (func (result i32) (i32.const 5))\n  (func (result i32) (i32.const 6))\n  (func (result i32) (i32.const 7))\n  (func (result i32) (i32.const 8))\n  (func (result i32) (i32.const 9))\n  (func (export \"test\") (table.init $t1 1 (i32.const 28) (i32.const 4) (i32.const 0)) ))",
    "(invoke \"test\")",
    "(module (table $t0 30 30 funcref) (table $t1 28 28 funcref) (elem (table $t1) (i32.const 2) 3 1 4 1) (elem funcref (ref.func 2) (ref.func 7) (ref.func 1) (ref.func 8)) (elem (table $t1) (i32.const 12) 7 5 2 3 6) (elem funcref (ref.func 5) (ref.func 9) (ref.func 2) (ref.func 7) (ref.func 6))\n  (func (result i32) (i32.const 0))\n  (func (result i32) (i32.const 1))\n  (func (result i32) (i32.const 2))\n  (func (result i32) (i32.const 3))\n  (func (result i32) (i32.const 4))\n  (func (result i32) (i32.const 5))\n  (func (result i32) (i32.const 6))\n  (func (result i32) (i32.const 7))\n  (func (result i32) (i32.const 8))\n  (func (result i32) (i32.const 9))\n  (func (export \"test\") (table.init $t1 1 (i32.const 29) (i32.const 5) (i32.const 0)) ))",
    "(assert_trap (invoke \"test\") \"out of bounds table access\")",
    "(assert_invalid (module (table 10 funcref) (elem funcref (ref.func $f0) (ref.func $f0) (ref.func $f0)) (func $f0) (func (export \"test\") (table.init 0 (i32.const 1) (i32.const 1) (f32.const 1)))) \"type mismatch\")",
    "(assert_invalid (module (table 10 funcref) (elem funcref (ref.func $f0) (ref.func $f0) (ref.func $f0)) (func $f0) (func (export \"test\") (table.init 0 (i32.const 1) (i32.const 1) (i64.const 1)))) \"type mismatch\")",
    "(assert_invalid (module (table 10 funcref) (elem funcref (ref.func $f0) (ref.func $f0) (ref.func $f0)) (func $f0) (func (export \"test\") (table.init 0 (i32.const 1) (i32.const 1) (f64.const 1)))) \"type mismatch\")",
    "(assert_invalid (module (table 10 funcref) (elem funcref (ref.func $f0) (ref.func $f0) (ref.func $f0)) (func $f0) (func (export \"test\") (table.init 0 (i32.const 1) (f32.const 1) (i32.const 1)))) \"type mismatch\")",
    "(assert_invalid (module (table 10 funcref) (elem funcref (ref.func $f0) (ref.func $f0) (ref.func $f0)) (func $f0) (func (export \"test\") (table.init 0 (i32.const 1) (f32.const 1) (f32.const 1)))) \"type mismatch\")",
    "(assert_invalid (module (table 10 funcref) (elem funcref (ref.func $f0) (ref.func $f0) (ref.func $f0)) (func $f0) (func (export \"test\") (table.init 0 (i32.const 1) (f32.const 1) (i64.const 1)))) \"type mismatch\")",
    "(assert_invalid (module (table 10 funcref) (elem funcref (ref.func $f0) (ref.func $f0) (ref.func $f0)) (func $f0) (func (export \"test\") (table.init 0 (i32.const 1) (f32.const 1) (f64.const 1)))) \"type mismatch\")",
    "(assert_invalid (module (table 10 funcref) (elem funcref (ref.func $f0) (ref.func $f0) (ref.func $f0)) (func $f0) (func (export \"test\") (table.init 0 (i32.const 1) (i64.const 1) (i32.const 1)))) \"type mismatch\")",
    "(assert_invalid (module (table 10 funcref) (elem funcref (ref.func $f0) (ref.func $f0) (ref.func $f0)) (func $f0) (func (export \"test\") (table.init 0 (i32.const 1) (i64.const 1) (f32.const 1)))) \"type mismatch\")",
    "(assert_invalid (module (table 10 funcref) (elem funcref (ref.func $f0) (ref.func $f0) (ref.func $f0)) (func $f0) (func (export \"test\") (table.init 0 (i32.const 1) (i64.const 1) (i64.const 1)))) \"type mismatch\")",
    "(assert_invalid (module (table 10 funcref) (elem funcref (ref.func $f0) (ref.func $f0) (ref.func $f0)) (func $f0) (func (export \"test\") (table.init 0 (i32.const 1) (i64.const 1) (f64.const 1)))) \"type mismatch\")",
    "(assert_invalid (module (table 10 funcref) (elem funcref (ref.func $f0) (ref.func $f0) (ref.func $f0)) (func $f0) (func (export \"test\") (table.init 0 (i32.const 1) (f64.const 1) (i32.const 1)))) \"type mismatch\")",
    "(assert_invalid (module (table 10 funcref) (elem funcref (ref.func $f0) (ref.func $f0) (ref.func $f0)) (func $f0) (func (export \"test\") (table.init 0 (i32.const 1) (f64.const 1) (f32.const 1)))) \"type mismatch\")",
    "(assert_invalid (module (table 10 funcref) (elem funcref (ref.func $f0) (ref.func $f0) (ref.func $f0)) (func $f0) (func (export \"test\") (table.init 0 (i32.const 1) (f64.const 1) (i64.const 1)))) \"type mismatch\")",
    "(assert_invalid (module (table 10 funcref) (elem funcref (ref.func $f0) (ref.func $f0) (ref.func $f0)) (func $f0) (func (export \"test\") (table.init 0 (i32.const 1) (f64.const 1) (f64.const 1)))) \"type mismatch\")",
    "(assert_invalid (module (table 10 funcref) (elem funcref (ref.func $f0) (ref.func $f0) (ref.func $f0)) (func $f0) (func (export \"test\") (table.init 0 (f32.const 1) (i32.const 1) (i32.const 1)))) \"type mismatch\")",
    "(assert_invalid (module (table 10 funcref) (elem funcref (ref.func $f0) (ref.func $f0) (ref.func $f0)) (func $f0) (func (export \"test\") (table.init 0 (f32.const 1) (i32.const 1) (f32.const 1)))) \"type mismatch\")",
    "(assert_invalid (module (table 10 funcref) (elem funcref (ref.func $f0) (ref.func $f0) (ref.func $f0)) (func $f0) (func (export \"test\") (table.init 0 (f32.const 1) (i32.const 1) (i64.const 1)))) \"type mismatch\")",
    "(assert_invalid (module (table 10 funcref) (elem funcref (ref.func $f0) (ref.func $f0) (ref.func $f0)) (func $f0) (func (export \"test\") (table.init 0 (f32.const 1) (i32.const 1) (f64.const 1)))) \"type mismatch\")",
    "(assert_invalid (module (table 10 funcref) (elem funcref (ref.func $f0) (ref.func $f0) (ref.func $f0)) (func $f0) (func (export \"test\") (table.init 0 (f32.const 1) (f32.const 1) (i32.const 1)))) \"type mismatch\")",
    "(assert_invalid (module (table 10 funcref) (elem funcref (ref.func $f0) (ref.func $f0) (ref.func $f0)) (func $f0) (func (export \"test\") (table.init 0 (f32.const 1) (f32.const 1) (f32.const 1)))) \"type mismatch\")",
    "(assert_invalid (module (table 10 funcref) (elem funcref (ref.func $f0) (ref.func $f0) (ref.func $f0)) (func $f0) (func (export \"test\") (table.init 0 (f32.const 1) (f32.const 1) (i64.const 1)))) \"type mismatch\")",
    "(assert_invalid (module (table 10 funcref) (elem funcref (ref.func $f0) (ref.func $f0) (ref.func $f0)) (func $f0) (func (export \"test\") (table.init 0 (f32.const 1) (f32.const 1) (f64.const 1)))) \"type mismatch\")",
    "(assert_invalid (module (table 10 funcref) (elem funcref (ref.func $f0) (ref.func $f0) (ref.func $f0)) (func $f0) (func (export \"test\") (table.init 0 (f32.const 1) (i64.const 1) (i32.const 1)))) \"type mismatch\")",
    "(assert_invalid (module (table 10 funcref) (elem funcref (ref.func $f0) (ref.func $f0) (ref.func $f0)) (func $f0) (func (export \"test\") (table.init 0 (f32.const 1) (i64.const 1) (f32.const 1)))) \"type mismatch\")",
    "(assert_invalid (module (table 10 funcref) (elem funcref (ref.func $f0) (ref.func $f0) (ref.func $f0)) (func $f0) (func (export \"test\") (table.init 0 (f32.const 1) (i64.const 1) (i64.const 1)))) \"type mismatch\")",
    "(assert_invalid (module (table 10 funcref) (elem funcref (ref.func $f0) (ref.func $f0) (ref.func $f0)) (func $f0) (func (export \"test\") (table.init 0 (f32.const 1) (i64.const 1) (f64.const 1)))) \"type mismatch\")",
    "(assert_invalid (module (table 10 funcref) (elem funcref (ref.func $f0) (ref.func $f0) (ref.func $f0)) (func $f0) (func (export \"test\") (table.init 0 (f32.const 1) (f64.const 1) (i32.const 1)))) \"type mismatch\")",
    "(assert_invalid (module (table 10 funcref) (elem funcref (ref.func $f0) (ref.func $f0) (ref.func $f0)) (func $f0) (func (export \"test\") (table.init 0 (f32.const 1) (f64.const 1) (f32.const 1)))) \"type mismatch\")",
    "(assert_invalid (module (table 10 funcref) (elem funcref (ref.func $f0) (ref.func $f0) (ref.func $f0)) (func $f0) (func (export \"test\") (table.init 0 (f32.const 1) (f64.const 1) (i64.const 1)))) \"type mismatch\")",
    "(assert_invalid (module (table 10 funcref) (elem funcref (ref.func $f0) (ref.func $f0) (ref.func $f0)) (func $f0) (func (export \"test\") (table.init 0 (f32.const 1) (f64.const 1) (f64.const 1)))) \"type mismatch\")",
    "(assert_invalid (module (table 10 funcref) (elem funcref (ref.func $f0) (ref.func $f0) (ref.func $f0)) (func $f0) (func (export \"test\") (table.init 0 (i64.const 1) (i32.const 1) (i32.const 1)))) \"type mismatch\")",
    "(assert_invalid (module (table 10 funcref) (elem funcref (ref.func $f0) (ref.func $f0) (ref.func $f0)) (func $f0) (func (export \"test\") (table.init 0 (i64.const 1) (i32.const 1) (f32.const 1)))) \"type mismatch\")",
    "(assert_invalid (module (table 10 funcref) (elem funcref (ref.func $f0) (ref.func $f0) (ref.func $f0)) (func $f0) (func (export \"test\") (table.init 0 (i64.const 1) (i32.const 1) (i64.const 1)))) \"type mismatch\")",
    "(assert_invalid (module (table 10 funcref) (elem funcref (ref.func $f0) (ref.func $f0) (ref.func $f0)) (func $f0) (func (export \"test\") (table.init 0 (i64.const 1) (i32.const 1) (f64.const 1)))) \"type mismatch\")",
    "(assert_invalid (module (table 10 funcref) (elem funcref (ref.func $f0) (ref.func $f0) (ref.func $f0)) (func $f0) (func (export \"test\") (table.init 0 (i64.const 1) (f32.const 1) (i32.const 1)))) \"type mismatch\")",
    "(assert_invalid (module (table 10 funcref) (elem funcref (ref.func $f0) (ref.func $f0) (ref.func $f0)) (func $f0) (func (export \"test\") (table.init 0 (i64.const 1) (f32.const 1) (f32.const 1)))) \"type mismatch\")",
    "(assert_invalid (module (table 10 funcref) (elem funcref (ref.func $f0) (ref.func $f0) (ref.func $f0)) (func $f0) (func (export \"test\") (table.init 0 (i64.const 1) (f32.const 1) (i64.const 1)))) \"type mismatch\")",
    "(assert_invalid (module (table 10 funcref) (elem funcref (ref.func $f0) (ref.func $f0) (ref.func $f0)) (func $f0) (func (export \"test\") (table.init 0 (i64.const 1) (f32.const 1) (f64.const 1)))) \"type mismatch\")",
    "(assert_invalid (module (table 10 funcref) (elem funcref (ref.func $f0) (ref.func $f0) (ref.func $f0)) (func $f0) (func (export \"test\") (table.init 0 (i64.const 1) (i64.const 1) (i32.const 1)))) \"type mismatch\")",
    "(assert_invalid (module (table 10 funcref) (elem funcref (ref.func $f0) (ref.func $f0) (ref.func $f0)) (func $f0) (func (export \"test\") (table.init 0 (i64.const 1) (i64.const 1) (f32.const 1)))) \"type mismatch\")",
    "(assert_invalid (module (table 10 funcref) (elem funcref (ref.func $f0) (ref.func $f0) (ref.func $f0)) (func $f0) (func (export \"test\") (table.init 0 (i64.const 1) (i64.const 1) (i64.const 1)))) \"type mismatch\")",
    "(assert_invalid (module (table 10 funcref) (elem funcref (ref.func $f0) (ref.func $f0) (ref.func $f0)) (func $f0) (func (export \"test\") (table.init 0 (i64.const 1) (i64.const 1) (f64.const 1)))) \"type mismatch\")",
    "(assert_invalid (module (table 10 funcref) (elem funcref (ref.func $f0) (ref.func $f0) (ref.func $f0)) (func $f0) (func (export \"test\") (table.init 0 (i64.const 1) (f64.const 1) (i32.const 1)))) \"type mismatch\")",
    "(assert_invalid (module (table 10 funcref) (elem funcref (ref.func $f0) (ref.func $f0) (ref.func $f0)) (func $f0) (func (export \"test\") (table.init 0 (i64.const 1) (f64.const 1) (f32.const 1)))) \"type mismatch\")",
    "(assert_invalid (module (table 10 funcref) (elem funcref (ref.func $f0) (ref.func $f0) (ref.func $f0)) (func $f0) (func (export \"test\") (table.init 0 (i64.const 1) (f64.const 1) (i64.const 1)))) \"type mismatch\")",
    "(assert_invalid (module (table 10 funcref) (elem funcref (ref.func $f0) (ref.func $f0) (ref.func $f0)) (func $f0) (func (export \"test\") (table.init 0 (i64.const 1) (f64.const 1) (f64.const 1)))) \"type mismatch\")",
    "(assert_invalid (module (table 10 funcref) (elem funcref (ref.func $f0) (ref.func $f0) (ref.func $f0)) (func $f0) (func (export \"test\") (table.init 0 (f64.const 1) (i32.const 1) (i32.const 1)))) \"type mismatch\")",
    "(assert_invalid (module (table 10 funcref) (elem funcref (ref.func $f0) (ref.func $f0) (ref.func $f0)) (func $f0) (func (export \"test\") (table.init 0 (f64.const 1) (i32.const 1) (f32.const 1)))) \"type mismatch\")",
    "(assert_invalid (module (table 10 funcref) (elem funcref (ref.func $f0) (ref.func $f0) (ref.func $f0)) (func $f0) (func (export \"test\") (table.init 0 (f64.const 1) (i32.const 1) (i64.const 1)))) \"type mismatch\")",
    "(assert_invalid (module (table 10 funcref) (elem funcref (ref.func $f0) (ref.func $f0) (ref.func $f0)) (func $f0) (func (export \"test\") (table.init 0 (f64.const 1) (i32.const 1) (f64.const 1)))) \"type mismatch\")",
    "(assert_invalid (module (table 10 funcref) (elem funcref (ref.func $f0) (ref.func $f0) (ref.func $f0)) (func $f0) (func (export \"test\") (table.init 0 (f64.const 1) (f32.const 1) (i32.const 1)))) \"type mismatch\")",
    "(assert_invalid (module (table 10 funcref) (elem funcref (ref.func $f0) (ref.func $f0) (ref.func $f0)) (func $f0) (func (export \"test\") (table.init 0 (f64.const 1) (f32.const 1) (f32.const 1)))) \"type mismatch\")",
    "(assert_invalid (module (table 10 funcref) (elem funcref (ref.func $f0) (ref.func $f0) (ref.func $f0)) (func $f0) (func (export \"test\") (table.init 0 (f64.const 1) (f32.const 1) (i64.const 1)))) \"type mismatch\")",
    "(assert_invalid (module (table 10 funcref) (elem funcref (ref.func $f0) (ref.func $f0) (ref.func $f0)) (func $f0) (func (export \"test\") (table.init 0 (f64.const 1) (f32.const 1) (f64.const 1)))) \"type mismatch\")",
    "(assert_invalid (module (table 10 funcref) (elem funcref (ref.func $f0) (ref.func $f0) (ref.func $f0)) (func $f0) (func (export \"test\") (table.init 0 (f64.const 1) (i64.const 1) (i32.const 1)))) \"type mismatch\")",
    "(assert_invalid (module (table 10 funcref) (elem funcref (ref.func $f0) (ref.func $f0) (ref.func $f0)) (func $f0) (func (export \"test\") (table.init 0 (f64.const 1) (i64.const 1) (f32.const 1)))) \"type mismatch\")",
    "(assert_invalid (module (table 10 funcref) (elem funcref (ref.func $f0) (ref.func $f0) (ref.func $f0)) (func $f0) (func (export \"test\") (table.init 0 (f64.const 1) (i64.const 1) (i64.const 1)))) \"type mismatch\")",
    "(assert_invalid (module (table 10 funcref) (elem funcref (ref.func $f0) (ref.func $f0) (ref.func $f0)) (func $f0) (func (export \"test\") (table.init 0 (f64.const 1) (i64.const 1) (f64.const 1)))) \"type mismatch\")",
    "(assert_invalid (module (table 10 funcref) (elem funcref (ref.func $f0) (ref.func $f0) (ref.func $f0)) (func $f0) (func (export \"test\") (table.init 0 (f64.const 1) (f64.const 1) (i32.const 1)))) \"type mismatch\")",
    "(assert_invalid (module (table 10 funcref) (elem funcref (ref.func $f0) (ref.func $f0) (ref.func $f0)) (func $f0) (func (export \"test\") (table.init 0 (f64.const 1) (f64.const 1) (f32.const 1)))) \"type mismatch\")",
    "(assert_invalid (module (table 10 funcref) (elem funcref (ref.func $f0) (ref.func $f0) (ref.func $f0)) (func $f0) (func (export \"test\") (table.init 0 (f64.const 1) (f64.const 1) (i64.const 1)))) \"type mismatch\")",
    "(assert_invalid (module (table 10 funcref) (elem funcref (ref.func $f0) (ref.func $f0) (ref.func $f0)) (func $f0) (func (export \"test\") (table.init 0 (f64.const 1) (f64.const 1) (f64.const 1)))) \"type mismatch\")",
    "(module (type (func (result i32))) (table 32 64 funcref) (elem funcref (ref.func $f0) (ref.func $f1) (ref.func $f2) (ref.func $f3) (ref.func $f4) (ref.func $f5) (ref.func $f6) (ref.func $f7) (ref.func $f8) (ref.func $f9) (ref.func $f10) (ref.func $f11) (ref.func $f12) (ref.func $f13) (ref.func $f14) (ref.func $f15))\n  (func $f0 (export \"f0\") (result i32) (i32.const 0))\n  (func $f1 (export \"f1\") (result i32) (i32.const 1))\n  (func $f2 (export \"f2\") (result i32) (i32.const 2))\n  (func $f3 (export \"f3\") (result i32) (i32.const 3))\n  (func $f4 (export \"f4\") (result i32) (i32.const 4))\n  (func $f5 (export \"f5\") (result i32) (i32.const 5))\n  (func $f6 (export \"f6\") (result i32) (i32.const 6))\n  (func $f7 (export \"f7\") (result i32) (i32.const 7))\n  (func $f8 (export \"f8\") (result i32) (i32.const 8))\n  (func $f9 (export \"f9\") (result i32) (i32.const 9))\n  (func $f10 (export \"f10\") (result i32) (i32.const 10))\n  (func $f11 (export \"f11\") (result i32) (i32.const 11))\n  (func $f12 (export \"f12\") (result i32) (i32.const 12))\n  (func $f13 (export \"f13\") (result i32) (i32.const 13))\n  (func $f14 (export \"f14\") (result i32) (i32.const 14))\n  (func $f15 (export \"f15\") (result i32) (i32.const 15))\n  (func (export \"test\") (param $n i32) (result i32) (call_indirect (type 0) (local.get $n)))\n  (func (export \"run\") (param $offs i32) (param $len i32) (table.init 0 (local.get $offs) (i32.const 0) (local.get $len))))",
    "(assert_trap (invoke \"run\" (i32.const 24) (i32.const 16)) \"out of bounds table access\")",
    "(assert_trap (invoke \"test\" (i32.const 0)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 1)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 2)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 3)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 4)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 5)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 6)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 7)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 8)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 9)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 10)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 11)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 12)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 13)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 14)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 15)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 16)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 17)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 18)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 19)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 20)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 21)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 22)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 23)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 24)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 25)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 26)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 27)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 28)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 29)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 30)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 31)) \"uninitialized element\")",
    "(module (type (func (result i32))) (table 32 64 funcref) (elem funcref (ref.func $f0) (ref.func $f1) (ref.func $f2) (ref.func $f3) (ref.func $f4) (ref.func $f5) (ref.func $f6) (ref.func $f7) (ref.func $f8) (ref.func $f9) (ref.func $f10) (ref.func $f11) (ref.func $f12) (ref.func $f13) (ref.func $f14) (ref.func $f15))\n  (func $f0 (export \"f0\") (result i32) (i32.const 0))\n  (func $f1 (export \"f1\") (result i32) (i32.const 1))\n  (func $f2 (export \"f2\") (result i32) (i32.const 2))\n  (func $f3 (export \"f3\") (result i32) (i32.const 3))\n  (func $f4 (export \"f4\") (result i32) (i32.const 4))\n  (func $f5 (export \"f5\") (result i32) (i32.const 5))\n  (func $f6 (export \"f6\") (result i32) (i32.const 6))\n  (func $f7 (export \"f7\") (result i32) (i32.const 7))\n  (func $f8 (export \"f8\") (result i32) (i32.const 8))\n  (func $f9 (export \"f9\") (result i32) (i32.const 9))\n  (func $f10 (export \"f10\") (result i32) (i32.const 10))\n  (func $f11 (export \"f11\") (result i32) (i32.const 11))\n  (func $f12 (export \"f12\") (result i32) (i32.const 12))\n  (func $f13 (export \"f13\") (result i32) (i32.const 13))\n  (func $f14 (export \"f14\") (result i32) (i32.const 14))\n  (func $f15 (export \"f15\") (result i32) (i32.const 15))\n  (func (export \"test\") (param $n i32) (result i32) (call_indirect (type 0) (local.get $n)))\n  (func (export \"run\") (param $offs i32) (param $len i32) (table.init 0 (local.get $offs) (i32.const 0) (local.get $len))))",
    "(assert_trap (invoke \"run\" (i32.const 25) (i32.const 16)) \"out of bounds table access\")",
    "(assert_trap (invoke \"test\" (i32.const 0)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 1)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 2)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 3)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 4)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 5)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 6)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 7)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 8)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 9)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 10)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 11)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 12)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 13)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 14)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 15)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 16)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 17)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 18)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 19)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 20)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 21)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 22)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 23)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 24)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 25)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 26)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 27)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 28)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 29)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 30)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 31)) \"uninitialized element\")",
    "(module (type (func (result i32))) (table 160 320 funcref) (elem funcref (ref.func $f0) (ref.func $f1) (ref.func $f2) (ref.func $f3) (ref.func $f4) (ref.func $f5) (ref.func $f6) (ref.func $f7) (ref.func $f8) (ref.func $f9) (ref.func $f10) (ref.func $f11) (ref.func $f12) (ref.func $f13) (ref.func $f14) (ref.func $f15))\n  (func $f0 (export \"f0\") (result i32) (i32.const 0))\n  (func $f1 (export \"f1\") (result i32) (i32.const 1))\n  (func $f2 (export \"f2\") (result i32) (i32.const 2))\n  (func $f3 (export \"f3\") (result i32) (i32.const 3))\n  (func $f4 (export \"f4\") (result i32) (i32.const 4))\n  (func $f5 (export \"f5\") (result i32) (i32.const 5))\n  (func $f6 (export \"f6\") (result i32) (i32.const 6))\n  (func $f7 (export \"f7\") (result i32) (i32.const 7))\n  (func $f8 (export \"f8\") (result i32) (i32.const 8))\n  (func $f9 (export \"f9\") (result i32) (i32.const 9))\n  (func $f10 (export \"f10\") (result i32) (i32.const 10))\n  (func $f11 (export \"f11\") (result i32) (i32.const 11))\n  (func $f12 (export \"f12\") (result i32) (i32.const 12))\n  (func $f13 (export \"f13\") (result i32) (i32.const 13))\n  (func $f14 (export \"f14\") (result i32) (i32.const 14))\n  (func $f15 (export \"f15\") (result i32) (i32.const 15))\n  (func (export \"test\") (param $n i32) (result i32) (call_indirect (type 0) (local.get $n)))\n  (func (export \"run\") (param $offs i32) (param $len i32) (table.init 0 (local.get $offs) (i32.const 0) (local.get $len))))",
    "(assert_trap (invoke \"run\" (i32.const 96) (i32.const 32)) \"out of bounds table access\")",
    "(assert_trap (invoke \"test\" (i32.const 0)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 1)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 2)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 3)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 4)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 5)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 6)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 7)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 8)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 9)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 10)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 11)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 12)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 13)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 14)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 15)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 16)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 17)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 18)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 19)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 20)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 21)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 22)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 23)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 24)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 25)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 26)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 27)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 28)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 29)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 30)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 31)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 32)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 33)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 34)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 35)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 36)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 37)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 38)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 39)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 40)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 41)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 42)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 43)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 44)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 45)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 46)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 47)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 48)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 49)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 50)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 51)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 52)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 53)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 54)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 55)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 56)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 57)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 58)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 59)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 60)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 61)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 62)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 63)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 64)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 65)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 66)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 67)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 68)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 69)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 70)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 71)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 72)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 73)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 74)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 75)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 76)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 77)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 78)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 79)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 80)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 81)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 82)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 83)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 84)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 85)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 86)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 87)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 88)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 89)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 90)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 91)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 92)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 93)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 94)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 95)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 96)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 97)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 98)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 99)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 100)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 101)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 102)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 103)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 104)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 105)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 106)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 107)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 108)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 109)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 110)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 111)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 112)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 113)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 114)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 115)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 116)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 117)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 118)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 119)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 120)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 121)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 122)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 123)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 124)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 125)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 126)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 127)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 128)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 129)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 130)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 131)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 132)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 133)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 134)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 135)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 136)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 137)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 138)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 139)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 140)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 141)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 142)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 143)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 144)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 145)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 146)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 147)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 148)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 149)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 150)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 151)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 152)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 153)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 154)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 155)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 156)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 157)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 158)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 159)) \"uninitialized element\")",
    "(module (type (func (result i32))) (table 160 320 funcref) (elem funcref (ref.func $f0) (ref.func $f1) (ref.func $f2) (ref.func $f3) (ref.func $f4) (ref.func $f5) (ref.func $f6) (ref.func $f7) (ref.func $f8) (ref.func $f9) (ref.func $f10) (ref.func $f11) (ref.func $f12) (ref.func $f13) (ref.func $f14) (ref.func $f15))\n  (func $f0 (export \"f0\") (result i32) (i32.const 0))\n  (func $f1 (export \"f1\") (result i32) (i32.const 1))\n  (func $f2 (export \"f2\") (result i32) (i32.const 2))\n  (func $f3 (export \"f3\") (result i32) (i32.const 3))\n  (func $f4 (export \"f4\") (result i32) (i32.const 4))\n  (func $f5 (export \"f5\") (result i32) (i32.const 5))\n  (func $f6 (export \"f6\") (result i32) (i32.const 6))\n  (func $f7 (export \"f7\") (result i32) (i32.const 7))\n  (func $f8 (export \"f8\") (result i32) (i32.const 8))\n  (func $f9 (export \"f9\") (result i32) (i32.const 9))\n  (func $f10 (export \"f10\") (result i32) (i32.const 10))\n  (func $f11 (export \"f11\") (result i32) (i32.const 11))\n  (func $f12 (export \"f12\") (result i32) (i32.const 12))\n  (func $f13 (export \"f13\") (result i32) (i32.const 13))\n  (func $f14 (export \"f14\") (result i32) (i32.const 14))\n  (func $f15 (export \"f15\") (result i32) (i32.const 15))\n  (func (export \"test\") (param $n i32) (result i32) (call_indirect (type 0) (local.get $n)))\n  (func (export \"run\") (param $offs i32) (param $len i32) (table.init 0 (local.get $offs) (i32.const 0) (local.get $len))))",
    "(assert_trap (invoke \"run\" (i32.const 97) (i32.const 31)) \"out of bounds table access\")",
    "(assert_trap (invoke \"test\" (i32.const 0)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 1)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 2)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 3)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 4)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 5)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 6)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 7)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 8)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 9)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 10)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 11)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 12)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 13)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 14)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 15)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 16)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 17)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 18)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 19)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 20)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 21)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 22)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 23)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 24)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 25)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 26)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 27)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 28)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 29)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 30)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 31)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 32)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 33)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 34)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 35)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 36)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 37)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 38)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 39)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 40)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 41)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 42)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 43)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 44)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 45)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 46)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 47)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 48)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 49)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 50)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 51)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 52)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 53)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 54)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 55)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 56)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 57)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 58)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 59)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 60)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 61)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 62)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 63)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 64)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 65)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 66)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 67)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 68)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 69)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 70)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 71)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 72)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 73)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 74)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 75)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 76)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 77)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 78)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 79)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 80)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 81)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 82)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 83)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 84)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 85)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 86)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 87)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 88)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 89)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 90)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 91)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 92)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 93)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 94)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 95)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 96)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 97)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 98)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 99)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 100)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 101)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 102)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 103)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 104)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 105)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 106)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 107)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 108)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 109)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 110)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 111)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 112)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 113)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 114)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 115)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 116)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 117)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 118)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 119)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 120)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 121)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 122)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 123)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 124)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 125)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 126)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 127)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 128)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 129)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 130)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 131)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 132)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 133)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 134)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 135)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 136)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 137)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 138)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 139)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 140)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 141)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 142)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 143)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 144)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 145)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 146)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 147)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 148)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 149)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 150)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 151)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 152)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 153)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 154)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 155)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 156)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 157)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 158)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 159)) \"uninitialized element\")",
    "(module (type (func (result i32))) (table 64 64 funcref) (elem funcref (ref.func $f0) (ref.func $f1) (ref.func $f2) (ref.func $f3) (ref.func $f4) (ref.func $f5) (ref.func $f6) (ref.func $f7) (ref.func $f8) (ref.func $f9) (ref.func $f10) (ref.func $f11) (ref.func $f12) (ref.func $f13) (ref.func $f14) (ref.func $f15))\n  (func $f0 (export \"f0\") (result i32) (i32.const 0))\n  (func $f1 (export \"f1\") (result i32) (i32.const 1))\n  (func $f2 (export \"f2\") (result i32) (i32.const 2))\n  (func $f3 (export \"f3\") (result i32) (i32.const 3))\n  (func $f4 (export \"f4\") (result i32) (i32.const 4))\n  (func $f5 (export \"f5\") (result i32) (i32.const 5))\n  (func $f6 (export \"f6\") (result i32) (i32.const 6))\n  (func $f7 (export \"f7\") (result i32) (i32.const 7))\n  (func $f8 (export \"f8\") (result i32) (i32.const 8))\n  (func $f9 (export \"f9\") (result i32) (i32.const 9))\n  (func $f10 (export \"f10\") (result i32) (i32.const 10))\n  (func $f11 (export \"f11\") (result i32) (i32.const 11))\n  (func $f12 (export \"f12\") (result i32) (i32.const 12))\n  (func $f13 (export \"f13\") (result i32) (i32.const 13))\n  (func $f14 (export \"f14\") (result i32) (i32.const 14))\n  (func $f15 (export \"f15\") (result i32) (i32.const 15))\n  (func (export \"test\") (param $n i32) (result i32) (call_indirect (type 0) (local.get $n)))\n  (func (export \"run\") (param $offs i32) (param $len i32) (table.init 0 (local.get $offs) (i32.const 0) (local.get $len))))",
    "(assert_trap (invoke \"run\" (i32.const 48) (i32.const 4294967280)) \"out of bounds table access\")",
    "(assert_trap (invoke \"test\" (i32.const 0)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 1)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 2)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 3)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 4)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 5)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 6)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 7)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 8)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 9)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 10)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 11)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 12)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 13)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 14)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 15)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 16)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 17)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 18)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 19)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 20)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 21)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 22)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 23)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 24)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 25)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 26)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 27)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 28)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 29)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 30)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 31)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 32)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 33)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 34)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 35)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 36)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 37)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 38)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 39)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 40)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 41)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 42)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 43)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 44)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 45)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 46)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 47)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 48)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 49)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 50)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 51)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 52)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 53)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 54)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 55)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 56)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 57)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 58)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 59)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 60)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 61)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 62)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 63)) \"uninitialized element\")",
    "(module (type (func (result i32))) (table 16 16 funcref) (elem funcref (ref.func $f0) (ref.func $f1) (ref.func $f2) (ref.func $f3) (ref.func $f4) (ref.func $f5) (ref.func $f6) (ref.func $f7) (ref.func $f8) (ref.func $f9) (ref.func $f10) (ref.func $f11) (ref.func $f12) (ref.func $f13) (ref.func $f14) (ref.func $f15))\n  (func $f0 (export \"f0\") (result i32) (i32.const 0))\n  (func $f1 (export \"f1\") (result i32) (i32.const 1))\n  (func $f2 (export \"f2\") (result i32) (i32.const 2))\n  (func $f3 (export \"f3\") (result i32) (i32.const 3))\n  (func $f4 (export \"f4\") (result i32) (i32.const 4))\n  (func $f5 (export \"f5\") (result i32) (i32.const 5))\n  (func $f6 (export \"f6\") (result i32) (i32.const 6))\n  (func $f7 (export \"f7\") (result i32) (i32.const 7))\n  (func $f8 (export \"f8\") (result i32) (i32.const 8))\n  (func $f9 (export \"f9\") (result i32) (i32.const 9))\n  (func $f10 (export \"f10\") (result i32) (i32.const 10))\n  (func $f11 (export \"f11\") (result i32) (i32.const 11))\n  (func $f12 (export \"f12\") (result i32) (i32.const 12))\n  (func $f13 (export \"f13\") (result i32) (i32.const 13))\n  (func $f14 (export \"f14\") (result i32) (i32.const 14))\n  (func $f15 (export \"f15\") (result i32) (i32.const 15))\n  (func (export \"test\") (param $n i32) (result i32) (call_indirect (type 0) (local.get $n)))\n  (func (export \"run\") (param $offs i32) (param $len i32) (table.init 0 (local.get $offs) (i32.const 8) (local.get $len))))",
    "(assert_trap (invoke \"run\" (i32.const 0) (i32.const 4294967292)) \"out of bounds table access\")",
    "(assert_trap (invoke \"test\" (i32.const 0)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 1)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 2)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 3)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 4)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 5)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 6)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 7)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 8)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 9)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 10)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 11)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 12)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 13)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 14)) \"uninitialized element\")",
    "(assert_trap (invoke \"test\" (i32.const 15)) \"uninitialized element\")",
    "(module (table 1 funcref) (elem funcref) (elem funcref) (elem funcref) (elem funcref) (elem funcref) (elem funcref) (elem funcref) (elem funcref) (elem funcref) (elem funcref) (elem funcref) (elem funcref) (elem funcref) (elem funcref) (elem funcref) (elem funcref) (elem funcref) (elem funcref) (elem funcref) (elem funcref) (elem funcref) (elem funcref) (elem funcref) (elem funcref) (elem funcref) (elem funcref) (elem funcref) (elem funcref) (elem funcref) (elem funcref) (elem funcref) (elem funcref) (elem funcref) (elem funcref) (elem funcref) (elem funcref) (elem funcref) (elem funcref) (elem funcref) (elem funcref) (elem funcref) (elem funcref) (elem funcref) (elem funcref) (elem funcref) (elem funcref) (elem funcref) (elem funcref) (elem funcref) (elem funcref) (elem funcref) (elem funcref) (elem funcref) (elem funcref) (elem funcref) (elem funcref) (elem funcref) (elem funcref) (elem funcref) (elem funcref) (elem funcref) (elem funcref) (elem funcref) (elem funcref) (elem funcref)\n  (func (table.init 64 (i32.const 0) (i32.const 0) (i32.const 0))))"
  ],
  "dump": {
    "table_init.0.wasm": {
      "header": "\ntable_init.0.wasm:\tfile format wasm 0x1\n\nSections:\n\n     Type start=0x0000000a end=0x0000000f (size=0x00000005) count: 1\n Function start=0x00000011 end=0x00000017 (size=0x00000006) count: 5\n   Export start=0x00000019 end=0x00000038 (size=0x0000001f) count: 5\n     Code start=0x0000003a end=0x00000054 (size=0x0000001a) count: 5\n",
      "details": "\ntable_init.0.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nType[1]:\n - type[0] () -> i32\nFunction[5]:\n - func[0] sig=0 <ef0>\n - func[1] sig=0 <ef1>\n - func[2] sig=0 <ef2>\n - func[3] sig=0 <ef3>\n - func[4] sig=0 <ef4>\nExport[5]:\n - func[0] <ef0> -> \"ef0\"\n - func[1] <ef1> -> \"ef1\"\n - func[2] <ef2> -> \"ef2\"\n - func[3] <ef3> -> \"ef3\"\n - func[4] <ef4> -> \"ef4\"\nCode[5]:\n - func[0] size=4 <ef0>\n - func[1] size=4 <ef1>\n - func[2] size=4 <ef2>\n - func[3] size=4 <ef3>\n - func[4] size=4 <ef4>\n",
      "disassemble": "\ntable_init.0.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n00003c func[0] <ef0>:\n 00003d: 41 00                      | i32.const 0\n 00003f: 0b                         | end\n000041 func[1] <ef1>:\n 000042: 41 01                      | i32.const 1\n 000044: 0b                         | end\n000046 func[2] <ef2>:\n 000047: 41 02                      | i32.const 2\n 000049: 0b                         | end\n00004b func[3] <ef3>:\n 00004c: 41 03                      | i32.const 3\n 00004e: 0b                         | end\n000050 func[4] <ef4>:\n 000051: 41 04                      | i32.const 4\n 000053: 0b                         | end\n"
    },
    "table_init.1.wasm": {
      "header": "\ntable_init.1.wasm:\tfile format wasm 0x1\n\nSections:\n\n     Type start=0x0000000a end=0x00000017 (size=0x0000000d) count: 3\n   Import start=0x00000019 end=0x00000042 (size=0x00000029) count: 5\n Function start=0x00000044 end=0x0000004c (size=0x00000008) count: 7\n    Table start=0x0000004e end=0x00000057 (size=0x00000009) count: 2\n   Export start=0x00000059 end=0x00000069 (size=0x00000010) count: 2\n     Elem start=0x0000006b end=0x0000008e (size=0x00000023) count: 4\n     Code start=0x00000090 end=0x000000bf (size=0x0000002f) count: 7\n",
      "details": "\ntable_init.1.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nType[3]:\n - type[0] () -> i32\n - type[1] () -> nil\n - type[2] (i32) -> i32\nImport[5]:\n - func[0] sig=0 <a.ef0> <- a.ef0\n - func[1] sig=0 <a.ef1> <- a.ef1\n - func[2] sig=0 <a.ef2> <- a.ef2\n - func[3] sig=0 <a.ef3> <- a.ef3\n - func[4] sig=0 <a.ef4> <- a.ef4\nFunction[7]:\n - func[5] sig=0\n - func[6] sig=0\n - func[7] sig=0\n - func[8] sig=0\n - func[9] sig=0\n - func[10] sig=1 <test>\n - func[11] sig=2 <check>\nTable[2]:\n - table[0] type=funcref initial=30 max=30\n - table[1] type=funcref initial=30 max=30\nExport[2]:\n - func[10] <test> -> \"test\"\n - func[11] <check> -> \"check\"\nElem[4]:\n - segment[0] flags=0 table=0 count=4 - init i32=2\n  - elem[2] = ref.func:3 <a.ef3>\n  - elem[3] = ref.func:1 <a.ef1>\n  - elem[4] = ref.func:4 <a.ef4>\n  - elem[5] = ref.func:1 <a.ef1>\n - segment[1] flags=1 table=0 count=4\n  - elem[2] = ref.func:2 <a.ef2>\n  - elem[3] = ref.func:7\n  - elem[4] = ref.func:1 <a.ef1>\n  - elem[5] = ref.func:8\n - segment[2] flags=0 table=0 count=5 - init i32=12\n  - elem[12] = ref.func:7\n  - elem[13] = ref.func:5\n  - elem[14] = ref.func:2 <a.ef2>\n  - elem[15] = ref.func:3 <a.ef3>\n  - elem[16] = ref.func:6\n - segment[3] flags=1 table=0 count=5\n  - elem[12] = ref.func:5\n  - elem[13] = ref.func:9\n  - elem[14] = ref.func:2 <a.ef2>\n  - elem[15] = ref.func:7\n  - elem[16] = ref.func:6\nCode[7]:\n - func[5] size=4\n - func[6] size=4\n - func[7] size=4\n - func[8] size=4\n - func[9] size=4\n - func[10] size=12 <test>\n - func[11] size=7 <check>\n",
      "disassemble": "\ntable_init.1.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n000092 func[5]:\n 000093: 41 05                      | i32.const 5\n 000095: 0b                         | end\n000097 func[6]:\n 000098: 41 06                      | i32.const 6\n 00009a: 0b                         | end\n00009c func[7]:\n 00009d: 41 07                      | i32.const 7\n 00009f: 0b                         | end\n0000a1 func[8]:\n 0000a2: 41 08                      | i32.const 8\n 0000a4: 0b                         | end\n0000a6 func[9]:\n 0000a7: 41 09                      | i32.const 9\n 0000a9: 0b                         | end\n0000ab func[10] <test>:\n 0000ac: 41 07                      | i32.const 7\n 0000ae: 41 00                      | i32.const 0\n 0000b0: 41 04                      | i32.const 4\n 0000b2: fc 0c 01 00                | table.init 1 0\n 0000b6: 0b                         | end\n0000b8 func[11] <check>:\n 0000b9: 20 00                      | local.get 0\n 0000bb: 11 00 00                   | call_indirect 0 (type 0)\n 0000be: 0b                         | end\n"
    },
    "table_init.2.wasm": {
      "header": "\ntable_init.2.wasm:\tfile format wasm 0x1\n\nSections:\n\n     Type start=0x0000000a end=0x00000017 (size=0x0000000d) count: 3\n   Import start=0x00000019 end=0x00000042 (size=0x00000029) count: 5\n Function start=0x00000044 end=0x0000004c (size=0x00000008) count: 7\n    Table start=0x0000004e end=0x00000057 (size=0x00000009) count: 2\n   Export start=0x00000059 end=0x00000069 (size=0x00000010) count: 2\n     Elem start=0x0000006b end=0x0000008e (size=0x00000023) count: 4\n     Code start=0x00000090 end=0x000000bf (size=0x0000002f) count: 7\n",
      "details": "\ntable_init.2.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nType[3]:\n - type[0] () -> i32\n - type[1] () -> nil\n - type[2] (i32) -> i32\nImport[5]:\n - func[0] sig=0 <a.ef0> <- a.ef0\n - func[1] sig=0 <a.ef1> <- a.ef1\n - func[2] sig=0 <a.ef2> <- a.ef2\n - func[3] sig=0 <a.ef3> <- a.ef3\n - func[4] sig=0 <a.ef4> <- a.ef4\nFunction[7]:\n - func[5] sig=0\n - func[6] sig=0\n - func[7] sig=0\n - func[8] sig=0\n - func[9] sig=0\n - func[10] sig=1 <test>\n - func[11] sig=2 <check>\nTable[2]:\n - table[0] type=funcref initial=30 max=30\n - table[1] type=funcref initial=30 max=30\nExport[2]:\n - func[10] <test> -> \"test\"\n - func[11] <check> -> \"check\"\nElem[4]:\n - segment[0] flags=0 table=0 count=4 - init i32=2\n  - elem[2] = ref.func:3 <a.ef3>\n  - elem[3] = ref.func:1 <a.ef1>\n  - elem[4] = ref.func:4 <a.ef4>\n  - elem[5] = ref.func:1 <a.ef1>\n - segment[1] flags=1 table=0 count=4\n  - elem[2] = ref.func:2 <a.ef2>\n  - elem[3] = ref.func:7\n  - elem[4] = ref.func:1 <a.ef1>\n  - elem[5] = ref.func:8\n - segment[2] flags=0 table=0 count=5 - init i32=12\n  - elem[12] = ref.func:7\n  - elem[13] = ref.func:5\n  - elem[14] = ref.func:2 <a.ef2>\n  - elem[15] = ref.func:3 <a.ef3>\n  - elem[16] = ref.func:6\n - segment[3] flags=1 table=0 count=5\n  - elem[12] = ref.func:5\n  - elem[13] = ref.func:9\n  - elem[14] = ref.func:2 <a.ef2>\n  - elem[15] = ref.func:7\n  - elem[16] = ref.func:6\nCode[7]:\n - func[5] size=4\n - func[6] size=4\n - func[7] size=4\n - func[8] size=4\n - func[9] size=4\n - func[10] size=12 <test>\n - func[11] size=7 <check>\n",
      "disassemble": "\ntable_init.2.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n000092 func[5]:\n 000093: 41 05                      | i32.const 5\n 000095: 0b                         | end\n000097 func[6]:\n 000098: 41 06                      | i32.const 6\n 00009a: 0b                         | end\n00009c func[7]:\n 00009d: 41 07                      | i32.const 7\n 00009f: 0b                         | end\n0000a1 func[8]:\n 0000a2: 41 08                      | i32.const 8\n 0000a4: 0b                         | end\n0000a6 func[9]:\n 0000a7: 41 09                      | i32.const 9\n 0000a9: 0b                         | end\n0000ab func[10] <test>:\n 0000ac: 41 0f                      | i32.const 15\n 0000ae: 41 01                      | i32.const 1\n 0000b0: 41 03                      | i32.const 3\n 0000b2: fc 0c 03 00                | table.init 3 0\n 0000b6: 0b                         | end\n0000b8 func[11] <check>:\n 0000b9: 20 00                      | local.get 0\n 0000bb: 11 00 00                   | call_indirect 0 (type 0)\n 0000be: 0b                         | end\n"
    },
    "table_init.3.wasm": {
      "header": "\ntable_init.3.wasm:\tfile format wasm 0x1\n\nSections:\n\n     Type start=0x0000000a end=0x00000017 (size=0x0000000d) count: 3\n   Import start=0x00000019 end=0x00000042 (size=0x00000029) count: 5\n Function start=0x00000044 end=0x0000004c (size=0x00000008) count: 7\n    Table start=0x0000004e end=0x00000057 (size=0x00000009) count: 2\n   Export start=0x00000059 end=0x00000069 (size=0x00000010) count: 2\n     Elem start=0x0000006b end=0x0000008e (size=0x00000023) count: 4\n     Code start=0x00000090 end=0x00000101 (size=0x00000071) count: 7\n",
      "details": "\ntable_init.3.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nType[3]:\n - type[0] () -> i32\n - type[1] () -> nil\n - type[2] (i32) -> i32\nImport[5]:\n - func[0] sig=0 <a.ef0> <- a.ef0\n - func[1] sig=0 <a.ef1> <- a.ef1\n - func[2] sig=0 <a.ef2> <- a.ef2\n - func[3] sig=0 <a.ef3> <- a.ef3\n - func[4] sig=0 <a.ef4> <- a.ef4\nFunction[7]:\n - func[5] sig=0\n - func[6] sig=0\n - func[7] sig=0\n - func[8] sig=0\n - func[9] sig=0\n - func[10] sig=1 <test>\n - func[11] sig=2 <check>\nTable[2]:\n - table[0] type=funcref initial=30 max=30\n - table[1] type=funcref initial=30 max=30\nExport[2]:\n - func[10] <test> -> \"test\"\n - func[11] <check> -> \"check\"\nElem[4]:\n - segment[0] flags=0 table=0 count=4 - init i32=2\n  - elem[2] = ref.func:3 <a.ef3>\n  - elem[3] = ref.func:1 <a.ef1>\n  - elem[4] = ref.func:4 <a.ef4>\n  - elem[5] = ref.func:1 <a.ef1>\n - segment[1] flags=1 table=0 count=4\n  - elem[2] = ref.func:2 <a.ef2>\n  - elem[3] = ref.func:7\n  - elem[4] = ref.func:1 <a.ef1>\n  - elem[5] = ref.func:8\n - segment[2] flags=0 table=0 count=5 - init i32=12\n  - elem[12] = ref.func:7\n  - elem[13] = ref.func:5\n  - elem[14] = ref.func:2 <a.ef2>\n  - elem[15] = ref.func:3 <a.ef3>\n  - elem[16] = ref.func:6\n - segment[3] flags=1 table=0 count=5\n  - elem[12] = ref.func:5\n  - elem[13] = ref.func:9\n  - elem[14] = ref.func:2 <a.ef2>\n  - elem[15] = ref.func:7\n  - elem[16] = ref.func:6\nCode[7]:\n - func[5] size=4\n - func[6] size=4\n - func[7] size=4\n - func[8] size=4\n - func[9] size=4\n - func[10] size=78 <test>\n - func[11] size=7 <check>\n",
      "disassemble": "\ntable_init.3.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n000092 func[5]:\n 000093: 41 05                      | i32.const 5\n 000095: 0b                         | end\n000097 func[6]:\n 000098: 41 06                      | i32.const 6\n 00009a: 0b                         | end\n00009c func[7]:\n 00009d: 41 07                      | i32.const 7\n 00009f: 0b                         | end\n0000a1 func[8]:\n 0000a2: 41 08                      | i32.const 8\n 0000a4: 0b                         | end\n0000a6 func[9]:\n 0000a7: 41 09                      | i32.const 9\n 0000a9: 0b                         | end\n0000ab func[10] <test>:\n 0000ac: 41 07                      | i32.const 7\n 0000ae: 41 00                      | i32.const 0\n 0000b0: 41 04                      | i32.const 4\n 0000b2: fc 0c 01 00                | table.init 1 0\n 0000b6: fc 0d 01                   | elem.drop 1\n 0000b9: 41 0f                      | i32.const 15\n 0000bb: 41 01                      | i32.const 1\n 0000bd: 41 03                      | i32.const 3\n 0000bf: fc 0c 03 00                | table.init 3 0\n 0000c3: fc 0d 03                   | elem.drop 3\n 0000c6: 41 14                      | i32.const 20\n 0000c8: 41 0f                      | i32.const 15\n 0000ca: 41 05                      | i32.const 5\n 0000cc: fc 0e 00 00                | table.copy 0 0\n 0000d0: 41 15                      | i32.const 21\n 0000d2: 41 1d                      | i32.const 29\n 0000d4: 41 01                      | i32.const 1\n 0000d6: fc 0e 00 00                | table.copy 0 0\n 0000da: 41 18                      | i32.const 24\n 0000dc: 41 0a                      | i32.const 10\n 0000de: 41 01                      | i32.const 1\n 0000e0: fc 0e 00 00                | table.copy 0 0\n 0000e4: 41 0d                      | i32.const 13\n 0000e6: 41 0b                      | i32.const 11\n 0000e8: 41 04                      | i32.const 4\n 0000ea: fc 0e 00 00                | table.copy 0 0\n 0000ee: 41 13                      | i32.const 19\n 0000f0: 41 14                      | i32.const 20\n 0000f2: 41 05                      | i32.const 5\n 0000f4: fc 0e 00 00                | table.copy 0 0\n 0000f8: 0b                         | end\n0000fa func[11] <check>:\n 0000fb: 20 00                      | local.get 0\n 0000fd: 11 00 00                   | call_indirect 0 (type 0)\n 000100: 0b                         | end\n"
    },
    "table_init.4.wasm": {
      "header": "\ntable_init.4.wasm:\tfile format wasm 0x1\n\nSections:\n\n     Type start=0x0000000a end=0x00000017 (size=0x0000000d) count: 3\n   Import start=0x00000019 end=0x00000042 (size=0x00000029) count: 5\n Function start=0x00000044 end=0x0000004c (size=0x00000008) count: 7\n    Table start=0x0000004e end=0x00000057 (size=0x00000009) count: 2\n   Export start=0x00000059 end=0x00000069 (size=0x00000010) count: 2\n     Elem start=0x0000006b end=0x00000092 (size=0x00000027) count: 4\n     Code start=0x00000094 end=0x000000c3 (size=0x0000002f) count: 7\n",
      "details": "\ntable_init.4.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nType[3]:\n - type[0] () -> i32\n - type[1] () -> nil\n - type[2] (i32) -> i32\nImport[5]:\n - func[0] sig=0 <a.ef0> <- a.ef0\n - func[1] sig=0 <a.ef1> <- a.ef1\n - func[2] sig=0 <a.ef2> <- a.ef2\n - func[3] sig=0 <a.ef3> <- a.ef3\n - func[4] sig=0 <a.ef4> <- a.ef4\nFunction[7]:\n - func[5] sig=0\n - func[6] sig=0\n - func[7] sig=0\n - func[8] sig=0\n - func[9] sig=0\n - func[10] sig=1 <test>\n - func[11] sig=2 <check>\nTable[2]:\n - table[0] type=funcref initial=30 max=30\n - table[1] type=funcref initial=30 max=30\nExport[2]:\n - func[10] <test> -> \"test\"\n - func[11] <check> -> \"check\"\nElem[4]:\n - segment[0] flags=2 table=1 count=4 - init i32=2\n  - elem[2] = ref.func:3 <a.ef3>\n  - elem[3] = ref.func:1 <a.ef1>\n  - elem[4] = ref.func:4 <a.ef4>\n  - elem[5] = ref.func:1 <a.ef1>\n - segment[1] flags=1 table=0 count=4\n  - elem[2] = ref.func:2 <a.ef2>\n  - elem[3] = ref.func:7\n  - elem[4] = ref.func:1 <a.ef1>\n  - elem[5] = ref.func:8\n - segment[2] flags=2 table=1 count=5 - init i32=12\n  - elem[12] = ref.func:7\n  - elem[13] = ref.func:5\n  - elem[14] = ref.func:2 <a.ef2>\n  - elem[15] = ref.func:3 <a.ef3>\n  - elem[16] = ref.func:6\n - segment[3] flags=1 table=0 count=5\n  - elem[12] = ref.func:5\n  - elem[13] = ref.func:9\n  - elem[14] = ref.func:2 <a.ef2>\n  - elem[15] = ref.func:7\n  - elem[16] = ref.func:6\nCode[7]:\n - func[5] size=4\n - func[6] size=4\n - func[7] size=4\n - func[8] size=4\n - func[9] size=4\n - func[10] size=12 <test>\n - func[11] size=7 <check>\n",
      "disassemble": "\ntable_init.4.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n000096 func[5]:\n 000097: 41 05                      | i32.const 5\n 000099: 0b                         | end\n00009b func[6]:\n 00009c: 41 06                      | i32.const 6\n 00009e: 0b                         | end\n0000a0 func[7]:\n 0000a1: 41 07                      | i32.const 7\n 0000a3: 0b                         | end\n0000a5 func[8]:\n 0000a6: 41 08                      | i32.const 8\n 0000a8: 0b                         | end\n0000aa func[9]:\n 0000ab: 41 09                      | i32.const 9\n 0000ad: 0b                         | end\n0000af func[10] <test>:\n 0000b0: 41 07                      | i32.const 7\n 0000b2: 41 00                      | i32.const 0\n 0000b4: 41 04                      | i32.const 4\n 0000b6: fc 0c 01 01                | table.init 1 1\n 0000ba: 0b                         | end\n0000bc func[11] <check>:\n 0000bd: 20 00                      | local.get 0\n 0000bf: 11 00 01                   | call_indirect 1 (type 0)\n 0000c2: 0b                         | end\n"
    },
    "table_init.5.wasm": {
      "header": "\ntable_init.5.wasm:\tfile format wasm 0x1\n\nSections:\n\n     Type start=0x0000000a end=0x00000017 (size=0x0000000d) count: 3\n   Import start=0x00000019 end=0x00000042 (size=0x00000029) count: 5\n Function start=0x00000044 end=0x0000004c (size=0x00000008) count: 7\n    Table start=0x0000004e end=0x00000057 (size=0x00000009) count: 2\n   Export start=0x00000059 end=0x00000069 (size=0x00000010) count: 2\n     Elem start=0x0000006b end=0x00000092 (size=0x00000027) count: 4\n     Code start=0x00000094 end=0x000000c3 (size=0x0000002f) count: 7\n",
      "details": "\ntable_init.5.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nType[3]:\n - type[0] () -> i32\n - type[1] () -> nil\n - type[2] (i32) -> i32\nImport[5]:\n - func[0] sig=0 <a.ef0> <- a.ef0\n - func[1] sig=0 <a.ef1> <- a.ef1\n - func[2] sig=0 <a.ef2> <- a.ef2\n - func[3] sig=0 <a.ef3> <- a.ef3\n - func[4] sig=0 <a.ef4> <- a.ef4\nFunction[7]:\n - func[5] sig=0\n - func[6] sig=0\n - func[7] sig=0\n - func[8] sig=0\n - func[9] sig=0\n - func[10] sig=1 <test>\n - func[11] sig=2 <check>\nTable[2]:\n - table[0] type=funcref initial=30 max=30\n - table[1] type=funcref initial=30 max=30\nExport[2]:\n - func[10] <test> -> \"test\"\n - func[11] <check> -> \"check\"\nElem[4]:\n - segment[0] flags=2 table=1 count=4 - init i32=2\n  - elem[2] = ref.func:3 <a.ef3>\n  - elem[3] = ref.func:1 <a.ef1>\n  - elem[4] = ref.func:4 <a.ef4>\n  - elem[5] = ref.func:1 <a.ef1>\n - segment[1] flags=1 table=0 count=4\n  - elem[2] = ref.func:2 <a.ef2>\n  - elem[3] = ref.func:7\n  - elem[4] = ref.func:1 <a.ef1>\n  - elem[5] = ref.func:8\n - segment[2] flags=2 table=1 count=5 - init i32=12\n  - elem[12] = ref.func:7\n  - elem[13] = ref.func:5\n  - elem[14] = ref.func:2 <a.ef2>\n  - elem[15] = ref.func:3 <a.ef3>\n  - elem[16] = ref.func:6\n - segment[3] flags=1 table=0 count=5\n  - elem[12] = ref.func:5\n  - elem[13] = ref.func:9\n  - elem[14] = ref.func:2 <a.ef2>\n  - elem[15] = ref.func:7\n  - elem[16] = ref.func:6\nCode[7]:\n - func[5] size=4\n - func[6] size=4\n - func[7] size=4\n - func[8] size=4\n - func[9] size=4\n - func[10] size=12 <test>\n - func[11] size=7 <check>\n",
      "disassemble": "\ntable_init.5.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n000096 func[5]:\n 000097: 41 05                      | i32.const 5\n 000099: 0b                         | end\n00009b func[6]:\n 00009c: 41 06                      | i32.const 6\n 00009e: 0b                         | end\n0000a0 func[7]:\n 0000a1: 41 07                      | i32.const 7\n 0000a3: 0b                         | end\n0000a5 func[8]:\n 0000a6: 41 08                      | i32.const 8\n 0000a8: 0b                         | end\n0000aa func[9]:\n 0000ab: 41 09                      | i32.const 9\n 0000ad: 0b                         | end\n0000af func[10] <test>:\n 0000b0: 41 0f                      | i32.const 15\n 0000b2: 41 01                      | i32.const 1\n 0000b4: 41 03                      | i32.const 3\n 0000b6: fc 0c 03 01                | table.init 3 1\n 0000ba: 0b                         | end\n0000bc func[11] <check>:\n 0000bd: 20 00                      | local.get 0\n 0000bf: 11 00 01                   | call_indirect 1 (type 0)\n 0000c2: 0b                         | end\n"
    },
    "table_init.6.wasm": {
      "header": "\ntable_init.6.wasm:\tfile format wasm 0x1\n\nSections:\n\n     Type start=0x0000000a end=0x00000017 (size=0x0000000d) count: 3\n   Import start=0x00000019 end=0x00000042 (size=0x00000029) count: 5\n Function start=0x00000044 end=0x0000004c (size=0x00000008) count: 7\n    Table start=0x0000004e end=0x00000057 (size=0x00000009) count: 2\n   Export start=0x00000059 end=0x00000069 (size=0x00000010) count: 2\n     Elem start=0x0000006b end=0x00000092 (size=0x00000027) count: 4\n     Code start=0x00000094 end=0x00000105 (size=0x00000071) count: 7\n",
      "details": "\ntable_init.6.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nType[3]:\n - type[0] () -> i32\n - type[1] () -> nil\n - type[2] (i32) -> i32\nImport[5]:\n - func[0] sig=0 <a.ef0> <- a.ef0\n - func[1] sig=0 <a.ef1> <- a.ef1\n - func[2] sig=0 <a.ef2> <- a.ef2\n - func[3] sig=0 <a.ef3> <- a.ef3\n - func[4] sig=0 <a.ef4> <- a.ef4\nFunction[7]:\n - func[5] sig=0\n - func[6] sig=0\n - func[7] sig=0\n - func[8] sig=0\n - func[9] sig=0\n - func[10] sig=1 <test>\n - func[11] sig=2 <check>\nTable[2]:\n - table[0] type=funcref initial=30 max=30\n - table[1] type=funcref initial=30 max=30\nExport[2]:\n - func[10] <test> -> \"test\"\n - func[11] <check> -> \"check\"\nElem[4]:\n - segment[0] flags=2 table=1 count=4 - init i32=2\n  - elem[2] = ref.func:3 <a.ef3>\n  - elem[3] = ref.func:1 <a.ef1>\n  - elem[4] = ref.func:4 <a.ef4>\n  - elem[5] = ref.func:1 <a.ef1>\n - segment[1] flags=1 table=0 count=4\n  - elem[2] = ref.func:2 <a.ef2>\n  - elem[3] = ref.func:7\n  - elem[4] = ref.func:1 <a.ef1>\n  - elem[5] = ref.func:8\n - segment[2] flags=2 table=1 count=5 - init i32=12\n  - elem[12] = ref.func:7\n  - elem[13] = ref.func:5\n  - elem[14] = ref.func:2 <a.ef2>\n  - elem[15] = ref.func:3 <a.ef3>\n  - elem[16] = ref.func:6\n - segment[3] flags=1 table=0 count=5\n  - elem[12] = ref.func:5\n  - elem[13] = ref.func:9\n  - elem[14] = ref.func:2 <a.ef2>\n  - elem[15] = ref.func:7\n  - elem[16] = ref.func:6\nCode[7]:\n - func[5] size=4\n - func[6] size=4\n - func[7] size=4\n - func[8] size=4\n - func[9] size=4\n - func[10] size=78 <test>\n - func[11] size=7 <check>\n",
      "disassemble": "\ntable_init.6.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n000096 func[5]:\n 000097: 41 05                      | i32.const 5\n 000099: 0b                         | end\n00009b func[6]:\n 00009c: 41 06                      | i32.const 6\n 00009e: 0b                         | end\n0000a0 func[7]:\n 0000a1: 41 07                      | i32.const 7\n 0000a3: 0b                         | end\n0000a5 func[8]:\n 0000a6: 41 08                      | i32.const 8\n 0000a8: 0b                         | end\n0000aa func[9]:\n 0000ab: 41 09                      | i32.const 9\n 0000ad: 0b                         | end\n0000af func[10] <test>:\n 0000b0: 41 07                      | i32.const 7\n 0000b2: 41 00                      | i32.const 0\n 0000b4: 41 04                      | i32.const 4\n 0000b6: fc 0c 01 01                | table.init 1 1\n 0000ba: fc 0d 01                   | elem.drop 1\n 0000bd: 41 0f                      | i32.const 15\n 0000bf: 41 01                      | i32.const 1\n 0000c1: 41 03                      | i32.const 3\n 0000c3: fc 0c 03 01                | table.init 3 1\n 0000c7: fc 0d 03                   | elem.drop 3\n 0000ca: 41 14                      | i32.const 20\n 0000cc: 41 0f                      | i32.const 15\n 0000ce: 41 05                      | i32.const 5\n 0000d0: fc 0e 01 01                | table.copy 1 1\n 0000d4: 41 15                      | i32.const 21\n 0000d6: 41 1d                      | i32.const 29\n 0000d8: 41 01                      | i32.const 1\n 0000da: fc 0e 01 01                | table.copy 1 1\n 0000de: 41 18                      | i32.const 24\n 0000e0: 41 0a                      | i32.const 10\n 0000e2: 41 01                      | i32.const 1\n 0000e4: fc 0e 01 01                | table.copy 1 1\n 0000e8: 41 0d                      | i32.const 13\n 0000ea: 41 0b                      | i32.const 11\n 0000ec: 41 04                      | i32.const 4\n 0000ee: fc 0e 01 01                | table.copy 1 1\n 0000f2: 41 13                      | i32.const 19\n 0000f4: 41 14                      | i32.const 20\n 0000f6: 41 05                      | i32.const 5\n 0000f8: fc 0e 01 01                | table.copy 1 1\n 0000fc: 0b                         | end\n0000fe func[11] <check>:\n 0000ff: 20 00                      | local.get 0\n 000101: 11 00 01                   | call_indirect 1 (type 0)\n 000104: 0b                         | end\n"
    },
    "table_init.11.wasm": {
      "header": "\ntable_init.11.wasm:\tfile format wasm 0x1\n\nSections:\n\n     Type start=0x0000000a end=0x00000012 (size=0x00000008) count: 2\n Function start=0x00000014 end=0x00000020 (size=0x0000000c) count: 11\n    Table start=0x00000022 end=0x0000002b (size=0x00000009) count: 2\n   Export start=0x0000002d end=0x00000035 (size=0x00000008) count: 1\n     Elem start=0x00000037 end=0x0000005a (size=0x00000023) count: 4\n     Code start=0x0000005c end=0x00000095 (size=0x00000039) count: 11\n",
      "details": "\ntable_init.11.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nType[2]:\n - type[0] () -> i32\n - type[1] () -> nil\nFunction[11]:\n - func[0] sig=0\n - func[1] sig=0\n - func[2] sig=0\n - func[3] sig=0\n - func[4] sig=0\n - func[5] sig=0\n - func[6] sig=0\n - func[7] sig=0\n - func[8] sig=0\n - func[9] sig=0\n - func[10] sig=1 <test>\nTable[2]:\n - table[0] type=funcref initial=30 max=30\n - table[1] type=funcref initial=28 max=28\nExport[1]:\n - func[10] <test> -> \"test\"\nElem[4]:\n - segment[0] flags=0 table=0 count=4 - init i32=2\n  - elem[2] = ref.func:3\n  - elem[3] = ref.func:1\n  - elem[4] = ref.func:4\n  - elem[5] = ref.func:1\n - segment[1] flags=1 table=0 count=4\n  - elem[2] = ref.func:2\n  - elem[3] = ref.func:7\n  - elem[4] = ref.func:1\n  - elem[5] = ref.func:8\n - segment[2] flags=0 table=0 count=5 - init i32=12\n  - elem[12] = ref.func:7\n  - elem[13] = ref.func:5\n  - elem[14] = ref.func:2\n  - elem[15] = ref.func:3\n  - elem[16] = ref.func:6\n - segment[3] flags=1 table=0 count=5\n  - elem[12] = ref.func:5\n  - elem[13] = ref.func:9\n  - elem[14] = ref.func:2\n  - elem[15] = ref.func:7\n  - elem[16] = ref.func:6\nCode[11]:\n - func[0] size=4\n - func[1] size=4\n - func[2] size=4\n - func[3] size=4\n - func[4] size=4\n - func[5] size=4\n - func[6] size=4\n - func[7] size=4\n - func[8] size=4\n - func[9] size=4\n - func[10] size=5 <test>\n",
      "disassemble": "\ntable_init.11.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n00005e func[0]:\n 00005f: 41 00                      | i32.const 0\n 000061: 0b                         | end\n000063 func[1]:\n 000064: 41 01                      | i32.const 1\n 000066: 0b                         | end\n000068 func[2]:\n 000069: 41 02                      | i32.const 2\n 00006b: 0b                         | end\n00006d func[3]:\n 00006e: 41 03                      | i32.const 3\n 000070: 0b                         | end\n000072 func[4]:\n 000073: 41 04                      | i32.const 4\n 000075: 0b                         | end\n000077 func[5]:\n 000078: 41 05                      | i32.const 5\n 00007a: 0b                         | end\n00007c func[6]:\n 00007d: 41 06                      | i32.const 6\n 00007f: 0b                         | end\n000081 func[7]:\n 000082: 41 07                      | i32.const 7\n 000084: 0b                         | end\n000086 func[8]:\n 000087: 41 08                      | i32.const 8\n 000089: 0b                         | end\n00008b func[9]:\n 00008c: 41 09                      | i32.const 9\n 00008e: 0b                         | end\n000090 func[10] <test>:\n 000091: fc 0d 02                   | elem.drop 2\n 000094: 0b                         | end\n"
    },
    "table_init.12.wasm": {
      "header": "\ntable_init.12.wasm:\tfile format wasm 0x1\n\nSections:\n\n     Type start=0x0000000a end=0x00000012 (size=0x00000008) count: 2\n Function start=0x00000014 end=0x00000020 (size=0x0000000c) count: 11\n    Table start=0x00000022 end=0x0000002b (size=0x00000009) count: 2\n   Export start=0x0000002d end=0x00000035 (size=0x00000008) count: 1\n     Elem start=0x00000037 end=0x0000005a (size=0x00000023) count: 4\n     Code start=0x0000005c end=0x0000009c (size=0x00000040) count: 11\n",
      "details": "\ntable_init.12.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nType[2]:\n - type[0] () -> i32\n - type[1] () -> nil\nFunction[11]:\n - func[0] sig=0\n - func[1] sig=0\n - func[2] sig=0\n - func[3] sig=0\n - func[4] sig=0\n - func[5] sig=0\n - func[6] sig=0\n - func[7] sig=0\n - func[8] sig=0\n - func[9] sig=0\n - func[10] sig=1 <test>\nTable[2]:\n - table[0] type=funcref initial=30 max=30\n - table[1] type=funcref initial=28 max=28\nExport[1]:\n - func[10] <test> -> \"test\"\nElem[4]:\n - segment[0] flags=0 table=0 count=4 - init i32=2\n  - elem[2] = ref.func:3\n  - elem[3] = ref.func:1\n  - elem[4] = ref.func:4\n  - elem[5] = ref.func:1\n - segment[1] flags=1 table=0 count=4\n  - elem[2] = ref.func:2\n  - elem[3] = ref.func:7\n  - elem[4] = ref.func:1\n  - elem[5] = ref.func:8\n - segment[2] flags=0 table=0 count=5 - init i32=12\n  - elem[12] = ref.func:7\n  - elem[13] = ref.func:5\n  - elem[14] = ref.func:2\n  - elem[15] = ref.func:3\n  - elem[16] = ref.func:6\n - segment[3] flags=1 table=0 count=5\n  - elem[12] = ref.func:5\n  - elem[13] = ref.func:9\n  - elem[14] = ref.func:2\n  - elem[15] = ref.func:7\n  - elem[16] = ref.func:6\nCode[11]:\n - func[0] size=4\n - func[1] size=4\n - func[2] size=4\n - func[3] size=4\n - func[4] size=4\n - func[5] size=4\n - func[6] size=4\n - func[7] size=4\n - func[8] size=4\n - func[9] size=4\n - func[10] size=12 <test>\n",
      "disassemble": "\ntable_init.12.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n00005e func[0]:\n 00005f: 41 00                      | i32.const 0\n 000061: 0b                         | end\n000063 func[1]:\n 000064: 41 01                      | i32.const 1\n 000066: 0b                         | end\n000068 func[2]:\n 000069: 41 02                      | i32.const 2\n 00006b: 0b                         | end\n00006d func[3]:\n 00006e: 41 03                      | i32.const 3\n 000070: 0b                         | end\n000072 func[4]:\n 000073: 41 04                      | i32.const 4\n 000075: 0b                         | end\n000077 func[5]:\n 000078: 41 05                      | i32.const 5\n 00007a: 0b                         | end\n00007c func[6]:\n 00007d: 41 06                      | i32.const 6\n 00007f: 0b                         | end\n000081 func[7]:\n 000082: 41 07                      | i32.const 7\n 000084: 0b                         | end\n000086 func[8]:\n 000087: 41 08                      | i32.const 8\n 000089: 0b                         | end\n00008b func[9]:\n 00008c: 41 09                      | i32.const 9\n 00008e: 0b                         | end\n000090 func[10] <test>:\n 000091: 41 0c                      | i32.const 12\n 000093: 41 01                      | i32.const 1\n 000095: 41 01                      | i32.const 1\n 000097: fc 0c 02 00                | table.init 2 0\n 00009b: 0b                         | end\n"
    },
    "table_init.13.wasm": {
      "header": "\ntable_init.13.wasm:\tfile format wasm 0x1\n\nSections:\n\n     Type start=0x0000000a end=0x00000012 (size=0x00000008) count: 2\n Function start=0x00000014 end=0x00000020 (size=0x0000000c) count: 11\n    Table start=0x00000022 end=0x0000002b (size=0x00000009) count: 2\n   Export start=0x0000002d end=0x00000035 (size=0x00000008) count: 1\n     Elem start=0x00000037 end=0x0000005a (size=0x00000023) count: 4\n     Code start=0x0000005c end=0x000000a6 (size=0x0000004a) count: 11\n",
      "details": "\ntable_init.13.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nType[2]:\n - type[0] () -> i32\n - type[1] () -> nil\nFunction[11]:\n - func[0] sig=0\n - func[1] sig=0\n - func[2] sig=0\n - func[3] sig=0\n - func[4] sig=0\n - func[5] sig=0\n - func[6] sig=0\n - func[7] sig=0\n - func[8] sig=0\n - func[9] sig=0\n - func[10] sig=1 <test>\nTable[2]:\n - table[0] type=funcref initial=30 max=30\n - table[1] type=funcref initial=28 max=28\nExport[1]:\n - func[10] <test> -> \"test\"\nElem[4]:\n - segment[0] flags=0 table=0 count=4 - init i32=2\n  - elem[2] = ref.func:3\n  - elem[3] = ref.func:1\n  - elem[4] = ref.func:4\n  - elem[5] = ref.func:1\n - segment[1] flags=1 table=0 count=4\n  - elem[2] = ref.func:2\n  - elem[3] = ref.func:7\n  - elem[4] = ref.func:1\n  - elem[5] = ref.func:8\n - segment[2] flags=0 table=0 count=5 - init i32=12\n  - elem[12] = ref.func:7\n  - elem[13] = ref.func:5\n  - elem[14] = ref.func:2\n  - elem[15] = ref.func:3\n  - elem[16] = ref.func:6\n - segment[3] flags=1 table=0 count=5\n  - elem[12] = ref.func:5\n  - elem[13] = ref.func:9\n  - elem[14] = ref.func:2\n  - elem[15] = ref.func:7\n  - elem[16] = ref.func:6\nCode[11]:\n - func[0] size=4\n - func[1] size=4\n - func[2] size=4\n - func[3] size=4\n - func[4] size=4\n - func[5] size=4\n - func[6] size=4\n - func[7] size=4\n - func[8] size=4\n - func[9] size=4\n - func[10] size=22 <test>\n",
      "disassemble": "\ntable_init.13.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n00005e func[0]:\n 00005f: 41 00                      | i32.const 0\n 000061: 0b                         | end\n000063 func[1]:\n 000064: 41 01                      | i32.const 1\n 000066: 0b                         | end\n000068 func[2]:\n 000069: 41 02                      | i32.const 2\n 00006b: 0b                         | end\n00006d func[3]:\n 00006e: 41 03                      | i32.const 3\n 000070: 0b                         | end\n000072 func[4]:\n 000073: 41 04                      | i32.const 4\n 000075: 0b                         | end\n000077 func[5]:\n 000078: 41 05                      | i32.const 5\n 00007a: 0b                         | end\n00007c func[6]:\n 00007d: 41 06                      | i32.const 6\n 00007f: 0b                         | end\n000081 func[7]:\n 000082: 41 07                      | i32.const 7\n 000084: 0b                         | end\n000086 func[8]:\n 000087: 41 08                      | i32.const 8\n 000089: 0b                         | end\n00008b func[9]:\n 00008c: 41 09                      | i32.const 9\n 00008e: 0b                         | end\n000090 func[10] <test>:\n 000091: 41 0c                      | i32.const 12\n 000093: 41 01                      | i32.const 1\n 000095: 41 01                      | i32.const 1\n 000097: fc 0c 01 00                | table.init 1 0\n 00009b: 41 15                      | i32.const 21\n 00009d: 41 01                      | i32.const 1\n 00009f: 41 01                      | i32.const 1\n 0000a1: fc 0c 01 00                | table.init 1 0\n 0000a5: 0b                         | end\n"
    },
    "table_init.14.wasm": {
      "header": "\ntable_init.14.wasm:\tfile format wasm 0x1\n\nSections:\n\n     Type start=0x0000000a end=0x00000012 (size=0x00000008) count: 2\n Function start=0x00000014 end=0x00000020 (size=0x0000000c) count: 11\n    Table start=0x00000022 end=0x0000002b (size=0x00000009) count: 2\n   Export start=0x0000002d end=0x00000035 (size=0x00000008) count: 1\n     Elem start=0x00000037 end=0x0000005a (size=0x00000023) count: 4\n     Code start=0x0000005c end=0x00000098 (size=0x0000003c) count: 11\n",
      "details": "\ntable_init.14.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nType[2]:\n - type[0] () -> i32\n - type[1] () -> nil\nFunction[11]:\n - func[0] sig=0\n - func[1] sig=0\n - func[2] sig=0\n - func[3] sig=0\n - func[4] sig=0\n - func[5] sig=0\n - func[6] sig=0\n - func[7] sig=0\n - func[8] sig=0\n - func[9] sig=0\n - func[10] sig=1 <test>\nTable[2]:\n - table[0] type=funcref initial=30 max=30\n - table[1] type=funcref initial=28 max=28\nExport[1]:\n - func[10] <test> -> \"test\"\nElem[4]:\n - segment[0] flags=0 table=0 count=4 - init i32=2\n  - elem[2] = ref.func:3\n  - elem[3] = ref.func:1\n  - elem[4] = ref.func:4\n  - elem[5] = ref.func:1\n - segment[1] flags=1 table=0 count=4\n  - elem[2] = ref.func:2\n  - elem[3] = ref.func:7\n  - elem[4] = ref.func:1\n  - elem[5] = ref.func:8\n - segment[2] flags=0 table=0 count=5 - init i32=12\n  - elem[12] = ref.func:7\n  - elem[13] = ref.func:5\n  - elem[14] = ref.func:2\n  - elem[15] = ref.func:3\n  - elem[16] = ref.func:6\n - segment[3] flags=1 table=0 count=5\n  - elem[12] = ref.func:5\n  - elem[13] = ref.func:9\n  - elem[14] = ref.func:2\n  - elem[15] = ref.func:7\n  - elem[16] = ref.func:6\nCode[11]:\n - func[0] size=4\n - func[1] size=4\n - func[2] size=4\n - func[3] size=4\n - func[4] size=4\n - func[5] size=4\n - func[6] size=4\n - func[7] size=4\n - func[8] size=4\n - func[9] size=4\n - func[10] size=8 <test>\n",
      "disassemble": "\ntable_init.14.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n00005e func[0]:\n 00005f: 41 00                      | i32.const 0\n 000061: 0b                         | end\n000063 func[1]:\n 000064: 41 01                      | i32.const 1\n 000066: 0b                         | end\n000068 func[2]:\n 000069: 41 02                      | i32.const 2\n 00006b: 0b                         | end\n00006d func[3]:\n 00006e: 41 03                      | i32.const 3\n 000070: 0b                         | end\n000072 func[4]:\n 000073: 41 04                      | i32.const 4\n 000075: 0b                         | end\n000077 func[5]:\n 000078: 41 05                      | i32.const 5\n 00007a: 0b                         | end\n00007c func[6]:\n 00007d: 41 06                      | i32.const 6\n 00007f: 0b                         | end\n000081 func[7]:\n 000082: 41 07                      | i32.const 7\n 000084: 0b                         | end\n000086 func[8]:\n 000087: 41 08                      | i32.const 8\n 000089: 0b                         | end\n00008b func[9]:\n 00008c: 41 09                      | i32.const 9\n 00008e: 0b                         | end\n000090 func[10] <test>:\n 000091: fc 0d 01                   | elem.drop 1\n 000094: fc 0d 01                   | elem.drop 1\n 000097: 0b                         | end\n"
    },
    "table_init.15.wasm": {
      "header": "\ntable_init.15.wasm:\tfile format wasm 0x1\n\nSections:\n\n     Type start=0x0000000a end=0x00000012 (size=0x00000008) count: 2\n Function start=0x00000014 end=0x00000020 (size=0x0000000c) count: 11\n    Table start=0x00000022 end=0x0000002b (size=0x00000009) count: 2\n   Export start=0x0000002d end=0x00000035 (size=0x00000008) count: 1\n     Elem start=0x00000037 end=0x0000005a (size=0x00000023) count: 4\n     Code start=0x0000005c end=0x0000009f (size=0x00000043) count: 11\n",
      "details": "\ntable_init.15.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nType[2]:\n - type[0] () -> i32\n - type[1] () -> nil\nFunction[11]:\n - func[0] sig=0\n - func[1] sig=0\n - func[2] sig=0\n - func[3] sig=0\n - func[4] sig=0\n - func[5] sig=0\n - func[6] sig=0\n - func[7] sig=0\n - func[8] sig=0\n - func[9] sig=0\n - func[10] sig=1 <test>\nTable[2]:\n - table[0] type=funcref initial=30 max=30\n - table[1] type=funcref initial=28 max=28\nExport[1]:\n - func[10] <test> -> \"test\"\nElem[4]:\n - segment[0] flags=0 table=0 count=4 - init i32=2\n  - elem[2] = ref.func:3\n  - elem[3] = ref.func:1\n  - elem[4] = ref.func:4\n  - elem[5] = ref.func:1\n - segment[1] flags=1 table=0 count=4\n  - elem[2] = ref.func:2\n  - elem[3] = ref.func:7\n  - elem[4] = ref.func:1\n  - elem[5] = ref.func:8\n - segment[2] flags=0 table=0 count=5 - init i32=12\n  - elem[12] = ref.func:7\n  - elem[13] = ref.func:5\n  - elem[14] = ref.func:2\n  - elem[15] = ref.func:3\n  - elem[16] = ref.func:6\n - segment[3] flags=1 table=0 count=5\n  - elem[12] = ref.func:5\n  - elem[13] = ref.func:9\n  - elem[14] = ref.func:2\n  - elem[15] = ref.func:7\n  - elem[16] = ref.func:6\nCode[11]:\n - func[0] size=4\n - func[1] size=4\n - func[2] size=4\n - func[3] size=4\n - func[4] size=4\n - func[5] size=4\n - func[6] size=4\n - func[7] size=4\n - func[8] size=4\n - func[9] size=4\n - func[10] size=15 <test>\n",
      "disassemble": "\ntable_init.15.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n00005e func[0]:\n 00005f: 41 00                      | i32.const 0\n 000061: 0b                         | end\n000063 func[1]:\n 000064: 41 01                      | i32.const 1\n 000066: 0b                         | end\n000068 func[2]:\n 000069: 41 02                      | i32.const 2\n 00006b: 0b                         | end\n00006d func[3]:\n 00006e: 41 03                      | i32.const 3\n 000070: 0b                         | end\n000072 func[4]:\n 000073: 41 04                      | i32.const 4\n 000075: 0b                         | end\n000077 func[5]:\n 000078: 41 05                      | i32.const 5\n 00007a: 0b                         | end\n00007c func[6]:\n 00007d: 41 06                      | i32.const 6\n 00007f: 0b                         | end\n000081 func[7]:\n 000082: 41 07                      | i32.const 7\n 000084: 0b                         | end\n000086 func[8]:\n 000087: 41 08                      | i32.const 8\n 000089: 0b                         | end\n00008b func[9]:\n 00008c: 41 09                      | i32.const 9\n 00008e: 0b                         | end\n000090 func[10] <test>:\n 000091: fc 0d 01                   | elem.drop 1\n 000094: 41 0c                      | i32.const 12\n 000096: 41 01                      | i32.const 1\n 000098: 41 01                      | i32.const 1\n 00009a: fc 0c 01 00                | table.init 1 0\n 00009e: 0b                         | end\n"
    },
    "table_init.16.wasm": {
      "header": "\ntable_init.16.wasm:\tfile format wasm 0x1\n\nSections:\n\n     Type start=0x0000000a end=0x00000012 (size=0x00000008) count: 2\n Function start=0x00000014 end=0x00000020 (size=0x0000000c) count: 11\n    Table start=0x00000022 end=0x0000002b (size=0x00000009) count: 2\n   Export start=0x0000002d end=0x00000035 (size=0x00000008) count: 1\n     Elem start=0x00000037 end=0x0000005a (size=0x00000023) count: 4\n     Code start=0x0000005c end=0x0000009c (size=0x00000040) count: 11\n",
      "details": "\ntable_init.16.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nType[2]:\n - type[0] () -> i32\n - type[1] () -> nil\nFunction[11]:\n - func[0] sig=0\n - func[1] sig=0\n - func[2] sig=0\n - func[3] sig=0\n - func[4] sig=0\n - func[5] sig=0\n - func[6] sig=0\n - func[7] sig=0\n - func[8] sig=0\n - func[9] sig=0\n - func[10] sig=1 <test>\nTable[2]:\n - table[0] type=funcref initial=30 max=30\n - table[1] type=funcref initial=28 max=28\nExport[1]:\n - func[10] <test> -> \"test\"\nElem[4]:\n - segment[0] flags=0 table=0 count=4 - init i32=2\n  - elem[2] = ref.func:3\n  - elem[3] = ref.func:1\n  - elem[4] = ref.func:4\n  - elem[5] = ref.func:1\n - segment[1] flags=1 table=0 count=4\n  - elem[2] = ref.func:2\n  - elem[3] = ref.func:7\n  - elem[4] = ref.func:1\n  - elem[5] = ref.func:8\n - segment[2] flags=0 table=0 count=5 - init i32=12\n  - elem[12] = ref.func:7\n  - elem[13] = ref.func:5\n  - elem[14] = ref.func:2\n  - elem[15] = ref.func:3\n  - elem[16] = ref.func:6\n - segment[3] flags=1 table=0 count=5\n  - elem[12] = ref.func:5\n  - elem[13] = ref.func:9\n  - elem[14] = ref.func:2\n  - elem[15] = ref.func:7\n  - elem[16] = ref.func:6\nCode[11]:\n - func[0] size=4\n - func[1] size=4\n - func[2] size=4\n - func[3] size=4\n - func[4] size=4\n - func[5] size=4\n - func[6] size=4\n - func[7] size=4\n - func[8] size=4\n - func[9] size=4\n - func[10] size=12 <test>\n",
      "disassemble": "\ntable_init.16.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n00005e func[0]:\n 00005f: 41 00                      | i32.const 0\n 000061: 0b                         | end\n000063 func[1]:\n 000064: 41 01                      | i32.const 1\n 000066: 0b                         | end\n000068 func[2]:\n 000069: 41 02                      | i32.const 2\n 00006b: 0b                         | end\n00006d func[3]:\n 00006e: 41 03                      | i32.const 3\n 000070: 0b                         | end\n000072 func[4]:\n 000073: 41 04                      | i32.const 4\n 000075: 0b                         | end\n000077 func[5]:\n 000078: 41 05                      | i32.const 5\n 00007a: 0b                         | end\n00007c func[6]:\n 00007d: 41 06                      | i32.const 6\n 00007f: 0b                         | end\n000081 func[7]:\n 000082: 41 07                      | i32.const 7\n 000084: 0b                         | end\n000086 func[8]:\n 000087: 41 08                      | i32.const 8\n 000089: 0b                         | end\n00008b func[9]:\n 00008c: 41 09                      | i32.const 9\n 00008e: 0b                         | end\n000090 func[10] <test>:\n 000091: 41 0c                      | i32.const 12\n 000093: 41 00                      | i32.const 0\n 000095: 41 05                      | i32.const 5\n 000097: fc 0c 01 00                | table.init 1 0\n 00009b: 0b                         | end\n"
    },
    "table_init.17.wasm": {
      "header": "\ntable_init.17.wasm:\tfile format wasm 0x1\n\nSections:\n\n     Type start=0x0000000a end=0x00000012 (size=0x00000008) count: 2\n Function start=0x00000014 end=0x00000020 (size=0x0000000c) count: 11\n    Table start=0x00000022 end=0x0000002b (size=0x00000009) count: 2\n   Export start=0x0000002d end=0x00000035 (size=0x00000008) count: 1\n     Elem start=0x00000037 end=0x0000005a (size=0x00000023) count: 4\n     Code start=0x0000005c end=0x0000009c (size=0x00000040) count: 11\n",
      "details": "\ntable_init.17.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nType[2]:\n - type[0] () -> i32\n - type[1] () -> nil\nFunction[11]:\n - func[0] sig=0\n - func[1] sig=0\n - func[2] sig=0\n - func[3] sig=0\n - func[4] sig=0\n - func[5] sig=0\n - func[6] sig=0\n - func[7] sig=0\n - func[8] sig=0\n - func[9] sig=0\n - func[10] sig=1 <test>\nTable[2]:\n - table[0] type=funcref initial=30 max=30\n - table[1] type=funcref initial=28 max=28\nExport[1]:\n - func[10] <test> -> \"test\"\nElem[4]:\n - segment[0] flags=0 table=0 count=4 - init i32=2\n  - elem[2] = ref.func:3\n  - elem[3] = ref.func:1\n  - elem[4] = ref.func:4\n  - elem[5] = ref.func:1\n - segment[1] flags=1 table=0 count=4\n  - elem[2] = ref.func:2\n  - elem[3] = ref.func:7\n  - elem[4] = ref.func:1\n  - elem[5] = ref.func:8\n - segment[2] flags=0 table=0 count=5 - init i32=12\n  - elem[12] = ref.func:7\n  - elem[13] = ref.func:5\n  - elem[14] = ref.func:2\n  - elem[15] = ref.func:3\n  - elem[16] = ref.func:6\n - segment[3] flags=1 table=0 count=5\n  - elem[12] = ref.func:5\n  - elem[13] = ref.func:9\n  - elem[14] = ref.func:2\n  - elem[15] = ref.func:7\n  - elem[16] = ref.func:6\nCode[11]:\n - func[0] size=4\n - func[1] size=4\n - func[2] size=4\n - func[3] size=4\n - func[4] size=4\n - func[5] size=4\n - func[6] size=4\n - func[7] size=4\n - func[8] size=4\n - func[9] size=4\n - func[10] size=12 <test>\n",
      "disassemble": "\ntable_init.17.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n00005e func[0]:\n 00005f: 41 00                      | i32.const 0\n 000061: 0b                         | end\n000063 func[1]:\n 000064: 41 01                      | i32.const 1\n 000066: 0b                         | end\n000068 func[2]:\n 000069: 41 02                      | i32.const 2\n 00006b: 0b                         | end\n00006d func[3]:\n 00006e: 41 03                      | i32.const 3\n 000070: 0b                         | end\n000072 func[4]:\n 000073: 41 04                      | i32.const 4\n 000075: 0b                         | end\n000077 func[5]:\n 000078: 41 05                      | i32.const 5\n 00007a: 0b                         | end\n00007c func[6]:\n 00007d: 41 06                      | i32.const 6\n 00007f: 0b                         | end\n000081 func[7]:\n 000082: 41 07                      | i32.const 7\n 000084: 0b                         | end\n000086 func[8]:\n 000087: 41 08                      | i32.const 8\n 000089: 0b                         | end\n00008b func[9]:\n 00008c: 41 09                      | i32.const 9\n 00008e: 0b                         | end\n000090 func[10] <test>:\n 000091: 41 0c                      | i32.const 12\n 000093: 41 02                      | i32.const 2\n 000095: 41 03                      | i32.const 3\n 000097: fc 0c 01 00                | table.init 1 0\n 00009b: 0b                         | end\n"
    },
    "table_init.18.wasm": {
      "header": "\ntable_init.18.wasm:\tfile format wasm 0x1\n\nSections:\n\n     Type start=0x0000000a end=0x00000012 (size=0x00000008) count: 2\n Function start=0x00000014 end=0x00000020 (size=0x0000000c) count: 11\n    Table start=0x00000022 end=0x0000002b (size=0x00000009) count: 2\n   Export start=0x0000002d end=0x00000035 (size=0x00000008) count: 1\n     Elem start=0x00000037 end=0x0000005a (size=0x00000023) count: 4\n     Code start=0x0000005c end=0x0000009c (size=0x00000040) count: 11\n",
      "details": "\ntable_init.18.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nType[2]:\n - type[0] () -> i32\n - type[1] () -> nil\nFunction[11]:\n - func[0] sig=0\n - func[1] sig=0\n - func[2] sig=0\n - func[3] sig=0\n - func[4] sig=0\n - func[5] sig=0\n - func[6] sig=0\n - func[7] sig=0\n - func[8] sig=0\n - func[9] sig=0\n - func[10] sig=1 <test>\nTable[2]:\n - table[0] type=funcref initial=30 max=30\n - table[1] type=funcref initial=28 max=28\nExport[1]:\n - func[10] <test> -> \"test\"\nElem[4]:\n - segment[0] flags=0 table=0 count=4 - init i32=2\n  - elem[2] = ref.func:3\n  - elem[3] = ref.func:1\n  - elem[4] = ref.func:4\n  - elem[5] = ref.func:1\n - segment[1] flags=1 table=0 count=4\n  - elem[2] = ref.func:2\n  - elem[3] = ref.func:7\n  - elem[4] = ref.func:1\n  - elem[5] = ref.func:8\n - segment[2] flags=0 table=0 count=5 - init i32=12\n  - elem[12] = ref.func:7\n  - elem[13] = ref.func:5\n  - elem[14] = ref.func:2\n  - elem[15] = ref.func:3\n  - elem[16] = ref.func:6\n - segment[3] flags=1 table=0 count=5\n  - elem[12] = ref.func:5\n  - elem[13] = ref.func:9\n  - elem[14] = ref.func:2\n  - elem[15] = ref.func:7\n  - elem[16] = ref.func:6\nCode[11]:\n - func[0] size=4\n - func[1] size=4\n - func[2] size=4\n - func[3] size=4\n - func[4] size=4\n - func[5] size=4\n - func[6] size=4\n - func[7] size=4\n - func[8] size=4\n - func[9] size=4\n - func[10] size=12 <test>\n",
      "disassemble": "\ntable_init.18.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n00005e func[0]:\n 00005f: 41 00                      | i32.const 0\n 000061: 0b                         | end\n000063 func[1]:\n 000064: 41 01                      | i32.const 1\n 000066: 0b                         | end\n000068 func[2]:\n 000069: 41 02                      | i32.const 2\n 00006b: 0b                         | end\n00006d func[3]:\n 00006e: 41 03                      | i32.const 3\n 000070: 0b                         | end\n000072 func[4]:\n 000073: 41 04                      | i32.const 4\n 000075: 0b                         | end\n000077 func[5]:\n 000078: 41 05                      | i32.const 5\n 00007a: 0b                         | end\n00007c func[6]:\n 00007d: 41 06                      | i32.const 6\n 00007f: 0b                         | end\n000081 func[7]:\n 000082: 41 07                      | i32.const 7\n 000084: 0b                         | end\n000086 func[8]:\n 000087: 41 08                      | i32.const 8\n 000089: 0b                         | end\n00008b func[9]:\n 00008c: 41 09                      | i32.const 9\n 00008e: 0b                         | end\n000090 func[10] <test>:\n 000091: 41 1c                      | i32.const 28\n 000093: 41 01                      | i32.const 1\n 000095: 41 03                      | i32.const 3\n 000097: fc 0c 01 00                | table.init 1 0\n 00009b: 0b                         | end\n"
    },
    "table_init.19.wasm": {
      "header": "\ntable_init.19.wasm:\tfile format wasm 0x1\n\nSections:\n\n     Type start=0x0000000a end=0x00000012 (size=0x00000008) count: 2\n Function start=0x00000014 end=0x00000020 (size=0x0000000c) count: 11\n    Table start=0x00000022 end=0x0000002b (size=0x00000009) count: 2\n   Export start=0x0000002d end=0x00000035 (size=0x00000008) count: 1\n     Elem start=0x00000037 end=0x0000005a (size=0x00000023) count: 4\n     Code start=0x0000005c end=0x0000009c (size=0x00000040) count: 11\n",
      "details": "\ntable_init.19.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nType[2]:\n - type[0] () -> i32\n - type[1] () -> nil\nFunction[11]:\n - func[0] sig=0\n - func[1] sig=0\n - func[2] sig=0\n - func[3] sig=0\n - func[4] sig=0\n - func[5] sig=0\n - func[6] sig=0\n - func[7] sig=0\n - func[8] sig=0\n - func[9] sig=0\n - func[10] sig=1 <test>\nTable[2]:\n - table[0] type=funcref initial=30 max=30\n - table[1] type=funcref initial=28 max=28\nExport[1]:\n - func[10] <test> -> \"test\"\nElem[4]:\n - segment[0] flags=0 table=0 count=4 - init i32=2\n  - elem[2] = ref.func:3\n  - elem[3] = ref.func:1\n  - elem[4] = ref.func:4\n  - elem[5] = ref.func:1\n - segment[1] flags=1 table=0 count=4\n  - elem[2] = ref.func:2\n  - elem[3] = ref.func:7\n  - elem[4] = ref.func:1\n  - elem[5] = ref.func:8\n - segment[2] flags=0 table=0 count=5 - init i32=12\n  - elem[12] = ref.func:7\n  - elem[13] = ref.func:5\n  - elem[14] = ref.func:2\n  - elem[15] = ref.func:3\n  - elem[16] = ref.func:6\n - segment[3] flags=1 table=0 count=5\n  - elem[12] = ref.func:5\n  - elem[13] = ref.func:9\n  - elem[14] = ref.func:2\n  - elem[15] = ref.func:7\n  - elem[16] = ref.func:6\nCode[11]:\n - func[0] size=4\n - func[1] size=4\n - func[2] size=4\n - func[3] size=4\n - func[4] size=4\n - func[5] size=4\n - func[6] size=4\n - func[7] size=4\n - func[8] size=4\n - func[9] size=4\n - func[10] size=12 <test>\n",
      "disassemble": "\ntable_init.19.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n00005e func[0]:\n 00005f: 41 00                      | i32.const 0\n 000061: 0b                         | end\n000063 func[1]:\n 000064: 41 01                      | i32.const 1\n 000066: 0b                         | end\n000068 func[2]:\n 000069: 41 02                      | i32.const 2\n 00006b: 0b                         | end\n00006d func[3]:\n 00006e: 41 03                      | i32.const 3\n 000070: 0b                         | end\n000072 func[4]:\n 000073: 41 04                      | i32.const 4\n 000075: 0b                         | end\n000077 func[5]:\n 000078: 41 05                      | i32.const 5\n 00007a: 0b                         | end\n00007c func[6]:\n 00007d: 41 06                      | i32.const 6\n 00007f: 0b                         | end\n000081 func[7]:\n 000082: 41 07                      | i32.const 7\n 000084: 0b                         | end\n000086 func[8]:\n 000087: 41 08                      | i32.const 8\n 000089: 0b                         | end\n00008b func[9]:\n 00008c: 41 09                      | i32.const 9\n 00008e: 0b                         | end\n000090 func[10] <test>:\n 000091: 41 0c                      | i32.const 12\n 000093: 41 04                      | i32.const 4\n 000095: 41 00                      | i32.const 0\n 000097: fc 0c 01 00                | table.init 1 0\n 00009b: 0b                         | end\n"
    },
    "table_init.20.wasm": {
      "header": "\ntable_init.20.wasm:\tfile format wasm 0x1\n\nSections:\n\n     Type start=0x0000000a end=0x00000012 (size=0x00000008) count: 2\n Function start=0x00000014 end=0x00000020 (size=0x0000000c) count: 11\n    Table start=0x00000022 end=0x0000002b (size=0x00000009) count: 2\n   Export start=0x0000002d end=0x00000035 (size=0x00000008) count: 1\n     Elem start=0x00000037 end=0x0000005a (size=0x00000023) count: 4\n     Code start=0x0000005c end=0x0000009c (size=0x00000040) count: 11\n",
      "details": "\ntable_init.20.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nType[2]:\n - type[0] () -> i32\n - type[1] () -> nil\nFunction[11]:\n - func[0] sig=0\n - func[1] sig=0\n - func[2] sig=0\n - func[3] sig=0\n - func[4] sig=0\n - func[5] sig=0\n - func[6] sig=0\n - func[7] sig=0\n - func[8] sig=0\n - func[9] sig=0\n - func[10] sig=1 <test>\nTable[2]:\n - table[0] type=funcref initial=30 max=30\n - table[1] type=funcref initial=28 max=28\nExport[1]:\n - func[10] <test> -> \"test\"\nElem[4]:\n - segment[0] flags=0 table=0 count=4 - init i32=2\n  - elem[2] = ref.func:3\n  - elem[3] = ref.func:1\n  - elem[4] = ref.func:4\n  - elem[5] = ref.func:1\n - segment[1] flags=1 table=0 count=4\n  - elem[2] = ref.func:2\n  - elem[3] = ref.func:7\n  - elem[4] = ref.func:1\n  - elem[5] = ref.func:8\n - segment[2] flags=0 table=0 count=5 - init i32=12\n  - elem[12] = ref.func:7\n  - elem[13] = ref.func:5\n  - elem[14] = ref.func:2\n  - elem[15] = ref.func:3\n  - elem[16] = ref.func:6\n - segment[3] flags=1 table=0 count=5\n  - elem[12] = ref.func:5\n  - elem[13] = ref.func:9\n  - elem[14] = ref.func:2\n  - elem[15] = ref.func:7\n  - elem[16] = ref.func:6\nCode[11]:\n - func[0] size=4\n - func[1] size=4\n - func[2] size=4\n - func[3] size=4\n - func[4] size=4\n - func[5] size=4\n - func[6] size=4\n - func[7] size=4\n - func[8] size=4\n - func[9] size=4\n - func[10] size=12 <test>\n",
      "disassemble": "\ntable_init.20.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n00005e func[0]:\n 00005f: 41 00                      | i32.const 0\n 000061: 0b                         | end\n000063 func[1]:\n 000064: 41 01                      | i32.const 1\n 000066: 0b                         | end\n000068 func[2]:\n 000069: 41 02                      | i32.const 2\n 00006b: 0b                         | end\n00006d func[3]:\n 00006e: 41 03                      | i32.const 3\n 000070: 0b                         | end\n000072 func[4]:\n 000073: 41 04                      | i32.const 4\n 000075: 0b                         | end\n000077 func[5]:\n 000078: 41 05                      | i32.const 5\n 00007a: 0b                         | end\n00007c func[6]:\n 00007d: 41 06                      | i32.const 6\n 00007f: 0b                         | end\n000081 func[7]:\n 000082: 41 07                      | i32.const 7\n 000084: 0b                         | end\n000086 func[8]:\n 000087: 41 08                      | i32.const 8\n 000089: 0b                         | end\n00008b func[9]:\n 00008c: 41 09                      | i32.const 9\n 00008e: 0b                         | end\n000090 func[10] <test>:\n 000091: 41 0c                      | i32.const 12\n 000093: 41 05                      | i32.const 5\n 000095: 41 00                      | i32.const 0\n 000097: fc 0c 01 00                | table.init 1 0\n 00009b: 0b                         | end\n"
    },
    "table_init.21.wasm": {
      "header": "\ntable_init.21.wasm:\tfile format wasm 0x1\n\nSections:\n\n     Type start=0x0000000a end=0x00000012 (size=0x00000008) count: 2\n Function start=0x00000014 end=0x00000020 (size=0x0000000c) count: 11\n    Table start=0x00000022 end=0x0000002b (size=0x00000009) count: 2\n   Export start=0x0000002d end=0x00000035 (size=0x00000008) count: 1\n     Elem start=0x00000037 end=0x0000005a (size=0x00000023) count: 4\n     Code start=0x0000005c end=0x0000009c (size=0x00000040) count: 11\n",
      "details": "\ntable_init.21.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nType[2]:\n - type[0] () -> i32\n - type[1] () -> nil\nFunction[11]:\n - func[0] sig=0\n - func[1] sig=0\n - func[2] sig=0\n - func[3] sig=0\n - func[4] sig=0\n - func[5] sig=0\n - func[6] sig=0\n - func[7] sig=0\n - func[8] sig=0\n - func[9] sig=0\n - func[10] sig=1 <test>\nTable[2]:\n - table[0] type=funcref initial=30 max=30\n - table[1] type=funcref initial=28 max=28\nExport[1]:\n - func[10] <test> -> \"test\"\nElem[4]:\n - segment[0] flags=0 table=0 count=4 - init i32=2\n  - elem[2] = ref.func:3\n  - elem[3] = ref.func:1\n  - elem[4] = ref.func:4\n  - elem[5] = ref.func:1\n - segment[1] flags=1 table=0 count=4\n  - elem[2] = ref.func:2\n  - elem[3] = ref.func:7\n  - elem[4] = ref.func:1\n  - elem[5] = ref.func:8\n - segment[2] flags=0 table=0 count=5 - init i32=12\n  - elem[12] = ref.func:7\n  - elem[13] = ref.func:5\n  - elem[14] = ref.func:2\n  - elem[15] = ref.func:3\n  - elem[16] = ref.func:6\n - segment[3] flags=1 table=0 count=5\n  - elem[12] = ref.func:5\n  - elem[13] = ref.func:9\n  - elem[14] = ref.func:2\n  - elem[15] = ref.func:7\n  - elem[16] = ref.func:6\nCode[11]:\n - func[0] size=4\n - func[1] size=4\n - func[2] size=4\n - func[3] size=4\n - func[4] size=4\n - func[5] size=4\n - func[6] size=4\n - func[7] size=4\n - func[8] size=4\n - func[9] size=4\n - func[10] size=12 <test>\n",
      "disassemble": "\ntable_init.21.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n00005e func[0]:\n 00005f: 41 00                      | i32.const 0\n 000061: 0b                         | end\n000063 func[1]:\n 000064: 41 01                      | i32.const 1\n 000066: 0b                         | end\n000068 func[2]:\n 000069: 41 02                      | i32.const 2\n 00006b: 0b                         | end\n00006d func[3]:\n 00006e: 41 03                      | i32.const 3\n 000070: 0b                         | end\n000072 func[4]:\n 000073: 41 04                      | i32.const 4\n 000075: 0b                         | end\n000077 func[5]:\n 000078: 41 05                      | i32.const 5\n 00007a: 0b                         | end\n00007c func[6]:\n 00007d: 41 06                      | i32.const 6\n 00007f: 0b                         | end\n000081 func[7]:\n 000082: 41 07                      | i32.const 7\n 000084: 0b                         | end\n000086 func[8]:\n 000087: 41 08                      | i32.const 8\n 000089: 0b                         | end\n00008b func[9]:\n 00008c: 41 09                      | i32.const 9\n 00008e: 0b                         | end\n000090 func[10] <test>:\n 000091: 41 1e                      | i32.const 30\n 000093: 41 02                      | i32.const 2\n 000095: 41 00                      | i32.const 0\n 000097: fc 0c 01 00                | table.init 1 0\n 00009b: 0b                         | end\n"
    },
    "table_init.22.wasm": {
      "header": "\ntable_init.22.wasm:\tfile format wasm 0x1\n\nSections:\n\n     Type start=0x0000000a end=0x00000012 (size=0x00000008) count: 2\n Function start=0x00000014 end=0x00000020 (size=0x0000000c) count: 11\n    Table start=0x00000022 end=0x0000002b (size=0x00000009) count: 2\n   Export start=0x0000002d end=0x00000035 (size=0x00000008) count: 1\n     Elem start=0x00000037 end=0x0000005a (size=0x00000023) count: 4\n     Code start=0x0000005c end=0x0000009c (size=0x00000040) count: 11\n",
      "details": "\ntable_init.22.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nType[2]:\n - type[0] () -> i32\n - type[1] () -> nil\nFunction[11]:\n - func[0] sig=0\n - func[1] sig=0\n - func[2] sig=0\n - func[3] sig=0\n - func[4] sig=0\n - func[5] sig=0\n - func[6] sig=0\n - func[7] sig=0\n - func[8] sig=0\n - func[9] sig=0\n - func[10] sig=1 <test>\nTable[2]:\n - table[0] type=funcref initial=30 max=30\n - table[1] type=funcref initial=28 max=28\nExport[1]:\n - func[10] <test> -> \"test\"\nElem[4]:\n - segment[0] flags=0 table=0 count=4 - init i32=2\n  - elem[2] = ref.func:3\n  - elem[3] = ref.func:1\n  - elem[4] = ref.func:4\n  - elem[5] = ref.func:1\n - segment[1] flags=1 table=0 count=4\n  - elem[2] = ref.func:2\n  - elem[3] = ref.func:7\n  - elem[4] = ref.func:1\n  - elem[5] = ref.func:8\n - segment[2] flags=0 table=0 count=5 - init i32=12\n  - elem[12] = ref.func:7\n  - elem[13] = ref.func:5\n  - elem[14] = ref.func:2\n  - elem[15] = ref.func:3\n  - elem[16] = ref.func:6\n - segment[3] flags=1 table=0 count=5\n  - elem[12] = ref.func:5\n  - elem[13] = ref.func:9\n  - elem[14] = ref.func:2\n  - elem[15] = ref.func:7\n  - elem[16] = ref.func:6\nCode[11]:\n - func[0] size=4\n - func[1] size=4\n - func[2] size=4\n - func[3] size=4\n - func[4] size=4\n - func[5] size=4\n - func[6] size=4\n - func[7] size=4\n - func[8] size=4\n - func[9] size=4\n - func[10] size=12 <test>\n",
      "disassemble": "\ntable_init.22.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n00005e func[0]:\n 00005f: 41 00                      | i32.const 0\n 000061: 0b                         | end\n000063 func[1]:\n 000064: 41 01                      | i32.const 1\n 000066: 0b                         | end\n000068 func[2]:\n 000069: 41 02                      | i32.const 2\n 00006b: 0b                         | end\n00006d func[3]:\n 00006e: 41 03                      | i32.const 3\n 000070: 0b                         | end\n000072 func[4]:\n 000073: 41 04                      | i32.const 4\n 000075: 0b                         | end\n000077 func[5]:\n 000078: 41 05                      | i32.const 5\n 00007a: 0b                         | end\n00007c func[6]:\n 00007d: 41 06                      | i32.const 6\n 00007f: 0b                         | end\n000081 func[7]:\n 000082: 41 07                      | i32.const 7\n 000084: 0b                         | end\n000086 func[8]:\n 000087: 41 08                      | i32.const 8\n 000089: 0b                         | end\n00008b func[9]:\n 00008c: 41 09                      | i32.const 9\n 00008e: 0b                         | end\n000090 func[10] <test>:\n 000091: 41 1f                      | i32.const 31\n 000093: 41 02                      | i32.const 2\n 000095: 41 00                      | i32.const 0\n 000097: fc 0c 01 00                | table.init 1 0\n 00009b: 0b                         | end\n"
    },
    "table_init.23.wasm": {
      "header": "\ntable_init.23.wasm:\tfile format wasm 0x1\n\nSections:\n\n     Type start=0x0000000a end=0x00000012 (size=0x00000008) count: 2\n Function start=0x00000014 end=0x00000020 (size=0x0000000c) count: 11\n    Table start=0x00000022 end=0x0000002b (size=0x00000009) count: 2\n   Export start=0x0000002d end=0x00000035 (size=0x00000008) count: 1\n     Elem start=0x00000037 end=0x0000005a (size=0x00000023) count: 4\n     Code start=0x0000005c end=0x0000009c (size=0x00000040) count: 11\n",
      "details": "\ntable_init.23.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nType[2]:\n - type[0] () -> i32\n - type[1] () -> nil\nFunction[11]:\n - func[0] sig=0\n - func[1] sig=0\n - func[2] sig=0\n - func[3] sig=0\n - func[4] sig=0\n - func[5] sig=0\n - func[6] sig=0\n - func[7] sig=0\n - func[8] sig=0\n - func[9] sig=0\n - func[10] sig=1 <test>\nTable[2]:\n - table[0] type=funcref initial=30 max=30\n - table[1] type=funcref initial=28 max=28\nExport[1]:\n - func[10] <test> -> \"test\"\nElem[4]:\n - segment[0] flags=0 table=0 count=4 - init i32=2\n  - elem[2] = ref.func:3\n  - elem[3] = ref.func:1\n  - elem[4] = ref.func:4\n  - elem[5] = ref.func:1\n - segment[1] flags=1 table=0 count=4\n  - elem[2] = ref.func:2\n  - elem[3] = ref.func:7\n  - elem[4] = ref.func:1\n  - elem[5] = ref.func:8\n - segment[2] flags=0 table=0 count=5 - init i32=12\n  - elem[12] = ref.func:7\n  - elem[13] = ref.func:5\n  - elem[14] = ref.func:2\n  - elem[15] = ref.func:3\n  - elem[16] = ref.func:6\n - segment[3] flags=1 table=0 count=5\n  - elem[12] = ref.func:5\n  - elem[13] = ref.func:9\n  - elem[14] = ref.func:2\n  - elem[15] = ref.func:7\n  - elem[16] = ref.func:6\nCode[11]:\n - func[0] size=4\n - func[1] size=4\n - func[2] size=4\n - func[3] size=4\n - func[4] size=4\n - func[5] size=4\n - func[6] size=4\n - func[7] size=4\n - func[8] size=4\n - func[9] size=4\n - func[10] size=12 <test>\n",
      "disassemble": "\ntable_init.23.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n00005e func[0]:\n 00005f: 41 00                      | i32.const 0\n 000061: 0b                         | end\n000063 func[1]:\n 000064: 41 01                      | i32.const 1\n 000066: 0b                         | end\n000068 func[2]:\n 000069: 41 02                      | i32.const 2\n 00006b: 0b                         | end\n00006d func[3]:\n 00006e: 41 03                      | i32.const 3\n 000070: 0b                         | end\n000072 func[4]:\n 000073: 41 04                      | i32.const 4\n 000075: 0b                         | end\n000077 func[5]:\n 000078: 41 05                      | i32.const 5\n 00007a: 0b                         | end\n00007c func[6]:\n 00007d: 41 06                      | i32.const 6\n 00007f: 0b                         | end\n000081 func[7]:\n 000082: 41 07                      | i32.const 7\n 000084: 0b                         | end\n000086 func[8]:\n 000087: 41 08                      | i32.const 8\n 000089: 0b                         | end\n00008b func[9]:\n 00008c: 41 09                      | i32.const 9\n 00008e: 0b                         | end\n000090 func[10] <test>:\n 000091: 41 1e                      | i32.const 30\n 000093: 41 04                      | i32.const 4\n 000095: 41 00                      | i32.const 0\n 000097: fc 0c 01 00                | table.init 1 0\n 00009b: 0b                         | end\n"
    },
    "table_init.24.wasm": {
      "header": "\ntable_init.24.wasm:\tfile format wasm 0x1\n\nSections:\n\n     Type start=0x0000000a end=0x00000012 (size=0x00000008) count: 2\n Function start=0x00000014 end=0x00000020 (size=0x0000000c) count: 11\n    Table start=0x00000022 end=0x0000002b (size=0x00000009) count: 2\n   Export start=0x0000002d end=0x00000035 (size=0x00000008) count: 1\n     Elem start=0x00000037 end=0x0000005a (size=0x00000023) count: 4\n     Code start=0x0000005c end=0x0000009c (size=0x00000040) count: 11\n",
      "details": "\ntable_init.24.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nType[2]:\n - type[0] () -> i32\n - type[1] () -> nil\nFunction[11]:\n - func[0] sig=0\n - func[1] sig=0\n - func[2] sig=0\n - func[3] sig=0\n - func[4] sig=0\n - func[5] sig=0\n - func[6] sig=0\n - func[7] sig=0\n - func[8] sig=0\n - func[9] sig=0\n - func[10] sig=1 <test>\nTable[2]:\n - table[0] type=funcref initial=30 max=30\n - table[1] type=funcref initial=28 max=28\nExport[1]:\n - func[10] <test> -> \"test\"\nElem[4]:\n - segment[0] flags=0 table=0 count=4 - init i32=2\n  - elem[2] = ref.func:3\n  - elem[3] = ref.func:1\n  - elem[4] = ref.func:4\n  - elem[5] = ref.func:1\n - segment[1] flags=1 table=0 count=4\n  - elem[2] = ref.func:2\n  - elem[3] = ref.func:7\n  - elem[4] = ref.func:1\n  - elem[5] = ref.func:8\n - segment[2] flags=0 table=0 count=5 - init i32=12\n  - elem[12] = ref.func:7\n  - elem[13] = ref.func:5\n  - elem[14] = ref.func:2\n  - elem[15] = ref.func:3\n  - elem[16] = ref.func:6\n - segment[3] flags=1 table=0 count=5\n  - elem[12] = ref.func:5\n  - elem[13] = ref.func:9\n  - elem[14] = ref.func:2\n  - elem[15] = ref.func:7\n  - elem[16] = ref.func:6\nCode[11]:\n - func[0] size=4\n - func[1] size=4\n - func[2] size=4\n - func[3] size=4\n - func[4] size=4\n - func[5] size=4\n - func[6] size=4\n - func[7] size=4\n - func[8] size=4\n - func[9] size=4\n - func[10] size=12 <test>\n",
      "disassemble": "\ntable_init.24.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n00005e func[0]:\n 00005f: 41 00                      | i32.const 0\n 000061: 0b                         | end\n000063 func[1]:\n 000064: 41 01                      | i32.const 1\n 000066: 0b                         | end\n000068 func[2]:\n 000069: 41 02                      | i32.const 2\n 00006b: 0b                         | end\n00006d func[3]:\n 00006e: 41 03                      | i32.const 3\n 000070: 0b                         | end\n000072 func[4]:\n 000073: 41 04                      | i32.const 4\n 000075: 0b                         | end\n000077 func[5]:\n 000078: 41 05                      | i32.const 5\n 00007a: 0b                         | end\n00007c func[6]:\n 00007d: 41 06                      | i32.const 6\n 00007f: 0b                         | end\n000081 func[7]:\n 000082: 41 07                      | i32.const 7\n 000084: 0b                         | end\n000086 func[8]:\n 000087: 41 08                      | i32.const 8\n 000089: 0b                         | end\n00008b func[9]:\n 00008c: 41 09                      | i32.const 9\n 00008e: 0b                         | end\n000090 func[10] <test>:\n 000091: 41 1f                      | i32.const 31\n 000093: 41 05                      | i32.const 5\n 000095: 41 00                      | i32.const 0\n 000097: fc 0c 01 00                | table.init 1 0\n 00009b: 0b                         | end\n"
    },
    "table_init.25.wasm": {
      "header": "\ntable_init.25.wasm:\tfile format wasm 0x1\n\nSections:\n\n     Type start=0x0000000a end=0x00000012 (size=0x00000008) count: 2\n Function start=0x00000014 end=0x00000020 (size=0x0000000c) count: 11\n    Table start=0x00000022 end=0x0000002b (size=0x00000009) count: 2\n   Export start=0x0000002d end=0x00000035 (size=0x00000008) count: 1\n     Elem start=0x00000037 end=0x0000005e (size=0x00000027) count: 4\n     Code start=0x00000060 end=0x000000a0 (size=0x00000040) count: 11\n",
      "details": "\ntable_init.25.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nType[2]:\n - type[0] () -> i32\n - type[1] () -> nil\nFunction[11]:\n - func[0] sig=0\n - func[1] sig=0\n - func[2] sig=0\n - func[3] sig=0\n - func[4] sig=0\n - func[5] sig=0\n - func[6] sig=0\n - func[7] sig=0\n - func[8] sig=0\n - func[9] sig=0\n - func[10] sig=1 <test>\nTable[2]:\n - table[0] type=funcref initial=30 max=30\n - table[1] type=funcref initial=28 max=28\nExport[1]:\n - func[10] <test> -> \"test\"\nElem[4]:\n - segment[0] flags=2 table=1 count=4 - init i32=2\n  - elem[2] = ref.func:3\n  - elem[3] = ref.func:1\n  - elem[4] = ref.func:4\n  - elem[5] = ref.func:1\n - segment[1] flags=1 table=0 count=4\n  - elem[2] = ref.func:2\n  - elem[3] = ref.func:7\n  - elem[4] = ref.func:1\n  - elem[5] = ref.func:8\n - segment[2] flags=2 table=1 count=5 - init i32=12\n  - elem[12] = ref.func:7\n  - elem[13] = ref.func:5\n  - elem[14] = ref.func:2\n  - elem[15] = ref.func:3\n  - elem[16] = ref.func:6\n - segment[3] flags=1 table=0 count=5\n  - elem[12] = ref.func:5\n  - elem[13] = ref.func:9\n  - elem[14] = ref.func:2\n  - elem[15] = ref.func:7\n  - elem[16] = ref.func:6\nCode[11]:\n - func[0] size=4\n - func[1] size=4\n - func[2] size=4\n - func[3] size=4\n - func[4] size=4\n - func[5] size=4\n - func[6] size=4\n - func[7] size=4\n - func[8] size=4\n - func[9] size=4\n - func[10] size=12 <test>\n",
      "disassemble": "\ntable_init.25.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n000062 func[0]:\n 000063: 41 00                      | i32.const 0\n 000065: 0b                         | end\n000067 func[1]:\n 000068: 41 01                      | i32.const 1\n 00006a: 0b                         | end\n00006c func[2]:\n 00006d: 41 02                      | i32.const 2\n 00006f: 0b                         | end\n000071 func[3]:\n 000072: 41 03                      | i32.const 3\n 000074: 0b                         | end\n000076 func[4]:\n 000077: 41 04                      | i32.const 4\n 000079: 0b                         | end\n00007b func[5]:\n 00007c: 41 05                      | i32.const 5\n 00007e: 0b                         | end\n000080 func[6]:\n 000081: 41 06                      | i32.const 6\n 000083: 0b                         | end\n000085 func[7]:\n 000086: 41 07                      | i32.const 7\n 000088: 0b                         | end\n00008a func[8]:\n 00008b: 41 08                      | i32.const 8\n 00008d: 0b                         | end\n00008f func[9]:\n 000090: 41 09                      | i32.const 9\n 000092: 0b                         | end\n000094 func[10] <test>:\n 000095: 41 1a                      | i32.const 26\n 000097: 41 01                      | i32.const 1\n 000099: 41 03                      | i32.const 3\n 00009b: fc 0c 01 01                | table.init 1 1\n 00009f: 0b                         | end\n"
    },
    "table_init.26.wasm": {
      "header": "\ntable_init.26.wasm:\tfile format wasm 0x1\n\nSections:\n\n     Type start=0x0000000a end=0x00000012 (size=0x00000008) count: 2\n Function start=0x00000014 end=0x00000020 (size=0x0000000c) count: 11\n    Table start=0x00000022 end=0x0000002b (size=0x00000009) count: 2\n   Export start=0x0000002d end=0x00000035 (size=0x00000008) count: 1\n     Elem start=0x00000037 end=0x0000005e (size=0x00000027) count: 4\n     Code start=0x00000060 end=0x000000a0 (size=0x00000040) count: 11\n",
      "details": "\ntable_init.26.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nType[2]:\n - type[0] () -> i32\n - type[1] () -> nil\nFunction[11]:\n - func[0] sig=0\n - func[1] sig=0\n - func[2] sig=0\n - func[3] sig=0\n - func[4] sig=0\n - func[5] sig=0\n - func[6] sig=0\n - func[7] sig=0\n - func[8] sig=0\n - func[9] sig=0\n - func[10] sig=1 <test>\nTable[2]:\n - table[0] type=funcref initial=30 max=30\n - table[1] type=funcref initial=28 max=28\nExport[1]:\n - func[10] <test> -> \"test\"\nElem[4]:\n - segment[0] flags=2 table=1 count=4 - init i32=2\n  - elem[2] = ref.func:3\n  - elem[3] = ref.func:1\n  - elem[4] = ref.func:4\n  - elem[5] = ref.func:1\n - segment[1] flags=1 table=0 count=4\n  - elem[2] = ref.func:2\n  - elem[3] = ref.func:7\n  - elem[4] = ref.func:1\n  - elem[5] = ref.func:8\n - segment[2] flags=2 table=1 count=5 - init i32=12\n  - elem[12] = ref.func:7\n  - elem[13] = ref.func:5\n  - elem[14] = ref.func:2\n  - elem[15] = ref.func:3\n  - elem[16] = ref.func:6\n - segment[3] flags=1 table=0 count=5\n  - elem[12] = ref.func:5\n  - elem[13] = ref.func:9\n  - elem[14] = ref.func:2\n  - elem[15] = ref.func:7\n  - elem[16] = ref.func:6\nCode[11]:\n - func[0] size=4\n - func[1] size=4\n - func[2] size=4\n - func[3] size=4\n - func[4] size=4\n - func[5] size=4\n - func[6] size=4\n - func[7] size=4\n - func[8] size=4\n - func[9] size=4\n - func[10] size=12 <test>\n",
      "disassemble": "\ntable_init.26.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n000062 func[0]:\n 000063: 41 00                      | i32.const 0\n 000065: 0b                         | end\n000067 func[1]:\n 000068: 41 01                      | i32.const 1\n 00006a: 0b                         | end\n00006c func[2]:\n 00006d: 41 02                      | i32.const 2\n 00006f: 0b                         | end\n000071 func[3]:\n 000072: 41 03                      | i32.const 3\n 000074: 0b                         | end\n000076 func[4]:\n 000077: 41 04                      | i32.const 4\n 000079: 0b                         | end\n00007b func[5]:\n 00007c: 41 05                      | i32.const 5\n 00007e: 0b                         | end\n000080 func[6]:\n 000081: 41 06                      | i32.const 6\n 000083: 0b                         | end\n000085 func[7]:\n 000086: 41 07                      | i32.const 7\n 000088: 0b                         | end\n00008a func[8]:\n 00008b: 41 08                      | i32.const 8\n 00008d: 0b                         | end\n00008f func[9]:\n 000090: 41 09                      | i32.const 9\n 000092: 0b                         | end\n000094 func[10] <test>:\n 000095: 41 0c                      | i32.const 12\n 000097: 41 04                      | i32.const 4\n 000099: 41 00                      | i32.const 0\n 00009b: fc 0c 01 01                | table.init 1 1\n 00009f: 0b                         | end\n"
    },
    "table_init.27.wasm": {
      "header": "\ntable_init.27.wasm:\tfile format wasm 0x1\n\nSections:\n\n     Type start=0x0000000a end=0x00000012 (size=0x00000008) count: 2\n Function start=0x00000014 end=0x00000020 (size=0x0000000c) count: 11\n    Table start=0x00000022 end=0x0000002b (size=0x00000009) count: 2\n   Export start=0x0000002d end=0x00000035 (size=0x00000008) count: 1\n     Elem start=0x00000037 end=0x0000005e (size=0x00000027) count: 4\n     Code start=0x00000060 end=0x000000a0 (size=0x00000040) count: 11\n",
      "details": "\ntable_init.27.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nType[2]:\n - type[0] () -> i32\n - type[1] () -> nil\nFunction[11]:\n - func[0] sig=0\n - func[1] sig=0\n - func[2] sig=0\n - func[3] sig=0\n - func[4] sig=0\n - func[5] sig=0\n - func[6] sig=0\n - func[7] sig=0\n - func[8] sig=0\n - func[9] sig=0\n - func[10] sig=1 <test>\nTable[2]:\n - table[0] type=funcref initial=30 max=30\n - table[1] type=funcref initial=28 max=28\nExport[1]:\n - func[10] <test> -> \"test\"\nElem[4]:\n - segment[0] flags=2 table=1 count=4 - init i32=2\n  - elem[2] = ref.func:3\n  - elem[3] = ref.func:1\n  - elem[4] = ref.func:4\n  - elem[5] = ref.func:1\n - segment[1] flags=1 table=0 count=4\n  - elem[2] = ref.func:2\n  - elem[3] = ref.func:7\n  - elem[4] = ref.func:1\n  - elem[5] = ref.func:8\n - segment[2] flags=2 table=1 count=5 - init i32=12\n  - elem[12] = ref.func:7\n  - elem[13] = ref.func:5\n  - elem[14] = ref.func:2\n  - elem[15] = ref.func:3\n  - elem[16] = ref.func:6\n - segment[3] flags=1 table=0 count=5\n  - elem[12] = ref.func:5\n  - elem[13] = ref.func:9\n  - elem[14] = ref.func:2\n  - elem[15] = ref.func:7\n  - elem[16] = ref.func:6\nCode[11]:\n - func[0] size=4\n - func[1] size=4\n - func[2] size=4\n - func[3] size=4\n - func[4] size=4\n - func[5] size=4\n - func[6] size=4\n - func[7] size=4\n - func[8] size=4\n - func[9] size=4\n - func[10] size=12 <test>\n",
      "disassemble": "\ntable_init.27.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n000062 func[0]:\n 000063: 41 00                      | i32.const 0\n 000065: 0b                         | end\n000067 func[1]:\n 000068: 41 01                      | i32.const 1\n 00006a: 0b                         | end\n00006c func[2]:\n 00006d: 41 02                      | i32.const 2\n 00006f: 0b                         | end\n000071 func[3]:\n 000072: 41 03                      | i32.const 3\n 000074: 0b                         | end\n000076 func[4]:\n 000077: 41 04                      | i32.const 4\n 000079: 0b                         | end\n00007b func[5]:\n 00007c: 41 05                      | i32.const 5\n 00007e: 0b                         | end\n000080 func[6]:\n 000081: 41 06                      | i32.const 6\n 000083: 0b                         | end\n000085 func[7]:\n 000086: 41 07                      | i32.const 7\n 000088: 0b                         | end\n00008a func[8]:\n 00008b: 41 08                      | i32.const 8\n 00008d: 0b                         | end\n00008f func[9]:\n 000090: 41 09                      | i32.const 9\n 000092: 0b                         | end\n000094 func[10] <test>:\n 000095: 41 0c                      | i32.const 12\n 000097: 41 05                      | i32.const 5\n 000099: 41 00                      | i32.const 0\n 00009b: fc 0c 01 01                | table.init 1 1\n 00009f: 0b                         | end\n"
    },
    "table_init.28.wasm": {
      "header": "\ntable_init.28.wasm:\tfile format wasm 0x1\n\nSections:\n\n     Type start=0x0000000a end=0x00000012 (size=0x00000008) count: 2\n Function start=0x00000014 end=0x00000020 (size=0x0000000c) count: 11\n    Table start=0x00000022 end=0x0000002b (size=0x00000009) count: 2\n   Export start=0x0000002d end=0x00000035 (size=0x00000008) count: 1\n     Elem start=0x00000037 end=0x0000005e (size=0x00000027) count: 4\n     Code start=0x00000060 end=0x000000a0 (size=0x00000040) count: 11\n",
      "details": "\ntable_init.28.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nType[2]:\n - type[0] () -> i32\n - type[1] () -> nil\nFunction[11]:\n - func[0] sig=0\n - func[1] sig=0\n - func[2] sig=0\n - func[3] sig=0\n - func[4] sig=0\n - func[5] sig=0\n - func[6] sig=0\n - func[7] sig=0\n - func[8] sig=0\n - func[9] sig=0\n - func[10] sig=1 <test>\nTable[2]:\n - table[0] type=funcref initial=30 max=30\n - table[1] type=funcref initial=28 max=28\nExport[1]:\n - func[10] <test> -> \"test\"\nElem[4]:\n - segment[0] flags=2 table=1 count=4 - init i32=2\n  - elem[2] = ref.func:3\n  - elem[3] = ref.func:1\n  - elem[4] = ref.func:4\n  - elem[5] = ref.func:1\n - segment[1] flags=1 table=0 count=4\n  - elem[2] = ref.func:2\n  - elem[3] = ref.func:7\n  - elem[4] = ref.func:1\n  - elem[5] = ref.func:8\n - segment[2] flags=2 table=1 count=5 - init i32=12\n  - elem[12] = ref.func:7\n  - elem[13] = ref.func:5\n  - elem[14] = ref.func:2\n  - elem[15] = ref.func:3\n  - elem[16] = ref.func:6\n - segment[3] flags=1 table=0 count=5\n  - elem[12] = ref.func:5\n  - elem[13] = ref.func:9\n  - elem[14] = ref.func:2\n  - elem[15] = ref.func:7\n  - elem[16] = ref.func:6\nCode[11]:\n - func[0] size=4\n - func[1] size=4\n - func[2] size=4\n - func[3] size=4\n - func[4] size=4\n - func[5] size=4\n - func[6] size=4\n - func[7] size=4\n - func[8] size=4\n - func[9] size=4\n - func[10] size=12 <test>\n",
      "disassemble": "\ntable_init.28.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n000062 func[0]:\n 000063: 41 00                      | i32.const 0\n 000065: 0b                         | end\n000067 func[1]:\n 000068: 41 01                      | i32.const 1\n 00006a: 0b                         | end\n00006c func[2]:\n 00006d: 41 02                      | i32.const 2\n 00006f: 0b                         | end\n000071 func[3]:\n 000072: 41 03                      | i32.const 3\n 000074: 0b                         | end\n000076 func[4]:\n 000077: 41 04                      | i32.const 4\n 000079: 0b                         | end\n00007b func[5]:\n 00007c: 41 05                      | i32.const 5\n 00007e: 0b                         | end\n000080 func[6]:\n 000081: 41 06                      | i32.const 6\n 000083: 0b                         | end\n000085 func[7]:\n 000086: 41 07                      | i32.const 7\n 000088: 0b                         | end\n00008a func[8]:\n 00008b: 41 08                      | i32.const 8\n 00008d: 0b                         | end\n00008f func[9]:\n 000090: 41 09                      | i32.const 9\n 000092: 0b                         | end\n000094 func[10] <test>:\n 000095: 41 1c                      | i32.const 28\n 000097: 41 02                      | i32.const 2\n 000099: 41 00                      | i32.const 0\n 00009b: fc 0c 01 01                | table.init 1 1\n 00009f: 0b                         | end\n"
    },
    "table_init.29.wasm": {
      "header": "\ntable_init.29.wasm:\tfile format wasm 0x1\n\nSections:\n\n     Type start=0x0000000a end=0x00000012 (size=0x00000008) count: 2\n Function start=0x00000014 end=0x00000020 (size=0x0000000c) count: 11\n    Table start=0x00000022 end=0x0000002b (size=0x00000009) count: 2\n   Export start=0x0000002d end=0x00000035 (size=0x00000008) count: 1\n     Elem start=0x00000037 end=0x0000005e (size=0x00000027) count: 4\n     Code start=0x00000060 end=0x000000a0 (size=0x00000040) count: 11\n",
      "details": "\ntable_init.29.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nType[2]:\n - type[0] () -> i32\n - type[1] () -> nil\nFunction[11]:\n - func[0] sig=0\n - func[1] sig=0\n - func[2] sig=0\n - func[3] sig=0\n - func[4] sig=0\n - func[5] sig=0\n - func[6] sig=0\n - func[7] sig=0\n - func[8] sig=0\n - func[9] sig=0\n - func[10] sig=1 <test>\nTable[2]:\n - table[0] type=funcref initial=30 max=30\n - table[1] type=funcref initial=28 max=28\nExport[1]:\n - func[10] <test> -> \"test\"\nElem[4]:\n - segment[0] flags=2 table=1 count=4 - init i32=2\n  - elem[2] = ref.func:3\n  - elem[3] = ref.func:1\n  - elem[4] = ref.func:4\n  - elem[5] = ref.func:1\n - segment[1] flags=1 table=0 count=4\n  - elem[2] = ref.func:2\n  - elem[3] = ref.func:7\n  - elem[4] = ref.func:1\n  - elem[5] = ref.func:8\n - segment[2] flags=2 table=1 count=5 - init i32=12\n  - elem[12] = ref.func:7\n  - elem[13] = ref.func:5\n  - elem[14] = ref.func:2\n  - elem[15] = ref.func:3\n  - elem[16] = ref.func:6\n - segment[3] flags=1 table=0 count=5\n  - elem[12] = ref.func:5\n  - elem[13] = ref.func:9\n  - elem[14] = ref.func:2\n  - elem[15] = ref.func:7\n  - elem[16] = ref.func:6\nCode[11]:\n - func[0] size=4\n - func[1] size=4\n - func[2] size=4\n - func[3] size=4\n - func[4] size=4\n - func[5] size=4\n - func[6] size=4\n - func[7] size=4\n - func[8] size=4\n - func[9] size=4\n - func[10] size=12 <test>\n",
      "disassemble": "\ntable_init.29.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n000062 func[0]:\n 000063: 41 00                      | i32.const 0\n 000065: 0b                         | end\n000067 func[1]:\n 000068: 41 01                      | i32.const 1\n 00006a: 0b                         | end\n00006c func[2]:\n 00006d: 41 02                      | i32.const 2\n 00006f: 0b                         | end\n000071 func[3]:\n 000072: 41 03                      | i32.const 3\n 000074: 0b                         | end\n000076 func[4]:\n 000077: 41 04                      | i32.const 4\n 000079: 0b                         | end\n00007b func[5]:\n 00007c: 41 05                      | i32.const 5\n 00007e: 0b                         | end\n000080 func[6]:\n 000081: 41 06                      | i32.const 6\n 000083: 0b                         | end\n000085 func[7]:\n 000086: 41 07                      | i32.const 7\n 000088: 0b                         | end\n00008a func[8]:\n 00008b: 41 08                      | i32.const 8\n 00008d: 0b                         | end\n00008f func[9]:\n 000090: 41 09                      | i32.const 9\n 000092: 0b                         | end\n000094 func[10] <test>:\n 000095: 41 1d                      | i32.const 29\n 000097: 41 02                      | i32.const 2\n 000099: 41 00                      | i32.const 0\n 00009b: fc 0c 01 01                | table.init 1 1\n 00009f: 0b                         | end\n"
    },
    "table_init.30.wasm": {
      "header": "\ntable_init.30.wasm:\tfile format wasm 0x1\n\nSections:\n\n     Type start=0x0000000a end=0x00000012 (size=0x00000008) count: 2\n Function start=0x00000014 end=0x00000020 (size=0x0000000c) count: 11\n    Table start=0x00000022 end=0x0000002b (size=0x00000009) count: 2\n   Export start=0x0000002d end=0x00000035 (size=0x00000008) count: 1\n     Elem start=0x00000037 end=0x0000005e (size=0x00000027) count: 4\n     Code start=0x00000060 end=0x000000a0 (size=0x00000040) count: 11\n",
      "details": "\ntable_init.30.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nType[2]:\n - type[0] () -> i32\n - type[1] () -> nil\nFunction[11]:\n - func[0] sig=0\n - func[1] sig=0\n - func[2] sig=0\n - func[3] sig=0\n - func[4] sig=0\n - func[5] sig=0\n - func[6] sig=0\n - func[7] sig=0\n - func[8] sig=0\n - func[9] sig=0\n - func[10] sig=1 <test>\nTable[2]:\n - table[0] type=funcref initial=30 max=30\n - table[1] type=funcref initial=28 max=28\nExport[1]:\n - func[10] <test> -> \"test\"\nElem[4]:\n - segment[0] flags=2 table=1 count=4 - init i32=2\n  - elem[2] = ref.func:3\n  - elem[3] = ref.func:1\n  - elem[4] = ref.func:4\n  - elem[5] = ref.func:1\n - segment[1] flags=1 table=0 count=4\n  - elem[2] = ref.func:2\n  - elem[3] = ref.func:7\n  - elem[4] = ref.func:1\n  - elem[5] = ref.func:8\n - segment[2] flags=2 table=1 count=5 - init i32=12\n  - elem[12] = ref.func:7\n  - elem[13] = ref.func:5\n  - elem[14] = ref.func:2\n  - elem[15] = ref.func:3\n  - elem[16] = ref.func:6\n - segment[3] flags=1 table=0 count=5\n  - elem[12] = ref.func:5\n  - elem[13] = ref.func:9\n  - elem[14] = ref.func:2\n  - elem[15] = ref.func:7\n  - elem[16] = ref.func:6\nCode[11]:\n - func[0] size=4\n - func[1] size=4\n - func[2] size=4\n - func[3] size=4\n - func[4] size=4\n - func[5] size=4\n - func[6] size=4\n - func[7] size=4\n - func[8] size=4\n - func[9] size=4\n - func[10] size=12 <test>\n",
      "disassemble": "\ntable_init.30.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n000062 func[0]:\n 000063: 41 00                      | i32.const 0\n 000065: 0b                         | end\n000067 func[1]:\n 000068: 41 01                      | i32.const 1\n 00006a: 0b                         | end\n00006c func[2]:\n 00006d: 41 02                      | i32.const 2\n 00006f: 0b                         | end\n000071 func[3]:\n 000072: 41 03                      | i32.const 3\n 000074: 0b                         | end\n000076 func[4]:\n 000077: 41 04                      | i32.const 4\n 000079: 0b                         | end\n00007b func[5]:\n 00007c: 41 05                      | i32.const 5\n 00007e: 0b                         | end\n000080 func[6]:\n 000081: 41 06                      | i32.const 6\n 000083: 0b                         | end\n000085 func[7]:\n 000086: 41 07                      | i32.const 7\n 000088: 0b                         | end\n00008a func[8]:\n 00008b: 41 08                      | i32.const 8\n 00008d: 0b                         | end\n00008f func[9]:\n 000090: 41 09                      | i32.const 9\n 000092: 0b                         | end\n000094 func[10] <test>:\n 000095: 41 1c                      | i32.const 28\n 000097: 41 04                      | i32.const 4\n 000099: 41 00                      | i32.const 0\n 00009b: fc 0c 01 01                | table.init 1 1\n 00009f: 0b                         | end\n"
    },
    "table_init.31.wasm": {
      "header": "\ntable_init.31.wasm:\tfile format wasm 0x1\n\nSections:\n\n     Type start=0x0000000a end=0x00000012 (size=0x00000008) count: 2\n Function start=0x00000014 end=0x00000020 (size=0x0000000c) count: 11\n    Table start=0x00000022 end=0x0000002b (size=0x00000009) count: 2\n   Export start=0x0000002d end=0x00000035 (size=0x00000008) count: 1\n     Elem start=0x00000037 end=0x0000005e (size=0x00000027) count: 4\n     Code start=0x00000060 end=0x000000a0 (size=0x00000040) count: 11\n",
      "details": "\ntable_init.31.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nType[2]:\n - type[0] () -> i32\n - type[1] () -> nil\nFunction[11]:\n - func[0] sig=0\n - func[1] sig=0\n - func[2] sig=0\n - func[3] sig=0\n - func[4] sig=0\n - func[5] sig=0\n - func[6] sig=0\n - func[7] sig=0\n - func[8] sig=0\n - func[9] sig=0\n - func[10] sig=1 <test>\nTable[2]:\n - table[0] type=funcref initial=30 max=30\n - table[1] type=funcref initial=28 max=28\nExport[1]:\n - func[10] <test> -> \"test\"\nElem[4]:\n - segment[0] flags=2 table=1 count=4 - init i32=2\n  - elem[2] = ref.func:3\n  - elem[3] = ref.func:1\n  - elem[4] = ref.func:4\n  - elem[5] = ref.func:1\n - segment[1] flags=1 table=0 count=4\n  - elem[2] = ref.func:2\n  - elem[3] = ref.func:7\n  - elem[4] = ref.func:1\n  - elem[5] = ref.func:8\n - segment[2] flags=2 table=1 count=5 - init i32=12\n  - elem[12] = ref.func:7\n  - elem[13] = ref.func:5\n  - elem[14] = ref.func:2\n  - elem[15] = ref.func:3\n  - elem[16] = ref.func:6\n - segment[3] flags=1 table=0 count=5\n  - elem[12] = ref.func:5\n  - elem[13] = ref.func:9\n  - elem[14] = ref.func:2\n  - elem[15] = ref.func:7\n  - elem[16] = ref.func:6\nCode[11]:\n - func[0] size=4\n - func[1] size=4\n - func[2] size=4\n - func[3] size=4\n - func[4] size=4\n - func[5] size=4\n - func[6] size=4\n - func[7] size=4\n - func[8] size=4\n - func[9] size=4\n - func[10] size=12 <test>\n",
      "disassemble": "\ntable_init.31.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n000062 func[0]:\n 000063: 41 00                      | i32.const 0\n 000065: 0b                         | end\n000067 func[1]:\n 000068: 41 01                      | i32.const 1\n 00006a: 0b                         | end\n00006c func[2]:\n 00006d: 41 02                      | i32.const 2\n 00006f: 0b                         | end\n000071 func[3]:\n 000072: 41 03                      | i32.const 3\n 000074: 0b                         | end\n000076 func[4]:\n 000077: 41 04                      | i32.const 4\n 000079: 0b                         | end\n00007b func[5]:\n 00007c: 41 05                      | i32.const 5\n 00007e: 0b                         | end\n000080 func[6]:\n 000081: 41 06                      | i32.const 6\n 000083: 0b                         | end\n000085 func[7]:\n 000086: 41 07                      | i32.const 7\n 000088: 0b                         | end\n00008a func[8]:\n 00008b: 41 08                      | i32.const 8\n 00008d: 0b                         | end\n00008f func[9]:\n 000090: 41 09                      | i32.const 9\n 000092: 0b                         | end\n000094 func[10] <test>:\n 000095: 41 1d                      | i32.const 29\n 000097: 41 05                      | i32.const 5\n 000099: 41 00                      | i32.const 0\n 00009b: fc 0c 01 01                | table.init 1 1\n 00009f: 0b                         | end\n"
    },
    "table_init.95.wasm": {
      "header": "\ntable_init.95.wasm:\tfile format wasm 0x1\n\nSections:\n\n     Type start=0x0000000a end=0x00000019 (size=0x0000000f) count: 3\n Function start=0x0000001b end=0x0000002e (size=0x00000013) count: 18\n    Table start=0x00000030 end=0x00000035 (size=0x00000005) count: 1\n   Export start=0x00000037 end=0x0000009b (size=0x00000064) count: 18\n     Elem start=0x0000009d end=0x000000b1 (size=0x00000014) count: 1\n     Code start=0x000000b3 end=0x00000119 (size=0x00000066) count: 18\n",
      "details": "\ntable_init.95.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nType[3]:\n - type[0] () -> i32\n - type[1] (i32) -> i32\n - type[2] (i32, i32) -> nil\nFunction[18]:\n - func[0] sig=0 <f0>\n - func[1] sig=0 <f1>\n - func[2] sig=0 <f2>\n - func[3] sig=0 <f3>\n - func[4] sig=0 <f4>\n - func[5] sig=0 <f5>\n - func[6] sig=0 <f6>\n - func[7] sig=0 <f7>\n - func[8] sig=0 <f8>\n - func[9] sig=0 <f9>\n - func[10] sig=0 <f10>\n - func[11] sig=0 <f11>\n - func[12] sig=0 <f12>\n - func[13] sig=0 <f13>\n - func[14] sig=0 <f14>\n - func[15] sig=0 <f15>\n - func[16] sig=1 <test>\n - func[17] sig=2 <run>\nTable[1]:\n - table[0] type=funcref initial=32 max=64\nExport[18]:\n - func[0] <f0> -> \"f0\"\n - func[1] <f1> -> \"f1\"\n - func[2] <f2> -> \"f2\"\n - func[3] <f3> -> \"f3\"\n - func[4] <f4> -> \"f4\"\n - func[5] <f5> -> \"f5\"\n - func[6] <f6> -> \"f6\"\n - func[7] <f7> -> \"f7\"\n - func[8] <f8> -> \"f8\"\n - func[9] <f9> -> \"f9\"\n - func[10] <f10> -> \"f10\"\n - func[11] <f11> -> \"f11\"\n - func[12] <f12> -> \"f12\"\n - func[13] <f13> -> \"f13\"\n - func[14] <f14> -> \"f14\"\n - func[15] <f15> -> \"f15\"\n - func[16] <test> -> \"test\"\n - func[17] <run> -> \"run\"\nElem[1]:\n - segment[0] flags=1 table=0 count=16\n  - elem[0] = ref.func:0 <f0>\n  - elem[1] = ref.func:1 <f1>\n  - elem[2] = ref.func:2 <f2>\n  - elem[3] = ref.func:3 <f3>\n  - elem[4] = ref.func:4 <f4>\n  - elem[5] = ref.func:5 <f5>\n  - elem[6] = ref.func:6 <f6>\n  - elem[7] = ref.func:7 <f7>\n  - elem[8] = ref.func:8 <f8>\n  - elem[9] = ref.func:9 <f9>\n  - elem[10] = ref.func:10 <f10>\n  - elem[11] = ref.func:11 <f11>\n  - elem[12] = ref.func:12 <f12>\n  - elem[13] = ref.func:13 <f13>\n  - elem[14] = ref.func:14 <f14>\n  - elem[15] = ref.func:15 <f15>\nCode[18]:\n - func[0] size=4 <f0>\n - func[1] size=4 <f1>\n - func[2] size=4 <f2>\n - func[3] size=4 <f3>\n - func[4] size=4 <f4>\n - func[5] size=4 <f5>\n - func[6] size=4 <f6>\n - func[7] size=4 <f7>\n - func[8] size=4 <f8>\n - func[9] size=4 <f9>\n - func[10] size=4 <f10>\n - func[11] size=4 <f11>\n - func[12] size=4 <f12>\n - func[13] size=4 <f13>\n - func[14] size=4 <f14>\n - func[15] size=4 <f15>\n - func[16] size=7 <test>\n - func[17] size=12 <run>\n",
      "disassemble": "\ntable_init.95.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n0000b5 func[0] <f0>:\n 0000b6: 41 00                      | i32.const 0\n 0000b8: 0b                         | end\n0000ba func[1] <f1>:\n 0000bb: 41 01                      | i32.const 1\n 0000bd: 0b                         | end\n0000bf func[2] <f2>:\n 0000c0: 41 02                      | i32.const 2\n 0000c2: 0b                         | end\n0000c4 func[3] <f3>:\n 0000c5: 41 03                      | i32.const 3\n 0000c7: 0b                         | end\n0000c9 func[4] <f4>:\n 0000ca: 41 04                      | i32.const 4\n 0000cc: 0b                         | end\n0000ce func[5] <f5>:\n 0000cf: 41 05                      | i32.const 5\n 0000d1: 0b                         | end\n0000d3 func[6] <f6>:\n 0000d4: 41 06                      | i32.const 6\n 0000d6: 0b                         | end\n0000d8 func[7] <f7>:\n 0000d9: 41 07                      | i32.const 7\n 0000db: 0b                         | end\n0000dd func[8] <f8>:\n 0000de: 41 08                      | i32.const 8\n 0000e0: 0b                         | end\n0000e2 func[9] <f9>:\n 0000e3: 41 09                      | i32.const 9\n 0000e5: 0b                         | end\n0000e7 func[10] <f10>:\n 0000e8: 41 0a                      | i32.const 10\n 0000ea: 0b                         | end\n0000ec func[11] <f11>:\n 0000ed: 41 0b                      | i32.const 11\n 0000ef: 0b                         | end\n0000f1 func[12] <f12>:\n 0000f2: 41 0c                      | i32.const 12\n 0000f4: 0b                         | end\n0000f6 func[13] <f13>:\n 0000f7: 41 0d                      | i32.const 13\n 0000f9: 0b                         | end\n0000fb func[14] <f14>:\n 0000fc: 41 0e                      | i32.const 14\n 0000fe: 0b                         | end\n000100 func[15] <f15>:\n 000101: 41 0f                      | i32.const 15\n 000103: 0b                         | end\n000105 func[16] <test>:\n 000106: 20 00                      | local.get 0\n 000108: 11 00 00                   | call_indirect 0 (type 0)\n 00010b: 0b                         | end\n00010d func[17] <run>:\n 00010e: 20 00                      | local.get 0\n 000110: 41 00                      | i32.const 0\n 000112: 20 01                      | local.get 1\n 000114: fc 0c 00 00                | table.init 0 0\n 000118: 0b                         | end\n"
    },
    "table_init.96.wasm": {
      "header": "\ntable_init.96.wasm:\tfile format wasm 0x1\n\nSections:\n\n     Type start=0x0000000a end=0x00000019 (size=0x0000000f) count: 3\n Function start=0x0000001b end=0x0000002e (size=0x00000013) count: 18\n    Table start=0x00000030 end=0x00000035 (size=0x00000005) count: 1\n   Export start=0x00000037 end=0x0000009b (size=0x00000064) count: 18\n     Elem start=0x0000009d end=0x000000b1 (size=0x00000014) count: 1\n     Code start=0x000000b3 end=0x00000119 (size=0x00000066) count: 18\n",
      "details": "\ntable_init.96.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nType[3]:\n - type[0] () -> i32\n - type[1] (i32) -> i32\n - type[2] (i32, i32) -> nil\nFunction[18]:\n - func[0] sig=0 <f0>\n - func[1] sig=0 <f1>\n - func[2] sig=0 <f2>\n - func[3] sig=0 <f3>\n - func[4] sig=0 <f4>\n - func[5] sig=0 <f5>\n - func[6] sig=0 <f6>\n - func[7] sig=0 <f7>\n - func[8] sig=0 <f8>\n - func[9] sig=0 <f9>\n - func[10] sig=0 <f10>\n - func[11] sig=0 <f11>\n - func[12] sig=0 <f12>\n - func[13] sig=0 <f13>\n - func[14] sig=0 <f14>\n - func[15] sig=0 <f15>\n - func[16] sig=1 <test>\n - func[17] sig=2 <run>\nTable[1]:\n - table[0] type=funcref initial=32 max=64\nExport[18]:\n - func[0] <f0> -> \"f0\"\n - func[1] <f1> -> \"f1\"\n - func[2] <f2> -> \"f2\"\n - func[3] <f3> -> \"f3\"\n - func[4] <f4> -> \"f4\"\n - func[5] <f5> -> \"f5\"\n - func[6] <f6> -> \"f6\"\n - func[7] <f7> -> \"f7\"\n - func[8] <f8> -> \"f8\"\n - func[9] <f9> -> \"f9\"\n - func[10] <f10> -> \"f10\"\n - func[11] <f11> -> \"f11\"\n - func[12] <f12> -> \"f12\"\n - func[13] <f13> -> \"f13\"\n - func[14] <f14> -> \"f14\"\n - func[15] <f15> -> \"f15\"\n - func[16] <test> -> \"test\"\n - func[17] <run> -> \"run\"\nElem[1]:\n - segment[0] flags=1 table=0 count=16\n  - elem[0] = ref.func:0 <f0>\n  - elem[1] = ref.func:1 <f1>\n  - elem[2] = ref.func:2 <f2>\n  - elem[3] = ref.func:3 <f3>\n  - elem[4] = ref.func:4 <f4>\n  - elem[5] = ref.func:5 <f5>\n  - elem[6] = ref.func:6 <f6>\n  - elem[7] = ref.func:7 <f7>\n  - elem[8] = ref.func:8 <f8>\n  - elem[9] = ref.func:9 <f9>\n  - elem[10] = ref.func:10 <f10>\n  - elem[11] = ref.func:11 <f11>\n  - elem[12] = ref.func:12 <f12>\n  - elem[13] = ref.func:13 <f13>\n  - elem[14] = ref.func:14 <f14>\n  - elem[15] = ref.func:15 <f15>\nCode[18]:\n - func[0] size=4 <f0>\n - func[1] size=4 <f1>\n - func[2] size=4 <f2>\n - func[3] size=4 <f3>\n - func[4] size=4 <f4>\n - func[5] size=4 <f5>\n - func[6] size=4 <f6>\n - func[7] size=4 <f7>\n - func[8] size=4 <f8>\n - func[9] size=4 <f9>\n - func[10] size=4 <f10>\n - func[11] size=4 <f11>\n - func[12] size=4 <f12>\n - func[13] size=4 <f13>\n - func[14] size=4 <f14>\n - func[15] size=4 <f15>\n - func[16] size=7 <test>\n - func[17] size=12 <run>\n",
      "disassemble": "\ntable_init.96.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n0000b5 func[0] <f0>:\n 0000b6: 41 00                      | i32.const 0\n 0000b8: 0b                         | end\n0000ba func[1] <f1>:\n 0000bb: 41 01                      | i32.const 1\n 0000bd: 0b                         | end\n0000bf func[2] <f2>:\n 0000c0: 41 02                      | i32.const 2\n 0000c2: 0b                         | end\n0000c4 func[3] <f3>:\n 0000c5: 41 03                      | i32.const 3\n 0000c7: 0b                         | end\n0000c9 func[4] <f4>:\n 0000ca: 41 04                      | i32.const 4\n 0000cc: 0b                         | end\n0000ce func[5] <f5>:\n 0000cf: 41 05                      | i32.const 5\n 0000d1: 0b                         | end\n0000d3 func[6] <f6>:\n 0000d4: 41 06                      | i32.const 6\n 0000d6: 0b                         | end\n0000d8 func[7] <f7>:\n 0000d9: 41 07                      | i32.const 7\n 0000db: 0b                         | end\n0000dd func[8] <f8>:\n 0000de: 41 08                      | i32.const 8\n 0000e0: 0b                         | end\n0000e2 func[9] <f9>:\n 0000e3: 41 09                      | i32.const 9\n 0000e5: 0b                         | end\n0000e7 func[10] <f10>:\n 0000e8: 41 0a                      | i32.const 10\n 0000ea: 0b                         | end\n0000ec func[11] <f11>:\n 0000ed: 41 0b                      | i32.const 11\n 0000ef: 0b                         | end\n0000f1 func[12] <f12>:\n 0000f2: 41 0c                      | i32.const 12\n 0000f4: 0b                         | end\n0000f6 func[13] <f13>:\n 0000f7: 41 0d                      | i32.const 13\n 0000f9: 0b                         | end\n0000fb func[14] <f14>:\n 0000fc: 41 0e                      | i32.const 14\n 0000fe: 0b                         | end\n000100 func[15] <f15>:\n 000101: 41 0f                      | i32.const 15\n 000103: 0b                         | end\n000105 func[16] <test>:\n 000106: 20 00                      | local.get 0\n 000108: 11 00 00                   | call_indirect 0 (type 0)\n 00010b: 0b                         | end\n00010d func[17] <run>:\n 00010e: 20 00                      | local.get 0\n 000110: 41 00                      | i32.const 0\n 000112: 20 01                      | local.get 1\n 000114: fc 0c 00 00                | table.init 0 0\n 000118: 0b                         | end\n"
    },
    "table_init.97.wasm": {
      "header": "\ntable_init.97.wasm:\tfile format wasm 0x1\n\nSections:\n\n     Type start=0x0000000a end=0x00000019 (size=0x0000000f) count: 3\n Function start=0x0000001b end=0x0000002e (size=0x00000013) count: 18\n    Table start=0x00000030 end=0x00000037 (size=0x00000007) count: 1\n   Export start=0x00000039 end=0x0000009d (size=0x00000064) count: 18\n     Elem start=0x0000009f end=0x000000b3 (size=0x00000014) count: 1\n     Code start=0x000000b5 end=0x0000011b (size=0x00000066) count: 18\n",
      "details": "\ntable_init.97.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nType[3]:\n - type[0] () -> i32\n - type[1] (i32) -> i32\n - type[2] (i32, i32) -> nil\nFunction[18]:\n - func[0] sig=0 <f0>\n - func[1] sig=0 <f1>\n - func[2] sig=0 <f2>\n - func[3] sig=0 <f3>\n - func[4] sig=0 <f4>\n - func[5] sig=0 <f5>\n - func[6] sig=0 <f6>\n - func[7] sig=0 <f7>\n - func[8] sig=0 <f8>\n - func[9] sig=0 <f9>\n - func[10] sig=0 <f10>\n - func[11] sig=0 <f11>\n - func[12] sig=0 <f12>\n - func[13] sig=0 <f13>\n - func[14] sig=0 <f14>\n - func[15] sig=0 <f15>\n - func[16] sig=1 <test>\n - func[17] sig=2 <run>\nTable[1]:\n - table[0] type=funcref initial=160 max=320\nExport[18]:\n - func[0] <f0> -> \"f0\"\n - func[1] <f1> -> \"f1\"\n - func[2] <f2> -> \"f2\"\n - func[3] <f3> -> \"f3\"\n - func[4] <f4> -> \"f4\"\n - func[5] <f5> -> \"f5\"\n - func[6] <f6> -> \"f6\"\n - func[7] <f7> -> \"f7\"\n - func[8] <f8> -> \"f8\"\n - func[9] <f9> -> \"f9\"\n - func[10] <f10> -> \"f10\"\n - func[11] <f11> -> \"f11\"\n - func[12] <f12> -> \"f12\"\n - func[13] <f13> -> \"f13\"\n - func[14] <f14> -> \"f14\"\n - func[15] <f15> -> \"f15\"\n - func[16] <test> -> \"test\"\n - func[17] <run> -> \"run\"\nElem[1]:\n - segment[0] flags=1 table=0 count=16\n  - elem[0] = ref.func:0 <f0>\n  - elem[1] = ref.func:1 <f1>\n  - elem[2] = ref.func:2 <f2>\n  - elem[3] = ref.func:3 <f3>\n  - elem[4] = ref.func:4 <f4>\n  - elem[5] = ref.func:5 <f5>\n  - elem[6] = ref.func:6 <f6>\n  - elem[7] = ref.func:7 <f7>\n  - elem[8] = ref.func:8 <f8>\n  - elem[9] = ref.func:9 <f9>\n  - elem[10] = ref.func:10 <f10>\n  - elem[11] = ref.func:11 <f11>\n  - elem[12] = ref.func:12 <f12>\n  - elem[13] = ref.func:13 <f13>\n  - elem[14] = ref.func:14 <f14>\n  - elem[15] = ref.func:15 <f15>\nCode[18]:\n - func[0] size=4 <f0>\n - func[1] size=4 <f1>\n - func[2] size=4 <f2>\n - func[3] size=4 <f3>\n - func[4] size=4 <f4>\n - func[5] size=4 <f5>\n - func[6] size=4 <f6>\n - func[7] size=4 <f7>\n - func[8] size=4 <f8>\n - func[9] size=4 <f9>\n - func[10] size=4 <f10>\n - func[11] size=4 <f11>\n - func[12] size=4 <f12>\n - func[13] size=4 <f13>\n - func[14] size=4 <f14>\n - func[15] size=4 <f15>\n - func[16] size=7 <test>\n - func[17] size=12 <run>\n",
      "disassemble": "\ntable_init.97.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n0000b7 func[0] <f0>:\n 0000b8: 41 00                      | i32.const 0\n 0000ba: 0b                         | end\n0000bc func[1] <f1>:\n 0000bd: 41 01                      | i32.const 1\n 0000bf: 0b                         | end\n0000c1 func[2] <f2>:\n 0000c2: 41 02                      | i32.const 2\n 0000c4: 0b                         | end\n0000c6 func[3] <f3>:\n 0000c7: 41 03                      | i32.const 3\n 0000c9: 0b                         | end\n0000cb func[4] <f4>:\n 0000cc: 41 04                      | i32.const 4\n 0000ce: 0b                         | end\n0000d0 func[5] <f5>:\n 0000d1: 41 05                      | i32.const 5\n 0000d3: 0b                         | end\n0000d5 func[6] <f6>:\n 0000d6: 41 06                      | i32.const 6\n 0000d8: 0b                         | end\n0000da func[7] <f7>:\n 0000db: 41 07                      | i32.const 7\n 0000dd: 0b                         | end\n0000df func[8] <f8>:\n 0000e0: 41 08                      | i32.const 8\n 0000e2: 0b                         | end\n0000e4 func[9] <f9>:\n 0000e5: 41 09                      | i32.const 9\n 0000e7: 0b                         | end\n0000e9 func[10] <f10>:\n 0000ea: 41 0a                      | i32.const 10\n 0000ec: 0b                         | end\n0000ee func[11] <f11>:\n 0000ef: 41 0b                      | i32.const 11\n 0000f1: 0b                         | end\n0000f3 func[12] <f12>:\n 0000f4: 41 0c                      | i32.const 12\n 0000f6: 0b                         | end\n0000f8 func[13] <f13>:\n 0000f9: 41 0d                      | i32.const 13\n 0000fb: 0b                         | end\n0000fd func[14] <f14>:\n 0000fe: 41 0e                      | i32.const 14\n 000100: 0b                         | end\n000102 func[15] <f15>:\n 000103: 41 0f                      | i32.const 15\n 000105: 0b                         | end\n000107 func[16] <test>:\n 000108: 20 00                      | local.get 0\n 00010a: 11 00 00                   | call_indirect 0 (type 0)\n 00010d: 0b                         | end\n00010f func[17] <run>:\n 000110: 20 00                      | local.get 0\n 000112: 41 00                      | i32.const 0\n 000114: 20 01                      | local.get 1\n 000116: fc 0c 00 00                | table.init 0 0\n 00011a: 0b                         | end\n"
    },
    "table_init.98.wasm": {
      "header": "\ntable_init.98.wasm:\tfile format wasm 0x1\n\nSections:\n\n     Type start=0x0000000a end=0x00000019 (size=0x0000000f) count: 3\n Function start=0x0000001b end=0x0000002e (size=0x00000013) count: 18\n    Table start=0x00000030 end=0x00000037 (size=0x00000007) count: 1\n   Export start=0x00000039 end=0x0000009d (size=0x00000064) count: 18\n     Elem start=0x0000009f end=0x000000b3 (size=0x00000014) count: 1\n     Code start=0x000000b5 end=0x0000011b (size=0x00000066) count: 18\n",
      "details": "\ntable_init.98.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nType[3]:\n - type[0] () -> i32\n - type[1] (i32) -> i32\n - type[2] (i32, i32) -> nil\nFunction[18]:\n - func[0] sig=0 <f0>\n - func[1] sig=0 <f1>\n - func[2] sig=0 <f2>\n - func[3] sig=0 <f3>\n - func[4] sig=0 <f4>\n - func[5] sig=0 <f5>\n - func[6] sig=0 <f6>\n - func[7] sig=0 <f7>\n - func[8] sig=0 <f8>\n - func[9] sig=0 <f9>\n - func[10] sig=0 <f10>\n - func[11] sig=0 <f11>\n - func[12] sig=0 <f12>\n - func[13] sig=0 <f13>\n - func[14] sig=0 <f14>\n - func[15] sig=0 <f15>\n - func[16] sig=1 <test>\n - func[17] sig=2 <run>\nTable[1]:\n - table[0] type=funcref initial=160 max=320\nExport[18]:\n - func[0] <f0> -> \"f0\"\n - func[1] <f1> -> \"f1\"\n - func[2] <f2> -> \"f2\"\n - func[3] <f3> -> \"f3\"\n - func[4] <f4> -> \"f4\"\n - func[5] <f5> -> \"f5\"\n - func[6] <f6> -> \"f6\"\n - func[7] <f7> -> \"f7\"\n - func[8] <f8> -> \"f8\"\n - func[9] <f9> -> \"f9\"\n - func[10] <f10> -> \"f10\"\n - func[11] <f11> -> \"f11\"\n - func[12] <f12> -> \"f12\"\n - func[13] <f13> -> \"f13\"\n - func[14] <f14> -> \"f14\"\n - func[15] <f15> -> \"f15\"\n - func[16] <test> -> \"test\"\n - func[17] <run> -> \"run\"\nElem[1]:\n - segment[0] flags=1 table=0 count=16\n  - elem[0] = ref.func:0 <f0>\n  - elem[1] = ref.func:1 <f1>\n  - elem[2] = ref.func:2 <f2>\n  - elem[3] = ref.func:3 <f3>\n  - elem[4] = ref.func:4 <f4>\n  - elem[5] = ref.func:5 <f5>\n  - elem[6] = ref.func:6 <f6>\n  - elem[7] = ref.func:7 <f7>\n  - elem[8] = ref.func:8 <f8>\n  - elem[9] = ref.func:9 <f9>\n  - elem[10] = ref.func:10 <f10>\n  - elem[11] = ref.func:11 <f11>\n  - elem[12] = ref.func:12 <f12>\n  - elem[13] = ref.func:13 <f13>\n  - elem[14] = ref.func:14 <f14>\n  - elem[15] = ref.func:15 <f15>\nCode[18]:\n - func[0] size=4 <f0>\n - func[1] size=4 <f1>\n - func[2] size=4 <f2>\n - func[3] size=4 <f3>\n - func[4] size=4 <f4>\n - func[5] size=4 <f5>\n - func[6] size=4 <f6>\n - func[7] size=4 <f7>\n - func[8] size=4 <f8>\n - func[9] size=4 <f9>\n - func[10] size=4 <f10>\n - func[11] size=4 <f11>\n - func[12] size=4 <f12>\n - func[13] size=4 <f13>\n - func[14] size=4 <f14>\n - func[15] size=4 <f15>\n - func[16] size=7 <test>\n - func[17] size=12 <run>\n",
      "disassemble": "\ntable_init.98.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n0000b7 func[0] <f0>:\n 0000b8: 41 00                      | i32.const 0\n 0000ba: 0b                         | end\n0000bc func[1] <f1>:\n 0000bd: 41 01                      | i32.const 1\n 0000bf: 0b                         | end\n0000c1 func[2] <f2>:\n 0000c2: 41 02                      | i32.const 2\n 0000c4: 0b                         | end\n0000c6 func[3] <f3>:\n 0000c7: 41 03                      | i32.const 3\n 0000c9: 0b                         | end\n0000cb func[4] <f4>:\n 0000cc: 41 04                      | i32.const 4\n 0000ce: 0b                         | end\n0000d0 func[5] <f5>:\n 0000d1: 41 05                      | i32.const 5\n 0000d3: 0b                         | end\n0000d5 func[6] <f6>:\n 0000d6: 41 06                      | i32.const 6\n 0000d8: 0b                         | end\n0000da func[7] <f7>:\n 0000db: 41 07                      | i32.const 7\n 0000dd: 0b                         | end\n0000df func[8] <f8>:\n 0000e0: 41 08                      | i32.const 8\n 0000e2: 0b                         | end\n0000e4 func[9] <f9>:\n 0000e5: 41 09                      | i32.const 9\n 0000e7: 0b                         | end\n0000e9 func[10] <f10>:\n 0000ea: 41 0a                      | i32.const 10\n 0000ec: 0b                         | end\n0000ee func[11] <f11>:\n 0000ef: 41 0b                      | i32.const 11\n 0000f1: 0b                         | end\n0000f3 func[12] <f12>:\n 0000f4: 41 0c                      | i32.const 12\n 0000f6: 0b                         | end\n0000f8 func[13] <f13>:\n 0000f9: 41 0d                      | i32.const 13\n 0000fb: 0b                         | end\n0000fd func[14] <f14>:\n 0000fe: 41 0e                      | i32.const 14\n 000100: 0b                         | end\n000102 func[15] <f15>:\n 000103: 41 0f                      | i32.const 15\n 000105: 0b                         | end\n000107 func[16] <test>:\n 000108: 20 00                      | local.get 0\n 00010a: 11 00 00                   | call_indirect 0 (type 0)\n 00010d: 0b                         | end\n00010f func[17] <run>:\n 000110: 20 00                      | local.get 0\n 000112: 41 00                      | i32.const 0\n 000114: 20 01                      | local.get 1\n 000116: fc 0c 00 00                | table.init 0 0\n 00011a: 0b                         | end\n"
    },
    "table_init.99.wasm": {
      "header": "\ntable_init.99.wasm:\tfile format wasm 0x1\n\nSections:\n\n     Type start=0x0000000a end=0x00000019 (size=0x0000000f) count: 3\n Function start=0x0000001b end=0x0000002e (size=0x00000013) count: 18\n    Table start=0x00000030 end=0x00000035 (size=0x00000005) count: 1\n   Export start=0x00000037 end=0x0000009b (size=0x00000064) count: 18\n     Elem start=0x0000009d end=0x000000b1 (size=0x00000014) count: 1\n     Code start=0x000000b3 end=0x00000119 (size=0x00000066) count: 18\n",
      "details": "\ntable_init.99.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nType[3]:\n - type[0] () -> i32\n - type[1] (i32) -> i32\n - type[2] (i32, i32) -> nil\nFunction[18]:\n - func[0] sig=0 <f0>\n - func[1] sig=0 <f1>\n - func[2] sig=0 <f2>\n - func[3] sig=0 <f3>\n - func[4] sig=0 <f4>\n - func[5] sig=0 <f5>\n - func[6] sig=0 <f6>\n - func[7] sig=0 <f7>\n - func[8] sig=0 <f8>\n - func[9] sig=0 <f9>\n - func[10] sig=0 <f10>\n - func[11] sig=0 <f11>\n - func[12] sig=0 <f12>\n - func[13] sig=0 <f13>\n - func[14] sig=0 <f14>\n - func[15] sig=0 <f15>\n - func[16] sig=1 <test>\n - func[17] sig=2 <run>\nTable[1]:\n - table[0] type=funcref initial=64 max=64\nExport[18]:\n - func[0] <f0> -> \"f0\"\n - func[1] <f1> -> \"f1\"\n - func[2] <f2> -> \"f2\"\n - func[3] <f3> -> \"f3\"\n - func[4] <f4> -> \"f4\"\n - func[5] <f5> -> \"f5\"\n - func[6] <f6> -> \"f6\"\n - func[7] <f7> -> \"f7\"\n - func[8] <f8> -> \"f8\"\n - func[9] <f9> -> \"f9\"\n - func[10] <f10> -> \"f10\"\n - func[11] <f11> -> \"f11\"\n - func[12] <f12> -> \"f12\"\n - func[13] <f13> -> \"f13\"\n - func[14] <f14> -> \"f14\"\n - func[15] <f15> -> \"f15\"\n - func[16] <test> -> \"test\"\n - func[17] <run> -> \"run\"\nElem[1]:\n - segment[0] flags=1 table=0 count=16\n  - elem[0] = ref.func:0 <f0>\n  - elem[1] = ref.func:1 <f1>\n  - elem[2] = ref.func:2 <f2>\n  - elem[3] = ref.func:3 <f3>\n  - elem[4] = ref.func:4 <f4>\n  - elem[5] = ref.func:5 <f5>\n  - elem[6] = ref.func:6 <f6>\n  - elem[7] = ref.func:7 <f7>\n  - elem[8] = ref.func:8 <f8>\n  - elem[9] = ref.func:9 <f9>\n  - elem[10] = ref.func:10 <f10>\n  - elem[11] = ref.func:11 <f11>\n  - elem[12] = ref.func:12 <f12>\n  - elem[13] = ref.func:13 <f13>\n  - elem[14] = ref.func:14 <f14>\n  - elem[15] = ref.func:15 <f15>\nCode[18]:\n - func[0] size=4 <f0>\n - func[1] size=4 <f1>\n - func[2] size=4 <f2>\n - func[3] size=4 <f3>\n - func[4] size=4 <f4>\n - func[5] size=4 <f5>\n - func[6] size=4 <f6>\n - func[7] size=4 <f7>\n - func[8] size=4 <f8>\n - func[9] size=4 <f9>\n - func[10] size=4 <f10>\n - func[11] size=4 <f11>\n - func[12] size=4 <f12>\n - func[13] size=4 <f13>\n - func[14] size=4 <f14>\n - func[15] size=4 <f15>\n - func[16] size=7 <test>\n - func[17] size=12 <run>\n",
      "disassemble": "\ntable_init.99.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n0000b5 func[0] <f0>:\n 0000b6: 41 00                      | i32.const 0\n 0000b8: 0b                         | end\n0000ba func[1] <f1>:\n 0000bb: 41 01                      | i32.const 1\n 0000bd: 0b                         | end\n0000bf func[2] <f2>:\n 0000c0: 41 02                      | i32.const 2\n 0000c2: 0b                         | end\n0000c4 func[3] <f3>:\n 0000c5: 41 03                      | i32.const 3\n 0000c7: 0b                         | end\n0000c9 func[4] <f4>:\n 0000ca: 41 04                      | i32.const 4\n 0000cc: 0b                         | end\n0000ce func[5] <f5>:\n 0000cf: 41 05                      | i32.const 5\n 0000d1: 0b                         | end\n0000d3 func[6] <f6>:\n 0000d4: 41 06                      | i32.const 6\n 0000d6: 0b                         | end\n0000d8 func[7] <f7>:\n 0000d9: 41 07                      | i32.const 7\n 0000db: 0b                         | end\n0000dd func[8] <f8>:\n 0000de: 41 08                      | i32.const 8\n 0000e0: 0b                         | end\n0000e2 func[9] <f9>:\n 0000e3: 41 09                      | i32.const 9\n 0000e5: 0b                         | end\n0000e7 func[10] <f10>:\n 0000e8: 41 0a                      | i32.const 10\n 0000ea: 0b                         | end\n0000ec func[11] <f11>:\n 0000ed: 41 0b                      | i32.const 11\n 0000ef: 0b                         | end\n0000f1 func[12] <f12>:\n 0000f2: 41 0c                      | i32.const 12\n 0000f4: 0b                         | end\n0000f6 func[13] <f13>:\n 0000f7: 41 0d                      | i32.const 13\n 0000f9: 0b                         | end\n0000fb func[14] <f14>:\n 0000fc: 41 0e                      | i32.const 14\n 0000fe: 0b                         | end\n000100 func[15] <f15>:\n 000101: 41 0f                      | i32.const 15\n 000103: 0b                         | end\n000105 func[16] <test>:\n 000106: 20 00                      | local.get 0\n 000108: 11 00 00                   | call_indirect 0 (type 0)\n 00010b: 0b                         | end\n00010d func[17] <run>:\n 00010e: 20 00                      | local.get 0\n 000110: 41 00                      | i32.const 0\n 000112: 20 01                      | local.get 1\n 000114: fc 0c 00 00                | table.init 0 0\n 000118: 0b                         | end\n"
    },
    "table_init.100.wasm": {
      "header": "\ntable_init.100.wasm:\tfile format wasm 0x1\n\nSections:\n\n     Type start=0x0000000a end=0x00000019 (size=0x0000000f) count: 3\n Function start=0x0000001b end=0x0000002e (size=0x00000013) count: 18\n    Table start=0x00000030 end=0x00000035 (size=0x00000005) count: 1\n   Export start=0x00000037 end=0x0000009b (size=0x00000064) count: 18\n     Elem start=0x0000009d end=0x000000b1 (size=0x00000014) count: 1\n     Code start=0x000000b3 end=0x00000119 (size=0x00000066) count: 18\n",
      "details": "\ntable_init.100.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nType[3]:\n - type[0] () -> i32\n - type[1] (i32) -> i32\n - type[2] (i32, i32) -> nil\nFunction[18]:\n - func[0] sig=0 <f0>\n - func[1] sig=0 <f1>\n - func[2] sig=0 <f2>\n - func[3] sig=0 <f3>\n - func[4] sig=0 <f4>\n - func[5] sig=0 <f5>\n - func[6] sig=0 <f6>\n - func[7] sig=0 <f7>\n - func[8] sig=0 <f8>\n - func[9] sig=0 <f9>\n - func[10] sig=0 <f10>\n - func[11] sig=0 <f11>\n - func[12] sig=0 <f12>\n - func[13] sig=0 <f13>\n - func[14] sig=0 <f14>\n - func[15] sig=0 <f15>\n - func[16] sig=1 <test>\n - func[17] sig=2 <run>\nTable[1]:\n - table[0] type=funcref initial=16 max=16\nExport[18]:\n - func[0] <f0> -> \"f0\"\n - func[1] <f1> -> \"f1\"\n - func[2] <f2> -> \"f2\"\n - func[3] <f3> -> \"f3\"\n - func[4] <f4> -> \"f4\"\n - func[5] <f5> -> \"f5\"\n - func[6] <f6> -> \"f6\"\n - func[7] <f7> -> \"f7\"\n - func[8] <f8> -> \"f8\"\n - func[9] <f9> -> \"f9\"\n - func[10] <f10> -> \"f10\"\n - func[11] <f11> -> \"f11\"\n - func[12] <f12> -> \"f12\"\n - func[13] <f13> -> \"f13\"\n - func[14] <f14> -> \"f14\"\n - func[15] <f15> -> \"f15\"\n - func[16] <test> -> \"test\"\n - func[17] <run> -> \"run\"\nElem[1]:\n - segment[0] flags=1 table=0 count=16\n  - elem[0] = ref.func:0 <f0>\n  - elem[1] = ref.func:1 <f1>\n  - elem[2] = ref.func:2 <f2>\n  - elem[3] = ref.func:3 <f3>\n  - elem[4] = ref.func:4 <f4>\n  - elem[5] = ref.func:5 <f5>\n  - elem[6] = ref.func:6 <f6>\n  - elem[7] = ref.func:7 <f7>\n  - elem[8] = ref.func:8 <f8>\n  - elem[9] = ref.func:9 <f9>\n  - elem[10] = ref.func:10 <f10>\n  - elem[11] = ref.func:11 <f11>\n  - elem[12] = ref.func:12 <f12>\n  - elem[13] = ref.func:13 <f13>\n  - elem[14] = ref.func:14 <f14>\n  - elem[15] = ref.func:15 <f15>\nCode[18]:\n - func[0] size=4 <f0>\n - func[1] size=4 <f1>\n - func[2] size=4 <f2>\n - func[3] size=4 <f3>\n - func[4] size=4 <f4>\n - func[5] size=4 <f5>\n - func[6] size=4 <f6>\n - func[7] size=4 <f7>\n - func[8] size=4 <f8>\n - func[9] size=4 <f9>\n - func[10] size=4 <f10>\n - func[11] size=4 <f11>\n - func[12] size=4 <f12>\n - func[13] size=4 <f13>\n - func[14] size=4 <f14>\n - func[15] size=4 <f15>\n - func[16] size=7 <test>\n - func[17] size=12 <run>\n",
      "disassemble": "\ntable_init.100.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n0000b5 func[0] <f0>:\n 0000b6: 41 00                      | i32.const 0\n 0000b8: 0b                         | end\n0000ba func[1] <f1>:\n 0000bb: 41 01                      | i32.const 1\n 0000bd: 0b                         | end\n0000bf func[2] <f2>:\n 0000c0: 41 02                      | i32.const 2\n 0000c2: 0b                         | end\n0000c4 func[3] <f3>:\n 0000c5: 41 03                      | i32.const 3\n 0000c7: 0b                         | end\n0000c9 func[4] <f4>:\n 0000ca: 41 04                      | i32.const 4\n 0000cc: 0b                         | end\n0000ce func[5] <f5>:\n 0000cf: 41 05                      | i32.const 5\n 0000d1: 0b                         | end\n0000d3 func[6] <f6>:\n 0000d4: 41 06                      | i32.const 6\n 0000d6: 0b                         | end\n0000d8 func[7] <f7>:\n 0000d9: 41 07                      | i32.const 7\n 0000db: 0b                         | end\n0000dd func[8] <f8>:\n 0000de: 41 08                      | i32.const 8\n 0000e0: 0b                         | end\n0000e2 func[9] <f9>:\n 0000e3: 41 09                      | i32.const 9\n 0000e5: 0b                         | end\n0000e7 func[10] <f10>:\n 0000e8: 41 0a                      | i32.const 10\n 0000ea: 0b                         | end\n0000ec func[11] <f11>:\n 0000ed: 41 0b                      | i32.const 11\n 0000ef: 0b                         | end\n0000f1 func[12] <f12>:\n 0000f2: 41 0c                      | i32.const 12\n 0000f4: 0b                         | end\n0000f6 func[13] <f13>:\n 0000f7: 41 0d                      | i32.const 13\n 0000f9: 0b                         | end\n0000fb func[14] <f14>:\n 0000fc: 41 0e                      | i32.const 14\n 0000fe: 0b                         | end\n000100 func[15] <f15>:\n 000101: 41 0f                      | i32.const 15\n 000103: 0b                         | end\n000105 func[16] <test>:\n 000106: 20 00                      | local.get 0\n 000108: 11 00 00                   | call_indirect 0 (type 0)\n 00010b: 0b                         | end\n00010d func[17] <run>:\n 00010e: 20 00                      | local.get 0\n 000110: 41 08                      | i32.const 8\n 000112: 20 01                      | local.get 1\n 000114: fc 0c 00 00                | table.init 0 0\n 000118: 0b                         | end\n"
    },
    "table_init.101.wasm": {
      "header": "\ntable_init.101.wasm:\tfile format wasm 0x1\n\nSections:\n\n     Type start=0x0000000a end=0x0000000e (size=0x00000004) count: 1\n Function start=0x00000010 end=0x00000012 (size=0x00000002) count: 1\n    Table start=0x00000014 end=0x00000018 (size=0x00000004) count: 1\n     Elem start=0x0000001b end=0x000000df (size=0x000000c4) count: 65\n     Code start=0x000000e1 end=0x000000ef (size=0x0000000e) count: 1\n",
      "details": "\ntable_init.101.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nType[1]:\n - type[0] () -> nil\nFunction[1]:\n - func[0] sig=0\nTable[1]:\n - table[0] type=funcref initial=1\nElem[65]:\n - segment[0] flags=1 table=0 count=0\n - segment[1] flags=1 table=0 count=0\n - segment[2] flags=1 table=0 count=0\n - segment[3] flags=1 table=0 count=0\n - segment[4] flags=1 table=0 count=0\n - segment[5] flags=1 table=0 count=0\n - segment[6] flags=1 table=0 count=0\n - segment[7] flags=1 table=0 count=0\n - segment[8] flags=1 table=0 count=0\n - segment[9] flags=1 table=0 count=0\n - segment[10] flags=1 table=0 count=0\n - segment[11] flags=1 table=0 count=0\n - segment[12] flags=1 table=0 count=0\n - segment[13] flags=1 table=0 count=0\n - segment[14] flags=1 table=0 count=0\n - segment[15] flags=1 table=0 count=0\n - segment[16] flags=1 table=0 count=0\n - segment[17] flags=1 table=0 count=0\n - segment[18] flags=1 table=0 count=0\n - segment[19] flags=1 table=0 count=0\n - segment[20] flags=1 table=0 count=0\n - segment[21] flags=1 table=0 count=0\n - segment[22] flags=1 table=0 count=0\n - segment[23] flags=1 table=0 count=0\n - segment[24] flags=1 table=0 count=0\n - segment[25] flags=1 table=0 count=0\n - segment[26] flags=1 table=0 count=0\n - segment[27] flags=1 table=0 count=0\n - segment[28] flags=1 table=0 count=0\n - segment[29] flags=1 table=0 count=0\n - segment[30] flags=1 table=0 count=0\n - segment[31] flags=1 table=0 count=0\n - segment[32] flags=1 table=0 count=0\n - segment[33] flags=1 table=0 count=0\n - segment[34] flags=1 table=0 count=0\n - segment[35] flags=1 table=0 count=0\n - segment[36] flags=1 table=0 count=0\n - segment[37] flags=1 table=0 count=0\n - segment[38] flags=1 table=0 count=0\n - segment[39] flags=1 table=0 count=0\n - segment[40] flags=1 table=0 count=0\n - segment[41] flags=1 table=0 count=0\n - segment[42] flags=1 table=0 count=0\n - segment[43] flags=1 table=0 count=0\n - segment[44] flags=1 table=0 count=0\n - segment[45] flags=1 table=0 count=0\n - segment[46] flags=1 table=0 count=0\n - segment[47] flags=1 table=0 count=0\n - segment[48] flags=1 table=0 count=0\n - segment[49] flags=1 table=0 count=0\n - segment[50] flags=1 table=0 count=0\n - segment[51] flags=1 table=0 count=0\n - segment[52] flags=1 table=0 count=0\n - segment[53] flags=1 table=0 count=0\n - segment[54] flags=1 table=0 count=0\n - segment[55] flags=1 table=0 count=0\n - segment[56] flags=1 table=0 count=0\n - segment[57] flags=1 table=0 count=0\n - segment[58] flags=1 table=0 count=0\n - segment[59] flags=1 table=0 count=0\n - segment[60] flags=1 table=0 count=0\n - segment[61] flags=1 table=0 count=0\n - segment[62] flags=1 table=0 count=0\n - segment[63] flags=1 table=0 count=0\n - segment[64] flags=1 table=0 count=0\nCode[1]:\n - func[0] size=12\n",
      "disassemble": "\ntable_init.101.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n0000e3 func[0]:\n 0000e4: 41 00                      | i32.const 0\n 0000e6: 41 00                      | i32.const 0\n 0000e8: 41 00                      | i32.const 0\n 0000ea: fc 0c 40 00                | table.init 64 0\n 0000ee: 0b                         | end\n"
    }
  }
}
