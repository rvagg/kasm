{
  "bin": {
    "memory_size.0.wasm": "AGFzbQEAAAABCQJgAAF/YAF/AAMDAgABBQMBAAAHDwIEc2l6ZQAABGdyb3cAAQoOAgQAPwALBwAgAEAAGgs=",
    "memory_size.1.wasm": "AGFzbQEAAAABCQJgAAF/YAF/AAMDAgABBQMBAAEHDwIEc2l6ZQAABGdyb3cAAQoOAgQAPwALBwAgAEAAGgs=",
    "memory_size.2.wasm": "AGFzbQEAAAABCQJgAAF/YAF/AAMDAgABBQQBAQACBw8CBHNpemUAAARncm93AAEKDgIEAD8ACwcAIABAABoL",
    "memory_size.3.wasm": "AGFzbQEAAAABCQJgAAF/YAF/AAMDAgABBQQBAQMIBw8CBHNpemUAAARncm93AAEKDgIEAD8ACwcAIABAABoL",
    "memory_size.4.wasm": "AGFzbQEAAAABBAFgAAADAgEABQMBAAEKBgEEAD8ACw==",
    "memory_size.5.wasm": "AGFzbQEAAAABBQFgAAF9AwIBAAUDAQABCgYBBAA/AAs="
  },
  "spec": {"source_filename": "/workspace/wasm-spec/test/core/memory_size.wast",
 "commands": [
  {"type": "module", "line": 1, "filename": "memory_size.0.wasm"}, 
  {"type": "assert_return", "line": 7, "action": {"type": "invoke", "field": "size", "args": []}, "expected": [{"type": "i32", "value": "0"}]}, 
  {"type": "assert_return", "line": 8, "action": {"type": "invoke", "field": "grow", "args": [{"type": "i32", "value": "1"}]}, "expected": []}, 
  {"type": "assert_return", "line": 9, "action": {"type": "invoke", "field": "size", "args": []}, "expected": [{"type": "i32", "value": "1"}]}, 
  {"type": "assert_return", "line": 10, "action": {"type": "invoke", "field": "grow", "args": [{"type": "i32", "value": "4"}]}, "expected": []}, 
  {"type": "assert_return", "line": 11, "action": {"type": "invoke", "field": "size", "args": []}, "expected": [{"type": "i32", "value": "5"}]}, 
  {"type": "assert_return", "line": 12, "action": {"type": "invoke", "field": "grow", "args": [{"type": "i32", "value": "0"}]}, "expected": []}, 
  {"type": "assert_return", "line": 13, "action": {"type": "invoke", "field": "size", "args": []}, "expected": [{"type": "i32", "value": "5"}]}, 
  {"type": "module", "line": 15, "filename": "memory_size.1.wasm"}, 
  {"type": "assert_return", "line": 21, "action": {"type": "invoke", "field": "size", "args": []}, "expected": [{"type": "i32", "value": "1"}]}, 
  {"type": "assert_return", "line": 22, "action": {"type": "invoke", "field": "grow", "args": [{"type": "i32", "value": "1"}]}, "expected": []}, 
  {"type": "assert_return", "line": 23, "action": {"type": "invoke", "field": "size", "args": []}, "expected": [{"type": "i32", "value": "2"}]}, 
  {"type": "assert_return", "line": 24, "action": {"type": "invoke", "field": "grow", "args": [{"type": "i32", "value": "4"}]}, "expected": []}, 
  {"type": "assert_return", "line": 25, "action": {"type": "invoke", "field": "size", "args": []}, "expected": [{"type": "i32", "value": "6"}]}, 
  {"type": "assert_return", "line": 26, "action": {"type": "invoke", "field": "grow", "args": [{"type": "i32", "value": "0"}]}, "expected": []}, 
  {"type": "assert_return", "line": 27, "action": {"type": "invoke", "field": "size", "args": []}, "expected": [{"type": "i32", "value": "6"}]}, 
  {"type": "module", "line": 29, "filename": "memory_size.2.wasm"}, 
  {"type": "assert_return", "line": 35, "action": {"type": "invoke", "field": "size", "args": []}, "expected": [{"type": "i32", "value": "0"}]}, 
  {"type": "assert_return", "line": 36, "action": {"type": "invoke", "field": "grow", "args": [{"type": "i32", "value": "3"}]}, "expected": []}, 
  {"type": "assert_return", "line": 37, "action": {"type": "invoke", "field": "size", "args": []}, "expected": [{"type": "i32", "value": "0"}]}, 
  {"type": "assert_return", "line": 38, "action": {"type": "invoke", "field": "grow", "args": [{"type": "i32", "value": "1"}]}, "expected": []}, 
  {"type": "assert_return", "line": 39, "action": {"type": "invoke", "field": "size", "args": []}, "expected": [{"type": "i32", "value": "1"}]}, 
  {"type": "assert_return", "line": 40, "action": {"type": "invoke", "field": "grow", "args": [{"type": "i32", "value": "0"}]}, "expected": []}, 
  {"type": "assert_return", "line": 41, "action": {"type": "invoke", "field": "size", "args": []}, "expected": [{"type": "i32", "value": "1"}]}, 
  {"type": "assert_return", "line": 42, "action": {"type": "invoke", "field": "grow", "args": [{"type": "i32", "value": "4"}]}, "expected": []}, 
  {"type": "assert_return", "line": 43, "action": {"type": "invoke", "field": "size", "args": []}, "expected": [{"type": "i32", "value": "1"}]}, 
  {"type": "assert_return", "line": 44, "action": {"type": "invoke", "field": "grow", "args": [{"type": "i32", "value": "1"}]}, "expected": []}, 
  {"type": "assert_return", "line": 45, "action": {"type": "invoke", "field": "size", "args": []}, "expected": [{"type": "i32", "value": "2"}]}, 
  {"type": "module", "line": 47, "filename": "memory_size.3.wasm"}, 
  {"type": "assert_return", "line": 53, "action": {"type": "invoke", "field": "size", "args": []}, "expected": [{"type": "i32", "value": "3"}]}, 
  {"type": "assert_return", "line": 54, "action": {"type": "invoke", "field": "grow", "args": [{"type": "i32", "value": "1"}]}, "expected": []}, 
  {"type": "assert_return", "line": 55, "action": {"type": "invoke", "field": "size", "args": []}, "expected": [{"type": "i32", "value": "4"}]}, 
  {"type": "assert_return", "line": 56, "action": {"type": "invoke", "field": "grow", "args": [{"type": "i32", "value": "3"}]}, "expected": []}, 
  {"type": "assert_return", "line": 57, "action": {"type": "invoke", "field": "size", "args": []}, "expected": [{"type": "i32", "value": "7"}]}, 
  {"type": "assert_return", "line": 58, "action": {"type": "invoke", "field": "grow", "args": [{"type": "i32", "value": "0"}]}, "expected": []}, 
  {"type": "assert_return", "line": 59, "action": {"type": "invoke", "field": "size", "args": []}, "expected": [{"type": "i32", "value": "7"}]}, 
  {"type": "assert_return", "line": 60, "action": {"type": "invoke", "field": "grow", "args": [{"type": "i32", "value": "2"}]}, "expected": []}, 
  {"type": "assert_return", "line": 61, "action": {"type": "invoke", "field": "size", "args": []}, "expected": [{"type": "i32", "value": "7"}]}, 
  {"type": "assert_return", "line": 62, "action": {"type": "invoke", "field": "grow", "args": [{"type": "i32", "value": "1"}]}, "expected": []}, 
  {"type": "assert_return", "line": 63, "action": {"type": "invoke", "field": "size", "args": []}, "expected": [{"type": "i32", "value": "8"}]}, 
  {"type": "assert_invalid", "line": 69, "filename": "memory_size.4.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 78, "filename": "memory_size.5.wasm", "text": "type mismatch", "module_type": "binary"}]},
  "code": [
    "(module (memory 0)\n  (func (export \"size\") (result i32) (memory.size))\n  (func (export \"grow\") (param $sz i32) (drop (memory.grow (local.get $sz)))))",
    "(assert_return (invoke \"size\") (i32.const 0))",
    "(assert_return (invoke \"grow\" (i32.const 1)))",
    "(assert_return (invoke \"size\") (i32.const 1))",
    "(assert_return (invoke \"grow\" (i32.const 4)))",
    "(assert_return (invoke \"size\") (i32.const 5))",
    "(assert_return (invoke \"grow\" (i32.const 0)))",
    "(assert_return (invoke \"size\") (i32.const 5))",
    "(module (memory 1)\n  (func (export \"size\") (result i32) (memory.size))\n  (func (export \"grow\") (param $sz i32) (drop (memory.grow (local.get $sz)))))",
    "(assert_return (invoke \"size\") (i32.const 1))",
    "(assert_return (invoke \"grow\" (i32.const 1)))",
    "(assert_return (invoke \"size\") (i32.const 2))",
    "(assert_return (invoke \"grow\" (i32.const 4)))",
    "(assert_return (invoke \"size\") (i32.const 6))",
    "(assert_return (invoke \"grow\" (i32.const 0)))",
    "(assert_return (invoke \"size\") (i32.const 6))",
    "(module (memory 0 2)\n  (func (export \"size\") (result i32) (memory.size))\n  (func (export \"grow\") (param $sz i32) (drop (memory.grow (local.get $sz)))))",
    "(assert_return (invoke \"size\") (i32.const 0))",
    "(assert_return (invoke \"grow\" (i32.const 3)))",
    "(assert_return (invoke \"size\") (i32.const 0))",
    "(assert_return (invoke \"grow\" (i32.const 1)))",
    "(assert_return (invoke \"size\") (i32.const 1))",
    "(assert_return (invoke \"grow\" (i32.const 0)))",
    "(assert_return (invoke \"size\") (i32.const 1))",
    "(assert_return (invoke \"grow\" (i32.const 4)))",
    "(assert_return (invoke \"size\") (i32.const 1))",
    "(assert_return (invoke \"grow\" (i32.const 1)))",
    "(assert_return (invoke \"size\") (i32.const 2))",
    "(module (memory 3 8)\n  (func (export \"size\") (result i32) (memory.size))\n  (func (export \"grow\") (param $sz i32) (drop (memory.grow (local.get $sz)))))",
    "(assert_return (invoke \"size\") (i32.const 3))",
    "(assert_return (invoke \"grow\" (i32.const 1)))",
    "(assert_return (invoke \"size\") (i32.const 4))",
    "(assert_return (invoke \"grow\" (i32.const 3)))",
    "(assert_return (invoke \"size\") (i32.const 7))",
    "(assert_return (invoke \"grow\" (i32.const 0)))",
    "(assert_return (invoke \"size\") (i32.const 7))",
    "(assert_return (invoke \"grow\" (i32.const 2)))",
    "(assert_return (invoke \"size\") (i32.const 7))",
    "(assert_return (invoke \"grow\" (i32.const 1)))",
    "(assert_return (invoke \"size\") (i32.const 8))",
    "(assert_invalid (module (memory 1) (func $type-result-i32-vs-empty (memory.size) ) ) \"type mismatch\")",
    "(assert_invalid (module (memory 1) (func $type-result-i32-vs-f32 (result f32) (memory.size) ) ) \"type mismatch\")"
  ],
  "dump": {
    "memory_size.0.wasm": {
      "header": "\nmemory_size.0.wasm:\tfile format wasm 0x1\n\nSections:\n\n     Type start=0x0000000a end=0x00000013 (size=0x00000009) count: 2\n Function start=0x00000015 end=0x00000018 (size=0x00000003) count: 2\n   Memory start=0x0000001a end=0x0000001d (size=0x00000003) count: 1\n   Export start=0x0000001f end=0x0000002e (size=0x0000000f) count: 2\n     Code start=0x00000030 end=0x0000003e (size=0x0000000e) count: 2\n",
      "details": "\nmemory_size.0.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nType[2]:\n - type[0] () -> i32\n - type[1] (i32) -> nil\nFunction[2]:\n - func[0] sig=0 <size>\n - func[1] sig=1 <grow>\nMemory[1]:\n - memory[0] pages: initial=0\nExport[2]:\n - func[0] <size> -> \"size\"\n - func[1] <grow> -> \"grow\"\nCode[2]:\n - func[0] size=4 <size>\n - func[1] size=7 <grow>\n",
      "disassemble": "\nmemory_size.0.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n000032 func[0] <size>:\n 000033: 3f 00                      | memory.size 0\n 000035: 0b                         | end\n000037 func[1] <grow>:\n 000038: 20 00                      | local.get 0\n 00003a: 40 00                      | memory.grow 0\n 00003c: 1a                         | drop\n 00003d: 0b                         | end\n"
    },
    "memory_size.1.wasm": {
      "header": "\nmemory_size.1.wasm:\tfile format wasm 0x1\n\nSections:\n\n     Type start=0x0000000a end=0x00000013 (size=0x00000009) count: 2\n Function start=0x00000015 end=0x00000018 (size=0x00000003) count: 2\n   Memory start=0x0000001a end=0x0000001d (size=0x00000003) count: 1\n   Export start=0x0000001f end=0x0000002e (size=0x0000000f) count: 2\n     Code start=0x00000030 end=0x0000003e (size=0x0000000e) count: 2\n",
      "details": "\nmemory_size.1.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nType[2]:\n - type[0] () -> i32\n - type[1] (i32) -> nil\nFunction[2]:\n - func[0] sig=0 <size>\n - func[1] sig=1 <grow>\nMemory[1]:\n - memory[0] pages: initial=1\nExport[2]:\n - func[0] <size> -> \"size\"\n - func[1] <grow> -> \"grow\"\nCode[2]:\n - func[0] size=4 <size>\n - func[1] size=7 <grow>\n",
      "disassemble": "\nmemory_size.1.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n000032 func[0] <size>:\n 000033: 3f 00                      | memory.size 0\n 000035: 0b                         | end\n000037 func[1] <grow>:\n 000038: 20 00                      | local.get 0\n 00003a: 40 00                      | memory.grow 0\n 00003c: 1a                         | drop\n 00003d: 0b                         | end\n"
    },
    "memory_size.2.wasm": {
      "header": "\nmemory_size.2.wasm:\tfile format wasm 0x1\n\nSections:\n\n     Type start=0x0000000a end=0x00000013 (size=0x00000009) count: 2\n Function start=0x00000015 end=0x00000018 (size=0x00000003) count: 2\n   Memory start=0x0000001a end=0x0000001e (size=0x00000004) count: 1\n   Export start=0x00000020 end=0x0000002f (size=0x0000000f) count: 2\n     Code start=0x00000031 end=0x0000003f (size=0x0000000e) count: 2\n",
      "details": "\nmemory_size.2.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nType[2]:\n - type[0] () -> i32\n - type[1] (i32) -> nil\nFunction[2]:\n - func[0] sig=0 <size>\n - func[1] sig=1 <grow>\nMemory[1]:\n - memory[0] pages: initial=0 max=2\nExport[2]:\n - func[0] <size> -> \"size\"\n - func[1] <grow> -> \"grow\"\nCode[2]:\n - func[0] size=4 <size>\n - func[1] size=7 <grow>\n",
      "disassemble": "\nmemory_size.2.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n000033 func[0] <size>:\n 000034: 3f 00                      | memory.size 0\n 000036: 0b                         | end\n000038 func[1] <grow>:\n 000039: 20 00                      | local.get 0\n 00003b: 40 00                      | memory.grow 0\n 00003d: 1a                         | drop\n 00003e: 0b                         | end\n"
    },
    "memory_size.3.wasm": {
      "header": "\nmemory_size.3.wasm:\tfile format wasm 0x1\n\nSections:\n\n     Type start=0x0000000a end=0x00000013 (size=0x00000009) count: 2\n Function start=0x00000015 end=0x00000018 (size=0x00000003) count: 2\n   Memory start=0x0000001a end=0x0000001e (size=0x00000004) count: 1\n   Export start=0x00000020 end=0x0000002f (size=0x0000000f) count: 2\n     Code start=0x00000031 end=0x0000003f (size=0x0000000e) count: 2\n",
      "details": "\nmemory_size.3.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nType[2]:\n - type[0] () -> i32\n - type[1] (i32) -> nil\nFunction[2]:\n - func[0] sig=0 <size>\n - func[1] sig=1 <grow>\nMemory[1]:\n - memory[0] pages: initial=3 max=8\nExport[2]:\n - func[0] <size> -> \"size\"\n - func[1] <grow> -> \"grow\"\nCode[2]:\n - func[0] size=4 <size>\n - func[1] size=7 <grow>\n",
      "disassemble": "\nmemory_size.3.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n000033 func[0] <size>:\n 000034: 3f 00                      | memory.size 0\n 000036: 0b                         | end\n000038 func[1] <grow>:\n 000039: 20 00                      | local.get 0\n 00003b: 40 00                      | memory.grow 0\n 00003d: 1a                         | drop\n 00003e: 0b                         | end\n"
    }
  }
}
