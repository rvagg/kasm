{
  "bin": {
    "call_indirect.0.wasm": "AGFzbQEAAAABmAEdYAAAYAABf2AAAX5gAAF9YAABfGAAAnx/YAF/AX9gAX4BfmABfQF9YAF8AXxgAn98An98YAJ/fgJ+f2ACfX8Bf2ACf34BfmACfH0BfWACfnwBfGABfwF/YAF+AX5gAX0BfWABfAF8YAF+AGAEfnx/fgBgAX4Bf2AEfnx/fgF/YAACf3xgAAJ+f2ABfwF+YAF/AX1gAX8BfANRUAECAwQFBgcICQoLDQ8MDhAREhMAAQIDBAUCAQIDBAECAwQFGBkNGgYbHAcHBggJBggJBgYAAAABAQEBAgEDAQAAAQEAAwQEBAEDAQEBAQECBAUBcAEgIAUDAQABBg0BfAFEAAAAAAAAJEALB8QHOwh0eXBlLWkzMgAUCHR5cGUtaTY0ABUIdHlwZS1mMzIAFgh0eXBlLWY2NAAXDHR5cGUtZjY0LWkzMgAYCnR5cGUtaW5kZXgAGQ50eXBlLWZpcnN0LWkzMgAaDnR5cGUtZmlyc3QtaTY0ABsOdHlwZS1maXJzdC1mMzIAHA50eXBlLWZpcnN0LWY2NAAdD3R5cGUtc2Vjb25kLWkzMgAeD3R5cGUtc2Vjb25kLWk2NAAfD3R5cGUtc2Vjb25kLWYzMgAgD3R5cGUtc2Vjb25kLWY2NAAhEHR5cGUtYWxsLWY2NC1pMzIAIhB0eXBlLWFsbC1pMzItZjY0ACMQdHlwZS1hbGwtaTMyLWk2NAAkCGRpc3BhdGNoACUXZGlzcGF0Y2gtc3RydWN0dXJhbC1pNjQAJhdkaXNwYXRjaC1zdHJ1Y3R1cmFsLWkzMgAnF2Rpc3BhdGNoLXN0cnVjdHVyYWwtZjMyACgXZGlzcGF0Y2gtc3RydWN0dXJhbC1mNjQAKQdmYWMtaTY0ACoHZmliLWk2NAArB2ZhYy1pMzIALAdmYWMtZjMyAC0HZmFjLWY2NAAuB2ZpYi1pMzIALwdmaWItZjMyADAHZmliLWY2NAAxBGV2ZW4AMgNvZGQAMwdydW5hd2F5ADQObXV0dWFsLXJ1bmF3YXkANQ9hcy1zZWxlY3QtZmlyc3QANw1hcy1zZWxlY3QtbWlkADgOYXMtc2VsZWN0LWxhc3QAOQ9hcy1pZi1jb25kaXRpb24AOg5hcy1icl9pZi1maXJzdAA7DWFzLWJyX2lmLWxhc3QAPBFhcy1icl90YWJsZS1maXJzdAA9EGFzLWJyX3RhYmxlLWxhc3QAPg5hcy1zdG9yZS1maXJzdAA/DWFzLXN0b3JlLWxhc3QAQBRhcy1tZW1vcnkuZ3Jvdy12YWx1ZQBBD2FzLXJldHVybi12YWx1ZQBCD2FzLWRyb3Atb3BlcmFuZABDC2FzLWJyLXZhbHVlAEQSYXMtbG9jYWwuc2V0LXZhbHVlAEUSYXMtbG9jYWwudGVlLXZhbHVlAEYTYXMtZ2xvYmFsLnNldC12YWx1ZQBHD2FzLWxvYWQtb3BlcmFuZABIEGFzLXVuYXJ5LW9wZXJhbmQASQ5hcy1iaW5hcnktbGVmdABKD2FzLWJpbmFyeS1yaWdodABLD2FzLXRlc3Qtb3BlcmFuZABMD2FzLWNvbXBhcmUtbGVmdABNEGFzLWNvbXBhcmUtcmlnaHQAThJhcy1jb252ZXJ0LW9wZXJhbmQATwkmAQBBAAsgAAECAwUGBwgNCw4MKisyMzQ1Ng8QERIsLS4vMDEECQoK4QlQBQBBsgILBQBC5AILBwBDACBzRQsLAEQAAAAAAMiuQAsNAEQAAAAAAMiuQEEgCwQAIAALBAAgAAsEACAACwQAIAALBgAgACABCwYAIAEgAAsEACABCwQAIAELBAAgAQsEACABCwQAIAALBAAgAAsEACAACwQAIAALXQBBABEAAEIAQQARFABCAEQAAAAAAAAAAEEAQgBBABEVAEEAEQAAQQARAQBFGkEAEQEARRpCAEEAERYARRpCAEQAAAAAAAAAAEEAQgBBABEXAEUaQgBBABEHAFAaCwcAQQARAQALBwBBARECAAsHAEECEQMACwcAQQMRBAALBwBBHREFAAsKAELkAEEFEQcACwkAQSBBBBEGAAsKAELAAEEFEQcACwwAQ8P1qD9BBhEIAAsQAEQ9CtejcD36P0EHEQkACw4AQ2ZmAEJBIEEIEQwACwwAQSBCwABBCRENAAsVAEQAAAAAAABQQEMAAABCQQoRDgALEwBCwABEZmZmZmYGUEBBCxEPAAsHAEEdEQUACxIAQQFEAAAAAAAAAEBBHhEKAAsLAEEBQgJBHxELAAsJACABIAARBwALCQBCCSAAEREACwkAQQkgABEQAAsMAEMAABBBIAAREgALEABEAAAAAAAAIkAgABETAAsYACAAUAR+QgEFIAAgAEIBfUEMEQcAfgsLIgAgAEIBWAR+QgEFIABCAn1BDREHACAAQgF9QQ0RBwB8CwsYACAARQR/QQEFIAAgAEEBa0EXEQYAbAsLIwAgAEMAAAAAWwR9QwAAgD8FIAAgAEMAAIA/k0EYEQgAlAsLLwAgAEQAAAAAAAAAAGEEfEQAAAAAAADwPwUgACAARAAAAAAAAPA/oUEZEQkAogsLIgAgAEEBTQR/QQEFIABBAmtBGhEGACAAQQFrQRoRBgBqCwsuACAAQwAAgD9fBH1DAACAPwUgAEMAAABAk0EbEQgAIABDAACAP5NBGxEIAJILCz4AIABEAAAAAAAA8D9lBHxEAAAAAAAA8D8FIABEAAAAAAAAAEChQRwRCQAgAEQAAAAAAADwP6FBHBEJAKALCxUAIABFBH9BLAUgAEEBa0EPEQYACwsWACAARQR/QeMABSAAQQFrQQ4RBgALCwcAQRARAAALBwBBEhEAAAsHAEEREQAACwwAQQARAQBBAkEDGwsMAEECQQARAQBBAxsLDABBAkEDQQARAQAbCw8AQQARAQAEf0EBBUECCwsOAAJ+QQERAgBBAg0ACwsOAAJ/QQJBABEBAA0ACwsQAAJ9QQIRAwBBAg4BAAALCxAAAn9BAkEAEQEADgEAAAsLDABBABEBAEEBNgIACwwAQQpBAxEEADkDAAsJAEEAEQEAQAALCgBBAUEEEQYADwsKAEIBQQURBwAaCxEAAn1DAACAP0EGEQgADAALCxYBAXxEAAAAAAAA8D9BBxEJACEAIAALFAEBfEQAAAAAAADwP0EHEQkAIgALFABEAAAAAAAA8D9BBxEJACQAIwALCgBBABEBACgCAAsQAAJ9QwAAAABBBhEIAJELCw8AAn9BAUEEEQYAQQpqCwsPAAJ/QQpBAUEEEQYAawsLDQACf0EBQQQRBgBFCwsPAAJ/QQFBBBEGAEEKTQsLDwACf0EKQQFBBBEGAEcLCw0AAn5BAUEEEQYArAsL",
    "call_indirect.1.wasm": "AGFzbQEAAAABEQNgAn9/AX9gAABgA39/fwF/AwoJAAAAAAABAgICBAwDcAECAnABAwNwAAQHHAMGY2FsbC0xAAYGY2FsbC0yAAcGY2FsbC0zAAgJIwQAQQALAgABAgFBAAsAAwIDBAICQQALAAIBAgICQQMLAAEFClAJBwAgACABagsHACAAIAFrCwcAIAAgAWwLBwAgACABbgsHACAAIAFwCwIACwsAIAAgASACEQAACwsAIAAgASACEQABCwsAIAAgASACEQACCw==",
    "call_indirect.10.wat": "KHR5cGUgJHNpZyAoZnVuYyAocGFyYW0gaTMyKSAocmVzdWx0IGkzMikpKSh0YWJsZSAwIGZ1bmNyZWYpKGZ1bmMgKHJlc3VsdCBpMzIpICAoY2FsbF9pbmRpcmVjdCAodHlwZSAkc2lnKSAocmVzdWx0IGkzMikgKGkzMi5jb25zdCAwKSkp",
    "call_indirect.11.wat": "KHR5cGUgJHNpZyAoZnVuYyAocGFyYW0gaTMyKSAocmVzdWx0IGkzMikpKSh0YWJsZSAwIGZ1bmNyZWYpKGZ1bmMgIChjYWxsX2luZGlyZWN0ICh0eXBlICRzaWcpIChwYXJhbSBpMzIpIChpMzIuY29uc3QgMCkgKGkzMi5jb25zdCAwKSkp",
    "call_indirect.12.wat": "KHR5cGUgJHNpZyAoZnVuYyAocGFyYW0gaTMyIGkzMikgKHJlc3VsdCBpMzIpKSkodGFibGUgMCBmdW5jcmVmKShmdW5jIChyZXN1bHQgaTMyKSAgKGNhbGxfaW5kaXJlY3QgKHR5cGUgJHNpZykgKHBhcmFtIGkzMikgKHJlc3VsdCBpMzIpICAgIChpMzIuY29uc3QgMCkgKGkzMi5jb25zdCAwKSAgKSk=",
    "call_indirect.13.wasm": "AGFzbQEAAAABBAFgAAADAgEACgkBBwBBABEAAAs=",
    "call_indirect.14.wasm": "AGFzbQEAAAABBAFgAAADAgEABAQBcAAACgoBCABBABEAAEUL",
    "call_indirect.15.wasm": "AGFzbQEAAAABCAJgAAF+YAAAAwIBAQQEAXAAAAoKAQgAQQARAABFCw==",
    "call_indirect.16.wasm": "AGFzbQEAAAABCAJgAX8AYAAAAwIBAQQEAXAAAAoJAQcAQQARAAAL",
    "call_indirect.17.wasm": "AGFzbQEAAAABCQJgAnx/AGAAAAMCAQEEBAFwAAAKCQEHAEEAEQAACw==",
    "call_indirect.18.wasm": "AGFzbQEAAAABBAFgAAADAgEABAQBcAAACgsBCQBBAUEAEQAACw==",
    "call_indirect.19.wasm": "AGFzbQEAAAABBAFgAAADAgEABAQBcAAAChQBEgBEAAAAAAAAAEBBAUEAEQAACw==",
    "call_indirect.2.wat": "KHR5cGUgJHNpZyAoZnVuYyAocGFyYW0gaTMyKSAocmVzdWx0IGkzMikpKSh0YWJsZSAwIGZ1bmNyZWYpKGZ1bmMgKHJlc3VsdCBpMzIpICAoY2FsbF9pbmRpcmVjdCAodHlwZSAkc2lnKSAocmVzdWx0IGkzMikgKHBhcmFtIGkzMikgICAgKGkzMi5jb25zdCAwKSAoaTMyLmNvbnN0IDApICApKQ==",
    "call_indirect.20.wasm": "AGFzbQEAAAABCAJgAX8AYAAAAwIBAQQEAXAAAAoKAQgAQQEBEQAACw==",
    "call_indirect.21.wasm": "AGFzbQEAAAABCAJgAX8AYAAAAwIBAQQEAXAAAAoLAQkAQQBCAREAAAs=",
    "call_indirect.22.wasm": "AGFzbQEAAAABCQJgAn9/AGAAAAMCAQEEBAFwAAAKDAEKAAFBAUEAEQAACw==",
    "call_indirect.23.wasm": "AGFzbQEAAAABCQJgAn9/AGAAAAMCAQEEBAFwAAAKDAEKAEEBAUEAEQAACw==",
    "call_indirect.24.wasm": "AGFzbQEAAAABCQJgAn98AGAAAAMCAQEEBAFwAAAKFAESAEQAAAAAAADwP0EBQQARAAAL",
    "call_indirect.25.wasm": "AGFzbQEAAAABCQJgAnx/AGAAAAMCAQEEBAFwAAAKFAESAEEBRAAAAAAAAPA/QQARAAAL",
    "call_indirect.26.wasm": "AGFzbQEAAAABCAJgAX8AYAAAAwMCAAEEBQFwAQEBCQcBAEEACwEACg8CAgALCgACQEEAEQAACws=",
    "call_indirect.27.wasm": "AGFzbQEAAAABCQJgAn9/AGAAAAMDAgABBAUBcAEBAQkHAQBBAAsBAAoRAgIACwwAAkBBAEEAEQAACws=",
    "call_indirect.28.wasm": "AGFzbQEAAAABCAJgAX8AYAAAAwMCAAEEBQFwAQEBCQcBAEEACwEACg8CAgALCgADQEEAEQAACws=",
    "call_indirect.29.wasm": "AGFzbQEAAAABCQJgAn9/AGAAAAMDAgABBAUBcAEBAQkHAQBBAAsBAAoRAgIACwwAA0BBAEEAEQAACws=",
    "call_indirect.3.wat": "KHR5cGUgJHNpZyAoZnVuYyAocGFyYW0gaTMyKSAocmVzdWx0IGkzMikpKSh0YWJsZSAwIGZ1bmNyZWYpKGZ1bmMgKHJlc3VsdCBpMzIpICAoY2FsbF9pbmRpcmVjdCAocGFyYW0gaTMyKSAodHlwZSAkc2lnKSAocmVzdWx0IGkzMikgICAgKGkzMi5jb25zdCAwKSAoaTMyLmNvbnN0IDApICApKQ==",
    "call_indirect.30.wasm": "AGFzbQEAAAABCAJgAX8AYAAAAwMCAAEEBQFwAQEBCQcBAEEACwEAChMCAgALDgBBAEEABEBBABEAAAsL",
    "call_indirect.31.wasm": "AGFzbQEAAAABCQJgAn9/AGAAAAMDAgABBAUBcAEBAQkHAQBBAAsBAAoVAgIACxAAQQBBAARAQQBBABEAAAsL",
    "call_indirect.32.wasm": "AGFzbQEAAAABBAFgAAADAgEABAQBcAAACgkBBwBBABEBAAs=",
    "call_indirect.33.wasm": "AGFzbQEAAAABBAFgAAADAgEABAQBcAAACg0BCwBBABGUmNviAwAL",
    "call_indirect.34.wasm": "AGFzbQEAAAAEBQFwAQICCQgBAEEACwIAAA==",
    "call_indirect.35.wasm": "AGFzbQEAAAABCAJgAABgAAF/AwwLAAAAAAAAAAAAAQEEBAFwAAEKZgsGAAARAAALBwAAEQAAAQsJAAARAAARAAALCQAAEQAAEQAACwwAABEAABEAABEAAAsGAAARAAALBgAAEQAACwkAABEAABEAAAsJAAARAAARAAALBwAAEQAAGwsKAAARAAAbEQAACw==",
    "call_indirect.4.wat": "KHR5cGUgJHNpZyAoZnVuYyAocGFyYW0gaTMyKSAocmVzdWx0IGkzMikpKSh0YWJsZSAwIGZ1bmNyZWYpKGZ1bmMgKHJlc3VsdCBpMzIpICAoY2FsbF9pbmRpcmVjdCAocGFyYW0gaTMyKSAocmVzdWx0IGkzMikgKHR5cGUgJHNpZykgICAgKGkzMi5jb25zdCAwKSAoaTMyLmNvbnN0IDApICApKQ==",
    "call_indirect.5.wat": "KHR5cGUgJHNpZyAoZnVuYyAocGFyYW0gaTMyKSAocmVzdWx0IGkzMikpKSh0YWJsZSAwIGZ1bmNyZWYpKGZ1bmMgKHJlc3VsdCBpMzIpICAoY2FsbF9pbmRpcmVjdCAocmVzdWx0IGkzMikgKHR5cGUgJHNpZykgKHBhcmFtIGkzMikgICAgKGkzMi5jb25zdCAwKSAoaTMyLmNvbnN0IDApICApKQ==",
    "call_indirect.6.wat": "KHR5cGUgJHNpZyAoZnVuYyAocGFyYW0gaTMyKSAocmVzdWx0IGkzMikpKSh0YWJsZSAwIGZ1bmNyZWYpKGZ1bmMgKHJlc3VsdCBpMzIpICAoY2FsbF9pbmRpcmVjdCAocmVzdWx0IGkzMikgKHBhcmFtIGkzMikgKHR5cGUgJHNpZykgICAgKGkzMi5jb25zdCAwKSAoaTMyLmNvbnN0IDApICApKQ==",
    "call_indirect.7.wat": "KHRhYmxlIDAgZnVuY3JlZikoZnVuYyAocmVzdWx0IGkzMikgIChjYWxsX2luZGlyZWN0IChyZXN1bHQgaTMyKSAocGFyYW0gaTMyKSAoaTMyLmNvbnN0IDApIChpMzIuY29uc3QgMCkpKQ==",
    "call_indirect.8.wat": "KHRhYmxlIDAgZnVuY3JlZikoZnVuYyAoY2FsbF9pbmRpcmVjdCAocGFyYW0gJHggaTMyKSAoaTMyLmNvbnN0IDApIChpMzIuY29uc3QgMCkpKQ==",
    "call_indirect.9.wat": "KHR5cGUgJHNpZyAoZnVuYykpKHRhYmxlIDAgZnVuY3JlZikoZnVuYyAocmVzdWx0IGkzMikgIChjYWxsX2luZGlyZWN0ICh0eXBlICRzaWcpIChyZXN1bHQgaTMyKSAoaTMyLmNvbnN0IDApKSk="
  },
  "spec": {"source_filename": "/home/rvagg/git/webassembly/spec/test/core/call_indirect.wast",
 "commands": [
  {"type": "module", "line": 3, "filename": "call_indirect.0.wasm"}, 
  {"type": "assert_return", "line": 471, "action": {"type": "invoke", "field": "type-i32", "args": []}, "expected": [{"type": "i32", "value": "306"}]}, 
  {"type": "assert_return", "line": 472, "action": {"type": "invoke", "field": "type-i64", "args": []}, "expected": [{"type": "i64", "value": "356"}]}, 
  {"type": "assert_return", "line": 473, "action": {"type": "invoke", "field": "type-f32", "args": []}, "expected": [{"type": "f32", "value": "1165172736"}]}, 
  {"type": "assert_return", "line": 474, "action": {"type": "invoke", "field": "type-f64", "args": []}, "expected": [{"type": "f64", "value": "4660882566700597248"}]}, 
  {"type": "assert_return", "line": 475, "action": {"type": "invoke", "field": "type-f64-i32", "args": []}, "expected": [{"type": "f64", "value": "4660882566700597248"}, {"type": "i32", "value": "32"}]}, 
  {"type": "assert_return", "line": 477, "action": {"type": "invoke", "field": "type-index", "args": []}, "expected": [{"type": "i64", "value": "100"}]}, 
  {"type": "assert_return", "line": 479, "action": {"type": "invoke", "field": "type-first-i32", "args": []}, "expected": [{"type": "i32", "value": "32"}]}, 
  {"type": "assert_return", "line": 480, "action": {"type": "invoke", "field": "type-first-i64", "args": []}, "expected": [{"type": "i64", "value": "64"}]}, 
  {"type": "assert_return", "line": 481, "action": {"type": "invoke", "field": "type-first-f32", "args": []}, "expected": [{"type": "f32", "value": "1068037571"}]}, 
  {"type": "assert_return", "line": 482, "action": {"type": "invoke", "field": "type-first-f64", "args": []}, "expected": [{"type": "f64", "value": "4610064722561534525"}]}, 
  {"type": "assert_return", "line": 484, "action": {"type": "invoke", "field": "type-second-i32", "args": []}, "expected": [{"type": "i32", "value": "32"}]}, 
  {"type": "assert_return", "line": 485, "action": {"type": "invoke", "field": "type-second-i64", "args": []}, "expected": [{"type": "i64", "value": "64"}]}, 
  {"type": "assert_return", "line": 486, "action": {"type": "invoke", "field": "type-second-f32", "args": []}, "expected": [{"type": "f32", "value": "1107296256"}]}, 
  {"type": "assert_return", "line": 487, "action": {"type": "invoke", "field": "type-second-f64", "args": []}, "expected": [{"type": "f64", "value": "4634211053438658150"}]}, 
  {"type": "assert_return", "line": 489, "action": {"type": "invoke", "field": "type-all-f64-i32", "args": []}, "expected": [{"type": "f64", "value": "4660882566700597248"}, {"type": "i32", "value": "32"}]}, 
  {"type": "assert_return", "line": 490, "action": {"type": "invoke", "field": "type-all-i32-f64", "args": []}, "expected": [{"type": "i32", "value": "1"}, {"type": "f64", "value": "4611686018427387904"}]}, 
  {"type": "assert_return", "line": 491, "action": {"type": "invoke", "field": "type-all-i32-i64", "args": []}, "expected": [{"type": "i64", "value": "2"}, {"type": "i32", "value": "1"}]}, 
  {"type": "assert_return", "line": 493, "action": {"type": "invoke", "field": "dispatch", "args": [{"type": "i32", "value": "5"}, {"type": "i64", "value": "2"}]}, "expected": [{"type": "i64", "value": "2"}]}, 
  {"type": "assert_return", "line": 494, "action": {"type": "invoke", "field": "dispatch", "args": [{"type": "i32", "value": "5"}, {"type": "i64", "value": "5"}]}, "expected": [{"type": "i64", "value": "5"}]}, 
  {"type": "assert_return", "line": 495, "action": {"type": "invoke", "field": "dispatch", "args": [{"type": "i32", "value": "12"}, {"type": "i64", "value": "5"}]}, "expected": [{"type": "i64", "value": "120"}]}, 
  {"type": "assert_return", "line": 496, "action": {"type": "invoke", "field": "dispatch", "args": [{"type": "i32", "value": "13"}, {"type": "i64", "value": "5"}]}, "expected": [{"type": "i64", "value": "8"}]}, 
  {"type": "assert_return", "line": 497, "action": {"type": "invoke", "field": "dispatch", "args": [{"type": "i32", "value": "20"}, {"type": "i64", "value": "2"}]}, "expected": [{"type": "i64", "value": "2"}]}, 
  {"type": "assert_trap", "line": 498, "action": {"type": "invoke", "field": "dispatch", "args": [{"type": "i32", "value": "0"}, {"type": "i64", "value": "2"}]}, "text": "indirect call type mismatch", "expected": [{"type": "i64"}]}, 
  {"type": "assert_trap", "line": 499, "action": {"type": "invoke", "field": "dispatch", "args": [{"type": "i32", "value": "15"}, {"type": "i64", "value": "2"}]}, "text": "indirect call type mismatch", "expected": [{"type": "i64"}]}, 
  {"type": "assert_trap", "line": 500, "action": {"type": "invoke", "field": "dispatch", "args": [{"type": "i32", "value": "32"}, {"type": "i64", "value": "2"}]}, "text": "undefined element", "expected": [{"type": "i64"}]}, 
  {"type": "assert_trap", "line": 501, "action": {"type": "invoke", "field": "dispatch", "args": [{"type": "i32", "value": "4294967295"}, {"type": "i64", "value": "2"}]}, "text": "undefined element", "expected": [{"type": "i64"}]}, 
  {"type": "assert_trap", "line": 502, "action": {"type": "invoke", "field": "dispatch", "args": [{"type": "i32", "value": "1213432423"}, {"type": "i64", "value": "2"}]}, "text": "undefined element", "expected": [{"type": "i64"}]}, 
  {"type": "assert_return", "line": 504, "action": {"type": "invoke", "field": "dispatch-structural-i64", "args": [{"type": "i32", "value": "5"}]}, "expected": [{"type": "i64", "value": "9"}]}, 
  {"type": "assert_return", "line": 505, "action": {"type": "invoke", "field": "dispatch-structural-i64", "args": [{"type": "i32", "value": "12"}]}, "expected": [{"type": "i64", "value": "362880"}]}, 
  {"type": "assert_return", "line": 506, "action": {"type": "invoke", "field": "dispatch-structural-i64", "args": [{"type": "i32", "value": "13"}]}, "expected": [{"type": "i64", "value": "55"}]}, 
  {"type": "assert_return", "line": 507, "action": {"type": "invoke", "field": "dispatch-structural-i64", "args": [{"type": "i32", "value": "20"}]}, "expected": [{"type": "i64", "value": "9"}]}, 
  {"type": "assert_trap", "line": 508, "action": {"type": "invoke", "field": "dispatch-structural-i64", "args": [{"type": "i32", "value": "11"}]}, "text": "indirect call type mismatch", "expected": [{"type": "i64"}]}, 
  {"type": "assert_trap", "line": 509, "action": {"type": "invoke", "field": "dispatch-structural-i64", "args": [{"type": "i32", "value": "22"}]}, "text": "indirect call type mismatch", "expected": [{"type": "i64"}]}, 
  {"type": "assert_return", "line": 511, "action": {"type": "invoke", "field": "dispatch-structural-i32", "args": [{"type": "i32", "value": "4"}]}, "expected": [{"type": "i32", "value": "9"}]}, 
  {"type": "assert_return", "line": 512, "action": {"type": "invoke", "field": "dispatch-structural-i32", "args": [{"type": "i32", "value": "23"}]}, "expected": [{"type": "i32", "value": "362880"}]}, 
  {"type": "assert_return", "line": 513, "action": {"type": "invoke", "field": "dispatch-structural-i32", "args": [{"type": "i32", "value": "26"}]}, "expected": [{"type": "i32", "value": "55"}]}, 
  {"type": "assert_return", "line": 514, "action": {"type": "invoke", "field": "dispatch-structural-i32", "args": [{"type": "i32", "value": "19"}]}, "expected": [{"type": "i32", "value": "9"}]}, 
  {"type": "assert_trap", "line": 515, "action": {"type": "invoke", "field": "dispatch-structural-i32", "args": [{"type": "i32", "value": "9"}]}, "text": "indirect call type mismatch", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 516, "action": {"type": "invoke", "field": "dispatch-structural-i32", "args": [{"type": "i32", "value": "21"}]}, "text": "indirect call type mismatch", "expected": [{"type": "i32"}]}, 
  {"type": "assert_return", "line": 518, "action": {"type": "invoke", "field": "dispatch-structural-f32", "args": [{"type": "i32", "value": "6"}]}, "expected": [{"type": "f32", "value": "1091567616"}]}, 
  {"type": "assert_return", "line": 519, "action": {"type": "invoke", "field": "dispatch-structural-f32", "args": [{"type": "i32", "value": "24"}]}, "expected": [{"type": "f32", "value": "1219571712"}]}, 
  {"type": "assert_return", "line": 520, "action": {"type": "invoke", "field": "dispatch-structural-f32", "args": [{"type": "i32", "value": "27"}]}, "expected": [{"type": "f32", "value": "1113325568"}]}, 
  {"type": "assert_return", "line": 521, "action": {"type": "invoke", "field": "dispatch-structural-f32", "args": [{"type": "i32", "value": "21"}]}, "expected": [{"type": "f32", "value": "1091567616"}]}, 
  {"type": "assert_trap", "line": 522, "action": {"type": "invoke", "field": "dispatch-structural-f32", "args": [{"type": "i32", "value": "8"}]}, "text": "indirect call type mismatch", "expected": [{"type": "f32"}]}, 
  {"type": "assert_trap", "line": 523, "action": {"type": "invoke", "field": "dispatch-structural-f32", "args": [{"type": "i32", "value": "19"}]}, "text": "indirect call type mismatch", "expected": [{"type": "f32"}]}, 
  {"type": "assert_return", "line": 525, "action": {"type": "invoke", "field": "dispatch-structural-f64", "args": [{"type": "i32", "value": "7"}]}, "expected": [{"type": "f64", "value": "4621256167635550208"}]}, 
  {"type": "assert_return", "line": 526, "action": {"type": "invoke", "field": "dispatch-structural-f64", "args": [{"type": "i32", "value": "25"}]}, "expected": [{"type": "f64", "value": "4689977843394805760"}]}, 
  {"type": "assert_return", "line": 527, "action": {"type": "invoke", "field": "dispatch-structural-f64", "args": [{"type": "i32", "value": "28"}]}, "expected": [{"type": "f64", "value": "4632937379169042432"}]}, 
  {"type": "assert_return", "line": 528, "action": {"type": "invoke", "field": "dispatch-structural-f64", "args": [{"type": "i32", "value": "22"}]}, "expected": [{"type": "f64", "value": "4621256167635550208"}]}, 
  {"type": "assert_trap", "line": 529, "action": {"type": "invoke", "field": "dispatch-structural-f64", "args": [{"type": "i32", "value": "10"}]}, "text": "indirect call type mismatch", "expected": [{"type": "f64"}]}, 
  {"type": "assert_trap", "line": 530, "action": {"type": "invoke", "field": "dispatch-structural-f64", "args": [{"type": "i32", "value": "18"}]}, "text": "indirect call type mismatch", "expected": [{"type": "f64"}]}, 
  {"type": "assert_return", "line": 532, "action": {"type": "invoke", "field": "fac-i64", "args": [{"type": "i64", "value": "0"}]}, "expected": [{"type": "i64", "value": "1"}]}, 
  {"type": "assert_return", "line": 533, "action": {"type": "invoke", "field": "fac-i64", "args": [{"type": "i64", "value": "1"}]}, "expected": [{"type": "i64", "value": "1"}]}, 
  {"type": "assert_return", "line": 534, "action": {"type": "invoke", "field": "fac-i64", "args": [{"type": "i64", "value": "5"}]}, "expected": [{"type": "i64", "value": "120"}]}, 
  {"type": "assert_return", "line": 535, "action": {"type": "invoke", "field": "fac-i64", "args": [{"type": "i64", "value": "25"}]}, "expected": [{"type": "i64", "value": "7034535277573963776"}]}, 
  {"type": "assert_return", "line": 537, "action": {"type": "invoke", "field": "fac-i32", "args": [{"type": "i32", "value": "0"}]}, "expected": [{"type": "i32", "value": "1"}]}, 
  {"type": "assert_return", "line": 538, "action": {"type": "invoke", "field": "fac-i32", "args": [{"type": "i32", "value": "1"}]}, "expected": [{"type": "i32", "value": "1"}]}, 
  {"type": "assert_return", "line": 539, "action": {"type": "invoke", "field": "fac-i32", "args": [{"type": "i32", "value": "5"}]}, "expected": [{"type": "i32", "value": "120"}]}, 
  {"type": "assert_return", "line": 540, "action": {"type": "invoke", "field": "fac-i32", "args": [{"type": "i32", "value": "10"}]}, "expected": [{"type": "i32", "value": "3628800"}]}, 
  {"type": "assert_return", "line": 542, "action": {"type": "invoke", "field": "fac-f32", "args": [{"type": "f32", "value": "0"}]}, "expected": [{"type": "f32", "value": "1065353216"}]}, 
  {"type": "assert_return", "line": 543, "action": {"type": "invoke", "field": "fac-f32", "args": [{"type": "f32", "value": "1065353216"}]}, "expected": [{"type": "f32", "value": "1065353216"}]}, 
  {"type": "assert_return", "line": 544, "action": {"type": "invoke", "field": "fac-f32", "args": [{"type": "f32", "value": "1084227584"}]}, "expected": [{"type": "f32", "value": "1123024896"}]}, 
  {"type": "assert_return", "line": 545, "action": {"type": "invoke", "field": "fac-f32", "args": [{"type": "f32", "value": "1092616192"}]}, "expected": [{"type": "f32", "value": "1247640576"}]}, 
  {"type": "assert_return", "line": 547, "action": {"type": "invoke", "field": "fac-f64", "args": [{"type": "f64", "value": "0"}]}, "expected": [{"type": "f64", "value": "4607182418800017408"}]}, 
  {"type": "assert_return", "line": 548, "action": {"type": "invoke", "field": "fac-f64", "args": [{"type": "f64", "value": "4607182418800017408"}]}, "expected": [{"type": "f64", "value": "4607182418800017408"}]}, 
  {"type": "assert_return", "line": 549, "action": {"type": "invoke", "field": "fac-f64", "args": [{"type": "f64", "value": "4617315517961601024"}]}, "expected": [{"type": "f64", "value": "4638144666238189568"}]}, 
  {"type": "assert_return", "line": 550, "action": {"type": "invoke", "field": "fac-f64", "args": [{"type": "f64", "value": "4621819117588971520"}]}, "expected": [{"type": "f64", "value": "4705047200009289728"}]}, 
  {"type": "assert_return", "line": 552, "action": {"type": "invoke", "field": "fib-i64", "args": [{"type": "i64", "value": "0"}]}, "expected": [{"type": "i64", "value": "1"}]}, 
  {"type": "assert_return", "line": 553, "action": {"type": "invoke", "field": "fib-i64", "args": [{"type": "i64", "value": "1"}]}, "expected": [{"type": "i64", "value": "1"}]}, 
  {"type": "assert_return", "line": 554, "action": {"type": "invoke", "field": "fib-i64", "args": [{"type": "i64", "value": "2"}]}, "expected": [{"type": "i64", "value": "2"}]}, 
  {"type": "assert_return", "line": 555, "action": {"type": "invoke", "field": "fib-i64", "args": [{"type": "i64", "value": "5"}]}, "expected": [{"type": "i64", "value": "8"}]}, 
  {"type": "assert_return", "line": 556, "action": {"type": "invoke", "field": "fib-i64", "args": [{"type": "i64", "value": "20"}]}, "expected": [{"type": "i64", "value": "10946"}]}, 
  {"type": "assert_return", "line": 558, "action": {"type": "invoke", "field": "fib-i32", "args": [{"type": "i32", "value": "0"}]}, "expected": [{"type": "i32", "value": "1"}]}, 
  {"type": "assert_return", "line": 559, "action": {"type": "invoke", "field": "fib-i32", "args": [{"type": "i32", "value": "1"}]}, "expected": [{"type": "i32", "value": "1"}]}, 
  {"type": "assert_return", "line": 560, "action": {"type": "invoke", "field": "fib-i32", "args": [{"type": "i32", "value": "2"}]}, "expected": [{"type": "i32", "value": "2"}]}, 
  {"type": "assert_return", "line": 561, "action": {"type": "invoke", "field": "fib-i32", "args": [{"type": "i32", "value": "5"}]}, "expected": [{"type": "i32", "value": "8"}]}, 
  {"type": "assert_return", "line": 562, "action": {"type": "invoke", "field": "fib-i32", "args": [{"type": "i32", "value": "20"}]}, "expected": [{"type": "i32", "value": "10946"}]}, 
  {"type": "assert_return", "line": 564, "action": {"type": "invoke", "field": "fib-f32", "args": [{"type": "f32", "value": "0"}]}, "expected": [{"type": "f32", "value": "1065353216"}]}, 
  {"type": "assert_return", "line": 565, "action": {"type": "invoke", "field": "fib-f32", "args": [{"type": "f32", "value": "1065353216"}]}, "expected": [{"type": "f32", "value": "1065353216"}]}, 
  {"type": "assert_return", "line": 566, "action": {"type": "invoke", "field": "fib-f32", "args": [{"type": "f32", "value": "1073741824"}]}, "expected": [{"type": "f32", "value": "1073741824"}]}, 
  {"type": "assert_return", "line": 567, "action": {"type": "invoke", "field": "fib-f32", "args": [{"type": "f32", "value": "1084227584"}]}, "expected": [{"type": "f32", "value": "1090519040"}]}, 
  {"type": "assert_return", "line": 568, "action": {"type": "invoke", "field": "fib-f32", "args": [{"type": "f32", "value": "1101004800"}]}, "expected": [{"type": "f32", "value": "1177225216"}]}, 
  {"type": "assert_return", "line": 570, "action": {"type": "invoke", "field": "fib-f64", "args": [{"type": "f64", "value": "0"}]}, "expected": [{"type": "f64", "value": "4607182418800017408"}]}, 
  {"type": "assert_return", "line": 571, "action": {"type": "invoke", "field": "fib-f64", "args": [{"type": "f64", "value": "4607182418800017408"}]}, "expected": [{"type": "f64", "value": "4607182418800017408"}]}, 
  {"type": "assert_return", "line": 572, "action": {"type": "invoke", "field": "fib-f64", "args": [{"type": "f64", "value": "4611686018427387904"}]}, "expected": [{"type": "f64", "value": "4611686018427387904"}]}, 
  {"type": "assert_return", "line": 573, "action": {"type": "invoke", "field": "fib-f64", "args": [{"type": "f64", "value": "4617315517961601024"}]}, "expected": [{"type": "f64", "value": "4620693217682128896"}]}, 
  {"type": "assert_return", "line": 574, "action": {"type": "invoke", "field": "fib-f64", "args": [{"type": "f64", "value": "4626322717216342016"}]}, "expected": [{"type": "f64", "value": "4667243241467281408"}]}, 
  {"type": "assert_return", "line": 576, "action": {"type": "invoke", "field": "even", "args": [{"type": "i32", "value": "0"}]}, "expected": [{"type": "i32", "value": "44"}]}, 
  {"type": "assert_return", "line": 577, "action": {"type": "invoke", "field": "even", "args": [{"type": "i32", "value": "1"}]}, "expected": [{"type": "i32", "value": "99"}]}, 
  {"type": "assert_return", "line": 578, "action": {"type": "invoke", "field": "even", "args": [{"type": "i32", "value": "100"}]}, "expected": [{"type": "i32", "value": "44"}]}, 
  {"type": "assert_return", "line": 579, "action": {"type": "invoke", "field": "even", "args": [{"type": "i32", "value": "77"}]}, "expected": [{"type": "i32", "value": "99"}]}, 
  {"type": "assert_return", "line": 580, "action": {"type": "invoke", "field": "odd", "args": [{"type": "i32", "value": "0"}]}, "expected": [{"type": "i32", "value": "99"}]}, 
  {"type": "assert_return", "line": 581, "action": {"type": "invoke", "field": "odd", "args": [{"type": "i32", "value": "1"}]}, "expected": [{"type": "i32", "value": "44"}]}, 
  {"type": "assert_return", "line": 582, "action": {"type": "invoke", "field": "odd", "args": [{"type": "i32", "value": "200"}]}, "expected": [{"type": "i32", "value": "99"}]}, 
  {"type": "assert_return", "line": 583, "action": {"type": "invoke", "field": "odd", "args": [{"type": "i32", "value": "77"}]}, "expected": [{"type": "i32", "value": "44"}]}, 
  {"type": "assert_exhaustion", "line": 585, "action": {"type": "invoke", "field": "runaway", "args": []}, "text": "call stack exhausted", "expected": []}, 
  {"type": "assert_exhaustion", "line": 586, "action": {"type": "invoke", "field": "mutual-runaway", "args": []}, "text": "call stack exhausted", "expected": []}, 
  {"type": "assert_return", "line": 588, "action": {"type": "invoke", "field": "as-select-first", "args": []}, "expected": [{"type": "i32", "value": "306"}]}, 
  {"type": "assert_return", "line": 589, "action": {"type": "invoke", "field": "as-select-mid", "args": []}, "expected": [{"type": "i32", "value": "2"}]}, 
  {"type": "assert_return", "line": 590, "action": {"type": "invoke", "field": "as-select-last", "args": []}, "expected": [{"type": "i32", "value": "2"}]}, 
  {"type": "assert_return", "line": 592, "action": {"type": "invoke", "field": "as-if-condition", "args": []}, "expected": [{"type": "i32", "value": "1"}]}, 
  {"type": "assert_return", "line": 594, "action": {"type": "invoke", "field": "as-br_if-first", "args": []}, "expected": [{"type": "i64", "value": "356"}]}, 
  {"type": "assert_return", "line": 595, "action": {"type": "invoke", "field": "as-br_if-last", "args": []}, "expected": [{"type": "i32", "value": "2"}]}, 
  {"type": "assert_return", "line": 597, "action": {"type": "invoke", "field": "as-br_table-first", "args": []}, "expected": [{"type": "f32", "value": "1165172736"}]}, 
  {"type": "assert_return", "line": 598, "action": {"type": "invoke", "field": "as-br_table-last", "args": []}, "expected": [{"type": "i32", "value": "2"}]}, 
  {"type": "assert_return", "line": 600, "action": {"type": "invoke", "field": "as-store-first", "args": []}, "expected": []}, 
  {"type": "assert_return", "line": 601, "action": {"type": "invoke", "field": "as-store-last", "args": []}, "expected": []}, 
  {"type": "assert_return", "line": 603, "action": {"type": "invoke", "field": "as-memory.grow-value", "args": []}, "expected": [{"type": "i32", "value": "1"}]}, 
  {"type": "assert_return", "line": 604, "action": {"type": "invoke", "field": "as-return-value", "args": []}, "expected": [{"type": "i32", "value": "1"}]}, 
  {"type": "assert_return", "line": 605, "action": {"type": "invoke", "field": "as-drop-operand", "args": []}, "expected": []}, 
  {"type": "assert_return", "line": 606, "action": {"type": "invoke", "field": "as-br-value", "args": []}, "expected": [{"type": "f32", "value": "1065353216"}]}, 
  {"type": "assert_return", "line": 607, "action": {"type": "invoke", "field": "as-local.set-value", "args": []}, "expected": [{"type": "f64", "value": "4607182418800017408"}]}, 
  {"type": "assert_return", "line": 608, "action": {"type": "invoke", "field": "as-local.tee-value", "args": []}, "expected": [{"type": "f64", "value": "4607182418800017408"}]}, 
  {"type": "assert_return", "line": 609, "action": {"type": "invoke", "field": "as-global.set-value", "args": []}, "expected": [{"type": "f64", "value": "4607182418800017408"}]}, 
  {"type": "assert_return", "line": 610, "action": {"type": "invoke", "field": "as-load-operand", "args": []}, "expected": [{"type": "i32", "value": "1"}]}, 
  {"type": "assert_return", "line": 612, "action": {"type": "invoke", "field": "as-unary-operand", "args": []}, "expected": [{"type": "f32", "value": "0"}]}, 
  {"type": "assert_return", "line": 613, "action": {"type": "invoke", "field": "as-binary-left", "args": []}, "expected": [{"type": "i32", "value": "11"}]}, 
  {"type": "assert_return", "line": 614, "action": {"type": "invoke", "field": "as-binary-right", "args": []}, "expected": [{"type": "i32", "value": "9"}]}, 
  {"type": "assert_return", "line": 615, "action": {"type": "invoke", "field": "as-test-operand", "args": []}, "expected": [{"type": "i32", "value": "0"}]}, 
  {"type": "assert_return", "line": 616, "action": {"type": "invoke", "field": "as-compare-left", "args": []}, "expected": [{"type": "i32", "value": "1"}]}, 
  {"type": "assert_return", "line": 617, "action": {"type": "invoke", "field": "as-compare-right", "args": []}, "expected": [{"type": "i32", "value": "1"}]}, 
  {"type": "assert_return", "line": 618, "action": {"type": "invoke", "field": "as-convert-operand", "args": []}, "expected": [{"type": "i64", "value": "1"}]}, 
  {"type": "module", "line": 623, "filename": "call_indirect.1.wasm"}, 
  {"type": "assert_return", "line": 650, "action": {"type": "invoke", "field": "call-1", "args": [{"type": "i32", "value": "2"}, {"type": "i32", "value": "3"}, {"type": "i32", "value": "0"}]}, "expected": [{"type": "i32", "value": "5"}]}, 
  {"type": "assert_return", "line": 651, "action": {"type": "invoke", "field": "call-1", "args": [{"type": "i32", "value": "2"}, {"type": "i32", "value": "3"}, {"type": "i32", "value": "1"}]}, "expected": [{"type": "i32", "value": "4294967295"}]}, 
  {"type": "assert_trap", "line": 652, "action": {"type": "invoke", "field": "call-1", "args": [{"type": "i32", "value": "2"}, {"type": "i32", "value": "3"}, {"type": "i32", "value": "2"}]}, "text": "undefined element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_return", "line": 654, "action": {"type": "invoke", "field": "call-2", "args": [{"type": "i32", "value": "2"}, {"type": "i32", "value": "3"}, {"type": "i32", "value": "0"}]}, "expected": [{"type": "i32", "value": "6"}]}, 
  {"type": "assert_return", "line": 655, "action": {"type": "invoke", "field": "call-2", "args": [{"type": "i32", "value": "2"}, {"type": "i32", "value": "3"}, {"type": "i32", "value": "1"}]}, "expected": [{"type": "i32", "value": "0"}]}, 
  {"type": "assert_return", "line": 656, "action": {"type": "invoke", "field": "call-2", "args": [{"type": "i32", "value": "2"}, {"type": "i32", "value": "3"}, {"type": "i32", "value": "2"}]}, "expected": [{"type": "i32", "value": "2"}]}, 
  {"type": "assert_trap", "line": 657, "action": {"type": "invoke", "field": "call-2", "args": [{"type": "i32", "value": "2"}, {"type": "i32", "value": "3"}, {"type": "i32", "value": "3"}]}, "text": "undefined element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_return", "line": 659, "action": {"type": "invoke", "field": "call-3", "args": [{"type": "i32", "value": "2"}, {"type": "i32", "value": "3"}, {"type": "i32", "value": "0"}]}, "expected": [{"type": "i32", "value": "4294967295"}]}, 
  {"type": "assert_return", "line": 660, "action": {"type": "invoke", "field": "call-3", "args": [{"type": "i32", "value": "2"}, {"type": "i32", "value": "3"}, {"type": "i32", "value": "1"}]}, "expected": [{"type": "i32", "value": "6"}]}, 
  {"type": "assert_trap", "line": 661, "action": {"type": "invoke", "field": "call-3", "args": [{"type": "i32", "value": "2"}, {"type": "i32", "value": "3"}, {"type": "i32", "value": "2"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 662, "action": {"type": "invoke", "field": "call-3", "args": [{"type": "i32", "value": "2"}, {"type": "i32", "value": "3"}, {"type": "i32", "value": "3"}]}, "text": "indirect call type mismatch", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 663, "action": {"type": "invoke", "field": "call-3", "args": [{"type": "i32", "value": "2"}, {"type": "i32", "value": "3"}, {"type": "i32", "value": "4"}]}, "text": "undefined element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_malformed", "line": 669, "filename": "call_indirect.2.wat", "text": "unexpected token", "module_type": "text"}, 
  {"type": "assert_malformed", "line": 681, "filename": "call_indirect.3.wat", "text": "unexpected token", "module_type": "text"}, 
  {"type": "assert_malformed", "line": 693, "filename": "call_indirect.4.wat", "text": "unexpected token", "module_type": "text"}, 
  {"type": "assert_malformed", "line": 705, "filename": "call_indirect.5.wat", "text": "unexpected token", "module_type": "text"}, 
  {"type": "assert_malformed", "line": 717, "filename": "call_indirect.6.wat", "text": "unexpected token", "module_type": "text"}, 
  {"type": "assert_malformed", "line": 729, "filename": "call_indirect.7.wat", "text": "unexpected token", "module_type": "text"}, 
  {"type": "assert_malformed", "line": 739, "filename": "call_indirect.8.wat", "text": "unexpected token", "module_type": "text"}, 
  {"type": "assert_malformed", "line": 746, "filename": "call_indirect.9.wat", "text": "inline function type", "module_type": "text"}, 
  {"type": "assert_malformed", "line": 756, "filename": "call_indirect.10.wat", "text": "inline function type", "module_type": "text"}, 
  {"type": "assert_malformed", "line": 766, "filename": "call_indirect.11.wat", "text": "inline function type", "module_type": "text"}, 
  {"type": "assert_malformed", "line": 776, "filename": "call_indirect.12.wat", "text": "inline function type", "module_type": "text"}, 
  {"type": "assert_invalid", "line": 791, "filename": "call_indirect.13.wasm", "text": "unknown table", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 799, "filename": "call_indirect.14.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 807, "filename": "call_indirect.15.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 816, "filename": "call_indirect.16.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 824, "filename": "call_indirect.17.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 832, "filename": "call_indirect.18.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 840, "filename": "call_indirect.19.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 851, "filename": "call_indirect.20.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 859, "filename": "call_indirect.21.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 868, "filename": "call_indirect.22.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 878, "filename": "call_indirect.23.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 888, "filename": "call_indirect.24.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 898, "filename": "call_indirect.25.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 909, "filename": "call_indirect.26.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 922, "filename": "call_indirect.27.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 935, "filename": "call_indirect.28.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 948, "filename": "call_indirect.29.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 961, "filename": "call_indirect.30.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 977, "filename": "call_indirect.31.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 997, "filename": "call_indirect.32.wasm", "text": "unknown type", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 1004, "filename": "call_indirect.33.wasm", "text": "unknown type", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 1015, "filename": "call_indirect.34.wasm", "text": "unknown function", "module_type": "binary"}, 
  {"type": "module", "line": 1024, "filename": "call_indirect.35.wasm"}]},
  "code": [
    "(module (type $proc (func)) (type $out-i32 (func (result i32))) (type $out-i64 (func (result i64))) (type $out-f32 (func (result f32))) (type $out-f64 (func (result f64))) (type $out-f64-i32 (func (result f64 i32))) (type $over-i32 (func (param i32) (result i32))) (type $over-i64 (func (param i64) (result i64))) (type $over-f32 (func (param f32) (result f32))) (type $over-f64 (func (param f64) (result f64))) (type $over-i32-f64 (func (param i32 f64) (result i32 f64))) (type $swap-i32-i64 (func (param i32 i64) (result i64 i32))) (type $f32-i32 (func (param f32 i32) (result i32))) (type $i32-i64 (func (param i32 i64) (result i64))) (type $f64-f32 (func (param f64 f32) (result f32))) (type $i64-f64 (func (param i64 f64) (result f64))) (type $over-i32-duplicate (func (param i32) (result i32))) (type $over-i64-duplicate (func (param i64) (result i64))) (type $over-f32-duplicate (func (param f32) (result f32))) (type $over-f64-duplicate (func (param f64) (result f64)))\n  (func $const-i32 (type $out-i32) (i32.const 0x132))\n  (func $const-i64 (type $out-i64) (i64.const 0x164))\n  (func $const-f32 (type $out-f32) (f32.const 0xf32))\n  (func $const-f64 (type $out-f64) (f64.const 0xf64))\n  (func $const-f64-i32 (type $out-f64-i32) (f64.const 0xf64) (i32.const 32))\n  (func $id-i32 (type $over-i32) (local.get 0))\n  (func $id-i64 (type $over-i64) (local.get 0))\n  (func $id-f32 (type $over-f32) (local.get 0))\n  (func $id-f64 (type $over-f64) (local.get 0))\n  (func $id-i32-f64 (type $over-i32-f64) (local.get 0) (local.get 1))\n  (func $swap-i32-i64 (type $swap-i32-i64) (local.get 1) (local.get 0))\n  (func $i32-i64 (type $i32-i64) (local.get 1))\n  (func $i64-f64 (type $i64-f64) (local.get 1))\n  (func $f32-i32 (type $f32-i32) (local.get 1))\n  (func $f64-f32 (type $f64-f32) (local.get 1))\n  (func $over-i32-duplicate (type $over-i32-duplicate) (local.get 0))\n  (func $over-i64-duplicate (type $over-i64-duplicate) (local.get 0))\n  (func $over-f32-duplicate (type $over-f32-duplicate) (local.get 0))\n  (func $over-f64-duplicate (type $over-f64-duplicate) (local.get 0)) (table funcref (elem $const-i32 $const-i64 $const-f32 $const-f64 $id-i32 $id-i64 $id-f32 $id-f64 $f32-i32 $i32-i64 $f64-f32 $i64-f64 $fac-i64 $fib-i64 $even $odd $runaway $mutual-runaway1 $mutual-runaway2 $over-i32-duplicate $over-i64-duplicate $over-f32-duplicate $over-f64-duplicate $fac-i32 $fac-f32 $fac-f64 $fib-i32 $fib-f32 $fib-f64 $const-f64-i32 $id-i32-f64 $swap-i32-i64 ) )\n  (func (call_indirect (i32.const 0)) (call_indirect (param i64) (i64.const 0) (i32.const 0)) (call_indirect (param i64) (param) (param f64 i32 i64) (i64.const 0) (f64.const 0) (i32.const 0) (i64.const 0) (i32.const 0) ) (call_indirect (result) (i32.const 0)) (drop (i32.eqz (call_indirect (result i32) (i32.const 0)))) (drop (i32.eqz (call_indirect (result i32) (result) (i32.const 0)))) (drop (i32.eqz (call_indirect (param i64) (result i32) (i64.const 0) (i32.const 0)) )) (drop (i32.eqz (call_indirect (param) (param i64) (param) (param f64 i32 i64) (param) (param) (result) (result i32) (result) (result) (i64.const 0) (f64.const 0) (i32.const 0) (i64.const 0) (i32.const 0) ) )) (drop (i64.eqz (call_indirect (type $over-i64) (param i64) (result i64) (i64.const 0) (i32.const 0) ) )) )\n  (func (export \"type-i32\") (result i32) (call_indirect (type $out-i32) (i32.const 0)) )\n  (func (export \"type-i64\") (result i64) (call_indirect (type $out-i64) (i32.const 1)) )\n  (func (export \"type-f32\") (result f32) (call_indirect (type $out-f32) (i32.const 2)) )\n  (func (export \"type-f64\") (result f64) (call_indirect (type $out-f64) (i32.const 3)) )\n  (func (export \"type-f64-i32\") (result f64 i32) (call_indirect (type $out-f64-i32) (i32.const 29)) )\n  (func (export \"type-index\") (result i64) (call_indirect (type $over-i64) (i64.const 100) (i32.const 5)) )\n  (func (export \"type-first-i32\") (result i32) (call_indirect (type $over-i32) (i32.const 32) (i32.const 4)) )\n  (func (export \"type-first-i64\") (result i64) (call_indirect (type $over-i64) (i64.const 64) (i32.const 5)) )\n  (func (export \"type-first-f32\") (result f32) (call_indirect (type $over-f32) (f32.const 1.32) (i32.const 6)) )\n  (func (export \"type-first-f64\") (result f64) (call_indirect (type $over-f64) (f64.const 1.64) (i32.const 7)) )\n  (func (export \"type-second-i32\") (result i32) (call_indirect (type $f32-i32) (f32.const 32.1) (i32.const 32) (i32.const 8)) )\n  (func (export \"type-second-i64\") (result i64) (call_indirect (type $i32-i64) (i32.const 32) (i64.const 64) (i32.const 9)) )\n  (func (export \"type-second-f32\") (result f32) (call_indirect (type $f64-f32) (f64.const 64) (f32.const 32) (i32.const 10)) )\n  (func (export \"type-second-f64\") (result f64) (call_indirect (type $i64-f64) (i64.const 64) (f64.const 64.1) (i32.const 11)) )\n  (func (export \"type-all-f64-i32\") (result f64 i32) (call_indirect (type $out-f64-i32) (i32.const 29)) )\n  (func (export \"type-all-i32-f64\") (result i32 f64) (call_indirect (type $over-i32-f64) (i32.const 1) (f64.const 2) (i32.const 30) ) )\n  (func (export \"type-all-i32-i64\") (result i64 i32) (call_indirect (type $swap-i32-i64) (i32.const 1) (i64.const 2) (i32.const 31) ) )\n  (func (export \"dispatch\") (param i32 i64) (result i64) (call_indirect (type $over-i64) (local.get 1) (local.get 0)) )\n  (func (export \"dispatch-structural-i64\") (param i32) (result i64) (call_indirect (type $over-i64-duplicate) (i64.const 9) (local.get 0)) )\n  (func (export \"dispatch-structural-i32\") (param i32) (result i32) (call_indirect (type $over-i32-duplicate) (i32.const 9) (local.get 0)) )\n  (func (export \"dispatch-structural-f32\") (param i32) (result f32) (call_indirect (type $over-f32-duplicate) (f32.const 9.0) (local.get 0)) )\n  (func (export \"dispatch-structural-f64\") (param i32) (result f64) (call_indirect (type $over-f64-duplicate) (f64.const 9.0) (local.get 0)) )\n  (func $fac-i64 (export \"fac-i64\") (type $over-i64) (if (result i64) (i64.eqz (local.get 0)) (then (i64.const 1)) (else (i64.mul (local.get 0) (call_indirect (type $over-i64) (i64.sub (local.get 0) (i64.const 1)) (i32.const 12) ) ) ) ) )\n  (func $fib-i64 (export \"fib-i64\") (type $over-i64) (if (result i64) (i64.le_u (local.get 0) (i64.const 1)) (then (i64.const 1)) (else (i64.add (call_indirect (type $over-i64) (i64.sub (local.get 0) (i64.const 2)) (i32.const 13) ) (call_indirect (type $over-i64) (i64.sub (local.get 0) (i64.const 1)) (i32.const 13) ) ) ) ) )\n  (func $fac-i32 (export \"fac-i32\") (type $over-i32) (if (result i32) (i32.eqz (local.get 0)) (then (i32.const 1)) (else (i32.mul (local.get 0) (call_indirect (type $over-i32) (i32.sub (local.get 0) (i32.const 1)) (i32.const 23) ) ) ) ) )\n  (func $fac-f32 (export \"fac-f32\") (type $over-f32) (if (result f32) (f32.eq (local.get 0) (f32.const 0.0)) (then (f32.const 1.0)) (else (f32.mul (local.get 0) (call_indirect (type $over-f32) (f32.sub (local.get 0) (f32.const 1.0)) (i32.const 24) ) ) ) ) )\n  (func $fac-f64 (export \"fac-f64\") (type $over-f64) (if (result f64) (f64.eq (local.get 0) (f64.const 0.0)) (then (f64.const 1.0)) (else (f64.mul (local.get 0) (call_indirect (type $over-f64) (f64.sub (local.get 0) (f64.const 1.0)) (i32.const 25) ) ) ) ) )\n  (func $fib-i32 (export \"fib-i32\") (type $over-i32) (if (result i32) (i32.le_u (local.get 0) (i32.const 1)) (then (i32.const 1)) (else (i32.add (call_indirect (type $over-i32) (i32.sub (local.get 0) (i32.const 2)) (i32.const 26) ) (call_indirect (type $over-i32) (i32.sub (local.get 0) (i32.const 1)) (i32.const 26) ) ) ) ) )\n  (func $fib-f32 (export \"fib-f32\") (type $over-f32) (if (result f32) (f32.le (local.get 0) (f32.const 1.0)) (then (f32.const 1.0)) (else (f32.add (call_indirect (type $over-f32) (f32.sub (local.get 0) (f32.const 2.0)) (i32.const 27) ) (call_indirect (type $over-f32) (f32.sub (local.get 0) (f32.const 1.0)) (i32.const 27) ) ) ) ) )\n  (func $fib-f64 (export \"fib-f64\") (type $over-f64) (if (result f64) (f64.le (local.get 0) (f64.const 1.0)) (then (f64.const 1.0)) (else (f64.add (call_indirect (type $over-f64) (f64.sub (local.get 0) (f64.const 2.0)) (i32.const 28) ) (call_indirect (type $over-f64) (f64.sub (local.get 0) (f64.const 1.0)) (i32.const 28) ) ) ) ) )\n  (func $even (export \"even\") (param i32) (result i32) (if (result i32) (i32.eqz (local.get 0)) (then (i32.const 44)) (else (call_indirect (type $over-i32) (i32.sub (local.get 0) (i32.const 1)) (i32.const 15) ) ) ) )\n  (func $odd (export \"odd\") (param i32) (result i32) (if (result i32) (i32.eqz (local.get 0)) (then (i32.const 99)) (else (call_indirect (type $over-i32) (i32.sub (local.get 0) (i32.const 1)) (i32.const 14) ) ) ) )\n  (func $runaway (export \"runaway\") (call_indirect (type $proc) (i32.const 16)))\n  (func $mutual-runaway1 (export \"mutual-runaway\") (call_indirect (type $proc) (i32.const 18)))\n  (func $mutual-runaway2 (call_indirect (type $proc) (i32.const 17))) (memory 1)\n  (func (export \"as-select-first\") (result i32) (select (call_indirect (type $out-i32) (i32.const 0)) (i32.const 2) (i32.const 3)) )\n  (func (export \"as-select-mid\") (result i32) (select (i32.const 2) (call_indirect (type $out-i32) (i32.const 0)) (i32.const 3)) )\n  (func (export \"as-select-last\") (result i32) (select (i32.const 2) (i32.const 3) (call_indirect (type $out-i32) (i32.const 0))) )\n  (func (export \"as-if-condition\") (result i32) (if (result i32) (call_indirect (type $out-i32) (i32.const 0)) (then (i32.const 1)) (else (i32.const 2))) )\n  (func (export \"as-br_if-first\") (result i64) (block (result i64) (br_if 0 (call_indirect (type $out-i64) (i32.const 1)) (i32.const 2))) )\n  (func (export \"as-br_if-last\") (result i32) (block (result i32) (br_if 0 (i32.const 2) (call_indirect (type $out-i32) (i32.const 0)))) )\n  (func (export \"as-br_table-first\") (result f32) (block (result f32) (call_indirect (type $out-f32) (i32.const 2)) (i32.const 2) (br_table 0 0)) )\n  (func (export \"as-br_table-last\") (result i32) (block (result i32) (i32.const 2) (call_indirect (type $out-i32) (i32.const 0)) (br_table 0 0)) )\n  (func (export \"as-store-first\") (call_indirect (type $out-i32) (i32.const 0)) (i32.const 1) (i32.store) )\n  (func (export \"as-store-last\") (i32.const 10) (call_indirect (type $out-f64) (i32.const 3)) (f64.store) )\n  (func (export \"as-memory.grow-value\") (result i32) (memory.grow (call_indirect (type $out-i32) (i32.const 0))) )\n  (func (export \"as-return-value\") (result i32) (call_indirect (type $over-i32) (i32.const 1) (i32.const 4)) (return) )\n  (func (export \"as-drop-operand\") (call_indirect (type $over-i64) (i64.const 1) (i32.const 5)) (drop) )\n  (func (export \"as-br-value\") (result f32) (block (result f32) (br 0 (call_indirect (type $over-f32) (f32.const 1) (i32.const 6)))) )\n  (func (export \"as-local.set-value\") (result f64) (local f64) (local.set 0 (call_indirect (type $over-f64) (f64.const 1) (i32.const 7))) (local.get 0) )\n  (func (export \"as-local.tee-value\") (result f64) (local f64) (local.tee 0 (call_indirect (type $over-f64) (f64.const 1) (i32.const 7))) ) (global $a (mut f64) (f64.const 10.0))\n  (func (export \"as-global.set-value\") (result f64) (global.set $a (call_indirect (type $over-f64) (f64.const 1.0) (i32.const 7))) (global.get $a) )\n  (func (export \"as-load-operand\") (result i32) (i32.load (call_indirect (type $out-i32) (i32.const 0))) )\n  (func (export \"as-unary-operand\") (result f32) (block (result f32) (f32.sqrt (call_indirect (type $over-f32) (f32.const 0x0p+0) (i32.const 6)) ) ) )\n  (func (export \"as-binary-left\") (result i32) (block (result i32) (i32.add (call_indirect (type $over-i32) (i32.const 1) (i32.const 4)) (i32.const 10) ) ) )\n  (func (export \"as-binary-right\") (result i32) (block (result i32) (i32.sub (i32.const 10) (call_indirect (type $over-i32) (i32.const 1) (i32.const 4)) ) ) )\n  (func (export \"as-test-operand\") (result i32) (block (result i32) (i32.eqz (call_indirect (type $over-i32) (i32.const 1) (i32.const 4)) ) ) )\n  (func (export \"as-compare-left\") (result i32) (block (result i32) (i32.le_u (call_indirect (type $over-i32) (i32.const 1) (i32.const 4)) (i32.const 10) ) ) )\n  (func (export \"as-compare-right\") (result i32) (block (result i32) (i32.ne (i32.const 10) (call_indirect (type $over-i32) (i32.const 1) (i32.const 4)) ) ) )\n  (func (export \"as-convert-operand\") (result i64) (block (result i64) (i64.extend_i32_s (call_indirect (type $over-i32) (i32.const 1) (i32.const 4)) ) ) ))",
    "(assert_return (invoke \"type-i32\") (i32.const 0x132))",
    "(assert_return (invoke \"type-i64\") (i64.const 0x164))",
    "(assert_return (invoke \"type-f32\") (f32.const 0xf32))",
    "(assert_return (invoke \"type-f64\") (f64.const 0xf64))",
    "(assert_return (invoke \"type-f64-i32\") (f64.const 0xf64) (i32.const 32))",
    "(assert_return (invoke \"type-index\") (i64.const 100))",
    "(assert_return (invoke \"type-first-i32\") (i32.const 32))",
    "(assert_return (invoke \"type-first-i64\") (i64.const 64))",
    "(assert_return (invoke \"type-first-f32\") (f32.const 1.32))",
    "(assert_return (invoke \"type-first-f64\") (f64.const 1.64))",
    "(assert_return (invoke \"type-second-i32\") (i32.const 32))",
    "(assert_return (invoke \"type-second-i64\") (i64.const 64))",
    "(assert_return (invoke \"type-second-f32\") (f32.const 32))",
    "(assert_return (invoke \"type-second-f64\") (f64.const 64.1))",
    "(assert_return (invoke \"type-all-f64-i32\") (f64.const 0xf64) (i32.const 32))",
    "(assert_return (invoke \"type-all-i32-f64\") (i32.const 1) (f64.const 2))",
    "(assert_return (invoke \"type-all-i32-i64\") (i64.const 2) (i32.const 1))",
    "(assert_return (invoke \"dispatch\" (i32.const 5) (i64.const 2)) (i64.const 2))",
    "(assert_return (invoke \"dispatch\" (i32.const 5) (i64.const 5)) (i64.const 5))",
    "(assert_return (invoke \"dispatch\" (i32.const 12) (i64.const 5)) (i64.const 120))",
    "(assert_return (invoke \"dispatch\" (i32.const 13) (i64.const 5)) (i64.const 8))",
    "(assert_return (invoke \"dispatch\" (i32.const 20) (i64.const 2)) (i64.const 2))",
    "(assert_trap (invoke \"dispatch\" (i32.const 0) (i64.const 2)) \"indirect call type mismatch\")",
    "(assert_trap (invoke \"dispatch\" (i32.const 15) (i64.const 2)) \"indirect call type mismatch\")",
    "(assert_trap (invoke \"dispatch\" (i32.const 32) (i64.const 2)) \"undefined element\")",
    "(assert_trap (invoke \"dispatch\" (i32.const -1) (i64.const 2)) \"undefined element\")",
    "(assert_trap (invoke \"dispatch\" (i32.const 1213432423) (i64.const 2)) \"undefined element\")",
    "(assert_return (invoke \"dispatch-structural-i64\" (i32.const 5)) (i64.const 9))",
    "(assert_return (invoke \"dispatch-structural-i64\" (i32.const 12)) (i64.const 362880))",
    "(assert_return (invoke \"dispatch-structural-i64\" (i32.const 13)) (i64.const 55))",
    "(assert_return (invoke \"dispatch-structural-i64\" (i32.const 20)) (i64.const 9))",
    "(assert_trap (invoke \"dispatch-structural-i64\" (i32.const 11)) \"indirect call type mismatch\")",
    "(assert_trap (invoke \"dispatch-structural-i64\" (i32.const 22)) \"indirect call type mismatch\")",
    "(assert_return (invoke \"dispatch-structural-i32\" (i32.const 4)) (i32.const 9))",
    "(assert_return (invoke \"dispatch-structural-i32\" (i32.const 23)) (i32.const 362880))",
    "(assert_return (invoke \"dispatch-structural-i32\" (i32.const 26)) (i32.const 55))",
    "(assert_return (invoke \"dispatch-structural-i32\" (i32.const 19)) (i32.const 9))",
    "(assert_trap (invoke \"dispatch-structural-i32\" (i32.const 9)) \"indirect call type mismatch\")",
    "(assert_trap (invoke \"dispatch-structural-i32\" (i32.const 21)) \"indirect call type mismatch\")",
    "(assert_return (invoke \"dispatch-structural-f32\" (i32.const 6)) (f32.const 9.0))",
    "(assert_return (invoke \"dispatch-structural-f32\" (i32.const 24)) (f32.const 362880.0))",
    "(assert_return (invoke \"dispatch-structural-f32\" (i32.const 27)) (f32.const 55.0))",
    "(assert_return (invoke \"dispatch-structural-f32\" (i32.const 21)) (f32.const 9.0))",
    "(assert_trap (invoke \"dispatch-structural-f32\" (i32.const 8)) \"indirect call type mismatch\")",
    "(assert_trap (invoke \"dispatch-structural-f32\" (i32.const 19)) \"indirect call type mismatch\")",
    "(assert_return (invoke \"dispatch-structural-f64\" (i32.const 7)) (f64.const 9.0))",
    "(assert_return (invoke \"dispatch-structural-f64\" (i32.const 25)) (f64.const 362880.0))",
    "(assert_return (invoke \"dispatch-structural-f64\" (i32.const 28)) (f64.const 55.0))",
    "(assert_return (invoke \"dispatch-structural-f64\" (i32.const 22)) (f64.const 9.0))",
    "(assert_trap (invoke \"dispatch-structural-f64\" (i32.const 10)) \"indirect call type mismatch\")",
    "(assert_trap (invoke \"dispatch-structural-f64\" (i32.const 18)) \"indirect call type mismatch\")",
    "(assert_return (invoke \"fac-i64\" (i64.const 0)) (i64.const 1))",
    "(assert_return (invoke \"fac-i64\" (i64.const 1)) (i64.const 1))",
    "(assert_return (invoke \"fac-i64\" (i64.const 5)) (i64.const 120))",
    "(assert_return (invoke \"fac-i64\" (i64.const 25)) (i64.const 7034535277573963776))",
    "(assert_return (invoke \"fac-i32\" (i32.const 0)) (i32.const 1))",
    "(assert_return (invoke \"fac-i32\" (i32.const 1)) (i32.const 1))",
    "(assert_return (invoke \"fac-i32\" (i32.const 5)) (i32.const 120))",
    "(assert_return (invoke \"fac-i32\" (i32.const 10)) (i32.const 3628800))",
    "(assert_return (invoke \"fac-f32\" (f32.const 0.0)) (f32.const 1.0))",
    "(assert_return (invoke \"fac-f32\" (f32.const 1.0)) (f32.const 1.0))",
    "(assert_return (invoke \"fac-f32\" (f32.const 5.0)) (f32.const 120.0))",
    "(assert_return (invoke \"fac-f32\" (f32.const 10.0)) (f32.const 3628800.0))",
    "(assert_return (invoke \"fac-f64\" (f64.const 0.0)) (f64.const 1.0))",
    "(assert_return (invoke \"fac-f64\" (f64.const 1.0)) (f64.const 1.0))",
    "(assert_return (invoke \"fac-f64\" (f64.const 5.0)) (f64.const 120.0))",
    "(assert_return (invoke \"fac-f64\" (f64.const 10.0)) (f64.const 3628800.0))",
    "(assert_return (invoke \"fib-i64\" (i64.const 0)) (i64.const 1))",
    "(assert_return (invoke \"fib-i64\" (i64.const 1)) (i64.const 1))",
    "(assert_return (invoke \"fib-i64\" (i64.const 2)) (i64.const 2))",
    "(assert_return (invoke \"fib-i64\" (i64.const 5)) (i64.const 8))",
    "(assert_return (invoke \"fib-i64\" (i64.const 20)) (i64.const 10946))",
    "(assert_return (invoke \"fib-i32\" (i32.const 0)) (i32.const 1))",
    "(assert_return (invoke \"fib-i32\" (i32.const 1)) (i32.const 1))",
    "(assert_return (invoke \"fib-i32\" (i32.const 2)) (i32.const 2))",
    "(assert_return (invoke \"fib-i32\" (i32.const 5)) (i32.const 8))",
    "(assert_return (invoke \"fib-i32\" (i32.const 20)) (i32.const 10946))",
    "(assert_return (invoke \"fib-f32\" (f32.const 0.0)) (f32.const 1.0))",
    "(assert_return (invoke \"fib-f32\" (f32.const 1.0)) (f32.const 1.0))",
    "(assert_return (invoke \"fib-f32\" (f32.const 2.0)) (f32.const 2.0))",
    "(assert_return (invoke \"fib-f32\" (f32.const 5.0)) (f32.const 8.0))",
    "(assert_return (invoke \"fib-f32\" (f32.const 20.0)) (f32.const 10946.0))",
    "(assert_return (invoke \"fib-f64\" (f64.const 0.0)) (f64.const 1.0))",
    "(assert_return (invoke \"fib-f64\" (f64.const 1.0)) (f64.const 1.0))",
    "(assert_return (invoke \"fib-f64\" (f64.const 2.0)) (f64.const 2.0))",
    "(assert_return (invoke \"fib-f64\" (f64.const 5.0)) (f64.const 8.0))",
    "(assert_return (invoke \"fib-f64\" (f64.const 20.0)) (f64.const 10946.0))",
    "(assert_return (invoke \"even\" (i32.const 0)) (i32.const 44))",
    "(assert_return (invoke \"even\" (i32.const 1)) (i32.const 99))",
    "(assert_return (invoke \"even\" (i32.const 100)) (i32.const 44))",
    "(assert_return (invoke \"even\" (i32.const 77)) (i32.const 99))",
    "(assert_return (invoke \"odd\" (i32.const 0)) (i32.const 99))",
    "(assert_return (invoke \"odd\" (i32.const 1)) (i32.const 44))",
    "(assert_return (invoke \"odd\" (i32.const 200)) (i32.const 99))",
    "(assert_return (invoke \"odd\" (i32.const 77)) (i32.const 44))",
    "(assert_exhaustion (invoke \"runaway\") \"call stack exhausted\")",
    "(assert_exhaustion (invoke \"mutual-runaway\") \"call stack exhausted\")",
    "(assert_return (invoke \"as-select-first\") (i32.const 0x132))",
    "(assert_return (invoke \"as-select-mid\") (i32.const 2))",
    "(assert_return (invoke \"as-select-last\") (i32.const 2))",
    "(assert_return (invoke \"as-if-condition\") (i32.const 1))",
    "(assert_return (invoke \"as-br_if-first\") (i64.const 0x164))",
    "(assert_return (invoke \"as-br_if-last\") (i32.const 2))",
    "(assert_return (invoke \"as-br_table-first\") (f32.const 0xf32))",
    "(assert_return (invoke \"as-br_table-last\") (i32.const 2))",
    "(assert_return (invoke \"as-store-first\"))",
    "(assert_return (invoke \"as-store-last\"))",
    "(assert_return (invoke \"as-memory.grow-value\") (i32.const 1))",
    "(assert_return (invoke \"as-return-value\") (i32.const 1))",
    "(assert_return (invoke \"as-drop-operand\"))",
    "(assert_return (invoke \"as-br-value\") (f32.const 1))",
    "(assert_return (invoke \"as-local.set-value\") (f64.const 1))",
    "(assert_return (invoke \"as-local.tee-value\") (f64.const 1))",
    "(assert_return (invoke \"as-global.set-value\") (f64.const 1.0))",
    "(assert_return (invoke \"as-load-operand\") (i32.const 1))",
    "(assert_return (invoke \"as-unary-operand\") (f32.const 0x0p+0))",
    "(assert_return (invoke \"as-binary-left\") (i32.const 11))",
    "(assert_return (invoke \"as-binary-right\") (i32.const 9))",
    "(assert_return (invoke \"as-test-operand\") (i32.const 0))",
    "(assert_return (invoke \"as-compare-left\") (i32.const 1))",
    "(assert_return (invoke \"as-compare-right\") (i32.const 1))",
    "(assert_return (invoke \"as-convert-operand\") (i64.const 1))",
    "(module (type $ii-i (func (param i32 i32) (result i32))) (table $t1 funcref (elem $f $g)) (table $t2 funcref (elem $h $i $j)) (table $t3 4 funcref) (elem (table $t3) (i32.const 0) $g $h) (elem (table $t3) (i32.const 3) $z)\n  (func $f (type $ii-i) (i32.add (local.get 0) (local.get 1)))\n  (func $g (type $ii-i) (i32.sub (local.get 0) (local.get 1)))\n  (func $h (type $ii-i) (i32.mul (local.get 0) (local.get 1)))\n  (func $i (type $ii-i) (i32.div_u (local.get 0) (local.get 1)))\n  (func $j (type $ii-i) (i32.rem_u (local.get 0) (local.get 1)))\n  (func $z)\n  (func (export \"call-1\") (param i32 i32 i32) (result i32) (call_indirect $t1 (type $ii-i) (local.get 0) (local.get 1) (local.get 2)) )\n  (func (export \"call-2\") (param i32 i32 i32) (result i32) (call_indirect $t2 (type $ii-i) (local.get 0) (local.get 1) (local.get 2)) )\n  (func (export \"call-3\") (param i32 i32 i32) (result i32) (call_indirect $t3 (type $ii-i) (local.get 0) (local.get 1) (local.get 2)) ))",
    "(assert_return (invoke \"call-1\" (i32.const 2) (i32.const 3) (i32.const 0)) (i32.const 5))",
    "(assert_return (invoke \"call-1\" (i32.const 2) (i32.const 3) (i32.const 1)) (i32.const -1))",
    "(assert_trap (invoke \"call-1\" (i32.const 2) (i32.const 3) (i32.const 2)) \"undefined element\")",
    "(assert_return (invoke \"call-2\" (i32.const 2) (i32.const 3) (i32.const 0)) (i32.const 6))",
    "(assert_return (invoke \"call-2\" (i32.const 2) (i32.const 3) (i32.const 1)) (i32.const 0))",
    "(assert_return (invoke \"call-2\" (i32.const 2) (i32.const 3) (i32.const 2)) (i32.const 2))",
    "(assert_trap (invoke \"call-2\" (i32.const 2) (i32.const 3) (i32.const 3)) \"undefined element\")",
    "(assert_return (invoke \"call-3\" (i32.const 2) (i32.const 3) (i32.const 0)) (i32.const -1))",
    "(assert_return (invoke \"call-3\" (i32.const 2) (i32.const 3) (i32.const 1)) (i32.const 6))",
    "(assert_trap (invoke \"call-3\" (i32.const 2) (i32.const 3) (i32.const 2)) \"uninitialized element\")",
    "(assert_trap (invoke \"call-3\" (i32.const 2) (i32.const 3) (i32.const 3)) \"indirect call type mismatch\")",
    "(assert_trap (invoke \"call-3\" (i32.const 2) (i32.const 3) (i32.const 4)) \"undefined element\")",
    "(assert_malformed (module quote \"(type $sig (func (param i32) (result i32)))\" \"(table 0 funcref)\" \"(func (result i32)\" \" (call_indirect (type $sig) (result i32) (param i32)\" \" (i32.const 0) (i32.const 0)\" \" )\" \")\" ) \"unexpected token\")",
    "(assert_malformed (module quote \"(type $sig (func (param i32) (result i32)))\" \"(table 0 funcref)\" \"(func (result i32)\" \" (call_indirect (param i32) (type $sig) (result i32)\" \" (i32.const 0) (i32.const 0)\" \" )\" \")\" ) \"unexpected token\")",
    "(assert_malformed (module quote \"(type $sig (func (param i32) (result i32)))\" \"(table 0 funcref)\" \"(func (result i32)\" \" (call_indirect (param i32) (result i32) (type $sig)\" \" (i32.const 0) (i32.const 0)\" \" )\" \")\" ) \"unexpected token\")",
    "(assert_malformed (module quote \"(type $sig (func (param i32) (result i32)))\" \"(table 0 funcref)\" \"(func (result i32)\" \" (call_indirect (result i32) (type $sig) (param i32)\" \" (i32.const 0) (i32.const 0)\" \" )\" \")\" ) \"unexpected token\")",
    "(assert_malformed (module quote \"(type $sig (func (param i32) (result i32)))\" \"(table 0 funcref)\" \"(func (result i32)\" \" (call_indirect (result i32) (param i32) (type $sig)\" \" (i32.const 0) (i32.const 0)\" \" )\" \")\" ) \"unexpected token\")",
    "(assert_malformed (module quote \"(table 0 funcref)\" \"(func (result i32)\" \" (call_indirect (result i32) (param i32) (i32.const 0) (i32.const 0))\" \")\" ) \"unexpected token\")",
    "(assert_malformed (module quote \"(table 0 funcref)\" \"(func (call_indirect (param $x i32) (i32.const 0) (i32.const 0)))\" ) \"unexpected token\")",
    "(assert_malformed (module quote \"(type $sig (func))\" \"(table 0 funcref)\" \"(func (result i32)\" \" (call_indirect (type $sig) (result i32) (i32.const 0))\" \")\" ) \"inline function type\")",
    "(assert_malformed (module quote \"(type $sig (func (param i32) (result i32)))\" \"(table 0 funcref)\" \"(func (result i32)\" \" (call_indirect (type $sig) (result i32) (i32.const 0))\" \")\" ) \"inline function type\")",
    "(assert_malformed (module quote \"(type $sig (func (param i32) (result i32)))\" \"(table 0 funcref)\" \"(func\" \" (call_indirect (type $sig) (param i32) (i32.const 0) (i32.const 0))\" \")\" ) \"inline function type\")",
    "(assert_malformed (module quote \"(type $sig (func (param i32 i32) (result i32)))\" \"(table 0 funcref)\" \"(func (result i32)\" \" (call_indirect (type $sig) (param i32) (result i32)\" \" (i32.const 0) (i32.const 0)\" \" )\" \")\" ) \"inline function type\")",
    "(assert_invalid (module (type (func)) (func $no-table (call_indirect (type 0) (i32.const 0))) ) \"unknown table\")",
    "(assert_invalid (module (type (func)) (table 0 funcref) (func $type-void-vs-num (i32.eqz (call_indirect (type 0) (i32.const 0)))) ) \"type mismatch\")",
    "(assert_invalid (module (type (func (result i64))) (table 0 funcref) (func $type-num-vs-num (i32.eqz (call_indirect (type 0) (i32.const 0)))) ) \"type mismatch\")",
    "(assert_invalid (module (type (func (param i32))) (table 0 funcref) (func $arity-0-vs-1 (call_indirect (type 0) (i32.const 0))) ) \"type mismatch\")",
    "(assert_invalid (module (type (func (param f64 i32))) (table 0 funcref) (func $arity-0-vs-2 (call_indirect (type 0) (i32.const 0))) ) \"type mismatch\")",
    "(assert_invalid (module (type (func)) (table 0 funcref) (func $arity-1-vs-0 (call_indirect (type 0) (i32.const 1) (i32.const 0))) ) \"type mismatch\")",
    "(assert_invalid (module (type (func)) (table 0 funcref) (func $arity-2-vs-0 (call_indirect (type 0) (f64.const 2) (i32.const 1) (i32.const 0)) ) ) \"type mismatch\")",
    "(assert_invalid (module (type (func (param i32))) (table 0 funcref) (func $type-func-void-vs-i32 (call_indirect (type 0) (i32.const 1) (nop))) ) \"type mismatch\")",
    "(assert_invalid (module (type (func (param i32))) (table 0 funcref) (func $type-func-num-vs-i32 (call_indirect (type 0) (i32.const 0) (i64.const 1))) ) \"type mismatch\")",
    "(assert_invalid (module (type (func (param i32 i32))) (table 0 funcref) (func $type-first-void-vs-num (call_indirect (type 0) (nop) (i32.const 1) (i32.const 0)) ) ) \"type mismatch\")",
    "(assert_invalid (module (type (func (param i32 i32))) (table 0 funcref) (func $type-second-void-vs-num (call_indirect (type 0) (i32.const 1) (nop) (i32.const 0)) ) ) \"type mismatch\")",
    "(assert_invalid (module (type (func (param i32 f64))) (table 0 funcref) (func $type-first-num-vs-num (call_indirect (type 0) (f64.const 1) (i32.const 1) (i32.const 0)) ) ) \"type mismatch\")",
    "(assert_invalid (module (type (func (param f64 i32))) (table 0 funcref) (func $type-second-num-vs-num (call_indirect (type 0) (i32.const 1) (f64.const 1) (i32.const 0)) ) ) \"type mismatch\")",
    "(assert_invalid (module (func $f (param i32)) (type $sig (func (param i32))) (table funcref (elem $f)) (func $type-first-empty-in-block (block (call_indirect (type $sig) (i32.const 0)) ) ) ) \"type mismatch\")",
    "(assert_invalid (module (func $f (param i32 i32)) (type $sig (func (param i32 i32))) (table funcref (elem $f)) (func $type-second-empty-in-block (block (call_indirect (type $sig) (i32.const 0) (i32.const 0)) ) ) ) \"type mismatch\")",
    "(assert_invalid (module (func $f (param i32)) (type $sig (func (param i32))) (table funcref (elem $f)) (func $type-first-empty-in-loop (loop (call_indirect (type $sig) (i32.const 0)) ) ) ) \"type mismatch\")",
    "(assert_invalid (module (func $f (param i32 i32)) (type $sig (func (param i32 i32))) (table funcref (elem $f)) (func $type-second-empty-in-loop (loop (call_indirect (type $sig) (i32.const 0) (i32.const 0)) ) ) ) \"type mismatch\")",
    "(assert_invalid (module (func $f (param i32)) (type $sig (func (param i32))) (table funcref (elem $f)) (func $type-first-empty-in-then (i32.const 0) (i32.const 0) (if (then (call_indirect (type $sig) (i32.const 0)) ) ) ) ) \"type mismatch\")",
    "(assert_invalid (module (func $f (param i32 i32)) (type $sig (func (param i32 i32))) (table funcref (elem $f)) (func $type-second-empty-in-then (i32.const 0) (i32.const 0) (if (then (call_indirect (type $sig) (i32.const 0) (i32.const 0)) ) ) ) ) \"type mismatch\")",
    "(assert_invalid (module (table 0 funcref) (func $unbound-type (call_indirect (type 1) (i32.const 0))) ) \"unknown type\")",
    "(assert_invalid (module (table 0 funcref) (func $large-type (call_indirect (type 1012321300) (i32.const 0))) ) \"unknown type\")",
    "(assert_invalid (module (table funcref (elem 0 0))) \"unknown function\")",
    "(module (table 1 funcref)\n  (func unreachable call_indirect)\n  (func unreachable call_indirect nop)\n  (func unreachable call_indirect call_indirect)\n  (func unreachable call_indirect (call_indirect))\n  (func unreachable call_indirect call_indirect call_indirect)\n  (func unreachable call_indirect (result))\n  (func unreachable call_indirect (result) (result))\n  (func unreachable call_indirect (result) (result) call_indirect)\n  (func unreachable call_indirect (result) (result) call_indirect (result))\n  (func (result i32) unreachable call_indirect select)\n  (func (result i32) unreachable call_indirect select call_indirect))"
  ],
  "dump": {
    "call_indirect.0.wasm": {
      "header": "\ncall_indirect.0.wasm:\tfile format wasm 0x1\n\nSections:\n\n     Type start=0x0000000b end=0x000000a3 (size=0x00000098) count: 29\n Function start=0x000000a5 end=0x000000f6 (size=0x00000051) count: 80\n    Table start=0x000000f8 end=0x000000fd (size=0x00000005) count: 1\n   Memory start=0x000000ff end=0x00000102 (size=0x00000003) count: 1\n   Global start=0x00000104 end=0x00000111 (size=0x0000000d) count: 1\n   Export start=0x00000114 end=0x000004d8 (size=0x000003c4) count: 59\n     Elem start=0x000004da end=0x00000500 (size=0x00000026) count: 1\n     Code start=0x00000503 end=0x000009e4 (size=0x000004e1) count: 80\n",
      "details": "\ncall_indirect.0.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nType[29]:\n - type[0] () -> nil\n - type[1] () -> i32\n - type[2] () -> i64\n - type[3] () -> f32\n - type[4] () -> f64\n - type[5] () -> (f64, i32)\n - type[6] (i32) -> i32\n - type[7] (i64) -> i64\n - type[8] (f32) -> f32\n - type[9] (f64) -> f64\n - type[10] (i32, f64) -> (i32, f64)\n - type[11] (i32, i64) -> (i64, i32)\n - type[12] (f32, i32) -> i32\n - type[13] (i32, i64) -> i64\n - type[14] (f64, f32) -> f32\n - type[15] (i64, f64) -> f64\n - type[16] (i32) -> i32\n - type[17] (i64) -> i64\n - type[18] (f32) -> f32\n - type[19] (f64) -> f64\n - type[20] (i64) -> nil\n - type[21] (i64, f64, i32, i64) -> nil\n - type[22] (i64) -> i32\n - type[23] (i64, f64, i32, i64) -> i32\n - type[24] () -> (i32, f64)\n - type[25] () -> (i64, i32)\n - type[26] (i32) -> i64\n - type[27] (i32) -> f32\n - type[28] (i32) -> f64\nFunction[80]:\n - func[0] sig=1\n - func[1] sig=2\n - func[2] sig=3\n - func[3] sig=4\n - func[4] sig=5\n - func[5] sig=6\n - func[6] sig=7\n - func[7] sig=8\n - func[8] sig=9\n - func[9] sig=10\n - func[10] sig=11\n - func[11] sig=13\n - func[12] sig=15\n - func[13] sig=12\n - func[14] sig=14\n - func[15] sig=16\n - func[16] sig=17\n - func[17] sig=18\n - func[18] sig=19\n - func[19] sig=0\n - func[20] sig=1 <type-i32>\n - func[21] sig=2 <type-i64>\n - func[22] sig=3 <type-f32>\n - func[23] sig=4 <type-f64>\n - func[24] sig=5 <type-f64-i32>\n - func[25] sig=2 <type-index>\n - func[26] sig=1 <type-first-i32>\n - func[27] sig=2 <type-first-i64>\n - func[28] sig=3 <type-first-f32>\n - func[29] sig=4 <type-first-f64>\n - func[30] sig=1 <type-second-i32>\n - func[31] sig=2 <type-second-i64>\n - func[32] sig=3 <type-second-f32>\n - func[33] sig=4 <type-second-f64>\n - func[34] sig=5 <type-all-f64-i32>\n - func[35] sig=24 <type-all-i32-f64>\n - func[36] sig=25 <type-all-i32-i64>\n - func[37] sig=13 <dispatch>\n - func[38] sig=26 <dispatch-structural-i64>\n - func[39] sig=6 <dispatch-structural-i32>\n - func[40] sig=27 <dispatch-structural-f32>\n - func[41] sig=28 <dispatch-structural-f64>\n - func[42] sig=7 <fac-i64>\n - func[43] sig=7 <fib-i64>\n - func[44] sig=6 <fac-i32>\n - func[45] sig=8 <fac-f32>\n - func[46] sig=9 <fac-f64>\n - func[47] sig=6 <fib-i32>\n - func[48] sig=8 <fib-f32>\n - func[49] sig=9 <fib-f64>\n - func[50] sig=6 <even>\n - func[51] sig=6 <odd>\n - func[52] sig=0 <runaway>\n - func[53] sig=0 <mutual-runaway>\n - func[54] sig=0\n - func[55] sig=1 <as-select-first>\n - func[56] sig=1 <as-select-mid>\n - func[57] sig=1 <as-select-last>\n - func[58] sig=1 <as-if-condition>\n - func[59] sig=2 <as-br_if-first>\n - func[60] sig=1 <as-br_if-last>\n - func[61] sig=3 <as-br_table-first>\n - func[62] sig=1 <as-br_table-last>\n - func[63] sig=0 <as-store-first>\n - func[64] sig=0 <as-store-last>\n - func[65] sig=1 <as-memory.grow-value>\n - func[66] sig=1 <as-return-value>\n - func[67] sig=0 <as-drop-operand>\n - func[68] sig=3 <as-br-value>\n - func[69] sig=4 <as-local.set-value>\n - func[70] sig=4 <as-local.tee-value>\n - func[71] sig=4 <as-global.set-value>\n - func[72] sig=1 <as-load-operand>\n - func[73] sig=3 <as-unary-operand>\n - func[74] sig=1 <as-binary-left>\n - func[75] sig=1 <as-binary-right>\n - func[76] sig=1 <as-test-operand>\n - func[77] sig=1 <as-compare-left>\n - func[78] sig=1 <as-compare-right>\n - func[79] sig=2 <as-convert-operand>\nTable[1]:\n - table[0] type=funcref initial=32 max=32\nMemory[1]:\n - memory[0] pages: initial=1\nGlobal[1]:\n - global[0] f64 mutable=1 - init f64=0x1.4p+3\nExport[59]:\n - func[20] <type-i32> -> \"type-i32\"\n - func[21] <type-i64> -> \"type-i64\"\n - func[22] <type-f32> -> \"type-f32\"\n - func[23] <type-f64> -> \"type-f64\"\n - func[24] <type-f64-i32> -> \"type-f64-i32\"\n - func[25] <type-index> -> \"type-index\"\n - func[26] <type-first-i32> -> \"type-first-i32\"\n - func[27] <type-first-i64> -> \"type-first-i64\"\n - func[28] <type-first-f32> -> \"type-first-f32\"\n - func[29] <type-first-f64> -> \"type-first-f64\"\n - func[30] <type-second-i32> -> \"type-second-i32\"\n - func[31] <type-second-i64> -> \"type-second-i64\"\n - func[32] <type-second-f32> -> \"type-second-f32\"\n - func[33] <type-second-f64> -> \"type-second-f64\"\n - func[34] <type-all-f64-i32> -> \"type-all-f64-i32\"\n - func[35] <type-all-i32-f64> -> \"type-all-i32-f64\"\n - func[36] <type-all-i32-i64> -> \"type-all-i32-i64\"\n - func[37] <dispatch> -> \"dispatch\"\n - func[38] <dispatch-structural-i64> -> \"dispatch-structural-i64\"\n - func[39] <dispatch-structural-i32> -> \"dispatch-structural-i32\"\n - func[40] <dispatch-structural-f32> -> \"dispatch-structural-f32\"\n - func[41] <dispatch-structural-f64> -> \"dispatch-structural-f64\"\n - func[42] <fac-i64> -> \"fac-i64\"\n - func[43] <fib-i64> -> \"fib-i64\"\n - func[44] <fac-i32> -> \"fac-i32\"\n - func[45] <fac-f32> -> \"fac-f32\"\n - func[46] <fac-f64> -> \"fac-f64\"\n - func[47] <fib-i32> -> \"fib-i32\"\n - func[48] <fib-f32> -> \"fib-f32\"\n - func[49] <fib-f64> -> \"fib-f64\"\n - func[50] <even> -> \"even\"\n - func[51] <odd> -> \"odd\"\n - func[52] <runaway> -> \"runaway\"\n - func[53] <mutual-runaway> -> \"mutual-runaway\"\n - func[55] <as-select-first> -> \"as-select-first\"\n - func[56] <as-select-mid> -> \"as-select-mid\"\n - func[57] <as-select-last> -> \"as-select-last\"\n - func[58] <as-if-condition> -> \"as-if-condition\"\n - func[59] <as-br_if-first> -> \"as-br_if-first\"\n - func[60] <as-br_if-last> -> \"as-br_if-last\"\n - func[61] <as-br_table-first> -> \"as-br_table-first\"\n - func[62] <as-br_table-last> -> \"as-br_table-last\"\n - func[63] <as-store-first> -> \"as-store-first\"\n - func[64] <as-store-last> -> \"as-store-last\"\n - func[65] <as-memory.grow-value> -> \"as-memory.grow-value\"\n - func[66] <as-return-value> -> \"as-return-value\"\n - func[67] <as-drop-operand> -> \"as-drop-operand\"\n - func[68] <as-br-value> -> \"as-br-value\"\n - func[69] <as-local.set-value> -> \"as-local.set-value\"\n - func[70] <as-local.tee-value> -> \"as-local.tee-value\"\n - func[71] <as-global.set-value> -> \"as-global.set-value\"\n - func[72] <as-load-operand> -> \"as-load-operand\"\n - func[73] <as-unary-operand> -> \"as-unary-operand\"\n - func[74] <as-binary-left> -> \"as-binary-left\"\n - func[75] <as-binary-right> -> \"as-binary-right\"\n - func[76] <as-test-operand> -> \"as-test-operand\"\n - func[77] <as-compare-left> -> \"as-compare-left\"\n - func[78] <as-compare-right> -> \"as-compare-right\"\n - func[79] <as-convert-operand> -> \"as-convert-operand\"\nElem[1]:\n - segment[0] flags=0 table=0 count=32 - init i32=0\n  - elem[0] = ref.func:0\n  - elem[1] = ref.func:1\n  - elem[2] = ref.func:2\n  - elem[3] = ref.func:3\n  - elem[4] = ref.func:5\n  - elem[5] = ref.func:6\n  - elem[6] = ref.func:7\n  - elem[7] = ref.func:8\n  - elem[8] = ref.func:13\n  - elem[9] = ref.func:11\n  - elem[10] = ref.func:14\n  - elem[11] = ref.func:12\n  - elem[12] = ref.func:42 <fac-i64>\n  - elem[13] = ref.func:43 <fib-i64>\n  - elem[14] = ref.func:50 <even>\n  - elem[15] = ref.func:51 <odd>\n  - elem[16] = ref.func:52 <runaway>\n  - elem[17] = ref.func:53 <mutual-runaway>\n  - elem[18] = ref.func:54\n  - elem[19] = ref.func:15\n  - elem[20] = ref.func:16\n  - elem[21] = ref.func:17\n  - elem[22] = ref.func:18\n  - elem[23] = ref.func:44 <fac-i32>\n  - elem[24] = ref.func:45 <fac-f32>\n  - elem[25] = ref.func:46 <fac-f64>\n  - elem[26] = ref.func:47 <fib-i32>\n  - elem[27] = ref.func:48 <fib-f32>\n  - elem[28] = ref.func:49 <fib-f64>\n  - elem[29] = ref.func:4\n  - elem[30] = ref.func:9\n  - elem[31] = ref.func:10\nCode[80]:\n - func[0] size=5\n - func[1] size=5\n - func[2] size=7\n - func[3] size=11\n - func[4] size=13\n - func[5] size=4\n - func[6] size=4\n - func[7] size=4\n - func[8] size=4\n - func[9] size=6\n - func[10] size=6\n - func[11] size=4\n - func[12] size=4\n - func[13] size=4\n - func[14] size=4\n - func[15] size=4\n - func[16] size=4\n - func[17] size=4\n - func[18] size=4\n - func[19] size=93\n - func[20] size=7 <type-i32>\n - func[21] size=7 <type-i64>\n - func[22] size=7 <type-f32>\n - func[23] size=7 <type-f64>\n - func[24] size=7 <type-f64-i32>\n - func[25] size=10 <type-index>\n - func[26] size=9 <type-first-i32>\n - func[27] size=10 <type-first-i64>\n - func[28] size=12 <type-first-f32>\n - func[29] size=16 <type-first-f64>\n - func[30] size=14 <type-second-i32>\n - func[31] size=12 <type-second-i64>\n - func[32] size=21 <type-second-f32>\n - func[33] size=19 <type-second-f64>\n - func[34] size=7 <type-all-f64-i32>\n - func[35] size=18 <type-all-i32-f64>\n - func[36] size=11 <type-all-i32-i64>\n - func[37] size=9 <dispatch>\n - func[38] size=9 <dispatch-structural-i64>\n - func[39] size=9 <dispatch-structural-i32>\n - func[40] size=12 <dispatch-structural-f32>\n - func[41] size=16 <dispatch-structural-f64>\n - func[42] size=24 <fac-i64>\n - func[43] size=34 <fib-i64>\n - func[44] size=24 <fac-i32>\n - func[45] size=35 <fac-f32>\n - func[46] size=47 <fac-f64>\n - func[47] size=34 <fib-i32>\n - func[48] size=46 <fib-f32>\n - func[49] size=62 <fib-f64>\n - func[50] size=21 <even>\n - func[51] size=22 <odd>\n - func[52] size=7 <runaway>\n - func[53] size=7 <mutual-runaway>\n - func[54] size=7\n - func[55] size=12 <as-select-first>\n - func[56] size=12 <as-select-mid>\n - func[57] size=12 <as-select-last>\n - func[58] size=15 <as-if-condition>\n - func[59] size=14 <as-br_if-first>\n - func[60] size=14 <as-br_if-last>\n - func[61] size=16 <as-br_table-first>\n - func[62] size=16 <as-br_table-last>\n - func[63] size=12 <as-store-first>\n - func[64] size=12 <as-store-last>\n - func[65] size=9 <as-memory.grow-value>\n - func[66] size=10 <as-return-value>\n - func[67] size=10 <as-drop-operand>\n - func[68] size=17 <as-br-value>\n - func[69] size=22 <as-local.set-value>\n - func[70] size=20 <as-local.tee-value>\n - func[71] size=20 <as-global.set-value>\n - func[72] size=10 <as-load-operand>\n - func[73] size=16 <as-unary-operand>\n - func[74] size=15 <as-binary-left>\n - func[75] size=15 <as-binary-right>\n - func[76] size=13 <as-test-operand>\n - func[77] size=15 <as-compare-left>\n - func[78] size=15 <as-compare-right>\n - func[79] size=13 <as-convert-operand>\n",
      "disassemble": "\ncall_indirect.0.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n000505 func[0]:\n 000506: 41 b2 02                   | i32.const 306\n 000509: 0b                         | end\n00050b func[1]:\n 00050c: 42 e4 02                   | i64.const 356\n 00050f: 0b                         | end\n000511 func[2]:\n 000512: 43 00 20 73 45             | f32.const 0x1.e64p+11\n 000517: 0b                         | end\n000519 func[3]:\n 00051a: 44 00 00 00 00 00 c8 ae 40 | f64.const 0x1.ec8p+11\n 000523: 0b                         | end\n000525 func[4]:\n 000526: 44 00 00 00 00 00 c8 ae 40 | f64.const 0x1.ec8p+11\n 00052f: 41 20                      | i32.const 32\n 000531: 0b                         | end\n000533 func[5]:\n 000534: 20 00                      | local.get 0\n 000536: 0b                         | end\n000538 func[6]:\n 000539: 20 00                      | local.get 0\n 00053b: 0b                         | end\n00053d func[7]:\n 00053e: 20 00                      | local.get 0\n 000540: 0b                         | end\n000542 func[8]:\n 000543: 20 00                      | local.get 0\n 000545: 0b                         | end\n000547 func[9]:\n 000548: 20 00                      | local.get 0\n 00054a: 20 01                      | local.get 1\n 00054c: 0b                         | end\n00054e func[10]:\n 00054f: 20 01                      | local.get 1\n 000551: 20 00                      | local.get 0\n 000553: 0b                         | end\n000555 func[11]:\n 000556: 20 01                      | local.get 1\n 000558: 0b                         | end\n00055a func[12]:\n 00055b: 20 01                      | local.get 1\n 00055d: 0b                         | end\n00055f func[13]:\n 000560: 20 01                      | local.get 1\n 000562: 0b                         | end\n000564 func[14]:\n 000565: 20 01                      | local.get 1\n 000567: 0b                         | end\n000569 func[15]:\n 00056a: 20 00                      | local.get 0\n 00056c: 0b                         | end\n00056e func[16]:\n 00056f: 20 00                      | local.get 0\n 000571: 0b                         | end\n000573 func[17]:\n 000574: 20 00                      | local.get 0\n 000576: 0b                         | end\n000578 func[18]:\n 000579: 20 00                      | local.get 0\n 00057b: 0b                         | end\n00057d func[19]:\n 00057e: 41 00                      | i32.const 0\n 000580: 11 00 00                   | call_indirect 0 (type 0)\n 000583: 42 00                      | i64.const 0\n 000585: 41 00                      | i32.const 0\n 000587: 11 14 00                   | call_indirect 0 (type 20)\n 00058a: 42 00                      | i64.const 0\n 00058c: 44 00 00 00 00 00 00 00 00 | f64.const 0x0p+0\n 000595: 41 00                      | i32.const 0\n 000597: 42 00                      | i64.const 0\n 000599: 41 00                      | i32.const 0\n 00059b: 11 15 00                   | call_indirect 0 (type 21)\n 00059e: 41 00                      | i32.const 0\n 0005a0: 11 00 00                   | call_indirect 0 (type 0)\n 0005a3: 41 00                      | i32.const 0\n 0005a5: 11 01 00                   | call_indirect 0 (type 1)\n 0005a8: 45                         | i32.eqz\n 0005a9: 1a                         | drop\n 0005aa: 41 00                      | i32.const 0\n 0005ac: 11 01 00                   | call_indirect 0 (type 1)\n 0005af: 45                         | i32.eqz\n 0005b0: 1a                         | drop\n 0005b1: 42 00                      | i64.const 0\n 0005b3: 41 00                      | i32.const 0\n 0005b5: 11 16 00                   | call_indirect 0 (type 22)\n 0005b8: 45                         | i32.eqz\n 0005b9: 1a                         | drop\n 0005ba: 42 00                      | i64.const 0\n 0005bc: 44 00 00 00 00 00 00 00 00 | f64.const 0x0p+0\n 0005c5: 41 00                      | i32.const 0\n 0005c7: 42 00                      | i64.const 0\n 0005c9: 41 00                      | i32.const 0\n 0005cb: 11 17 00                   | call_indirect 0 (type 23)\n 0005ce: 45                         | i32.eqz\n 0005cf: 1a                         | drop\n 0005d0: 42 00                      | i64.const 0\n 0005d2: 41 00                      | i32.const 0\n 0005d4: 11 07 00                   | call_indirect 0 (type 7)\n 0005d7: 50                         | i64.eqz\n 0005d8: 1a                         | drop\n 0005d9: 0b                         | end\n0005db func[20] <type-i32>:\n 0005dc: 41 00                      | i32.const 0\n 0005de: 11 01 00                   | call_indirect 0 (type 1)\n 0005e1: 0b                         | end\n0005e3 func[21] <type-i64>:\n 0005e4: 41 01                      | i32.const 1\n 0005e6: 11 02 00                   | call_indirect 0 (type 2)\n 0005e9: 0b                         | end\n0005eb func[22] <type-f32>:\n 0005ec: 41 02                      | i32.const 2\n 0005ee: 11 03 00                   | call_indirect 0 (type 3)\n 0005f1: 0b                         | end\n0005f3 func[23] <type-f64>:\n 0005f4: 41 03                      | i32.const 3\n 0005f6: 11 04 00                   | call_indirect 0 (type 4)\n 0005f9: 0b                         | end\n0005fb func[24] <type-f64-i32>:\n 0005fc: 41 1d                      | i32.const 29\n 0005fe: 11 05 00                   | call_indirect 0 (type 5)\n 000601: 0b                         | end\n000603 func[25] <type-index>:\n 000604: 42 e4 00                   | i64.const 100\n 000607: 41 05                      | i32.const 5\n 000609: 11 07 00                   | call_indirect 0 (type 7)\n 00060c: 0b                         | end\n00060e func[26] <type-first-i32>:\n 00060f: 41 20                      | i32.const 32\n 000611: 41 04                      | i32.const 4\n 000613: 11 06 00                   | call_indirect 0 (type 6)\n 000616: 0b                         | end\n000618 func[27] <type-first-i64>:\n 000619: 42 c0 00                   | i64.const 64\n 00061c: 41 05                      | i32.const 5\n 00061e: 11 07 00                   | call_indirect 0 (type 7)\n 000621: 0b                         | end\n000623 func[28] <type-first-f32>:\n 000624: 43 c3 f5 a8 3f             | f32.const 0x1.51eb86p+0\n 000629: 41 06                      | i32.const 6\n 00062b: 11 08 00                   | call_indirect 0 (type 8)\n 00062e: 0b                         | end\n000630 func[29] <type-first-f64>:\n 000631: 44 3d 0a d7 a3 70 3d fa 3f | f64.const 0x1.a3d70a3d70a3dp+0\n 00063a: 41 07                      | i32.const 7\n 00063c: 11 09 00                   | call_indirect 0 (type 9)\n 00063f: 0b                         | end\n000641 func[30] <type-second-i32>:\n 000642: 43 66 66 00 42             | f32.const 0x1.00ccccp+5\n 000647: 41 20                      | i32.const 32\n 000649: 41 08                      | i32.const 8\n 00064b: 11 0c 00                   | call_indirect 0 (type 12)\n 00064e: 0b                         | end\n000650 func[31] <type-second-i64>:\n 000651: 41 20                      | i32.const 32\n 000653: 42 c0 00                   | i64.const 64\n 000656: 41 09                      | i32.const 9\n 000658: 11 0d 00                   | call_indirect 0 (type 13)\n 00065b: 0b                         | end\n00065d func[32] <type-second-f32>:\n 00065e: 44 00 00 00 00 00 00 50 40 | f64.const 0x1p+6\n 000667: 43 00 00 00 42             | f32.const 0x1p+5\n 00066c: 41 0a                      | i32.const 10\n 00066e: 11 0e 00                   | call_indirect 0 (type 14)\n 000671: 0b                         | end\n000673 func[33] <type-second-f64>:\n 000674: 42 c0 00                   | i64.const 64\n 000677: 44 66 66 66 66 66 06 50 40 | f64.const 0x1.0066666666666p+6\n 000680: 41 0b                      | i32.const 11\n 000682: 11 0f 00                   | call_indirect 0 (type 15)\n 000685: 0b                         | end\n000687 func[34] <type-all-f64-i32>:\n 000688: 41 1d                      | i32.const 29\n 00068a: 11 05 00                   | call_indirect 0 (type 5)\n 00068d: 0b                         | end\n00068f func[35] <type-all-i32-f64>:\n 000690: 41 01                      | i32.const 1\n 000692: 44 00 00 00 00 00 00 00 40 | f64.const 0x1p+1\n 00069b: 41 1e                      | i32.const 30\n 00069d: 11 0a 00                   | call_indirect 0 (type 10)\n 0006a0: 0b                         | end\n0006a2 func[36] <type-all-i32-i64>:\n 0006a3: 41 01                      | i32.const 1\n 0006a5: 42 02                      | i64.const 2\n 0006a7: 41 1f                      | i32.const 31\n 0006a9: 11 0b 00                   | call_indirect 0 (type 11)\n 0006ac: 0b                         | end\n0006ae func[37] <dispatch>:\n 0006af: 20 01                      | local.get 1\n 0006b1: 20 00                      | local.get 0\n 0006b3: 11 07 00                   | call_indirect 0 (type 7)\n 0006b6: 0b                         | end\n0006b8 func[38] <dispatch-structural-i64>:\n 0006b9: 42 09                      | i64.const 9\n 0006bb: 20 00                      | local.get 0\n 0006bd: 11 11 00                   | call_indirect 0 (type 17)\n 0006c0: 0b                         | end\n0006c2 func[39] <dispatch-structural-i32>:\n 0006c3: 41 09                      | i32.const 9\n 0006c5: 20 00                      | local.get 0\n 0006c7: 11 10 00                   | call_indirect 0 (type 16)\n 0006ca: 0b                         | end\n0006cc func[40] <dispatch-structural-f32>:\n 0006cd: 43 00 00 10 41             | f32.const 0x1.2p+3\n 0006d2: 20 00                      | local.get 0\n 0006d4: 11 12 00                   | call_indirect 0 (type 18)\n 0006d7: 0b                         | end\n0006d9 func[41] <dispatch-structural-f64>:\n 0006da: 44 00 00 00 00 00 00 22 40 | f64.const 0x1.2p+3\n 0006e3: 20 00                      | local.get 0\n 0006e5: 11 13 00                   | call_indirect 0 (type 19)\n 0006e8: 0b                         | end\n0006ea func[42] <fac-i64>:\n 0006eb: 20 00                      | local.get 0\n 0006ed: 50                         | i64.eqz\n 0006ee: 04 7e                      | if i64\n 0006f0: 42 01                      |   i64.const 1\n 0006f2: 05                         | else\n 0006f3: 20 00                      |   local.get 0\n 0006f5: 20 00                      |   local.get 0\n 0006f7: 42 01                      |   i64.const 1\n 0006f9: 7d                         |   i64.sub\n 0006fa: 41 0c                      |   i32.const 12\n 0006fc: 11 07 00                   |   call_indirect 0 (type 7)\n 0006ff: 7e                         |   i64.mul\n 000700: 0b                         | end\n 000701: 0b                         | end\n000703 func[43] <fib-i64>:\n 000704: 20 00                      | local.get 0\n 000706: 42 01                      | i64.const 1\n 000708: 58                         | i64.le_u\n 000709: 04 7e                      | if i64\n 00070b: 42 01                      |   i64.const 1\n 00070d: 05                         | else\n 00070e: 20 00                      |   local.get 0\n 000710: 42 02                      |   i64.const 2\n 000712: 7d                         |   i64.sub\n 000713: 41 0d                      |   i32.const 13\n 000715: 11 07 00                   |   call_indirect 0 (type 7)\n 000718: 20 00                      |   local.get 0\n 00071a: 42 01                      |   i64.const 1\n 00071c: 7d                         |   i64.sub\n 00071d: 41 0d                      |   i32.const 13\n 00071f: 11 07 00                   |   call_indirect 0 (type 7)\n 000722: 7c                         |   i64.add\n 000723: 0b                         | end\n 000724: 0b                         | end\n000726 func[44] <fac-i32>:\n 000727: 20 00                      | local.get 0\n 000729: 45                         | i32.eqz\n 00072a: 04 7f                      | if i32\n 00072c: 41 01                      |   i32.const 1\n 00072e: 05                         | else\n 00072f: 20 00                      |   local.get 0\n 000731: 20 00                      |   local.get 0\n 000733: 41 01                      |   i32.const 1\n 000735: 6b                         |   i32.sub\n 000736: 41 17                      |   i32.const 23\n 000738: 11 06 00                   |   call_indirect 0 (type 6)\n 00073b: 6c                         |   i32.mul\n 00073c: 0b                         | end\n 00073d: 0b                         | end\n00073f func[45] <fac-f32>:\n 000740: 20 00                      | local.get 0\n 000742: 43 00 00 00 00             | f32.const 0x0p+0\n 000747: 5b                         | f32.eq\n 000748: 04 7d                      | if f32\n 00074a: 43 00 00 80 3f             |   f32.const 0x1p+0\n 00074f: 05                         | else\n 000750: 20 00                      |   local.get 0\n 000752: 20 00                      |   local.get 0\n 000754: 43 00 00 80 3f             |   f32.const 0x1p+0\n 000759: 93                         |   f32.sub\n 00075a: 41 18                      |   i32.const 24\n 00075c: 11 08 00                   |   call_indirect 0 (type 8)\n 00075f: 94                         |   f32.mul\n 000760: 0b                         | end\n 000761: 0b                         | end\n000763 func[46] <fac-f64>:\n 000764: 20 00                      | local.get 0\n 000766: 44 00 00 00 00 00 00 00 00 | f64.const 0x0p+0\n 00076f: 61                         | f64.eq\n 000770: 04 7c                      | if f64\n 000772: 44 00 00 00 00 00 00 f0 3f |   f64.const 0x1p+0\n 00077b: 05                         | else\n 00077c: 20 00                      |   local.get 0\n 00077e: 20 00                      |   local.get 0\n 000780: 44 00 00 00 00 00 00 f0 3f |   f64.const 0x1p+0\n 000789: a1                         |   f64.sub\n 00078a: 41 19                      |   i32.const 25\n 00078c: 11 09 00                   |   call_indirect 0 (type 9)\n 00078f: a2                         |   f64.mul\n 000790: 0b                         | end\n 000791: 0b                         | end\n000793 func[47] <fib-i32>:\n 000794: 20 00                      | local.get 0\n 000796: 41 01                      | i32.const 1\n 000798: 4d                         | i32.le_u\n 000799: 04 7f                      | if i32\n 00079b: 41 01                      |   i32.const 1\n 00079d: 05                         | else\n 00079e: 20 00                      |   local.get 0\n 0007a0: 41 02                      |   i32.const 2\n 0007a2: 6b                         |   i32.sub\n 0007a3: 41 1a                      |   i32.const 26\n 0007a5: 11 06 00                   |   call_indirect 0 (type 6)\n 0007a8: 20 00                      |   local.get 0\n 0007aa: 41 01                      |   i32.const 1\n 0007ac: 6b                         |   i32.sub\n 0007ad: 41 1a                      |   i32.const 26\n 0007af: 11 06 00                   |   call_indirect 0 (type 6)\n 0007b2: 6a                         |   i32.add\n 0007b3: 0b                         | end\n 0007b4: 0b                         | end\n0007b6 func[48] <fib-f32>:\n 0007b7: 20 00                      | local.get 0\n 0007b9: 43 00 00 80 3f             | f32.const 0x1p+0\n 0007be: 5f                         | f32.le\n 0007bf: 04 7d                      | if f32\n 0007c1: 43 00 00 80 3f             |   f32.const 0x1p+0\n 0007c6: 05                         | else\n 0007c7: 20 00                      |   local.get 0\n 0007c9: 43 00 00 00 40             |   f32.const 0x1p+1\n 0007ce: 93                         |   f32.sub\n 0007cf: 41 1b                      |   i32.const 27\n 0007d1: 11 08 00                   |   call_indirect 0 (type 8)\n 0007d4: 20 00                      |   local.get 0\n 0007d6: 43 00 00 80 3f             |   f32.const 0x1p+0\n 0007db: 93                         |   f32.sub\n 0007dc: 41 1b                      |   i32.const 27\n 0007de: 11 08 00                   |   call_indirect 0 (type 8)\n 0007e1: 92                         |   f32.add\n 0007e2: 0b                         | end\n 0007e3: 0b                         | end\n0007e5 func[49] <fib-f64>:\n 0007e6: 20 00                      | local.get 0\n 0007e8: 44 00 00 00 00 00 00 f0 3f | f64.const 0x1p+0\n 0007f1: 65                         | f64.le\n 0007f2: 04 7c                      | if f64\n 0007f4: 44 00 00 00 00 00 00 f0 3f |   f64.const 0x1p+0\n 0007fd: 05                         | else\n 0007fe: 20 00                      |   local.get 0\n 000800: 44 00 00 00 00 00 00 00 40 |   f64.const 0x1p+1\n 000809: a1                         |   f64.sub\n 00080a: 41 1c                      |   i32.const 28\n 00080c: 11 09 00                   |   call_indirect 0 (type 9)\n 00080f: 20 00                      |   local.get 0\n 000811: 44 00 00 00 00 00 00 f0 3f |   f64.const 0x1p+0\n 00081a: a1                         |   f64.sub\n 00081b: 41 1c                      |   i32.const 28\n 00081d: 11 09 00                   |   call_indirect 0 (type 9)\n 000820: a0                         |   f64.add\n 000821: 0b                         | end\n 000822: 0b                         | end\n000824 func[50] <even>:\n 000825: 20 00                      | local.get 0\n 000827: 45                         | i32.eqz\n 000828: 04 7f                      | if i32\n 00082a: 41 2c                      |   i32.const 44\n 00082c: 05                         | else\n 00082d: 20 00                      |   local.get 0\n 00082f: 41 01                      |   i32.const 1\n 000831: 6b                         |   i32.sub\n 000832: 41 0f                      |   i32.const 15\n 000834: 11 06 00                   |   call_indirect 0 (type 6)\n 000837: 0b                         | end\n 000838: 0b                         | end\n00083a func[51] <odd>:\n 00083b: 20 00                      | local.get 0\n 00083d: 45                         | i32.eqz\n 00083e: 04 7f                      | if i32\n 000840: 41 e3 00                   |   i32.const 99\n 000843: 05                         | else\n 000844: 20 00                      |   local.get 0\n 000846: 41 01                      |   i32.const 1\n 000848: 6b                         |   i32.sub\n 000849: 41 0e                      |   i32.const 14\n 00084b: 11 06 00                   |   call_indirect 0 (type 6)\n 00084e: 0b                         | end\n 00084f: 0b                         | end\n000851 func[52] <runaway>:\n 000852: 41 10                      | i32.const 16\n 000854: 11 00 00                   | call_indirect 0 (type 0)\n 000857: 0b                         | end\n000859 func[53] <mutual-runaway>:\n 00085a: 41 12                      | i32.const 18\n 00085c: 11 00 00                   | call_indirect 0 (type 0)\n 00085f: 0b                         | end\n000861 func[54]:\n 000862: 41 11                      | i32.const 17\n 000864: 11 00 00                   | call_indirect 0 (type 0)\n 000867: 0b                         | end\n000869 func[55] <as-select-first>:\n 00086a: 41 00                      | i32.const 0\n 00086c: 11 01 00                   | call_indirect 0 (type 1)\n 00086f: 41 02                      | i32.const 2\n 000871: 41 03                      | i32.const 3\n 000873: 1b                         | select\n 000874: 0b                         | end\n000876 func[56] <as-select-mid>:\n 000877: 41 02                      | i32.const 2\n 000879: 41 00                      | i32.const 0\n 00087b: 11 01 00                   | call_indirect 0 (type 1)\n 00087e: 41 03                      | i32.const 3\n 000880: 1b                         | select\n 000881: 0b                         | end\n000883 func[57] <as-select-last>:\n 000884: 41 02                      | i32.const 2\n 000886: 41 03                      | i32.const 3\n 000888: 41 00                      | i32.const 0\n 00088a: 11 01 00                   | call_indirect 0 (type 1)\n 00088d: 1b                         | select\n 00088e: 0b                         | end\n000890 func[58] <as-if-condition>:\n 000891: 41 00                      | i32.const 0\n 000893: 11 01 00                   | call_indirect 0 (type 1)\n 000896: 04 7f                      | if i32\n 000898: 41 01                      |   i32.const 1\n 00089a: 05                         | else\n 00089b: 41 02                      |   i32.const 2\n 00089d: 0b                         | end\n 00089e: 0b                         | end\n0008a0 func[59] <as-br_if-first>:\n 0008a1: 02 7e                      | block i64\n 0008a3: 41 01                      |   i32.const 1\n 0008a5: 11 02 00                   |   call_indirect 0 (type 2)\n 0008a8: 41 02                      |   i32.const 2\n 0008aa: 0d 00                      |   br_if 0\n 0008ac: 0b                         | end\n 0008ad: 0b                         | end\n0008af func[60] <as-br_if-last>:\n 0008b0: 02 7f                      | block i32\n 0008b2: 41 02                      |   i32.const 2\n 0008b4: 41 00                      |   i32.const 0\n 0008b6: 11 01 00                   |   call_indirect 0 (type 1)\n 0008b9: 0d 00                      |   br_if 0\n 0008bb: 0b                         | end\n 0008bc: 0b                         | end\n0008be func[61] <as-br_table-first>:\n 0008bf: 02 7d                      | block f32\n 0008c1: 41 02                      |   i32.const 2\n 0008c3: 11 03 00                   |   call_indirect 0 (type 3)\n 0008c6: 41 02                      |   i32.const 2\n 0008c8: 0e 01 00 00                |   br_table 0 0\n 0008cc: 0b                         | end\n 0008cd: 0b                         | end\n0008cf func[62] <as-br_table-last>:\n 0008d0: 02 7f                      | block i32\n 0008d2: 41 02                      |   i32.const 2\n 0008d4: 41 00                      |   i32.const 0\n 0008d6: 11 01 00                   |   call_indirect 0 (type 1)\n 0008d9: 0e 01 00 00                |   br_table 0 0\n 0008dd: 0b                         | end\n 0008de: 0b                         | end\n0008e0 func[63] <as-store-first>:\n 0008e1: 41 00                      | i32.const 0\n 0008e3: 11 01 00                   | call_indirect 0 (type 1)\n 0008e6: 41 01                      | i32.const 1\n 0008e8: 36 02 00                   | i32.store 2 0\n 0008eb: 0b                         | end\n0008ed func[64] <as-store-last>:\n 0008ee: 41 0a                      | i32.const 10\n 0008f0: 41 03                      | i32.const 3\n 0008f2: 11 04 00                   | call_indirect 0 (type 4)\n 0008f5: 39 03 00                   | f64.store 3 0\n 0008f8: 0b                         | end\n0008fa func[65] <as-memory.grow-value>:\n 0008fb: 41 00                      | i32.const 0\n 0008fd: 11 01 00                   | call_indirect 0 (type 1)\n 000900: 40 00                      | memory.grow 0\n 000902: 0b                         | end\n000904 func[66] <as-return-value>:\n 000905: 41 01                      | i32.const 1\n 000907: 41 04                      | i32.const 4\n 000909: 11 06 00                   | call_indirect 0 (type 6)\n 00090c: 0f                         | return\n 00090d: 0b                         | end\n00090f func[67] <as-drop-operand>:\n 000910: 42 01                      | i64.const 1\n 000912: 41 05                      | i32.const 5\n 000914: 11 07 00                   | call_indirect 0 (type 7)\n 000917: 1a                         | drop\n 000918: 0b                         | end\n00091a func[68] <as-br-value>:\n 00091b: 02 7d                      | block f32\n 00091d: 43 00 00 80 3f             |   f32.const 0x1p+0\n 000922: 41 06                      |   i32.const 6\n 000924: 11 08 00                   |   call_indirect 0 (type 8)\n 000927: 0c 00                      |   br 0\n 000929: 0b                         | end\n 00092a: 0b                         | end\n00092c func[69] <as-local.set-value>:\n 00092d: 01 7c                      | local[0] type=f64\n 00092f: 44 00 00 00 00 00 00 f0 3f | f64.const 0x1p+0\n 000938: 41 07                      | i32.const 7\n 00093a: 11 09 00                   | call_indirect 0 (type 9)\n 00093d: 21 00                      | local.set 0\n 00093f: 20 00                      | local.get 0\n 000941: 0b                         | end\n000943 func[70] <as-local.tee-value>:\n 000944: 01 7c                      | local[0] type=f64\n 000946: 44 00 00 00 00 00 00 f0 3f | f64.const 0x1p+0\n 00094f: 41 07                      | i32.const 7\n 000951: 11 09 00                   | call_indirect 0 (type 9)\n 000954: 22 00                      | local.tee 0\n 000956: 0b                         | end\n000958 func[71] <as-global.set-value>:\n 000959: 44 00 00 00 00 00 00 f0 3f | f64.const 0x1p+0\n 000962: 41 07                      | i32.const 7\n 000964: 11 09 00                   | call_indirect 0 (type 9)\n 000967: 24 00                      | global.set 0\n 000969: 23 00                      | global.get 0\n 00096b: 0b                         | end\n00096d func[72] <as-load-operand>:\n 00096e: 41 00                      | i32.const 0\n 000970: 11 01 00                   | call_indirect 0 (type 1)\n 000973: 28 02 00                   | i32.load 2 0\n 000976: 0b                         | end\n000978 func[73] <as-unary-operand>:\n 000979: 02 7d                      | block f32\n 00097b: 43 00 00 00 00             |   f32.const 0x0p+0\n 000980: 41 06                      |   i32.const 6\n 000982: 11 08 00                   |   call_indirect 0 (type 8)\n 000985: 91                         |   f32.sqrt\n 000986: 0b                         | end\n 000987: 0b                         | end\n000989 func[74] <as-binary-left>:\n 00098a: 02 7f                      | block i32\n 00098c: 41 01                      |   i32.const 1\n 00098e: 41 04                      |   i32.const 4\n 000990: 11 06 00                   |   call_indirect 0 (type 6)\n 000993: 41 0a                      |   i32.const 10\n 000995: 6a                         |   i32.add\n 000996: 0b                         | end\n 000997: 0b                         | end\n000999 func[75] <as-binary-right>:\n 00099a: 02 7f                      | block i32\n 00099c: 41 0a                      |   i32.const 10\n 00099e: 41 01                      |   i32.const 1\n 0009a0: 41 04                      |   i32.const 4\n 0009a2: 11 06 00                   |   call_indirect 0 (type 6)\n 0009a5: 6b                         |   i32.sub\n 0009a6: 0b                         | end\n 0009a7: 0b                         | end\n0009a9 func[76] <as-test-operand>:\n 0009aa: 02 7f                      | block i32\n 0009ac: 41 01                      |   i32.const 1\n 0009ae: 41 04                      |   i32.const 4\n 0009b0: 11 06 00                   |   call_indirect 0 (type 6)\n 0009b3: 45                         |   i32.eqz\n 0009b4: 0b                         | end\n 0009b5: 0b                         | end\n0009b7 func[77] <as-compare-left>:\n 0009b8: 02 7f                      | block i32\n 0009ba: 41 01                      |   i32.const 1\n 0009bc: 41 04                      |   i32.const 4\n 0009be: 11 06 00                   |   call_indirect 0 (type 6)\n 0009c1: 41 0a                      |   i32.const 10\n 0009c3: 4d                         |   i32.le_u\n 0009c4: 0b                         | end\n 0009c5: 0b                         | end\n0009c7 func[78] <as-compare-right>:\n 0009c8: 02 7f                      | block i32\n 0009ca: 41 0a                      |   i32.const 10\n 0009cc: 41 01                      |   i32.const 1\n 0009ce: 41 04                      |   i32.const 4\n 0009d0: 11 06 00                   |   call_indirect 0 (type 6)\n 0009d3: 47                         |   i32.ne\n 0009d4: 0b                         | end\n 0009d5: 0b                         | end\n0009d7 func[79] <as-convert-operand>:\n 0009d8: 02 7e                      | block i64\n 0009da: 41 01                      |   i32.const 1\n 0009dc: 41 04                      |   i32.const 4\n 0009de: 11 06 00                   |   call_indirect 0 (type 6)\n 0009e1: ac                         |   i64.extend_i32_s\n 0009e2: 0b                         | end\n 0009e3: 0b                         | end\n"
    },
    "call_indirect.1.wasm": {
      "header": "\ncall_indirect.1.wasm:\tfile format wasm 0x1\n\nSections:\n\n     Type start=0x0000000a end=0x0000001b (size=0x00000011) count: 3\n Function start=0x0000001d end=0x00000027 (size=0x0000000a) count: 9\n    Table start=0x00000029 end=0x00000035 (size=0x0000000c) count: 3\n   Export start=0x00000037 end=0x00000053 (size=0x0000001c) count: 3\n     Elem start=0x00000055 end=0x00000078 (size=0x00000023) count: 4\n     Code start=0x0000007a end=0x000000ca (size=0x00000050) count: 9\n",
      "details": "\ncall_indirect.1.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nType[3]:\n - type[0] (i32, i32) -> i32\n - type[1] () -> nil\n - type[2] (i32, i32, i32) -> i32\nFunction[9]:\n - func[0] sig=0\n - func[1] sig=0\n - func[2] sig=0\n - func[3] sig=0\n - func[4] sig=0\n - func[5] sig=1\n - func[6] sig=2 <call-1>\n - func[7] sig=2 <call-2>\n - func[8] sig=2 <call-3>\nTable[3]:\n - table[0] type=funcref initial=2 max=2\n - table[1] type=funcref initial=3 max=3\n - table[2] type=funcref initial=4\nExport[3]:\n - func[6] <call-1> -> \"call-1\"\n - func[7] <call-2> -> \"call-2\"\n - func[8] <call-3> -> \"call-3\"\nElem[4]:\n - segment[0] flags=0 table=0 count=2 - init i32=0\n  - elem[0] = ref.func:0\n  - elem[1] = ref.func:1\n - segment[1] flags=2 table=1 count=3 - init i32=0\n  - elem[0] = ref.func:2\n  - elem[1] = ref.func:3\n  - elem[2] = ref.func:4\n - segment[2] flags=2 table=2 count=2 - init i32=0\n  - elem[0] = ref.func:1\n  - elem[1] = ref.func:2\n - segment[3] flags=2 table=2 count=1 - init i32=3\n  - elem[3] = ref.func:5\nCode[9]:\n - func[0] size=7\n - func[1] size=7\n - func[2] size=7\n - func[3] size=7\n - func[4] size=7\n - func[5] size=2\n - func[6] size=11 <call-1>\n - func[7] size=11 <call-2>\n - func[8] size=11 <call-3>\n",
      "disassemble": "\ncall_indirect.1.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n00007c func[0]:\n 00007d: 20 00                      | local.get 0\n 00007f: 20 01                      | local.get 1\n 000081: 6a                         | i32.add\n 000082: 0b                         | end\n000084 func[1]:\n 000085: 20 00                      | local.get 0\n 000087: 20 01                      | local.get 1\n 000089: 6b                         | i32.sub\n 00008a: 0b                         | end\n00008c func[2]:\n 00008d: 20 00                      | local.get 0\n 00008f: 20 01                      | local.get 1\n 000091: 6c                         | i32.mul\n 000092: 0b                         | end\n000094 func[3]:\n 000095: 20 00                      | local.get 0\n 000097: 20 01                      | local.get 1\n 000099: 6e                         | i32.div_u\n 00009a: 0b                         | end\n00009c func[4]:\n 00009d: 20 00                      | local.get 0\n 00009f: 20 01                      | local.get 1\n 0000a1: 70                         | i32.rem_u\n 0000a2: 0b                         | end\n0000a4 func[5]:\n 0000a5: 0b                         | end\n0000a7 func[6] <call-1>:\n 0000a8: 20 00                      | local.get 0\n 0000aa: 20 01                      | local.get 1\n 0000ac: 20 02                      | local.get 2\n 0000ae: 11 00 00                   | call_indirect 0 (type 0)\n 0000b1: 0b                         | end\n0000b3 func[7] <call-2>:\n 0000b4: 20 00                      | local.get 0\n 0000b6: 20 01                      | local.get 1\n 0000b8: 20 02                      | local.get 2\n 0000ba: 11 00 01                   | call_indirect 1 (type 0)\n 0000bd: 0b                         | end\n0000bf func[8] <call-3>:\n 0000c0: 20 00                      | local.get 0\n 0000c2: 20 01                      | local.get 1\n 0000c4: 20 02                      | local.get 2\n 0000c6: 11 00 02                   | call_indirect 2 (type 0)\n 0000c9: 0b                         | end\n"
    },
    "call_indirect.35.wasm": {
      "header": "\ncall_indirect.35.wasm:\tfile format wasm 0x1\n\nSections:\n\n     Type start=0x0000000a end=0x00000012 (size=0x00000008) count: 2\n Function start=0x00000014 end=0x00000020 (size=0x0000000c) count: 11\n    Table start=0x00000022 end=0x00000026 (size=0x00000004) count: 1\n     Code start=0x00000028 end=0x0000008e (size=0x00000066) count: 11\n",
      "details": "\ncall_indirect.35.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nType[2]:\n - type[0] () -> nil\n - type[1] () -> i32\nFunction[11]:\n - func[0] sig=0\n - func[1] sig=0\n - func[2] sig=0\n - func[3] sig=0\n - func[4] sig=0\n - func[5] sig=0\n - func[6] sig=0\n - func[7] sig=0\n - func[8] sig=0\n - func[9] sig=1\n - func[10] sig=1\nTable[1]:\n - table[0] type=funcref initial=1\nCode[11]:\n - func[0] size=6\n - func[1] size=7\n - func[2] size=9\n - func[3] size=9\n - func[4] size=12\n - func[5] size=6\n - func[6] size=6\n - func[7] size=9\n - func[8] size=9\n - func[9] size=7\n - func[10] size=10\n",
      "disassemble": "\ncall_indirect.35.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n00002a func[0]:\n 00002b: 00                         | unreachable\n 00002c: 11 00 00                   | call_indirect 0 (type 0)\n 00002f: 0b                         | end\n000031 func[1]:\n 000032: 00                         | unreachable\n 000033: 11 00 00                   | call_indirect 0 (type 0)\n 000036: 01                         | nop\n 000037: 0b                         | end\n000039 func[2]:\n 00003a: 00                         | unreachable\n 00003b: 11 00 00                   | call_indirect 0 (type 0)\n 00003e: 11 00 00                   | call_indirect 0 (type 0)\n 000041: 0b                         | end\n000043 func[3]:\n 000044: 00                         | unreachable\n 000045: 11 00 00                   | call_indirect 0 (type 0)\n 000048: 11 00 00                   | call_indirect 0 (type 0)\n 00004b: 0b                         | end\n00004d func[4]:\n 00004e: 00                         | unreachable\n 00004f: 11 00 00                   | call_indirect 0 (type 0)\n 000052: 11 00 00                   | call_indirect 0 (type 0)\n 000055: 11 00 00                   | call_indirect 0 (type 0)\n 000058: 0b                         | end\n00005a func[5]:\n 00005b: 00                         | unreachable\n 00005c: 11 00 00                   | call_indirect 0 (type 0)\n 00005f: 0b                         | end\n000061 func[6]:\n 000062: 00                         | unreachable\n 000063: 11 00 00                   | call_indirect 0 (type 0)\n 000066: 0b                         | end\n000068 func[7]:\n 000069: 00                         | unreachable\n 00006a: 11 00 00                   | call_indirect 0 (type 0)\n 00006d: 11 00 00                   | call_indirect 0 (type 0)\n 000070: 0b                         | end\n000072 func[8]:\n 000073: 00                         | unreachable\n 000074: 11 00 00                   | call_indirect 0 (type 0)\n 000077: 11 00 00                   | call_indirect 0 (type 0)\n 00007a: 0b                         | end\n00007c func[9]:\n 00007d: 00                         | unreachable\n 00007e: 11 00 00                   | call_indirect 0 (type 0)\n 000081: 1b                         | select\n 000082: 0b                         | end\n000084 func[10]:\n 000085: 00                         | unreachable\n 000086: 11 00 00                   | call_indirect 0 (type 0)\n 000089: 1b                         | select\n 00008a: 11 00 00                   | call_indirect 0 (type 0)\n 00008d: 0b                         | end\n"
    }
  }
}
