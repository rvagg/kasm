{
  "bin": {
    "table_fill.0.wasm": "AGFzbQEAAAABDAJgA39vfwBgAX8BbwMEAwAAAQQEAW8ACgccAwRmaWxsAAALZmlsbC1hYmJyZXYAAQNnZXQAAgogAwsAIAAgASAC/BEACwsAIAAgASAC/BEACwYAIAAlAAs=",
    "table_fill.1.wasm": "AGFzbQEAAAABBAFgAAADAgEABAQBbwAKCgcBBQD8EQAL",
    "table_fill.2.wasm": "AGFzbQEAAAABBAFgAAADAgEABAQBbwAKCgsBCQDQb0EB/BEACw==",
    "table_fill.3.wasm": "AGFzbQEAAAABBAFgAAADAgEABAQBbwAKCgsBCQBBAUEB/BEACw==",
    "table_fill.4.wasm": "AGFzbQEAAAABBAFgAAADAgEABAQBbwAKCgsBCQBBAdBv/BEACw==",
    "table_fill.5.wasm": "AGFzbQEAAAABBAFgAAADAgEABAQBbwAAChABDgBDAACAP9BvQQH8EQAL",
    "table_fill.6.wasm": "AGFzbQEAAAABBQFgAW8AAwIBAAQEAXAAAAoNAQsAQQEgAEEB/BEACw==",
    "table_fill.7.wasm": "AGFzbQEAAAABBAFgAAADAgEABAQBbwAAChABDgBBAdBvQwAAgD/8EQAL",
    "table_fill.8.wasm": "AGFzbQEAAAABBQFgAW8AAwIBAAQHAm8AAXAAAQoNAQsAQQAgAEEB/BEBCw==",
    "table_fill.9.wasm": "AGFzbQEAAAABBQFgAAF/AwIBAAQEAW8AAQoNAQsAQQDQb0EB/BEACw=="
  },
  "spec": {"source_filename": "/workspace/wasm-spec/test/core/table_fill.wast",
 "commands": [
  {"type": "module", "line": 1, "filename": "table_fill.0.wasm"}, 
  {"type": "assert_return", "line": 17, "action": {"type": "invoke", "field": "get", "args": [{"type": "i32", "value": "1"}]}, "expected": [{"type": "externref", "value": "null"}]}, 
  {"type": "assert_return", "line": 18, "action": {"type": "invoke", "field": "get", "args": [{"type": "i32", "value": "2"}]}, "expected": [{"type": "externref", "value": "null"}]}, 
  {"type": "assert_return", "line": 19, "action": {"type": "invoke", "field": "get", "args": [{"type": "i32", "value": "3"}]}, "expected": [{"type": "externref", "value": "null"}]}, 
  {"type": "assert_return", "line": 20, "action": {"type": "invoke", "field": "get", "args": [{"type": "i32", "value": "4"}]}, "expected": [{"type": "externref", "value": "null"}]}, 
  {"type": "assert_return", "line": 21, "action": {"type": "invoke", "field": "get", "args": [{"type": "i32", "value": "5"}]}, "expected": [{"type": "externref", "value": "null"}]}, 
  {"type": "assert_return", "line": 23, "action": {"type": "invoke", "field": "fill", "args": [{"type": "i32", "value": "2"}, {"type": "externref", "value": "1"}, {"type": "i32", "value": "3"}]}, "expected": []}, 
  {"type": "assert_return", "line": 24, "action": {"type": "invoke", "field": "get", "args": [{"type": "i32", "value": "1"}]}, "expected": [{"type": "externref", "value": "null"}]}, 
  {"type": "assert_return", "line": 25, "action": {"type": "invoke", "field": "get", "args": [{"type": "i32", "value": "2"}]}, "expected": [{"type": "externref", "value": "1"}]}, 
  {"type": "assert_return", "line": 26, "action": {"type": "invoke", "field": "get", "args": [{"type": "i32", "value": "3"}]}, "expected": [{"type": "externref", "value": "1"}]}, 
  {"type": "assert_return", "line": 27, "action": {"type": "invoke", "field": "get", "args": [{"type": "i32", "value": "4"}]}, "expected": [{"type": "externref", "value": "1"}]}, 
  {"type": "assert_return", "line": 28, "action": {"type": "invoke", "field": "get", "args": [{"type": "i32", "value": "5"}]}, "expected": [{"type": "externref", "value": "null"}]}, 
  {"type": "assert_return", "line": 30, "action": {"type": "invoke", "field": "fill", "args": [{"type": "i32", "value": "4"}, {"type": "externref", "value": "2"}, {"type": "i32", "value": "2"}]}, "expected": []}, 
  {"type": "assert_return", "line": 31, "action": {"type": "invoke", "field": "get", "args": [{"type": "i32", "value": "3"}]}, "expected": [{"type": "externref", "value": "1"}]}, 
  {"type": "assert_return", "line": 32, "action": {"type": "invoke", "field": "get", "args": [{"type": "i32", "value": "4"}]}, "expected": [{"type": "externref", "value": "2"}]}, 
  {"type": "assert_return", "line": 33, "action": {"type": "invoke", "field": "get", "args": [{"type": "i32", "value": "5"}]}, "expected": [{"type": "externref", "value": "2"}]}, 
  {"type": "assert_return", "line": 34, "action": {"type": "invoke", "field": "get", "args": [{"type": "i32", "value": "6"}]}, "expected": [{"type": "externref", "value": "null"}]}, 
  {"type": "assert_return", "line": 36, "action": {"type": "invoke", "field": "fill", "args": [{"type": "i32", "value": "4"}, {"type": "externref", "value": "3"}, {"type": "i32", "value": "0"}]}, "expected": []}, 
  {"type": "assert_return", "line": 37, "action": {"type": "invoke", "field": "get", "args": [{"type": "i32", "value": "3"}]}, "expected": [{"type": "externref", "value": "1"}]}, 
  {"type": "assert_return", "line": 38, "action": {"type": "invoke", "field": "get", "args": [{"type": "i32", "value": "4"}]}, "expected": [{"type": "externref", "value": "2"}]}, 
  {"type": "assert_return", "line": 39, "action": {"type": "invoke", "field": "get", "args": [{"type": "i32", "value": "5"}]}, "expected": [{"type": "externref", "value": "2"}]}, 
  {"type": "assert_return", "line": 41, "action": {"type": "invoke", "field": "fill", "args": [{"type": "i32", "value": "8"}, {"type": "externref", "value": "4"}, {"type": "i32", "value": "2"}]}, "expected": []}, 
  {"type": "assert_return", "line": 42, "action": {"type": "invoke", "field": "get", "args": [{"type": "i32", "value": "7"}]}, "expected": [{"type": "externref", "value": "null"}]}, 
  {"type": "assert_return", "line": 43, "action": {"type": "invoke", "field": "get", "args": [{"type": "i32", "value": "8"}]}, "expected": [{"type": "externref", "value": "4"}]}, 
  {"type": "assert_return", "line": 44, "action": {"type": "invoke", "field": "get", "args": [{"type": "i32", "value": "9"}]}, "expected": [{"type": "externref", "value": "4"}]}, 
  {"type": "assert_return", "line": 46, "action": {"type": "invoke", "field": "fill-abbrev", "args": [{"type": "i32", "value": "9"}, {"type": "externref", "value": "null"}, {"type": "i32", "value": "1"}]}, "expected": []}, 
  {"type": "assert_return", "line": 47, "action": {"type": "invoke", "field": "get", "args": [{"type": "i32", "value": "8"}]}, "expected": [{"type": "externref", "value": "4"}]}, 
  {"type": "assert_return", "line": 48, "action": {"type": "invoke", "field": "get", "args": [{"type": "i32", "value": "9"}]}, "expected": [{"type": "externref", "value": "null"}]}, 
  {"type": "assert_return", "line": 50, "action": {"type": "invoke", "field": "fill", "args": [{"type": "i32", "value": "10"}, {"type": "externref", "value": "5"}, {"type": "i32", "value": "0"}]}, "expected": []}, 
  {"type": "assert_return", "line": 51, "action": {"type": "invoke", "field": "get", "args": [{"type": "i32", "value": "9"}]}, "expected": [{"type": "externref", "value": "null"}]}, 
  {"type": "assert_trap", "line": 54, "action": {"type": "invoke", "field": "fill", "args": [{"type": "i32", "value": "8"}, {"type": "externref", "value": "6"}, {"type": "i32", "value": "3"}]}, "text": "out of bounds table access", "expected": []}, 
  {"type": "assert_return", "line": 57, "action": {"type": "invoke", "field": "get", "args": [{"type": "i32", "value": "7"}]}, "expected": [{"type": "externref", "value": "null"}]}, 
  {"type": "assert_return", "line": 58, "action": {"type": "invoke", "field": "get", "args": [{"type": "i32", "value": "8"}]}, "expected": [{"type": "externref", "value": "4"}]}, 
  {"type": "assert_return", "line": 59, "action": {"type": "invoke", "field": "get", "args": [{"type": "i32", "value": "9"}]}, "expected": [{"type": "externref", "value": "null"}]}, 
  {"type": "assert_trap", "line": 62, "action": {"type": "invoke", "field": "fill", "args": [{"type": "i32", "value": "11"}, {"type": "externref", "value": "null"}, {"type": "i32", "value": "0"}]}, "text": "out of bounds table access", "expected": []}, 
  {"type": "assert_trap", "line": 67, "action": {"type": "invoke", "field": "fill", "args": [{"type": "i32", "value": "11"}, {"type": "externref", "value": "null"}, {"type": "i32", "value": "10"}]}, "text": "out of bounds table access", "expected": []}, 
  {"type": "assert_invalid", "line": 75, "filename": "table_fill.1.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 84, "filename": "table_fill.2.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 93, "filename": "table_fill.3.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 102, "filename": "table_fill.4.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 111, "filename": "table_fill.5.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 120, "filename": "table_fill.6.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 129, "filename": "table_fill.7.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 139, "filename": "table_fill.8.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 150, "filename": "table_fill.9.wasm", "text": "type mismatch", "module_type": "binary"}]},
  "code": [
    "(module (table $t 10 externref)\n  (func (export \"fill\") (param $i i32) (param $r externref) (param $n i32) (table.fill $t (local.get $i) (local.get $r) (local.get $n)) )\n  (func (export \"fill-abbrev\") (param $i i32) (param $r externref) (param $n i32) (table.fill (local.get $i) (local.get $r) (local.get $n)) )\n  (func (export \"get\") (param $i i32) (result externref) (table.get $t (local.get $i)) ))",
    "(assert_return (invoke \"get\" (i32.const 1)) (ref.null extern))",
    "(assert_return (invoke \"get\" (i32.const 2)) (ref.null extern))",
    "(assert_return (invoke \"get\" (i32.const 3)) (ref.null extern))",
    "(assert_return (invoke \"get\" (i32.const 4)) (ref.null extern))",
    "(assert_return (invoke \"get\" (i32.const 5)) (ref.null extern))",
    "(assert_return (invoke \"fill\" (i32.const 2) (ref.extern 1) (i32.const 3)))",
    "(assert_return (invoke \"get\" (i32.const 1)) (ref.null extern))",
    "(assert_return (invoke \"get\" (i32.const 2)) (ref.extern 1))",
    "(assert_return (invoke \"get\" (i32.const 3)) (ref.extern 1))",
    "(assert_return (invoke \"get\" (i32.const 4)) (ref.extern 1))",
    "(assert_return (invoke \"get\" (i32.const 5)) (ref.null extern))",
    "(assert_return (invoke \"fill\" (i32.const 4) (ref.extern 2) (i32.const 2)))",
    "(assert_return (invoke \"get\" (i32.const 3)) (ref.extern 1))",
    "(assert_return (invoke \"get\" (i32.const 4)) (ref.extern 2))",
    "(assert_return (invoke \"get\" (i32.const 5)) (ref.extern 2))",
    "(assert_return (invoke \"get\" (i32.const 6)) (ref.null extern))",
    "(assert_return (invoke \"fill\" (i32.const 4) (ref.extern 3) (i32.const 0)))",
    "(assert_return (invoke \"get\" (i32.const 3)) (ref.extern 1))",
    "(assert_return (invoke \"get\" (i32.const 4)) (ref.extern 2))",
    "(assert_return (invoke \"get\" (i32.const 5)) (ref.extern 2))",
    "(assert_return (invoke \"fill\" (i32.const 8) (ref.extern 4) (i32.const 2)))",
    "(assert_return (invoke \"get\" (i32.const 7)) (ref.null extern))",
    "(assert_return (invoke \"get\" (i32.const 8)) (ref.extern 4))",
    "(assert_return (invoke \"get\" (i32.const 9)) (ref.extern 4))",
    "(assert_return (invoke \"fill-abbrev\" (i32.const 9) (ref.null extern) (i32.const 1)))",
    "(assert_return (invoke \"get\" (i32.const 8)) (ref.extern 4))",
    "(assert_return (invoke \"get\" (i32.const 9)) (ref.null extern))",
    "(assert_return (invoke \"fill\" (i32.const 10) (ref.extern 5) (i32.const 0)))",
    "(assert_return (invoke \"get\" (i32.const 9)) (ref.null extern))",
    "(assert_trap (invoke \"fill\" (i32.const 8) (ref.extern 6) (i32.const 3)) \"out of bounds table access\")",
    "(assert_return (invoke \"get\" (i32.const 7)) (ref.null extern))",
    "(assert_return (invoke \"get\" (i32.const 8)) (ref.extern 4))",
    "(assert_return (invoke \"get\" (i32.const 9)) (ref.null extern))",
    "(assert_trap (invoke \"fill\" (i32.const 11) (ref.null extern) (i32.const 0)) \"out of bounds table access\")",
    "(assert_trap (invoke \"fill\" (i32.const 11) (ref.null extern) (i32.const 10)) \"out of bounds table access\")",
    "(assert_invalid (module (table $t 10 externref) (func $type-index-value-length-empty-vs-i32-i32 (table.fill $t) ) ) \"type mismatch\")",
    "(assert_invalid (module (table $t 10 externref) (func $type-index-empty-vs-i32 (table.fill $t (ref.null extern) (i32.const 1)) ) ) \"type mismatch\")",
    "(assert_invalid (module (table $t 10 externref) (func $type-value-empty-vs (table.fill $t (i32.const 1) (i32.const 1)) ) ) \"type mismatch\")",
    "(assert_invalid (module (table $t 10 externref) (func $type-length-empty-vs-i32 (table.fill $t (i32.const 1) (ref.null extern)) ) ) \"type mismatch\")",
    "(assert_invalid (module (table $t 0 externref) (func $type-index-f32-vs-i32 (table.fill $t (f32.const 1) (ref.null extern) (i32.const 1)) ) ) \"type mismatch\")",
    "(assert_invalid (module (table $t 0 funcref) (func $type-value-vs-funcref (param $r externref) (table.fill $t (i32.const 1) (local.get $r) (i32.const 1)) ) ) \"type mismatch\")",
    "(assert_invalid (module (table $t 0 externref) (func $type-length-f32-vs-i32 (table.fill $t (i32.const 1) (ref.null extern) (f32.const 1)) ) ) \"type mismatch\")",
    "(assert_invalid (module (table $t1 1 externref) (table $t2 1 funcref) (func $type-value-externref-vs-funcref-multi (param $r externref) (table.fill $t2 (i32.const 0) (local.get $r) (i32.const 1)) ) ) \"type mismatch\")",
    "(assert_invalid (module (table $t 1 externref) (func $type-result-empty-vs-num (result i32) (table.fill $t (i32.const 0) (ref.null extern) (i32.const 1)) ) ) \"type mismatch\")"
  ],
  "dump": {
    "table_fill.0.wasm": {
      "header": "\ntable_fill.0.wasm:\tfile format wasm 0x1\n\nSections:\n\n     Type start=0x0000000a end=0x00000016 (size=0x0000000c) count: 2\n Function start=0x00000018 end=0x0000001c (size=0x00000004) count: 3\n    Table start=0x0000001e end=0x00000022 (size=0x00000004) count: 1\n   Export start=0x00000024 end=0x00000040 (size=0x0000001c) count: 3\n     Code start=0x00000042 end=0x00000062 (size=0x00000020) count: 3\n",
      "details": "\ntable_fill.0.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nType[2]:\n - type[0] (i32, externref, i32) -> nil\n - type[1] (i32) -> externref\nFunction[3]:\n - func[0] sig=0 <fill>\n - func[1] sig=0 <fill-abbrev>\n - func[2] sig=1 <get>\nTable[1]:\n - table[0] type=externref initial=10\nExport[3]:\n - func[0] <fill> -> \"fill\"\n - func[1] <fill-abbrev> -> \"fill-abbrev\"\n - func[2] <get> -> \"get\"\nCode[3]:\n - func[0] size=11 <fill>\n - func[1] size=11 <fill-abbrev>\n - func[2] size=6 <get>\n",
      "disassemble": "\ntable_fill.0.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n000044 func[0] <fill>:\n 000045: 20 00                      | local.get 0\n 000047: 20 01                      | local.get 1\n 000049: 20 02                      | local.get 2\n 00004b: fc 11 00                   | table.fill 0\n 00004e: 0b                         | end\n000050 func[1] <fill-abbrev>:\n 000051: 20 00                      | local.get 0\n 000053: 20 01                      | local.get 1\n 000055: 20 02                      | local.get 2\n 000057: fc 11 00                   | table.fill 0\n 00005a: 0b                         | end\n00005c func[2] <get>:\n 00005d: 20 00                      | local.get 0\n 00005f: 25 00                      | table.get 0\n 000061: 0b                         | end\n"
    }
  }
}
