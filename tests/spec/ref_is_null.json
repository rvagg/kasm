{
  "bin": {
    "ref_is_null.0.wasm": "AGFzbQEAAAABFwVgAXABf2ABbwF/YAAAYAFvAGABfwF/AwgHAAECAwIEBAQHAnAAAm8AAgdHBgdmdW5jcmVmAAAJZXh0ZXJucmVmAAEEaW5pdAADBmRlaW5pdAAEDGZ1bmNyZWYtZWxlbQAFDmV4dGVybnJlZi1lbGVtAAYJBwEAQQELAQIKOgcFACAA0QsFACAA0QsCAAsIAEEBIAAmAQsOAEEB0HAmAEEB0G8mAQsIACAAJQAQAAsIACAAJQEQAQs=",
    "ref_is_null.1.wasm": "AGFzbQEAAAABBQFgAX8AAwIBAAoHAQUAIADRCw==",
    "ref_is_null.2.wasm": "AGFzbQEAAAABBAFgAAADAgEACgUBAwDRCw=="
  },
  "spec": {"source_filename": "/workspace/wasm-spec/test/core/ref_is_null.wast",
 "commands": [
  {"type": "module", "line": 1, "filename": "ref_is_null.0.wasm"}, 
  {"type": "assert_return", "line": 30, "action": {"type": "invoke", "field": "funcref", "args": [{"type": "funcref", "value": "null"}]}, "expected": [{"type": "i32", "value": "1"}]}, 
  {"type": "assert_return", "line": 31, "action": {"type": "invoke", "field": "externref", "args": [{"type": "externref", "value": "null"}]}, "expected": [{"type": "i32", "value": "1"}]}, 
  {"type": "assert_return", "line": 33, "action": {"type": "invoke", "field": "externref", "args": [{"type": "externref", "value": "1"}]}, "expected": [{"type": "i32", "value": "0"}]}, 
  {"type": "action", "line": 35, "action": {"type": "invoke", "field": "init", "args": [{"type": "externref", "value": "0"}]}, "expected": []}, 
  {"type": "assert_return", "line": 37, "action": {"type": "invoke", "field": "funcref-elem", "args": [{"type": "i32", "value": "0"}]}, "expected": [{"type": "i32", "value": "1"}]}, 
  {"type": "assert_return", "line": 38, "action": {"type": "invoke", "field": "externref-elem", "args": [{"type": "i32", "value": "0"}]}, "expected": [{"type": "i32", "value": "1"}]}, 
  {"type": "assert_return", "line": 40, "action": {"type": "invoke", "field": "funcref-elem", "args": [{"type": "i32", "value": "1"}]}, "expected": [{"type": "i32", "value": "0"}]}, 
  {"type": "assert_return", "line": 41, "action": {"type": "invoke", "field": "externref-elem", "args": [{"type": "i32", "value": "1"}]}, "expected": [{"type": "i32", "value": "0"}]}, 
  {"type": "action", "line": 43, "action": {"type": "invoke", "field": "deinit", "args": []}, "expected": []}, 
  {"type": "assert_return", "line": 45, "action": {"type": "invoke", "field": "funcref-elem", "args": [{"type": "i32", "value": "0"}]}, "expected": [{"type": "i32", "value": "1"}]}, 
  {"type": "assert_return", "line": 46, "action": {"type": "invoke", "field": "externref-elem", "args": [{"type": "i32", "value": "0"}]}, "expected": [{"type": "i32", "value": "1"}]}, 
  {"type": "assert_return", "line": 48, "action": {"type": "invoke", "field": "funcref-elem", "args": [{"type": "i32", "value": "1"}]}, "expected": [{"type": "i32", "value": "1"}]}, 
  {"type": "assert_return", "line": 49, "action": {"type": "invoke", "field": "externref-elem", "args": [{"type": "i32", "value": "1"}]}, "expected": [{"type": "i32", "value": "1"}]}, 
  {"type": "assert_invalid", "line": 52, "filename": "ref_is_null.1.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 56, "filename": "ref_is_null.2.wasm", "text": "type mismatch", "module_type": "binary"}]},
  "code": [
    "(module \n  (func $f1 (export \"funcref\") (param $x funcref) (result i32) (ref.is_null (local.get $x)) )\n  (func $f2 (export \"externref\") (param $x externref) (result i32) (ref.is_null (local.get $x)) ) (table $t1 2 funcref) (table $t2 2 externref) (elem (table $t1) (i32.const 1) $dummy)\n  (func $dummy)\n  (func (export \"init\") (param $r externref) (table.set $t2 (i32.const 1) (local.get $r)) )\n  (func (export \"deinit\") (table.set $t1 (i32.const 1) (ref.null func)) (table.set $t2 (i32.const 1) (ref.null extern)) )\n  (func (export \"funcref-elem\") (param $x i32) (result i32) (call $f1 (table.get $t1 (local.get $x))) )\n  (func (export \"externref-elem\") (param $x i32) (result i32) (call $f2 (table.get $t2 (local.get $x))) ))",
    "(assert_return (invoke \"funcref\" (ref.null func)) (i32.const 1))",
    "(assert_return (invoke \"externref\" (ref.null extern)) (i32.const 1))",
    "(assert_return (invoke \"externref\" (ref.extern 1)) (i32.const 0))",
    "(invoke \"init\" (ref.extern 0))",
    "(assert_return (invoke \"funcref-elem\" (i32.const 0)) (i32.const 1))",
    "(assert_return (invoke \"externref-elem\" (i32.const 0)) (i32.const 1))",
    "(assert_return (invoke \"funcref-elem\" (i32.const 1)) (i32.const 0))",
    "(assert_return (invoke \"externref-elem\" (i32.const 1)) (i32.const 0))",
    "(invoke \"deinit\")",
    "(assert_return (invoke \"funcref-elem\" (i32.const 0)) (i32.const 1))",
    "(assert_return (invoke \"externref-elem\" (i32.const 0)) (i32.const 1))",
    "(assert_return (invoke \"funcref-elem\" (i32.const 1)) (i32.const 1))",
    "(assert_return (invoke \"externref-elem\" (i32.const 1)) (i32.const 1))",
    "(assert_invalid (module (func $ref-vs-num (param i32) (ref.is_null (local.get 0)))) \"type mismatch\")",
    "(assert_invalid (module (func $ref-vs-empty (ref.is_null))) \"type mismatch\")"
  ],
  "dump": {
    "ref_is_null.0.wasm": {
      "header": "\nref_is_null.0.wasm:\tfile format wasm 0x1\n\nSections:\n\n     Type start=0x0000000a end=0x00000021 (size=0x00000017) count: 5\n Function start=0x00000023 end=0x0000002b (size=0x00000008) count: 7\n    Table start=0x0000002d end=0x00000034 (size=0x00000007) count: 2\n   Export start=0x00000036 end=0x0000007d (size=0x00000047) count: 6\n     Elem start=0x0000007f end=0x00000086 (size=0x00000007) count: 1\n     Code start=0x00000088 end=0x000000c2 (size=0x0000003a) count: 7\n",
      "details": "\nref_is_null.0.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nType[5]:\n - type[0] (funcref) -> i32\n - type[1] (externref) -> i32\n - type[2] () -> nil\n - type[3] (externref) -> nil\n - type[4] (i32) -> i32\nFunction[7]:\n - func[0] sig=0 <funcref>\n - func[1] sig=1 <externref>\n - func[2] sig=2\n - func[3] sig=3 <init>\n - func[4] sig=2 <deinit>\n - func[5] sig=4 <funcref-elem>\n - func[6] sig=4 <externref-elem>\nTable[2]:\n - table[0] type=funcref initial=2\n - table[1] type=externref initial=2\nExport[6]:\n - func[0] <funcref> -> \"funcref\"\n - func[1] <externref> -> \"externref\"\n - func[3] <init> -> \"init\"\n - func[4] <deinit> -> \"deinit\"\n - func[5] <funcref-elem> -> \"funcref-elem\"\n - func[6] <externref-elem> -> \"externref-elem\"\nElem[1]:\n - segment[0] flags=0 table=0 count=1 - init i32=1\n  - elem[1] = ref.func:2\nCode[7]:\n - func[0] size=5 <funcref>\n - func[1] size=5 <externref>\n - func[2] size=2\n - func[3] size=8 <init>\n - func[4] size=14 <deinit>\n - func[5] size=8 <funcref-elem>\n - func[6] size=8 <externref-elem>\n",
      "disassemble": "\nref_is_null.0.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n00008a func[0] <funcref>:\n 00008b: 20 00                      | local.get 0\n 00008d: d1                         | ref.is_null\n 00008e: 0b                         | end\n000090 func[1] <externref>:\n 000091: 20 00                      | local.get 0\n 000093: d1                         | ref.is_null\n 000094: 0b                         | end\n000096 func[2]:\n 000097: 0b                         | end\n000099 func[3] <init>:\n 00009a: 41 01                      | i32.const 1\n 00009c: 20 00                      | local.get 0\n 00009e: 26 01                      | table.set 1\n 0000a0: 0b                         | end\n0000a2 func[4] <deinit>:\n 0000a3: 41 01                      | i32.const 1\n 0000a5: d0 70                      | ref.null func\n 0000a7: 26 00                      | table.set 0\n 0000a9: 41 01                      | i32.const 1\n 0000ab: d0 6f                      | ref.null extern\n 0000ad: 26 01                      | table.set 1\n 0000af: 0b                         | end\n0000b1 func[5] <funcref-elem>:\n 0000b2: 20 00                      | local.get 0\n 0000b4: 25 00                      | table.get 0\n 0000b6: 10 00                      | call 0 <funcref>\n 0000b8: 0b                         | end\n0000ba func[6] <externref-elem>:\n 0000bb: 20 00                      | local.get 0\n 0000bd: 25 01                      | table.get 1\n 0000bf: 10 01                      | call 1 <externref>\n 0000c1: 0b                         | end\n"
    }
  }
}
