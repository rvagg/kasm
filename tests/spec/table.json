{
  "bin": {
    "table.0.wasm": "AGFzbQEAAAAEBAFwAAA=",
    "table.1.wasm": "AGFzbQEAAAAEBAFwAAE=",
    "table.10.wasm": "AGFzbQEAAAABBAFgAAADAgEACQcBAEEACwEACgQBAgAL",
    "table.11.wasm": "AGFzbQEAAAAEBQFwAQEA",
    "table.12.wasm": "AGFzbQEAAAAECQFwAf////8PAA==",
    "table.13.wat": "KHRhYmxlIDB4MV8wMDAwXzAwMDAgZnVuY3JlZik=",
    "table.14.wat": "KHRhYmxlIDB4MV8wMDAwXzAwMDAgMHgxXzAwMDBfMDAwMCBmdW5jcmVmKQ==",
    "table.15.wat": "KHRhYmxlIDAgMHgxXzAwMDBfMDAwMCBmdW5jcmVmKQ==",
    "table.16.wat": "KHRhYmxlICRmb28gMSBmdW5jcmVmKSh0YWJsZSAkZm9vIDEgZnVuY3JlZik=",
    "table.17.wat": "KGltcG9ydCAiIiAiIiAodGFibGUgJGZvbyAxIGZ1bmNyZWYpKSh0YWJsZSAkZm9vIDEgZnVuY3JlZik=",
    "table.18.wat": "KGltcG9ydCAiIiAiIiAodGFibGUgJGZvbyAxIGZ1bmNyZWYpKShpbXBvcnQgIiIgIiIgKHRhYmxlICRmb28gMSBmdW5jcmVmKSk=",
    "table.2.wasm": "AGFzbQEAAAAEBQFwAQAA",
    "table.3.wasm": "AGFzbQEAAAAEBQFwAQAB",
    "table.4.wasm": "AGFzbQEAAAAEBgFwAQGAAg==",
    "table.5.wasm": "AGFzbQEAAAAEBwFwAQCAgAQ=",
    "table.6.wasm": "AGFzbQEAAAAECQFwAQD/////Dw==",
    "table.7.wasm": "AGFzbQEAAAAEBwJwAABwAAA=",
    "table.8.wasm": "AGFzbQEAAAACFAEIc3BlY3Rlc3QFdGFibGUBcAAABAQBcAAA",
    "table.9.wasm": "AGFzbQEAAAAJBgEAQQALAA=="
  },
  "spec": {"source_filename": "/workspace/wasm-spec/test/core/table.wast",
 "commands": [
  {"type": "module", "line": 3, "filename": "table.0.wasm"}, 
  {"type": "module", "line": 4, "filename": "table.1.wasm"}, 
  {"type": "module", "line": 5, "filename": "table.2.wasm"}, 
  {"type": "module", "line": 6, "filename": "table.3.wasm"}, 
  {"type": "module", "line": 7, "filename": "table.4.wasm"}, 
  {"type": "module", "line": 8, "filename": "table.5.wasm"}, 
  {"type": "module", "line": 9, "filename": "table.6.wasm"}, 
  {"type": "module", "line": 11, "filename": "table.7.wasm"}, 
  {"type": "module", "line": 12, "filename": "table.8.wasm"}, 
  {"type": "assert_invalid", "line": 14, "filename": "table.9.wasm", "text": "unknown table", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 15, "filename": "table.10.wasm", "text": "unknown table", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 19, "filename": "table.11.wasm", "text": "size minimum must not be greater than maximum", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 23, "filename": "table.12.wasm", "text": "size minimum must not be greater than maximum", "module_type": "binary"}, 
  {"type": "assert_malformed", "line": 28, "filename": "table.13.wat", "text": "i32 constant out of range", "module_type": "text"}, 
  {"type": "assert_malformed", "line": 32, "filename": "table.14.wat", "text": "i32 constant out of range", "module_type": "text"}, 
  {"type": "assert_malformed", "line": 36, "filename": "table.15.wat", "text": "i32 constant out of range", "module_type": "text"}, 
  {"type": "assert_malformed", "line": 43, "filename": "table.16.wat", "text": "duplicate table", "module_type": "text"}, 
  {"type": "assert_malformed", "line": 47, "filename": "table.17.wat", "text": "duplicate table", "module_type": "text"}, 
  {"type": "assert_malformed", "line": 51, "filename": "table.18.wat", "text": "duplicate table", "module_type": "text"}]},
  "code": [
    "(module (table 0 funcref))",
    "(module (table 1 funcref))",
    "(module (table 0 0 funcref))",
    "(module (table 0 1 funcref))",
    "(module (table 1 256 funcref))",
    "(module (table 0 65536 funcref))",
    "(module (table 0 0xffff_ffff funcref))",
    "(module (table 0 funcref) (table 0 funcref))",
    "(module (table (import \"spectest\" \"table\") 0 funcref) (table 0 funcref))",
    "(assert_invalid (module (elem (i32.const 0))) \"unknown table\")",
    "(assert_invalid (module (elem (i32.const 0) $f) (func $f)) \"unknown table\")",
    "(assert_invalid (module (table 1 0 funcref)) \"size minimum must not be greater than maximum\")",
    "(assert_invalid (module (table 0xffff_ffff 0 funcref)) \"size minimum must not be greater than maximum\")",
    "(assert_malformed (module quote \"(table 0x1_0000_0000 funcref)\") \"i32 constant out of range\")",
    "(assert_malformed (module quote \"(table 0x1_0000_0000 0x1_0000_0000 funcref)\") \"i32 constant out of range\")",
    "(assert_malformed (module quote \"(table 0 0x1_0000_0000 funcref)\") \"i32 constant out of range\")",
    "(assert_malformed (module quote \"(table $foo 1 funcref)\" \"(table $foo 1 funcref)\") \"duplicate table\")",
    "(assert_malformed (module quote \"(import \\\"\\\" \\\"\\\" (table $foo 1 funcref))\" \"(table $foo 1 funcref)\") \"duplicate table\")",
    "(assert_malformed (module quote \"(import \\\"\\\" \\\"\\\" (table $foo 1 funcref))\" \"(import \\\"\\\" \\\"\\\" (table $foo 1 funcref))\") \"duplicate table\")"
  ],
  "dump": {
    "table.0.wasm": {
      "header": "\ntable.0.wasm:\tfile format wasm 0x1\n\nSections:\n\n    Table start=0x0000000a end=0x0000000e (size=0x00000004) count: 1\n",
      "details": "\ntable.0.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nTable[1]:\n - table[0] type=funcref initial=0\n",
      "disassemble": "\ntable.0.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n"
    },
    "table.1.wasm": {
      "header": "\ntable.1.wasm:\tfile format wasm 0x1\n\nSections:\n\n    Table start=0x0000000a end=0x0000000e (size=0x00000004) count: 1\n",
      "details": "\ntable.1.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nTable[1]:\n - table[0] type=funcref initial=1\n",
      "disassemble": "\ntable.1.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n"
    },
    "table.2.wasm": {
      "header": "\ntable.2.wasm:\tfile format wasm 0x1\n\nSections:\n\n    Table start=0x0000000a end=0x0000000f (size=0x00000005) count: 1\n",
      "details": "\ntable.2.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nTable[1]:\n - table[0] type=funcref initial=0 max=0\n",
      "disassemble": "\ntable.2.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n"
    },
    "table.3.wasm": {
      "header": "\ntable.3.wasm:\tfile format wasm 0x1\n\nSections:\n\n    Table start=0x0000000a end=0x0000000f (size=0x00000005) count: 1\n",
      "details": "\ntable.3.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nTable[1]:\n - table[0] type=funcref initial=0 max=1\n",
      "disassemble": "\ntable.3.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n"
    },
    "table.4.wasm": {
      "header": "\ntable.4.wasm:\tfile format wasm 0x1\n\nSections:\n\n    Table start=0x0000000a end=0x00000010 (size=0x00000006) count: 1\n",
      "details": "\ntable.4.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nTable[1]:\n - table[0] type=funcref initial=1 max=256\n",
      "disassemble": "\ntable.4.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n"
    },
    "table.5.wasm": {
      "header": "\ntable.5.wasm:\tfile format wasm 0x1\n\nSections:\n\n    Table start=0x0000000a end=0x00000011 (size=0x00000007) count: 1\n",
      "details": "\ntable.5.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nTable[1]:\n - table[0] type=funcref initial=0 max=65536\n",
      "disassemble": "\ntable.5.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n"
    },
    "table.6.wasm": {
      "header": "\ntable.6.wasm:\tfile format wasm 0x1\n\nSections:\n\n    Table start=0x0000000a end=0x00000013 (size=0x00000009) count: 1\n",
      "details": "\ntable.6.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nTable[1]:\n - table[0] type=funcref initial=0 max=4294967295\n",
      "disassemble": "\ntable.6.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n"
    },
    "table.7.wasm": {
      "header": "\ntable.7.wasm:\tfile format wasm 0x1\n\nSections:\n\n    Table start=0x0000000a end=0x00000011 (size=0x00000007) count: 2\n",
      "details": "\ntable.7.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nTable[2]:\n - table[0] type=funcref initial=0\n - table[1] type=funcref initial=0\n",
      "disassemble": "\ntable.7.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n"
    },
    "table.8.wasm": {
      "header": "\ntable.8.wasm:\tfile format wasm 0x1\n\nSections:\n\n   Import start=0x0000000a end=0x0000001e (size=0x00000014) count: 1\n    Table start=0x00000020 end=0x00000024 (size=0x00000004) count: 1\n",
      "details": "\ntable.8.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nImport[1]:\n - table[0] type=funcref initial=0 <- spectest.table\nTable[1]:\n - table[1] type=funcref initial=0\n",
      "disassemble": "\ntable.8.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n"
    }
  }
}
