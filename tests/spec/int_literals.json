{
  "bin": {
    "int_literals.0.wasm": "AGFzbQEAAAABCQJgAAF/YAABfgMfHgAAAAAAAAAAAAAAAQEBAQEBAQEBAQEAAAAAAQEBAQe3Ax4IaTMyLnRlc3QAAAhpMzIudW1heAABCGkzMi5zbWF4AAIMaTMyLm5lZ19zbWF4AAMIaTMyLnNtaW4ABAxpMzIuYWx0X3NtaW4ABQxpMzIuaW5jX3NtaW4ABgxpMzIubmVnX3plcm8ABw1pMzIubm90X29jdGFsAAgUaTMyLnVuc2lnbmVkX2RlY2ltYWwACQ1pMzIucGx1c19zaWduAAoIaTY0LnRlc3QACwhpNjQudW1heAAMCGk2NC5zbWF4AA0MaTY0Lm5lZ19zbWF4AA4IaTY0LnNtaW4ADwxpNjQuYWx0X3NtaW4AEAxpNjQuaW5jX3NtaW4AEQxpNjQubmVnX3plcm8AEg1pNjQubm90X29jdGFsABMUaTY0LnVuc2lnbmVkX2RlY2ltYWwAFA1pNjQucGx1c19zaWduABUMaTMyLWRlYy1zZXAxABYMaTMyLWRlYy1zZXAyABcMaTMyLWhleC1zZXAxABgMaTMyLWhleC1zZXAyABkMaTY0LWRlYy1zZXAxABoMaTY0LWRlYy1zZXAyABsMaTY0LWhleC1zZXAxABwMaTY0LWhleC1zZXAyAB0KlQIeCQBBjaC33QAPCwUAQX8PCwkAQf////8HDwsJAEGBgICAeA8LCQBBgICAgHgPCwkAQYCAgIB4DwsMAEGAgICAeEEBag8LBQBBAA8LBQBBCg8LBQBBfw8LBQBBKg8LDQBC7tSZ3eDN7tUMDwsFAEJ/DwsOAEL///////////8ADwsOAEKBgICAgICAgIB/DwsOAEKAgICAgICAgIB/DwsOAEKAgICAgICAgIB/DwsRAEKAgICAgICAgIB/QgF8DwsFAEIADwsFAEIKDwsFAEJ/DwsFAEIqDwsGAEHAhD0LBQBB6AcLCABBmYG80AALBgBBj9QGCwYAQsCEPQsFAELoBwsLAEKZs4KA8IG8BQsGAEKP1AYL",
    "int_literals.1.wat": "KGdsb2JhbCBpMzIgKGkzMi5jb25zdCBfMTAwKSk=",
    "int_literals.10.wat": "KGdsb2JhbCBpMzIgKGkzMi5jb25zdCAweGZmX19mZmZmKSk=",
    "int_literals.11.wat": "KGdsb2JhbCBpNjQgKGk2NC5jb25zdCBfMTAwKSk=",
    "int_literals.12.wat": "KGdsb2JhbCBpNjQgKGk2NC5jb25zdCArXzEwMCkp",
    "int_literals.13.wat": "KGdsb2JhbCBpNjQgKGk2NC5jb25zdCAtXzEwMCkp",
    "int_literals.14.wat": "KGdsb2JhbCBpNjQgKGk2NC5jb25zdCA5OV8pKQ==",
    "int_literals.15.wat": "KGdsb2JhbCBpNjQgKGk2NC5jb25zdCAxX18wMDApKQ==",
    "int_literals.16.wat": "KGdsb2JhbCBpNjQgKGk2NC5jb25zdCBfMHgxMDApKQ==",
    "int_literals.17.wat": "KGdsb2JhbCBpNjQgKGk2NC5jb25zdCAwX3gxMDApKQ==",
    "int_literals.18.wat": "KGdsb2JhbCBpNjQgKGk2NC5jb25zdCAweF8xMDApKQ==",
    "int_literals.19.wat": "KGdsb2JhbCBpNjQgKGk2NC5jb25zdCAweDAwXykp",
    "int_literals.2.wat": "KGdsb2JhbCBpMzIgKGkzMi5jb25zdCArXzEwMCkp",
    "int_literals.20.wat": "KGdsb2JhbCBpNjQgKGk2NC5jb25zdCAweGZmX19mZmZmKSk=",
    "int_literals.3.wat": "KGdsb2JhbCBpMzIgKGkzMi5jb25zdCAtXzEwMCkp",
    "int_literals.4.wat": "KGdsb2JhbCBpMzIgKGkzMi5jb25zdCA5OV8pKQ==",
    "int_literals.5.wat": "KGdsb2JhbCBpMzIgKGkzMi5jb25zdCAxX18wMDApKQ==",
    "int_literals.6.wat": "KGdsb2JhbCBpMzIgKGkzMi5jb25zdCBfMHgxMDApKQ==",
    "int_literals.7.wat": "KGdsb2JhbCBpMzIgKGkzMi5jb25zdCAwX3gxMDApKQ==",
    "int_literals.8.wat": "KGdsb2JhbCBpMzIgKGkzMi5jb25zdCAweF8xMDApKQ==",
    "int_literals.9.wat": "KGdsb2JhbCBpMzIgKGkzMi5jb25zdCAweDAwXykp"
  },
  "spec": {"source_filename": "/workspace/wasm-spec/test/core/int_literals.wast",
 "commands": [
  {"type": "module", "line": 1, "filename": "int_literals.0.wasm"}, 
  {"type": "assert_return", "line": 37, "action": {"type": "invoke", "field": "i32.test", "args": []}, "expected": [{"type": "i32", "value": "195940365"}]}, 
  {"type": "assert_return", "line": 38, "action": {"type": "invoke", "field": "i32.umax", "args": []}, "expected": [{"type": "i32", "value": "4294967295"}]}, 
  {"type": "assert_return", "line": 39, "action": {"type": "invoke", "field": "i32.smax", "args": []}, "expected": [{"type": "i32", "value": "2147483647"}]}, 
  {"type": "assert_return", "line": 40, "action": {"type": "invoke", "field": "i32.neg_smax", "args": []}, "expected": [{"type": "i32", "value": "2147483649"}]}, 
  {"type": "assert_return", "line": 41, "action": {"type": "invoke", "field": "i32.smin", "args": []}, "expected": [{"type": "i32", "value": "2147483648"}]}, 
  {"type": "assert_return", "line": 42, "action": {"type": "invoke", "field": "i32.alt_smin", "args": []}, "expected": [{"type": "i32", "value": "2147483648"}]}, 
  {"type": "assert_return", "line": 43, "action": {"type": "invoke", "field": "i32.inc_smin", "args": []}, "expected": [{"type": "i32", "value": "2147483649"}]}, 
  {"type": "assert_return", "line": 44, "action": {"type": "invoke", "field": "i32.neg_zero", "args": []}, "expected": [{"type": "i32", "value": "0"}]}, 
  {"type": "assert_return", "line": 45, "action": {"type": "invoke", "field": "i32.not_octal", "args": []}, "expected": [{"type": "i32", "value": "10"}]}, 
  {"type": "assert_return", "line": 46, "action": {"type": "invoke", "field": "i32.unsigned_decimal", "args": []}, "expected": [{"type": "i32", "value": "4294967295"}]}, 
  {"type": "assert_return", "line": 47, "action": {"type": "invoke", "field": "i32.plus_sign", "args": []}, "expected": [{"type": "i32", "value": "42"}]}, 
  {"type": "assert_return", "line": 49, "action": {"type": "invoke", "field": "i64.test", "args": []}, "expected": [{"type": "i64", "value": "913028331277281902"}]}, 
  {"type": "assert_return", "line": 50, "action": {"type": "invoke", "field": "i64.umax", "args": []}, "expected": [{"type": "i64", "value": "18446744073709551615"}]}, 
  {"type": "assert_return", "line": 51, "action": {"type": "invoke", "field": "i64.smax", "args": []}, "expected": [{"type": "i64", "value": "9223372036854775807"}]}, 
  {"type": "assert_return", "line": 52, "action": {"type": "invoke", "field": "i64.neg_smax", "args": []}, "expected": [{"type": "i64", "value": "9223372036854775809"}]}, 
  {"type": "assert_return", "line": 53, "action": {"type": "invoke", "field": "i64.smin", "args": []}, "expected": [{"type": "i64", "value": "9223372036854775808"}]}, 
  {"type": "assert_return", "line": 54, "action": {"type": "invoke", "field": "i64.alt_smin", "args": []}, "expected": [{"type": "i64", "value": "9223372036854775808"}]}, 
  {"type": "assert_return", "line": 55, "action": {"type": "invoke", "field": "i64.inc_smin", "args": []}, "expected": [{"type": "i64", "value": "9223372036854775809"}]}, 
  {"type": "assert_return", "line": 56, "action": {"type": "invoke", "field": "i64.neg_zero", "args": []}, "expected": [{"type": "i64", "value": "0"}]}, 
  {"type": "assert_return", "line": 57, "action": {"type": "invoke", "field": "i64.not_octal", "args": []}, "expected": [{"type": "i64", "value": "10"}]}, 
  {"type": "assert_return", "line": 58, "action": {"type": "invoke", "field": "i64.unsigned_decimal", "args": []}, "expected": [{"type": "i64", "value": "18446744073709551615"}]}, 
  {"type": "assert_return", "line": 59, "action": {"type": "invoke", "field": "i64.plus_sign", "args": []}, "expected": [{"type": "i64", "value": "42"}]}, 
  {"type": "assert_return", "line": 61, "action": {"type": "invoke", "field": "i32-dec-sep1", "args": []}, "expected": [{"type": "i32", "value": "1000000"}]}, 
  {"type": "assert_return", "line": 62, "action": {"type": "invoke", "field": "i32-dec-sep2", "args": []}, "expected": [{"type": "i32", "value": "1000"}]}, 
  {"type": "assert_return", "line": 63, "action": {"type": "invoke", "field": "i32-hex-sep1", "args": []}, "expected": [{"type": "i32", "value": "168755353"}]}, 
  {"type": "assert_return", "line": 64, "action": {"type": "invoke", "field": "i32-hex-sep2", "args": []}, "expected": [{"type": "i32", "value": "109071"}]}, 
  {"type": "assert_return", "line": 66, "action": {"type": "invoke", "field": "i64-dec-sep1", "args": []}, "expected": [{"type": "i64", "value": "1000000"}]}, 
  {"type": "assert_return", "line": 67, "action": {"type": "invoke", "field": "i64-dec-sep2", "args": []}, "expected": [{"type": "i64", "value": "1000"}]}, 
  {"type": "assert_return", "line": 68, "action": {"type": "invoke", "field": "i64-hex-sep1", "args": []}, "expected": [{"type": "i64", "value": "3078696982321561"}]}, 
  {"type": "assert_return", "line": 69, "action": {"type": "invoke", "field": "i64-hex-sep2", "args": []}, "expected": [{"type": "i64", "value": "109071"}]}, 
  {"type": "assert_malformed", "line": 72, "filename": "int_literals.1.wat", "text": "unknown operator", "module_type": "text"}, 
  {"type": "assert_malformed", "line": 76, "filename": "int_literals.2.wat", "text": "unknown operator", "module_type": "text"}, 
  {"type": "assert_malformed", "line": 80, "filename": "int_literals.3.wat", "text": "unknown operator", "module_type": "text"}, 
  {"type": "assert_malformed", "line": 84, "filename": "int_literals.4.wat", "text": "unknown operator", "module_type": "text"}, 
  {"type": "assert_malformed", "line": 88, "filename": "int_literals.5.wat", "text": "unknown operator", "module_type": "text"}, 
  {"type": "assert_malformed", "line": 92, "filename": "int_literals.6.wat", "text": "unknown operator", "module_type": "text"}, 
  {"type": "assert_malformed", "line": 96, "filename": "int_literals.7.wat", "text": "unknown operator", "module_type": "text"}, 
  {"type": "assert_malformed", "line": 100, "filename": "int_literals.8.wat", "text": "unknown operator", "module_type": "text"}, 
  {"type": "assert_malformed", "line": 104, "filename": "int_literals.9.wat", "text": "unknown operator", "module_type": "text"}, 
  {"type": "assert_malformed", "line": 108, "filename": "int_literals.10.wat", "text": "unknown operator", "module_type": "text"}, 
  {"type": "assert_malformed", "line": 113, "filename": "int_literals.11.wat", "text": "unknown operator", "module_type": "text"}, 
  {"type": "assert_malformed", "line": 117, "filename": "int_literals.12.wat", "text": "unknown operator", "module_type": "text"}, 
  {"type": "assert_malformed", "line": 121, "filename": "int_literals.13.wat", "text": "unknown operator", "module_type": "text"}, 
  {"type": "assert_malformed", "line": 125, "filename": "int_literals.14.wat", "text": "unknown operator", "module_type": "text"}, 
  {"type": "assert_malformed", "line": 129, "filename": "int_literals.15.wat", "text": "unknown operator", "module_type": "text"}, 
  {"type": "assert_malformed", "line": 133, "filename": "int_literals.16.wat", "text": "unknown operator", "module_type": "text"}, 
  {"type": "assert_malformed", "line": 137, "filename": "int_literals.17.wat", "text": "unknown operator", "module_type": "text"}, 
  {"type": "assert_malformed", "line": 141, "filename": "int_literals.18.wat", "text": "unknown operator", "module_type": "text"}, 
  {"type": "assert_malformed", "line": 145, "filename": "int_literals.19.wat", "text": "unknown operator", "module_type": "text"}, 
  {"type": "assert_malformed", "line": 149, "filename": "int_literals.20.wat", "text": "unknown operator", "module_type": "text"}]},
  "code": [
    "(module \n  (func (export \"i32.test\") (result i32) (return (i32.const 0x0bAdD00D)))\n  (func (export \"i32.umax\") (result i32) (return (i32.const 0xffffffff)))\n  (func (export \"i32.smax\") (result i32) (return (i32.const 0x7fffffff)))\n  (func (export \"i32.neg_smax\") (result i32) (return (i32.const -0x7fffffff)))\n  (func (export \"i32.smin\") (result i32) (return (i32.const -0x80000000)))\n  (func (export \"i32.alt_smin\") (result i32) (return (i32.const 0x80000000)))\n  (func (export \"i32.inc_smin\") (result i32) (return (i32.add (i32.const -0x80000000) (i32.const 1))))\n  (func (export \"i32.neg_zero\") (result i32) (return (i32.const -0x0)))\n  (func (export \"i32.not_octal\") (result i32) (return (i32.const 010)))\n  (func (export \"i32.unsigned_decimal\") (result i32) (return (i32.const 4294967295)))\n  (func (export \"i32.plus_sign\") (result i32) (return (i32.const +42)))\n  (func (export \"i64.test\") (result i64) (return (i64.const 0x0CABBA6E0ba66a6e)))\n  (func (export \"i64.umax\") (result i64) (return (i64.const 0xffffffffffffffff)))\n  (func (export \"i64.smax\") (result i64) (return (i64.const 0x7fffffffffffffff)))\n  (func (export \"i64.neg_smax\") (result i64) (return (i64.const -0x7fffffffffffffff)))\n  (func (export \"i64.smin\") (result i64) (return (i64.const -0x8000000000000000)))\n  (func (export \"i64.alt_smin\") (result i64) (return (i64.const 0x8000000000000000)))\n  (func (export \"i64.inc_smin\") (result i64) (return (i64.add (i64.const -0x8000000000000000) (i64.const 1))))\n  (func (export \"i64.neg_zero\") (result i64) (return (i64.const -0x0)))\n  (func (export \"i64.not_octal\") (result i64) (return (i64.const 010)))\n  (func (export \"i64.unsigned_decimal\") (result i64) (return (i64.const 18446744073709551615)))\n  (func (export \"i64.plus_sign\") (result i64) (return (i64.const +42)))\n  (func (export \"i32-dec-sep1\") (result i32) (i32.const 1_000_000))\n  (func (export \"i32-dec-sep2\") (result i32) (i32.const 1_0_0_0))\n  (func (export \"i32-hex-sep1\") (result i32) (i32.const 0xa_0f_00_99))\n  (func (export \"i32-hex-sep2\") (result i32) (i32.const 0x1_a_A_0_f))\n  (func (export \"i64-dec-sep1\") (result i64) (i64.const 1_000_000))\n  (func (export \"i64-dec-sep2\") (result i64) (i64.const 1_0_0_0))\n  (func (export \"i64-hex-sep1\") (result i64) (i64.const 0xa_f00f_0000_9999))\n  (func (export \"i64-hex-sep2\") (result i64) (i64.const 0x1_a_A_0_f)))",
    "(assert_return (invoke \"i32.test\") (i32.const 195940365))",
    "(assert_return (invoke \"i32.umax\") (i32.const -1))",
    "(assert_return (invoke \"i32.smax\") (i32.const 2147483647))",
    "(assert_return (invoke \"i32.neg_smax\") (i32.const -2147483647))",
    "(assert_return (invoke \"i32.smin\") (i32.const -2147483648))",
    "(assert_return (invoke \"i32.alt_smin\") (i32.const -2147483648))",
    "(assert_return (invoke \"i32.inc_smin\") (i32.const -2147483647))",
    "(assert_return (invoke \"i32.neg_zero\") (i32.const 0))",
    "(assert_return (invoke \"i32.not_octal\") (i32.const 10))",
    "(assert_return (invoke \"i32.unsigned_decimal\") (i32.const -1))",
    "(assert_return (invoke \"i32.plus_sign\") (i32.const 42))",
    "(assert_return (invoke \"i64.test\") (i64.const 913028331277281902))",
    "(assert_return (invoke \"i64.umax\") (i64.const -1))",
    "(assert_return (invoke \"i64.smax\") (i64.const 9223372036854775807))",
    "(assert_return (invoke \"i64.neg_smax\") (i64.const -9223372036854775807))",
    "(assert_return (invoke \"i64.smin\") (i64.const -9223372036854775808))",
    "(assert_return (invoke \"i64.alt_smin\") (i64.const -9223372036854775808))",
    "(assert_return (invoke \"i64.inc_smin\") (i64.const -9223372036854775807))",
    "(assert_return (invoke \"i64.neg_zero\") (i64.const 0))",
    "(assert_return (invoke \"i64.not_octal\") (i64.const 10))",
    "(assert_return (invoke \"i64.unsigned_decimal\") (i64.const -1))",
    "(assert_return (invoke \"i64.plus_sign\") (i64.const 42))",
    "(assert_return (invoke \"i32-dec-sep1\") (i32.const 1000000))",
    "(assert_return (invoke \"i32-dec-sep2\") (i32.const 1000))",
    "(assert_return (invoke \"i32-hex-sep1\") (i32.const 0xa0f0099))",
    "(assert_return (invoke \"i32-hex-sep2\") (i32.const 0x1aa0f))",
    "(assert_return (invoke \"i64-dec-sep1\") (i64.const 1000000))",
    "(assert_return (invoke \"i64-dec-sep2\") (i64.const 1000))",
    "(assert_return (invoke \"i64-hex-sep1\") (i64.const 0xaf00f00009999))",
    "(assert_return (invoke \"i64-hex-sep2\") (i64.const 0x1aa0f))",
    "(assert_malformed (module quote \"(global i32 (i32.const _100))\") \"unknown operator\")",
    "(assert_malformed (module quote \"(global i32 (i32.const +_100))\") \"unknown operator\")",
    "(assert_malformed (module quote \"(global i32 (i32.const -_100))\") \"unknown operator\")",
    "(assert_malformed (module quote \"(global i32 (i32.const 99_))\") \"unknown operator\")",
    "(assert_malformed (module quote \"(global i32 (i32.const 1__000))\") \"unknown operator\")",
    "(assert_malformed (module quote \"(global i32 (i32.const _0x100))\") \"unknown operator\")",
    "(assert_malformed (module quote \"(global i32 (i32.const 0_x100))\") \"unknown operator\")",
    "(assert_malformed (module quote \"(global i32 (i32.const 0x_100))\") \"unknown operator\")",
    "(assert_malformed (module quote \"(global i32 (i32.const 0x00_))\") \"unknown operator\")",
    "(assert_malformed (module quote \"(global i32 (i32.const 0xff__ffff))\") \"unknown operator\")",
    "(assert_malformed (module quote \"(global i64 (i64.const _100))\") \"unknown operator\")",
    "(assert_malformed (module quote \"(global i64 (i64.const +_100))\") \"unknown operator\")",
    "(assert_malformed (module quote \"(global i64 (i64.const -_100))\") \"unknown operator\")",
    "(assert_malformed (module quote \"(global i64 (i64.const 99_))\") \"unknown operator\")",
    "(assert_malformed (module quote \"(global i64 (i64.const 1__000))\") \"unknown operator\")",
    "(assert_malformed (module quote \"(global i64 (i64.const _0x100))\") \"unknown operator\")",
    "(assert_malformed (module quote \"(global i64 (i64.const 0_x100))\") \"unknown operator\")",
    "(assert_malformed (module quote \"(global i64 (i64.const 0x_100))\") \"unknown operator\")",
    "(assert_malformed (module quote \"(global i64 (i64.const 0x00_))\") \"unknown operator\")",
    "(assert_malformed (module quote \"(global i64 (i64.const 0xff__ffff))\") \"unknown operator\")"
  ],
  "dump": {
    "int_literals.0.wasm": {
      "header": "\nint_literals.0.wasm:\tfile format wasm 0x1\n\nSections:\n\n     Type start=0x0000000a end=0x00000013 (size=0x00000009) count: 2\n Function start=0x00000015 end=0x00000034 (size=0x0000001f) count: 30\n   Export start=0x00000037 end=0x000001ee (size=0x000001b7) count: 30\n     Code start=0x000001f1 end=0x00000306 (size=0x00000115) count: 30\n",
      "details": "\nint_literals.0.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nType[2]:\n - type[0] () -> i32\n - type[1] () -> i64\nFunction[30]:\n - func[0] sig=0 <i32.test>\n - func[1] sig=0 <i32.umax>\n - func[2] sig=0 <i32.smax>\n - func[3] sig=0 <i32.neg_smax>\n - func[4] sig=0 <i32.smin>\n - func[5] sig=0 <i32.alt_smin>\n - func[6] sig=0 <i32.inc_smin>\n - func[7] sig=0 <i32.neg_zero>\n - func[8] sig=0 <i32.not_octal>\n - func[9] sig=0 <i32.unsigned_decimal>\n - func[10] sig=0 <i32.plus_sign>\n - func[11] sig=1 <i64.test>\n - func[12] sig=1 <i64.umax>\n - func[13] sig=1 <i64.smax>\n - func[14] sig=1 <i64.neg_smax>\n - func[15] sig=1 <i64.smin>\n - func[16] sig=1 <i64.alt_smin>\n - func[17] sig=1 <i64.inc_smin>\n - func[18] sig=1 <i64.neg_zero>\n - func[19] sig=1 <i64.not_octal>\n - func[20] sig=1 <i64.unsigned_decimal>\n - func[21] sig=1 <i64.plus_sign>\n - func[22] sig=0 <i32-dec-sep1>\n - func[23] sig=0 <i32-dec-sep2>\n - func[24] sig=0 <i32-hex-sep1>\n - func[25] sig=0 <i32-hex-sep2>\n - func[26] sig=1 <i64-dec-sep1>\n - func[27] sig=1 <i64-dec-sep2>\n - func[28] sig=1 <i64-hex-sep1>\n - func[29] sig=1 <i64-hex-sep2>\nExport[30]:\n - func[0] <i32.test> -> \"i32.test\"\n - func[1] <i32.umax> -> \"i32.umax\"\n - func[2] <i32.smax> -> \"i32.smax\"\n - func[3] <i32.neg_smax> -> \"i32.neg_smax\"\n - func[4] <i32.smin> -> \"i32.smin\"\n - func[5] <i32.alt_smin> -> \"i32.alt_smin\"\n - func[6] <i32.inc_smin> -> \"i32.inc_smin\"\n - func[7] <i32.neg_zero> -> \"i32.neg_zero\"\n - func[8] <i32.not_octal> -> \"i32.not_octal\"\n - func[9] <i32.unsigned_decimal> -> \"i32.unsigned_decimal\"\n - func[10] <i32.plus_sign> -> \"i32.plus_sign\"\n - func[11] <i64.test> -> \"i64.test\"\n - func[12] <i64.umax> -> \"i64.umax\"\n - func[13] <i64.smax> -> \"i64.smax\"\n - func[14] <i64.neg_smax> -> \"i64.neg_smax\"\n - func[15] <i64.smin> -> \"i64.smin\"\n - func[16] <i64.alt_smin> -> \"i64.alt_smin\"\n - func[17] <i64.inc_smin> -> \"i64.inc_smin\"\n - func[18] <i64.neg_zero> -> \"i64.neg_zero\"\n - func[19] <i64.not_octal> -> \"i64.not_octal\"\n - func[20] <i64.unsigned_decimal> -> \"i64.unsigned_decimal\"\n - func[21] <i64.plus_sign> -> \"i64.plus_sign\"\n - func[22] <i32-dec-sep1> -> \"i32-dec-sep1\"\n - func[23] <i32-dec-sep2> -> \"i32-dec-sep2\"\n - func[24] <i32-hex-sep1> -> \"i32-hex-sep1\"\n - func[25] <i32-hex-sep2> -> \"i32-hex-sep2\"\n - func[26] <i64-dec-sep1> -> \"i64-dec-sep1\"\n - func[27] <i64-dec-sep2> -> \"i64-dec-sep2\"\n - func[28] <i64-hex-sep1> -> \"i64-hex-sep1\"\n - func[29] <i64-hex-sep2> -> \"i64-hex-sep2\"\nCode[30]:\n - func[0] size=9 <i32.test>\n - func[1] size=5 <i32.umax>\n - func[2] size=9 <i32.smax>\n - func[3] size=9 <i32.neg_smax>\n - func[4] size=9 <i32.smin>\n - func[5] size=9 <i32.alt_smin>\n - func[6] size=12 <i32.inc_smin>\n - func[7] size=5 <i32.neg_zero>\n - func[8] size=5 <i32.not_octal>\n - func[9] size=5 <i32.unsigned_decimal>\n - func[10] size=5 <i32.plus_sign>\n - func[11] size=13 <i64.test>\n - func[12] size=5 <i64.umax>\n - func[13] size=14 <i64.smax>\n - func[14] size=14 <i64.neg_smax>\n - func[15] size=14 <i64.smin>\n - func[16] size=14 <i64.alt_smin>\n - func[17] size=17 <i64.inc_smin>\n - func[18] size=5 <i64.neg_zero>\n - func[19] size=5 <i64.not_octal>\n - func[20] size=5 <i64.unsigned_decimal>\n - func[21] size=5 <i64.plus_sign>\n - func[22] size=6 <i32-dec-sep1>\n - func[23] size=5 <i32-dec-sep2>\n - func[24] size=8 <i32-hex-sep1>\n - func[25] size=6 <i32-hex-sep2>\n - func[26] size=6 <i64-dec-sep1>\n - func[27] size=5 <i64-dec-sep2>\n - func[28] size=11 <i64-hex-sep1>\n - func[29] size=6 <i64-hex-sep2>\n",
      "disassemble": "\nint_literals.0.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n0001f3 func[0] <i32.test>:\n 0001f4: 41 8d a0 b7 dd 00          | i32.const 195940365\n 0001fa: 0f                         | return\n 0001fb: 0b                         | end\n0001fd func[1] <i32.umax>:\n 0001fe: 41 7f                      | i32.const 4294967295\n 000200: 0f                         | return\n 000201: 0b                         | end\n000203 func[2] <i32.smax>:\n 000204: 41 ff ff ff ff 07          | i32.const 2147483647\n 00020a: 0f                         | return\n 00020b: 0b                         | end\n00020d func[3] <i32.neg_smax>:\n 00020e: 41 81 80 80 80 78          | i32.const 2147483649\n 000214: 0f                         | return\n 000215: 0b                         | end\n000217 func[4] <i32.smin>:\n 000218: 41 80 80 80 80 78          | i32.const 2147483648\n 00021e: 0f                         | return\n 00021f: 0b                         | end\n000221 func[5] <i32.alt_smin>:\n 000222: 41 80 80 80 80 78          | i32.const 2147483648\n 000228: 0f                         | return\n 000229: 0b                         | end\n00022b func[6] <i32.inc_smin>:\n 00022c: 41 80 80 80 80 78          | i32.const 2147483648\n 000232: 41 01                      | i32.const 1\n 000234: 6a                         | i32.add\n 000235: 0f                         | return\n 000236: 0b                         | end\n000238 func[7] <i32.neg_zero>:\n 000239: 41 00                      | i32.const 0\n 00023b: 0f                         | return\n 00023c: 0b                         | end\n00023e func[8] <i32.not_octal>:\n 00023f: 41 0a                      | i32.const 10\n 000241: 0f                         | return\n 000242: 0b                         | end\n000244 func[9] <i32.unsigned_decimal>:\n 000245: 41 7f                      | i32.const 4294967295\n 000247: 0f                         | return\n 000248: 0b                         | end\n00024a func[10] <i32.plus_sign>:\n 00024b: 41 2a                      | i32.const 42\n 00024d: 0f                         | return\n 00024e: 0b                         | end\n000250 func[11] <i64.test>:\n 000251: 42 ee d4 99 dd e0 cd ee d5 | i64.const 913028331277281902\n 00025a: 0c                         | \n 00025b: 0f                         | return\n 00025c: 0b                         | end\n00025e func[12] <i64.umax>:\n 00025f: 42 7f                      | i64.const 18446744073709551615\n 000261: 0f                         | return\n 000262: 0b                         | end\n000264 func[13] <i64.smax>:\n 000265: 42 ff ff ff ff ff ff ff ff | i64.const 9223372036854775807\n 00026e: ff 00                      | \n 000270: 0f                         | return\n 000271: 0b                         | end\n000273 func[14] <i64.neg_smax>:\n 000274: 42 81 80 80 80 80 80 80 80 | i64.const 9223372036854775809\n 00027d: 80 7f                      | \n 00027f: 0f                         | return\n 000280: 0b                         | end\n000282 func[15] <i64.smin>:\n 000283: 42 80 80 80 80 80 80 80 80 | i64.const 9223372036854775808\n 00028c: 80 7f                      | \n 00028e: 0f                         | return\n 00028f: 0b                         | end\n000291 func[16] <i64.alt_smin>:\n 000292: 42 80 80 80 80 80 80 80 80 | i64.const 9223372036854775808\n 00029b: 80 7f                      | \n 00029d: 0f                         | return\n 00029e: 0b                         | end\n0002a0 func[17] <i64.inc_smin>:\n 0002a1: 42 80 80 80 80 80 80 80 80 | i64.const 9223372036854775808\n 0002aa: 80 7f                      | \n 0002ac: 42 01                      | i64.const 1\n 0002ae: 7c                         | i64.add\n 0002af: 0f                         | return\n 0002b0: 0b                         | end\n0002b2 func[18] <i64.neg_zero>:\n 0002b3: 42 00                      | i64.const 0\n 0002b5: 0f                         | return\n 0002b6: 0b                         | end\n0002b8 func[19] <i64.not_octal>:\n 0002b9: 42 0a                      | i64.const 10\n 0002bb: 0f                         | return\n 0002bc: 0b                         | end\n0002be func[20] <i64.unsigned_decimal>:\n 0002bf: 42 7f                      | i64.const 18446744073709551615\n 0002c1: 0f                         | return\n 0002c2: 0b                         | end\n0002c4 func[21] <i64.plus_sign>:\n 0002c5: 42 2a                      | i64.const 42\n 0002c7: 0f                         | return\n 0002c8: 0b                         | end\n0002ca func[22] <i32-dec-sep1>:\n 0002cb: 41 c0 84 3d                | i32.const 1000000\n 0002cf: 0b                         | end\n0002d1 func[23] <i32-dec-sep2>:\n 0002d2: 41 e8 07                   | i32.const 1000\n 0002d5: 0b                         | end\n0002d7 func[24] <i32-hex-sep1>:\n 0002d8: 41 99 81 bc d0 00          | i32.const 168755353\n 0002de: 0b                         | end\n0002e0 func[25] <i32-hex-sep2>:\n 0002e1: 41 8f d4 06                | i32.const 109071\n 0002e5: 0b                         | end\n0002e7 func[26] <i64-dec-sep1>:\n 0002e8: 42 c0 84 3d                | i64.const 1000000\n 0002ec: 0b                         | end\n0002ee func[27] <i64-dec-sep2>:\n 0002ef: 42 e8 07                   | i64.const 1000\n 0002f2: 0b                         | end\n0002f4 func[28] <i64-hex-sep1>:\n 0002f5: 42 99 b3 82 80 f0 81 bc 05 | i64.const 3078696982321561\n 0002fe: 0b                         | end\n000300 func[29] <i64-hex-sep2>:\n 000301: 42 8f d4 06                | i64.const 109071\n 000305: 0b                         | end\n"
    }
  }
}
