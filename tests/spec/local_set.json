{
  "bin": {
    "local_set.0.wasm": "AGFzbQEAAAABJQdgAABgAX8AYAF+AGABfQBgAXwAYAV+fXx/fwBgBX59fH9/AX4DFBMAAAAAAQIDBAUGAQEBAQEBAQEBB7QCEw50eXBlLWxvY2FsLWkzMgAADnR5cGUtbG9jYWwtaTY0AAEOdHlwZS1sb2NhbC1mMzIAAg50eXBlLWxvY2FsLWY2NAADDnR5cGUtcGFyYW0taTMyAAQOdHlwZS1wYXJhbS1pNjQABQ50eXBlLXBhcmFtLWYzMgAGDnR5cGUtcGFyYW0tZjY0AAcKdHlwZS1taXhlZAAIBXdyaXRlAAkOYXMtYmxvY2stdmFsdWUACg1hcy1sb29wLXZhbHVlAAsLYXMtYnItdmFsdWUADA5hcy1icl9pZi12YWx1ZQANE2FzLWJyX2lmLXZhbHVlLWNvbmQADhFhcy1icl90YWJsZS12YWx1ZQAPD2FzLXJldHVybi12YWx1ZQAQCmFzLWlmLXRoZW4AEQphcy1pZi1lbHNlABIK0gITCAEBf0EAIQALCAEBfkIAIQALCwEBfUMAAAAAIQALDwEBfEQAAAAAAAAAACEACwYAQQohAAsGAEILIQALCQBDmpkxQSEACw0ARGZmZmZmZihAIQALQAMBfQJ+AXxCACEAQwAAAAAhAUQAAAAAAAAAACECQQAhA0EAIQRDAAAAACEFQgAhBkIAIQdEAAAAAAAAAAAhCAtPAwF9An4BfEOamZm+IQFBKCEDQXkhBEMAALBAIQVCBiEGRAAAAAAAACBAIQggALogAbsgAiADuCAEtyAFuyAGuiAHuiAIoKCgoKCgoKCwCwkAAkBBASEACwsJAANAQQMhAAsLCwACQEEJIQAMAAsLDQACQEEIIQBBAQ0ACwsNAAJAQQZBCSEADQALCw4AAkBBCiEAQQEOAAALCwcAQQchAA8LCwAgAARAQQMhAAsLDAAgAARABUEBIQALCw==",
    "local_set.1.wasm": "AGFzbQEAAAABBAFgAAADAgEACgkBBwEBfwEhAAs=",
    "local_set.10.wasm": "AGFzbQEAAAABBQFgAX8AAwIBAAoLAQkAQQACQCEACws=",
    "local_set.11.wasm": "AGFzbQEAAAABBQFgAX8AAwIBAAoLAQkAQQADQCEACws=",
    "local_set.12.wasm": "AGFzbQEAAAABBQFgAX8AAwIBAAoNAQsAQQBBAQRAIQALCw==",
    "local_set.13.wasm": "AGFzbQEAAAABBQFgAX8AAwIBAAoQAQ4AQQBBAAR/QQAFIQALCw==",
    "local_set.14.wasm": "AGFzbQEAAAABBQFgAX8AAwIBAAoNAQsAQQACQCEADAALCw==",
    "local_set.15.wasm": "AGFzbQEAAAABBQFgAX8AAwIBAAoNAQsAQQACQCEADQALCw==",
    "local_set.16.wasm": "AGFzbQEAAAABBQFgAX8AAwIBAAoOAQwAQQACQCEADgAACws=",
    "local_set.17.wasm": "AGFzbQEAAAABBQFgAX8AAwIBAAoHAQUAIQAPCw==",
    "local_set.18.wasm": "AGFzbQEAAAABBQFgAX8AAwIBAAoLAQkAIQBBAUECGws=",
    "local_set.19.wasm": "AGFzbQEAAAABCgJgAX8AYAF/AX8DAwIAAQoNAgYAIQAQAQsEACAACw==",
    "local_set.2.wasm": "AGFzbQEAAAABBAFgAAADAgEACg0BCwEBf0MAAAAAIQAL",
    "local_set.20.wasm": "AGFzbQEAAAABCgJgAX8Bf2ABfwADAwIAAQQFAXABAQEJBwEAQQALAQAKEwIEACAACwwAAn8hAEEAEQAACws=",
    "local_set.21.wasm": "AGFzbQEAAAABBQFgAX0AAwIBAAoNAQsBAX9DAAAAACEBCw==",
    "local_set.22.wasm": "AGFzbQEAAAABBgFgAn5/AAMCAQAKDQELAQF9QwAAAAAhAQs=",
    "local_set.23.wasm": "AGFzbQEAAAABBQFgAX4AAwIBAAoMAQoCAXwBfkIAIQEL",
    "local_set.24.wasm": "AGFzbQEAAAABBgFgAX8BfwMCAQAKCAEGAEEBIQAL",
    "local_set.25.wasm": "AGFzbQEAAAABBgFgAX4BfgMCAQAKCAEGAEIBIQAL",
    "local_set.26.wasm": "AGFzbQEAAAABBgFgAX0BfQMCAQAKCwEJAEMAAIA/IQAL",
    "local_set.27.wasm": "AGFzbQEAAAABBgFgAXwBfAMCAQAKDwENAEQAAAAAAADwPyEACw==",
    "local_set.28.wasm": "AGFzbQEAAAABBAFgAAADAgEACgwBCgIBfwF+QQAhAws=",
    "local_set.29.wasm": "AGFzbQEAAAABBAFgAAADAgEACg8BDQIBfwF+QQAh96TqBgs=",
    "local_set.3.wasm": "AGFzbQEAAAABBAFgAAADAgEAChEBDwEBfUQAAAAAAAAAACEACw==",
    "local_set.30.wasm": "AGFzbQEAAAABBgFgAn9+AAMCAQAKCAEGAEEAIQIL",
    "local_set.31.wasm": "AGFzbQEAAAABBgFgAn9+AAMCAQAKDAEKAEEAIffyztQCCw==",
    "local_set.32.wasm": "AGFzbQEAAAABBQFgAX8AAwIBAAoMAQoCAX8BfkEAIQML",
    "local_set.33.wasm": "AGFzbQEAAAABBQFgAX4AAwIBAAoPAQ0CAX8BfkEAIfeomWYL",
    "local_set.4.wasm": "AGFzbQEAAAABBAFgAAADAgEAChMBEQIBfAF+RAAAAAAAAAAAIQEL",
    "local_set.5.wasm": "AGFzbQEAAAABBQFgAX8AAwIBAAoHAQUAASEACw==",
    "local_set.6.wasm": "AGFzbQEAAAABBQFgAX8AAwIBAAoLAQkAQwAAAAAhAAs=",
    "local_set.7.wasm": "AGFzbQEAAAABBQFgAX0AAwIBAAoPAQ0ARAAAAAAAAAAAIQAL",
    "local_set.8.wasm": "AGFzbQEAAAABBgFgAnx+AAMCAQAKDwENAEQAAAAAAAAAACEBCw==",
    "local_set.9.wasm": "AGFzbQEAAAABBQFgAX8AAwIBAAoGAQQAIQAL"
  },
  "spec": {"source_filename": "/home/rvagg/git/webassembly/spec/test/core/local_set.wast",
 "commands": [
  {"type": "module", "line": 3, "filename": "local_set.0.wasm"}, 
  {"type": "assert_return", "line": 107, "action": {"type": "invoke", "field": "type-local-i32", "args": []}, "expected": []}, 
  {"type": "assert_return", "line": 108, "action": {"type": "invoke", "field": "type-local-i64", "args": []}, "expected": []}, 
  {"type": "assert_return", "line": 109, "action": {"type": "invoke", "field": "type-local-f32", "args": []}, "expected": []}, 
  {"type": "assert_return", "line": 110, "action": {"type": "invoke", "field": "type-local-f64", "args": []}, "expected": []}, 
  {"type": "assert_return", "line": 112, "action": {"type": "invoke", "field": "type-param-i32", "args": [{"type": "i32", "value": "2"}]}, "expected": []}, 
  {"type": "assert_return", "line": 113, "action": {"type": "invoke", "field": "type-param-i64", "args": [{"type": "i64", "value": "3"}]}, "expected": []}, 
  {"type": "assert_return", "line": 114, "action": {"type": "invoke", "field": "type-param-f32", "args": [{"type": "f32", "value": "1082969293"}]}, "expected": []}, 
  {"type": "assert_return", "line": 115, "action": {"type": "invoke", "field": "type-param-f64", "args": [{"type": "f64", "value": "4617878467915022336"}]}, "expected": []}, 
  {"type": "assert_return", "line": 117, "action": {"type": "invoke", "field": "as-block-value", "args": [{"type": "i32", "value": "0"}]}, "expected": []}, 
  {"type": "assert_return", "line": 118, "action": {"type": "invoke", "field": "as-loop-value", "args": [{"type": "i32", "value": "0"}]}, "expected": []}, 
  {"type": "assert_return", "line": 120, "action": {"type": "invoke", "field": "as-br-value", "args": [{"type": "i32", "value": "0"}]}, "expected": []}, 
  {"type": "assert_return", "line": 121, "action": {"type": "invoke", "field": "as-br_if-value", "args": [{"type": "i32", "value": "0"}]}, "expected": []}, 
  {"type": "assert_return", "line": 122, "action": {"type": "invoke", "field": "as-br_if-value-cond", "args": [{"type": "i32", "value": "0"}]}, "expected": []}, 
  {"type": "assert_return", "line": 123, "action": {"type": "invoke", "field": "as-br_table-value", "args": [{"type": "i32", "value": "0"}]}, "expected": []}, 
  {"type": "assert_return", "line": 125, "action": {"type": "invoke", "field": "as-return-value", "args": [{"type": "i32", "value": "0"}]}, "expected": []}, 
  {"type": "assert_return", "line": 127, "action": {"type": "invoke", "field": "as-if-then", "args": [{"type": "i32", "value": "1"}]}, "expected": []}, 
  {"type": "assert_return", "line": 128, "action": {"type": "invoke", "field": "as-if-else", "args": [{"type": "i32", "value": "0"}]}, "expected": []}, 
  {"type": "assert_return", "line": 131, "action": {"type": "invoke", "field": "type-mixed", "args": [{"type": "i64", "value": "1"}, {"type": "f32", "value": "1074580685"}, {"type": "f64", "value": "4614613358185178726"}, {"type": "i32", "value": "4"}, {"type": "i32", "value": "5"}]}, "expected": []}, 
  {"type": "assert_return", "line": 137, "action": {"type": "invoke", "field": "write", "args": [{"type": "i64", "value": "1"}, {"type": "f32", "value": "1073741824"}, {"type": "f64", "value": "4614613358185178726"}, {"type": "i32", "value": "4"}, {"type": "i32", "value": "5"}]}, "expected": [{"type": "i64", "value": "56"}]}, 
  {"type": "assert_invalid", "line": 148, "filename": "local_set.1.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 152, "filename": "local_set.2.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 156, "filename": "local_set.3.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 160, "filename": "local_set.4.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 169, "filename": "local_set.5.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 173, "filename": "local_set.6.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 177, "filename": "local_set.7.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 181, "filename": "local_set.8.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 186, "filename": "local_set.9.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 194, "filename": "local_set.10.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 203, "filename": "local_set.11.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 212, "filename": "local_set.12.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 221, "filename": "local_set.13.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 230, "filename": "local_set.14.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 239, "filename": "local_set.15.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 248, "filename": "local_set.16.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 257, "filename": "local_set.17.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 265, "filename": "local_set.18.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 273, "filename": "local_set.19.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 282, "filename": "local_set.20.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 301, "filename": "local_set.21.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 305, "filename": "local_set.22.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 309, "filename": "local_set.23.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 317, "filename": "local_set.24.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 321, "filename": "local_set.25.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 325, "filename": "local_set.26.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 329, "filename": "local_set.27.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 337, "filename": "local_set.28.wasm", "text": "unknown local", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 341, "filename": "local_set.29.wasm", "text": "unknown local", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 346, "filename": "local_set.30.wasm", "text": "unknown local", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 350, "filename": "local_set.31.wasm", "text": "unknown local", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 355, "filename": "local_set.32.wasm", "text": "unknown local", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 359, "filename": "local_set.33.wasm", "text": "unknown local", "module_type": "binary"}]},
  "code": [
    "(module \n  (func (export \"type-local-i32\") (local i32) (local.set 0 (i32.const 0)))\n  (func (export \"type-local-i64\") (local i64) (local.set 0 (i64.const 0)))\n  (func (export \"type-local-f32\") (local f32) (local.set 0 (f32.const 0)))\n  (func (export \"type-local-f64\") (local f64) (local.set 0 (f64.const 0)))\n  (func (export \"type-param-i32\") (param i32) (local.set 0 (i32.const 10)))\n  (func (export \"type-param-i64\") (param i64) (local.set 0 (i64.const 11)))\n  (func (export \"type-param-f32\") (param f32) (local.set 0 (f32.const 11.1)))\n  (func (export \"type-param-f64\") (param f64) (local.set 0 (f64.const 12.2)))\n  (func (export \"type-mixed\") (param i64 f32 f64 i32 i32) (local f32 i64 i64 f64) (local.set 0 (i64.const 0)) (local.set 1 (f32.const 0)) (local.set 2 (f64.const 0)) (local.set 3 (i32.const 0)) (local.set 4 (i32.const 0)) (local.set 5 (f32.const 0)) (local.set 6 (i64.const 0)) (local.set 7 (i64.const 0)) (local.set 8 (f64.const 0)) )\n  (func (export \"write\") (param i64 f32 f64 i32 i32) (result i64) (local f32 i64 i64 f64) (local.set 1 (f32.const -0.3)) (local.set 3 (i32.const 40)) (local.set 4 (i32.const -7)) (local.set 5 (f32.const 5.5)) (local.set 6 (i64.const 6)) (local.set 8 (f64.const 8)) (i64.trunc_f64_s (f64.add (f64.convert_i64_u (local.get 0)) (f64.add (f64.promote_f32 (local.get 1)) (f64.add (local.get 2) (f64.add (f64.convert_i32_u (local.get 3)) (f64.add (f64.convert_i32_s (local.get 4)) (f64.add (f64.promote_f32 (local.get 5)) (f64.add (f64.convert_i64_u (local.get 6)) (f64.add (f64.convert_i64_u (local.get 7)) (local.get 8) ) ) ) ) ) ) ) ) ) )\n  (func (export \"as-block-value\") (param i32) (block (local.set 0 (i32.const 1))) )\n  (func (export \"as-loop-value\") (param i32) (loop (local.set 0 (i32.const 3))) )\n  (func (export \"as-br-value\") (param i32) (block (br 0 (local.set 0 (i32.const 9)))) )\n  (func (export \"as-br_if-value\") (param i32) (block (br_if 0 (local.set 0 (i32.const 8)) (i32.const 1)) ) )\n  (func (export \"as-br_if-value-cond\") (param i32) (block (br_if 0 (i32.const 6) (local.set 0 (i32.const 9))) ) )\n  (func (export \"as-br_table-value\") (param i32) (block (br_table 0 (local.set 0 (i32.const 10)) (i32.const 1)) ) )\n  (func (export \"as-return-value\") (param i32) (return (local.set 0 (i32.const 7))) )\n  (func (export \"as-if-then\") (param i32) (if (local.get 0) (then (local.set 0 (i32.const 3)))) )\n  (func (export \"as-if-else\") (param i32) (if (local.get 0) (then) (else (local.set 0 (i32.const 1)))) ))",
    "(assert_return (invoke \"type-local-i32\"))",
    "(assert_return (invoke \"type-local-i64\"))",
    "(assert_return (invoke \"type-local-f32\"))",
    "(assert_return (invoke \"type-local-f64\"))",
    "(assert_return (invoke \"type-param-i32\" (i32.const 2)))",
    "(assert_return (invoke \"type-param-i64\" (i64.const 3)))",
    "(assert_return (invoke \"type-param-f32\" (f32.const 4.4)))",
    "(assert_return (invoke \"type-param-f64\" (f64.const 5.5)))",
    "(assert_return (invoke \"as-block-value\" (i32.const 0)))",
    "(assert_return (invoke \"as-loop-value\" (i32.const 0)))",
    "(assert_return (invoke \"as-br-value\" (i32.const 0)))",
    "(assert_return (invoke \"as-br_if-value\" (i32.const 0)))",
    "(assert_return (invoke \"as-br_if-value-cond\" (i32.const 0)))",
    "(assert_return (invoke \"as-br_table-value\" (i32.const 0)))",
    "(assert_return (invoke \"as-return-value\" (i32.const 0)))",
    "(assert_return (invoke \"as-if-then\" (i32.const 1)))",
    "(assert_return (invoke \"as-if-else\" (i32.const 0)))",
    "(assert_return (invoke \"type-mixed\" (i64.const 1) (f32.const 2.2) (f64.const 3.3) (i32.const 4) (i32.const 5) ))",
    "(assert_return (invoke \"write\" (i64.const 1) (f32.const 2) (f64.const 3.3) (i32.const 4) (i32.const 5) ) (i64.const 56))",
    "(assert_invalid (module (func $type-local-arg-void-vs-num (local i32) (local.set 0 (nop)))) \"type mismatch\")",
    "(assert_invalid (module (func $type-local-arg-num-vs-num (local i32) (local.set 0 (f32.const 0)))) \"type mismatch\")",
    "(assert_invalid (module (func $type-local-arg-num-vs-num (local f32) (local.set 0 (f64.const 0)))) \"type mismatch\")",
    "(assert_invalid (module (func $type-local-arg-num-vs-num (local f64 i64) (local.set 1 (f64.const 0)))) \"type mismatch\")",
    "(assert_invalid (module (func $type-param-arg-void-vs-num (param i32) (local.set 0 (nop)))) \"type mismatch\")",
    "(assert_invalid (module (func $type-param-arg-num-vs-num (param i32) (local.set 0 (f32.const 0)))) \"type mismatch\")",
    "(assert_invalid (module (func $type-param-arg-num-vs-num (param f32) (local.set 0 (f64.const 0)))) \"type mismatch\")",
    "(assert_invalid (module (func $type-param-arg-num-vs-num (param f64 i64) (local.set 1 (f64.const 0)))) \"type mismatch\")",
    "(assert_invalid (module (func $type-param-arg-empty-vs-num (param i32) (local.set 0) ) ) \"type mismatch\")",
    "(assert_invalid (module (func $type-param-arg-empty-vs-num-in-block (param i32) (i32.const 0) (block (local.set 0)) ) ) \"type mismatch\")",
    "(assert_invalid (module (func $type-param-arg-empty-vs-num-in-loop (param i32) (i32.const 0) (loop (local.set 0)) ) ) \"type mismatch\")",
    "(assert_invalid (module (func $type-param-arg-empty-vs-num-in-then (param i32) (i32.const 0) (if (i32.const 1) (then (local.set 0))) ) ) \"type mismatch\")",
    "(assert_invalid (module (func $type-param-arg-empty-vs-num-in-else (param i32) (i32.const 0) (if (result i32) (i32.const 0) (then (i32.const 0)) (else (local.set 0))) ) ) \"type mismatch\")",
    "(assert_invalid (module (func $type-param-arg-empty-vs-num-in-br (param i32) (i32.const 0) (block (br 0 (local.set 0))) ) ) \"type mismatch\")",
    "(assert_invalid (module (func $type-param-arg-empty-vs-num-in-br_if (param i32) (i32.const 0) (block (br_if 0 (local.set 0))) ) ) \"type mismatch\")",
    "(assert_invalid (module (func $type-param-arg-empty-vs-num-in-br_table (param i32) (i32.const 0) (block (br_table 0 (local.set 0))) ) ) \"type mismatch\")",
    "(assert_invalid (module (func $type-param-arg-empty-vs-num-in-return (param i32) (return (local.set 0)) ) ) \"type mismatch\")",
    "(assert_invalid (module (func $type-param-arg-empty-vs-num-in-select (param i32) (select (local.set 0) (i32.const 1) (i32.const 2)) ) ) \"type mismatch\")",
    "(assert_invalid (module (func $type-param-arg-empty-vs-num-in-call (param i32) (call 1 (local.set 0)) ) (func (param i32) (result i32) (local.get 0)) ) \"type mismatch\")",
    "(assert_invalid (module (func $f (param i32) (result i32) (local.get 0)) (type $sig (func (param i32) (result i32))) (table funcref (elem $f)) (func $type-param-arg-empty-vs-num-in-call_indirect (param i32) (block (result i32) (call_indirect (type $sig) (local.set 0) (i32.const 0) ) ) ) ) \"type mismatch\")",
    "(assert_invalid (module (func $type-mixed-arg-num-vs-num (param f32) (local i32) (local.set 1 (f32.const 0)))) \"type mismatch\")",
    "(assert_invalid (module (func $type-mixed-arg-num-vs-num (param i64 i32) (local f32) (local.set 1 (f32.const 0)))) \"type mismatch\")",
    "(assert_invalid (module (func $type-mixed-arg-num-vs-num (param i64) (local f64 i64) (local.set 1 (i64.const 0)))) \"type mismatch\")",
    "(assert_invalid (module (func $type-empty-vs-i32 (param i32) (result i32) (local.set 0 (i32.const 1)))) \"type mismatch\")",
    "(assert_invalid (module (func $type-empty-vs-i64 (param i64) (result i64) (local.set 0 (i64.const 1)))) \"type mismatch\")",
    "(assert_invalid (module (func $type-empty-vs-f32 (param f32) (result f32) (local.set 0 (f32.const 1)))) \"type mismatch\")",
    "(assert_invalid (module (func $type-empty-vs-f64 (param f64) (result f64) (local.set 0 (f64.const 1)))) \"type mismatch\")",
    "(assert_invalid (module (func $unbound-local (local i32 i64) (local.set 3 (i32.const 0)))) \"unknown local\")",
    "(assert_invalid (module (func $large-local (local i32 i64) (local.set 14324343 (i32.const 0)))) \"unknown local\")",
    "(assert_invalid (module (func $unbound-param (param i32 i64) (local.set 2 (i32.const 0)))) \"unknown local\")",
    "(assert_invalid (module (func $large-param (param i32 i64) (local.set 714324343 (i32.const 0)))) \"unknown local\")",
    "(assert_invalid (module (func $unbound-mixed (param i32) (local i32 i64) (local.set 3 (i32.const 0)))) \"unknown local\")",
    "(assert_invalid (module (func $large-mixed (param i64) (local i32 i64) (local.set 214324343 (i32.const 0)))) \"unknown local\")"
  ],
  "dump": {
    "local_set.0.wasm": {
      "header": "\nlocal_set.0.wasm:\tfile format wasm 0x1\n\nSections:\n\n     Type start=0x0000000a end=0x0000002f (size=0x00000025) count: 7\n Function start=0x00000031 end=0x00000045 (size=0x00000014) count: 19\n   Export start=0x00000048 end=0x0000017c (size=0x00000134) count: 19\n     Code start=0x0000017f end=0x000002d1 (size=0x00000152) count: 19\n",
      "details": "\nlocal_set.0.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nType[7]:\n - type[0] () -> nil\n - type[1] (i32) -> nil\n - type[2] (i64) -> nil\n - type[3] (f32) -> nil\n - type[4] (f64) -> nil\n - type[5] (i64, f32, f64, i32, i32) -> nil\n - type[6] (i64, f32, f64, i32, i32) -> i64\nFunction[19]:\n - func[0] sig=0 <type-local-i32>\n - func[1] sig=0 <type-local-i64>\n - func[2] sig=0 <type-local-f32>\n - func[3] sig=0 <type-local-f64>\n - func[4] sig=1 <type-param-i32>\n - func[5] sig=2 <type-param-i64>\n - func[6] sig=3 <type-param-f32>\n - func[7] sig=4 <type-param-f64>\n - func[8] sig=5 <type-mixed>\n - func[9] sig=6 <write>\n - func[10] sig=1 <as-block-value>\n - func[11] sig=1 <as-loop-value>\n - func[12] sig=1 <as-br-value>\n - func[13] sig=1 <as-br_if-value>\n - func[14] sig=1 <as-br_if-value-cond>\n - func[15] sig=1 <as-br_table-value>\n - func[16] sig=1 <as-return-value>\n - func[17] sig=1 <as-if-then>\n - func[18] sig=1 <as-if-else>\nExport[19]:\n - func[0] <type-local-i32> -> \"type-local-i32\"\n - func[1] <type-local-i64> -> \"type-local-i64\"\n - func[2] <type-local-f32> -> \"type-local-f32\"\n - func[3] <type-local-f64> -> \"type-local-f64\"\n - func[4] <type-param-i32> -> \"type-param-i32\"\n - func[5] <type-param-i64> -> \"type-param-i64\"\n - func[6] <type-param-f32> -> \"type-param-f32\"\n - func[7] <type-param-f64> -> \"type-param-f64\"\n - func[8] <type-mixed> -> \"type-mixed\"\n - func[9] <write> -> \"write\"\n - func[10] <as-block-value> -> \"as-block-value\"\n - func[11] <as-loop-value> -> \"as-loop-value\"\n - func[12] <as-br-value> -> \"as-br-value\"\n - func[13] <as-br_if-value> -> \"as-br_if-value\"\n - func[14] <as-br_if-value-cond> -> \"as-br_if-value-cond\"\n - func[15] <as-br_table-value> -> \"as-br_table-value\"\n - func[16] <as-return-value> -> \"as-return-value\"\n - func[17] <as-if-then> -> \"as-if-then\"\n - func[18] <as-if-else> -> \"as-if-else\"\nCode[19]:\n - func[0] size=8 <type-local-i32>\n - func[1] size=8 <type-local-i64>\n - func[2] size=11 <type-local-f32>\n - func[3] size=15 <type-local-f64>\n - func[4] size=6 <type-param-i32>\n - func[5] size=6 <type-param-i64>\n - func[6] size=9 <type-param-f32>\n - func[7] size=13 <type-param-f64>\n - func[8] size=64 <type-mixed>\n - func[9] size=79 <write>\n - func[10] size=9 <as-block-value>\n - func[11] size=9 <as-loop-value>\n - func[12] size=11 <as-br-value>\n - func[13] size=13 <as-br_if-value>\n - func[14] size=13 <as-br_if-value-cond>\n - func[15] size=14 <as-br_table-value>\n - func[16] size=7 <as-return-value>\n - func[17] size=11 <as-if-then>\n - func[18] size=12 <as-if-else>\n",
      "disassemble": "\nlocal_set.0.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n000181 func[0] <type-local-i32>:\n 000182: 01 7f                      | local[0] type=i32\n 000184: 41 00                      | i32.const 0\n 000186: 21 00                      | local.set 0\n 000188: 0b                         | end\n00018a func[1] <type-local-i64>:\n 00018b: 01 7e                      | local[0] type=i64\n 00018d: 42 00                      | i64.const 0\n 00018f: 21 00                      | local.set 0\n 000191: 0b                         | end\n000193 func[2] <type-local-f32>:\n 000194: 01 7d                      | local[0] type=f32\n 000196: 43 00 00 00 00             | f32.const 0x0p+0\n 00019b: 21 00                      | local.set 0\n 00019d: 0b                         | end\n00019f func[3] <type-local-f64>:\n 0001a0: 01 7c                      | local[0] type=f64\n 0001a2: 44 00 00 00 00 00 00 00 00 | f64.const 0x0p+0\n 0001ab: 21 00                      | local.set 0\n 0001ad: 0b                         | end\n0001af func[4] <type-param-i32>:\n 0001b0: 41 0a                      | i32.const 10\n 0001b2: 21 00                      | local.set 0\n 0001b4: 0b                         | end\n0001b6 func[5] <type-param-i64>:\n 0001b7: 42 0b                      | i64.const 11\n 0001b9: 21 00                      | local.set 0\n 0001bb: 0b                         | end\n0001bd func[6] <type-param-f32>:\n 0001be: 43 9a 99 31 41             | f32.const 0x1.633334p+3\n 0001c3: 21 00                      | local.set 0\n 0001c5: 0b                         | end\n0001c7 func[7] <type-param-f64>:\n 0001c8: 44 66 66 66 66 66 66 28 40 | f64.const 0x1.8666666666666p+3\n 0001d1: 21 00                      | local.set 0\n 0001d3: 0b                         | end\n0001d5 func[8] <type-mixed>:\n 0001d6: 01 7d                      | local[0] type=f32\n 0001d8: 02 7e                      | local[1..2] type=i64\n 0001da: 01 7c                      | local[3] type=f64\n 0001dc: 42 00                      | i64.const 0\n 0001de: 21 00                      | local.set 0\n 0001e0: 43 00 00 00 00             | f32.const 0x0p+0\n 0001e5: 21 01                      | local.set 1\n 0001e7: 44 00 00 00 00 00 00 00 00 | f64.const 0x0p+0\n 0001f0: 21 02                      | local.set 2\n 0001f2: 41 00                      | i32.const 0\n 0001f4: 21 03                      | local.set 3\n 0001f6: 41 00                      | i32.const 0\n 0001f8: 21 04                      | local.set 4\n 0001fa: 43 00 00 00 00             | f32.const 0x0p+0\n 0001ff: 21 05                      | local.set 5\n 000201: 42 00                      | i64.const 0\n 000203: 21 06                      | local.set 6\n 000205: 42 00                      | i64.const 0\n 000207: 21 07                      | local.set 7\n 000209: 44 00 00 00 00 00 00 00 00 | f64.const 0x0p+0\n 000212: 21 08                      | local.set 8\n 000214: 0b                         | end\n000216 func[9] <write>:\n 000217: 01 7d                      | local[0] type=f32\n 000219: 02 7e                      | local[1..2] type=i64\n 00021b: 01 7c                      | local[3] type=f64\n 00021d: 43 9a 99 99 be             | f32.const -0x1.333334p-2\n 000222: 21 01                      | local.set 1\n 000224: 41 28                      | i32.const 40\n 000226: 21 03                      | local.set 3\n 000228: 41 79                      | i32.const 4294967289\n 00022a: 21 04                      | local.set 4\n 00022c: 43 00 00 b0 40             | f32.const 0x1.6p+2\n 000231: 21 05                      | local.set 5\n 000233: 42 06                      | i64.const 6\n 000235: 21 06                      | local.set 6\n 000237: 44 00 00 00 00 00 00 20 40 | f64.const 0x1p+3\n 000240: 21 08                      | local.set 8\n 000242: 20 00                      | local.get 0\n 000244: ba                         | f64.convert_i64_u\n 000245: 20 01                      | local.get 1\n 000247: bb                         | f64.promote_f32\n 000248: 20 02                      | local.get 2\n 00024a: 20 03                      | local.get 3\n 00024c: b8                         | f64.convert_i32_u\n 00024d: 20 04                      | local.get 4\n 00024f: b7                         | f64.convert_i32_s\n 000250: 20 05                      | local.get 5\n 000252: bb                         | f64.promote_f32\n 000253: 20 06                      | local.get 6\n 000255: ba                         | f64.convert_i64_u\n 000256: 20 07                      | local.get 7\n 000258: ba                         | f64.convert_i64_u\n 000259: 20 08                      | local.get 8\n 00025b: a0                         | f64.add\n 00025c: a0                         | f64.add\n 00025d: a0                         | f64.add\n 00025e: a0                         | f64.add\n 00025f: a0                         | f64.add\n 000260: a0                         | f64.add\n 000261: a0                         | f64.add\n 000262: a0                         | f64.add\n 000263: b0                         | i64.trunc_f64_s\n 000264: 0b                         | end\n000266 func[10] <as-block-value>:\n 000267: 02 40                      | block\n 000269: 41 01                      |   i32.const 1\n 00026b: 21 00                      |   local.set 0\n 00026d: 0b                         | end\n 00026e: 0b                         | end\n000270 func[11] <as-loop-value>:\n 000271: 03 40                      | loop\n 000273: 41 03                      |   i32.const 3\n 000275: 21 00                      |   local.set 0\n 000277: 0b                         | end\n 000278: 0b                         | end\n00027a func[12] <as-br-value>:\n 00027b: 02 40                      | block\n 00027d: 41 09                      |   i32.const 9\n 00027f: 21 00                      |   local.set 0\n 000281: 0c 00                      |   br 0\n 000283: 0b                         | end\n 000284: 0b                         | end\n000286 func[13] <as-br_if-value>:\n 000287: 02 40                      | block\n 000289: 41 08                      |   i32.const 8\n 00028b: 21 00                      |   local.set 0\n 00028d: 41 01                      |   i32.const 1\n 00028f: 0d 00                      |   br_if 0\n 000291: 0b                         | end\n 000292: 0b                         | end\n000294 func[14] <as-br_if-value-cond>:\n 000295: 02 40                      | block\n 000297: 41 06                      |   i32.const 6\n 000299: 41 09                      |   i32.const 9\n 00029b: 21 00                      |   local.set 0\n 00029d: 0d 00                      |   br_if 0\n 00029f: 0b                         | end\n 0002a0: 0b                         | end\n0002a2 func[15] <as-br_table-value>:\n 0002a3: 02 40                      | block\n 0002a5: 41 0a                      |   i32.const 10\n 0002a7: 21 00                      |   local.set 0\n 0002a9: 41 01                      |   i32.const 1\n 0002ab: 0e 00 00                   |   br_table 0\n 0002ae: 0b                         | end\n 0002af: 0b                         | end\n0002b1 func[16] <as-return-value>:\n 0002b2: 41 07                      | i32.const 7\n 0002b4: 21 00                      | local.set 0\n 0002b6: 0f                         | return\n 0002b7: 0b                         | end\n0002b9 func[17] <as-if-then>:\n 0002ba: 20 00                      | local.get 0\n 0002bc: 04 40                      | if\n 0002be: 41 03                      |   i32.const 3\n 0002c0: 21 00                      |   local.set 0\n 0002c2: 0b                         | end\n 0002c3: 0b                         | end\n0002c5 func[18] <as-if-else>:\n 0002c6: 20 00                      | local.get 0\n 0002c8: 04 40                      | if\n 0002ca: 05                         | else\n 0002cb: 41 01                      |   i32.const 1\n 0002cd: 21 00                      |   local.set 0\n 0002cf: 0b                         | end\n 0002d0: 0b                         | end\n"
    }
  }
}
