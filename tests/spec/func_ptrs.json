{
  "bin": {
    "func_ptrs.0.wasm": "AGFzbQEAAAABGwdgAABgAABgAABgAAF/YAABf2ABfwF/YAF/AAIWAQhzcGVjdGVzdAlwcmludF9pMzIABgMHBgABBAUFBgccBANvbmUAAwN0d28ABAV0aHJlZQAFBGZvdXIABgojBgIACwIACwQAQQ0LBwAgAEEBagsHACAAQQJrCwYAIAAQAAs=",
    "func_ptrs.1.wasm": "AGFzbQEAAAAJBgEAQQALAA==",
    "func_ptrs.2.wasm": "AGFzbQEAAAABBAFgAAADAgEACQcBAEEACwEACgQBAgAL",
    "func_ptrs.3.wasm": "AGFzbQEAAAAEBAFwAAEJBgEAQgALAA==",
    "func_ptrs.4.wasm": "AGFzbQEAAAAEBAFwAAEJBwEAQQBoCwA=",
    "func_ptrs.5.wasm": "AGFzbQEAAAAEBAFwAAEJBQEAAQsA",
    "func_ptrs.6.wasm": "AGFzbQEAAAADAgEqCgQBAgAL",
    "func_ptrs.7.wasm": "AGFzbQEAAAACFgEIc3BlY3Rlc3QJcHJpbnRfaTMyACs=",
    "func_ptrs.8.wasm": "AGFzbQEAAAABDgNgAAF/YAABf2ABfwF/AwgHAAAAAQECAgQFAXABBwcHEQIFY2FsbHQABQVjYWxsdQAGCQ0BAEEACwcAAQIDBAACCioHBABBAQsEAEECCwQAQQMLBABBBAsEAEEFCwcAIAARAAALBwAgABEBAAs=",
    "func_ptrs.9.wasm": "AGFzbQEAAAABCgJgAAF/YAF/AX8DBAMAAAEEBQFwAQICBwkBBWNhbGx0AAIJCAEAQQALAgABChMDBABBAQsEAEECCwcAIAARAAAL"
  },
  "spec": {"source_filename": "/home/rvagg/git/webassembly/spec/test/core/func_ptrs.wast",
 "commands": [
  {"type": "module", "line": 1, "filename": "func_ptrs.0.wasm"}, 
  {"type": "assert_return", "line": 27, "action": {"type": "invoke", "field": "one", "args": []}, "expected": [{"type": "i32", "value": "13"}]}, 
  {"type": "assert_return", "line": 28, "action": {"type": "invoke", "field": "two", "args": [{"type": "i32", "value": "13"}]}, "expected": [{"type": "i32", "value": "14"}]}, 
  {"type": "assert_return", "line": 29, "action": {"type": "invoke", "field": "three", "args": [{"type": "i32", "value": "13"}]}, "expected": [{"type": "i32", "value": "11"}]}, 
  {"type": "action", "line": 30, "action": {"type": "invoke", "field": "four", "args": [{"type": "i32", "value": "83"}]}, "expected": []}, 
  {"type": "assert_invalid", "line": 32, "filename": "func_ptrs.1.wasm", "text": "unknown table", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 33, "filename": "func_ptrs.2.wasm", "text": "unknown table", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 36, "filename": "func_ptrs.3.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 40, "filename": "func_ptrs.4.wasm", "text": "constant expression required", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 44, "filename": "func_ptrs.5.wasm", "text": "constant expression required", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 48, "filename": "func_ptrs.6.wasm", "text": "unknown type", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 49, "filename": "func_ptrs.7.wasm", "text": "unknown type", "module_type": "binary"}, 
  {"type": "module", "line": 51, "filename": "func_ptrs.8.wasm"}, 
  {"type": "assert_return", "line": 71, "action": {"type": "invoke", "field": "callt", "args": [{"type": "i32", "value": "0"}]}, "expected": [{"type": "i32", "value": "1"}]}, 
  {"type": "assert_return", "line": 72, "action": {"type": "invoke", "field": "callt", "args": [{"type": "i32", "value": "1"}]}, "expected": [{"type": "i32", "value": "2"}]}, 
  {"type": "assert_return", "line": 73, "action": {"type": "invoke", "field": "callt", "args": [{"type": "i32", "value": "2"}]}, "expected": [{"type": "i32", "value": "3"}]}, 
  {"type": "assert_return", "line": 74, "action": {"type": "invoke", "field": "callt", "args": [{"type": "i32", "value": "3"}]}, "expected": [{"type": "i32", "value": "4"}]}, 
  {"type": "assert_return", "line": 75, "action": {"type": "invoke", "field": "callt", "args": [{"type": "i32", "value": "4"}]}, "expected": [{"type": "i32", "value": "5"}]}, 
  {"type": "assert_return", "line": 76, "action": {"type": "invoke", "field": "callt", "args": [{"type": "i32", "value": "5"}]}, "expected": [{"type": "i32", "value": "1"}]}, 
  {"type": "assert_return", "line": 77, "action": {"type": "invoke", "field": "callt", "args": [{"type": "i32", "value": "6"}]}, "expected": [{"type": "i32", "value": "3"}]}, 
  {"type": "assert_trap", "line": 78, "action": {"type": "invoke", "field": "callt", "args": [{"type": "i32", "value": "7"}]}, "text": "undefined element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 79, "action": {"type": "invoke", "field": "callt", "args": [{"type": "i32", "value": "100"}]}, "text": "undefined element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 80, "action": {"type": "invoke", "field": "callt", "args": [{"type": "i32", "value": "4294967295"}]}, "text": "undefined element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_return", "line": 82, "action": {"type": "invoke", "field": "callu", "args": [{"type": "i32", "value": "0"}]}, "expected": [{"type": "i32", "value": "1"}]}, 
  {"type": "assert_return", "line": 83, "action": {"type": "invoke", "field": "callu", "args": [{"type": "i32", "value": "1"}]}, "expected": [{"type": "i32", "value": "2"}]}, 
  {"type": "assert_return", "line": 84, "action": {"type": "invoke", "field": "callu", "args": [{"type": "i32", "value": "2"}]}, "expected": [{"type": "i32", "value": "3"}]}, 
  {"type": "assert_return", "line": 85, "action": {"type": "invoke", "field": "callu", "args": [{"type": "i32", "value": "3"}]}, "expected": [{"type": "i32", "value": "4"}]}, 
  {"type": "assert_return", "line": 86, "action": {"type": "invoke", "field": "callu", "args": [{"type": "i32", "value": "4"}]}, "expected": [{"type": "i32", "value": "5"}]}, 
  {"type": "assert_return", "line": 87, "action": {"type": "invoke", "field": "callu", "args": [{"type": "i32", "value": "5"}]}, "expected": [{"type": "i32", "value": "1"}]}, 
  {"type": "assert_return", "line": 88, "action": {"type": "invoke", "field": "callu", "args": [{"type": "i32", "value": "6"}]}, "expected": [{"type": "i32", "value": "3"}]}, 
  {"type": "assert_trap", "line": 89, "action": {"type": "invoke", "field": "callu", "args": [{"type": "i32", "value": "7"}]}, "text": "undefined element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 90, "action": {"type": "invoke", "field": "callu", "args": [{"type": "i32", "value": "100"}]}, "text": "undefined element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 91, "action": {"type": "invoke", "field": "callu", "args": [{"type": "i32", "value": "4294967295"}]}, "text": "undefined element", "expected": [{"type": "i32"}]}, 
  {"type": "module", "line": 93, "filename": "func_ptrs.9.wasm"}, 
  {"type": "assert_return", "line": 105, "action": {"type": "invoke", "field": "callt", "args": [{"type": "i32", "value": "0"}]}, "expected": [{"type": "i32", "value": "1"}]}, 
  {"type": "assert_return", "line": 106, "action": {"type": "invoke", "field": "callt", "args": [{"type": "i32", "value": "1"}]}, "expected": [{"type": "i32", "value": "2"}]}]},
  "code": [
    "(module (type (func)) (type $S (func)) (type (func (param))) (type (func (result i32))) (type (func (param) (result i32))) (type $T (func (param i32) (result i32))) (type $U (func (param i32)))\n  (func $print (import \"spectest\" \"print_i32\") (type 6))\n  (func (type 0))\n  (func (type $S))\n  (func (export \"one\") (type 4) (i32.const 13))\n  (func (export \"two\") (type $T) (i32.add (local.get 0) (i32.const 1)))\n  (func (export \"three\") (type $T) (param $a i32) (result i32) (i32.sub (local.get 0) (i32.const 2)) )\n  (func (export \"four\") (type $U) (call $print (local.get 0))))",
    "(assert_return (invoke \"one\") (i32.const 13))",
    "(assert_return (invoke \"two\" (i32.const 13)) (i32.const 14))",
    "(assert_return (invoke \"three\" (i32.const 13)) (i32.const 11))",
    "(invoke \"four\" (i32.const 83))",
    "(assert_invalid (module (elem (i32.const 0))) \"unknown table\")",
    "(assert_invalid (module (elem (i32.const 0) 0) (func)) \"unknown table\")",
    "(assert_invalid (module (table 1 funcref) (elem (i64.const 0))) \"type mismatch\")",
    "(assert_invalid (module (table 1 funcref) (elem (i32.ctz (i32.const 0)))) \"constant expression required\")",
    "(assert_invalid (module (table 1 funcref) (elem (nop))) \"constant expression required\")",
    "(assert_invalid (module (func (type 42))) \"unknown type\")",
    "(assert_invalid (module (import \"spectest\" \"print_i32\" (func (type 43)))) \"unknown type\")",
    "(module (type $T (func (param) (result i32))) (type $U (func (param) (result i32))) (table funcref (elem $t1 $t2 $t3 $u1 $u2 $t1 $t3))\n  (func $t1 (type $T) (i32.const 1))\n  (func $t2 (type $T) (i32.const 2))\n  (func $t3 (type $T) (i32.const 3))\n  (func $u1 (type $U) (i32.const 4))\n  (func $u2 (type $U) (i32.const 5))\n  (func (export \"callt\") (param $i i32) (result i32) (call_indirect (type $T) (local.get $i)) )\n  (func (export \"callu\") (param $i i32) (result i32) (call_indirect (type $U) (local.get $i)) ))",
    "(assert_return (invoke \"callt\" (i32.const 0)) (i32.const 1))",
    "(assert_return (invoke \"callt\" (i32.const 1)) (i32.const 2))",
    "(assert_return (invoke \"callt\" (i32.const 2)) (i32.const 3))",
    "(assert_return (invoke \"callt\" (i32.const 3)) (i32.const 4))",
    "(assert_return (invoke \"callt\" (i32.const 4)) (i32.const 5))",
    "(assert_return (invoke \"callt\" (i32.const 5)) (i32.const 1))",
    "(assert_return (invoke \"callt\" (i32.const 6)) (i32.const 3))",
    "(assert_trap (invoke \"callt\" (i32.const 7)) \"undefined element\")",
    "(assert_trap (invoke \"callt\" (i32.const 100)) \"undefined element\")",
    "(assert_trap (invoke \"callt\" (i32.const -1)) \"undefined element\")",
    "(assert_return (invoke \"callu\" (i32.const 0)) (i32.const 1))",
    "(assert_return (invoke \"callu\" (i32.const 1)) (i32.const 2))",
    "(assert_return (invoke \"callu\" (i32.const 2)) (i32.const 3))",
    "(assert_return (invoke \"callu\" (i32.const 3)) (i32.const 4))",
    "(assert_return (invoke \"callu\" (i32.const 4)) (i32.const 5))",
    "(assert_return (invoke \"callu\" (i32.const 5)) (i32.const 1))",
    "(assert_return (invoke \"callu\" (i32.const 6)) (i32.const 3))",
    "(assert_trap (invoke \"callu\" (i32.const 7)) \"undefined element\")",
    "(assert_trap (invoke \"callu\" (i32.const 100)) \"undefined element\")",
    "(assert_trap (invoke \"callu\" (i32.const -1)) \"undefined element\")",
    "(module (type $T (func (result i32))) (table funcref (elem 0 1))\n  (func $t1 (type $T) (i32.const 1))\n  (func $t2 (type $T) (i32.const 2))\n  (func (export \"callt\") (param $i i32) (result i32) (call_indirect (type $T) (local.get $i)) ))",
    "(assert_return (invoke \"callt\" (i32.const 0)) (i32.const 1))",
    "(assert_return (invoke \"callt\" (i32.const 1)) (i32.const 2))"
  ],
  "dump": {
    "func_ptrs.0.wasm": {
      "header": "\nfunc_ptrs.0.wasm:\tfile format wasm 0x1\n\nSections:\n\n     Type start=0x0000000a end=0x00000025 (size=0x0000001b) count: 7\n   Import start=0x00000027 end=0x0000003d (size=0x00000016) count: 1\n Function start=0x0000003f end=0x00000046 (size=0x00000007) count: 6\n   Export start=0x00000048 end=0x00000064 (size=0x0000001c) count: 4\n     Code start=0x00000066 end=0x00000089 (size=0x00000023) count: 6\n",
      "details": "\nfunc_ptrs.0.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nType[7]:\n - type[0] () -> nil\n - type[1] () -> nil\n - type[2] () -> nil\n - type[3] () -> i32\n - type[4] () -> i32\n - type[5] (i32) -> i32\n - type[6] (i32) -> nil\nImport[1]:\n - func[0] sig=6 <spectest.print_i32> <- spectest.print_i32\nFunction[6]:\n - func[1] sig=0\n - func[2] sig=1\n - func[3] sig=4 <one>\n - func[4] sig=5 <two>\n - func[5] sig=5 <three>\n - func[6] sig=6 <four>\nExport[4]:\n - func[3] <one> -> \"one\"\n - func[4] <two> -> \"two\"\n - func[5] <three> -> \"three\"\n - func[6] <four> -> \"four\"\nCode[6]:\n - func[1] size=2\n - func[2] size=2\n - func[3] size=4 <one>\n - func[4] size=7 <two>\n - func[5] size=7 <three>\n - func[6] size=6 <four>\n",
      "disassemble": "\nfunc_ptrs.0.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n000068 func[1]:\n 000069: 0b                         | end\n00006b func[2]:\n 00006c: 0b                         | end\n00006e func[3] <one>:\n 00006f: 41 0d                      | i32.const 13\n 000071: 0b                         | end\n000073 func[4] <two>:\n 000074: 20 00                      | local.get 0\n 000076: 41 01                      | i32.const 1\n 000078: 6a                         | i32.add\n 000079: 0b                         | end\n00007b func[5] <three>:\n 00007c: 20 00                      | local.get 0\n 00007e: 41 02                      | i32.const 2\n 000080: 6b                         | i32.sub\n 000081: 0b                         | end\n000083 func[6] <four>:\n 000084: 20 00                      | local.get 0\n 000086: 10 00                      | call 0 <spectest.print_i32>\n 000088: 0b                         | end\n"
    },
    "func_ptrs.8.wasm": {
      "header": "\nfunc_ptrs.8.wasm:\tfile format wasm 0x1\n\nSections:\n\n     Type start=0x0000000a end=0x00000018 (size=0x0000000e) count: 3\n Function start=0x0000001a end=0x00000022 (size=0x00000008) count: 7\n    Table start=0x00000024 end=0x00000029 (size=0x00000005) count: 1\n   Export start=0x0000002b end=0x0000003c (size=0x00000011) count: 2\n     Elem start=0x0000003e end=0x0000004b (size=0x0000000d) count: 1\n     Code start=0x0000004d end=0x00000077 (size=0x0000002a) count: 7\n",
      "details": "\nfunc_ptrs.8.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nType[3]:\n - type[0] () -> i32\n - type[1] () -> i32\n - type[2] (i32) -> i32\nFunction[7]:\n - func[0] sig=0\n - func[1] sig=0\n - func[2] sig=0\n - func[3] sig=1\n - func[4] sig=1\n - func[5] sig=2 <callt>\n - func[6] sig=2 <callu>\nTable[1]:\n - table[0] type=funcref initial=7 max=7\nExport[2]:\n - func[5] <callt> -> \"callt\"\n - func[6] <callu> -> \"callu\"\nElem[1]:\n - segment[0] flags=0 table=0 count=7 - init i32=0\n  - elem[0] = ref.func:0\n  - elem[1] = ref.func:1\n  - elem[2] = ref.func:2\n  - elem[3] = ref.func:3\n  - elem[4] = ref.func:4\n  - elem[5] = ref.func:0\n  - elem[6] = ref.func:2\nCode[7]:\n - func[0] size=4\n - func[1] size=4\n - func[2] size=4\n - func[3] size=4\n - func[4] size=4\n - func[5] size=7 <callt>\n - func[6] size=7 <callu>\n",
      "disassemble": "\nfunc_ptrs.8.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n00004f func[0]:\n 000050: 41 01                      | i32.const 1\n 000052: 0b                         | end\n000054 func[1]:\n 000055: 41 02                      | i32.const 2\n 000057: 0b                         | end\n000059 func[2]:\n 00005a: 41 03                      | i32.const 3\n 00005c: 0b                         | end\n00005e func[3]:\n 00005f: 41 04                      | i32.const 4\n 000061: 0b                         | end\n000063 func[4]:\n 000064: 41 05                      | i32.const 5\n 000066: 0b                         | end\n000068 func[5] <callt>:\n 000069: 20 00                      | local.get 0\n 00006b: 11 00 00                   | call_indirect 0 (type 0)\n 00006e: 0b                         | end\n000070 func[6] <callu>:\n 000071: 20 00                      | local.get 0\n 000073: 11 01 00                   | call_indirect 0 (type 1)\n 000076: 0b                         | end\n"
    },
    "func_ptrs.9.wasm": {
      "header": "\nfunc_ptrs.9.wasm:\tfile format wasm 0x1\n\nSections:\n\n     Type start=0x0000000a end=0x00000014 (size=0x0000000a) count: 2\n Function start=0x00000016 end=0x0000001a (size=0x00000004) count: 3\n    Table start=0x0000001c end=0x00000021 (size=0x00000005) count: 1\n   Export start=0x00000023 end=0x0000002c (size=0x00000009) count: 1\n     Elem start=0x0000002e end=0x00000036 (size=0x00000008) count: 1\n     Code start=0x00000038 end=0x0000004b (size=0x00000013) count: 3\n",
      "details": "\nfunc_ptrs.9.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nType[2]:\n - type[0] () -> i32\n - type[1] (i32) -> i32\nFunction[3]:\n - func[0] sig=0\n - func[1] sig=0\n - func[2] sig=1 <callt>\nTable[1]:\n - table[0] type=funcref initial=2 max=2\nExport[1]:\n - func[2] <callt> -> \"callt\"\nElem[1]:\n - segment[0] flags=0 table=0 count=2 - init i32=0\n  - elem[0] = ref.func:0\n  - elem[1] = ref.func:1\nCode[3]:\n - func[0] size=4\n - func[1] size=4\n - func[2] size=7 <callt>\n",
      "disassemble": "\nfunc_ptrs.9.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n00003a func[0]:\n 00003b: 41 01                      | i32.const 1\n 00003d: 0b                         | end\n00003f func[1]:\n 000040: 41 02                      | i32.const 2\n 000042: 0b                         | end\n000044 func[2] <callt>:\n 000045: 20 00                      | local.get 0\n 000047: 11 00 00                   | call_indirect 0 (type 0)\n 00004a: 0b                         | end\n"
    }
  }
}
