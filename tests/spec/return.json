{
  "bin": {
    "return.0.wasm": "AGFzbQEAAAABIQdgA39/fwF/YAAAYAABf2AAAX5gAAF9YAABfGACf38BfwM+PQEBAQEBAgMEBQEFAgIBAgEBAQICAgICAQICAwICAwIGBgYGAgACAgICAgICAgICBAMCAgICBAIDAgICAgIEBQFwAQEBBQMBAAEGBgF/AUEACwf4BzsIdHlwZS1pMzIAAQh0eXBlLWk2NAACCHR5cGUtZjMyAAMIdHlwZS1mNjQABA50eXBlLWkzMi12YWx1ZQAFDnR5cGUtaTY0LXZhbHVlAAYOdHlwZS1mMzItdmFsdWUABw50eXBlLWY2NC12YWx1ZQAIB251bGxhcnkACQV1bmFyeQAKDWFzLWZ1bmMtZmlyc3QACwthcy1mdW5jLW1pZAAMDGFzLWZ1bmMtbGFzdAANDWFzLWZ1bmMtdmFsdWUADg5hcy1ibG9jay1maXJzdAAPDGFzLWJsb2NrLW1pZAAQDWFzLWJsb2NrLWxhc3QAEQ5hcy1ibG9jay12YWx1ZQASDWFzLWxvb3AtZmlyc3QAEwthcy1sb29wLW1pZAAUDGFzLWxvb3AtbGFzdAAVC2FzLWJyLXZhbHVlABYNYXMtYnJfaWYtY29uZAAXDmFzLWJyX2lmLXZhbHVlABgTYXMtYnJfaWYtdmFsdWUtY29uZAAZEWFzLWJyX3RhYmxlLWluZGV4ABoRYXMtYnJfdGFibGUtdmFsdWUAGxdhcy1icl90YWJsZS12YWx1ZS1pbmRleAAcD2FzLXJldHVybi12YWx1ZQAdCmFzLWlmLWNvbmQAHgphcy1pZi10aGVuAB8KYXMtaWYtZWxzZQAgD2FzLXNlbGVjdC1maXJzdAAhEGFzLXNlbGVjdC1zZWNvbmQAIg5hcy1zZWxlY3QtY29uZAAjDWFzLWNhbGwtZmlyc3QAJQthcy1jYWxsLW1pZAAmDGFzLWNhbGwtbGFzdAAnFWFzLWNhbGxfaW5kaXJlY3QtZnVuYwAoFmFzLWNhbGxfaW5kaXJlY3QtZmlyc3QAKRRhcy1jYWxsX2luZGlyZWN0LW1pZAAqFWFzLWNhbGxfaW5kaXJlY3QtbGFzdAArEmFzLWxvY2FsLnNldC12YWx1ZQAsEmFzLWxvY2FsLnRlZS12YWx1ZQAtE2FzLWdsb2JhbC5zZXQtdmFsdWUALg9hcy1sb2FkLWFkZHJlc3MALxBhcy1sb2FkTi1hZGRyZXNzADAQYXMtc3RvcmUtYWRkcmVzcwAxDmFzLXN0b3JlLXZhbHVlADIRYXMtc3RvcmVOLWFkZHJlc3MAMw9hcy1zdG9yZU4tdmFsdWUANBBhcy11bmFyeS1vcGVyYW5kADUOYXMtYmluYXJ5LWxlZnQANg9hcy1iaW5hcnktcmlnaHQANw9hcy10ZXN0LW9wZXJhbmQAOA9hcy1jb21wYXJlLWxlZnQAORBhcy1jb21wYXJlLXJpZ2h0ADoSYXMtY29udmVydC1vcGVyYW5kADsTYXMtbWVtb3J5Lmdyb3ctc2l6ZQA8CQcBAEEACwEkCqkFPQIACwUAD2gaCwUAD3oaCwUAD4waCwUAD5oaCwkAAn9BAQ9oCwsJAAJ+QgIPegsLDAACfUMAAEBAD4wLCxAAAnxEAAAAAAAAEEAPmgsLAwAPCwwARAAAAAAAAAhADwsHAEEBD0ECCwkAEABBAg9BAwsGAAEQAA8LCAABEABBAw8LCAACQA8QAAsLCgACQBAADxAACwsJAAJAARAADwsLCwACfwEQAEECDwsLCgADf0EDD0ECCwsMAAN/EABBBA9BAgsLCwADfwEQAEEFDwsLCgACf0EJDwwACwsIAAJADw0ACwsPAAJ/QQgPQQENABpBBwsLDwACf0EGQQkPDQAaQQcLCw8AAkBCCQ8OAgAAAAtCfwsRAAJ/QQoPQQEOAgAAAEEHCwsQAAJ/QQZBCw8OAQAAQQcLCwYAQgcPDwsNAEECDwR/QQAFQQELCw0AIAAEf0EDDwUgAQsLDQAgAAR/IAEFQQQPCwsKAEEFDyAAIAEbCwoAIABBBg8gARsLCgBBAEEBQQcPGwsEAEF/CwsAQQwPQQJBAxAkCwsAQQFBDQ9BAxAkCwsAQQFBAkEODxAkCw4AQRQPQQFBAkEDEQAACw4AQQBBFQ9BAkEDEQAACw4AQQBBAUEWD0EDEQAACw4AQQBBAUECQRcPEQAACwsBAX1BEQ8hAEF/CwkBAX9BAQ8iAAsHAEEBDyQACwsAQ5qZ2T8PKgIACwgAQh4PMAAACxMAQR4PRAAAAAAAABxAOQMAQX8LDABBAkEfDzcDAEF/CwwAQSAPQQc6AABBfwsMAEECQSEPPQEAQX8LCQBDmplZQA+MCwgAQQMPQQpqCwgAQgpCLQ99CwYAQSwPRQsPAEErD0QAAAAAAAAkQGULCwBDAAAgQUEqD1wLBgBBKQ+nCwcAQSgPQAAL",
    "return.1.wasm": "AGFzbQEAAAABBQFgAAF/AwIBAAoFAQMADws=",
    "return.10.wasm": "AGFzbQEAAAABBQFgAAF/AwIBAAoKAQgAD0EBQQIbCw==",
    "return.11.wasm": "AGFzbQEAAAABCgJgAAF/YAF/AX8DAwIAAQoMAgUADxABCwQAIAAL",
    "return.12.wasm": "AGFzbQEAAAABCgJgAX8Bf2AAAX8DAwIAAQQFAXABAQEJBwEAQQALAQAKEgIEACAACwsAAn8PQQARAAALCw==",
    "return.13.wasm": "AGFzbQEAAAABBQFgAAF/AwIBAAoLAQkBAX8PIQAgAAs=",
    "return.14.wasm": "AGFzbQEAAAABBQFgAAF/AwIBAAoJAQcBAX8PIgAL",
    "return.15.wasm": "AGFzbQEAAAABBQFgAAF/AwIBAAYGAX8BQQALCgkBBwAPJAAjAAs=",
    "return.16.wasm": "AGFzbQEAAAABBQFgAAF/AwIBAAUDAQAACgcBBQAPQAAL",
    "return.17.wasm": "AGFzbQEAAAABBQFgAAF/AwIBAAUDAQAACggBBgAPKAIACw==",
    "return.18.wasm": "AGFzbQEAAAABBQFgAAF/AwIBAAUDAQABCgoBCAAPQQE2AgAL",
    "return.19.wasm": "AGFzbQEAAAABBQFgAAF8AwIBAAoGAQQAAQ8L",
    "return.2.wasm": "AGFzbQEAAAABBQFgAAF/AwIBAAoKAQgAQQACQA8LCw==",
    "return.20.wasm": "AGFzbQEAAAABBQFgAAF8AwIBAAoHAQUAQgEPCw==",
    "return.3.wasm": "AGFzbQEAAAABBQFgAAF/AwIBAAoKAQgAQQADQA8LCw==",
    "return.4.wasm": "AGFzbQEAAAABBQFgAAF/AwIBAAoMAQoAQQBBAARADwsL",
    "return.5.wasm": "AGFzbQEAAAABBQFgAAF/AwIBAAoQAQ4AQQBBAAR/QQAFDwsaCw==",
    "return.6.wasm": "AGFzbQEAAAABBQFgAAF/AwIBAAoMAQoAQQACQA8MAAsL",
    "return.7.wasm": "AGFzbQEAAAABBQFgAAF/AwIBAAoOAQwAQQACQA9BAQ0ACws=",
    "return.8.wasm": "AGFzbQEAAAABBQFgAAF/AwIBAAoNAQsAQQACQA8OAAALCw==",
    "return.9.wasm": "AGFzbQEAAAABBQFgAAF/AwIBAAoGAQQADw8L"
  },
  "spec": {"source_filename": "/workspace/wasm-spec/test/core/return.wast",
 "commands": [
  {"type": "module", "line": 3, "filename": "return.0.wasm"}, 
  {"type": "assert_return", "line": 224, "action": {"type": "invoke", "field": "type-i32", "args": []}, "expected": []}, 
  {"type": "assert_return", "line": 225, "action": {"type": "invoke", "field": "type-i64", "args": []}, "expected": []}, 
  {"type": "assert_return", "line": 226, "action": {"type": "invoke", "field": "type-f32", "args": []}, "expected": []}, 
  {"type": "assert_return", "line": 227, "action": {"type": "invoke", "field": "type-f64", "args": []}, "expected": []}, 
  {"type": "assert_return", "line": 229, "action": {"type": "invoke", "field": "type-i32-value", "args": []}, "expected": [{"type": "i32", "value": "1"}]}, 
  {"type": "assert_return", "line": 230, "action": {"type": "invoke", "field": "type-i64-value", "args": []}, "expected": [{"type": "i64", "value": "2"}]}, 
  {"type": "assert_return", "line": 231, "action": {"type": "invoke", "field": "type-f32-value", "args": []}, "expected": [{"type": "f32", "value": "1077936128"}]}, 
  {"type": "assert_return", "line": 232, "action": {"type": "invoke", "field": "type-f64-value", "args": []}, "expected": [{"type": "f64", "value": "4616189618054758400"}]}, 
  {"type": "assert_return", "line": 234, "action": {"type": "invoke", "field": "nullary", "args": []}, "expected": []}, 
  {"type": "assert_return", "line": 235, "action": {"type": "invoke", "field": "unary", "args": []}, "expected": [{"type": "f64", "value": "4613937818241073152"}]}, 
  {"type": "assert_return", "line": 237, "action": {"type": "invoke", "field": "as-func-first", "args": []}, "expected": [{"type": "i32", "value": "1"}]}, 
  {"type": "assert_return", "line": 238, "action": {"type": "invoke", "field": "as-func-mid", "args": []}, "expected": [{"type": "i32", "value": "2"}]}, 
  {"type": "assert_return", "line": 239, "action": {"type": "invoke", "field": "as-func-last", "args": []}, "expected": []}, 
  {"type": "assert_return", "line": 240, "action": {"type": "invoke", "field": "as-func-value", "args": []}, "expected": [{"type": "i32", "value": "3"}]}, 
  {"type": "assert_return", "line": 242, "action": {"type": "invoke", "field": "as-block-first", "args": []}, "expected": []}, 
  {"type": "assert_return", "line": 243, "action": {"type": "invoke", "field": "as-block-mid", "args": []}, "expected": []}, 
  {"type": "assert_return", "line": 244, "action": {"type": "invoke", "field": "as-block-last", "args": []}, "expected": []}, 
  {"type": "assert_return", "line": 245, "action": {"type": "invoke", "field": "as-block-value", "args": []}, "expected": [{"type": "i32", "value": "2"}]}, 
  {"type": "assert_return", "line": 247, "action": {"type": "invoke", "field": "as-loop-first", "args": []}, "expected": [{"type": "i32", "value": "3"}]}, 
  {"type": "assert_return", "line": 248, "action": {"type": "invoke", "field": "as-loop-mid", "args": []}, "expected": [{"type": "i32", "value": "4"}]}, 
  {"type": "assert_return", "line": 249, "action": {"type": "invoke", "field": "as-loop-last", "args": []}, "expected": [{"type": "i32", "value": "5"}]}, 
  {"type": "assert_return", "line": 251, "action": {"type": "invoke", "field": "as-br-value", "args": []}, "expected": [{"type": "i32", "value": "9"}]}, 
  {"type": "assert_return", "line": 253, "action": {"type": "invoke", "field": "as-br_if-cond", "args": []}, "expected": []}, 
  {"type": "assert_return", "line": 254, "action": {"type": "invoke", "field": "as-br_if-value", "args": []}, "expected": [{"type": "i32", "value": "8"}]}, 
  {"type": "assert_return", "line": 255, "action": {"type": "invoke", "field": "as-br_if-value-cond", "args": []}, "expected": [{"type": "i32", "value": "9"}]}, 
  {"type": "assert_return", "line": 257, "action": {"type": "invoke", "field": "as-br_table-index", "args": []}, "expected": [{"type": "i64", "value": "9"}]}, 
  {"type": "assert_return", "line": 258, "action": {"type": "invoke", "field": "as-br_table-value", "args": []}, "expected": [{"type": "i32", "value": "10"}]}, 
  {"type": "assert_return", "line": 259, "action": {"type": "invoke", "field": "as-br_table-value-index", "args": []}, "expected": [{"type": "i32", "value": "11"}]}, 
  {"type": "assert_return", "line": 261, "action": {"type": "invoke", "field": "as-return-value", "args": []}, "expected": [{"type": "i64", "value": "7"}]}, 
  {"type": "assert_return", "line": 263, "action": {"type": "invoke", "field": "as-if-cond", "args": []}, "expected": [{"type": "i32", "value": "2"}]}, 
  {"type": "assert_return", "line": 264, "action": {"type": "invoke", "field": "as-if-then", "args": [{"type": "i32", "value": "1"}, {"type": "i32", "value": "6"}]}, "expected": [{"type": "i32", "value": "3"}]}, 
  {"type": "assert_return", "line": 265, "action": {"type": "invoke", "field": "as-if-then", "args": [{"type": "i32", "value": "0"}, {"type": "i32", "value": "6"}]}, "expected": [{"type": "i32", "value": "6"}]}, 
  {"type": "assert_return", "line": 266, "action": {"type": "invoke", "field": "as-if-else", "args": [{"type": "i32", "value": "0"}, {"type": "i32", "value": "6"}]}, "expected": [{"type": "i32", "value": "4"}]}, 
  {"type": "assert_return", "line": 267, "action": {"type": "invoke", "field": "as-if-else", "args": [{"type": "i32", "value": "1"}, {"type": "i32", "value": "6"}]}, "expected": [{"type": "i32", "value": "6"}]}, 
  {"type": "assert_return", "line": 269, "action": {"type": "invoke", "field": "as-select-first", "args": [{"type": "i32", "value": "0"}, {"type": "i32", "value": "6"}]}, "expected": [{"type": "i32", "value": "5"}]}, 
  {"type": "assert_return", "line": 270, "action": {"type": "invoke", "field": "as-select-first", "args": [{"type": "i32", "value": "1"}, {"type": "i32", "value": "6"}]}, "expected": [{"type": "i32", "value": "5"}]}, 
  {"type": "assert_return", "line": 271, "action": {"type": "invoke", "field": "as-select-second", "args": [{"type": "i32", "value": "0"}, {"type": "i32", "value": "6"}]}, "expected": [{"type": "i32", "value": "6"}]}, 
  {"type": "assert_return", "line": 272, "action": {"type": "invoke", "field": "as-select-second", "args": [{"type": "i32", "value": "1"}, {"type": "i32", "value": "6"}]}, "expected": [{"type": "i32", "value": "6"}]}, 
  {"type": "assert_return", "line": 273, "action": {"type": "invoke", "field": "as-select-cond", "args": []}, "expected": [{"type": "i32", "value": "7"}]}, 
  {"type": "assert_return", "line": 275, "action": {"type": "invoke", "field": "as-call-first", "args": []}, "expected": [{"type": "i32", "value": "12"}]}, 
  {"type": "assert_return", "line": 276, "action": {"type": "invoke", "field": "as-call-mid", "args": []}, "expected": [{"type": "i32", "value": "13"}]}, 
  {"type": "assert_return", "line": 277, "action": {"type": "invoke", "field": "as-call-last", "args": []}, "expected": [{"type": "i32", "value": "14"}]}, 
  {"type": "assert_return", "line": 279, "action": {"type": "invoke", "field": "as-call_indirect-func", "args": []}, "expected": [{"type": "i32", "value": "20"}]}, 
  {"type": "assert_return", "line": 280, "action": {"type": "invoke", "field": "as-call_indirect-first", "args": []}, "expected": [{"type": "i32", "value": "21"}]}, 
  {"type": "assert_return", "line": 281, "action": {"type": "invoke", "field": "as-call_indirect-mid", "args": []}, "expected": [{"type": "i32", "value": "22"}]}, 
  {"type": "assert_return", "line": 282, "action": {"type": "invoke", "field": "as-call_indirect-last", "args": []}, "expected": [{"type": "i32", "value": "23"}]}, 
  {"type": "assert_return", "line": 284, "action": {"type": "invoke", "field": "as-local.set-value", "args": []}, "expected": [{"type": "i32", "value": "17"}]}, 
  {"type": "assert_return", "line": 285, "action": {"type": "invoke", "field": "as-local.tee-value", "args": []}, "expected": [{"type": "i32", "value": "1"}]}, 
  {"type": "assert_return", "line": 286, "action": {"type": "invoke", "field": "as-global.set-value", "args": []}, "expected": [{"type": "i32", "value": "1"}]}, 
  {"type": "assert_return", "line": 288, "action": {"type": "invoke", "field": "as-load-address", "args": []}, "expected": [{"type": "f32", "value": "1071225242"}]}, 
  {"type": "assert_return", "line": 289, "action": {"type": "invoke", "field": "as-loadN-address", "args": []}, "expected": [{"type": "i64", "value": "30"}]}, 
  {"type": "assert_return", "line": 291, "action": {"type": "invoke", "field": "as-store-address", "args": []}, "expected": [{"type": "i32", "value": "30"}]}, 
  {"type": "assert_return", "line": 292, "action": {"type": "invoke", "field": "as-store-value", "args": []}, "expected": [{"type": "i32", "value": "31"}]}, 
  {"type": "assert_return", "line": 293, "action": {"type": "invoke", "field": "as-storeN-address", "args": []}, "expected": [{"type": "i32", "value": "32"}]}, 
  {"type": "assert_return", "line": 294, "action": {"type": "invoke", "field": "as-storeN-value", "args": []}, "expected": [{"type": "i32", "value": "33"}]}, 
  {"type": "assert_return", "line": 296, "action": {"type": "invoke", "field": "as-unary-operand", "args": []}, "expected": [{"type": "f32", "value": "1079613850"}]}, 
  {"type": "assert_return", "line": 298, "action": {"type": "invoke", "field": "as-binary-left", "args": []}, "expected": [{"type": "i32", "value": "3"}]}, 
  {"type": "assert_return", "line": 299, "action": {"type": "invoke", "field": "as-binary-right", "args": []}, "expected": [{"type": "i64", "value": "45"}]}, 
  {"type": "assert_return", "line": 301, "action": {"type": "invoke", "field": "as-test-operand", "args": []}, "expected": [{"type": "i32", "value": "44"}]}, 
  {"type": "assert_return", "line": 303, "action": {"type": "invoke", "field": "as-compare-left", "args": []}, "expected": [{"type": "i32", "value": "43"}]}, 
  {"type": "assert_return", "line": 304, "action": {"type": "invoke", "field": "as-compare-right", "args": []}, "expected": [{"type": "i32", "value": "42"}]}, 
  {"type": "assert_return", "line": 306, "action": {"type": "invoke", "field": "as-convert-operand", "args": []}, "expected": [{"type": "i32", "value": "41"}]}, 
  {"type": "assert_return", "line": 308, "action": {"type": "invoke", "field": "as-memory.grow-size", "args": []}, "expected": [{"type": "i32", "value": "40"}]}, 
  {"type": "assert_invalid", "line": 311, "filename": "return.1.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 315, "filename": "return.2.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 324, "filename": "return.3.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 333, "filename": "return.4.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 342, "filename": "return.5.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 351, "filename": "return.6.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 360, "filename": "return.7.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 369, "filename": "return.8.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 378, "filename": "return.9.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 386, "filename": "return.10.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 394, "filename": "return.11.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 403, "filename": "return.12.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 418, "filename": "return.13.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 427, "filename": "return.14.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 436, "filename": "return.15.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 445, "filename": "return.16.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 454, "filename": "return.17.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 463, "filename": "return.18.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 472, "filename": "return.19.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 476, "filename": "return.20.wasm", "text": "type mismatch", "module_type": "binary"}]},
  "code": [
    "(module \n  (func $dummy)\n  (func (export \"type-i32\") (drop (i32.ctz (return))))\n  (func (export \"type-i64\") (drop (i64.ctz (return))))\n  (func (export \"type-f32\") (drop (f32.neg (return))))\n  (func (export \"type-f64\") (drop (f64.neg (return))))\n  (func (export \"type-i32-value\") (result i32) (block (result i32) (i32.ctz (return (i32.const 1)))) )\n  (func (export \"type-i64-value\") (result i64) (block (result i64) (i64.ctz (return (i64.const 2)))) )\n  (func (export \"type-f32-value\") (result f32) (block (result f32) (f32.neg (return (f32.const 3)))) )\n  (func (export \"type-f64-value\") (result f64) (block (result f64) (f64.neg (return (f64.const 4)))) )\n  (func (export \"nullary\") (return))\n  (func (export \"unary\") (result f64) (return (f64.const 3)))\n  (func (export \"as-func-first\") (result i32) (return (i32.const 1)) (i32.const 2) )\n  (func (export \"as-func-mid\") (result i32) (call $dummy) (return (i32.const 2)) (i32.const 3) )\n  (func (export \"as-func-last\") (nop) (call $dummy) (return) )\n  (func (export \"as-func-value\") (result i32) (nop) (call $dummy) (return (i32.const 3)) )\n  (func (export \"as-block-first\") (block (return) (call $dummy)) )\n  (func (export \"as-block-mid\") (block (call $dummy) (return) (call $dummy)) )\n  (func (export \"as-block-last\") (block (nop) (call $dummy) (return)) )\n  (func (export \"as-block-value\") (result i32) (block (result i32) (nop) (call $dummy) (return (i32.const 2))) )\n  (func (export \"as-loop-first\") (result i32) (loop (result i32) (return (i32.const 3)) (i32.const 2)) )\n  (func (export \"as-loop-mid\") (result i32) (loop (result i32) (call $dummy) (return (i32.const 4)) (i32.const 2)) )\n  (func (export \"as-loop-last\") (result i32) (loop (result i32) (nop) (call $dummy) (return (i32.const 5))) )\n  (func (export \"as-br-value\") (result i32) (block (result i32) (br 0 (return (i32.const 9)))) )\n  (func (export \"as-br_if-cond\") (block (br_if 0 (return))) )\n  (func (export \"as-br_if-value\") (result i32) (block (result i32) (drop (br_if 0 (return (i32.const 8)) (i32.const 1))) (i32.const 7) ) )\n  (func (export \"as-br_if-value-cond\") (result i32) (block (result i32) (drop (br_if 0 (i32.const 6) (return (i32.const 9)))) (i32.const 7) ) )\n  (func (export \"as-br_table-index\") (result i64) (block (br_table 0 0 0 (return (i64.const 9)))) (i64.const -1) )\n  (func (export \"as-br_table-value\") (result i32) (block (result i32) (br_table 0 0 0 (return (i32.const 10)) (i32.const 1)) (i32.const 7) ) )\n  (func (export \"as-br_table-value-index\") (result i32) (block (result i32) (br_table 0 0 (i32.const 6) (return (i32.const 11))) (i32.const 7) ) )\n  (func (export \"as-return-value\") (result i64) (return (return (i64.const 7))) )\n  (func (export \"as-if-cond\") (result i32) (if (result i32) (return (i32.const 2)) (then (i32.const 0)) (else (i32.const 1)) ) )\n  (func (export \"as-if-then\") (param i32 i32) (result i32) (if (result i32) (local.get 0) (then (return (i32.const 3))) (else (local.get 1)) ) )\n  (func (export \"as-if-else\") (param i32 i32) (result i32) (if (result i32) (local.get 0) (then (local.get 1)) (else (return (i32.const 4))) ) )\n  (func (export \"as-select-first\") (param i32 i32) (result i32) (select (return (i32.const 5)) (local.get 0) (local.get 1)) )\n  (func (export \"as-select-second\") (param i32 i32) (result i32) (select (local.get 0) (return (i32.const 6)) (local.get 1)) )\n  (func (export \"as-select-cond\") (result i32) (select (i32.const 0) (i32.const 1) (return (i32.const 7))) )\n  (func $f (param i32 i32 i32) (result i32) (i32.const -1))\n  (func (export \"as-call-first\") (result i32) (call $f (return (i32.const 12)) (i32.const 2) (i32.const 3)) )\n  (func (export \"as-call-mid\") (result i32) (call $f (i32.const 1) (return (i32.const 13)) (i32.const 3)) )\n  (func (export \"as-call-last\") (result i32) (call $f (i32.const 1) (i32.const 2) (return (i32.const 14))) ) (type $sig (func (param i32 i32 i32) (result i32))) (table funcref (elem $f))\n  (func (export \"as-call_indirect-func\") (result i32) (call_indirect (type $sig) (return (i32.const 20)) (i32.const 1) (i32.const 2) (i32.const 3) ) )\n  (func (export \"as-call_indirect-first\") (result i32) (call_indirect (type $sig) (i32.const 0) (return (i32.const 21)) (i32.const 2) (i32.const 3) ) )\n  (func (export \"as-call_indirect-mid\") (result i32) (call_indirect (type $sig) (i32.const 0) (i32.const 1) (return (i32.const 22)) (i32.const 3) ) )\n  (func (export \"as-call_indirect-last\") (result i32) (call_indirect (type $sig) (i32.const 0) (i32.const 1) (i32.const 2) (return (i32.const 23)) ) )\n  (func (export \"as-local.set-value\") (result i32) (local f32) (local.set 0 (return (i32.const 17))) (i32.const -1) )\n  (func (export \"as-local.tee-value\") (result i32) (local i32) (local.tee 0 (return (i32.const 1))) ) (global $a (mut i32) (i32.const 0))\n  (func (export \"as-global.set-value\") (result i32) (global.set $a (return (i32.const 1))) ) (memory 1)\n  (func (export \"as-load-address\") (result f32) (f32.load (return (f32.const 1.7))) )\n  (func (export \"as-loadN-address\") (result i64) (i64.load8_s (return (i64.const 30))) )\n  (func (export \"as-store-address\") (result i32) (f64.store (return (i32.const 30)) (f64.const 7)) (i32.const -1) )\n  (func (export \"as-store-value\") (result i32) (i64.store (i32.const 2) (return (i32.const 31))) (i32.const -1) )\n  (func (export \"as-storeN-address\") (result i32) (i32.store8 (return (i32.const 32)) (i32.const 7)) (i32.const -1) )\n  (func (export \"as-storeN-value\") (result i32) (i64.store16 (i32.const 2) (return (i32.const 33))) (i32.const -1) )\n  (func (export \"as-unary-operand\") (result f32) (f32.neg (return (f32.const 3.4))) )\n  (func (export \"as-binary-left\") (result i32) (i32.add (return (i32.const 3)) (i32.const 10)) )\n  (func (export \"as-binary-right\") (result i64) (i64.sub (i64.const 10) (return (i64.const 45))) )\n  (func (export \"as-test-operand\") (result i32) (i32.eqz (return (i32.const 44))) )\n  (func (export \"as-compare-left\") (result i32) (f64.le (return (i32.const 43)) (f64.const 10)) )\n  (func (export \"as-compare-right\") (result i32) (f32.ne (f32.const 10) (return (i32.const 42))) )\n  (func (export \"as-convert-operand\") (result i32) (i32.wrap_i64 (return (i32.const 41))) )\n  (func (export \"as-memory.grow-size\") (result i32) (memory.grow (return (i32.const 40))) ))",
    "(assert_return (invoke \"type-i32\"))",
    "(assert_return (invoke \"type-i64\"))",
    "(assert_return (invoke \"type-f32\"))",
    "(assert_return (invoke \"type-f64\"))",
    "(assert_return (invoke \"type-i32-value\") (i32.const 1))",
    "(assert_return (invoke \"type-i64-value\") (i64.const 2))",
    "(assert_return (invoke \"type-f32-value\") (f32.const 3))",
    "(assert_return (invoke \"type-f64-value\") (f64.const 4))",
    "(assert_return (invoke \"nullary\"))",
    "(assert_return (invoke \"unary\") (f64.const 3))",
    "(assert_return (invoke \"as-func-first\") (i32.const 1))",
    "(assert_return (invoke \"as-func-mid\") (i32.const 2))",
    "(assert_return (invoke \"as-func-last\"))",
    "(assert_return (invoke \"as-func-value\") (i32.const 3))",
    "(assert_return (invoke \"as-block-first\"))",
    "(assert_return (invoke \"as-block-mid\"))",
    "(assert_return (invoke \"as-block-last\"))",
    "(assert_return (invoke \"as-block-value\") (i32.const 2))",
    "(assert_return (invoke \"as-loop-first\") (i32.const 3))",
    "(assert_return (invoke \"as-loop-mid\") (i32.const 4))",
    "(assert_return (invoke \"as-loop-last\") (i32.const 5))",
    "(assert_return (invoke \"as-br-value\") (i32.const 9))",
    "(assert_return (invoke \"as-br_if-cond\"))",
    "(assert_return (invoke \"as-br_if-value\") (i32.const 8))",
    "(assert_return (invoke \"as-br_if-value-cond\") (i32.const 9))",
    "(assert_return (invoke \"as-br_table-index\") (i64.const 9))",
    "(assert_return (invoke \"as-br_table-value\") (i32.const 10))",
    "(assert_return (invoke \"as-br_table-value-index\") (i32.const 11))",
    "(assert_return (invoke \"as-return-value\") (i64.const 7))",
    "(assert_return (invoke \"as-if-cond\") (i32.const 2))",
    "(assert_return (invoke \"as-if-then\" (i32.const 1) (i32.const 6)) (i32.const 3))",
    "(assert_return (invoke \"as-if-then\" (i32.const 0) (i32.const 6)) (i32.const 6))",
    "(assert_return (invoke \"as-if-else\" (i32.const 0) (i32.const 6)) (i32.const 4))",
    "(assert_return (invoke \"as-if-else\" (i32.const 1) (i32.const 6)) (i32.const 6))",
    "(assert_return (invoke \"as-select-first\" (i32.const 0) (i32.const 6)) (i32.const 5))",
    "(assert_return (invoke \"as-select-first\" (i32.const 1) (i32.const 6)) (i32.const 5))",
    "(assert_return (invoke \"as-select-second\" (i32.const 0) (i32.const 6)) (i32.const 6))",
    "(assert_return (invoke \"as-select-second\" (i32.const 1) (i32.const 6)) (i32.const 6))",
    "(assert_return (invoke \"as-select-cond\") (i32.const 7))",
    "(assert_return (invoke \"as-call-first\") (i32.const 12))",
    "(assert_return (invoke \"as-call-mid\") (i32.const 13))",
    "(assert_return (invoke \"as-call-last\") (i32.const 14))",
    "(assert_return (invoke \"as-call_indirect-func\") (i32.const 20))",
    "(assert_return (invoke \"as-call_indirect-first\") (i32.const 21))",
    "(assert_return (invoke \"as-call_indirect-mid\") (i32.const 22))",
    "(assert_return (invoke \"as-call_indirect-last\") (i32.const 23))",
    "(assert_return (invoke \"as-local.set-value\") (i32.const 17))",
    "(assert_return (invoke \"as-local.tee-value\") (i32.const 1))",
    "(assert_return (invoke \"as-global.set-value\") (i32.const 1))",
    "(assert_return (invoke \"as-load-address\") (f32.const 1.7))",
    "(assert_return (invoke \"as-loadN-address\") (i64.const 30))",
    "(assert_return (invoke \"as-store-address\") (i32.const 30))",
    "(assert_return (invoke \"as-store-value\") (i32.const 31))",
    "(assert_return (invoke \"as-storeN-address\") (i32.const 32))",
    "(assert_return (invoke \"as-storeN-value\") (i32.const 33))",
    "(assert_return (invoke \"as-unary-operand\") (f32.const 3.4))",
    "(assert_return (invoke \"as-binary-left\") (i32.const 3))",
    "(assert_return (invoke \"as-binary-right\") (i64.const 45))",
    "(assert_return (invoke \"as-test-operand\") (i32.const 44))",
    "(assert_return (invoke \"as-compare-left\") (i32.const 43))",
    "(assert_return (invoke \"as-compare-right\") (i32.const 42))",
    "(assert_return (invoke \"as-convert-operand\") (i32.const 41))",
    "(assert_return (invoke \"as-memory.grow-size\") (i32.const 40))",
    "(assert_invalid (module (func $type-value-empty-vs-num (result i32) (return))) \"type mismatch\")",
    "(assert_invalid (module (func $type-value-empty-vs-num-in-block (result i32) (i32.const 0) (block (return)) ) ) \"type mismatch\")",
    "(assert_invalid (module (func $type-value-empty-vs-num-in-loop (result i32) (i32.const 0) (loop (return)) ) ) \"type mismatch\")",
    "(assert_invalid (module (func $type-value-empty-vs-num-in-then (result i32) (i32.const 0) (i32.const 0) (if (then (return))) ) ) \"type mismatch\")",
    "(assert_invalid (module (func $type-value-empty-vs-num-in-else (result i32) (i32.const 0) (i32.const 0) (if (result i32) (then (i32.const 0)) (else (return))) (drop) ) ) \"type mismatch\")",
    "(assert_invalid (module (func $type-value-empty-vs-num-in-br (result i32) (i32.const 0) (block (br 0 (return))) ) ) \"type mismatch\")",
    "(assert_invalid (module (func $type-value-empty-vs-num-in-br_if (result i32) (i32.const 0) (block (br_if 0 (return) (i32.const 1))) ) ) \"type mismatch\")",
    "(assert_invalid (module (func $type-value-empty-vs-num-in-br_table (result i32) (i32.const 0) (block (br_table 0 (return))) ) ) \"type mismatch\")",
    "(assert_invalid (module (func $type-value-empty-vs-num-in-return (result i32) (return (return)) ) ) \"type mismatch\")",
    "(assert_invalid (module (func $type-value-empty-vs-num-in-select (result i32) (select (return) (i32.const 1) (i32.const 2)) ) ) \"type mismatch\")",
    "(assert_invalid (module (func $type-value-empty-vs-num-in-call (result i32) (call 1 (return)) ) (func (param i32) (result i32) (local.get 0)) ) \"type mismatch\")",
    "(assert_invalid (module (func $f (param i32) (result i32) (local.get 0)) (type $sig (func (param i32) (result i32))) (table funcref (elem $f)) (func $type-value-empty-vs-num-in-call_indirect (result i32) (block (result i32) (call_indirect (type $sig) (return) (i32.const 0) ) ) ) ) \"type mismatch\")",
    "(assert_invalid (module (func $type-value-empty-vs-num-in-local.set (result i32) (local i32) (local.set 0 (return)) (local.get 0) ) ) \"type mismatch\")",
    "(assert_invalid (module (func $type-value-empty-vs-num-in-local.tee (result i32) (local i32) (local.tee 0 (return)) ) ) \"type mismatch\")",
    "(assert_invalid (module (global $x (mut i32) (i32.const 0)) (func $type-value-empty-vs-num-in-global.set (result i32) (global.set $x (return)) (global.get $x) ) ) \"type mismatch\")",
    "(assert_invalid (module (memory 0) (func $type-value-empty-vs-num-in-memory.grow (result i32) (memory.grow (return)) ) ) \"type mismatch\")",
    "(assert_invalid (module (memory 0) (func $type-value-empty-vs-num-in-load (result i32) (i32.load (return)) ) ) \"type mismatch\")",
    "(assert_invalid (module (memory 1) (func $type-value-empty-vs-num-in-store (result i32) (i32.store (return) (i32.const 1)) ) ) \"type mismatch\")",
    "(assert_invalid (module (func $type-value-void-vs-num (result f64) (return (nop)))) \"type mismatch\")",
    "(assert_invalid (module (func $type-value-num-vs-num (result f64) (return (i64.const 1)))) \"type mismatch\")"
  ],
  "dump": {
    "return.0.wasm": {
      "header": "\nreturn.0.wasm:\tfile format wasm 0x1\n\nSections:\n\n     Type start=0x0000000a end=0x0000002b (size=0x00000021) count: 7\n Function start=0x0000002d end=0x0000006b (size=0x0000003e) count: 61\n    Table start=0x0000006d end=0x00000072 (size=0x00000005) count: 1\n   Memory start=0x00000074 end=0x00000077 (size=0x00000003) count: 1\n   Global start=0x00000079 end=0x0000007f (size=0x00000006) count: 1\n   Export start=0x00000082 end=0x0000047a (size=0x000003f8) count: 59\n     Elem start=0x0000047c end=0x00000483 (size=0x00000007) count: 1\n     Code start=0x00000486 end=0x0000072f (size=0x000002a9) count: 61\n",
      "details": "\nreturn.0.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nType[7]:\n - type[0] (i32, i32, i32) -> i32\n - type[1] () -> nil\n - type[2] () -> i32\n - type[3] () -> i64\n - type[4] () -> f32\n - type[5] () -> f64\n - type[6] (i32, i32) -> i32\nFunction[61]:\n - func[0] sig=1\n - func[1] sig=1 <type-i32>\n - func[2] sig=1 <type-i64>\n - func[3] sig=1 <type-f32>\n - func[4] sig=1 <type-f64>\n - func[5] sig=2 <type-i32-value>\n - func[6] sig=3 <type-i64-value>\n - func[7] sig=4 <type-f32-value>\n - func[8] sig=5 <type-f64-value>\n - func[9] sig=1 <nullary>\n - func[10] sig=5 <unary>\n - func[11] sig=2 <as-func-first>\n - func[12] sig=2 <as-func-mid>\n - func[13] sig=1 <as-func-last>\n - func[14] sig=2 <as-func-value>\n - func[15] sig=1 <as-block-first>\n - func[16] sig=1 <as-block-mid>\n - func[17] sig=1 <as-block-last>\n - func[18] sig=2 <as-block-value>\n - func[19] sig=2 <as-loop-first>\n - func[20] sig=2 <as-loop-mid>\n - func[21] sig=2 <as-loop-last>\n - func[22] sig=2 <as-br-value>\n - func[23] sig=1 <as-br_if-cond>\n - func[24] sig=2 <as-br_if-value>\n - func[25] sig=2 <as-br_if-value-cond>\n - func[26] sig=3 <as-br_table-index>\n - func[27] sig=2 <as-br_table-value>\n - func[28] sig=2 <as-br_table-value-index>\n - func[29] sig=3 <as-return-value>\n - func[30] sig=2 <as-if-cond>\n - func[31] sig=6 <as-if-then>\n - func[32] sig=6 <as-if-else>\n - func[33] sig=6 <as-select-first>\n - func[34] sig=6 <as-select-second>\n - func[35] sig=2 <as-select-cond>\n - func[36] sig=0\n - func[37] sig=2 <as-call-first>\n - func[38] sig=2 <as-call-mid>\n - func[39] sig=2 <as-call-last>\n - func[40] sig=2 <as-call_indirect-func>\n - func[41] sig=2 <as-call_indirect-first>\n - func[42] sig=2 <as-call_indirect-mid>\n - func[43] sig=2 <as-call_indirect-last>\n - func[44] sig=2 <as-local.set-value>\n - func[45] sig=2 <as-local.tee-value>\n - func[46] sig=2 <as-global.set-value>\n - func[47] sig=4 <as-load-address>\n - func[48] sig=3 <as-loadN-address>\n - func[49] sig=2 <as-store-address>\n - func[50] sig=2 <as-store-value>\n - func[51] sig=2 <as-storeN-address>\n - func[52] sig=2 <as-storeN-value>\n - func[53] sig=4 <as-unary-operand>\n - func[54] sig=2 <as-binary-left>\n - func[55] sig=3 <as-binary-right>\n - func[56] sig=2 <as-test-operand>\n - func[57] sig=2 <as-compare-left>\n - func[58] sig=2 <as-compare-right>\n - func[59] sig=2 <as-convert-operand>\n - func[60] sig=2 <as-memory.grow-size>\nTable[1]:\n - table[0] type=funcref initial=1 max=1\nMemory[1]:\n - memory[0] pages: initial=1\nGlobal[1]:\n - global[0] i32 mutable=1 - init i32=0\nExport[59]:\n - func[1] <type-i32> -> \"type-i32\"\n - func[2] <type-i64> -> \"type-i64\"\n - func[3] <type-f32> -> \"type-f32\"\n - func[4] <type-f64> -> \"type-f64\"\n - func[5] <type-i32-value> -> \"type-i32-value\"\n - func[6] <type-i64-value> -> \"type-i64-value\"\n - func[7] <type-f32-value> -> \"type-f32-value\"\n - func[8] <type-f64-value> -> \"type-f64-value\"\n - func[9] <nullary> -> \"nullary\"\n - func[10] <unary> -> \"unary\"\n - func[11] <as-func-first> -> \"as-func-first\"\n - func[12] <as-func-mid> -> \"as-func-mid\"\n - func[13] <as-func-last> -> \"as-func-last\"\n - func[14] <as-func-value> -> \"as-func-value\"\n - func[15] <as-block-first> -> \"as-block-first\"\n - func[16] <as-block-mid> -> \"as-block-mid\"\n - func[17] <as-block-last> -> \"as-block-last\"\n - func[18] <as-block-value> -> \"as-block-value\"\n - func[19] <as-loop-first> -> \"as-loop-first\"\n - func[20] <as-loop-mid> -> \"as-loop-mid\"\n - func[21] <as-loop-last> -> \"as-loop-last\"\n - func[22] <as-br-value> -> \"as-br-value\"\n - func[23] <as-br_if-cond> -> \"as-br_if-cond\"\n - func[24] <as-br_if-value> -> \"as-br_if-value\"\n - func[25] <as-br_if-value-cond> -> \"as-br_if-value-cond\"\n - func[26] <as-br_table-index> -> \"as-br_table-index\"\n - func[27] <as-br_table-value> -> \"as-br_table-value\"\n - func[28] <as-br_table-value-index> -> \"as-br_table-value-index\"\n - func[29] <as-return-value> -> \"as-return-value\"\n - func[30] <as-if-cond> -> \"as-if-cond\"\n - func[31] <as-if-then> -> \"as-if-then\"\n - func[32] <as-if-else> -> \"as-if-else\"\n - func[33] <as-select-first> -> \"as-select-first\"\n - func[34] <as-select-second> -> \"as-select-second\"\n - func[35] <as-select-cond> -> \"as-select-cond\"\n - func[37] <as-call-first> -> \"as-call-first\"\n - func[38] <as-call-mid> -> \"as-call-mid\"\n - func[39] <as-call-last> -> \"as-call-last\"\n - func[40] <as-call_indirect-func> -> \"as-call_indirect-func\"\n - func[41] <as-call_indirect-first> -> \"as-call_indirect-first\"\n - func[42] <as-call_indirect-mid> -> \"as-call_indirect-mid\"\n - func[43] <as-call_indirect-last> -> \"as-call_indirect-last\"\n - func[44] <as-local.set-value> -> \"as-local.set-value\"\n - func[45] <as-local.tee-value> -> \"as-local.tee-value\"\n - func[46] <as-global.set-value> -> \"as-global.set-value\"\n - func[47] <as-load-address> -> \"as-load-address\"\n - func[48] <as-loadN-address> -> \"as-loadN-address\"\n - func[49] <as-store-address> -> \"as-store-address\"\n - func[50] <as-store-value> -> \"as-store-value\"\n - func[51] <as-storeN-address> -> \"as-storeN-address\"\n - func[52] <as-storeN-value> -> \"as-storeN-value\"\n - func[53] <as-unary-operand> -> \"as-unary-operand\"\n - func[54] <as-binary-left> -> \"as-binary-left\"\n - func[55] <as-binary-right> -> \"as-binary-right\"\n - func[56] <as-test-operand> -> \"as-test-operand\"\n - func[57] <as-compare-left> -> \"as-compare-left\"\n - func[58] <as-compare-right> -> \"as-compare-right\"\n - func[59] <as-convert-operand> -> \"as-convert-operand\"\n - func[60] <as-memory.grow-size> -> \"as-memory.grow-size\"\nElem[1]:\n - segment[0] flags=0 table=0 count=1 - init i32=0\n  - elem[0] = ref.func:36\nCode[61]:\n - func[0] size=2\n - func[1] size=5 <type-i32>\n - func[2] size=5 <type-i64>\n - func[3] size=5 <type-f32>\n - func[4] size=5 <type-f64>\n - func[5] size=9 <type-i32-value>\n - func[6] size=9 <type-i64-value>\n - func[7] size=12 <type-f32-value>\n - func[8] size=16 <type-f64-value>\n - func[9] size=3 <nullary>\n - func[10] size=12 <unary>\n - func[11] size=7 <as-func-first>\n - func[12] size=9 <as-func-mid>\n - func[13] size=6 <as-func-last>\n - func[14] size=8 <as-func-value>\n - func[15] size=8 <as-block-first>\n - func[16] size=10 <as-block-mid>\n - func[17] size=9 <as-block-last>\n - func[18] size=11 <as-block-value>\n - func[19] size=10 <as-loop-first>\n - func[20] size=12 <as-loop-mid>\n - func[21] size=11 <as-loop-last>\n - func[22] size=10 <as-br-value>\n - func[23] size=8 <as-br_if-cond>\n - func[24] size=15 <as-br_if-value>\n - func[25] size=15 <as-br_if-value-cond>\n - func[26] size=15 <as-br_table-index>\n - func[27] size=17 <as-br_table-value>\n - func[28] size=16 <as-br_table-value-index>\n - func[29] size=6 <as-return-value>\n - func[30] size=13 <as-if-cond>\n - func[31] size=13 <as-if-then>\n - func[32] size=13 <as-if-else>\n - func[33] size=10 <as-select-first>\n - func[34] size=10 <as-select-second>\n - func[35] size=10 <as-select-cond>\n - func[36] size=4\n - func[37] size=11 <as-call-first>\n - func[38] size=11 <as-call-mid>\n - func[39] size=11 <as-call-last>\n - func[40] size=14 <as-call_indirect-func>\n - func[41] size=14 <as-call_indirect-first>\n - func[42] size=14 <as-call_indirect-mid>\n - func[43] size=14 <as-call_indirect-last>\n - func[44] size=11 <as-local.set-value>\n - func[45] size=9 <as-local.tee-value>\n - func[46] size=7 <as-global.set-value>\n - func[47] size=11 <as-load-address>\n - func[48] size=8 <as-loadN-address>\n - func[49] size=19 <as-store-address>\n - func[50] size=12 <as-store-value>\n - func[51] size=12 <as-storeN-address>\n - func[52] size=12 <as-storeN-value>\n - func[53] size=9 <as-unary-operand>\n - func[54] size=8 <as-binary-left>\n - func[55] size=8 <as-binary-right>\n - func[56] size=6 <as-test-operand>\n - func[57] size=15 <as-compare-left>\n - func[58] size=11 <as-compare-right>\n - func[59] size=6 <as-convert-operand>\n - func[60] size=7 <as-memory.grow-size>\n",
      "disassemble": "\nreturn.0.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n000488 func[0]:\n 000489: 0b                         | end\n00048b func[1] <type-i32>:\n 00048c: 0f                         | return\n 00048d: 68                         | i32.ctz\n 00048e: 1a                         | drop\n 00048f: 0b                         | end\n000491 func[2] <type-i64>:\n 000492: 0f                         | return\n 000493: 7a                         | i64.ctz\n 000494: 1a                         | drop\n 000495: 0b                         | end\n000497 func[3] <type-f32>:\n 000498: 0f                         | return\n 000499: 8c                         | f32.neg\n 00049a: 1a                         | drop\n 00049b: 0b                         | end\n00049d func[4] <type-f64>:\n 00049e: 0f                         | return\n 00049f: 9a                         | f64.neg\n 0004a0: 1a                         | drop\n 0004a1: 0b                         | end\n0004a3 func[5] <type-i32-value>:\n 0004a4: 02 7f                      | block i32\n 0004a6: 41 01                      |   i32.const 1\n 0004a8: 0f                         |   return\n 0004a9: 68                         |   i32.ctz\n 0004aa: 0b                         | end\n 0004ab: 0b                         | end\n0004ad func[6] <type-i64-value>:\n 0004ae: 02 7e                      | block i64\n 0004b0: 42 02                      |   i64.const 2\n 0004b2: 0f                         |   return\n 0004b3: 7a                         |   i64.ctz\n 0004b4: 0b                         | end\n 0004b5: 0b                         | end\n0004b7 func[7] <type-f32-value>:\n 0004b8: 02 7d                      | block f32\n 0004ba: 43 00 00 40 40             |   f32.const 0x1.8p+1\n 0004bf: 0f                         |   return\n 0004c0: 8c                         |   f32.neg\n 0004c1: 0b                         | end\n 0004c2: 0b                         | end\n0004c4 func[8] <type-f64-value>:\n 0004c5: 02 7c                      | block f64\n 0004c7: 44 00 00 00 00 00 00 10 40 |   f64.const 0x1p+2\n 0004d0: 0f                         |   return\n 0004d1: 9a                         |   f64.neg\n 0004d2: 0b                         | end\n 0004d3: 0b                         | end\n0004d5 func[9] <nullary>:\n 0004d6: 0f                         | return\n 0004d7: 0b                         | end\n0004d9 func[10] <unary>:\n 0004da: 44 00 00 00 00 00 00 08 40 | f64.const 0x1.8p+1\n 0004e3: 0f                         | return\n 0004e4: 0b                         | end\n0004e6 func[11] <as-func-first>:\n 0004e7: 41 01                      | i32.const 1\n 0004e9: 0f                         | return\n 0004ea: 41 02                      | i32.const 2\n 0004ec: 0b                         | end\n0004ee func[12] <as-func-mid>:\n 0004ef: 10 00                      | call 0\n 0004f1: 41 02                      | i32.const 2\n 0004f3: 0f                         | return\n 0004f4: 41 03                      | i32.const 3\n 0004f6: 0b                         | end\n0004f8 func[13] <as-func-last>:\n 0004f9: 01                         | nop\n 0004fa: 10 00                      | call 0\n 0004fc: 0f                         | return\n 0004fd: 0b                         | end\n0004ff func[14] <as-func-value>:\n 000500: 01                         | nop\n 000501: 10 00                      | call 0\n 000503: 41 03                      | i32.const 3\n 000505: 0f                         | return\n 000506: 0b                         | end\n000508 func[15] <as-block-first>:\n 000509: 02 40                      | block\n 00050b: 0f                         |   return\n 00050c: 10 00                      |   call 0\n 00050e: 0b                         | end\n 00050f: 0b                         | end\n000511 func[16] <as-block-mid>:\n 000512: 02 40                      | block\n 000514: 10 00                      |   call 0\n 000516: 0f                         |   return\n 000517: 10 00                      |   call 0\n 000519: 0b                         | end\n 00051a: 0b                         | end\n00051c func[17] <as-block-last>:\n 00051d: 02 40                      | block\n 00051f: 01                         |   nop\n 000520: 10 00                      |   call 0\n 000522: 0f                         |   return\n 000523: 0b                         | end\n 000524: 0b                         | end\n000526 func[18] <as-block-value>:\n 000527: 02 7f                      | block i32\n 000529: 01                         |   nop\n 00052a: 10 00                      |   call 0\n 00052c: 41 02                      |   i32.const 2\n 00052e: 0f                         |   return\n 00052f: 0b                         | end\n 000530: 0b                         | end\n000532 func[19] <as-loop-first>:\n 000533: 03 7f                      | loop i32\n 000535: 41 03                      |   i32.const 3\n 000537: 0f                         |   return\n 000538: 41 02                      |   i32.const 2\n 00053a: 0b                         | end\n 00053b: 0b                         | end\n00053d func[20] <as-loop-mid>:\n 00053e: 03 7f                      | loop i32\n 000540: 10 00                      |   call 0\n 000542: 41 04                      |   i32.const 4\n 000544: 0f                         |   return\n 000545: 41 02                      |   i32.const 2\n 000547: 0b                         | end\n 000548: 0b                         | end\n00054a func[21] <as-loop-last>:\n 00054b: 03 7f                      | loop i32\n 00054d: 01                         |   nop\n 00054e: 10 00                      |   call 0\n 000550: 41 05                      |   i32.const 5\n 000552: 0f                         |   return\n 000553: 0b                         | end\n 000554: 0b                         | end\n000556 func[22] <as-br-value>:\n 000557: 02 7f                      | block i32\n 000559: 41 09                      |   i32.const 9\n 00055b: 0f                         |   return\n 00055c: 0c 00                      |   br 0\n 00055e: 0b                         | end\n 00055f: 0b                         | end\n000561 func[23] <as-br_if-cond>:\n 000562: 02 40                      | block\n 000564: 0f                         |   return\n 000565: 0d 00                      |   br_if 0\n 000567: 0b                         | end\n 000568: 0b                         | end\n00056a func[24] <as-br_if-value>:\n 00056b: 02 7f                      | block i32\n 00056d: 41 08                      |   i32.const 8\n 00056f: 0f                         |   return\n 000570: 41 01                      |   i32.const 1\n 000572: 0d 00                      |   br_if 0\n 000574: 1a                         |   drop\n 000575: 41 07                      |   i32.const 7\n 000577: 0b                         | end\n 000578: 0b                         | end\n00057a func[25] <as-br_if-value-cond>:\n 00057b: 02 7f                      | block i32\n 00057d: 41 06                      |   i32.const 6\n 00057f: 41 09                      |   i32.const 9\n 000581: 0f                         |   return\n 000582: 0d 00                      |   br_if 0\n 000584: 1a                         |   drop\n 000585: 41 07                      |   i32.const 7\n 000587: 0b                         | end\n 000588: 0b                         | end\n00058a func[26] <as-br_table-index>:\n 00058b: 02 40                      | block\n 00058d: 42 09                      |   i64.const 9\n 00058f: 0f                         |   return\n 000590: 0e 02 00 00 00             |   br_table 0 0 0\n 000595: 0b                         | end\n 000596: 42 7f                      | i64.const 18446744073709551615\n 000598: 0b                         | end\n00059a func[27] <as-br_table-value>:\n 00059b: 02 7f                      | block i32\n 00059d: 41 0a                      |   i32.const 10\n 00059f: 0f                         |   return\n 0005a0: 41 01                      |   i32.const 1\n 0005a2: 0e 02 00 00 00             |   br_table 0 0 0\n 0005a7: 41 07                      |   i32.const 7\n 0005a9: 0b                         | end\n 0005aa: 0b                         | end\n0005ac func[28] <as-br_table-value-index>:\n 0005ad: 02 7f                      | block i32\n 0005af: 41 06                      |   i32.const 6\n 0005b1: 41 0b                      |   i32.const 11\n 0005b3: 0f                         |   return\n 0005b4: 0e 01 00 00                |   br_table 0 0\n 0005b8: 41 07                      |   i32.const 7\n 0005ba: 0b                         | end\n 0005bb: 0b                         | end\n0005bd func[29] <as-return-value>:\n 0005be: 42 07                      | i64.const 7\n 0005c0: 0f                         | return\n 0005c1: 0f                         | return\n 0005c2: 0b                         | end\n0005c4 func[30] <as-if-cond>:\n 0005c5: 41 02                      | i32.const 2\n 0005c7: 0f                         | return\n 0005c8: 04 7f                      | if i32\n 0005ca: 41 00                      |   i32.const 0\n 0005cc: 05                         | else\n 0005cd: 41 01                      |   i32.const 1\n 0005cf: 0b                         | end\n 0005d0: 0b                         | end\n0005d2 func[31] <as-if-then>:\n 0005d3: 20 00                      | local.get 0\n 0005d5: 04 7f                      | if i32\n 0005d7: 41 03                      |   i32.const 3\n 0005d9: 0f                         |   return\n 0005da: 05                         | else\n 0005db: 20 01                      |   local.get 1\n 0005dd: 0b                         | end\n 0005de: 0b                         | end\n0005e0 func[32] <as-if-else>:\n 0005e1: 20 00                      | local.get 0\n 0005e3: 04 7f                      | if i32\n 0005e5: 20 01                      |   local.get 1\n 0005e7: 05                         | else\n 0005e8: 41 04                      |   i32.const 4\n 0005ea: 0f                         |   return\n 0005eb: 0b                         | end\n 0005ec: 0b                         | end\n0005ee func[33] <as-select-first>:\n 0005ef: 41 05                      | i32.const 5\n 0005f1: 0f                         | return\n 0005f2: 20 00                      | local.get 0\n 0005f4: 20 01                      | local.get 1\n 0005f6: 1b                         | select\n 0005f7: 0b                         | end\n0005f9 func[34] <as-select-second>:\n 0005fa: 20 00                      | local.get 0\n 0005fc: 41 06                      | i32.const 6\n 0005fe: 0f                         | return\n 0005ff: 20 01                      | local.get 1\n 000601: 1b                         | select\n 000602: 0b                         | end\n000604 func[35] <as-select-cond>:\n 000605: 41 00                      | i32.const 0\n 000607: 41 01                      | i32.const 1\n 000609: 41 07                      | i32.const 7\n 00060b: 0f                         | return\n 00060c: 1b                         | select\n 00060d: 0b                         | end\n00060f func[36]:\n 000610: 41 7f                      | i32.const 4294967295\n 000612: 0b                         | end\n000614 func[37] <as-call-first>:\n 000615: 41 0c                      | i32.const 12\n 000617: 0f                         | return\n 000618: 41 02                      | i32.const 2\n 00061a: 41 03                      | i32.const 3\n 00061c: 10 24                      | call 36\n 00061e: 0b                         | end\n000620 func[38] <as-call-mid>:\n 000621: 41 01                      | i32.const 1\n 000623: 41 0d                      | i32.const 13\n 000625: 0f                         | return\n 000626: 41 03                      | i32.const 3\n 000628: 10 24                      | call 36\n 00062a: 0b                         | end\n00062c func[39] <as-call-last>:\n 00062d: 41 01                      | i32.const 1\n 00062f: 41 02                      | i32.const 2\n 000631: 41 0e                      | i32.const 14\n 000633: 0f                         | return\n 000634: 10 24                      | call 36\n 000636: 0b                         | end\n000638 func[40] <as-call_indirect-func>:\n 000639: 41 14                      | i32.const 20\n 00063b: 0f                         | return\n 00063c: 41 01                      | i32.const 1\n 00063e: 41 02                      | i32.const 2\n 000640: 41 03                      | i32.const 3\n 000642: 11 00 00                   | call_indirect 0 (type 0)\n 000645: 0b                         | end\n000647 func[41] <as-call_indirect-first>:\n 000648: 41 00                      | i32.const 0\n 00064a: 41 15                      | i32.const 21\n 00064c: 0f                         | return\n 00064d: 41 02                      | i32.const 2\n 00064f: 41 03                      | i32.const 3\n 000651: 11 00 00                   | call_indirect 0 (type 0)\n 000654: 0b                         | end\n000656 func[42] <as-call_indirect-mid>:\n 000657: 41 00                      | i32.const 0\n 000659: 41 01                      | i32.const 1\n 00065b: 41 16                      | i32.const 22\n 00065d: 0f                         | return\n 00065e: 41 03                      | i32.const 3\n 000660: 11 00 00                   | call_indirect 0 (type 0)\n 000663: 0b                         | end\n000665 func[43] <as-call_indirect-last>:\n 000666: 41 00                      | i32.const 0\n 000668: 41 01                      | i32.const 1\n 00066a: 41 02                      | i32.const 2\n 00066c: 41 17                      | i32.const 23\n 00066e: 0f                         | return\n 00066f: 11 00 00                   | call_indirect 0 (type 0)\n 000672: 0b                         | end\n000674 func[44] <as-local.set-value>:\n 000675: 01 7d                      | local[0] type=f32\n 000677: 41 11                      | i32.const 17\n 000679: 0f                         | return\n 00067a: 21 00                      | local.set 0\n 00067c: 41 7f                      | i32.const 4294967295\n 00067e: 0b                         | end\n000680 func[45] <as-local.tee-value>:\n 000681: 01 7f                      | local[0] type=i32\n 000683: 41 01                      | i32.const 1\n 000685: 0f                         | return\n 000686: 22 00                      | local.tee 0\n 000688: 0b                         | end\n00068a func[46] <as-global.set-value>:\n 00068b: 41 01                      | i32.const 1\n 00068d: 0f                         | return\n 00068e: 24 00                      | global.set 0\n 000690: 0b                         | end\n000692 func[47] <as-load-address>:\n 000693: 43 9a 99 d9 3f             | f32.const 0x1.b33334p+0\n 000698: 0f                         | return\n 000699: 2a 02 00                   | f32.load 2 0\n 00069c: 0b                         | end\n00069e func[48] <as-loadN-address>:\n 00069f: 42 1e                      | i64.const 30\n 0006a1: 0f                         | return\n 0006a2: 30 00 00                   | i64.load8_s 0 0\n 0006a5: 0b                         | end\n0006a7 func[49] <as-store-address>:\n 0006a8: 41 1e                      | i32.const 30\n 0006aa: 0f                         | return\n 0006ab: 44 00 00 00 00 00 00 1c 40 | f64.const 0x1.cp+2\n 0006b4: 39 03 00                   | f64.store 3 0\n 0006b7: 41 7f                      | i32.const 4294967295\n 0006b9: 0b                         | end\n0006bb func[50] <as-store-value>:\n 0006bc: 41 02                      | i32.const 2\n 0006be: 41 1f                      | i32.const 31\n 0006c0: 0f                         | return\n 0006c1: 37 03 00                   | i64.store 3 0\n 0006c4: 41 7f                      | i32.const 4294967295\n 0006c6: 0b                         | end\n0006c8 func[51] <as-storeN-address>:\n 0006c9: 41 20                      | i32.const 32\n 0006cb: 0f                         | return\n 0006cc: 41 07                      | i32.const 7\n 0006ce: 3a 00 00                   | i32.store8 0 0\n 0006d1: 41 7f                      | i32.const 4294967295\n 0006d3: 0b                         | end\n0006d5 func[52] <as-storeN-value>:\n 0006d6: 41 02                      | i32.const 2\n 0006d8: 41 21                      | i32.const 33\n 0006da: 0f                         | return\n 0006db: 3d 01 00                   | i64.store16 1 0\n 0006de: 41 7f                      | i32.const 4294967295\n 0006e0: 0b                         | end\n0006e2 func[53] <as-unary-operand>:\n 0006e3: 43 9a 99 59 40             | f32.const 0x1.b33334p+1\n 0006e8: 0f                         | return\n 0006e9: 8c                         | f32.neg\n 0006ea: 0b                         | end\n0006ec func[54] <as-binary-left>:\n 0006ed: 41 03                      | i32.const 3\n 0006ef: 0f                         | return\n 0006f0: 41 0a                      | i32.const 10\n 0006f2: 6a                         | i32.add\n 0006f3: 0b                         | end\n0006f5 func[55] <as-binary-right>:\n 0006f6: 42 0a                      | i64.const 10\n 0006f8: 42 2d                      | i64.const 45\n 0006fa: 0f                         | return\n 0006fb: 7d                         | i64.sub\n 0006fc: 0b                         | end\n0006fe func[56] <as-test-operand>:\n 0006ff: 41 2c                      | i32.const 44\n 000701: 0f                         | return\n 000702: 45                         | i32.eqz\n 000703: 0b                         | end\n000705 func[57] <as-compare-left>:\n 000706: 41 2b                      | i32.const 43\n 000708: 0f                         | return\n 000709: 44 00 00 00 00 00 00 24 40 | f64.const 0x1.4p+3\n 000712: 65                         | f64.le\n 000713: 0b                         | end\n000715 func[58] <as-compare-right>:\n 000716: 43 00 00 20 41             | f32.const 0x1.4p+3\n 00071b: 41 2a                      | i32.const 42\n 00071d: 0f                         | return\n 00071e: 5c                         | f32.ne\n 00071f: 0b                         | end\n000721 func[59] <as-convert-operand>:\n 000722: 41 29                      | i32.const 41\n 000724: 0f                         | return\n 000725: a7                         | i32.wrap_i64\n 000726: 0b                         | end\n000728 func[60] <as-memory.grow-size>:\n 000729: 41 28                      | i32.const 40\n 00072b: 0f                         | return\n 00072c: 40 00                      | memory.grow 0\n 00072e: 0b                         | end\n"
    }
  }
}
