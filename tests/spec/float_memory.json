{
  "bin": {
    "float_memory.0.wasm": "AGFzbQEAAAABDANgAAF9YAABf2AAAAMGBQABAgICBQQBAQEBBzcFCGYzMi5sb2FkAAAIaTMyLmxvYWQAAQlmMzIuc3RvcmUAAglpMzIuc3RvcmUAAwVyZXNldAAECjYFBwBBACoCAAsHAEEAKAIACwwAQQBDAACgfzgCAAsNAEEAQYCAgP0HNgIACwkAQQBBADYCAAsLCgEAQQALBAAAoH8=",
    "float_memory.1.wasm": "AGFzbQEAAAABDANgAAF8YAABfmAAAAMGBQABAgICBQQBAQEBBzcFCGY2NC5sb2FkAAAIaTY0LmxvYWQAAQlmNjQuc3RvcmUAAglpNjQuc3RvcmUAAwVyZXNldAAECj8FBwBBACsDAAsHAEEAKQMACxAAQQBEAAAAAAAA9H85AwALEgBBAEKAgICAgICA+v8ANwMACwkAQQBCADcDAAsLDgEAQQALCAAAAAAAAPR/",
    "float_memory.2.wasm": "AGFzbQEAAAABDANgAAF9YAABf2AAAAMGBQABAgICBQQBAQEBBzcFCGYzMi5sb2FkAAAIaTMyLmxvYWQAAQlmMzIuc3RvcmUAAglpMzIuc3RvcmUAAwVyZXNldAAECjYFBwBBASoCAAsHAEEBKAIACwwAQQFDAACgfzgCAAsNAEEBQYCAgP0HNgIACwkAQQFBADYCAAsLCwEAQQALBQAAAKB/",
    "float_memory.3.wasm": "AGFzbQEAAAABDANgAAF8YAABfmAAAAMGBQABAgICBQQBAQEBBzcFCGY2NC5sb2FkAAAIaTY0LmxvYWQAAQlmNjQuc3RvcmUAAglpNjQuc3RvcmUAAwVyZXNldAAECj8FBwBBASsDAAsHAEEBKQMACxAAQQFEAAAAAAAA9H85AwALEgBBAUKAgICAgICA+v8ANwMACwkAQQFCADcDAAsLDwEAQQALCQAAAAAAAAD0fw==",
    "float_memory.4.wasm": "AGFzbQEAAAABDANgAAF9YAABf2AAAAMGBQABAgICBQQBAQEBBzcFCGYzMi5sb2FkAAAIaTMyLmxvYWQAAQlmMzIuc3RvcmUAAglpMzIuc3RvcmUAAwVyZXNldAAECjYFBwBBACoCAAsHAEEAKAIACwwAQQBDAQDQfzgCAAsNAEEAQYGAwP4HNgIACwkAQQBBADYCAAsLCgEAQQALBAEA0H8=",
    "float_memory.5.wasm": "AGFzbQEAAAABDANgAAF8YAABfmAAAAMGBQABAgICBQQBAQEBBzcFCGY2NC5sb2FkAAAIaTY0LmxvYWQAAQlmNjQuc3RvcmUAAglpNjQuc3RvcmUAAwVyZXNldAAECj8FBwBBACsDAAsHAEEAKQMACxAAQQBEAQAAAAAA/H85AwALEgBBAEKBgICAgICA/v8ANwMACwkAQQBCADcDAAsLDgEAQQALCAEAAAAAAPx/"
  },
  "spec": {"source_filename": "/Users/rvagg/git/webassembly/spec/test/core/float_memory.wast",
 "commands": [
  {"type": "module", "line": 5, "filename": "float_memory.0.wasm"}, 
  {"type": "assert_return", "line": 15, "action": {"type": "invoke", "field": "i32.load", "args": []}, "expected": [{"type": "i32", "value": "2141192192"}]}, 
  {"type": "assert_return", "line": 16, "action": {"type": "invoke", "field": "f32.load", "args": []}, "expected": [{"type": "f32", "value": "2141192192"}]}, 
  {"type": "action", "line": 17, "action": {"type": "invoke", "field": "reset", "args": []}, "expected": []}, 
  {"type": "assert_return", "line": 18, "action": {"type": "invoke", "field": "i32.load", "args": []}, "expected": [{"type": "i32", "value": "0"}]}, 
  {"type": "assert_return", "line": 19, "action": {"type": "invoke", "field": "f32.load", "args": []}, "expected": [{"type": "f32", "value": "0"}]}, 
  {"type": "action", "line": 20, "action": {"type": "invoke", "field": "f32.store", "args": []}, "expected": []}, 
  {"type": "assert_return", "line": 21, "action": {"type": "invoke", "field": "i32.load", "args": []}, "expected": [{"type": "i32", "value": "2141192192"}]}, 
  {"type": "assert_return", "line": 22, "action": {"type": "invoke", "field": "f32.load", "args": []}, "expected": [{"type": "f32", "value": "2141192192"}]}, 
  {"type": "action", "line": 23, "action": {"type": "invoke", "field": "reset", "args": []}, "expected": []}, 
  {"type": "assert_return", "line": 24, "action": {"type": "invoke", "field": "i32.load", "args": []}, "expected": [{"type": "i32", "value": "0"}]}, 
  {"type": "assert_return", "line": 25, "action": {"type": "invoke", "field": "f32.load", "args": []}, "expected": [{"type": "f32", "value": "0"}]}, 
  {"type": "action", "line": 26, "action": {"type": "invoke", "field": "i32.store", "args": []}, "expected": []}, 
  {"type": "assert_return", "line": 27, "action": {"type": "invoke", "field": "i32.load", "args": []}, "expected": [{"type": "i32", "value": "2141192192"}]}, 
  {"type": "assert_return", "line": 28, "action": {"type": "invoke", "field": "f32.load", "args": []}, "expected": [{"type": "f32", "value": "2141192192"}]}, 
  {"type": "module", "line": 30, "filename": "float_memory.1.wasm"}, 
  {"type": "assert_return", "line": 40, "action": {"type": "invoke", "field": "i64.load", "args": []}, "expected": [{"type": "i64", "value": "9219994337134247936"}]}, 
  {"type": "assert_return", "line": 41, "action": {"type": "invoke", "field": "f64.load", "args": []}, "expected": [{"type": "f64", "value": "9219994337134247936"}]}, 
  {"type": "action", "line": 42, "action": {"type": "invoke", "field": "reset", "args": []}, "expected": []}, 
  {"type": "assert_return", "line": 43, "action": {"type": "invoke", "field": "i64.load", "args": []}, "expected": [{"type": "i64", "value": "0"}]}, 
  {"type": "assert_return", "line": 44, "action": {"type": "invoke", "field": "f64.load", "args": []}, "expected": [{"type": "f64", "value": "0"}]}, 
  {"type": "action", "line": 45, "action": {"type": "invoke", "field": "f64.store", "args": []}, "expected": []}, 
  {"type": "assert_return", "line": 46, "action": {"type": "invoke", "field": "i64.load", "args": []}, "expected": [{"type": "i64", "value": "9219994337134247936"}]}, 
  {"type": "assert_return", "line": 47, "action": {"type": "invoke", "field": "f64.load", "args": []}, "expected": [{"type": "f64", "value": "9219994337134247936"}]}, 
  {"type": "action", "line": 48, "action": {"type": "invoke", "field": "reset", "args": []}, "expected": []}, 
  {"type": "assert_return", "line": 49, "action": {"type": "invoke", "field": "i64.load", "args": []}, "expected": [{"type": "i64", "value": "0"}]}, 
  {"type": "assert_return", "line": 50, "action": {"type": "invoke", "field": "f64.load", "args": []}, "expected": [{"type": "f64", "value": "0"}]}, 
  {"type": "action", "line": 51, "action": {"type": "invoke", "field": "i64.store", "args": []}, "expected": []}, 
  {"type": "assert_return", "line": 52, "action": {"type": "invoke", "field": "i64.load", "args": []}, "expected": [{"type": "i64", "value": "9219994337134247936"}]}, 
  {"type": "assert_return", "line": 53, "action": {"type": "invoke", "field": "f64.load", "args": []}, "expected": [{"type": "f64", "value": "9219994337134247936"}]}, 
  {"type": "module", "line": 57, "filename": "float_memory.2.wasm"}, 
  {"type": "assert_return", "line": 67, "action": {"type": "invoke", "field": "i32.load", "args": []}, "expected": [{"type": "i32", "value": "2141192192"}]}, 
  {"type": "assert_return", "line": 68, "action": {"type": "invoke", "field": "f32.load", "args": []}, "expected": [{"type": "f32", "value": "2141192192"}]}, 
  {"type": "action", "line": 69, "action": {"type": "invoke", "field": "reset", "args": []}, "expected": []}, 
  {"type": "assert_return", "line": 70, "action": {"type": "invoke", "field": "i32.load", "args": []}, "expected": [{"type": "i32", "value": "0"}]}, 
  {"type": "assert_return", "line": 71, "action": {"type": "invoke", "field": "f32.load", "args": []}, "expected": [{"type": "f32", "value": "0"}]}, 
  {"type": "action", "line": 72, "action": {"type": "invoke", "field": "f32.store", "args": []}, "expected": []}, 
  {"type": "assert_return", "line": 73, "action": {"type": "invoke", "field": "i32.load", "args": []}, "expected": [{"type": "i32", "value": "2141192192"}]}, 
  {"type": "assert_return", "line": 74, "action": {"type": "invoke", "field": "f32.load", "args": []}, "expected": [{"type": "f32", "value": "2141192192"}]}, 
  {"type": "action", "line": 75, "action": {"type": "invoke", "field": "reset", "args": []}, "expected": []}, 
  {"type": "assert_return", "line": 76, "action": {"type": "invoke", "field": "i32.load", "args": []}, "expected": [{"type": "i32", "value": "0"}]}, 
  {"type": "assert_return", "line": 77, "action": {"type": "invoke", "field": "f32.load", "args": []}, "expected": [{"type": "f32", "value": "0"}]}, 
  {"type": "action", "line": 78, "action": {"type": "invoke", "field": "i32.store", "args": []}, "expected": []}, 
  {"type": "assert_return", "line": 79, "action": {"type": "invoke", "field": "i32.load", "args": []}, "expected": [{"type": "i32", "value": "2141192192"}]}, 
  {"type": "assert_return", "line": 80, "action": {"type": "invoke", "field": "f32.load", "args": []}, "expected": [{"type": "f32", "value": "2141192192"}]}, 
  {"type": "module", "line": 82, "filename": "float_memory.3.wasm"}, 
  {"type": "assert_return", "line": 92, "action": {"type": "invoke", "field": "i64.load", "args": []}, "expected": [{"type": "i64", "value": "9219994337134247936"}]}, 
  {"type": "assert_return", "line": 93, "action": {"type": "invoke", "field": "f64.load", "args": []}, "expected": [{"type": "f64", "value": "9219994337134247936"}]}, 
  {"type": "action", "line": 94, "action": {"type": "invoke", "field": "reset", "args": []}, "expected": []}, 
  {"type": "assert_return", "line": 95, "action": {"type": "invoke", "field": "i64.load", "args": []}, "expected": [{"type": "i64", "value": "0"}]}, 
  {"type": "assert_return", "line": 96, "action": {"type": "invoke", "field": "f64.load", "args": []}, "expected": [{"type": "f64", "value": "0"}]}, 
  {"type": "action", "line": 97, "action": {"type": "invoke", "field": "f64.store", "args": []}, "expected": []}, 
  {"type": "assert_return", "line": 98, "action": {"type": "invoke", "field": "i64.load", "args": []}, "expected": [{"type": "i64", "value": "9219994337134247936"}]}, 
  {"type": "assert_return", "line": 99, "action": {"type": "invoke", "field": "f64.load", "args": []}, "expected": [{"type": "f64", "value": "9219994337134247936"}]}, 
  {"type": "action", "line": 100, "action": {"type": "invoke", "field": "reset", "args": []}, "expected": []}, 
  {"type": "assert_return", "line": 101, "action": {"type": "invoke", "field": "i64.load", "args": []}, "expected": [{"type": "i64", "value": "0"}]}, 
  {"type": "assert_return", "line": 102, "action": {"type": "invoke", "field": "f64.load", "args": []}, "expected": [{"type": "f64", "value": "0"}]}, 
  {"type": "action", "line": 103, "action": {"type": "invoke", "field": "i64.store", "args": []}, "expected": []}, 
  {"type": "assert_return", "line": 104, "action": {"type": "invoke", "field": "i64.load", "args": []}, "expected": [{"type": "i64", "value": "9219994337134247936"}]}, 
  {"type": "assert_return", "line": 105, "action": {"type": "invoke", "field": "f64.load", "args": []}, "expected": [{"type": "f64", "value": "9219994337134247936"}]}, 
  {"type": "module", "line": 109, "filename": "float_memory.4.wasm"}, 
  {"type": "assert_return", "line": 119, "action": {"type": "invoke", "field": "i32.load", "args": []}, "expected": [{"type": "i32", "value": "2144337921"}]}, 
  {"type": "assert_return", "line": 120, "action": {"type": "invoke", "field": "f32.load", "args": []}, "expected": [{"type": "f32", "value": "2144337921"}]}, 
  {"type": "action", "line": 121, "action": {"type": "invoke", "field": "reset", "args": []}, "expected": []}, 
  {"type": "assert_return", "line": 122, "action": {"type": "invoke", "field": "i32.load", "args": []}, "expected": [{"type": "i32", "value": "0"}]}, 
  {"type": "assert_return", "line": 123, "action": {"type": "invoke", "field": "f32.load", "args": []}, "expected": [{"type": "f32", "value": "0"}]}, 
  {"type": "action", "line": 124, "action": {"type": "invoke", "field": "f32.store", "args": []}, "expected": []}, 
  {"type": "assert_return", "line": 125, "action": {"type": "invoke", "field": "i32.load", "args": []}, "expected": [{"type": "i32", "value": "2144337921"}]}, 
  {"type": "assert_return", "line": 126, "action": {"type": "invoke", "field": "f32.load", "args": []}, "expected": [{"type": "f32", "value": "2144337921"}]}, 
  {"type": "action", "line": 127, "action": {"type": "invoke", "field": "reset", "args": []}, "expected": []}, 
  {"type": "assert_return", "line": 128, "action": {"type": "invoke", "field": "i32.load", "args": []}, "expected": [{"type": "i32", "value": "0"}]}, 
  {"type": "assert_return", "line": 129, "action": {"type": "invoke", "field": "f32.load", "args": []}, "expected": [{"type": "f32", "value": "0"}]}, 
  {"type": "action", "line": 130, "action": {"type": "invoke", "field": "i32.store", "args": []}, "expected": []}, 
  {"type": "assert_return", "line": 131, "action": {"type": "invoke", "field": "i32.load", "args": []}, "expected": [{"type": "i32", "value": "2144337921"}]}, 
  {"type": "assert_return", "line": 132, "action": {"type": "invoke", "field": "f32.load", "args": []}, "expected": [{"type": "f32", "value": "2144337921"}]}, 
  {"type": "module", "line": 134, "filename": "float_memory.5.wasm"}, 
  {"type": "assert_return", "line": 144, "action": {"type": "invoke", "field": "i64.load", "args": []}, "expected": [{"type": "i64", "value": "9222246136947933185"}]}, 
  {"type": "assert_return", "line": 145, "action": {"type": "invoke", "field": "f64.load", "args": []}, "expected": [{"type": "f64", "value": "9222246136947933185"}]}, 
  {"type": "action", "line": 146, "action": {"type": "invoke", "field": "reset", "args": []}, "expected": []}, 
  {"type": "assert_return", "line": 147, "action": {"type": "invoke", "field": "i64.load", "args": []}, "expected": [{"type": "i64", "value": "0"}]}, 
  {"type": "assert_return", "line": 148, "action": {"type": "invoke", "field": "f64.load", "args": []}, "expected": [{"type": "f64", "value": "0"}]}, 
  {"type": "action", "line": 149, "action": {"type": "invoke", "field": "f64.store", "args": []}, "expected": []}, 
  {"type": "assert_return", "line": 150, "action": {"type": "invoke", "field": "i64.load", "args": []}, "expected": [{"type": "i64", "value": "9222246136947933185"}]}, 
  {"type": "assert_return", "line": 151, "action": {"type": "invoke", "field": "f64.load", "args": []}, "expected": [{"type": "f64", "value": "9222246136947933185"}]}, 
  {"type": "action", "line": 152, "action": {"type": "invoke", "field": "reset", "args": []}, "expected": []}, 
  {"type": "assert_return", "line": 153, "action": {"type": "invoke", "field": "i64.load", "args": []}, "expected": [{"type": "i64", "value": "0"}]}, 
  {"type": "assert_return", "line": 154, "action": {"type": "invoke", "field": "f64.load", "args": []}, "expected": [{"type": "f64", "value": "0"}]}, 
  {"type": "action", "line": 155, "action": {"type": "invoke", "field": "i64.store", "args": []}, "expected": []}, 
  {"type": "assert_return", "line": 156, "action": {"type": "invoke", "field": "i64.load", "args": []}, "expected": [{"type": "i64", "value": "9222246136947933185"}]}, 
  {"type": "assert_return", "line": 157, "action": {"type": "invoke", "field": "f64.load", "args": []}, "expected": [{"type": "f64", "value": "9222246136947933185"}]}]},
  "code": [
    "(module (memory (data \"\\00\\00\\a0\\7f\"))\n  (func (export \"f32.load\") (result f32) (f32.load (i32.const 0)))\n  (func (export \"i32.load\") (result i32) (i32.load (i32.const 0)))\n  (func (export \"f32.store\") (f32.store (i32.const 0) (f32.const nan:0x200000)))\n  (func (export \"i32.store\") (i32.store (i32.const 0) (i32.const 0x7fa00000)))\n  (func (export \"reset\") (i32.store (i32.const 0) (i32.const 0))))",
    "(assert_return (invoke \"i32.load\") (i32.const 0x7fa00000))",
    "(assert_return (invoke \"f32.load\") (f32.const nan:0x200000))",
    "(invoke \"reset\")",
    "(assert_return (invoke \"i32.load\") (i32.const 0x0))",
    "(assert_return (invoke \"f32.load\") (f32.const 0.0))",
    "(invoke \"f32.store\")",
    "(assert_return (invoke \"i32.load\") (i32.const 0x7fa00000))",
    "(assert_return (invoke \"f32.load\") (f32.const nan:0x200000))",
    "(invoke \"reset\")",
    "(assert_return (invoke \"i32.load\") (i32.const 0x0))",
    "(assert_return (invoke \"f32.load\") (f32.const 0.0))",
    "(invoke \"i32.store\")",
    "(assert_return (invoke \"i32.load\") (i32.const 0x7fa00000))",
    "(assert_return (invoke \"f32.load\") (f32.const nan:0x200000))",
    "(module (memory (data \"\\00\\00\\00\\00\\00\\00\\f4\\7f\"))\n  (func (export \"f64.load\") (result f64) (f64.load (i32.const 0)))\n  (func (export \"i64.load\") (result i64) (i64.load (i32.const 0)))\n  (func (export \"f64.store\") (f64.store (i32.const 0) (f64.const nan:0x4000000000000)))\n  (func (export \"i64.store\") (i64.store (i32.const 0) (i64.const 0x7ff4000000000000)))\n  (func (export \"reset\") (i64.store (i32.const 0) (i64.const 0))))",
    "(assert_return (invoke \"i64.load\") (i64.const 0x7ff4000000000000))",
    "(assert_return (invoke \"f64.load\") (f64.const nan:0x4000000000000))",
    "(invoke \"reset\")",
    "(assert_return (invoke \"i64.load\") (i64.const 0x0))",
    "(assert_return (invoke \"f64.load\") (f64.const 0.0))",
    "(invoke \"f64.store\")",
    "(assert_return (invoke \"i64.load\") (i64.const 0x7ff4000000000000))",
    "(assert_return (invoke \"f64.load\") (f64.const nan:0x4000000000000))",
    "(invoke \"reset\")",
    "(assert_return (invoke \"i64.load\") (i64.const 0x0))",
    "(assert_return (invoke \"f64.load\") (f64.const 0.0))",
    "(invoke \"i64.store\")",
    "(assert_return (invoke \"i64.load\") (i64.const 0x7ff4000000000000))",
    "(assert_return (invoke \"f64.load\") (f64.const nan:0x4000000000000))",
    "(module (memory (data \"\\00\\00\\00\\a0\\7f\"))\n  (func (export \"f32.load\") (result f32) (f32.load (i32.const 1)))\n  (func (export \"i32.load\") (result i32) (i32.load (i32.const 1)))\n  (func (export \"f32.store\") (f32.store (i32.const 1) (f32.const nan:0x200000)))\n  (func (export \"i32.store\") (i32.store (i32.const 1) (i32.const 0x7fa00000)))\n  (func (export \"reset\") (i32.store (i32.const 1) (i32.const 0))))",
    "(assert_return (invoke \"i32.load\") (i32.const 0x7fa00000))",
    "(assert_return (invoke \"f32.load\") (f32.const nan:0x200000))",
    "(invoke \"reset\")",
    "(assert_return (invoke \"i32.load\") (i32.const 0x0))",
    "(assert_return (invoke \"f32.load\") (f32.const 0.0))",
    "(invoke \"f32.store\")",
    "(assert_return (invoke \"i32.load\") (i32.const 0x7fa00000))",
    "(assert_return (invoke \"f32.load\") (f32.const nan:0x200000))",
    "(invoke \"reset\")",
    "(assert_return (invoke \"i32.load\") (i32.const 0x0))",
    "(assert_return (invoke \"f32.load\") (f32.const 0.0))",
    "(invoke \"i32.store\")",
    "(assert_return (invoke \"i32.load\") (i32.const 0x7fa00000))",
    "(assert_return (invoke \"f32.load\") (f32.const nan:0x200000))",
    "(module (memory (data \"\\00\\00\\00\\00\\00\\00\\00\\f4\\7f\"))\n  (func (export \"f64.load\") (result f64) (f64.load (i32.const 1)))\n  (func (export \"i64.load\") (result i64) (i64.load (i32.const 1)))\n  (func (export \"f64.store\") (f64.store (i32.const 1) (f64.const nan:0x4000000000000)))\n  (func (export \"i64.store\") (i64.store (i32.const 1) (i64.const 0x7ff4000000000000)))\n  (func (export \"reset\") (i64.store (i32.const 1) (i64.const 0))))",
    "(assert_return (invoke \"i64.load\") (i64.const 0x7ff4000000000000))",
    "(assert_return (invoke \"f64.load\") (f64.const nan:0x4000000000000))",
    "(invoke \"reset\")",
    "(assert_return (invoke \"i64.load\") (i64.const 0x0))",
    "(assert_return (invoke \"f64.load\") (f64.const 0.0))",
    "(invoke \"f64.store\")",
    "(assert_return (invoke \"i64.load\") (i64.const 0x7ff4000000000000))",
    "(assert_return (invoke \"f64.load\") (f64.const nan:0x4000000000000))",
    "(invoke \"reset\")",
    "(assert_return (invoke \"i64.load\") (i64.const 0x0))",
    "(assert_return (invoke \"f64.load\") (f64.const 0.0))",
    "(invoke \"i64.store\")",
    "(assert_return (invoke \"i64.load\") (i64.const 0x7ff4000000000000))",
    "(assert_return (invoke \"f64.load\") (f64.const nan:0x4000000000000))",
    "(module (memory (data \"\\01\\00\\d0\\7f\"))\n  (func (export \"f32.load\") (result f32) (f32.load (i32.const 0)))\n  (func (export \"i32.load\") (result i32) (i32.load (i32.const 0)))\n  (func (export \"f32.store\") (f32.store (i32.const 0) (f32.const nan:0x500001)))\n  (func (export \"i32.store\") (i32.store (i32.const 0) (i32.const 0x7fd00001)))\n  (func (export \"reset\") (i32.store (i32.const 0) (i32.const 0))))",
    "(assert_return (invoke \"i32.load\") (i32.const 0x7fd00001))",
    "(assert_return (invoke \"f32.load\") (f32.const nan:0x500001))",
    "(invoke \"reset\")",
    "(assert_return (invoke \"i32.load\") (i32.const 0x0))",
    "(assert_return (invoke \"f32.load\") (f32.const 0.0))",
    "(invoke \"f32.store\")",
    "(assert_return (invoke \"i32.load\") (i32.const 0x7fd00001))",
    "(assert_return (invoke \"f32.load\") (f32.const nan:0x500001))",
    "(invoke \"reset\")",
    "(assert_return (invoke \"i32.load\") (i32.const 0x0))",
    "(assert_return (invoke \"f32.load\") (f32.const 0.0))",
    "(invoke \"i32.store\")",
    "(assert_return (invoke \"i32.load\") (i32.const 0x7fd00001))",
    "(assert_return (invoke \"f32.load\") (f32.const nan:0x500001))",
    "(module (memory (data \"\\01\\00\\00\\00\\00\\00\\fc\\7f\"))\n  (func (export \"f64.load\") (result f64) (f64.load (i32.const 0)))\n  (func (export \"i64.load\") (result i64) (i64.load (i32.const 0)))\n  (func (export \"f64.store\") (f64.store (i32.const 0) (f64.const nan:0xc000000000001)))\n  (func (export \"i64.store\") (i64.store (i32.const 0) (i64.const 0x7ffc000000000001)))\n  (func (export \"reset\") (i64.store (i32.const 0) (i64.const 0))))",
    "(assert_return (invoke \"i64.load\") (i64.const 0x7ffc000000000001))",
    "(assert_return (invoke \"f64.load\") (f64.const nan:0xc000000000001))",
    "(invoke \"reset\")",
    "(assert_return (invoke \"i64.load\") (i64.const 0x0))",
    "(assert_return (invoke \"f64.load\") (f64.const 0.0))",
    "(invoke \"f64.store\")",
    "(assert_return (invoke \"i64.load\") (i64.const 0x7ffc000000000001))",
    "(assert_return (invoke \"f64.load\") (f64.const nan:0xc000000000001))",
    "(invoke \"reset\")",
    "(assert_return (invoke \"i64.load\") (i64.const 0x0))",
    "(assert_return (invoke \"f64.load\") (f64.const 0.0))",
    "(invoke \"i64.store\")",
    "(assert_return (invoke \"i64.load\") (i64.const 0x7ffc000000000001))",
    "(assert_return (invoke \"f64.load\") (f64.const nan:0xc000000000001))"
  ],
  "dump": {
    "float_memory.0.wasm": {
      "header": "\nfloat_memory.0.wasm:\tfile format wasm 0x1\n\nSections:\n\n     Type start=0x0000000a end=0x00000016 (size=0x0000000c) count: 3\n Function start=0x00000018 end=0x0000001e (size=0x00000006) count: 5\n   Memory start=0x00000020 end=0x00000024 (size=0x00000004) count: 1\n   Export start=0x00000026 end=0x0000005d (size=0x00000037) count: 5\n     Code start=0x0000005f end=0x00000095 (size=0x00000036) count: 5\n     Data start=0x00000097 end=0x000000a1 (size=0x0000000a) count: 1\n",
      "details": "\nfloat_memory.0.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nType[3]:\n - type[0] () -> f32\n - type[1] () -> i32\n - type[2] () -> nil\nFunction[5]:\n - func[0] sig=0 <f32.load>\n - func[1] sig=1 <i32.load>\n - func[2] sig=2 <f32.store>\n - func[3] sig=2 <i32.store>\n - func[4] sig=2 <reset>\nMemory[1]:\n - memory[0] pages: initial=1 max=1\nExport[5]:\n - func[0] <f32.load> -> \"f32.load\"\n - func[1] <i32.load> -> \"i32.load\"\n - func[2] <f32.store> -> \"f32.store\"\n - func[3] <i32.store> -> \"i32.store\"\n - func[4] <reset> -> \"reset\"\nCode[5]:\n - func[0] size=7 <f32.load>\n - func[1] size=7 <i32.load>\n - func[2] size=12 <f32.store>\n - func[3] size=13 <i32.store>\n - func[4] size=9 <reset>\nData[1]:\n - segment[0] memory=0 size=4 - init i32=0\n  - 0000000: 0000 a07f                                ....\n",
      "disassemble": "\nfloat_memory.0.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n000061 func[0] <f32.load>:\n 000062: 41 00                      | i32.const 0\n 000064: 2a 02 00                   | f32.load 2 0\n 000067: 0b                         | end\n000069 func[1] <i32.load>:\n 00006a: 41 00                      | i32.const 0\n 00006c: 28 02 00                   | i32.load 2 0\n 00006f: 0b                         | end\n000071 func[2] <f32.store>:\n 000072: 41 00                      | i32.const 0\n 000074: 43 00 00 a0 7f             | f32.const nan:0x200000\n 000079: 38 02 00                   | f32.store 2 0\n 00007c: 0b                         | end\n00007e func[3] <i32.store>:\n 00007f: 41 00                      | i32.const 0\n 000081: 41 80 80 80 fd 07          | i32.const 2141192192\n 000087: 36 02 00                   | i32.store 2 0\n 00008a: 0b                         | end\n00008c func[4] <reset>:\n 00008d: 41 00                      | i32.const 0\n 00008f: 41 00                      | i32.const 0\n 000091: 36 02 00                   | i32.store 2 0\n 000094: 0b                         | end\n"
    },
    "float_memory.1.wasm": {
      "header": "\nfloat_memory.1.wasm:\tfile format wasm 0x1\n\nSections:\n\n     Type start=0x0000000a end=0x00000016 (size=0x0000000c) count: 3\n Function start=0x00000018 end=0x0000001e (size=0x00000006) count: 5\n   Memory start=0x00000020 end=0x00000024 (size=0x00000004) count: 1\n   Export start=0x00000026 end=0x0000005d (size=0x00000037) count: 5\n     Code start=0x0000005f end=0x0000009e (size=0x0000003f) count: 5\n     Data start=0x000000a0 end=0x000000ae (size=0x0000000e) count: 1\n",
      "details": "\nfloat_memory.1.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nType[3]:\n - type[0] () -> f64\n - type[1] () -> i64\n - type[2] () -> nil\nFunction[5]:\n - func[0] sig=0 <f64.load>\n - func[1] sig=1 <i64.load>\n - func[2] sig=2 <f64.store>\n - func[3] sig=2 <i64.store>\n - func[4] sig=2 <reset>\nMemory[1]:\n - memory[0] pages: initial=1 max=1\nExport[5]:\n - func[0] <f64.load> -> \"f64.load\"\n - func[1] <i64.load> -> \"i64.load\"\n - func[2] <f64.store> -> \"f64.store\"\n - func[3] <i64.store> -> \"i64.store\"\n - func[4] <reset> -> \"reset\"\nCode[5]:\n - func[0] size=7 <f64.load>\n - func[1] size=7 <i64.load>\n - func[2] size=16 <f64.store>\n - func[3] size=18 <i64.store>\n - func[4] size=9 <reset>\nData[1]:\n - segment[0] memory=0 size=8 - init i32=0\n  - 0000000: 0000 0000 0000 f47f                      ........\n",
      "disassemble": "\nfloat_memory.1.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n000061 func[0] <f64.load>:\n 000062: 41 00                      | i32.const 0\n 000064: 2b 03 00                   | f64.load 3 0\n 000067: 0b                         | end\n000069 func[1] <i64.load>:\n 00006a: 41 00                      | i32.const 0\n 00006c: 29 03 00                   | i64.load 3 0\n 00006f: 0b                         | end\n000071 func[2] <f64.store>:\n 000072: 41 00                      | i32.const 0\n 000074: 44 00 00 00 00 00 00 f4 7f | f64.const nan:0x4000000000000\n 00007d: 39 03 00                   | f64.store 3 0\n 000080: 0b                         | end\n000082 func[3] <i64.store>:\n 000083: 41 00                      | i32.const 0\n 000085: 42 80 80 80 80 80 80 80 fa | i64.const 9219994337134247936\n 00008e: ff 00                      | \n 000090: 37 03 00                   | i64.store 3 0\n 000093: 0b                         | end\n000095 func[4] <reset>:\n 000096: 41 00                      | i32.const 0\n 000098: 42 00                      | i64.const 0\n 00009a: 37 03 00                   | i64.store 3 0\n 00009d: 0b                         | end\n"
    },
    "float_memory.2.wasm": {
      "header": "\nfloat_memory.2.wasm:\tfile format wasm 0x1\n\nSections:\n\n     Type start=0x0000000a end=0x00000016 (size=0x0000000c) count: 3\n Function start=0x00000018 end=0x0000001e (size=0x00000006) count: 5\n   Memory start=0x00000020 end=0x00000024 (size=0x00000004) count: 1\n   Export start=0x00000026 end=0x0000005d (size=0x00000037) count: 5\n     Code start=0x0000005f end=0x00000095 (size=0x00000036) count: 5\n     Data start=0x00000097 end=0x000000a2 (size=0x0000000b) count: 1\n",
      "details": "\nfloat_memory.2.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nType[3]:\n - type[0] () -> f32\n - type[1] () -> i32\n - type[2] () -> nil\nFunction[5]:\n - func[0] sig=0 <f32.load>\n - func[1] sig=1 <i32.load>\n - func[2] sig=2 <f32.store>\n - func[3] sig=2 <i32.store>\n - func[4] sig=2 <reset>\nMemory[1]:\n - memory[0] pages: initial=1 max=1\nExport[5]:\n - func[0] <f32.load> -> \"f32.load\"\n - func[1] <i32.load> -> \"i32.load\"\n - func[2] <f32.store> -> \"f32.store\"\n - func[3] <i32.store> -> \"i32.store\"\n - func[4] <reset> -> \"reset\"\nCode[5]:\n - func[0] size=7 <f32.load>\n - func[1] size=7 <i32.load>\n - func[2] size=12 <f32.store>\n - func[3] size=13 <i32.store>\n - func[4] size=9 <reset>\nData[1]:\n - segment[0] memory=0 size=5 - init i32=0\n  - 0000000: 0000 00a0 7f                             .....\n",
      "disassemble": "\nfloat_memory.2.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n000061 func[0] <f32.load>:\n 000062: 41 01                      | i32.const 1\n 000064: 2a 02 00                   | f32.load 2 0\n 000067: 0b                         | end\n000069 func[1] <i32.load>:\n 00006a: 41 01                      | i32.const 1\n 00006c: 28 02 00                   | i32.load 2 0\n 00006f: 0b                         | end\n000071 func[2] <f32.store>:\n 000072: 41 01                      | i32.const 1\n 000074: 43 00 00 a0 7f             | f32.const nan:0x200000\n 000079: 38 02 00                   | f32.store 2 0\n 00007c: 0b                         | end\n00007e func[3] <i32.store>:\n 00007f: 41 01                      | i32.const 1\n 000081: 41 80 80 80 fd 07          | i32.const 2141192192\n 000087: 36 02 00                   | i32.store 2 0\n 00008a: 0b                         | end\n00008c func[4] <reset>:\n 00008d: 41 01                      | i32.const 1\n 00008f: 41 00                      | i32.const 0\n 000091: 36 02 00                   | i32.store 2 0\n 000094: 0b                         | end\n"
    },
    "float_memory.3.wasm": {
      "header": "\nfloat_memory.3.wasm:\tfile format wasm 0x1\n\nSections:\n\n     Type start=0x0000000a end=0x00000016 (size=0x0000000c) count: 3\n Function start=0x00000018 end=0x0000001e (size=0x00000006) count: 5\n   Memory start=0x00000020 end=0x00000024 (size=0x00000004) count: 1\n   Export start=0x00000026 end=0x0000005d (size=0x00000037) count: 5\n     Code start=0x0000005f end=0x0000009e (size=0x0000003f) count: 5\n     Data start=0x000000a0 end=0x000000af (size=0x0000000f) count: 1\n",
      "details": "\nfloat_memory.3.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nType[3]:\n - type[0] () -> f64\n - type[1] () -> i64\n - type[2] () -> nil\nFunction[5]:\n - func[0] sig=0 <f64.load>\n - func[1] sig=1 <i64.load>\n - func[2] sig=2 <f64.store>\n - func[3] sig=2 <i64.store>\n - func[4] sig=2 <reset>\nMemory[1]:\n - memory[0] pages: initial=1 max=1\nExport[5]:\n - func[0] <f64.load> -> \"f64.load\"\n - func[1] <i64.load> -> \"i64.load\"\n - func[2] <f64.store> -> \"f64.store\"\n - func[3] <i64.store> -> \"i64.store\"\n - func[4] <reset> -> \"reset\"\nCode[5]:\n - func[0] size=7 <f64.load>\n - func[1] size=7 <i64.load>\n - func[2] size=16 <f64.store>\n - func[3] size=18 <i64.store>\n - func[4] size=9 <reset>\nData[1]:\n - segment[0] memory=0 size=9 - init i32=0\n  - 0000000: 0000 0000 0000 00f4 7f                   .........\n",
      "disassemble": "\nfloat_memory.3.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n000061 func[0] <f64.load>:\n 000062: 41 01                      | i32.const 1\n 000064: 2b 03 00                   | f64.load 3 0\n 000067: 0b                         | end\n000069 func[1] <i64.load>:\n 00006a: 41 01                      | i32.const 1\n 00006c: 29 03 00                   | i64.load 3 0\n 00006f: 0b                         | end\n000071 func[2] <f64.store>:\n 000072: 41 01                      | i32.const 1\n 000074: 44 00 00 00 00 00 00 f4 7f | f64.const nan:0x4000000000000\n 00007d: 39 03 00                   | f64.store 3 0\n 000080: 0b                         | end\n000082 func[3] <i64.store>:\n 000083: 41 01                      | i32.const 1\n 000085: 42 80 80 80 80 80 80 80 fa | i64.const 9219994337134247936\n 00008e: ff 00                      | \n 000090: 37 03 00                   | i64.store 3 0\n 000093: 0b                         | end\n000095 func[4] <reset>:\n 000096: 41 01                      | i32.const 1\n 000098: 42 00                      | i64.const 0\n 00009a: 37 03 00                   | i64.store 3 0\n 00009d: 0b                         | end\n"
    },
    "float_memory.4.wasm": {
      "header": "\nfloat_memory.4.wasm:\tfile format wasm 0x1\n\nSections:\n\n     Type start=0x0000000a end=0x00000016 (size=0x0000000c) count: 3\n Function start=0x00000018 end=0x0000001e (size=0x00000006) count: 5\n   Memory start=0x00000020 end=0x00000024 (size=0x00000004) count: 1\n   Export start=0x00000026 end=0x0000005d (size=0x00000037) count: 5\n     Code start=0x0000005f end=0x00000095 (size=0x00000036) count: 5\n     Data start=0x00000097 end=0x000000a1 (size=0x0000000a) count: 1\n",
      "details": "\nfloat_memory.4.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nType[3]:\n - type[0] () -> f32\n - type[1] () -> i32\n - type[2] () -> nil\nFunction[5]:\n - func[0] sig=0 <f32.load>\n - func[1] sig=1 <i32.load>\n - func[2] sig=2 <f32.store>\n - func[3] sig=2 <i32.store>\n - func[4] sig=2 <reset>\nMemory[1]:\n - memory[0] pages: initial=1 max=1\nExport[5]:\n - func[0] <f32.load> -> \"f32.load\"\n - func[1] <i32.load> -> \"i32.load\"\n - func[2] <f32.store> -> \"f32.store\"\n - func[3] <i32.store> -> \"i32.store\"\n - func[4] <reset> -> \"reset\"\nCode[5]:\n - func[0] size=7 <f32.load>\n - func[1] size=7 <i32.load>\n - func[2] size=12 <f32.store>\n - func[3] size=13 <i32.store>\n - func[4] size=9 <reset>\nData[1]:\n - segment[0] memory=0 size=4 - init i32=0\n  - 0000000: 0100 d07f                                ....\n",
      "disassemble": "\nfloat_memory.4.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n000061 func[0] <f32.load>:\n 000062: 41 00                      | i32.const 0\n 000064: 2a 02 00                   | f32.load 2 0\n 000067: 0b                         | end\n000069 func[1] <i32.load>:\n 00006a: 41 00                      | i32.const 0\n 00006c: 28 02 00                   | i32.load 2 0\n 00006f: 0b                         | end\n000071 func[2] <f32.store>:\n 000072: 41 00                      | i32.const 0\n 000074: 43 01 00 d0 7f             | f32.const nan:0x500001\n 000079: 38 02 00                   | f32.store 2 0\n 00007c: 0b                         | end\n00007e func[3] <i32.store>:\n 00007f: 41 00                      | i32.const 0\n 000081: 41 81 80 c0 fe 07          | i32.const 2144337921\n 000087: 36 02 00                   | i32.store 2 0\n 00008a: 0b                         | end\n00008c func[4] <reset>:\n 00008d: 41 00                      | i32.const 0\n 00008f: 41 00                      | i32.const 0\n 000091: 36 02 00                   | i32.store 2 0\n 000094: 0b                         | end\n"
    },
    "float_memory.5.wasm": {
      "header": "\nfloat_memory.5.wasm:\tfile format wasm 0x1\n\nSections:\n\n     Type start=0x0000000a end=0x00000016 (size=0x0000000c) count: 3\n Function start=0x00000018 end=0x0000001e (size=0x00000006) count: 5\n   Memory start=0x00000020 end=0x00000024 (size=0x00000004) count: 1\n   Export start=0x00000026 end=0x0000005d (size=0x00000037) count: 5\n     Code start=0x0000005f end=0x0000009e (size=0x0000003f) count: 5\n     Data start=0x000000a0 end=0x000000ae (size=0x0000000e) count: 1\n",
      "details": "\nfloat_memory.5.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nType[3]:\n - type[0] () -> f64\n - type[1] () -> i64\n - type[2] () -> nil\nFunction[5]:\n - func[0] sig=0 <f64.load>\n - func[1] sig=1 <i64.load>\n - func[2] sig=2 <f64.store>\n - func[3] sig=2 <i64.store>\n - func[4] sig=2 <reset>\nMemory[1]:\n - memory[0] pages: initial=1 max=1\nExport[5]:\n - func[0] <f64.load> -> \"f64.load\"\n - func[1] <i64.load> -> \"i64.load\"\n - func[2] <f64.store> -> \"f64.store\"\n - func[3] <i64.store> -> \"i64.store\"\n - func[4] <reset> -> \"reset\"\nCode[5]:\n - func[0] size=7 <f64.load>\n - func[1] size=7 <i64.load>\n - func[2] size=16 <f64.store>\n - func[3] size=18 <i64.store>\n - func[4] size=9 <reset>\nData[1]:\n - segment[0] memory=0 size=8 - init i32=0\n  - 0000000: 0100 0000 0000 fc7f                      ........\n",
      "disassemble": "\nfloat_memory.5.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n000061 func[0] <f64.load>:\n 000062: 41 00                      | i32.const 0\n 000064: 2b 03 00                   | f64.load 3 0\n 000067: 0b                         | end\n000069 func[1] <i64.load>:\n 00006a: 41 00                      | i32.const 0\n 00006c: 29 03 00                   | i64.load 3 0\n 00006f: 0b                         | end\n000071 func[2] <f64.store>:\n 000072: 41 00                      | i32.const 0\n 000074: 44 01 00 00 00 00 00 fc 7f | f64.const nan:0xc000000000001\n 00007d: 39 03 00                   | f64.store 3 0\n 000080: 0b                         | end\n000082 func[3] <i64.store>:\n 000083: 41 00                      | i32.const 0\n 000085: 42 81 80 80 80 80 80 80 fe | i64.const 9222246136947933185\n 00008e: ff 00                      | \n 000090: 37 03 00                   | i64.store 3 0\n 000093: 0b                         | end\n000095 func[4] <reset>:\n 000096: 41 00                      | i32.const 0\n 000098: 42 00                      | i64.const 0\n 00009a: 37 03 00                   | i64.store 3 0\n 00009d: 0b                         | end\n"
    }
  }
}
