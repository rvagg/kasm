{
  "bin": {
    "type.0.wasm": "AGFzbQEAAAABiQEXYAAAYAAAYAF/AGABfwBgAAF/YAF/AX9gAX8Bf2ACfXwAYAACfn1gAn9+An18YAJ9fABgAn18AGACfXwAYAJ9fABgAAJ+fWACf34CfXxgAn9+An18YAZ9fH98f38AYAAFfn59fX9gBH9/fn8EfXx8f2ADfXx/AGAAA35+fWAFf39+f38EfXx8fw==",
    "type.1.wat": "KHR5cGUgKGZ1bmMgKHJlc3VsdCBpMzIpIChwYXJhbSBpMzIpKSk=",
    "type.2.wat": "KHR5cGUgKGZ1bmMgKHJlc3VsdCAkeCBpMzIpKSk="
  },
  "spec": {"source_filename": "/workspace/wasm-spec/test/core/type.wast",
 "commands": [
  {"type": "module", "line": 3, "filename": "type.0.wasm"}, 
  {"type": "assert_malformed", "line": 44, "filename": "type.1.wat", "text": "unexpected token", "module_type": "text"}, 
  {"type": "assert_malformed", "line": 48, "filename": "type.2.wat", "text": "unexpected token", "module_type": "text"}]},
  "code": [
    "(module (type (func)) (type $t (func)) (type (func (param i32))) (type (func (param $x i32))) (type (func (result i32))) (type (func (param i32) (result i32))) (type (func (param $x i32) (result i32))) (type (func (param f32 f64))) (type (func (result i64 f32))) (type (func (param i32 i64) (result f32 f64))) (type (func (param f32) (param f64))) (type (func (param $x f32) (param f64))) (type (func (param f32) (param $y f64))) (type (func (param $x f32) (param $y f64))) (type (func (result i64) (result f32))) (type (func (param i32) (param i64) (result f32) (result f64))) (type (func (param $x i32) (param $y i64) (result f32) (result f64))) (type (func (param f32 f64) (param $x i32) (param f64 i32 i32))) (type (func (result i64 i64 f32) (result f32 i32))) (type (func (param i32 i32) (param i64 i32) (result f32 f64) (result f64 i32)) ) (type (func (param) (param $x f32) (param) (param) (param f64 i32) (param))) (type (func (result) (result) (result i64 i64) (result) (result f32) (result)) ) (type (func (param i32 i32) (param i64 i32) (param) (param $x i32) (param) (result) (result f32 f64) (result f64 i32) (result) ) ))",
    "(assert_malformed (module quote \"(type (func (result i32) (param i32)))\") \"unexpected token\")",
    "(assert_malformed (module quote \"(type (func (result $x i32)))\") \"unexpected token\")"
  ],
  "dump": {
    "type.0.wasm": {
      "header": "\ntype.0.wasm:\tfile format wasm 0x1\n\nSections:\n\n     Type start=0x0000000b end=0x00000094 (size=0x00000089) count: 23\n",
      "details": "\ntype.0.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nType[23]:\n - type[0] () -> nil\n - type[1] () -> nil\n - type[2] (i32) -> nil\n - type[3] (i32) -> nil\n - type[4] () -> i32\n - type[5] (i32) -> i32\n - type[6] (i32) -> i32\n - type[7] (f32, f64) -> nil\n - type[8] () -> (i64, f32)\n - type[9] (i32, i64) -> (f32, f64)\n - type[10] (f32, f64) -> nil\n - type[11] (f32, f64) -> nil\n - type[12] (f32, f64) -> nil\n - type[13] (f32, f64) -> nil\n - type[14] () -> (i64, f32)\n - type[15] (i32, i64) -> (f32, f64)\n - type[16] (i32, i64) -> (f32, f64)\n - type[17] (f32, f64, i32, f64, i32, i32) -> nil\n - type[18] () -> (i64, i64, f32, f32, i32)\n - type[19] (i32, i32, i64, i32) -> (f32, f64, f64, i32)\n - type[20] (f32, f64, i32) -> nil\n - type[21] () -> (i64, i64, f32)\n - type[22] (i32, i32, i64, i32, i32) -> (f32, f64, f64, i32)\n",
      "disassemble": "\ntype.0.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n"
    }
  }
}
