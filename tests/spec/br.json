{
  "bin": {
    "br.0.wasm": "AGFzbQEAAAABKwlgA39/fwF/YAAAYAABf2AAAX5gAAF9YAABfGAAAnx8YAACf35gAn9/AX8DS0oBAQEBAQEBAQECAwQFBgEBAQICAgICAQICAQICAwcCCAgICAICAAICAgICAgICAgICAgQDAgICAgICBAIDAgICAgICAgICAgICAgQFAXABAQEFAwEAAQYGAX8BQQoLB5IKSAh0eXBlLWkzMgABCHR5cGUtaTY0AAIIdHlwZS1mMzIAAwh0eXBlLWY2NAAEDHR5cGUtaTMyLWkzMgAFDHR5cGUtaTY0LWk2NAAGDHR5cGUtZjMyLWYzMgAHDHR5cGUtZjY0LWY2NAAIDnR5cGUtaTMyLXZhbHVlAAkOdHlwZS1pNjQtdmFsdWUACg50eXBlLWYzMi12YWx1ZQALDnR5cGUtZjY0LXZhbHVlAAwSdHlwZS1mNjQtZjY0LXZhbHVlAA0OYXMtYmxvY2stZmlyc3QADgxhcy1ibG9jay1taWQADw1hcy1ibG9jay1sYXN0ABAOYXMtYmxvY2stdmFsdWUAEQ1hcy1sb29wLWZpcnN0ABILYXMtbG9vcC1taWQAEwxhcy1sb29wLWxhc3QAFAthcy1ici12YWx1ZQAVDWFzLWJyX2lmLWNvbmQAFg5hcy1icl9pZi12YWx1ZQAXE2FzLWJyX2lmLXZhbHVlLWNvbmQAGBFhcy1icl90YWJsZS1pbmRleAAZEWFzLWJyX3RhYmxlLXZhbHVlABoXYXMtYnJfdGFibGUtdmFsdWUtaW5kZXgAGw9hcy1yZXR1cm4tdmFsdWUAHBBhcy1yZXR1cm4tdmFsdWVzAB0KYXMtaWYtY29uZAAeCmFzLWlmLXRoZW4AHwphcy1pZi1lbHNlACAPYXMtc2VsZWN0LWZpcnN0ACEQYXMtc2VsZWN0LXNlY29uZAAiDmFzLXNlbGVjdC1jb25kACMNYXMtc2VsZWN0LWFsbAAkDWFzLWNhbGwtZmlyc3QAJgthcy1jYWxsLW1pZAAnDGFzLWNhbGwtbGFzdAAoC2FzLWNhbGwtYWxsACkVYXMtY2FsbF9pbmRpcmVjdC1mdW5jACoWYXMtY2FsbF9pbmRpcmVjdC1maXJzdAArFGFzLWNhbGxfaW5kaXJlY3QtbWlkACwVYXMtY2FsbF9pbmRpcmVjdC1sYXN0AC0UYXMtY2FsbF9pbmRpcmVjdC1hbGwALhJhcy1sb2NhbC5zZXQtdmFsdWUALxJhcy1sb2NhbC50ZWUtdmFsdWUAMBNhcy1nbG9iYWwuc2V0LXZhbHVlADEPYXMtbG9hZC1hZGRyZXNzADIQYXMtbG9hZE4tYWRkcmVzcwAzEGFzLXN0b3JlLWFkZHJlc3MANA5hcy1zdG9yZS12YWx1ZQA1DWFzLXN0b3JlLWJvdGgANhFhcy1zdG9yZU4tYWRkcmVzcwA3D2FzLXN0b3JlTi12YWx1ZQA4DmFzLXN0b3JlTi1ib3RoADkQYXMtdW5hcnktb3BlcmFuZAA6DmFzLWJpbmFyeS1sZWZ0ADsPYXMtYmluYXJ5LXJpZ2h0ADwOYXMtYmluYXJ5LWJvdGgAPQ9hcy10ZXN0LW9wZXJhbmQAPg9hcy1jb21wYXJlLWxlZnQAPxBhcy1jb21wYXJlLXJpZ2h0AEAPYXMtY29tcGFyZS1ib3RoAEESYXMtY29udmVydC1vcGVyYW5kAEITYXMtbWVtb3J5Lmdyb3ctc2l6ZQBDEm5lc3RlZC1ibG9jay12YWx1ZQBED25lc3RlZC1ici12YWx1ZQBFEm5lc3RlZC1icl9pZi12YWx1ZQBGF25lc3RlZC1icl9pZi12YWx1ZS1jb25kAEcVbmVzdGVkLWJyX3RhYmxlLXZhbHVlAEgbbmVzdGVkLWJyX3RhYmxlLXZhbHVlLWluZGV4AEkJBwEAQQALASUK5QhKAgALCQACQAwAaBoLCwkAAkAMAHoaCwsJAAJADACMGgsLCQACQAwAmhoLCwkAAkAMAGoaCwsJAAJADAB8GgsLCQACQAwAkhoLCwkAAkAMAKAaCwsKAAJ/QQEMAGgLCwoAAn5CAgwAegsLDQACfUMAAEBADACMCwsRAAJ8RAAAAAAAABBADACaCwsjAAIGRAAAAAAAABBARAAAAAAAABRADACgRAAAAAAAABhACwsJAAJADAAQAAsLCwACQBAADAAQAAsLCgACQAEQAAwACwsMAAJ/ARAAQQIMAAsLDgACfwN/QQMMAUECCwsLEAACfwN/EABBBAwBQQILCwsPAAJ/A38BEABBBQwBCwsLCwACf0EJDAAMAAsLCQACQAwADQALCxAAAn9BCAwAQQENABpBBwsLEAACf0EGQQkMAA0AGkEHCwsMAAJADAAOAgAAAAsLEgACf0EKDABBAQ4CAAAAQQcLCxEAAn9BBkELDAAOAQAAQQcLCwoAAn5CBwwADwsLDgBBAgJ+QQFCBwwADwsLEQACf0ECDAAEf0EABUEBCwsLEQACfyAABH9BAwwBBSABCwsLEQACfyAABH8gAQVBBAwBCwsLDgACf0EFDAAgACABGwsLDgACfyAAQQYMACABGwsLDgACf0EAQQFBBwwAGwsLCgACf0EIDAAbCwsEAEF/Cw8AAn9BDAwAQQJBAxAlCwsPAAJ/QQFBDQwAQQMQJQsLDwACf0EBQQJBDgwAECULCwsAAn9BDwwAECULCxIAAn9BFAwAQQFBAkEDEQAACwsSAAJ/QQBBFQwAQQJBAxEAAAsLEgACf0EAQQFBFgwAQQMRAAALCxIAAn9BAEEBQQJBFwwAEQAACwsMAAJ/QRgMABEAAAsLDwEBfQJ/QREMACEAQX8LCw0BAX8Cf0EBDAAiAAsLCwACf0EBDAAkAAsLDwACfUOamdk/DAAqAgALCwwAAn5CHgwAMAAACwsXAAJ/QR4MAEQAAAAAAAAcQDkDAEF/CwsQAAJ/QQJBHwwANwMAQX8LCw4AAn9BIAwANwMAQX8LCxAAAn9BIAwAQQc6AABBfwsLEAACf0ECQSEMAD0BAEF/CwsOAAJ/QSIMAD0BAEF/CwsNAAJ9Q5qZWUAMAIwLCwwAAn9BAwwAQQpqCwsMAAJ+QgpCLQwAfQsLCgACf0EuDABqCwsKAAJ/QSwMAEULCxMAAn9BKwwARAAAAAAAACRAZQsLDwACf0MAACBBQSoMAFwLCwoAAn9BLAwAZQsLCgACf0EpDACnCwsLAAJ/QSgMAEAACwsRAEEBAn8QAEEEQQgMAGoLagsaAEEBAn9BAhoCf0EEGkEIDAEMAAsaQRALagsfAEEBAn9BAhoCf0EEGkEIDAFBAQ0AGkEgCxpBEAtqCxYAQQECf0ECGkEEQQgMAA0AGkEQC2oLHQBBAQJ/QQIaAn9BBBpBCAwBQQEOAAALGkEQC2oLFgBBAQJ/QQIaQQRBCAwADgAAQRALags=",
    "br.1.wasm": "AGFzbQEAAAABBQFgAAF/AwIBAAoLAQkAAn8MAEEBCws=",
    "br.10.wasm": "AGFzbQEAAAABCQJgAABgAX8BfwMDAgABChICCwACfwwAEAELRRoLBAAgAAs=",
    "br.11.wasm": "AGFzbQEAAAABCQJgAX8Bf2AAAAMDAgABBAUBcAEBAQkHAQBBAAsBAAoVAgQAIAALDgACfwwAQQARAAALRRoL",
    "br.12.wasm": "AGFzbQEAAAABBAFgAAADAgEAChEBDwEBfwJ/DAAhACAAC0UaCw==",
    "br.13.wasm": "AGFzbQEAAAABBAFgAAADAgEACg8BDQEBfwJ/DAAiAAtFGgs=",
    "br.14.wasm": "AGFzbQEAAAABBAFgAAADAgEABgYBfwFBAAsKDwENAAJ/DAAkACMAC0UaCw==",
    "br.15.wasm": "AGFzbQEAAAABBAFgAAADAgEABQMBAAAKDQELAAJ/DABAAAtFGgs=",
    "br.16.wasm": "AGFzbQEAAAABBAFgAAADAgEABQMBAAEKDgEMAAJ/DAAoAgALRRoL",
    "br.17.wasm": "AGFzbQEAAAABBAFgAAADAgEABQMBAAEKEAEOAAJ/DABBADYCAAtFGgs=",
    "br.18.wasm": "AGFzbQEAAAABBAFgAAADAgEACgYBBAAMAQs=",
    "br.19.wasm": "AGFzbQEAAAABBAFgAAADAgEACgwBCgACQAJADAULCws=",
    "br.2.wasm": "AGFzbQEAAAABBQFgAAF/AwIBAAoMAQoAAn8BDABBAQsL",
    "br.20.wasm": "AGFzbQEAAAABBAFgAAADAgEACgoBCAAMgYCAgAEL",
    "br.3.wasm": "AGFzbQEAAAABBQFgAAF/AwIBAAoOAQwAAn9BAAJADAELCws=",
    "br.4.wasm": "AGFzbQEAAAABBQFgAAF/AwIBAAoNAQsAAn9CAQwAQQELCw==",
    "br.5.wasm": "AGFzbQEAAAABBAFgAAADAgEACg8BDQBBAAJ/DAAMAAtFGgs=",
    "br.6.wasm": "AGFzbQEAAAABBAFgAAADAgEAChEBDwBBAAJ/DABBAQ0AC0UaCw==",
    "br.7.wasm": "AGFzbQEAAAABBAFgAAADAgEAChABDgBBAAJ/DAAOAAALRRoL",
    "br.8.wasm": "AGFzbQEAAAABBAFgAAADAgEACgwBCgACfwwADwtFGgs=",
    "br.9.wasm": "AGFzbQEAAAABBAFgAAADAgEAChABDgACfwwAQQFBAhsLRRoL"
  },
  "spec": {"source_filename": "/home/rvagg/git/webassembly/spec/test/core/br.wast",
 "commands": [
  {"type": "module", "line": 3, "filename": "br.0.wasm"}, 
  {"type": "assert_return", "line": 372, "action": {"type": "invoke", "field": "type-i32", "args": []}, "expected": []}, 
  {"type": "assert_return", "line": 373, "action": {"type": "invoke", "field": "type-i64", "args": []}, "expected": []}, 
  {"type": "assert_return", "line": 374, "action": {"type": "invoke", "field": "type-f32", "args": []}, "expected": []}, 
  {"type": "assert_return", "line": 375, "action": {"type": "invoke", "field": "type-f64", "args": []}, "expected": []}, 
  {"type": "assert_return", "line": 376, "action": {"type": "invoke", "field": "type-i32-i32", "args": []}, "expected": []}, 
  {"type": "assert_return", "line": 377, "action": {"type": "invoke", "field": "type-i64-i64", "args": []}, "expected": []}, 
  {"type": "assert_return", "line": 378, "action": {"type": "invoke", "field": "type-f32-f32", "args": []}, "expected": []}, 
  {"type": "assert_return", "line": 379, "action": {"type": "invoke", "field": "type-f64-f64", "args": []}, "expected": []}, 
  {"type": "assert_return", "line": 381, "action": {"type": "invoke", "field": "type-i32-value", "args": []}, "expected": [{"type": "i32", "value": "1"}]}, 
  {"type": "assert_return", "line": 382, "action": {"type": "invoke", "field": "type-i64-value", "args": []}, "expected": [{"type": "i64", "value": "2"}]}, 
  {"type": "assert_return", "line": 383, "action": {"type": "invoke", "field": "type-f32-value", "args": []}, "expected": [{"type": "f32", "value": "1077936128"}]}, 
  {"type": "assert_return", "line": 384, "action": {"type": "invoke", "field": "type-f64-value", "args": []}, "expected": [{"type": "f64", "value": "4616189618054758400"}]}, 
  {"type": "assert_return", "line": 385, "action": {"type": "invoke", "field": "type-f64-f64-value", "args": []}, "expected": [{"type": "f64", "value": "4616189618054758400"}, {"type": "f64", "value": "4617315517961601024"}]}, 
  {"type": "assert_return", "line": 387, "action": {"type": "invoke", "field": "as-block-first", "args": []}, "expected": []}, 
  {"type": "assert_return", "line": 388, "action": {"type": "invoke", "field": "as-block-mid", "args": []}, "expected": []}, 
  {"type": "assert_return", "line": 389, "action": {"type": "invoke", "field": "as-block-last", "args": []}, "expected": []}, 
  {"type": "assert_return", "line": 390, "action": {"type": "invoke", "field": "as-block-value", "args": []}, "expected": [{"type": "i32", "value": "2"}]}, 
  {"type": "assert_return", "line": 392, "action": {"type": "invoke", "field": "as-loop-first", "args": []}, "expected": [{"type": "i32", "value": "3"}]}, 
  {"type": "assert_return", "line": 393, "action": {"type": "invoke", "field": "as-loop-mid", "args": []}, "expected": [{"type": "i32", "value": "4"}]}, 
  {"type": "assert_return", "line": 394, "action": {"type": "invoke", "field": "as-loop-last", "args": []}, "expected": [{"type": "i32", "value": "5"}]}, 
  {"type": "assert_return", "line": 396, "action": {"type": "invoke", "field": "as-br-value", "args": []}, "expected": [{"type": "i32", "value": "9"}]}, 
  {"type": "assert_return", "line": 398, "action": {"type": "invoke", "field": "as-br_if-cond", "args": []}, "expected": []}, 
  {"type": "assert_return", "line": 399, "action": {"type": "invoke", "field": "as-br_if-value", "args": []}, "expected": [{"type": "i32", "value": "8"}]}, 
  {"type": "assert_return", "line": 400, "action": {"type": "invoke", "field": "as-br_if-value-cond", "args": []}, "expected": [{"type": "i32", "value": "9"}]}, 
  {"type": "assert_return", "line": 402, "action": {"type": "invoke", "field": "as-br_table-index", "args": []}, "expected": []}, 
  {"type": "assert_return", "line": 403, "action": {"type": "invoke", "field": "as-br_table-value", "args": []}, "expected": [{"type": "i32", "value": "10"}]}, 
  {"type": "assert_return", "line": 404, "action": {"type": "invoke", "field": "as-br_table-value-index", "args": []}, "expected": [{"type": "i32", "value": "11"}]}, 
  {"type": "assert_return", "line": 406, "action": {"type": "invoke", "field": "as-return-value", "args": []}, "expected": [{"type": "i64", "value": "7"}]}, 
  {"type": "assert_return", "line": 407, "action": {"type": "invoke", "field": "as-return-values", "args": []}, "expected": [{"type": "i32", "value": "2"}, {"type": "i64", "value": "7"}]}, 
  {"type": "assert_return", "line": 409, "action": {"type": "invoke", "field": "as-if-cond", "args": []}, "expected": [{"type": "i32", "value": "2"}]}, 
  {"type": "assert_return", "line": 410, "action": {"type": "invoke", "field": "as-if-then", "args": [{"type": "i32", "value": "1"}, {"type": "i32", "value": "6"}]}, "expected": [{"type": "i32", "value": "3"}]}, 
  {"type": "assert_return", "line": 411, "action": {"type": "invoke", "field": "as-if-then", "args": [{"type": "i32", "value": "0"}, {"type": "i32", "value": "6"}]}, "expected": [{"type": "i32", "value": "6"}]}, 
  {"type": "assert_return", "line": 412, "action": {"type": "invoke", "field": "as-if-else", "args": [{"type": "i32", "value": "0"}, {"type": "i32", "value": "6"}]}, "expected": [{"type": "i32", "value": "4"}]}, 
  {"type": "assert_return", "line": 413, "action": {"type": "invoke", "field": "as-if-else", "args": [{"type": "i32", "value": "1"}, {"type": "i32", "value": "6"}]}, "expected": [{"type": "i32", "value": "6"}]}, 
  {"type": "assert_return", "line": 415, "action": {"type": "invoke", "field": "as-select-first", "args": [{"type": "i32", "value": "0"}, {"type": "i32", "value": "6"}]}, "expected": [{"type": "i32", "value": "5"}]}, 
  {"type": "assert_return", "line": 416, "action": {"type": "invoke", "field": "as-select-first", "args": [{"type": "i32", "value": "1"}, {"type": "i32", "value": "6"}]}, "expected": [{"type": "i32", "value": "5"}]}, 
  {"type": "assert_return", "line": 417, "action": {"type": "invoke", "field": "as-select-second", "args": [{"type": "i32", "value": "0"}, {"type": "i32", "value": "6"}]}, "expected": [{"type": "i32", "value": "6"}]}, 
  {"type": "assert_return", "line": 418, "action": {"type": "invoke", "field": "as-select-second", "args": [{"type": "i32", "value": "1"}, {"type": "i32", "value": "6"}]}, "expected": [{"type": "i32", "value": "6"}]}, 
  {"type": "assert_return", "line": 419, "action": {"type": "invoke", "field": "as-select-cond", "args": []}, "expected": [{"type": "i32", "value": "7"}]}, 
  {"type": "assert_return", "line": 420, "action": {"type": "invoke", "field": "as-select-all", "args": []}, "expected": [{"type": "i32", "value": "8"}]}, 
  {"type": "assert_return", "line": 422, "action": {"type": "invoke", "field": "as-call-first", "args": []}, "expected": [{"type": "i32", "value": "12"}]}, 
  {"type": "assert_return", "line": 423, "action": {"type": "invoke", "field": "as-call-mid", "args": []}, "expected": [{"type": "i32", "value": "13"}]}, 
  {"type": "assert_return", "line": 424, "action": {"type": "invoke", "field": "as-call-last", "args": []}, "expected": [{"type": "i32", "value": "14"}]}, 
  {"type": "assert_return", "line": 425, "action": {"type": "invoke", "field": "as-call-all", "args": []}, "expected": [{"type": "i32", "value": "15"}]}, 
  {"type": "assert_return", "line": 427, "action": {"type": "invoke", "field": "as-call_indirect-func", "args": []}, "expected": [{"type": "i32", "value": "20"}]}, 
  {"type": "assert_return", "line": 428, "action": {"type": "invoke", "field": "as-call_indirect-first", "args": []}, "expected": [{"type": "i32", "value": "21"}]}, 
  {"type": "assert_return", "line": 429, "action": {"type": "invoke", "field": "as-call_indirect-mid", "args": []}, "expected": [{"type": "i32", "value": "22"}]}, 
  {"type": "assert_return", "line": 430, "action": {"type": "invoke", "field": "as-call_indirect-last", "args": []}, "expected": [{"type": "i32", "value": "23"}]}, 
  {"type": "assert_return", "line": 431, "action": {"type": "invoke", "field": "as-call_indirect-all", "args": []}, "expected": [{"type": "i32", "value": "24"}]}, 
  {"type": "assert_return", "line": 433, "action": {"type": "invoke", "field": "as-local.set-value", "args": []}, "expected": [{"type": "i32", "value": "17"}]}, 
  {"type": "assert_return", "line": 434, "action": {"type": "invoke", "field": "as-local.tee-value", "args": []}, "expected": [{"type": "i32", "value": "1"}]}, 
  {"type": "assert_return", "line": 435, "action": {"type": "invoke", "field": "as-global.set-value", "args": []}, "expected": [{"type": "i32", "value": "1"}]}, 
  {"type": "assert_return", "line": 437, "action": {"type": "invoke", "field": "as-load-address", "args": []}, "expected": [{"type": "f32", "value": "1071225242"}]}, 
  {"type": "assert_return", "line": 438, "action": {"type": "invoke", "field": "as-loadN-address", "args": []}, "expected": [{"type": "i64", "value": "30"}]}, 
  {"type": "assert_return", "line": 440, "action": {"type": "invoke", "field": "as-store-address", "args": []}, "expected": [{"type": "i32", "value": "30"}]}, 
  {"type": "assert_return", "line": 441, "action": {"type": "invoke", "field": "as-store-value", "args": []}, "expected": [{"type": "i32", "value": "31"}]}, 
  {"type": "assert_return", "line": 442, "action": {"type": "invoke", "field": "as-store-both", "args": []}, "expected": [{"type": "i32", "value": "32"}]}, 
  {"type": "assert_return", "line": 443, "action": {"type": "invoke", "field": "as-storeN-address", "args": []}, "expected": [{"type": "i32", "value": "32"}]}, 
  {"type": "assert_return", "line": 444, "action": {"type": "invoke", "field": "as-storeN-value", "args": []}, "expected": [{"type": "i32", "value": "33"}]}, 
  {"type": "assert_return", "line": 445, "action": {"type": "invoke", "field": "as-storeN-both", "args": []}, "expected": [{"type": "i32", "value": "34"}]}, 
  {"type": "assert_return", "line": 447, "action": {"type": "invoke", "field": "as-unary-operand", "args": []}, "expected": [{"type": "f32", "value": "1079613850"}]}, 
  {"type": "assert_return", "line": 449, "action": {"type": "invoke", "field": "as-binary-left", "args": []}, "expected": [{"type": "i32", "value": "3"}]}, 
  {"type": "assert_return", "line": 450, "action": {"type": "invoke", "field": "as-binary-right", "args": []}, "expected": [{"type": "i64", "value": "45"}]}, 
  {"type": "assert_return", "line": 451, "action": {"type": "invoke", "field": "as-binary-both", "args": []}, "expected": [{"type": "i32", "value": "46"}]}, 
  {"type": "assert_return", "line": 453, "action": {"type": "invoke", "field": "as-test-operand", "args": []}, "expected": [{"type": "i32", "value": "44"}]}, 
  {"type": "assert_return", "line": 455, "action": {"type": "invoke", "field": "as-compare-left", "args": []}, "expected": [{"type": "i32", "value": "43"}]}, 
  {"type": "assert_return", "line": 456, "action": {"type": "invoke", "field": "as-compare-right", "args": []}, "expected": [{"type": "i32", "value": "42"}]}, 
  {"type": "assert_return", "line": 457, "action": {"type": "invoke", "field": "as-compare-both", "args": []}, "expected": [{"type": "i32", "value": "44"}]}, 
  {"type": "assert_return", "line": 459, "action": {"type": "invoke", "field": "as-convert-operand", "args": []}, "expected": [{"type": "i32", "value": "41"}]}, 
  {"type": "assert_return", "line": 461, "action": {"type": "invoke", "field": "as-memory.grow-size", "args": []}, "expected": [{"type": "i32", "value": "40"}]}, 
  {"type": "assert_return", "line": 463, "action": {"type": "invoke", "field": "nested-block-value", "args": []}, "expected": [{"type": "i32", "value": "9"}]}, 
  {"type": "assert_return", "line": 464, "action": {"type": "invoke", "field": "nested-br-value", "args": []}, "expected": [{"type": "i32", "value": "9"}]}, 
  {"type": "assert_return", "line": 465, "action": {"type": "invoke", "field": "nested-br_if-value", "args": []}, "expected": [{"type": "i32", "value": "9"}]}, 
  {"type": "assert_return", "line": 466, "action": {"type": "invoke", "field": "nested-br_if-value-cond", "args": []}, "expected": [{"type": "i32", "value": "9"}]}, 
  {"type": "assert_return", "line": 467, "action": {"type": "invoke", "field": "nested-br_table-value", "args": []}, "expected": [{"type": "i32", "value": "9"}]}, 
  {"type": "assert_return", "line": 468, "action": {"type": "invoke", "field": "nested-br_table-value-index", "args": []}, "expected": [{"type": "i32", "value": "9"}]}, 
  {"type": "assert_invalid", "line": 471, "filename": "br.1.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 478, "filename": "br.2.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 484, "filename": "br.3.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 490, "filename": "br.4.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 497, "filename": "br.5.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 506, "filename": "br.6.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 515, "filename": "br.7.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 524, "filename": "br.8.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 535, "filename": "br.9.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 546, "filename": "br.10.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 558, "filename": "br.11.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 574, "filename": "br.12.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 586, "filename": "br.13.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 598, "filename": "br.14.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 610, "filename": "br.15.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 622, "filename": "br.16.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 634, "filename": "br.17.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 647, "filename": "br.18.wasm", "text": "unknown label", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 651, "filename": "br.19.wasm", "text": "unknown label", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 655, "filename": "br.20.wasm", "text": "unknown label", "module_type": "binary"}]},
  "code": [
    "(module \n  (func $dummy)\n  (func (export \"type-i32\") (block (drop (i32.ctz (br 0)))))\n  (func (export \"type-i64\") (block (drop (i64.ctz (br 0)))))\n  (func (export \"type-f32\") (block (drop (f32.neg (br 0)))))\n  (func (export \"type-f64\") (block (drop (f64.neg (br 0)))))\n  (func (export \"type-i32-i32\") (block (drop (i32.add (br 0)))))\n  (func (export \"type-i64-i64\") (block (drop (i64.add (br 0)))))\n  (func (export \"type-f32-f32\") (block (drop (f32.add (br 0)))))\n  (func (export \"type-f64-f64\") (block (drop (f64.add (br 0)))))\n  (func (export \"type-i32-value\") (result i32) (block (result i32) (i32.ctz (br 0 (i32.const 1)))) )\n  (func (export \"type-i64-value\") (result i64) (block (result i64) (i64.ctz (br 0 (i64.const 2)))) )\n  (func (export \"type-f32-value\") (result f32) (block (result f32) (f32.neg (br 0 (f32.const 3)))) )\n  (func (export \"type-f64-value\") (result f64) (block (result f64) (f64.neg (br 0 (f64.const 4)))) )\n  (func (export \"type-f64-f64-value\") (result f64 f64) (block (result f64 f64) (f64.add (br 0 (f64.const 4) (f64.const 5))) (f64.const 6) ) )\n  (func (export \"as-block-first\") (block (br 0) (call $dummy)) )\n  (func (export \"as-block-mid\") (block (call $dummy) (br 0) (call $dummy)) )\n  (func (export \"as-block-last\") (block (nop) (call $dummy) (br 0)) )\n  (func (export \"as-block-value\") (result i32) (block (result i32) (nop) (call $dummy) (br 0 (i32.const 2))) )\n  (func (export \"as-loop-first\") (result i32) (block (result i32) (loop (result i32) (br 1 (i32.const 3)) (i32.const 2))) )\n  (func (export \"as-loop-mid\") (result i32) (block (result i32) (loop (result i32) (call $dummy) (br 1 (i32.const 4)) (i32.const 2)) ) )\n  (func (export \"as-loop-last\") (result i32) (block (result i32) (loop (result i32) (nop) (call $dummy) (br 1 (i32.const 5))) ) )\n  (func (export \"as-br-value\") (result i32) (block (result i32) (br 0 (br 0 (i32.const 9)))) )\n  (func (export \"as-br_if-cond\") (block (br_if 0 (br 0))) )\n  (func (export \"as-br_if-value\") (result i32) (block (result i32) (drop (br_if 0 (br 0 (i32.const 8)) (i32.const 1))) (i32.const 7) ) )\n  (func (export \"as-br_if-value-cond\") (result i32) (block (result i32) (drop (br_if 0 (i32.const 6) (br 0 (i32.const 9)))) (i32.const 7) ) )\n  (func (export \"as-br_table-index\") (block (br_table 0 0 0 (br 0))) )\n  (func (export \"as-br_table-value\") (result i32) (block (result i32) (br_table 0 0 0 (br 0 (i32.const 10)) (i32.const 1)) (i32.const 7) ) )\n  (func (export \"as-br_table-value-index\") (result i32) (block (result i32) (br_table 0 0 (i32.const 6) (br 0 (i32.const 11))) (i32.const 7) ) )\n  (func (export \"as-return-value\") (result i64) (block (result i64) (return (br 0 (i64.const 7)))) )\n  (func (export \"as-return-values\") (result i32 i64) (i32.const 2) (block (result i64) (return (br 0 (i32.const 1) (i64.const 7)))) )\n  (func (export \"as-if-cond\") (result i32) (block (result i32) (if (result i32) (br 0 (i32.const 2)) (then (i32.const 0)) (else (i32.const 1)) ) ) )\n  (func (export \"as-if-then\") (param i32 i32) (result i32) (block (result i32) (if (result i32) (local.get 0) (then (br 1 (i32.const 3))) (else (local.get 1)) ) ) )\n  (func (export \"as-if-else\") (param i32 i32) (result i32) (block (result i32) (if (result i32) (local.get 0) (then (local.get 1)) (else (br 1 (i32.const 4))) ) ) )\n  (func (export \"as-select-first\") (param i32 i32) (result i32) (block (result i32) (select (br 0 (i32.const 5)) (local.get 0) (local.get 1)) ) )\n  (func (export \"as-select-second\") (param i32 i32) (result i32) (block (result i32) (select (local.get 0) (br 0 (i32.const 6)) (local.get 1)) ) )\n  (func (export \"as-select-cond\") (result i32) (block (result i32) (select (i32.const 0) (i32.const 1) (br 0 (i32.const 7))) ) )\n  (func (export \"as-select-all\") (result i32) (block (result i32) (select (br 0 (i32.const 8)))) )\n  (func $f (param i32 i32 i32) (result i32) (i32.const -1))\n  (func (export \"as-call-first\") (result i32) (block (result i32) (call $f (br 0 (i32.const 12)) (i32.const 2) (i32.const 3)) ) )\n  (func (export \"as-call-mid\") (result i32) (block (result i32) (call $f (i32.const 1) (br 0 (i32.const 13)) (i32.const 3)) ) )\n  (func (export \"as-call-last\") (result i32) (block (result i32) (call $f (i32.const 1) (i32.const 2) (br 0 (i32.const 14))) ) )\n  (func (export \"as-call-all\") (result i32) (block (result i32) (call $f (br 0 (i32.const 15)))) ) (type $sig (func (param i32 i32 i32) (result i32))) (table funcref (elem $f))\n  (func (export \"as-call_indirect-func\") (result i32) (block (result i32) (call_indirect (type $sig) (br 0 (i32.const 20)) (i32.const 1) (i32.const 2) (i32.const 3) ) ) )\n  (func (export \"as-call_indirect-first\") (result i32) (block (result i32) (call_indirect (type $sig) (i32.const 0) (br 0 (i32.const 21)) (i32.const 2) (i32.const 3) ) ) )\n  (func (export \"as-call_indirect-mid\") (result i32) (block (result i32) (call_indirect (type $sig) (i32.const 0) (i32.const 1) (br 0 (i32.const 22)) (i32.const 3) ) ) )\n  (func (export \"as-call_indirect-last\") (result i32) (block (result i32) (call_indirect (type $sig) (i32.const 0) (i32.const 1) (i32.const 2) (br 0 (i32.const 23)) ) ) )\n  (func (export \"as-call_indirect-all\") (result i32) (block (result i32) (call_indirect (type $sig) (br 0 (i32.const 24)))) )\n  (func (export \"as-local.set-value\") (result i32) (local f32) (block (result i32) (local.set 0 (br 0 (i32.const 17))) (i32.const -1)) )\n  (func (export \"as-local.tee-value\") (result i32) (local i32) (block (result i32) (local.tee 0 (br 0 (i32.const 1)))) ) (global $a (mut i32) (i32.const 10))\n  (func (export \"as-global.set-value\") (result i32) (block (result i32) (global.set $a (br 0 (i32.const 1)))) ) (memory 1)\n  (func (export \"as-load-address\") (result f32) (block (result f32) (f32.load (br 0 (f32.const 1.7)))) )\n  (func (export \"as-loadN-address\") (result i64) (block (result i64) (i64.load8_s (br 0 (i64.const 30)))) )\n  (func (export \"as-store-address\") (result i32) (block (result i32) (f64.store (br 0 (i32.const 30)) (f64.const 7)) (i32.const -1) ) )\n  (func (export \"as-store-value\") (result i32) (block (result i32) (i64.store (i32.const 2) (br 0 (i32.const 31))) (i32.const -1) ) )\n  (func (export \"as-store-both\") (result i32) (block (result i32) (i64.store (br 0 (i32.const 32))) (i32.const -1) ) )\n  (func (export \"as-storeN-address\") (result i32) (block (result i32) (i32.store8 (br 0 (i32.const 32)) (i32.const 7)) (i32.const -1) ) )\n  (func (export \"as-storeN-value\") (result i32) (block (result i32) (i64.store16 (i32.const 2) (br 0 (i32.const 33))) (i32.const -1) ) )\n  (func (export \"as-storeN-both\") (result i32) (block (result i32) (i64.store16 (br 0 (i32.const 34))) (i32.const -1) ) )\n  (func (export \"as-unary-operand\") (result f32) (block (result f32) (f32.neg (br 0 (f32.const 3.4)))) )\n  (func (export \"as-binary-left\") (result i32) (block (result i32) (i32.add (br 0 (i32.const 3)) (i32.const 10))) )\n  (func (export \"as-binary-right\") (result i64) (block (result i64) (i64.sub (i64.const 10) (br 0 (i64.const 45)))) )\n  (func (export \"as-binary-both\") (result i32) (block (result i32) (i32.add (br 0 (i32.const 46)))) )\n  (func (export \"as-test-operand\") (result i32) (block (result i32) (i32.eqz (br 0 (i32.const 44)))) )\n  (func (export \"as-compare-left\") (result i32) (block (result i32) (f64.le (br 0 (i32.const 43)) (f64.const 10))) )\n  (func (export \"as-compare-right\") (result i32) (block (result i32) (f32.ne (f32.const 10) (br 0 (i32.const 42)))) )\n  (func (export \"as-compare-both\") (result i32) (block (result i32) (f64.le (br 0 (i32.const 44)))) )\n  (func (export \"as-convert-operand\") (result i32) (block (result i32) (i32.wrap_i64 (br 0 (i32.const 41)))) )\n  (func (export \"as-memory.grow-size\") (result i32) (block (result i32) (memory.grow (br 0 (i32.const 40)))) )\n  (func (export \"nested-block-value\") (result i32) (i32.add (i32.const 1) (block (result i32) (call $dummy) (i32.add (i32.const 4) (br 0 (i32.const 8))) ) ) )\n  (func (export \"nested-br-value\") (result i32) (i32.add (i32.const 1) (block (result i32) (drop (i32.const 2)) (drop (block (result i32) (drop (i32.const 4)) (br 0 (br 1 (i32.const 8))) ) ) (i32.const 16) ) ) )\n  (func (export \"nested-br_if-value\") (result i32) (i32.add (i32.const 1) (block (result i32) (drop (i32.const 2)) (drop (block (result i32) (drop (i32.const 4)) (drop (br_if 0 (br 1 (i32.const 8)) (i32.const 1))) (i32.const 32) ) ) (i32.const 16) ) ) )\n  (func (export \"nested-br_if-value-cond\") (result i32) (i32.add (i32.const 1) (block (result i32) (drop (i32.const 2)) (drop (br_if 0 (i32.const 4) (br 0 (i32.const 8)))) (i32.const 16) ) ) )\n  (func (export \"nested-br_table-value\") (result i32) (i32.add (i32.const 1) (block (result i32) (drop (i32.const 2)) (drop (block (result i32) (drop (i32.const 4)) (br_table 0 (br 1 (i32.const 8)) (i32.const 1)) ) ) (i32.const 16) ) ) )\n  (func (export \"nested-br_table-value-index\") (result i32) (i32.add (i32.const 1) (block (result i32) (drop (i32.const 2)) (br_table 0 (i32.const 4) (br 0 (i32.const 8))) (i32.const 16) ) ) ))",
    "(assert_return (invoke \"type-i32\"))",
    "(assert_return (invoke \"type-i64\"))",
    "(assert_return (invoke \"type-f32\"))",
    "(assert_return (invoke \"type-f64\"))",
    "(assert_return (invoke \"type-i32-i32\"))",
    "(assert_return (invoke \"type-i64-i64\"))",
    "(assert_return (invoke \"type-f32-f32\"))",
    "(assert_return (invoke \"type-f64-f64\"))",
    "(assert_return (invoke \"type-i32-value\") (i32.const 1))",
    "(assert_return (invoke \"type-i64-value\") (i64.const 2))",
    "(assert_return (invoke \"type-f32-value\") (f32.const 3))",
    "(assert_return (invoke \"type-f64-value\") (f64.const 4))",
    "(assert_return (invoke \"type-f64-f64-value\") (f64.const 4) (f64.const 5))",
    "(assert_return (invoke \"as-block-first\"))",
    "(assert_return (invoke \"as-block-mid\"))",
    "(assert_return (invoke \"as-block-last\"))",
    "(assert_return (invoke \"as-block-value\") (i32.const 2))",
    "(assert_return (invoke \"as-loop-first\") (i32.const 3))",
    "(assert_return (invoke \"as-loop-mid\") (i32.const 4))",
    "(assert_return (invoke \"as-loop-last\") (i32.const 5))",
    "(assert_return (invoke \"as-br-value\") (i32.const 9))",
    "(assert_return (invoke \"as-br_if-cond\"))",
    "(assert_return (invoke \"as-br_if-value\") (i32.const 8))",
    "(assert_return (invoke \"as-br_if-value-cond\") (i32.const 9))",
    "(assert_return (invoke \"as-br_table-index\"))",
    "(assert_return (invoke \"as-br_table-value\") (i32.const 10))",
    "(assert_return (invoke \"as-br_table-value-index\") (i32.const 11))",
    "(assert_return (invoke \"as-return-value\") (i64.const 7))",
    "(assert_return (invoke \"as-return-values\") (i32.const 2) (i64.const 7))",
    "(assert_return (invoke \"as-if-cond\") (i32.const 2))",
    "(assert_return (invoke \"as-if-then\" (i32.const 1) (i32.const 6)) (i32.const 3))",
    "(assert_return (invoke \"as-if-then\" (i32.const 0) (i32.const 6)) (i32.const 6))",
    "(assert_return (invoke \"as-if-else\" (i32.const 0) (i32.const 6)) (i32.const 4))",
    "(assert_return (invoke \"as-if-else\" (i32.const 1) (i32.const 6)) (i32.const 6))",
    "(assert_return (invoke \"as-select-first\" (i32.const 0) (i32.const 6)) (i32.const 5))",
    "(assert_return (invoke \"as-select-first\" (i32.const 1) (i32.const 6)) (i32.const 5))",
    "(assert_return (invoke \"as-select-second\" (i32.const 0) (i32.const 6)) (i32.const 6))",
    "(assert_return (invoke \"as-select-second\" (i32.const 1) (i32.const 6)) (i32.const 6))",
    "(assert_return (invoke \"as-select-cond\") (i32.const 7))",
    "(assert_return (invoke \"as-select-all\") (i32.const 8))",
    "(assert_return (invoke \"as-call-first\") (i32.const 12))",
    "(assert_return (invoke \"as-call-mid\") (i32.const 13))",
    "(assert_return (invoke \"as-call-last\") (i32.const 14))",
    "(assert_return (invoke \"as-call-all\") (i32.const 15))",
    "(assert_return (invoke \"as-call_indirect-func\") (i32.const 20))",
    "(assert_return (invoke \"as-call_indirect-first\") (i32.const 21))",
    "(assert_return (invoke \"as-call_indirect-mid\") (i32.const 22))",
    "(assert_return (invoke \"as-call_indirect-last\") (i32.const 23))",
    "(assert_return (invoke \"as-call_indirect-all\") (i32.const 24))",
    "(assert_return (invoke \"as-local.set-value\") (i32.const 17))",
    "(assert_return (invoke \"as-local.tee-value\") (i32.const 1))",
    "(assert_return (invoke \"as-global.set-value\") (i32.const 1))",
    "(assert_return (invoke \"as-load-address\") (f32.const 1.7))",
    "(assert_return (invoke \"as-loadN-address\") (i64.const 30))",
    "(assert_return (invoke \"as-store-address\") (i32.const 30))",
    "(assert_return (invoke \"as-store-value\") (i32.const 31))",
    "(assert_return (invoke \"as-store-both\") (i32.const 32))",
    "(assert_return (invoke \"as-storeN-address\") (i32.const 32))",
    "(assert_return (invoke \"as-storeN-value\") (i32.const 33))",
    "(assert_return (invoke \"as-storeN-both\") (i32.const 34))",
    "(assert_return (invoke \"as-unary-operand\") (f32.const 3.4))",
    "(assert_return (invoke \"as-binary-left\") (i32.const 3))",
    "(assert_return (invoke \"as-binary-right\") (i64.const 45))",
    "(assert_return (invoke \"as-binary-both\") (i32.const 46))",
    "(assert_return (invoke \"as-test-operand\") (i32.const 44))",
    "(assert_return (invoke \"as-compare-left\") (i32.const 43))",
    "(assert_return (invoke \"as-compare-right\") (i32.const 42))",
    "(assert_return (invoke \"as-compare-both\") (i32.const 44))",
    "(assert_return (invoke \"as-convert-operand\") (i32.const 41))",
    "(assert_return (invoke \"as-memory.grow-size\") (i32.const 40))",
    "(assert_return (invoke \"nested-block-value\") (i32.const 9))",
    "(assert_return (invoke \"nested-br-value\") (i32.const 9))",
    "(assert_return (invoke \"nested-br_if-value\") (i32.const 9))",
    "(assert_return (invoke \"nested-br_if-value-cond\") (i32.const 9))",
    "(assert_return (invoke \"nested-br_table-value\") (i32.const 9))",
    "(assert_return (invoke \"nested-br_table-value-index\") (i32.const 9))",
    "(assert_invalid (module (func $type-arg-empty-vs-num (result i32) (block (result i32) (br 0) (i32.const 1)) )) \"type mismatch\")",
    "(assert_invalid (module (func $type-arg-void-vs-num (result i32) (block (result i32) (br 0 (nop)) (i32.const 1)) )) \"type mismatch\")",
    "(assert_invalid (module (func $type-arg-void-vs-num-nested (result i32) (block (result i32) (i32.const 0) (block (br 1))) )) \"type mismatch\")",
    "(assert_invalid (module (func $type-arg-num-vs-num (result i32) (block (result i32) (br 0 (i64.const 1)) (i32.const 1)) )) \"type mismatch\")",
    "(assert_invalid (module (func $type-arg-empty-in-br (i32.const 0) (block (result i32) (br 0 (br 0))) (i32.eqz) (drop) ) ) \"type mismatch\")",
    "(assert_invalid (module (func $type-arg-empty-in-br_if (i32.const 0) (block (result i32) (br_if 0 (br 0) (i32.const 1))) (i32.eqz) (drop) ) ) \"type mismatch\")",
    "(assert_invalid (module (func $type-arg-empty-in-br_table (i32.const 0) (block (result i32) (br_table 0 (br 0))) (i32.eqz) (drop) ) ) \"type mismatch\")",
    "(assert_invalid (module (func $type-arg-empty-in-return (block (result i32) (return (br 0)) ) (i32.eqz) (drop) ) ) \"type mismatch\")",
    "(assert_invalid (module (func $type-arg-empty-in-select (block (result i32) (select (br 0) (i32.const 1) (i32.const 2)) ) (i32.eqz) (drop) ) ) \"type mismatch\")",
    "(assert_invalid (module (func $type-arg-empty-in-call (block (result i32) (call 1 (br 0)) ) (i32.eqz) (drop) ) (func (param i32) (result i32) (local.get 0)) ) \"type mismatch\")",
    "(assert_invalid (module (func $f (param i32) (result i32) (local.get 0)) (type $sig (func (param i32) (result i32))) (table funcref (elem $f)) (func $type-arg-empty-in-call_indirect (block (result i32) (call_indirect (type $sig) (br 0) (i32.const 0) ) ) (i32.eqz) (drop) ) ) \"type mismatch\")",
    "(assert_invalid (module (func $type-arg-empty-in-local.set (local i32) (block (result i32) (local.set 0 (br 0)) (local.get 0) ) (i32.eqz) (drop) ) ) \"type mismatch\")",
    "(assert_invalid (module (func $type-arg-empty-in-local.tee (local i32) (block (result i32) (local.tee 0 (br 0)) ) (i32.eqz) (drop) ) ) \"type mismatch\")",
    "(assert_invalid (module (global $x (mut i32) (i32.const 0)) (func $type-arg-empty-in-global.set (block (result i32) (global.set $x (br 0)) (global.get $x) ) (i32.eqz) (drop) ) ) \"type mismatch\")",
    "(assert_invalid (module (memory 0) (func $type-arg-empty-in-memory.grow (block (result i32) (memory.grow (br 0)) ) (i32.eqz) (drop) ) ) \"type mismatch\")",
    "(assert_invalid (module (memory 1) (func $type-arg-empty-in-load (block (result i32) (i32.load (br 0)) ) (i32.eqz) (drop) ) ) \"type mismatch\")",
    "(assert_invalid (module (memory 1) (func $type-arg-empty-in-store (block (result i32) (i32.store (br 0) (i32.const 0)) ) (i32.eqz) (drop) ) ) \"type mismatch\")",
    "(assert_invalid (module (func $unbound-label (br 1))) \"unknown label\")",
    "(assert_invalid (module (func $unbound-nested-label (block (block (br 5))))) \"unknown label\")",
    "(assert_invalid (module (func $large-label (br 0x10000001))) \"unknown label\")"
  ],
  "dump": {
    "br.0.wasm": {
      "header": "\nbr.0.wasm:\tfile format wasm 0x1\n\nSections:\n\n     Type start=0x0000000a end=0x00000035 (size=0x0000002b) count: 9\n Function start=0x00000037 end=0x00000082 (size=0x0000004b) count: 74\n    Table start=0x00000084 end=0x00000089 (size=0x00000005) count: 1\n   Memory start=0x0000008b end=0x0000008e (size=0x00000003) count: 1\n   Global start=0x00000090 end=0x00000096 (size=0x00000006) count: 1\n   Export start=0x00000099 end=0x000005ab (size=0x00000512) count: 72\n     Elem start=0x000005ad end=0x000005b4 (size=0x00000007) count: 1\n     Code start=0x000005b7 end=0x00000a1c (size=0x00000465) count: 74\n",
      "details": "\nbr.0.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nType[9]:\n - type[0] (i32, i32, i32) -> i32\n - type[1] () -> nil\n - type[2] () -> i32\n - type[3] () -> i64\n - type[4] () -> f32\n - type[5] () -> f64\n - type[6] () -> (f64, f64)\n - type[7] () -> (i32, i64)\n - type[8] (i32, i32) -> i32\nFunction[74]:\n - func[0] sig=1\n - func[1] sig=1 <type-i32>\n - func[2] sig=1 <type-i64>\n - func[3] sig=1 <type-f32>\n - func[4] sig=1 <type-f64>\n - func[5] sig=1 <type-i32-i32>\n - func[6] sig=1 <type-i64-i64>\n - func[7] sig=1 <type-f32-f32>\n - func[8] sig=1 <type-f64-f64>\n - func[9] sig=2 <type-i32-value>\n - func[10] sig=3 <type-i64-value>\n - func[11] sig=4 <type-f32-value>\n - func[12] sig=5 <type-f64-value>\n - func[13] sig=6 <type-f64-f64-value>\n - func[14] sig=1 <as-block-first>\n - func[15] sig=1 <as-block-mid>\n - func[16] sig=1 <as-block-last>\n - func[17] sig=2 <as-block-value>\n - func[18] sig=2 <as-loop-first>\n - func[19] sig=2 <as-loop-mid>\n - func[20] sig=2 <as-loop-last>\n - func[21] sig=2 <as-br-value>\n - func[22] sig=1 <as-br_if-cond>\n - func[23] sig=2 <as-br_if-value>\n - func[24] sig=2 <as-br_if-value-cond>\n - func[25] sig=1 <as-br_table-index>\n - func[26] sig=2 <as-br_table-value>\n - func[27] sig=2 <as-br_table-value-index>\n - func[28] sig=3 <as-return-value>\n - func[29] sig=7 <as-return-values>\n - func[30] sig=2 <as-if-cond>\n - func[31] sig=8 <as-if-then>\n - func[32] sig=8 <as-if-else>\n - func[33] sig=8 <as-select-first>\n - func[34] sig=8 <as-select-second>\n - func[35] sig=2 <as-select-cond>\n - func[36] sig=2 <as-select-all>\n - func[37] sig=0\n - func[38] sig=2 <as-call-first>\n - func[39] sig=2 <as-call-mid>\n - func[40] sig=2 <as-call-last>\n - func[41] sig=2 <as-call-all>\n - func[42] sig=2 <as-call_indirect-func>\n - func[43] sig=2 <as-call_indirect-first>\n - func[44] sig=2 <as-call_indirect-mid>\n - func[45] sig=2 <as-call_indirect-last>\n - func[46] sig=2 <as-call_indirect-all>\n - func[47] sig=2 <as-local.set-value>\n - func[48] sig=2 <as-local.tee-value>\n - func[49] sig=2 <as-global.set-value>\n - func[50] sig=4 <as-load-address>\n - func[51] sig=3 <as-loadN-address>\n - func[52] sig=2 <as-store-address>\n - func[53] sig=2 <as-store-value>\n - func[54] sig=2 <as-store-both>\n - func[55] sig=2 <as-storeN-address>\n - func[56] sig=2 <as-storeN-value>\n - func[57] sig=2 <as-storeN-both>\n - func[58] sig=4 <as-unary-operand>\n - func[59] sig=2 <as-binary-left>\n - func[60] sig=3 <as-binary-right>\n - func[61] sig=2 <as-binary-both>\n - func[62] sig=2 <as-test-operand>\n - func[63] sig=2 <as-compare-left>\n - func[64] sig=2 <as-compare-right>\n - func[65] sig=2 <as-compare-both>\n - func[66] sig=2 <as-convert-operand>\n - func[67] sig=2 <as-memory.grow-size>\n - func[68] sig=2 <nested-block-value>\n - func[69] sig=2 <nested-br-value>\n - func[70] sig=2 <nested-br_if-value>\n - func[71] sig=2 <nested-br_if-value-cond>\n - func[72] sig=2 <nested-br_table-value>\n - func[73] sig=2 <nested-br_table-value-index>\nTable[1]:\n - table[0] type=funcref initial=1 max=1\nMemory[1]:\n - memory[0] pages: initial=1\nGlobal[1]:\n - global[0] i32 mutable=1 - init i32=10\nExport[72]:\n - func[1] <type-i32> -> \"type-i32\"\n - func[2] <type-i64> -> \"type-i64\"\n - func[3] <type-f32> -> \"type-f32\"\n - func[4] <type-f64> -> \"type-f64\"\n - func[5] <type-i32-i32> -> \"type-i32-i32\"\n - func[6] <type-i64-i64> -> \"type-i64-i64\"\n - func[7] <type-f32-f32> -> \"type-f32-f32\"\n - func[8] <type-f64-f64> -> \"type-f64-f64\"\n - func[9] <type-i32-value> -> \"type-i32-value\"\n - func[10] <type-i64-value> -> \"type-i64-value\"\n - func[11] <type-f32-value> -> \"type-f32-value\"\n - func[12] <type-f64-value> -> \"type-f64-value\"\n - func[13] <type-f64-f64-value> -> \"type-f64-f64-value\"\n - func[14] <as-block-first> -> \"as-block-first\"\n - func[15] <as-block-mid> -> \"as-block-mid\"\n - func[16] <as-block-last> -> \"as-block-last\"\n - func[17] <as-block-value> -> \"as-block-value\"\n - func[18] <as-loop-first> -> \"as-loop-first\"\n - func[19] <as-loop-mid> -> \"as-loop-mid\"\n - func[20] <as-loop-last> -> \"as-loop-last\"\n - func[21] <as-br-value> -> \"as-br-value\"\n - func[22] <as-br_if-cond> -> \"as-br_if-cond\"\n - func[23] <as-br_if-value> -> \"as-br_if-value\"\n - func[24] <as-br_if-value-cond> -> \"as-br_if-value-cond\"\n - func[25] <as-br_table-index> -> \"as-br_table-index\"\n - func[26] <as-br_table-value> -> \"as-br_table-value\"\n - func[27] <as-br_table-value-index> -> \"as-br_table-value-index\"\n - func[28] <as-return-value> -> \"as-return-value\"\n - func[29] <as-return-values> -> \"as-return-values\"\n - func[30] <as-if-cond> -> \"as-if-cond\"\n - func[31] <as-if-then> -> \"as-if-then\"\n - func[32] <as-if-else> -> \"as-if-else\"\n - func[33] <as-select-first> -> \"as-select-first\"\n - func[34] <as-select-second> -> \"as-select-second\"\n - func[35] <as-select-cond> -> \"as-select-cond\"\n - func[36] <as-select-all> -> \"as-select-all\"\n - func[38] <as-call-first> -> \"as-call-first\"\n - func[39] <as-call-mid> -> \"as-call-mid\"\n - func[40] <as-call-last> -> \"as-call-last\"\n - func[41] <as-call-all> -> \"as-call-all\"\n - func[42] <as-call_indirect-func> -> \"as-call_indirect-func\"\n - func[43] <as-call_indirect-first> -> \"as-call_indirect-first\"\n - func[44] <as-call_indirect-mid> -> \"as-call_indirect-mid\"\n - func[45] <as-call_indirect-last> -> \"as-call_indirect-last\"\n - func[46] <as-call_indirect-all> -> \"as-call_indirect-all\"\n - func[47] <as-local.set-value> -> \"as-local.set-value\"\n - func[48] <as-local.tee-value> -> \"as-local.tee-value\"\n - func[49] <as-global.set-value> -> \"as-global.set-value\"\n - func[50] <as-load-address> -> \"as-load-address\"\n - func[51] <as-loadN-address> -> \"as-loadN-address\"\n - func[52] <as-store-address> -> \"as-store-address\"\n - func[53] <as-store-value> -> \"as-store-value\"\n - func[54] <as-store-both> -> \"as-store-both\"\n - func[55] <as-storeN-address> -> \"as-storeN-address\"\n - func[56] <as-storeN-value> -> \"as-storeN-value\"\n - func[57] <as-storeN-both> -> \"as-storeN-both\"\n - func[58] <as-unary-operand> -> \"as-unary-operand\"\n - func[59] <as-binary-left> -> \"as-binary-left\"\n - func[60] <as-binary-right> -> \"as-binary-right\"\n - func[61] <as-binary-both> -> \"as-binary-both\"\n - func[62] <as-test-operand> -> \"as-test-operand\"\n - func[63] <as-compare-left> -> \"as-compare-left\"\n - func[64] <as-compare-right> -> \"as-compare-right\"\n - func[65] <as-compare-both> -> \"as-compare-both\"\n - func[66] <as-convert-operand> -> \"as-convert-operand\"\n - func[67] <as-memory.grow-size> -> \"as-memory.grow-size\"\n - func[68] <nested-block-value> -> \"nested-block-value\"\n - func[69] <nested-br-value> -> \"nested-br-value\"\n - func[70] <nested-br_if-value> -> \"nested-br_if-value\"\n - func[71] <nested-br_if-value-cond> -> \"nested-br_if-value-cond\"\n - func[72] <nested-br_table-value> -> \"nested-br_table-value\"\n - func[73] <nested-br_table-value-index> -> \"nested-br_table-value-index\"\nElem[1]:\n - segment[0] flags=0 table=0 count=1 - init i32=0\n  - elem[0] = ref.func:37\nCode[74]:\n - func[0] size=2\n - func[1] size=9 <type-i32>\n - func[2] size=9 <type-i64>\n - func[3] size=9 <type-f32>\n - func[4] size=9 <type-f64>\n - func[5] size=9 <type-i32-i32>\n - func[6] size=9 <type-i64-i64>\n - func[7] size=9 <type-f32-f32>\n - func[8] size=9 <type-f64-f64>\n - func[9] size=10 <type-i32-value>\n - func[10] size=10 <type-i64-value>\n - func[11] size=13 <type-f32-value>\n - func[12] size=17 <type-f64-value>\n - func[13] size=35 <type-f64-f64-value>\n - func[14] size=9 <as-block-first>\n - func[15] size=11 <as-block-mid>\n - func[16] size=10 <as-block-last>\n - func[17] size=12 <as-block-value>\n - func[18] size=14 <as-loop-first>\n - func[19] size=16 <as-loop-mid>\n - func[20] size=15 <as-loop-last>\n - func[21] size=11 <as-br-value>\n - func[22] size=9 <as-br_if-cond>\n - func[23] size=16 <as-br_if-value>\n - func[24] size=16 <as-br_if-value-cond>\n - func[25] size=12 <as-br_table-index>\n - func[26] size=18 <as-br_table-value>\n - func[27] size=17 <as-br_table-value-index>\n - func[28] size=10 <as-return-value>\n - func[29] size=14 <as-return-values>\n - func[30] size=17 <as-if-cond>\n - func[31] size=17 <as-if-then>\n - func[32] size=17 <as-if-else>\n - func[33] size=14 <as-select-first>\n - func[34] size=14 <as-select-second>\n - func[35] size=14 <as-select-cond>\n - func[36] size=10 <as-select-all>\n - func[37] size=4\n - func[38] size=15 <as-call-first>\n - func[39] size=15 <as-call-mid>\n - func[40] size=15 <as-call-last>\n - func[41] size=11 <as-call-all>\n - func[42] size=18 <as-call_indirect-func>\n - func[43] size=18 <as-call_indirect-first>\n - func[44] size=18 <as-call_indirect-mid>\n - func[45] size=18 <as-call_indirect-last>\n - func[46] size=12 <as-call_indirect-all>\n - func[47] size=15 <as-local.set-value>\n - func[48] size=13 <as-local.tee-value>\n - func[49] size=11 <as-global.set-value>\n - func[50] size=15 <as-load-address>\n - func[51] size=12 <as-loadN-address>\n - func[52] size=23 <as-store-address>\n - func[53] size=16 <as-store-value>\n - func[54] size=14 <as-store-both>\n - func[55] size=16 <as-storeN-address>\n - func[56] size=16 <as-storeN-value>\n - func[57] size=14 <as-storeN-both>\n - func[58] size=13 <as-unary-operand>\n - func[59] size=12 <as-binary-left>\n - func[60] size=12 <as-binary-right>\n - func[61] size=10 <as-binary-both>\n - func[62] size=10 <as-test-operand>\n - func[63] size=19 <as-compare-left>\n - func[64] size=15 <as-compare-right>\n - func[65] size=10 <as-compare-both>\n - func[66] size=10 <as-convert-operand>\n - func[67] size=11 <as-memory.grow-size>\n - func[68] size=17 <nested-block-value>\n - func[69] size=26 <nested-br-value>\n - func[70] size=31 <nested-br_if-value>\n - func[71] size=22 <nested-br_if-value-cond>\n - func[72] size=29 <nested-br_table-value>\n - func[73] size=22 <nested-br_table-value-index>\n",
      "disassemble": "\nbr.0.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n0005b9 func[0]:\n 0005ba: 0b                         | end\n0005bc func[1] <type-i32>:\n 0005bd: 02 40                      | block\n 0005bf: 0c 00                      |   br 0\n 0005c1: 68                         |   i32.ctz\n 0005c2: 1a                         |   drop\n 0005c3: 0b                         | end\n 0005c4: 0b                         | end\n0005c6 func[2] <type-i64>:\n 0005c7: 02 40                      | block\n 0005c9: 0c 00                      |   br 0\n 0005cb: 7a                         |   i64.ctz\n 0005cc: 1a                         |   drop\n 0005cd: 0b                         | end\n 0005ce: 0b                         | end\n0005d0 func[3] <type-f32>:\n 0005d1: 02 40                      | block\n 0005d3: 0c 00                      |   br 0\n 0005d5: 8c                         |   f32.neg\n 0005d6: 1a                         |   drop\n 0005d7: 0b                         | end\n 0005d8: 0b                         | end\n0005da func[4] <type-f64>:\n 0005db: 02 40                      | block\n 0005dd: 0c 00                      |   br 0\n 0005df: 9a                         |   f64.neg\n 0005e0: 1a                         |   drop\n 0005e1: 0b                         | end\n 0005e2: 0b                         | end\n0005e4 func[5] <type-i32-i32>:\n 0005e5: 02 40                      | block\n 0005e7: 0c 00                      |   br 0\n 0005e9: 6a                         |   i32.add\n 0005ea: 1a                         |   drop\n 0005eb: 0b                         | end\n 0005ec: 0b                         | end\n0005ee func[6] <type-i64-i64>:\n 0005ef: 02 40                      | block\n 0005f1: 0c 00                      |   br 0\n 0005f3: 7c                         |   i64.add\n 0005f4: 1a                         |   drop\n 0005f5: 0b                         | end\n 0005f6: 0b                         | end\n0005f8 func[7] <type-f32-f32>:\n 0005f9: 02 40                      | block\n 0005fb: 0c 00                      |   br 0\n 0005fd: 92                         |   f32.add\n 0005fe: 1a                         |   drop\n 0005ff: 0b                         | end\n 000600: 0b                         | end\n000602 func[8] <type-f64-f64>:\n 000603: 02 40                      | block\n 000605: 0c 00                      |   br 0\n 000607: a0                         |   f64.add\n 000608: 1a                         |   drop\n 000609: 0b                         | end\n 00060a: 0b                         | end\n00060c func[9] <type-i32-value>:\n 00060d: 02 7f                      | block i32\n 00060f: 41 01                      |   i32.const 1\n 000611: 0c 00                      |   br 0\n 000613: 68                         |   i32.ctz\n 000614: 0b                         | end\n 000615: 0b                         | end\n000617 func[10] <type-i64-value>:\n 000618: 02 7e                      | block i64\n 00061a: 42 02                      |   i64.const 2\n 00061c: 0c 00                      |   br 0\n 00061e: 7a                         |   i64.ctz\n 00061f: 0b                         | end\n 000620: 0b                         | end\n000622 func[11] <type-f32-value>:\n 000623: 02 7d                      | block f32\n 000625: 43 00 00 40 40             |   f32.const 0x1.8p+1\n 00062a: 0c 00                      |   br 0\n 00062c: 8c                         |   f32.neg\n 00062d: 0b                         | end\n 00062e: 0b                         | end\n000630 func[12] <type-f64-value>:\n 000631: 02 7c                      | block f64\n 000633: 44 00 00 00 00 00 00 10 40 |   f64.const 0x1p+2\n 00063c: 0c 00                      |   br 0\n 00063e: 9a                         |   f64.neg\n 00063f: 0b                         | end\n 000640: 0b                         | end\n000642 func[13] <type-f64-f64-value>:\n 000643: 02 06                      | block type[6]\n 000645: 44 00 00 00 00 00 00 10 40 |   f64.const 0x1p+2\n 00064e: 44 00 00 00 00 00 00 14 40 |   f64.const 0x1.4p+2\n 000657: 0c 00                      |   br 0\n 000659: a0                         |   f64.add\n 00065a: 44 00 00 00 00 00 00 18 40 |   f64.const 0x1.8p+2\n 000663: 0b                         | end\n 000664: 0b                         | end\n000666 func[14] <as-block-first>:\n 000667: 02 40                      | block\n 000669: 0c 00                      |   br 0\n 00066b: 10 00                      |   call 0\n 00066d: 0b                         | end\n 00066e: 0b                         | end\n000670 func[15] <as-block-mid>:\n 000671: 02 40                      | block\n 000673: 10 00                      |   call 0\n 000675: 0c 00                      |   br 0\n 000677: 10 00                      |   call 0\n 000679: 0b                         | end\n 00067a: 0b                         | end\n00067c func[16] <as-block-last>:\n 00067d: 02 40                      | block\n 00067f: 01                         |   nop\n 000680: 10 00                      |   call 0\n 000682: 0c 00                      |   br 0\n 000684: 0b                         | end\n 000685: 0b                         | end\n000687 func[17] <as-block-value>:\n 000688: 02 7f                      | block i32\n 00068a: 01                         |   nop\n 00068b: 10 00                      |   call 0\n 00068d: 41 02                      |   i32.const 2\n 00068f: 0c 00                      |   br 0\n 000691: 0b                         | end\n 000692: 0b                         | end\n000694 func[18] <as-loop-first>:\n 000695: 02 7f                      | block i32\n 000697: 03 7f                      |   loop i32\n 000699: 41 03                      |     i32.const 3\n 00069b: 0c 01                      |     br 1\n 00069d: 41 02                      |     i32.const 2\n 00069f: 0b                         |   end\n 0006a0: 0b                         | end\n 0006a1: 0b                         | end\n0006a3 func[19] <as-loop-mid>:\n 0006a4: 02 7f                      | block i32\n 0006a6: 03 7f                      |   loop i32\n 0006a8: 10 00                      |     call 0\n 0006aa: 41 04                      |     i32.const 4\n 0006ac: 0c 01                      |     br 1\n 0006ae: 41 02                      |     i32.const 2\n 0006b0: 0b                         |   end\n 0006b1: 0b                         | end\n 0006b2: 0b                         | end\n0006b4 func[20] <as-loop-last>:\n 0006b5: 02 7f                      | block i32\n 0006b7: 03 7f                      |   loop i32\n 0006b9: 01                         |     nop\n 0006ba: 10 00                      |     call 0\n 0006bc: 41 05                      |     i32.const 5\n 0006be: 0c 01                      |     br 1\n 0006c0: 0b                         |   end\n 0006c1: 0b                         | end\n 0006c2: 0b                         | end\n0006c4 func[21] <as-br-value>:\n 0006c5: 02 7f                      | block i32\n 0006c7: 41 09                      |   i32.const 9\n 0006c9: 0c 00                      |   br 0\n 0006cb: 0c 00                      |   br 0\n 0006cd: 0b                         | end\n 0006ce: 0b                         | end\n0006d0 func[22] <as-br_if-cond>:\n 0006d1: 02 40                      | block\n 0006d3: 0c 00                      |   br 0\n 0006d5: 0d 00                      |   br_if 0\n 0006d7: 0b                         | end\n 0006d8: 0b                         | end\n0006da func[23] <as-br_if-value>:\n 0006db: 02 7f                      | block i32\n 0006dd: 41 08                      |   i32.const 8\n 0006df: 0c 00                      |   br 0\n 0006e1: 41 01                      |   i32.const 1\n 0006e3: 0d 00                      |   br_if 0\n 0006e5: 1a                         |   drop\n 0006e6: 41 07                      |   i32.const 7\n 0006e8: 0b                         | end\n 0006e9: 0b                         | end\n0006eb func[24] <as-br_if-value-cond>:\n 0006ec: 02 7f                      | block i32\n 0006ee: 41 06                      |   i32.const 6\n 0006f0: 41 09                      |   i32.const 9\n 0006f2: 0c 00                      |   br 0\n 0006f4: 0d 00                      |   br_if 0\n 0006f6: 1a                         |   drop\n 0006f7: 41 07                      |   i32.const 7\n 0006f9: 0b                         | end\n 0006fa: 0b                         | end\n0006fc func[25] <as-br_table-index>:\n 0006fd: 02 40                      | block\n 0006ff: 0c 00                      |   br 0\n 000701: 0e 02 00 00 00             |   br_table 0 0 0\n 000706: 0b                         | end\n 000707: 0b                         | end\n000709 func[26] <as-br_table-value>:\n 00070a: 02 7f                      | block i32\n 00070c: 41 0a                      |   i32.const 10\n 00070e: 0c 00                      |   br 0\n 000710: 41 01                      |   i32.const 1\n 000712: 0e 02 00 00 00             |   br_table 0 0 0\n 000717: 41 07                      |   i32.const 7\n 000719: 0b                         | end\n 00071a: 0b                         | end\n00071c func[27] <as-br_table-value-index>:\n 00071d: 02 7f                      | block i32\n 00071f: 41 06                      |   i32.const 6\n 000721: 41 0b                      |   i32.const 11\n 000723: 0c 00                      |   br 0\n 000725: 0e 01 00 00                |   br_table 0 0\n 000729: 41 07                      |   i32.const 7\n 00072b: 0b                         | end\n 00072c: 0b                         | end\n00072e func[28] <as-return-value>:\n 00072f: 02 7e                      | block i64\n 000731: 42 07                      |   i64.const 7\n 000733: 0c 00                      |   br 0\n 000735: 0f                         |   return\n 000736: 0b                         | end\n 000737: 0b                         | end\n000739 func[29] <as-return-values>:\n 00073a: 41 02                      | i32.const 2\n 00073c: 02 7e                      | block i64\n 00073e: 41 01                      |   i32.const 1\n 000740: 42 07                      |   i64.const 7\n 000742: 0c 00                      |   br 0\n 000744: 0f                         |   return\n 000745: 0b                         | end\n 000746: 0b                         | end\n000748 func[30] <as-if-cond>:\n 000749: 02 7f                      | block i32\n 00074b: 41 02                      |   i32.const 2\n 00074d: 0c 00                      |   br 0\n 00074f: 04 7f                      |   if i32\n 000751: 41 00                      |     i32.const 0\n 000753: 05                         |   else\n 000754: 41 01                      |     i32.const 1\n 000756: 0b                         |   end\n 000757: 0b                         | end\n 000758: 0b                         | end\n00075a func[31] <as-if-then>:\n 00075b: 02 7f                      | block i32\n 00075d: 20 00                      |   local.get 0\n 00075f: 04 7f                      |   if i32\n 000761: 41 03                      |     i32.const 3\n 000763: 0c 01                      |     br 1\n 000765: 05                         |   else\n 000766: 20 01                      |     local.get 1\n 000768: 0b                         |   end\n 000769: 0b                         | end\n 00076a: 0b                         | end\n00076c func[32] <as-if-else>:\n 00076d: 02 7f                      | block i32\n 00076f: 20 00                      |   local.get 0\n 000771: 04 7f                      |   if i32\n 000773: 20 01                      |     local.get 1\n 000775: 05                         |   else\n 000776: 41 04                      |     i32.const 4\n 000778: 0c 01                      |     br 1\n 00077a: 0b                         |   end\n 00077b: 0b                         | end\n 00077c: 0b                         | end\n00077e func[33] <as-select-first>:\n 00077f: 02 7f                      | block i32\n 000781: 41 05                      |   i32.const 5\n 000783: 0c 00                      |   br 0\n 000785: 20 00                      |   local.get 0\n 000787: 20 01                      |   local.get 1\n 000789: 1b                         |   select\n 00078a: 0b                         | end\n 00078b: 0b                         | end\n00078d func[34] <as-select-second>:\n 00078e: 02 7f                      | block i32\n 000790: 20 00                      |   local.get 0\n 000792: 41 06                      |   i32.const 6\n 000794: 0c 00                      |   br 0\n 000796: 20 01                      |   local.get 1\n 000798: 1b                         |   select\n 000799: 0b                         | end\n 00079a: 0b                         | end\n00079c func[35] <as-select-cond>:\n 00079d: 02 7f                      | block i32\n 00079f: 41 00                      |   i32.const 0\n 0007a1: 41 01                      |   i32.const 1\n 0007a3: 41 07                      |   i32.const 7\n 0007a5: 0c 00                      |   br 0\n 0007a7: 1b                         |   select\n 0007a8: 0b                         | end\n 0007a9: 0b                         | end\n0007ab func[36] <as-select-all>:\n 0007ac: 02 7f                      | block i32\n 0007ae: 41 08                      |   i32.const 8\n 0007b0: 0c 00                      |   br 0\n 0007b2: 1b                         |   select\n 0007b3: 0b                         | end\n 0007b4: 0b                         | end\n0007b6 func[37]:\n 0007b7: 41 7f                      | i32.const 4294967295\n 0007b9: 0b                         | end\n0007bb func[38] <as-call-first>:\n 0007bc: 02 7f                      | block i32\n 0007be: 41 0c                      |   i32.const 12\n 0007c0: 0c 00                      |   br 0\n 0007c2: 41 02                      |   i32.const 2\n 0007c4: 41 03                      |   i32.const 3\n 0007c6: 10 25                      |   call 37\n 0007c8: 0b                         | end\n 0007c9: 0b                         | end\n0007cb func[39] <as-call-mid>:\n 0007cc: 02 7f                      | block i32\n 0007ce: 41 01                      |   i32.const 1\n 0007d0: 41 0d                      |   i32.const 13\n 0007d2: 0c 00                      |   br 0\n 0007d4: 41 03                      |   i32.const 3\n 0007d6: 10 25                      |   call 37\n 0007d8: 0b                         | end\n 0007d9: 0b                         | end\n0007db func[40] <as-call-last>:\n 0007dc: 02 7f                      | block i32\n 0007de: 41 01                      |   i32.const 1\n 0007e0: 41 02                      |   i32.const 2\n 0007e2: 41 0e                      |   i32.const 14\n 0007e4: 0c 00                      |   br 0\n 0007e6: 10 25                      |   call 37\n 0007e8: 0b                         | end\n 0007e9: 0b                         | end\n0007eb func[41] <as-call-all>:\n 0007ec: 02 7f                      | block i32\n 0007ee: 41 0f                      |   i32.const 15\n 0007f0: 0c 00                      |   br 0\n 0007f2: 10 25                      |   call 37\n 0007f4: 0b                         | end\n 0007f5: 0b                         | end\n0007f7 func[42] <as-call_indirect-func>:\n 0007f8: 02 7f                      | block i32\n 0007fa: 41 14                      |   i32.const 20\n 0007fc: 0c 00                      |   br 0\n 0007fe: 41 01                      |   i32.const 1\n 000800: 41 02                      |   i32.const 2\n 000802: 41 03                      |   i32.const 3\n 000804: 11 00 00                   |   call_indirect 0 (type 0)\n 000807: 0b                         | end\n 000808: 0b                         | end\n00080a func[43] <as-call_indirect-first>:\n 00080b: 02 7f                      | block i32\n 00080d: 41 00                      |   i32.const 0\n 00080f: 41 15                      |   i32.const 21\n 000811: 0c 00                      |   br 0\n 000813: 41 02                      |   i32.const 2\n 000815: 41 03                      |   i32.const 3\n 000817: 11 00 00                   |   call_indirect 0 (type 0)\n 00081a: 0b                         | end\n 00081b: 0b                         | end\n00081d func[44] <as-call_indirect-mid>:\n 00081e: 02 7f                      | block i32\n 000820: 41 00                      |   i32.const 0\n 000822: 41 01                      |   i32.const 1\n 000824: 41 16                      |   i32.const 22\n 000826: 0c 00                      |   br 0\n 000828: 41 03                      |   i32.const 3\n 00082a: 11 00 00                   |   call_indirect 0 (type 0)\n 00082d: 0b                         | end\n 00082e: 0b                         | end\n000830 func[45] <as-call_indirect-last>:\n 000831: 02 7f                      | block i32\n 000833: 41 00                      |   i32.const 0\n 000835: 41 01                      |   i32.const 1\n 000837: 41 02                      |   i32.const 2\n 000839: 41 17                      |   i32.const 23\n 00083b: 0c 00                      |   br 0\n 00083d: 11 00 00                   |   call_indirect 0 (type 0)\n 000840: 0b                         | end\n 000841: 0b                         | end\n000843 func[46] <as-call_indirect-all>:\n 000844: 02 7f                      | block i32\n 000846: 41 18                      |   i32.const 24\n 000848: 0c 00                      |   br 0\n 00084a: 11 00 00                   |   call_indirect 0 (type 0)\n 00084d: 0b                         | end\n 00084e: 0b                         | end\n000850 func[47] <as-local.set-value>:\n 000851: 01 7d                      | local[0] type=f32\n 000853: 02 7f                      | block i32\n 000855: 41 11                      |   i32.const 17\n 000857: 0c 00                      |   br 0\n 000859: 21 00                      |   local.set 0\n 00085b: 41 7f                      |   i32.const 4294967295\n 00085d: 0b                         | end\n 00085e: 0b                         | end\n000860 func[48] <as-local.tee-value>:\n 000861: 01 7f                      | local[0] type=i32\n 000863: 02 7f                      | block i32\n 000865: 41 01                      |   i32.const 1\n 000867: 0c 00                      |   br 0\n 000869: 22 00                      |   local.tee 0\n 00086b: 0b                         | end\n 00086c: 0b                         | end\n00086e func[49] <as-global.set-value>:\n 00086f: 02 7f                      | block i32\n 000871: 41 01                      |   i32.const 1\n 000873: 0c 00                      |   br 0\n 000875: 24 00                      |   global.set 0\n 000877: 0b                         | end\n 000878: 0b                         | end\n00087a func[50] <as-load-address>:\n 00087b: 02 7d                      | block f32\n 00087d: 43 9a 99 d9 3f             |   f32.const 0x1.b33334p+0\n 000882: 0c 00                      |   br 0\n 000884: 2a 02 00                   |   f32.load 2 0\n 000887: 0b                         | end\n 000888: 0b                         | end\n00088a func[51] <as-loadN-address>:\n 00088b: 02 7e                      | block i64\n 00088d: 42 1e                      |   i64.const 30\n 00088f: 0c 00                      |   br 0\n 000891: 30 00 00                   |   i64.load8_s 0 0\n 000894: 0b                         | end\n 000895: 0b                         | end\n000897 func[52] <as-store-address>:\n 000898: 02 7f                      | block i32\n 00089a: 41 1e                      |   i32.const 30\n 00089c: 0c 00                      |   br 0\n 00089e: 44 00 00 00 00 00 00 1c 40 |   f64.const 0x1.cp+2\n 0008a7: 39 03 00                   |   f64.store 3 0\n 0008aa: 41 7f                      |   i32.const 4294967295\n 0008ac: 0b                         | end\n 0008ad: 0b                         | end\n0008af func[53] <as-store-value>:\n 0008b0: 02 7f                      | block i32\n 0008b2: 41 02                      |   i32.const 2\n 0008b4: 41 1f                      |   i32.const 31\n 0008b6: 0c 00                      |   br 0\n 0008b8: 37 03 00                   |   i64.store 3 0\n 0008bb: 41 7f                      |   i32.const 4294967295\n 0008bd: 0b                         | end\n 0008be: 0b                         | end\n0008c0 func[54] <as-store-both>:\n 0008c1: 02 7f                      | block i32\n 0008c3: 41 20                      |   i32.const 32\n 0008c5: 0c 00                      |   br 0\n 0008c7: 37 03 00                   |   i64.store 3 0\n 0008ca: 41 7f                      |   i32.const 4294967295\n 0008cc: 0b                         | end\n 0008cd: 0b                         | end\n0008cf func[55] <as-storeN-address>:\n 0008d0: 02 7f                      | block i32\n 0008d2: 41 20                      |   i32.const 32\n 0008d4: 0c 00                      |   br 0\n 0008d6: 41 07                      |   i32.const 7\n 0008d8: 3a 00 00                   |   i32.store8 0 0\n 0008db: 41 7f                      |   i32.const 4294967295\n 0008dd: 0b                         | end\n 0008de: 0b                         | end\n0008e0 func[56] <as-storeN-value>:\n 0008e1: 02 7f                      | block i32\n 0008e3: 41 02                      |   i32.const 2\n 0008e5: 41 21                      |   i32.const 33\n 0008e7: 0c 00                      |   br 0\n 0008e9: 3d 01 00                   |   i64.store16 1 0\n 0008ec: 41 7f                      |   i32.const 4294967295\n 0008ee: 0b                         | end\n 0008ef: 0b                         | end\n0008f1 func[57] <as-storeN-both>:\n 0008f2: 02 7f                      | block i32\n 0008f4: 41 22                      |   i32.const 34\n 0008f6: 0c 00                      |   br 0\n 0008f8: 3d 01 00                   |   i64.store16 1 0\n 0008fb: 41 7f                      |   i32.const 4294967295\n 0008fd: 0b                         | end\n 0008fe: 0b                         | end\n000900 func[58] <as-unary-operand>:\n 000901: 02 7d                      | block f32\n 000903: 43 9a 99 59 40             |   f32.const 0x1.b33334p+1\n 000908: 0c 00                      |   br 0\n 00090a: 8c                         |   f32.neg\n 00090b: 0b                         | end\n 00090c: 0b                         | end\n00090e func[59] <as-binary-left>:\n 00090f: 02 7f                      | block i32\n 000911: 41 03                      |   i32.const 3\n 000913: 0c 00                      |   br 0\n 000915: 41 0a                      |   i32.const 10\n 000917: 6a                         |   i32.add\n 000918: 0b                         | end\n 000919: 0b                         | end\n00091b func[60] <as-binary-right>:\n 00091c: 02 7e                      | block i64\n 00091e: 42 0a                      |   i64.const 10\n 000920: 42 2d                      |   i64.const 45\n 000922: 0c 00                      |   br 0\n 000924: 7d                         |   i64.sub\n 000925: 0b                         | end\n 000926: 0b                         | end\n000928 func[61] <as-binary-both>:\n 000929: 02 7f                      | block i32\n 00092b: 41 2e                      |   i32.const 46\n 00092d: 0c 00                      |   br 0\n 00092f: 6a                         |   i32.add\n 000930: 0b                         | end\n 000931: 0b                         | end\n000933 func[62] <as-test-operand>:\n 000934: 02 7f                      | block i32\n 000936: 41 2c                      |   i32.const 44\n 000938: 0c 00                      |   br 0\n 00093a: 45                         |   i32.eqz\n 00093b: 0b                         | end\n 00093c: 0b                         | end\n00093e func[63] <as-compare-left>:\n 00093f: 02 7f                      | block i32\n 000941: 41 2b                      |   i32.const 43\n 000943: 0c 00                      |   br 0\n 000945: 44 00 00 00 00 00 00 24 40 |   f64.const 0x1.4p+3\n 00094e: 65                         |   f64.le\n 00094f: 0b                         | end\n 000950: 0b                         | end\n000952 func[64] <as-compare-right>:\n 000953: 02 7f                      | block i32\n 000955: 43 00 00 20 41             |   f32.const 0x1.4p+3\n 00095a: 41 2a                      |   i32.const 42\n 00095c: 0c 00                      |   br 0\n 00095e: 5c                         |   f32.ne\n 00095f: 0b                         | end\n 000960: 0b                         | end\n000962 func[65] <as-compare-both>:\n 000963: 02 7f                      | block i32\n 000965: 41 2c                      |   i32.const 44\n 000967: 0c 00                      |   br 0\n 000969: 65                         |   f64.le\n 00096a: 0b                         | end\n 00096b: 0b                         | end\n00096d func[66] <as-convert-operand>:\n 00096e: 02 7f                      | block i32\n 000970: 41 29                      |   i32.const 41\n 000972: 0c 00                      |   br 0\n 000974: a7                         |   i32.wrap_i64\n 000975: 0b                         | end\n 000976: 0b                         | end\n000978 func[67] <as-memory.grow-size>:\n 000979: 02 7f                      | block i32\n 00097b: 41 28                      |   i32.const 40\n 00097d: 0c 00                      |   br 0\n 00097f: 40 00                      |   memory.grow 0\n 000981: 0b                         | end\n 000982: 0b                         | end\n000984 func[68] <nested-block-value>:\n 000985: 41 01                      | i32.const 1\n 000987: 02 7f                      | block i32\n 000989: 10 00                      |   call 0\n 00098b: 41 04                      |   i32.const 4\n 00098d: 41 08                      |   i32.const 8\n 00098f: 0c 00                      |   br 0\n 000991: 6a                         |   i32.add\n 000992: 0b                         | end\n 000993: 6a                         | i32.add\n 000994: 0b                         | end\n000996 func[69] <nested-br-value>:\n 000997: 41 01                      | i32.const 1\n 000999: 02 7f                      | block i32\n 00099b: 41 02                      |   i32.const 2\n 00099d: 1a                         |   drop\n 00099e: 02 7f                      |   block i32\n 0009a0: 41 04                      |     i32.const 4\n 0009a2: 1a                         |     drop\n 0009a3: 41 08                      |     i32.const 8\n 0009a5: 0c 01                      |     br 1\n 0009a7: 0c 00                      |     br 0\n 0009a9: 0b                         |   end\n 0009aa: 1a                         |   drop\n 0009ab: 41 10                      |   i32.const 16\n 0009ad: 0b                         | end\n 0009ae: 6a                         | i32.add\n 0009af: 0b                         | end\n0009b1 func[70] <nested-br_if-value>:\n 0009b2: 41 01                      | i32.const 1\n 0009b4: 02 7f                      | block i32\n 0009b6: 41 02                      |   i32.const 2\n 0009b8: 1a                         |   drop\n 0009b9: 02 7f                      |   block i32\n 0009bb: 41 04                      |     i32.const 4\n 0009bd: 1a                         |     drop\n 0009be: 41 08                      |     i32.const 8\n 0009c0: 0c 01                      |     br 1\n 0009c2: 41 01                      |     i32.const 1\n 0009c4: 0d 00                      |     br_if 0\n 0009c6: 1a                         |     drop\n 0009c7: 41 20                      |     i32.const 32\n 0009c9: 0b                         |   end\n 0009ca: 1a                         |   drop\n 0009cb: 41 10                      |   i32.const 16\n 0009cd: 0b                         | end\n 0009ce: 6a                         | i32.add\n 0009cf: 0b                         | end\n0009d1 func[71] <nested-br_if-value-cond>:\n 0009d2: 41 01                      | i32.const 1\n 0009d4: 02 7f                      | block i32\n 0009d6: 41 02                      |   i32.const 2\n 0009d8: 1a                         |   drop\n 0009d9: 41 04                      |   i32.const 4\n 0009db: 41 08                      |   i32.const 8\n 0009dd: 0c 00                      |   br 0\n 0009df: 0d 00                      |   br_if 0\n 0009e1: 1a                         |   drop\n 0009e2: 41 10                      |   i32.const 16\n 0009e4: 0b                         | end\n 0009e5: 6a                         | i32.add\n 0009e6: 0b                         | end\n0009e8 func[72] <nested-br_table-value>:\n 0009e9: 41 01                      | i32.const 1\n 0009eb: 02 7f                      | block i32\n 0009ed: 41 02                      |   i32.const 2\n 0009ef: 1a                         |   drop\n 0009f0: 02 7f                      |   block i32\n 0009f2: 41 04                      |     i32.const 4\n 0009f4: 1a                         |     drop\n 0009f5: 41 08                      |     i32.const 8\n 0009f7: 0c 01                      |     br 1\n 0009f9: 41 01                      |     i32.const 1\n 0009fb: 0e 00 00                   |     br_table 0\n 0009fe: 0b                         |   end\n 0009ff: 1a                         |   drop\n 000a00: 41 10                      |   i32.const 16\n 000a02: 0b                         | end\n 000a03: 6a                         | i32.add\n 000a04: 0b                         | end\n000a06 func[73] <nested-br_table-value-index>:\n 000a07: 41 01                      | i32.const 1\n 000a09: 02 7f                      | block i32\n 000a0b: 41 02                      |   i32.const 2\n 000a0d: 1a                         |   drop\n 000a0e: 41 04                      |   i32.const 4\n 000a10: 41 08                      |   i32.const 8\n 000a12: 0c 00                      |   br 0\n 000a14: 0e 00 00                   |   br_table 0\n 000a17: 41 10                      |   i32.const 16\n 000a19: 0b                         | end\n 000a1a: 6a                         | i32.add\n 000a1b: 0b                         | end\n"
    }
  }
}
