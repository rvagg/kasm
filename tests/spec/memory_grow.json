{
  "bin": {
    "memory_grow.0.wasm": "AGFzbQEAAAABDQNgAAF/YAAAYAF/AX8DBwYAAQABAgAFAwEAAAdXBgxsb2FkX2F0X3plcm8AAA1zdG9yZV9hdF96ZXJvAAERbG9hZF9hdF9wYWdlX3NpemUAAhJzdG9yZV9hdF9wYWdlX3NpemUAAwRncm93AAQEc2l6ZQAFCjUGBwBBACgCAAsJAEEAQQI2AgALCQBBgIAEKAIACwsAQYCABEEDNgIACwYAIABAAAsEAD8ACw==",
    "memory_grow.1.wasm": "AGFzbQEAAAABBgFgAX8BfwMCAQAFAwEAAAcIAQRncm93AAAKCAEGACAAQAAL",
    "memory_grow.10.wasm": "AGFzbQEAAAABBAFgAAADAgEABQMBAAEKCAEGAEEAQAAL",
    "memory_grow.11.wasm": "AGFzbQEAAAABBQFgAAF9AwIBAAUDAQABCggBBgBBAEAACw==",
    "memory_grow.2.wasm": "AGFzbQEAAAABBgFgAX8BfwMCAQAFBAEBAAoHCAEEZ3JvdwAACggBBgAgAEAACw==",
    "memory_grow.3.wasm": "AGFzbQEAAAABDAJgAX8Bf2ACf38BfwMDAgABBQMBAAEHHAIEZ3JvdwAAEWNoZWNrLW1lbW9yeS16ZXJvAAEKPAIGACAAQAALMwEBf0EBIQICQANAIAAtAAAhAiACQQBHDQEgACABTw0BIABBAWohACAAIAFNDQALCyACCw==",
    "memory_grow.4.wasm": "AGFzbQEAAAABFQRgA39/fwF/YAABf2AAAGACf38BfwMnJgECAQECAQEBAQEBAwMBAAEBAQEBAQECAQIBAQICAgIBAQEBAQEBBAUBcAEBAQUDAQABBgYBfwFBAAsHtwUlC2FzLWJyLXZhbHVlAAANYXMtYnJfaWYtY29uZAABDmFzLWJyX2lmLXZhbHVlAAITYXMtYnJfaWYtdmFsdWUtY29uZAADEWFzLWJyX3RhYmxlLWluZGV4AAQRYXMtYnJfdGFibGUtdmFsdWUABRdhcy1icl90YWJsZS12YWx1ZS1pbmRleAAGD2FzLXJldHVybi12YWx1ZQAHCmFzLWlmLWNvbmQACAphcy1pZi10aGVuAAkKYXMtaWYtZWxzZQAKD2FzLXNlbGVjdC1maXJzdAALEGFzLXNlbGVjdC1zZWNvbmQADA5hcy1zZWxlY3QtY29uZAANDWFzLWNhbGwtZmlyc3QADwthcy1jYWxsLW1pZAAQDGFzLWNhbGwtbGFzdAARFmFzLWNhbGxfaW5kaXJlY3QtZmlyc3QAEhRhcy1jYWxsX2luZGlyZWN0LW1pZAATFWFzLWNhbGxfaW5kaXJlY3QtbGFzdAAUFmFzLWNhbGxfaW5kaXJlY3QtaW5kZXgAFRJhcy1sb2NhbC5zZXQtdmFsdWUAFhJhcy1sb2NhbC50ZWUtdmFsdWUAFxNhcy1nbG9iYWwuc2V0LXZhbHVlABgPYXMtbG9hZC1hZGRyZXNzABkQYXMtbG9hZE4tYWRkcmVzcwAaEGFzLXN0b3JlLWFkZHJlc3MAGw5hcy1zdG9yZS12YWx1ZQAcEWFzLXN0b3JlTi1hZGRyZXNzAB0PYXMtc3RvcmVOLXZhbHVlAB4QYXMtdW5hcnktb3BlcmFuZAAfDmFzLWJpbmFyeS1sZWZ0ACAPYXMtYmluYXJ5LXJpZ2h0ACEPYXMtdGVzdC1vcGVyYW5kACIPYXMtY29tcGFyZS1sZWZ0ACMQYXMtY29tcGFyZS1yaWdodAAkE2FzLW1lbW9yeS5ncm93LXNpemUAJQkHAQBBAAsBDgraAyYLAAJ/QQBAAAwACwsLAAJAQQBAAA0ACwsQAAJ/QQBAAEEBDQAaQQcLCxAAAn9BBkEAQAANABpBBwsLDgACQEEAQAAOAgAAAAsLEgACf0EAQABBAQ4CAAAAQQcLCxEAAn9BBkEAQAAOAQAAQQcLCwcAQQBAAA8LDgBBAEAABH9BAAVBAQsLDgBBAQR/QQBAAAVBAAsLDgBBAAR/QQAFQQBAAAsLCwBBAEAAIAAgARsLCwAgAEEAQAAgARsLCwBBAEEBQQBAABsLBABBfwsMAEEAQABBAkEDEA4LDABBAUEAQABBAxAOCwwAQQFBAkEAQAAQDgsPAEEAQABBAkEDQQARAAALDwBBAUEAQABBA0EAEQAACw8AQQFBAkEAQABBABEAAAsPAEEBQQJBA0EAQAARAAALCgEBf0EAQAAhAAsKAQF/QQBAACIACwoBAX9BAEAAJAALCQBBAEAAKAIACwkAQQBAACwAAAsLAEEAQABBBzYCAAsLAEECQQBAADYCAAsLAEEAQABBBzoAAAsLAEECQQBAADsBAAsHAEEAQABnCwkAQQBAAEEKagsJAEEKQQBAAGsLBwBBAEAARQsJAEEAQABBCkwLCQBBCkEAQABHCwgAQQBAAEAACw==",
    "memory_grow.5.wasm": "AGFzbQEAAAABBQFgAAF/AwIBAAUDAQAACgYBBABAAAs=",
    "memory_grow.6.wasm": "AGFzbQEAAAABBQFgAAF/AwIBAAUDAQAACgsBCQBBAAJ/QAALCw==",
    "memory_grow.7.wasm": "AGFzbQEAAAABBQFgAAF/AwIBAAUDAQAACgsBCQBBAAN/QAALCw==",
    "memory_grow.8.wasm": "AGFzbQEAAAABBQFgAAF/AwIBAAUDAQAACg0BCwBBAEEABH9AAAsL",
    "memory_grow.9.wasm": "AGFzbQEAAAABBQFgAAF/AwIBAAUDAQABCgsBCQBDAAAAAEAACw=="
  },
  "spec": {"source_filename": "/workspace/wasm-spec/test/core/memory_grow.wast",
 "commands": [
  {"type": "module", "line": 1, "filename": "memory_grow.0.wasm"}, 
  {"type": "assert_return", "line": 14, "action": {"type": "invoke", "field": "size", "args": []}, "expected": [{"type": "i32", "value": "0"}]}, 
  {"type": "assert_trap", "line": 15, "action": {"type": "invoke", "field": "store_at_zero", "args": []}, "text": "out of bounds memory access", "expected": []}, 
  {"type": "assert_trap", "line": 16, "action": {"type": "invoke", "field": "load_at_zero", "args": []}, "text": "out of bounds memory access", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 17, "action": {"type": "invoke", "field": "store_at_page_size", "args": []}, "text": "out of bounds memory access", "expected": []}, 
  {"type": "assert_trap", "line": 18, "action": {"type": "invoke", "field": "load_at_page_size", "args": []}, "text": "out of bounds memory access", "expected": [{"type": "i32"}]}, 
  {"type": "assert_return", "line": 19, "action": {"type": "invoke", "field": "grow", "args": [{"type": "i32", "value": "1"}]}, "expected": [{"type": "i32", "value": "0"}]}, 
  {"type": "assert_return", "line": 20, "action": {"type": "invoke", "field": "size", "args": []}, "expected": [{"type": "i32", "value": "1"}]}, 
  {"type": "assert_return", "line": 21, "action": {"type": "invoke", "field": "load_at_zero", "args": []}, "expected": [{"type": "i32", "value": "0"}]}, 
  {"type": "assert_return", "line": 22, "action": {"type": "invoke", "field": "store_at_zero", "args": []}, "expected": []}, 
  {"type": "assert_return", "line": 23, "action": {"type": "invoke", "field": "load_at_zero", "args": []}, "expected": [{"type": "i32", "value": "2"}]}, 
  {"type": "assert_trap", "line": 24, "action": {"type": "invoke", "field": "store_at_page_size", "args": []}, "text": "out of bounds memory access", "expected": []}, 
  {"type": "assert_trap", "line": 25, "action": {"type": "invoke", "field": "load_at_page_size", "args": []}, "text": "out of bounds memory access", "expected": [{"type": "i32"}]}, 
  {"type": "assert_return", "line": 26, "action": {"type": "invoke", "field": "grow", "args": [{"type": "i32", "value": "4"}]}, "expected": [{"type": "i32", "value": "1"}]}, 
  {"type": "assert_return", "line": 27, "action": {"type": "invoke", "field": "size", "args": []}, "expected": [{"type": "i32", "value": "5"}]}, 
  {"type": "assert_return", "line": 28, "action": {"type": "invoke", "field": "load_at_zero", "args": []}, "expected": [{"type": "i32", "value": "2"}]}, 
  {"type": "assert_return", "line": 29, "action": {"type": "invoke", "field": "store_at_zero", "args": []}, "expected": []}, 
  {"type": "assert_return", "line": 30, "action": {"type": "invoke", "field": "load_at_zero", "args": []}, "expected": [{"type": "i32", "value": "2"}]}, 
  {"type": "assert_return", "line": 31, "action": {"type": "invoke", "field": "load_at_page_size", "args": []}, "expected": [{"type": "i32", "value": "0"}]}, 
  {"type": "assert_return", "line": 32, "action": {"type": "invoke", "field": "store_at_page_size", "args": []}, "expected": []}, 
  {"type": "assert_return", "line": 33, "action": {"type": "invoke", "field": "load_at_page_size", "args": []}, "expected": [{"type": "i32", "value": "3"}]}, 
  {"type": "module", "line": 36, "filename": "memory_grow.1.wasm"}, 
  {"type": "assert_return", "line": 41, "action": {"type": "invoke", "field": "grow", "args": [{"type": "i32", "value": "0"}]}, "expected": [{"type": "i32", "value": "0"}]}, 
  {"type": "assert_return", "line": 42, "action": {"type": "invoke", "field": "grow", "args": [{"type": "i32", "value": "1"}]}, "expected": [{"type": "i32", "value": "0"}]}, 
  {"type": "assert_return", "line": 43, "action": {"type": "invoke", "field": "grow", "args": [{"type": "i32", "value": "0"}]}, "expected": [{"type": "i32", "value": "1"}]}, 
  {"type": "assert_return", "line": 44, "action": {"type": "invoke", "field": "grow", "args": [{"type": "i32", "value": "2"}]}, "expected": [{"type": "i32", "value": "1"}]}, 
  {"type": "assert_return", "line": 45, "action": {"type": "invoke", "field": "grow", "args": [{"type": "i32", "value": "800"}]}, "expected": [{"type": "i32", "value": "3"}]}, 
  {"type": "assert_return", "line": 46, "action": {"type": "invoke", "field": "grow", "args": [{"type": "i32", "value": "65536"}]}, "expected": [{"type": "i32", "value": "4294967295"}]}, 
  {"type": "assert_return", "line": 47, "action": {"type": "invoke", "field": "grow", "args": [{"type": "i32", "value": "64736"}]}, "expected": [{"type": "i32", "value": "4294967295"}]}, 
  {"type": "assert_return", "line": 48, "action": {"type": "invoke", "field": "grow", "args": [{"type": "i32", "value": "1"}]}, "expected": [{"type": "i32", "value": "803"}]}, 
  {"type": "module", "line": 50, "filename": "memory_grow.2.wasm"}, 
  {"type": "assert_return", "line": 55, "action": {"type": "invoke", "field": "grow", "args": [{"type": "i32", "value": "0"}]}, "expected": [{"type": "i32", "value": "0"}]}, 
  {"type": "assert_return", "line": 56, "action": {"type": "invoke", "field": "grow", "args": [{"type": "i32", "value": "1"}]}, "expected": [{"type": "i32", "value": "0"}]}, 
  {"type": "assert_return", "line": 57, "action": {"type": "invoke", "field": "grow", "args": [{"type": "i32", "value": "1"}]}, "expected": [{"type": "i32", "value": "1"}]}, 
  {"type": "assert_return", "line": 58, "action": {"type": "invoke", "field": "grow", "args": [{"type": "i32", "value": "2"}]}, "expected": [{"type": "i32", "value": "2"}]}, 
  {"type": "assert_return", "line": 59, "action": {"type": "invoke", "field": "grow", "args": [{"type": "i32", "value": "6"}]}, "expected": [{"type": "i32", "value": "4"}]}, 
  {"type": "assert_return", "line": 60, "action": {"type": "invoke", "field": "grow", "args": [{"type": "i32", "value": "0"}]}, "expected": [{"type": "i32", "value": "10"}]}, 
  {"type": "assert_return", "line": 61, "action": {"type": "invoke", "field": "grow", "args": [{"type": "i32", "value": "1"}]}, "expected": [{"type": "i32", "value": "4294967295"}]}, 
  {"type": "assert_return", "line": 62, "action": {"type": "invoke", "field": "grow", "args": [{"type": "i32", "value": "65536"}]}, "expected": [{"type": "i32", "value": "4294967295"}]}, 
  {"type": "module", "line": 66, "filename": "memory_grow.3.wasm"}, 
  {"type": "assert_return", "line": 87, "action": {"type": "invoke", "field": "check-memory-zero", "args": [{"type": "i32", "value": "0"}, {"type": "i32", "value": "65535"}]}, "expected": [{"type": "i32", "value": "0"}]}, 
  {"type": "assert_return", "line": 88, "action": {"type": "invoke", "field": "grow", "args": [{"type": "i32", "value": "1"}]}, "expected": [{"type": "i32", "value": "1"}]}, 
  {"type": "assert_return", "line": 89, "action": {"type": "invoke", "field": "check-memory-zero", "args": [{"type": "i32", "value": "65536"}, {"type": "i32", "value": "131071"}]}, "expected": [{"type": "i32", "value": "0"}]}, 
  {"type": "assert_return", "line": 90, "action": {"type": "invoke", "field": "grow", "args": [{"type": "i32", "value": "1"}]}, "expected": [{"type": "i32", "value": "2"}]}, 
  {"type": "assert_return", "line": 91, "action": {"type": "invoke", "field": "check-memory-zero", "args": [{"type": "i32", "value": "131072"}, {"type": "i32", "value": "196607"}]}, "expected": [{"type": "i32", "value": "0"}]}, 
  {"type": "assert_return", "line": 92, "action": {"type": "invoke", "field": "grow", "args": [{"type": "i32", "value": "1"}]}, "expected": [{"type": "i32", "value": "3"}]}, 
  {"type": "assert_return", "line": 93, "action": {"type": "invoke", "field": "check-memory-zero", "args": [{"type": "i32", "value": "196608"}, {"type": "i32", "value": "262143"}]}, "expected": [{"type": "i32", "value": "0"}]}, 
  {"type": "assert_return", "line": 94, "action": {"type": "invoke", "field": "grow", "args": [{"type": "i32", "value": "1"}]}, "expected": [{"type": "i32", "value": "4"}]}, 
  {"type": "assert_return", "line": 95, "action": {"type": "invoke", "field": "check-memory-zero", "args": [{"type": "i32", "value": "262144"}, {"type": "i32", "value": "327679"}]}, "expected": [{"type": "i32", "value": "0"}]}, 
  {"type": "assert_return", "line": 96, "action": {"type": "invoke", "field": "grow", "args": [{"type": "i32", "value": "1"}]}, "expected": [{"type": "i32", "value": "5"}]}, 
  {"type": "assert_return", "line": 97, "action": {"type": "invoke", "field": "check-memory-zero", "args": [{"type": "i32", "value": "327680"}, {"type": "i32", "value": "393215"}]}, "expected": [{"type": "i32", "value": "0"}]}, 
  {"type": "module", "line": 101, "filename": "memory_grow.4.wasm"}, 
  {"type": "assert_return", "line": 259, "action": {"type": "invoke", "field": "as-br-value", "args": []}, "expected": [{"type": "i32", "value": "1"}]}, 
  {"type": "assert_return", "line": 261, "action": {"type": "invoke", "field": "as-br_if-cond", "args": []}, "expected": []}, 
  {"type": "assert_return", "line": 262, "action": {"type": "invoke", "field": "as-br_if-value", "args": []}, "expected": [{"type": "i32", "value": "1"}]}, 
  {"type": "assert_return", "line": 263, "action": {"type": "invoke", "field": "as-br_if-value-cond", "args": []}, "expected": [{"type": "i32", "value": "6"}]}, 
  {"type": "assert_return", "line": 265, "action": {"type": "invoke", "field": "as-br_table-index", "args": []}, "expected": []}, 
  {"type": "assert_return", "line": 266, "action": {"type": "invoke", "field": "as-br_table-value", "args": []}, "expected": [{"type": "i32", "value": "1"}]}, 
  {"type": "assert_return", "line": 267, "action": {"type": "invoke", "field": "as-br_table-value-index", "args": []}, "expected": [{"type": "i32", "value": "6"}]}, 
  {"type": "assert_return", "line": 269, "action": {"type": "invoke", "field": "as-return-value", "args": []}, "expected": [{"type": "i32", "value": "1"}]}, 
  {"type": "assert_return", "line": 271, "action": {"type": "invoke", "field": "as-if-cond", "args": []}, "expected": [{"type": "i32", "value": "0"}]}, 
  {"type": "assert_return", "line": 272, "action": {"type": "invoke", "field": "as-if-then", "args": []}, "expected": [{"type": "i32", "value": "1"}]}, 
  {"type": "assert_return", "line": 273, "action": {"type": "invoke", "field": "as-if-else", "args": []}, "expected": [{"type": "i32", "value": "1"}]}, 
  {"type": "assert_return", "line": 275, "action": {"type": "invoke", "field": "as-select-first", "args": [{"type": "i32", "value": "0"}, {"type": "i32", "value": "1"}]}, "expected": [{"type": "i32", "value": "1"}]}, 
  {"type": "assert_return", "line": 276, "action": {"type": "invoke", "field": "as-select-second", "args": [{"type": "i32", "value": "0"}, {"type": "i32", "value": "0"}]}, "expected": [{"type": "i32", "value": "1"}]}, 
  {"type": "assert_return", "line": 277, "action": {"type": "invoke", "field": "as-select-cond", "args": []}, "expected": [{"type": "i32", "value": "0"}]}, 
  {"type": "assert_return", "line": 279, "action": {"type": "invoke", "field": "as-call-first", "args": []}, "expected": [{"type": "i32", "value": "4294967295"}]}, 
  {"type": "assert_return", "line": 280, "action": {"type": "invoke", "field": "as-call-mid", "args": []}, "expected": [{"type": "i32", "value": "4294967295"}]}, 
  {"type": "assert_return", "line": 281, "action": {"type": "invoke", "field": "as-call-last", "args": []}, "expected": [{"type": "i32", "value": "4294967295"}]}, 
  {"type": "assert_return", "line": 283, "action": {"type": "invoke", "field": "as-call_indirect-first", "args": []}, "expected": [{"type": "i32", "value": "4294967295"}]}, 
  {"type": "assert_return", "line": 284, "action": {"type": "invoke", "field": "as-call_indirect-mid", "args": []}, "expected": [{"type": "i32", "value": "4294967295"}]}, 
  {"type": "assert_return", "line": 285, "action": {"type": "invoke", "field": "as-call_indirect-last", "args": []}, "expected": [{"type": "i32", "value": "4294967295"}]}, 
  {"type": "assert_trap", "line": 286, "action": {"type": "invoke", "field": "as-call_indirect-index", "args": []}, "text": "undefined element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_return", "line": 288, "action": {"type": "invoke", "field": "as-local.set-value", "args": []}, "expected": []}, 
  {"type": "assert_return", "line": 289, "action": {"type": "invoke", "field": "as-local.tee-value", "args": []}, "expected": [{"type": "i32", "value": "1"}]}, 
  {"type": "assert_return", "line": 290, "action": {"type": "invoke", "field": "as-global.set-value", "args": []}, "expected": []}, 
  {"type": "assert_return", "line": 292, "action": {"type": "invoke", "field": "as-load-address", "args": []}, "expected": [{"type": "i32", "value": "0"}]}, 
  {"type": "assert_return", "line": 293, "action": {"type": "invoke", "field": "as-loadN-address", "args": []}, "expected": [{"type": "i32", "value": "0"}]}, 
  {"type": "assert_return", "line": 294, "action": {"type": "invoke", "field": "as-store-address", "args": []}, "expected": []}, 
  {"type": "assert_return", "line": 295, "action": {"type": "invoke", "field": "as-store-value", "args": []}, "expected": []}, 
  {"type": "assert_return", "line": 296, "action": {"type": "invoke", "field": "as-storeN-address", "args": []}, "expected": []}, 
  {"type": "assert_return", "line": 297, "action": {"type": "invoke", "field": "as-storeN-value", "args": []}, "expected": []}, 
  {"type": "assert_return", "line": 299, "action": {"type": "invoke", "field": "as-unary-operand", "args": []}, "expected": [{"type": "i32", "value": "31"}]}, 
  {"type": "assert_return", "line": 301, "action": {"type": "invoke", "field": "as-binary-left", "args": []}, "expected": [{"type": "i32", "value": "11"}]}, 
  {"type": "assert_return", "line": 302, "action": {"type": "invoke", "field": "as-binary-right", "args": []}, "expected": [{"type": "i32", "value": "9"}]}, 
  {"type": "assert_return", "line": 304, "action": {"type": "invoke", "field": "as-test-operand", "args": []}, "expected": [{"type": "i32", "value": "0"}]}, 
  {"type": "assert_return", "line": 306, "action": {"type": "invoke", "field": "as-compare-left", "args": []}, "expected": [{"type": "i32", "value": "1"}]}, 
  {"type": "assert_return", "line": 307, "action": {"type": "invoke", "field": "as-compare-right", "args": []}, "expected": [{"type": "i32", "value": "1"}]}, 
  {"type": "assert_return", "line": 309, "action": {"type": "invoke", "field": "as-memory.grow-size", "args": []}, "expected": [{"type": "i32", "value": "1"}]}, 
  {"type": "assert_invalid", "line": 313, "filename": "memory_grow.5.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 322, "filename": "memory_grow.6.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 332, "filename": "memory_grow.7.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 342, "filename": "memory_grow.8.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 353, "filename": "memory_grow.9.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 363, "filename": "memory_grow.10.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 372, "filename": "memory_grow.11.wasm", "text": "type mismatch", "module_type": "binary"}]},
  "code": [
    "(module (memory 0)\n  (func (export \"load_at_zero\") (result i32) (i32.load (i32.const 0)))\n  (func (export \"store_at_zero\") (i32.store (i32.const 0) (i32.const 2)))\n  (func (export \"load_at_page_size\") (result i32) (i32.load (i32.const 0x10000)))\n  (func (export \"store_at_page_size\") (i32.store (i32.const 0x10000) (i32.const 3)))\n  (func (export \"grow\") (param $sz i32) (result i32) (memory.grow (local.get $sz)))\n  (func (export \"size\") (result i32) (memory.size)))",
    "(assert_return (invoke \"size\") (i32.const 0))",
    "(assert_trap (invoke \"store_at_zero\") \"out of bounds memory access\")",
    "(assert_trap (invoke \"load_at_zero\") \"out of bounds memory access\")",
    "(assert_trap (invoke \"store_at_page_size\") \"out of bounds memory access\")",
    "(assert_trap (invoke \"load_at_page_size\") \"out of bounds memory access\")",
    "(assert_return (invoke \"grow\" (i32.const 1)) (i32.const 0))",
    "(assert_return (invoke \"size\") (i32.const 1))",
    "(assert_return (invoke \"load_at_zero\") (i32.const 0))",
    "(assert_return (invoke \"store_at_zero\"))",
    "(assert_return (invoke \"load_at_zero\") (i32.const 2))",
    "(assert_trap (invoke \"store_at_page_size\") \"out of bounds memory access\")",
    "(assert_trap (invoke \"load_at_page_size\") \"out of bounds memory access\")",
    "(assert_return (invoke \"grow\" (i32.const 4)) (i32.const 1))",
    "(assert_return (invoke \"size\") (i32.const 5))",
    "(assert_return (invoke \"load_at_zero\") (i32.const 2))",
    "(assert_return (invoke \"store_at_zero\"))",
    "(assert_return (invoke \"load_at_zero\") (i32.const 2))",
    "(assert_return (invoke \"load_at_page_size\") (i32.const 0))",
    "(assert_return (invoke \"store_at_page_size\"))",
    "(assert_return (invoke \"load_at_page_size\") (i32.const 3))",
    "(module (memory 0)\n  (func (export \"grow\") (param i32) (result i32) (memory.grow (local.get 0))))",
    "(assert_return (invoke \"grow\" (i32.const 0)) (i32.const 0))",
    "(assert_return (invoke \"grow\" (i32.const 1)) (i32.const 0))",
    "(assert_return (invoke \"grow\" (i32.const 0)) (i32.const 1))",
    "(assert_return (invoke \"grow\" (i32.const 2)) (i32.const 1))",
    "(assert_return (invoke \"grow\" (i32.const 800)) (i32.const 3))",
    "(assert_return (invoke \"grow\" (i32.const 0x10000)) (i32.const -1))",
    "(assert_return (invoke \"grow\" (i32.const 64736)) (i32.const -1))",
    "(assert_return (invoke \"grow\" (i32.const 1)) (i32.const 803))",
    "(module (memory 0 10)\n  (func (export \"grow\") (param i32) (result i32) (memory.grow (local.get 0))))",
    "(assert_return (invoke \"grow\" (i32.const 0)) (i32.const 0))",
    "(assert_return (invoke \"grow\" (i32.const 1)) (i32.const 0))",
    "(assert_return (invoke \"grow\" (i32.const 1)) (i32.const 1))",
    "(assert_return (invoke \"grow\" (i32.const 2)) (i32.const 2))",
    "(assert_return (invoke \"grow\" (i32.const 6)) (i32.const 4))",
    "(assert_return (invoke \"grow\" (i32.const 0)) (i32.const 10))",
    "(assert_return (invoke \"grow\" (i32.const 1)) (i32.const -1))",
    "(assert_return (invoke \"grow\" (i32.const 0x10000)) (i32.const -1))",
    "(module (memory 1)\n  (func (export \"grow\") (param i32) (result i32) (memory.grow (local.get 0)) )\n  (func (export \"check-memory-zero\") (param i32 i32) (result i32) (local i32) (local.set 2 (i32.const 1)) (block (loop (local.set 2 (i32.load8_u (local.get 0))) (br_if 1 (i32.ne (local.get 2) (i32.const 0))) (br_if 1 (i32.ge_u (local.get 0) (local.get 1))) (local.set 0 (i32.add (local.get 0) (i32.const 1))) (br_if 0 (i32.le_u (local.get 0) (local.get 1))) ) ) (local.get 2) ))",
    "(assert_return (invoke \"check-memory-zero\" (i32.const 0) (i32.const 0xffff)) (i32.const 0))",
    "(assert_return (invoke \"grow\" (i32.const 1)) (i32.const 1))",
    "(assert_return (invoke \"check-memory-zero\" (i32.const 0x10000) (i32.const 0x1_ffff)) (i32.const 0))",
    "(assert_return (invoke \"grow\" (i32.const 1)) (i32.const 2))",
    "(assert_return (invoke \"check-memory-zero\" (i32.const 0x20000) (i32.const 0x2_ffff)) (i32.const 0))",
    "(assert_return (invoke \"grow\" (i32.const 1)) (i32.const 3))",
    "(assert_return (invoke \"check-memory-zero\" (i32.const 0x30000) (i32.const 0x3_ffff)) (i32.const 0))",
    "(assert_return (invoke \"grow\" (i32.const 1)) (i32.const 4))",
    "(assert_return (invoke \"check-memory-zero\" (i32.const 0x40000) (i32.const 0x4_ffff)) (i32.const 0))",
    "(assert_return (invoke \"grow\" (i32.const 1)) (i32.const 5))",
    "(assert_return (invoke \"check-memory-zero\" (i32.const 0x50000) (i32.const 0x5_ffff)) (i32.const 0))",
    "(module (memory 1)\n  (func (export \"as-br-value\") (result i32) (block (result i32) (br 0 (memory.grow (i32.const 0)))) )\n  (func (export \"as-br_if-cond\") (block (br_if 0 (memory.grow (i32.const 0)))) )\n  (func (export \"as-br_if-value\") (result i32) (block (result i32) (drop (br_if 0 (memory.grow (i32.const 0)) (i32.const 1))) (i32.const 7) ) )\n  (func (export \"as-br_if-value-cond\") (result i32) (block (result i32) (drop (br_if 0 (i32.const 6) (memory.grow (i32.const 0)))) (i32.const 7) ) )\n  (func (export \"as-br_table-index\") (block (br_table 0 0 0 (memory.grow (i32.const 0)))) )\n  (func (export \"as-br_table-value\") (result i32) (block (result i32) (br_table 0 0 0 (memory.grow (i32.const 0)) (i32.const 1)) (i32.const 7) ) )\n  (func (export \"as-br_table-value-index\") (result i32) (block (result i32) (br_table 0 0 (i32.const 6) (memory.grow (i32.const 0))) (i32.const 7) ) )\n  (func (export \"as-return-value\") (result i32) (return (memory.grow (i32.const 0))) )\n  (func (export \"as-if-cond\") (result i32) (if (result i32) (memory.grow (i32.const 0)) (then (i32.const 0)) (else (i32.const 1)) ) )\n  (func (export \"as-if-then\") (result i32) (if (result i32) (i32.const 1) (then (memory.grow (i32.const 0))) (else (i32.const 0)) ) )\n  (func (export \"as-if-else\") (result i32) (if (result i32) (i32.const 0) (then (i32.const 0)) (else (memory.grow (i32.const 0))) ) )\n  (func (export \"as-select-first\") (param i32 i32) (result i32) (select (memory.grow (i32.const 0)) (local.get 0) (local.get 1)) )\n  (func (export \"as-select-second\") (param i32 i32) (result i32) (select (local.get 0) (memory.grow (i32.const 0)) (local.get 1)) )\n  (func (export \"as-select-cond\") (result i32) (select (i32.const 0) (i32.const 1) (memory.grow (i32.const 0))) )\n  (func $f (param i32 i32 i32) (result i32) (i32.const -1))\n  (func (export \"as-call-first\") (result i32) (call $f (memory.grow (i32.const 0)) (i32.const 2) (i32.const 3)) )\n  (func (export \"as-call-mid\") (result i32) (call $f (i32.const 1) (memory.grow (i32.const 0)) (i32.const 3)) )\n  (func (export \"as-call-last\") (result i32) (call $f (i32.const 1) (i32.const 2) (memory.grow (i32.const 0))) ) (type $sig (func (param i32 i32 i32) (result i32))) (table funcref (elem $f))\n  (func (export \"as-call_indirect-first\") (result i32) (call_indirect (type $sig) (memory.grow (i32.const 0)) (i32.const 2) (i32.const 3) (i32.const 0) ) )\n  (func (export \"as-call_indirect-mid\") (result i32) (call_indirect (type $sig) (i32.const 1) (memory.grow (i32.const 0)) (i32.const 3) (i32.const 0) ) )\n  (func (export \"as-call_indirect-last\") (result i32) (call_indirect (type $sig) (i32.const 1) (i32.const 2) (memory.grow (i32.const 0)) (i32.const 0) ) )\n  (func (export \"as-call_indirect-index\") (result i32) (call_indirect (type $sig) (i32.const 1) (i32.const 2) (i32.const 3) (memory.grow (i32.const 0)) ) )\n  (func (export \"as-local.set-value\") (local i32) (local.set 0 (memory.grow (i32.const 0))) )\n  (func (export \"as-local.tee-value\") (result i32) (local i32) (local.tee 0 (memory.grow (i32.const 0))) ) (global $g (mut i32) (i32.const 0))\n  (func (export \"as-global.set-value\") (local i32) (global.set $g (memory.grow (i32.const 0))) )\n  (func (export \"as-load-address\") (result i32) (i32.load (memory.grow (i32.const 0))) )\n  (func (export \"as-loadN-address\") (result i32) (i32.load8_s (memory.grow (i32.const 0))) )\n  (func (export \"as-store-address\") (i32.store (memory.grow (i32.const 0)) (i32.const 7)) )\n  (func (export \"as-store-value\") (i32.store (i32.const 2) (memory.grow (i32.const 0))) )\n  (func (export \"as-storeN-address\") (i32.store8 (memory.grow (i32.const 0)) (i32.const 7)) )\n  (func (export \"as-storeN-value\") (i32.store16 (i32.const 2) (memory.grow (i32.const 0))) )\n  (func (export \"as-unary-operand\") (result i32) (i32.clz (memory.grow (i32.const 0))) )\n  (func (export \"as-binary-left\") (result i32) (i32.add (memory.grow (i32.const 0)) (i32.const 10)) )\n  (func (export \"as-binary-right\") (result i32) (i32.sub (i32.const 10) (memory.grow (i32.const 0))) )\n  (func (export \"as-test-operand\") (result i32) (i32.eqz (memory.grow (i32.const 0))) )\n  (func (export \"as-compare-left\") (result i32) (i32.le_s (memory.grow (i32.const 0)) (i32.const 10)) )\n  (func (export \"as-compare-right\") (result i32) (i32.ne (i32.const 10) (memory.grow (i32.const 0))) )\n  (func (export \"as-memory.grow-size\") (result i32) (memory.grow (memory.grow (i32.const 0))) ))",
    "(assert_return (invoke \"as-br-value\") (i32.const 1))",
    "(assert_return (invoke \"as-br_if-cond\"))",
    "(assert_return (invoke \"as-br_if-value\") (i32.const 1))",
    "(assert_return (invoke \"as-br_if-value-cond\") (i32.const 6))",
    "(assert_return (invoke \"as-br_table-index\"))",
    "(assert_return (invoke \"as-br_table-value\") (i32.const 1))",
    "(assert_return (invoke \"as-br_table-value-index\") (i32.const 6))",
    "(assert_return (invoke \"as-return-value\") (i32.const 1))",
    "(assert_return (invoke \"as-if-cond\") (i32.const 0))",
    "(assert_return (invoke \"as-if-then\") (i32.const 1))",
    "(assert_return (invoke \"as-if-else\") (i32.const 1))",
    "(assert_return (invoke \"as-select-first\" (i32.const 0) (i32.const 1)) (i32.const 1))",
    "(assert_return (invoke \"as-select-second\" (i32.const 0) (i32.const 0)) (i32.const 1))",
    "(assert_return (invoke \"as-select-cond\") (i32.const 0))",
    "(assert_return (invoke \"as-call-first\") (i32.const -1))",
    "(assert_return (invoke \"as-call-mid\") (i32.const -1))",
    "(assert_return (invoke \"as-call-last\") (i32.const -1))",
    "(assert_return (invoke \"as-call_indirect-first\") (i32.const -1))",
    "(assert_return (invoke \"as-call_indirect-mid\") (i32.const -1))",
    "(assert_return (invoke \"as-call_indirect-last\") (i32.const -1))",
    "(assert_trap (invoke \"as-call_indirect-index\") \"undefined element\")",
    "(assert_return (invoke \"as-local.set-value\"))",
    "(assert_return (invoke \"as-local.tee-value\") (i32.const 1))",
    "(assert_return (invoke \"as-global.set-value\"))",
    "(assert_return (invoke \"as-load-address\") (i32.const 0))",
    "(assert_return (invoke \"as-loadN-address\") (i32.const 0))",
    "(assert_return (invoke \"as-store-address\"))",
    "(assert_return (invoke \"as-store-value\"))",
    "(assert_return (invoke \"as-storeN-address\"))",
    "(assert_return (invoke \"as-storeN-value\"))",
    "(assert_return (invoke \"as-unary-operand\") (i32.const 31))",
    "(assert_return (invoke \"as-binary-left\") (i32.const 11))",
    "(assert_return (invoke \"as-binary-right\") (i32.const 9))",
    "(assert_return (invoke \"as-test-operand\") (i32.const 0))",
    "(assert_return (invoke \"as-compare-left\") (i32.const 1))",
    "(assert_return (invoke \"as-compare-right\") (i32.const 1))",
    "(assert_return (invoke \"as-memory.grow-size\") (i32.const 1))",
    "(assert_invalid (module (memory 0) (func $type-size-empty-vs-i32 (result i32) (memory.grow) ) ) \"type mismatch\")",
    "(assert_invalid (module (memory 0) (func $type-size-empty-vs-i32-in-block (result i32) (i32.const 0) (block (result i32) (memory.grow)) ) ) \"type mismatch\")",
    "(assert_invalid (module (memory 0) (func $type-size-empty-vs-i32-in-loop (result i32) (i32.const 0) (loop (result i32) (memory.grow)) ) ) \"type mismatch\")",
    "(assert_invalid (module (memory 0) (func $type-size-empty-vs-i32-in-then (result i32) (i32.const 0) (i32.const 0) (if (result i32) (then (memory.grow))) ) ) \"type mismatch\")",
    "(assert_invalid (module (memory 1) (func $type-size-f32-vs-i32 (result i32) (memory.grow (f32.const 0)) ) ) \"type mismatch\")",
    "(assert_invalid (module (memory 1) (func $type-result-i32-vs-empty (memory.grow (i32.const 0)) ) ) \"type mismatch\")",
    "(assert_invalid (module (memory 1) (func $type-result-i32-vs-f32 (result f32) (memory.grow (i32.const 0)) ) ) \"type mismatch\")"
  ],
  "dump": {
    "memory_grow.0.wasm": {
      "header": "\nmemory_grow.0.wasm:\tfile format wasm 0x1\n\nSections:\n\n     Type start=0x0000000a end=0x00000017 (size=0x0000000d) count: 3\n Function start=0x00000019 end=0x00000020 (size=0x00000007) count: 6\n   Memory start=0x00000022 end=0x00000025 (size=0x00000003) count: 1\n   Export start=0x00000027 end=0x0000007e (size=0x00000057) count: 6\n     Code start=0x00000080 end=0x000000b5 (size=0x00000035) count: 6\n",
      "details": "\nmemory_grow.0.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nType[3]:\n - type[0] () -> i32\n - type[1] () -> nil\n - type[2] (i32) -> i32\nFunction[6]:\n - func[0] sig=0 <load_at_zero>\n - func[1] sig=1 <store_at_zero>\n - func[2] sig=0 <load_at_page_size>\n - func[3] sig=1 <store_at_page_size>\n - func[4] sig=2 <grow>\n - func[5] sig=0 <size>\nMemory[1]:\n - memory[0] pages: initial=0\nExport[6]:\n - func[0] <load_at_zero> -> \"load_at_zero\"\n - func[1] <store_at_zero> -> \"store_at_zero\"\n - func[2] <load_at_page_size> -> \"load_at_page_size\"\n - func[3] <store_at_page_size> -> \"store_at_page_size\"\n - func[4] <grow> -> \"grow\"\n - func[5] <size> -> \"size\"\nCode[6]:\n - func[0] size=7 <load_at_zero>\n - func[1] size=9 <store_at_zero>\n - func[2] size=9 <load_at_page_size>\n - func[3] size=11 <store_at_page_size>\n - func[4] size=6 <grow>\n - func[5] size=4 <size>\n",
      "disassemble": "\nmemory_grow.0.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n000082 func[0] <load_at_zero>:\n 000083: 41 00                      | i32.const 0\n 000085: 28 02 00                   | i32.load 2 0\n 000088: 0b                         | end\n00008a func[1] <store_at_zero>:\n 00008b: 41 00                      | i32.const 0\n 00008d: 41 02                      | i32.const 2\n 00008f: 36 02 00                   | i32.store 2 0\n 000092: 0b                         | end\n000094 func[2] <load_at_page_size>:\n 000095: 41 80 80 04                | i32.const 65536\n 000099: 28 02 00                   | i32.load 2 0\n 00009c: 0b                         | end\n00009e func[3] <store_at_page_size>:\n 00009f: 41 80 80 04                | i32.const 65536\n 0000a3: 41 03                      | i32.const 3\n 0000a5: 36 02 00                   | i32.store 2 0\n 0000a8: 0b                         | end\n0000aa func[4] <grow>:\n 0000ab: 20 00                      | local.get 0\n 0000ad: 40 00                      | memory.grow 0\n 0000af: 0b                         | end\n0000b1 func[5] <size>:\n 0000b2: 3f 00                      | memory.size 0\n 0000b4: 0b                         | end\n"
    },
    "memory_grow.1.wasm": {
      "header": "\nmemory_grow.1.wasm:\tfile format wasm 0x1\n\nSections:\n\n     Type start=0x0000000a end=0x00000010 (size=0x00000006) count: 1\n Function start=0x00000012 end=0x00000014 (size=0x00000002) count: 1\n   Memory start=0x00000016 end=0x00000019 (size=0x00000003) count: 1\n   Export start=0x0000001b end=0x00000023 (size=0x00000008) count: 1\n     Code start=0x00000025 end=0x0000002d (size=0x00000008) count: 1\n",
      "details": "\nmemory_grow.1.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nType[1]:\n - type[0] (i32) -> i32\nFunction[1]:\n - func[0] sig=0 <grow>\nMemory[1]:\n - memory[0] pages: initial=0\nExport[1]:\n - func[0] <grow> -> \"grow\"\nCode[1]:\n - func[0] size=6 <grow>\n",
      "disassemble": "\nmemory_grow.1.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n000027 func[0] <grow>:\n 000028: 20 00                      | local.get 0\n 00002a: 40 00                      | memory.grow 0\n 00002c: 0b                         | end\n"
    },
    "memory_grow.2.wasm": {
      "header": "\nmemory_grow.2.wasm:\tfile format wasm 0x1\n\nSections:\n\n     Type start=0x0000000a end=0x00000010 (size=0x00000006) count: 1\n Function start=0x00000012 end=0x00000014 (size=0x00000002) count: 1\n   Memory start=0x00000016 end=0x0000001a (size=0x00000004) count: 1\n   Export start=0x0000001c end=0x00000024 (size=0x00000008) count: 1\n     Code start=0x00000026 end=0x0000002e (size=0x00000008) count: 1\n",
      "details": "\nmemory_grow.2.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nType[1]:\n - type[0] (i32) -> i32\nFunction[1]:\n - func[0] sig=0 <grow>\nMemory[1]:\n - memory[0] pages: initial=0 max=10\nExport[1]:\n - func[0] <grow> -> \"grow\"\nCode[1]:\n - func[0] size=6 <grow>\n",
      "disassemble": "\nmemory_grow.2.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n000028 func[0] <grow>:\n 000029: 20 00                      | local.get 0\n 00002b: 40 00                      | memory.grow 0\n 00002d: 0b                         | end\n"
    },
    "memory_grow.3.wasm": {
      "header": "\nmemory_grow.3.wasm:\tfile format wasm 0x1\n\nSections:\n\n     Type start=0x0000000a end=0x00000016 (size=0x0000000c) count: 2\n Function start=0x00000018 end=0x0000001b (size=0x00000003) count: 2\n   Memory start=0x0000001d end=0x00000020 (size=0x00000003) count: 1\n   Export start=0x00000022 end=0x0000003e (size=0x0000001c) count: 2\n     Code start=0x00000040 end=0x0000007c (size=0x0000003c) count: 2\n",
      "details": "\nmemory_grow.3.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nType[2]:\n - type[0] (i32) -> i32\n - type[1] (i32, i32) -> i32\nFunction[2]:\n - func[0] sig=0 <grow>\n - func[1] sig=1 <check-memory-zero>\nMemory[1]:\n - memory[0] pages: initial=1\nExport[2]:\n - func[0] <grow> -> \"grow\"\n - func[1] <check-memory-zero> -> \"check-memory-zero\"\nCode[2]:\n - func[0] size=6 <grow>\n - func[1] size=51 <check-memory-zero>\n",
      "disassemble": "\nmemory_grow.3.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n000042 func[0] <grow>:\n 000043: 20 00                      | local.get 0\n 000045: 40 00                      | memory.grow 0\n 000047: 0b                         | end\n000049 func[1] <check-memory-zero>:\n 00004a: 01 7f                      | local[2] type=i32\n 00004c: 41 01                      | i32.const 1\n 00004e: 21 02                      | local.set 2\n 000050: 02 40                      | block\n 000052: 03 40                      |   loop\n 000054: 20 00                      |     local.get 0\n 000056: 2d 00 00                   |     i32.load8_u 0 0\n 000059: 21 02                      |     local.set 2\n 00005b: 20 02                      |     local.get 2\n 00005d: 41 00                      |     i32.const 0\n 00005f: 47                         |     i32.ne\n 000060: 0d 01                      |     br_if 1\n 000062: 20 00                      |     local.get 0\n 000064: 20 01                      |     local.get 1\n 000066: 4f                         |     i32.ge_u\n 000067: 0d 01                      |     br_if 1\n 000069: 20 00                      |     local.get 0\n 00006b: 41 01                      |     i32.const 1\n 00006d: 6a                         |     i32.add\n 00006e: 21 00                      |     local.set 0\n 000070: 20 00                      |     local.get 0\n 000072: 20 01                      |     local.get 1\n 000074: 4d                         |     i32.le_u\n 000075: 0d 00                      |     br_if 0\n 000077: 0b                         |   end\n 000078: 0b                         | end\n 000079: 20 02                      | local.get 2\n 00007b: 0b                         | end\n"
    },
    "memory_grow.4.wasm": {
      "header": "\nmemory_grow.4.wasm:\tfile format wasm 0x1\n\nSections:\n\n     Type start=0x0000000a end=0x0000001f (size=0x00000015) count: 4\n Function start=0x00000021 end=0x00000048 (size=0x00000027) count: 38\n    Table start=0x0000004a end=0x0000004f (size=0x00000005) count: 1\n   Memory start=0x00000051 end=0x00000054 (size=0x00000003) count: 1\n   Global start=0x00000056 end=0x0000005c (size=0x00000006) count: 1\n   Export start=0x0000005f end=0x00000316 (size=0x000002b7) count: 37\n     Elem start=0x00000318 end=0x0000031f (size=0x00000007) count: 1\n     Code start=0x00000322 end=0x000004fc (size=0x000001da) count: 38\n",
      "details": "\nmemory_grow.4.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nType[4]:\n - type[0] (i32, i32, i32) -> i32\n - type[1] () -> i32\n - type[2] () -> nil\n - type[3] (i32, i32) -> i32\nFunction[38]:\n - func[0] sig=1 <as-br-value>\n - func[1] sig=2 <as-br_if-cond>\n - func[2] sig=1 <as-br_if-value>\n - func[3] sig=1 <as-br_if-value-cond>\n - func[4] sig=2 <as-br_table-index>\n - func[5] sig=1 <as-br_table-value>\n - func[6] sig=1 <as-br_table-value-index>\n - func[7] sig=1 <as-return-value>\n - func[8] sig=1 <as-if-cond>\n - func[9] sig=1 <as-if-then>\n - func[10] sig=1 <as-if-else>\n - func[11] sig=3 <as-select-first>\n - func[12] sig=3 <as-select-second>\n - func[13] sig=1 <as-select-cond>\n - func[14] sig=0\n - func[15] sig=1 <as-call-first>\n - func[16] sig=1 <as-call-mid>\n - func[17] sig=1 <as-call-last>\n - func[18] sig=1 <as-call_indirect-first>\n - func[19] sig=1 <as-call_indirect-mid>\n - func[20] sig=1 <as-call_indirect-last>\n - func[21] sig=1 <as-call_indirect-index>\n - func[22] sig=2 <as-local.set-value>\n - func[23] sig=1 <as-local.tee-value>\n - func[24] sig=2 <as-global.set-value>\n - func[25] sig=1 <as-load-address>\n - func[26] sig=1 <as-loadN-address>\n - func[27] sig=2 <as-store-address>\n - func[28] sig=2 <as-store-value>\n - func[29] sig=2 <as-storeN-address>\n - func[30] sig=2 <as-storeN-value>\n - func[31] sig=1 <as-unary-operand>\n - func[32] sig=1 <as-binary-left>\n - func[33] sig=1 <as-binary-right>\n - func[34] sig=1 <as-test-operand>\n - func[35] sig=1 <as-compare-left>\n - func[36] sig=1 <as-compare-right>\n - func[37] sig=1 <as-memory.grow-size>\nTable[1]:\n - table[0] type=funcref initial=1 max=1\nMemory[1]:\n - memory[0] pages: initial=1\nGlobal[1]:\n - global[0] i32 mutable=1 - init i32=0\nExport[37]:\n - func[0] <as-br-value> -> \"as-br-value\"\n - func[1] <as-br_if-cond> -> \"as-br_if-cond\"\n - func[2] <as-br_if-value> -> \"as-br_if-value\"\n - func[3] <as-br_if-value-cond> -> \"as-br_if-value-cond\"\n - func[4] <as-br_table-index> -> \"as-br_table-index\"\n - func[5] <as-br_table-value> -> \"as-br_table-value\"\n - func[6] <as-br_table-value-index> -> \"as-br_table-value-index\"\n - func[7] <as-return-value> -> \"as-return-value\"\n - func[8] <as-if-cond> -> \"as-if-cond\"\n - func[9] <as-if-then> -> \"as-if-then\"\n - func[10] <as-if-else> -> \"as-if-else\"\n - func[11] <as-select-first> -> \"as-select-first\"\n - func[12] <as-select-second> -> \"as-select-second\"\n - func[13] <as-select-cond> -> \"as-select-cond\"\n - func[15] <as-call-first> -> \"as-call-first\"\n - func[16] <as-call-mid> -> \"as-call-mid\"\n - func[17] <as-call-last> -> \"as-call-last\"\n - func[18] <as-call_indirect-first> -> \"as-call_indirect-first\"\n - func[19] <as-call_indirect-mid> -> \"as-call_indirect-mid\"\n - func[20] <as-call_indirect-last> -> \"as-call_indirect-last\"\n - func[21] <as-call_indirect-index> -> \"as-call_indirect-index\"\n - func[22] <as-local.set-value> -> \"as-local.set-value\"\n - func[23] <as-local.tee-value> -> \"as-local.tee-value\"\n - func[24] <as-global.set-value> -> \"as-global.set-value\"\n - func[25] <as-load-address> -> \"as-load-address\"\n - func[26] <as-loadN-address> -> \"as-loadN-address\"\n - func[27] <as-store-address> -> \"as-store-address\"\n - func[28] <as-store-value> -> \"as-store-value\"\n - func[29] <as-storeN-address> -> \"as-storeN-address\"\n - func[30] <as-storeN-value> -> \"as-storeN-value\"\n - func[31] <as-unary-operand> -> \"as-unary-operand\"\n - func[32] <as-binary-left> -> \"as-binary-left\"\n - func[33] <as-binary-right> -> \"as-binary-right\"\n - func[34] <as-test-operand> -> \"as-test-operand\"\n - func[35] <as-compare-left> -> \"as-compare-left\"\n - func[36] <as-compare-right> -> \"as-compare-right\"\n - func[37] <as-memory.grow-size> -> \"as-memory.grow-size\"\nElem[1]:\n - segment[0] flags=0 table=0 count=1 - init i32=0\n  - elem[0] = ref.func:14\nCode[38]:\n - func[0] size=11 <as-br-value>\n - func[1] size=11 <as-br_if-cond>\n - func[2] size=16 <as-br_if-value>\n - func[3] size=16 <as-br_if-value-cond>\n - func[4] size=14 <as-br_table-index>\n - func[5] size=18 <as-br_table-value>\n - func[6] size=17 <as-br_table-value-index>\n - func[7] size=7 <as-return-value>\n - func[8] size=14 <as-if-cond>\n - func[9] size=14 <as-if-then>\n - func[10] size=14 <as-if-else>\n - func[11] size=11 <as-select-first>\n - func[12] size=11 <as-select-second>\n - func[13] size=11 <as-select-cond>\n - func[14] size=4\n - func[15] size=12 <as-call-first>\n - func[16] size=12 <as-call-mid>\n - func[17] size=12 <as-call-last>\n - func[18] size=15 <as-call_indirect-first>\n - func[19] size=15 <as-call_indirect-mid>\n - func[20] size=15 <as-call_indirect-last>\n - func[21] size=15 <as-call_indirect-index>\n - func[22] size=10 <as-local.set-value>\n - func[23] size=10 <as-local.tee-value>\n - func[24] size=10 <as-global.set-value>\n - func[25] size=9 <as-load-address>\n - func[26] size=9 <as-loadN-address>\n - func[27] size=11 <as-store-address>\n - func[28] size=11 <as-store-value>\n - func[29] size=11 <as-storeN-address>\n - func[30] size=11 <as-storeN-value>\n - func[31] size=7 <as-unary-operand>\n - func[32] size=9 <as-binary-left>\n - func[33] size=9 <as-binary-right>\n - func[34] size=7 <as-test-operand>\n - func[35] size=9 <as-compare-left>\n - func[36] size=9 <as-compare-right>\n - func[37] size=8 <as-memory.grow-size>\n",
      "disassemble": "\nmemory_grow.4.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n000324 func[0] <as-br-value>:\n 000325: 02 7f                      | block i32\n 000327: 41 00                      |   i32.const 0\n 000329: 40 00                      |   memory.grow 0\n 00032b: 0c 00                      |   br 0\n 00032d: 0b                         | end\n 00032e: 0b                         | end\n000330 func[1] <as-br_if-cond>:\n 000331: 02 40                      | block\n 000333: 41 00                      |   i32.const 0\n 000335: 40 00                      |   memory.grow 0\n 000337: 0d 00                      |   br_if 0\n 000339: 0b                         | end\n 00033a: 0b                         | end\n00033c func[2] <as-br_if-value>:\n 00033d: 02 7f                      | block i32\n 00033f: 41 00                      |   i32.const 0\n 000341: 40 00                      |   memory.grow 0\n 000343: 41 01                      |   i32.const 1\n 000345: 0d 00                      |   br_if 0\n 000347: 1a                         |   drop\n 000348: 41 07                      |   i32.const 7\n 00034a: 0b                         | end\n 00034b: 0b                         | end\n00034d func[3] <as-br_if-value-cond>:\n 00034e: 02 7f                      | block i32\n 000350: 41 06                      |   i32.const 6\n 000352: 41 00                      |   i32.const 0\n 000354: 40 00                      |   memory.grow 0\n 000356: 0d 00                      |   br_if 0\n 000358: 1a                         |   drop\n 000359: 41 07                      |   i32.const 7\n 00035b: 0b                         | end\n 00035c: 0b                         | end\n00035e func[4] <as-br_table-index>:\n 00035f: 02 40                      | block\n 000361: 41 00                      |   i32.const 0\n 000363: 40 00                      |   memory.grow 0\n 000365: 0e 02 00 00 00             |   br_table 0 0 0\n 00036a: 0b                         | end\n 00036b: 0b                         | end\n00036d func[5] <as-br_table-value>:\n 00036e: 02 7f                      | block i32\n 000370: 41 00                      |   i32.const 0\n 000372: 40 00                      |   memory.grow 0\n 000374: 41 01                      |   i32.const 1\n 000376: 0e 02 00 00 00             |   br_table 0 0 0\n 00037b: 41 07                      |   i32.const 7\n 00037d: 0b                         | end\n 00037e: 0b                         | end\n000380 func[6] <as-br_table-value-index>:\n 000381: 02 7f                      | block i32\n 000383: 41 06                      |   i32.const 6\n 000385: 41 00                      |   i32.const 0\n 000387: 40 00                      |   memory.grow 0\n 000389: 0e 01 00 00                |   br_table 0 0\n 00038d: 41 07                      |   i32.const 7\n 00038f: 0b                         | end\n 000390: 0b                         | end\n000392 func[7] <as-return-value>:\n 000393: 41 00                      | i32.const 0\n 000395: 40 00                      | memory.grow 0\n 000397: 0f                         | return\n 000398: 0b                         | end\n00039a func[8] <as-if-cond>:\n 00039b: 41 00                      | i32.const 0\n 00039d: 40 00                      | memory.grow 0\n 00039f: 04 7f                      | if i32\n 0003a1: 41 00                      |   i32.const 0\n 0003a3: 05                         | else\n 0003a4: 41 01                      |   i32.const 1\n 0003a6: 0b                         | end\n 0003a7: 0b                         | end\n0003a9 func[9] <as-if-then>:\n 0003aa: 41 01                      | i32.const 1\n 0003ac: 04 7f                      | if i32\n 0003ae: 41 00                      |   i32.const 0\n 0003b0: 40 00                      |   memory.grow 0\n 0003b2: 05                         | else\n 0003b3: 41 00                      |   i32.const 0\n 0003b5: 0b                         | end\n 0003b6: 0b                         | end\n0003b8 func[10] <as-if-else>:\n 0003b9: 41 00                      | i32.const 0\n 0003bb: 04 7f                      | if i32\n 0003bd: 41 00                      |   i32.const 0\n 0003bf: 05                         | else\n 0003c0: 41 00                      |   i32.const 0\n 0003c2: 40 00                      |   memory.grow 0\n 0003c4: 0b                         | end\n 0003c5: 0b                         | end\n0003c7 func[11] <as-select-first>:\n 0003c8: 41 00                      | i32.const 0\n 0003ca: 40 00                      | memory.grow 0\n 0003cc: 20 00                      | local.get 0\n 0003ce: 20 01                      | local.get 1\n 0003d0: 1b                         | select\n 0003d1: 0b                         | end\n0003d3 func[12] <as-select-second>:\n 0003d4: 20 00                      | local.get 0\n 0003d6: 41 00                      | i32.const 0\n 0003d8: 40 00                      | memory.grow 0\n 0003da: 20 01                      | local.get 1\n 0003dc: 1b                         | select\n 0003dd: 0b                         | end\n0003df func[13] <as-select-cond>:\n 0003e0: 41 00                      | i32.const 0\n 0003e2: 41 01                      | i32.const 1\n 0003e4: 41 00                      | i32.const 0\n 0003e6: 40 00                      | memory.grow 0\n 0003e8: 1b                         | select\n 0003e9: 0b                         | end\n0003eb func[14]:\n 0003ec: 41 7f                      | i32.const 4294967295\n 0003ee: 0b                         | end\n0003f0 func[15] <as-call-first>:\n 0003f1: 41 00                      | i32.const 0\n 0003f3: 40 00                      | memory.grow 0\n 0003f5: 41 02                      | i32.const 2\n 0003f7: 41 03                      | i32.const 3\n 0003f9: 10 0e                      | call 14\n 0003fb: 0b                         | end\n0003fd func[16] <as-call-mid>:\n 0003fe: 41 01                      | i32.const 1\n 000400: 41 00                      | i32.const 0\n 000402: 40 00                      | memory.grow 0\n 000404: 41 03                      | i32.const 3\n 000406: 10 0e                      | call 14\n 000408: 0b                         | end\n00040a func[17] <as-call-last>:\n 00040b: 41 01                      | i32.const 1\n 00040d: 41 02                      | i32.const 2\n 00040f: 41 00                      | i32.const 0\n 000411: 40 00                      | memory.grow 0\n 000413: 10 0e                      | call 14\n 000415: 0b                         | end\n000417 func[18] <as-call_indirect-first>:\n 000418: 41 00                      | i32.const 0\n 00041a: 40 00                      | memory.grow 0\n 00041c: 41 02                      | i32.const 2\n 00041e: 41 03                      | i32.const 3\n 000420: 41 00                      | i32.const 0\n 000422: 11 00 00                   | call_indirect 0 (type 0)\n 000425: 0b                         | end\n000427 func[19] <as-call_indirect-mid>:\n 000428: 41 01                      | i32.const 1\n 00042a: 41 00                      | i32.const 0\n 00042c: 40 00                      | memory.grow 0\n 00042e: 41 03                      | i32.const 3\n 000430: 41 00                      | i32.const 0\n 000432: 11 00 00                   | call_indirect 0 (type 0)\n 000435: 0b                         | end\n000437 func[20] <as-call_indirect-last>:\n 000438: 41 01                      | i32.const 1\n 00043a: 41 02                      | i32.const 2\n 00043c: 41 00                      | i32.const 0\n 00043e: 40 00                      | memory.grow 0\n 000440: 41 00                      | i32.const 0\n 000442: 11 00 00                   | call_indirect 0 (type 0)\n 000445: 0b                         | end\n000447 func[21] <as-call_indirect-index>:\n 000448: 41 01                      | i32.const 1\n 00044a: 41 02                      | i32.const 2\n 00044c: 41 03                      | i32.const 3\n 00044e: 41 00                      | i32.const 0\n 000450: 40 00                      | memory.grow 0\n 000452: 11 00 00                   | call_indirect 0 (type 0)\n 000455: 0b                         | end\n000457 func[22] <as-local.set-value>:\n 000458: 01 7f                      | local[0] type=i32\n 00045a: 41 00                      | i32.const 0\n 00045c: 40 00                      | memory.grow 0\n 00045e: 21 00                      | local.set 0\n 000460: 0b                         | end\n000462 func[23] <as-local.tee-value>:\n 000463: 01 7f                      | local[0] type=i32\n 000465: 41 00                      | i32.const 0\n 000467: 40 00                      | memory.grow 0\n 000469: 22 00                      | local.tee 0\n 00046b: 0b                         | end\n00046d func[24] <as-global.set-value>:\n 00046e: 01 7f                      | local[0] type=i32\n 000470: 41 00                      | i32.const 0\n 000472: 40 00                      | memory.grow 0\n 000474: 24 00                      | global.set 0\n 000476: 0b                         | end\n000478 func[25] <as-load-address>:\n 000479: 41 00                      | i32.const 0\n 00047b: 40 00                      | memory.grow 0\n 00047d: 28 02 00                   | i32.load 2 0\n 000480: 0b                         | end\n000482 func[26] <as-loadN-address>:\n 000483: 41 00                      | i32.const 0\n 000485: 40 00                      | memory.grow 0\n 000487: 2c 00 00                   | i32.load8_s 0 0\n 00048a: 0b                         | end\n00048c func[27] <as-store-address>:\n 00048d: 41 00                      | i32.const 0\n 00048f: 40 00                      | memory.grow 0\n 000491: 41 07                      | i32.const 7\n 000493: 36 02 00                   | i32.store 2 0\n 000496: 0b                         | end\n000498 func[28] <as-store-value>:\n 000499: 41 02                      | i32.const 2\n 00049b: 41 00                      | i32.const 0\n 00049d: 40 00                      | memory.grow 0\n 00049f: 36 02 00                   | i32.store 2 0\n 0004a2: 0b                         | end\n0004a4 func[29] <as-storeN-address>:\n 0004a5: 41 00                      | i32.const 0\n 0004a7: 40 00                      | memory.grow 0\n 0004a9: 41 07                      | i32.const 7\n 0004ab: 3a 00 00                   | i32.store8 0 0\n 0004ae: 0b                         | end\n0004b0 func[30] <as-storeN-value>:\n 0004b1: 41 02                      | i32.const 2\n 0004b3: 41 00                      | i32.const 0\n 0004b5: 40 00                      | memory.grow 0\n 0004b7: 3b 01 00                   | i32.store16 1 0\n 0004ba: 0b                         | end\n0004bc func[31] <as-unary-operand>:\n 0004bd: 41 00                      | i32.const 0\n 0004bf: 40 00                      | memory.grow 0\n 0004c1: 67                         | i32.clz\n 0004c2: 0b                         | end\n0004c4 func[32] <as-binary-left>:\n 0004c5: 41 00                      | i32.const 0\n 0004c7: 40 00                      | memory.grow 0\n 0004c9: 41 0a                      | i32.const 10\n 0004cb: 6a                         | i32.add\n 0004cc: 0b                         | end\n0004ce func[33] <as-binary-right>:\n 0004cf: 41 0a                      | i32.const 10\n 0004d1: 41 00                      | i32.const 0\n 0004d3: 40 00                      | memory.grow 0\n 0004d5: 6b                         | i32.sub\n 0004d6: 0b                         | end\n0004d8 func[34] <as-test-operand>:\n 0004d9: 41 00                      | i32.const 0\n 0004db: 40 00                      | memory.grow 0\n 0004dd: 45                         | i32.eqz\n 0004de: 0b                         | end\n0004e0 func[35] <as-compare-left>:\n 0004e1: 41 00                      | i32.const 0\n 0004e3: 40 00                      | memory.grow 0\n 0004e5: 41 0a                      | i32.const 10\n 0004e7: 4c                         | i32.le_s\n 0004e8: 0b                         | end\n0004ea func[36] <as-compare-right>:\n 0004eb: 41 0a                      | i32.const 10\n 0004ed: 41 00                      | i32.const 0\n 0004ef: 40 00                      | memory.grow 0\n 0004f1: 47                         | i32.ne\n 0004f2: 0b                         | end\n0004f4 func[37] <as-memory.grow-size>:\n 0004f5: 41 00                      | i32.const 0\n 0004f7: 40 00                      | memory.grow 0\n 0004f9: 40 00                      | memory.grow 0\n 0004fb: 0b                         | end\n"
    }
  }
}
