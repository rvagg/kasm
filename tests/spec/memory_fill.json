{
  "bin": {
    "memory_fill.0.wasm": "AGFzbQEAAAABCwJgA39/fwF/YAAAAwMCAAEFBAEBAQEHFQIKY2hlY2tSYW5nZQAABHRlc3QAAQo5AicAA0AgACABRgRAQX8PCyAALQAAIAJGBEAgAEEBaiEADAELCyAADwsPAEGA/gNB1QBBgAL8CwAL",
    "memory_fill.1.wasm": "AGFzbQEAAAABCwJgA39/fwF/YAAAAwMCAAEFBAEBAQEHFQIKY2hlY2tSYW5nZQAABHRlc3QAAQo5AicAA0AgACABRgRAQX8PCyAALQAAIAJGBEAgAEEBaiEADAELCyAADwsPAEGA/gNB1QBBgQL8CwAL",
    "memory_fill.10.wasm": "AGFzbQEAAAABBAFgAAADAgEABQQBAQEBBwoBBnRlc3RmbgAACg0BCwBBCkEUQh78CwAL",
    "memory_fill.11.wasm": "AGFzbQEAAAABBAFgAAADAgEABQQBAQEBBwoBBnRlc3RmbgAAChQBEgBBCkEURAAAAAAAAD5A/AsACw==",
    "memory_fill.12.wasm": "AGFzbQEAAAABBAFgAAADAgEABQQBAQEBBwoBBnRlc3RmbgAAChABDgBBCkMAAKBBQR78CwAL",
    "memory_fill.13.wasm": "AGFzbQEAAAABBAFgAAADAgEABQQBAQEBBwoBBnRlc3RmbgAAChMBEQBBCkMAAKBBQwAA8EH8CwAL",
    "memory_fill.14.wasm": "AGFzbQEAAAABBAFgAAADAgEABQQBAQEBBwoBBnRlc3RmbgAAChABDgBBCkMAAKBBQh78CwAL",
    "memory_fill.15.wasm": "AGFzbQEAAAABBAFgAAADAgEABQQBAQEBBwoBBnRlc3RmbgAAChcBFQBBCkMAAKBBRAAAAAAAAD5A/AsACw==",
    "memory_fill.16.wasm": "AGFzbQEAAAABBAFgAAADAgEABQQBAQEBBwoBBnRlc3RmbgAACg0BCwBBCkIUQR78CwAL",
    "memory_fill.17.wasm": "AGFzbQEAAAABBAFgAAADAgEABQQBAQEBBwoBBnRlc3RmbgAAChABDgBBCkIUQwAA8EH8CwAL",
    "memory_fill.18.wasm": "AGFzbQEAAAABBAFgAAADAgEABQQBAQEBBwoBBnRlc3RmbgAACg0BCwBBCkIUQh78CwAL",
    "memory_fill.19.wasm": "AGFzbQEAAAABBAFgAAADAgEABQQBAQEBBwoBBnRlc3RmbgAAChQBEgBBCkIURAAAAAAAAD5A/AsACw==",
    "memory_fill.2.wasm": "AGFzbQEAAAABCwJgA39/fwF/YAAAAwMCAAEFBAEBAQEHFQIKY2hlY2tSYW5nZQAABHRlc3QAAQo4AicAA0AgACABRgRAQX8PCyAALQAAIAJGBEAgAEEBaiEADAELCyAADwsOAEGAfkHVAEGBAvwLAAs=",
    "memory_fill.20.wasm": "AGFzbQEAAAABBAFgAAADAgEABQQBAQEBBwoBBnRlc3RmbgAAChQBEgBBCkQAAAAAAAA0QEEe/AsACw==",
    "memory_fill.21.wasm": "AGFzbQEAAAABBAFgAAADAgEABQQBAQEBBwoBBnRlc3RmbgAAChcBFQBBCkQAAAAAAAA0QEMAAPBB/AsACw==",
    "memory_fill.22.wasm": "AGFzbQEAAAABBAFgAAADAgEABQQBAQEBBwoBBnRlc3RmbgAAChQBEgBBCkQAAAAAAAA0QEIe/AsACw==",
    "memory_fill.23.wasm": "AGFzbQEAAAABBAFgAAADAgEABQQBAQEBBwoBBnRlc3RmbgAAChsBGQBBCkQAAAAAAAA0QEQAAAAAAAA+QPwLAAs=",
    "memory_fill.24.wasm": "AGFzbQEAAAABBAFgAAADAgEABQQBAQEBBwoBBnRlc3RmbgAAChABDgBDAAAgQUEUQR78CwAL",
    "memory_fill.25.wasm": "AGFzbQEAAAABBAFgAAADAgEABQQBAQEBBwoBBnRlc3RmbgAAChMBEQBDAAAgQUEUQwAA8EH8CwAL",
    "memory_fill.26.wasm": "AGFzbQEAAAABBAFgAAADAgEABQQBAQEBBwoBBnRlc3RmbgAAChABDgBDAAAgQUEUQh78CwAL",
    "memory_fill.27.wasm": "AGFzbQEAAAABBAFgAAADAgEABQQBAQEBBwoBBnRlc3RmbgAAChcBFQBDAAAgQUEURAAAAAAAAD5A/AsACw==",
    "memory_fill.28.wasm": "AGFzbQEAAAABBAFgAAADAgEABQQBAQEBBwoBBnRlc3RmbgAAChMBEQBDAAAgQUMAAKBBQR78CwAL",
    "memory_fill.29.wasm": "AGFzbQEAAAABBAFgAAADAgEABQQBAQEBBwoBBnRlc3RmbgAAChYBFABDAAAgQUMAAKBBQwAA8EH8CwAL",
    "memory_fill.3.wasm": "AGFzbQEAAAABCwJgA39/fwF/YAAAAwMCAAEFBAEBAQEHFQIKY2hlY2tSYW5nZQAABHRlc3QAAQo2AicAA0AgACABRgRAQX8PCyAALQAAIAJGBEAgAEEBaiEADAELCyAADwsMAEESQdUAQQD8CwAL",
    "memory_fill.30.wasm": "AGFzbQEAAAABBAFgAAADAgEABQQBAQEBBwoBBnRlc3RmbgAAChMBEQBDAAAgQUMAAKBBQh78CwAL",
    "memory_fill.31.wasm": "AGFzbQEAAAABBAFgAAADAgEABQQBAQEBBwoBBnRlc3RmbgAAChoBGABDAAAgQUMAAKBBRAAAAAAAAD5A/AsACw==",
    "memory_fill.32.wasm": "AGFzbQEAAAABBAFgAAADAgEABQQBAQEBBwoBBnRlc3RmbgAAChABDgBDAAAgQUIUQR78CwAL",
    "memory_fill.33.wasm": "AGFzbQEAAAABBAFgAAADAgEABQQBAQEBBwoBBnRlc3RmbgAAChMBEQBDAAAgQUIUQwAA8EH8CwAL",
    "memory_fill.34.wasm": "AGFzbQEAAAABBAFgAAADAgEABQQBAQEBBwoBBnRlc3RmbgAAChABDgBDAAAgQUIUQh78CwAL",
    "memory_fill.35.wasm": "AGFzbQEAAAABBAFgAAADAgEABQQBAQEBBwoBBnRlc3RmbgAAChcBFQBDAAAgQUIURAAAAAAAAD5A/AsACw==",
    "memory_fill.36.wasm": "AGFzbQEAAAABBAFgAAADAgEABQQBAQEBBwoBBnRlc3RmbgAAChcBFQBDAAAgQUQAAAAAAAA0QEEe/AsACw==",
    "memory_fill.37.wasm": "AGFzbQEAAAABBAFgAAADAgEABQQBAQEBBwoBBnRlc3RmbgAAChoBGABDAAAgQUQAAAAAAAA0QEMAAPBB/AsACw==",
    "memory_fill.38.wasm": "AGFzbQEAAAABBAFgAAADAgEABQQBAQEBBwoBBnRlc3RmbgAAChcBFQBDAAAgQUQAAAAAAAA0QEIe/AsACw==",
    "memory_fill.39.wasm": "AGFzbQEAAAABBAFgAAADAgEABQQBAQEBBwoBBnRlc3RmbgAACh4BHABDAAAgQUQAAAAAAAA0QEQAAAAAAAA+QPwLAAs=",
    "memory_fill.4.wasm": "AGFzbQEAAAABCwJgA39/fwF/YAAAAwMCAAEFBAEBAQEHFQIKY2hlY2tSYW5nZQAABHRlc3QAAQo4AicAA0AgACABRgRAQX8PCyAALQAAIAJGBEAgAEEBaiEADAELCyAADwsOAEGAgARB1QBBAPwLAAs=",
    "memory_fill.40.wasm": "AGFzbQEAAAABBAFgAAADAgEABQQBAQEBBwoBBnRlc3RmbgAACg0BCwBCCkEUQR78CwAL",
    "memory_fill.41.wasm": "AGFzbQEAAAABBAFgAAADAgEABQQBAQEBBwoBBnRlc3RmbgAAChABDgBCCkEUQwAA8EH8CwAL",
    "memory_fill.42.wasm": "AGFzbQEAAAABBAFgAAADAgEABQQBAQEBBwoBBnRlc3RmbgAACg0BCwBCCkEUQh78CwAL",
    "memory_fill.43.wasm": "AGFzbQEAAAABBAFgAAADAgEABQQBAQEBBwoBBnRlc3RmbgAAChQBEgBCCkEURAAAAAAAAD5A/AsACw==",
    "memory_fill.44.wasm": "AGFzbQEAAAABBAFgAAADAgEABQQBAQEBBwoBBnRlc3RmbgAAChABDgBCCkMAAKBBQR78CwAL",
    "memory_fill.45.wasm": "AGFzbQEAAAABBAFgAAADAgEABQQBAQEBBwoBBnRlc3RmbgAAChMBEQBCCkMAAKBBQwAA8EH8CwAL",
    "memory_fill.46.wasm": "AGFzbQEAAAABBAFgAAADAgEABQQBAQEBBwoBBnRlc3RmbgAAChABDgBCCkMAAKBBQh78CwAL",
    "memory_fill.47.wasm": "AGFzbQEAAAABBAFgAAADAgEABQQBAQEBBwoBBnRlc3RmbgAAChcBFQBCCkMAAKBBRAAAAAAAAD5A/AsACw==",
    "memory_fill.48.wasm": "AGFzbQEAAAABBAFgAAADAgEABQQBAQEBBwoBBnRlc3RmbgAACg0BCwBCCkIUQR78CwAL",
    "memory_fill.49.wasm": "AGFzbQEAAAABBAFgAAADAgEABQQBAQEBBwoBBnRlc3RmbgAAChABDgBCCkIUQwAA8EH8CwAL",
    "memory_fill.5.wasm": "AGFzbQEAAAABCwJgA39/fwF/YAAAAwMCAAEFBAEBAQEHFQIKY2hlY2tSYW5nZQAABHRlc3QAAQo4AicAA0AgACABRgRAQX8PCyAALQAAIAJGBEAgAEEBaiEADAELCyAADwsOAEGAgAhB1QBBAPwLAAs=",
    "memory_fill.50.wasm": "AGFzbQEAAAABBAFgAAADAgEABQQBAQEBBwoBBnRlc3RmbgAACg0BCwBCCkIUQh78CwAL",
    "memory_fill.51.wasm": "AGFzbQEAAAABBAFgAAADAgEABQQBAQEBBwoBBnRlc3RmbgAAChQBEgBCCkIURAAAAAAAAD5A/AsACw==",
    "memory_fill.52.wasm": "AGFzbQEAAAABBAFgAAADAgEABQQBAQEBBwoBBnRlc3RmbgAAChQBEgBCCkQAAAAAAAA0QEEe/AsACw==",
    "memory_fill.53.wasm": "AGFzbQEAAAABBAFgAAADAgEABQQBAQEBBwoBBnRlc3RmbgAAChcBFQBCCkQAAAAAAAA0QEMAAPBB/AsACw==",
    "memory_fill.54.wasm": "AGFzbQEAAAABBAFgAAADAgEABQQBAQEBBwoBBnRlc3RmbgAAChQBEgBCCkQAAAAAAAA0QEIe/AsACw==",
    "memory_fill.55.wasm": "AGFzbQEAAAABBAFgAAADAgEABQQBAQEBBwoBBnRlc3RmbgAAChsBGQBCCkQAAAAAAAA0QEQAAAAAAAA+QPwLAAs=",
    "memory_fill.56.wasm": "AGFzbQEAAAABBAFgAAADAgEABQQBAQEBBwoBBnRlc3RmbgAAChQBEgBEAAAAAAAAJEBBFEEe/AsACw==",
    "memory_fill.57.wasm": "AGFzbQEAAAABBAFgAAADAgEABQQBAQEBBwoBBnRlc3RmbgAAChcBFQBEAAAAAAAAJEBBFEMAAPBB/AsACw==",
    "memory_fill.58.wasm": "AGFzbQEAAAABBAFgAAADAgEABQQBAQEBBwoBBnRlc3RmbgAAChQBEgBEAAAAAAAAJEBBFEIe/AsACw==",
    "memory_fill.59.wasm": "AGFzbQEAAAABBAFgAAADAgEABQQBAQEBBwoBBnRlc3RmbgAAChsBGQBEAAAAAAAAJEBBFEQAAAAAAAA+QPwLAAs=",
    "memory_fill.6.wasm": "AGFzbQEAAAABCwJgA39/fwF/YAAAAwMCAAEFBAEBAQEHFQIKY2hlY2tSYW5nZQAABHRlc3QAAQo4AicAA0AgACABRgRAQX8PCyAALQAAIAJGBEAgAEEBaiEADAELCyAADwsOAEEBQaoBQf7/A/wLAAs=",
    "memory_fill.60.wasm": "AGFzbQEAAAABBAFgAAADAgEABQQBAQEBBwoBBnRlc3RmbgAAChcBFQBEAAAAAAAAJEBDAACgQUEe/AsACw==",
    "memory_fill.61.wasm": "AGFzbQEAAAABBAFgAAADAgEABQQBAQEBBwoBBnRlc3RmbgAAChoBGABEAAAAAAAAJEBDAACgQUMAAPBB/AsACw==",
    "memory_fill.62.wasm": "AGFzbQEAAAABBAFgAAADAgEABQQBAQEBBwoBBnRlc3RmbgAAChcBFQBEAAAAAAAAJEBDAACgQUIe/AsACw==",
    "memory_fill.63.wasm": "AGFzbQEAAAABBAFgAAADAgEABQQBAQEBBwoBBnRlc3RmbgAACh4BHABEAAAAAAAAJEBDAACgQUQAAAAAAAA+QPwLAAs=",
    "memory_fill.64.wasm": "AGFzbQEAAAABBAFgAAADAgEABQQBAQEBBwoBBnRlc3RmbgAAChQBEgBEAAAAAAAAJEBCFEEe/AsACw==",
    "memory_fill.65.wasm": "AGFzbQEAAAABBAFgAAADAgEABQQBAQEBBwoBBnRlc3RmbgAAChcBFQBEAAAAAAAAJEBCFEMAAPBB/AsACw==",
    "memory_fill.66.wasm": "AGFzbQEAAAABBAFgAAADAgEABQQBAQEBBwoBBnRlc3RmbgAAChQBEgBEAAAAAAAAJEBCFEIe/AsACw==",
    "memory_fill.67.wasm": "AGFzbQEAAAABBAFgAAADAgEABQQBAQEBBwoBBnRlc3RmbgAAChsBGQBEAAAAAAAAJEBCFEQAAAAAAAA+QPwLAAs=",
    "memory_fill.68.wasm": "AGFzbQEAAAABBAFgAAADAgEABQQBAQEBBwoBBnRlc3RmbgAAChsBGQBEAAAAAAAAJEBEAAAAAAAANEBBHvwLAAs=",
    "memory_fill.69.wasm": "AGFzbQEAAAABBAFgAAADAgEABQQBAQEBBwoBBnRlc3RmbgAACh4BHABEAAAAAAAAJEBEAAAAAAAANEBDAADwQfwLAAs=",
    "memory_fill.7.wasm": "AGFzbQEAAAABCwJgA39/fwF/YAAAAwMCAAEFBAEBAQEHFQIKY2hlY2tSYW5nZQAABHRlc3QAAQpAAicAA0AgACABRgRAQX8PCyAALQAAIAJGBEAgAEEBaiEADAELCyAADwsWAEESQdUAQQr8CwBBFUGqAUEE/AsACw==",
    "memory_fill.70.wasm": "AGFzbQEAAAABBAFgAAADAgEABQQBAQEBBwoBBnRlc3RmbgAAChsBGQBEAAAAAAAAJEBEAAAAAAAANEBCHvwLAAs=",
    "memory_fill.71.wasm": "AGFzbQEAAAABBAFgAAADAgEABQQBAQEBBwoBBnRlc3RmbgAACiIBIABEAAAAAAAAJEBEAAAAAAAANEBEAAAAAAAAPkD8CwAL",
    "memory_fill.72.wasm": "AGFzbQEAAAABDgJgA39/fwF/YAN/f38AAwMCAAEFBAEBAQEHFAIKY2hlY2tSYW5nZQAAA3J1bgABCjUCJwADQCAAIAFGBEBBfw8LIAAtAAAgAkYEQCAAQQFqIQAMAQsLIAAPCwsAIAAgASAC/AsACw==",
    "memory_fill.73.wasm": "AGFzbQEAAAABDgJgA39/fwF/YAN/f38AAwMCAAEFBAEBAQEHFAIKY2hlY2tSYW5nZQAAA3J1bgABCjUCJwADQCAAIAFGBEBBfw8LIAAtAAAgAkYEQCAAQQFqIQAMAQsLIAAPCwsAIAAgASAC/AsACw==",
    "memory_fill.74.wasm": "AGFzbQEAAAABDgJgA39/fwF/YAN/f38AAwMCAAEFBAEBAQEHFAIKY2hlY2tSYW5nZQAAA3J1bgABCjUCJwADQCAAIAFGBEBBfw8LIAAtAAAgAkYEQCAAQQFqIQAMAQsLIAAPCwsAIAAgASAC/AsACw==",
    "memory_fill.8.wasm": "AGFzbQEAAAABBAFgAAADAgEABwoBBnRlc3RmbgAACg0BCwBBCkEUQR78CwAL",
    "memory_fill.9.wasm": "AGFzbQEAAAABBAFgAAADAgEABQQBAQEBBwoBBnRlc3RmbgAAChABDgBBCkEUQwAA8EH8CwAL"
  },
  "spec": {"source_filename": "/workspace/wasm-spec/test/core/memory_fill.wast",
 "commands": [
  {"type": "module", "line": 6, "filename": "memory_fill.0.wasm"}, 
  {"type": "action", "line": 22, "action": {"type": "invoke", "field": "test", "args": []}, "expected": []}, 
  {"type": "assert_return", "line": 24, "action": {"type": "invoke", "field": "checkRange", "args": [{"type": "i32", "value": "0"}, {"type": "i32", "value": "65280"}, {"type": "i32", "value": "0"}]}, "expected": [{"type": "i32", "value": "4294967295"}]}, 
  {"type": "assert_return", "line": 26, "action": {"type": "invoke", "field": "checkRange", "args": [{"type": "i32", "value": "65280"}, {"type": "i32", "value": "65536"}, {"type": "i32", "value": "85"}]}, "expected": [{"type": "i32", "value": "4294967295"}]}, 
  {"type": "module", "line": 28, "filename": "memory_fill.1.wasm"}, 
  {"type": "assert_trap", "line": 44, "action": {"type": "invoke", "field": "test", "args": []}, "text": "out of bounds memory access", "expected": []}, 
  {"type": "module", "line": 46, "filename": "memory_fill.2.wasm"}, 
  {"type": "assert_trap", "line": 62, "action": {"type": "invoke", "field": "test", "args": []}, "text": "out of bounds memory access", "expected": []}, 
  {"type": "module", "line": 64, "filename": "memory_fill.3.wasm"}, 
  {"type": "action", "line": 80, "action": {"type": "invoke", "field": "test", "args": []}, "expected": []}, 
  {"type": "assert_return", "line": 82, "action": {"type": "invoke", "field": "checkRange", "args": [{"type": "i32", "value": "0"}, {"type": "i32", "value": "65536"}, {"type": "i32", "value": "0"}]}, "expected": [{"type": "i32", "value": "4294967295"}]}, 
  {"type": "module", "line": 84, "filename": "memory_fill.4.wasm"}, 
  {"type": "action", "line": 100, "action": {"type": "invoke", "field": "test", "args": []}, "expected": []}, 
  {"type": "module", "line": 102, "filename": "memory_fill.5.wasm"}, 
  {"type": "assert_trap", "line": 118, "action": {"type": "invoke", "field": "test", "args": []}, "text": "out of bounds memory access", "expected": []}, 
  {"type": "module", "line": 120, "filename": "memory_fill.6.wasm"}, 
  {"type": "action", "line": 136, "action": {"type": "invoke", "field": "test", "args": []}, "expected": []}, 
  {"type": "assert_return", "line": 138, "action": {"type": "invoke", "field": "checkRange", "args": [{"type": "i32", "value": "0"}, {"type": "i32", "value": "1"}, {"type": "i32", "value": "0"}]}, "expected": [{"type": "i32", "value": "4294967295"}]}, 
  {"type": "assert_return", "line": 140, "action": {"type": "invoke", "field": "checkRange", "args": [{"type": "i32", "value": "1"}, {"type": "i32", "value": "65535"}, {"type": "i32", "value": "170"}]}, "expected": [{"type": "i32", "value": "4294967295"}]}, 
  {"type": "assert_return", "line": 142, "action": {"type": "invoke", "field": "checkRange", "args": [{"type": "i32", "value": "65535"}, {"type": "i32", "value": "65536"}, {"type": "i32", "value": "0"}]}, "expected": [{"type": "i32", "value": "4294967295"}]}, 
  {"type": "module", "line": 145, "filename": "memory_fill.7.wasm"}, 
  {"type": "action", "line": 162, "action": {"type": "invoke", "field": "test", "args": []}, "expected": []}, 
  {"type": "assert_return", "line": 164, "action": {"type": "invoke", "field": "checkRange", "args": [{"type": "i32", "value": "0"}, {"type": "i32", "value": "18"}, {"type": "i32", "value": "0"}]}, "expected": [{"type": "i32", "value": "4294967295"}]}, 
  {"type": "assert_return", "line": 166, "action": {"type": "invoke", "field": "checkRange", "args": [{"type": "i32", "value": "18"}, {"type": "i32", "value": "21"}, {"type": "i32", "value": "85"}]}, "expected": [{"type": "i32", "value": "4294967295"}]}, 
  {"type": "assert_return", "line": 168, "action": {"type": "invoke", "field": "checkRange", "args": [{"type": "i32", "value": "21"}, {"type": "i32", "value": "25"}, {"type": "i32", "value": "170"}]}, "expected": [{"type": "i32", "value": "4294967295"}]}, 
  {"type": "assert_return", "line": 170, "action": {"type": "invoke", "field": "checkRange", "args": [{"type": "i32", "value": "25"}, {"type": "i32", "value": "28"}, {"type": "i32", "value": "85"}]}, "expected": [{"type": "i32", "value": "4294967295"}]}, 
  {"type": "assert_return", "line": 172, "action": {"type": "invoke", "field": "checkRange", "args": [{"type": "i32", "value": "28"}, {"type": "i32", "value": "65536"}, {"type": "i32", "value": "0"}]}, "expected": [{"type": "i32", "value": "4294967295"}]}, 
  {"type": "assert_invalid", "line": 175, "filename": "memory_fill.8.wasm", "text": "unknown memory 0", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 181, "filename": "memory_fill.9.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 188, "filename": "memory_fill.10.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 195, "filename": "memory_fill.11.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 202, "filename": "memory_fill.12.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 209, "filename": "memory_fill.13.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 216, "filename": "memory_fill.14.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 223, "filename": "memory_fill.15.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 230, "filename": "memory_fill.16.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 237, "filename": "memory_fill.17.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 244, "filename": "memory_fill.18.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 251, "filename": "memory_fill.19.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 258, "filename": "memory_fill.20.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 265, "filename": "memory_fill.21.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 272, "filename": "memory_fill.22.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 279, "filename": "memory_fill.23.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 286, "filename": "memory_fill.24.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 293, "filename": "memory_fill.25.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 300, "filename": "memory_fill.26.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 307, "filename": "memory_fill.27.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 314, "filename": "memory_fill.28.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 321, "filename": "memory_fill.29.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 328, "filename": "memory_fill.30.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 335, "filename": "memory_fill.31.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 342, "filename": "memory_fill.32.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 349, "filename": "memory_fill.33.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 356, "filename": "memory_fill.34.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 363, "filename": "memory_fill.35.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 370, "filename": "memory_fill.36.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 377, "filename": "memory_fill.37.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 384, "filename": "memory_fill.38.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 391, "filename": "memory_fill.39.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 398, "filename": "memory_fill.40.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 405, "filename": "memory_fill.41.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 412, "filename": "memory_fill.42.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 419, "filename": "memory_fill.43.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 426, "filename": "memory_fill.44.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 433, "filename": "memory_fill.45.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 440, "filename": "memory_fill.46.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 447, "filename": "memory_fill.47.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 454, "filename": "memory_fill.48.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 461, "filename": "memory_fill.49.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 468, "filename": "memory_fill.50.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 475, "filename": "memory_fill.51.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 482, "filename": "memory_fill.52.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 489, "filename": "memory_fill.53.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 496, "filename": "memory_fill.54.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 503, "filename": "memory_fill.55.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 510, "filename": "memory_fill.56.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 517, "filename": "memory_fill.57.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 524, "filename": "memory_fill.58.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 531, "filename": "memory_fill.59.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 538, "filename": "memory_fill.60.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 545, "filename": "memory_fill.61.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 552, "filename": "memory_fill.62.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 559, "filename": "memory_fill.63.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 566, "filename": "memory_fill.64.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 573, "filename": "memory_fill.65.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 580, "filename": "memory_fill.66.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 587, "filename": "memory_fill.67.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 594, "filename": "memory_fill.68.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 601, "filename": "memory_fill.69.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 608, "filename": "memory_fill.70.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 615, "filename": "memory_fill.71.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "module", "line": 621, "filename": "memory_fill.72.wasm"}, 
  {"type": "assert_trap", "line": 638, "action": {"type": "invoke", "field": "run", "args": [{"type": "i32", "value": "65280"}, {"type": "i32", "value": "37"}, {"type": "i32", "value": "512"}]}, "text": "out of bounds memory access", "expected": []}, 
  {"type": "assert_return", "line": 641, "action": {"type": "invoke", "field": "checkRange", "args": [{"type": "i32", "value": "0"}, {"type": "i32", "value": "1"}, {"type": "i32", "value": "0"}]}, "expected": [{"type": "i32", "value": "4294967295"}]}, 
  {"type": "module", "line": 643, "filename": "memory_fill.73.wasm"}, 
  {"type": "assert_trap", "line": 660, "action": {"type": "invoke", "field": "run", "args": [{"type": "i32", "value": "65279"}, {"type": "i32", "value": "37"}, {"type": "i32", "value": "514"}]}, "text": "out of bounds memory access", "expected": []}, 
  {"type": "assert_return", "line": 663, "action": {"type": "invoke", "field": "checkRange", "args": [{"type": "i32", "value": "0"}, {"type": "i32", "value": "1"}, {"type": "i32", "value": "0"}]}, "expected": [{"type": "i32", "value": "4294967295"}]}, 
  {"type": "module", "line": 665, "filename": "memory_fill.74.wasm"}, 
  {"type": "assert_trap", "line": 682, "action": {"type": "invoke", "field": "run", "args": [{"type": "i32", "value": "65279"}, {"type": "i32", "value": "37"}, {"type": "i32", "value": "4294967295"}]}, "text": "out of bounds memory access", "expected": []}, 
  {"type": "assert_return", "line": 685, "action": {"type": "invoke", "field": "checkRange", "args": [{"type": "i32", "value": "0"}, {"type": "i32", "value": "1"}, {"type": "i32", "value": "0"}]}, "expected": [{"type": "i32", "value": "4294967295"}]}]},
  "code": [
    "(module (memory 1 1)\n  (func (export \"checkRange\") (param $from i32) (param $to i32) (param $expected i32) (result i32) (loop $cont (if (i32.eq (local.get $from) (local.get $to)) (then (return (i32.const -1)))) (if (i32.eq (i32.load8_u (local.get $from)) (local.get $expected)) (then (local.set $from (i32.add (local.get $from) (i32.const 1))) (br $cont)))) (return (local.get $from)))\n  (func (export \"test\") (memory.fill (i32.const 0xFF00) (i32.const 0x55) (i32.const 256))))",
    "(invoke \"test\")",
    "(assert_return (invoke \"checkRange\" (i32.const 0) (i32.const 65280) (i32.const 0)) (i32.const -1))",
    "(assert_return (invoke \"checkRange\" (i32.const 65280) (i32.const 65536) (i32.const 85)) (i32.const -1))",
    "(module (memory 1 1)\n  (func (export \"checkRange\") (param $from i32) (param $to i32) (param $expected i32) (result i32) (loop $cont (if (i32.eq (local.get $from) (local.get $to)) (then (return (i32.const -1)))) (if (i32.eq (i32.load8_u (local.get $from)) (local.get $expected)) (then (local.set $from (i32.add (local.get $from) (i32.const 1))) (br $cont)))) (return (local.get $from)))\n  (func (export \"test\") (memory.fill (i32.const 0xFF00) (i32.const 0x55) (i32.const 257))))",
    "(assert_trap (invoke \"test\") \"out of bounds memory access\")",
    "(module (memory 1 1)\n  (func (export \"checkRange\") (param $from i32) (param $to i32) (param $expected i32) (result i32) (loop $cont (if (i32.eq (local.get $from) (local.get $to)) (then (return (i32.const -1)))) (if (i32.eq (i32.load8_u (local.get $from)) (local.get $expected)) (then (local.set $from (i32.add (local.get $from) (i32.const 1))) (br $cont)))) (return (local.get $from)))\n  (func (export \"test\") (memory.fill (i32.const 0xFFFFFF00) (i32.const 0x55) (i32.const 257))))",
    "(assert_trap (invoke \"test\") \"out of bounds memory access\")",
    "(module (memory 1 1)\n  (func (export \"checkRange\") (param $from i32) (param $to i32) (param $expected i32) (result i32) (loop $cont (if (i32.eq (local.get $from) (local.get $to)) (then (return (i32.const -1)))) (if (i32.eq (i32.load8_u (local.get $from)) (local.get $expected)) (then (local.set $from (i32.add (local.get $from) (i32.const 1))) (br $cont)))) (return (local.get $from)))\n  (func (export \"test\") (memory.fill (i32.const 0x12) (i32.const 0x55) (i32.const 0))))",
    "(invoke \"test\")",
    "(assert_return (invoke \"checkRange\" (i32.const 0) (i32.const 65536) (i32.const 0)) (i32.const -1))",
    "(module (memory 1 1)\n  (func (export \"checkRange\") (param $from i32) (param $to i32) (param $expected i32) (result i32) (loop $cont (if (i32.eq (local.get $from) (local.get $to)) (then (return (i32.const -1)))) (if (i32.eq (i32.load8_u (local.get $from)) (local.get $expected)) (then (local.set $from (i32.add (local.get $from) (i32.const 1))) (br $cont)))) (return (local.get $from)))\n  (func (export \"test\") (memory.fill (i32.const 0x10000) (i32.const 0x55) (i32.const 0))))",
    "(invoke \"test\")",
    "(module (memory 1 1)\n  (func (export \"checkRange\") (param $from i32) (param $to i32) (param $expected i32) (result i32) (loop $cont (if (i32.eq (local.get $from) (local.get $to)) (then (return (i32.const -1)))) (if (i32.eq (i32.load8_u (local.get $from)) (local.get $expected)) (then (local.set $from (i32.add (local.get $from) (i32.const 1))) (br $cont)))) (return (local.get $from)))\n  (func (export \"test\") (memory.fill (i32.const 0x20000) (i32.const 0x55) (i32.const 0))))",
    "(assert_trap (invoke \"test\") \"out of bounds memory access\")",
    "(module (memory 1 1)\n  (func (export \"checkRange\") (param $from i32) (param $to i32) (param $expected i32) (result i32) (loop $cont (if (i32.eq (local.get $from) (local.get $to)) (then (return (i32.const -1)))) (if (i32.eq (i32.load8_u (local.get $from)) (local.get $expected)) (then (local.set $from (i32.add (local.get $from) (i32.const 1))) (br $cont)))) (return (local.get $from)))\n  (func (export \"test\") (memory.fill (i32.const 0x1) (i32.const 0xAA) (i32.const 0xFFFE))))",
    "(invoke \"test\")",
    "(assert_return (invoke \"checkRange\" (i32.const 0) (i32.const 1) (i32.const 0)) (i32.const -1))",
    "(assert_return (invoke \"checkRange\" (i32.const 1) (i32.const 65535) (i32.const 170)) (i32.const -1))",
    "(assert_return (invoke \"checkRange\" (i32.const 65535) (i32.const 65536) (i32.const 0)) (i32.const -1))",
    "(module (memory 1 1)\n  (func (export \"checkRange\") (param $from i32) (param $to i32) (param $expected i32) (result i32) (loop $cont (if (i32.eq (local.get $from) (local.get $to)) (then (return (i32.const -1)))) (if (i32.eq (i32.load8_u (local.get $from)) (local.get $expected)) (then (local.set $from (i32.add (local.get $from) (i32.const 1))) (br $cont)))) (return (local.get $from)))\n  (func (export \"test\") (memory.fill (i32.const 0x12) (i32.const 0x55) (i32.const 10)) (memory.fill (i32.const 0x15) (i32.const 0xAA) (i32.const 4))))",
    "(invoke \"test\")",
    "(assert_return (invoke \"checkRange\" (i32.const 0) (i32.const 18) (i32.const 0)) (i32.const -1))",
    "(assert_return (invoke \"checkRange\" (i32.const 18) (i32.const 21) (i32.const 85)) (i32.const -1))",
    "(assert_return (invoke \"checkRange\" (i32.const 21) (i32.const 25) (i32.const 170)) (i32.const -1))",
    "(assert_return (invoke \"checkRange\" (i32.const 25) (i32.const 28) (i32.const 85)) (i32.const -1))",
    "(assert_return (invoke \"checkRange\" (i32.const 28) (i32.const 65536) (i32.const 0)) (i32.const -1))",
    "(assert_invalid (module (func (export \"testfn\") (memory.fill (i32.const 10) (i32.const 20) (i32.const 30)))) \"unknown memory 0\")",
    "(assert_invalid (module (memory 1 1) (func (export \"testfn\") (memory.fill (i32.const 10) (i32.const 20) (f32.const 30)))) \"type mismatch\")",
    "(assert_invalid (module (memory 1 1) (func (export \"testfn\") (memory.fill (i32.const 10) (i32.const 20) (i64.const 30)))) \"type mismatch\")",
    "(assert_invalid (module (memory 1 1) (func (export \"testfn\") (memory.fill (i32.const 10) (i32.const 20) (f64.const 30)))) \"type mismatch\")",
    "(assert_invalid (module (memory 1 1) (func (export \"testfn\") (memory.fill (i32.const 10) (f32.const 20) (i32.const 30)))) \"type mismatch\")",
    "(assert_invalid (module (memory 1 1) (func (export \"testfn\") (memory.fill (i32.const 10) (f32.const 20) (f32.const 30)))) \"type mismatch\")",
    "(assert_invalid (module (memory 1 1) (func (export \"testfn\") (memory.fill (i32.const 10) (f32.const 20) (i64.const 30)))) \"type mismatch\")",
    "(assert_invalid (module (memory 1 1) (func (export \"testfn\") (memory.fill (i32.const 10) (f32.const 20) (f64.const 30)))) \"type mismatch\")",
    "(assert_invalid (module (memory 1 1) (func (export \"testfn\") (memory.fill (i32.const 10) (i64.const 20) (i32.const 30)))) \"type mismatch\")",
    "(assert_invalid (module (memory 1 1) (func (export \"testfn\") (memory.fill (i32.const 10) (i64.const 20) (f32.const 30)))) \"type mismatch\")",
    "(assert_invalid (module (memory 1 1) (func (export \"testfn\") (memory.fill (i32.const 10) (i64.const 20) (i64.const 30)))) \"type mismatch\")",
    "(assert_invalid (module (memory 1 1) (func (export \"testfn\") (memory.fill (i32.const 10) (i64.const 20) (f64.const 30)))) \"type mismatch\")",
    "(assert_invalid (module (memory 1 1) (func (export \"testfn\") (memory.fill (i32.const 10) (f64.const 20) (i32.const 30)))) \"type mismatch\")",
    "(assert_invalid (module (memory 1 1) (func (export \"testfn\") (memory.fill (i32.const 10) (f64.const 20) (f32.const 30)))) \"type mismatch\")",
    "(assert_invalid (module (memory 1 1) (func (export \"testfn\") (memory.fill (i32.const 10) (f64.const 20) (i64.const 30)))) \"type mismatch\")",
    "(assert_invalid (module (memory 1 1) (func (export \"testfn\") (memory.fill (i32.const 10) (f64.const 20) (f64.const 30)))) \"type mismatch\")",
    "(assert_invalid (module (memory 1 1) (func (export \"testfn\") (memory.fill (f32.const 10) (i32.const 20) (i32.const 30)))) \"type mismatch\")",
    "(assert_invalid (module (memory 1 1) (func (export \"testfn\") (memory.fill (f32.const 10) (i32.const 20) (f32.const 30)))) \"type mismatch\")",
    "(assert_invalid (module (memory 1 1) (func (export \"testfn\") (memory.fill (f32.const 10) (i32.const 20) (i64.const 30)))) \"type mismatch\")",
    "(assert_invalid (module (memory 1 1) (func (export \"testfn\") (memory.fill (f32.const 10) (i32.const 20) (f64.const 30)))) \"type mismatch\")",
    "(assert_invalid (module (memory 1 1) (func (export \"testfn\") (memory.fill (f32.const 10) (f32.const 20) (i32.const 30)))) \"type mismatch\")",
    "(assert_invalid (module (memory 1 1) (func (export \"testfn\") (memory.fill (f32.const 10) (f32.const 20) (f32.const 30)))) \"type mismatch\")",
    "(assert_invalid (module (memory 1 1) (func (export \"testfn\") (memory.fill (f32.const 10) (f32.const 20) (i64.const 30)))) \"type mismatch\")",
    "(assert_invalid (module (memory 1 1) (func (export \"testfn\") (memory.fill (f32.const 10) (f32.const 20) (f64.const 30)))) \"type mismatch\")",
    "(assert_invalid (module (memory 1 1) (func (export \"testfn\") (memory.fill (f32.const 10) (i64.const 20) (i32.const 30)))) \"type mismatch\")",
    "(assert_invalid (module (memory 1 1) (func (export \"testfn\") (memory.fill (f32.const 10) (i64.const 20) (f32.const 30)))) \"type mismatch\")",
    "(assert_invalid (module (memory 1 1) (func (export \"testfn\") (memory.fill (f32.const 10) (i64.const 20) (i64.const 30)))) \"type mismatch\")",
    "(assert_invalid (module (memory 1 1) (func (export \"testfn\") (memory.fill (f32.const 10) (i64.const 20) (f64.const 30)))) \"type mismatch\")",
    "(assert_invalid (module (memory 1 1) (func (export \"testfn\") (memory.fill (f32.const 10) (f64.const 20) (i32.const 30)))) \"type mismatch\")",
    "(assert_invalid (module (memory 1 1) (func (export \"testfn\") (memory.fill (f32.const 10) (f64.const 20) (f32.const 30)))) \"type mismatch\")",
    "(assert_invalid (module (memory 1 1) (func (export \"testfn\") (memory.fill (f32.const 10) (f64.const 20) (i64.const 30)))) \"type mismatch\")",
    "(assert_invalid (module (memory 1 1) (func (export \"testfn\") (memory.fill (f32.const 10) (f64.const 20) (f64.const 30)))) \"type mismatch\")",
    "(assert_invalid (module (memory 1 1) (func (export \"testfn\") (memory.fill (i64.const 10) (i32.const 20) (i32.const 30)))) \"type mismatch\")",
    "(assert_invalid (module (memory 1 1) (func (export \"testfn\") (memory.fill (i64.const 10) (i32.const 20) (f32.const 30)))) \"type mismatch\")",
    "(assert_invalid (module (memory 1 1) (func (export \"testfn\") (memory.fill (i64.const 10) (i32.const 20) (i64.const 30)))) \"type mismatch\")",
    "(assert_invalid (module (memory 1 1) (func (export \"testfn\") (memory.fill (i64.const 10) (i32.const 20) (f64.const 30)))) \"type mismatch\")",
    "(assert_invalid (module (memory 1 1) (func (export \"testfn\") (memory.fill (i64.const 10) (f32.const 20) (i32.const 30)))) \"type mismatch\")",
    "(assert_invalid (module (memory 1 1) (func (export \"testfn\") (memory.fill (i64.const 10) (f32.const 20) (f32.const 30)))) \"type mismatch\")",
    "(assert_invalid (module (memory 1 1) (func (export \"testfn\") (memory.fill (i64.const 10) (f32.const 20) (i64.const 30)))) \"type mismatch\")",
    "(assert_invalid (module (memory 1 1) (func (export \"testfn\") (memory.fill (i64.const 10) (f32.const 20) (f64.const 30)))) \"type mismatch\")",
    "(assert_invalid (module (memory 1 1) (func (export \"testfn\") (memory.fill (i64.const 10) (i64.const 20) (i32.const 30)))) \"type mismatch\")",
    "(assert_invalid (module (memory 1 1) (func (export \"testfn\") (memory.fill (i64.const 10) (i64.const 20) (f32.const 30)))) \"type mismatch\")",
    "(assert_invalid (module (memory 1 1) (func (export \"testfn\") (memory.fill (i64.const 10) (i64.const 20) (i64.const 30)))) \"type mismatch\")",
    "(assert_invalid (module (memory 1 1) (func (export \"testfn\") (memory.fill (i64.const 10) (i64.const 20) (f64.const 30)))) \"type mismatch\")",
    "(assert_invalid (module (memory 1 1) (func (export \"testfn\") (memory.fill (i64.const 10) (f64.const 20) (i32.const 30)))) \"type mismatch\")",
    "(assert_invalid (module (memory 1 1) (func (export \"testfn\") (memory.fill (i64.const 10) (f64.const 20) (f32.const 30)))) \"type mismatch\")",
    "(assert_invalid (module (memory 1 1) (func (export \"testfn\") (memory.fill (i64.const 10) (f64.const 20) (i64.const 30)))) \"type mismatch\")",
    "(assert_invalid (module (memory 1 1) (func (export \"testfn\") (memory.fill (i64.const 10) (f64.const 20) (f64.const 30)))) \"type mismatch\")",
    "(assert_invalid (module (memory 1 1) (func (export \"testfn\") (memory.fill (f64.const 10) (i32.const 20) (i32.const 30)))) \"type mismatch\")",
    "(assert_invalid (module (memory 1 1) (func (export \"testfn\") (memory.fill (f64.const 10) (i32.const 20) (f32.const 30)))) \"type mismatch\")",
    "(assert_invalid (module (memory 1 1) (func (export \"testfn\") (memory.fill (f64.const 10) (i32.const 20) (i64.const 30)))) \"type mismatch\")",
    "(assert_invalid (module (memory 1 1) (func (export \"testfn\") (memory.fill (f64.const 10) (i32.const 20) (f64.const 30)))) \"type mismatch\")",
    "(assert_invalid (module (memory 1 1) (func (export \"testfn\") (memory.fill (f64.const 10) (f32.const 20) (i32.const 30)))) \"type mismatch\")",
    "(assert_invalid (module (memory 1 1) (func (export \"testfn\") (memory.fill (f64.const 10) (f32.const 20) (f32.const 30)))) \"type mismatch\")",
    "(assert_invalid (module (memory 1 1) (func (export \"testfn\") (memory.fill (f64.const 10) (f32.const 20) (i64.const 30)))) \"type mismatch\")",
    "(assert_invalid (module (memory 1 1) (func (export \"testfn\") (memory.fill (f64.const 10) (f32.const 20) (f64.const 30)))) \"type mismatch\")",
    "(assert_invalid (module (memory 1 1) (func (export \"testfn\") (memory.fill (f64.const 10) (i64.const 20) (i32.const 30)))) \"type mismatch\")",
    "(assert_invalid (module (memory 1 1) (func (export \"testfn\") (memory.fill (f64.const 10) (i64.const 20) (f32.const 30)))) \"type mismatch\")",
    "(assert_invalid (module (memory 1 1) (func (export \"testfn\") (memory.fill (f64.const 10) (i64.const 20) (i64.const 30)))) \"type mismatch\")",
    "(assert_invalid (module (memory 1 1) (func (export \"testfn\") (memory.fill (f64.const 10) (i64.const 20) (f64.const 30)))) \"type mismatch\")",
    "(assert_invalid (module (memory 1 1) (func (export \"testfn\") (memory.fill (f64.const 10) (f64.const 20) (i32.const 30)))) \"type mismatch\")",
    "(assert_invalid (module (memory 1 1) (func (export \"testfn\") (memory.fill (f64.const 10) (f64.const 20) (f32.const 30)))) \"type mismatch\")",
    "(assert_invalid (module (memory 1 1) (func (export \"testfn\") (memory.fill (f64.const 10) (f64.const 20) (i64.const 30)))) \"type mismatch\")",
    "(assert_invalid (module (memory 1 1) (func (export \"testfn\") (memory.fill (f64.const 10) (f64.const 20) (f64.const 30)))) \"type mismatch\")",
    "(module (memory 1 1 )\n  (func (export \"checkRange\") (param $from i32) (param $to i32) (param $expected i32) (result i32) (loop $cont (if (i32.eq (local.get $from) (local.get $to)) (then (return (i32.const -1)))) (if (i32.eq (i32.load8_u (local.get $from)) (local.get $expected)) (then (local.set $from (i32.add (local.get $from) (i32.const 1))) (br $cont)))) (return (local.get $from)))\n  (func (export \"run\") (param $offs i32) (param $val i32) (param $len i32) (memory.fill (local.get $offs) (local.get $val) (local.get $len))))",
    "(assert_trap (invoke \"run\" (i32.const 65280) (i32.const 37) (i32.const 512)) \"out of bounds memory access\")",
    "(assert_return (invoke \"checkRange\" (i32.const 0) (i32.const 1) (i32.const 0)) (i32.const -1))",
    "(module (memory 1 1 )\n  (func (export \"checkRange\") (param $from i32) (param $to i32) (param $expected i32) (result i32) (loop $cont (if (i32.eq (local.get $from) (local.get $to)) (then (return (i32.const -1)))) (if (i32.eq (i32.load8_u (local.get $from)) (local.get $expected)) (then (local.set $from (i32.add (local.get $from) (i32.const 1))) (br $cont)))) (return (local.get $from)))\n  (func (export \"run\") (param $offs i32) (param $val i32) (param $len i32) (memory.fill (local.get $offs) (local.get $val) (local.get $len))))",
    "(assert_trap (invoke \"run\" (i32.const 65279) (i32.const 37) (i32.const 514)) \"out of bounds memory access\")",
    "(assert_return (invoke \"checkRange\" (i32.const 0) (i32.const 1) (i32.const 0)) (i32.const -1))",
    "(module (memory 1 1 )\n  (func (export \"checkRange\") (param $from i32) (param $to i32) (param $expected i32) (result i32) (loop $cont (if (i32.eq (local.get $from) (local.get $to)) (then (return (i32.const -1)))) (if (i32.eq (i32.load8_u (local.get $from)) (local.get $expected)) (then (local.set $from (i32.add (local.get $from) (i32.const 1))) (br $cont)))) (return (local.get $from)))\n  (func (export \"run\") (param $offs i32) (param $val i32) (param $len i32) (memory.fill (local.get $offs) (local.get $val) (local.get $len))))",
    "(assert_trap (invoke \"run\" (i32.const 65279) (i32.const 37) (i32.const 4294967295)) \"out of bounds memory access\")",
    "(assert_return (invoke \"checkRange\" (i32.const 0) (i32.const 1) (i32.const 0)) (i32.const -1))"
  ],
  "dump": {
    "memory_fill.0.wasm": {
      "header": "\nmemory_fill.0.wasm:\tfile format wasm 0x1\n\nSections:\n\n     Type start=0x0000000a end=0x00000015 (size=0x0000000b) count: 2\n Function start=0x00000017 end=0x0000001a (size=0x00000003) count: 2\n   Memory start=0x0000001c end=0x00000020 (size=0x00000004) count: 1\n   Export start=0x00000022 end=0x00000037 (size=0x00000015) count: 2\n     Code start=0x00000039 end=0x00000072 (size=0x00000039) count: 2\n",
      "details": "\nmemory_fill.0.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nType[2]:\n - type[0] (i32, i32, i32) -> i32\n - type[1] () -> nil\nFunction[2]:\n - func[0] sig=0 <checkRange>\n - func[1] sig=1 <test>\nMemory[1]:\n - memory[0] pages: initial=1 max=1\nExport[2]:\n - func[0] <checkRange> -> \"checkRange\"\n - func[1] <test> -> \"test\"\nCode[2]:\n - func[0] size=39 <checkRange>\n - func[1] size=15 <test>\n",
      "disassemble": "\nmemory_fill.0.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n00003b func[0] <checkRange>:\n 00003c: 03 40                      | loop\n 00003e: 20 00                      |   local.get 0\n 000040: 20 01                      |   local.get 1\n 000042: 46                         |   i32.eq\n 000043: 04 40                      |   if\n 000045: 41 7f                      |     i32.const 4294967295\n 000047: 0f                         |     return\n 000048: 0b                         |   end\n 000049: 20 00                      |   local.get 0\n 00004b: 2d 00 00                   |   i32.load8_u 0 0\n 00004e: 20 02                      |   local.get 2\n 000050: 46                         |   i32.eq\n 000051: 04 40                      |   if\n 000053: 20 00                      |     local.get 0\n 000055: 41 01                      |     i32.const 1\n 000057: 6a                         |     i32.add\n 000058: 21 00                      |     local.set 0\n 00005a: 0c 01                      |     br 1\n 00005c: 0b                         |   end\n 00005d: 0b                         | end\n 00005e: 20 00                      | local.get 0\n 000060: 0f                         | return\n 000061: 0b                         | end\n000063 func[1] <test>:\n 000064: 41 80 fe 03                | i32.const 65280\n 000068: 41 d5 00                   | i32.const 85\n 00006b: 41 80 02                   | i32.const 256\n 00006e: fc 0b 00                   | memory.fill 0\n 000071: 0b                         | end\n"
    },
    "memory_fill.1.wasm": {
      "header": "\nmemory_fill.1.wasm:\tfile format wasm 0x1\n\nSections:\n\n     Type start=0x0000000a end=0x00000015 (size=0x0000000b) count: 2\n Function start=0x00000017 end=0x0000001a (size=0x00000003) count: 2\n   Memory start=0x0000001c end=0x00000020 (size=0x00000004) count: 1\n   Export start=0x00000022 end=0x00000037 (size=0x00000015) count: 2\n     Code start=0x00000039 end=0x00000072 (size=0x00000039) count: 2\n",
      "details": "\nmemory_fill.1.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nType[2]:\n - type[0] (i32, i32, i32) -> i32\n - type[1] () -> nil\nFunction[2]:\n - func[0] sig=0 <checkRange>\n - func[1] sig=1 <test>\nMemory[1]:\n - memory[0] pages: initial=1 max=1\nExport[2]:\n - func[0] <checkRange> -> \"checkRange\"\n - func[1] <test> -> \"test\"\nCode[2]:\n - func[0] size=39 <checkRange>\n - func[1] size=15 <test>\n",
      "disassemble": "\nmemory_fill.1.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n00003b func[0] <checkRange>:\n 00003c: 03 40                      | loop\n 00003e: 20 00                      |   local.get 0\n 000040: 20 01                      |   local.get 1\n 000042: 46                         |   i32.eq\n 000043: 04 40                      |   if\n 000045: 41 7f                      |     i32.const 4294967295\n 000047: 0f                         |     return\n 000048: 0b                         |   end\n 000049: 20 00                      |   local.get 0\n 00004b: 2d 00 00                   |   i32.load8_u 0 0\n 00004e: 20 02                      |   local.get 2\n 000050: 46                         |   i32.eq\n 000051: 04 40                      |   if\n 000053: 20 00                      |     local.get 0\n 000055: 41 01                      |     i32.const 1\n 000057: 6a                         |     i32.add\n 000058: 21 00                      |     local.set 0\n 00005a: 0c 01                      |     br 1\n 00005c: 0b                         |   end\n 00005d: 0b                         | end\n 00005e: 20 00                      | local.get 0\n 000060: 0f                         | return\n 000061: 0b                         | end\n000063 func[1] <test>:\n 000064: 41 80 fe 03                | i32.const 65280\n 000068: 41 d5 00                   | i32.const 85\n 00006b: 41 81 02                   | i32.const 257\n 00006e: fc 0b 00                   | memory.fill 0\n 000071: 0b                         | end\n"
    },
    "memory_fill.2.wasm": {
      "header": "\nmemory_fill.2.wasm:\tfile format wasm 0x1\n\nSections:\n\n     Type start=0x0000000a end=0x00000015 (size=0x0000000b) count: 2\n Function start=0x00000017 end=0x0000001a (size=0x00000003) count: 2\n   Memory start=0x0000001c end=0x00000020 (size=0x00000004) count: 1\n   Export start=0x00000022 end=0x00000037 (size=0x00000015) count: 2\n     Code start=0x00000039 end=0x00000071 (size=0x00000038) count: 2\n",
      "details": "\nmemory_fill.2.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nType[2]:\n - type[0] (i32, i32, i32) -> i32\n - type[1] () -> nil\nFunction[2]:\n - func[0] sig=0 <checkRange>\n - func[1] sig=1 <test>\nMemory[1]:\n - memory[0] pages: initial=1 max=1\nExport[2]:\n - func[0] <checkRange> -> \"checkRange\"\n - func[1] <test> -> \"test\"\nCode[2]:\n - func[0] size=39 <checkRange>\n - func[1] size=14 <test>\n",
      "disassemble": "\nmemory_fill.2.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n00003b func[0] <checkRange>:\n 00003c: 03 40                      | loop\n 00003e: 20 00                      |   local.get 0\n 000040: 20 01                      |   local.get 1\n 000042: 46                         |   i32.eq\n 000043: 04 40                      |   if\n 000045: 41 7f                      |     i32.const 4294967295\n 000047: 0f                         |     return\n 000048: 0b                         |   end\n 000049: 20 00                      |   local.get 0\n 00004b: 2d 00 00                   |   i32.load8_u 0 0\n 00004e: 20 02                      |   local.get 2\n 000050: 46                         |   i32.eq\n 000051: 04 40                      |   if\n 000053: 20 00                      |     local.get 0\n 000055: 41 01                      |     i32.const 1\n 000057: 6a                         |     i32.add\n 000058: 21 00                      |     local.set 0\n 00005a: 0c 01                      |     br 1\n 00005c: 0b                         |   end\n 00005d: 0b                         | end\n 00005e: 20 00                      | local.get 0\n 000060: 0f                         | return\n 000061: 0b                         | end\n000063 func[1] <test>:\n 000064: 41 80 7e                   | i32.const 4294967040\n 000067: 41 d5 00                   | i32.const 85\n 00006a: 41 81 02                   | i32.const 257\n 00006d: fc 0b 00                   | memory.fill 0\n 000070: 0b                         | end\n"
    },
    "memory_fill.3.wasm": {
      "header": "\nmemory_fill.3.wasm:\tfile format wasm 0x1\n\nSections:\n\n     Type start=0x0000000a end=0x00000015 (size=0x0000000b) count: 2\n Function start=0x00000017 end=0x0000001a (size=0x00000003) count: 2\n   Memory start=0x0000001c end=0x00000020 (size=0x00000004) count: 1\n   Export start=0x00000022 end=0x00000037 (size=0x00000015) count: 2\n     Code start=0x00000039 end=0x0000006f (size=0x00000036) count: 2\n",
      "details": "\nmemory_fill.3.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nType[2]:\n - type[0] (i32, i32, i32) -> i32\n - type[1] () -> nil\nFunction[2]:\n - func[0] sig=0 <checkRange>\n - func[1] sig=1 <test>\nMemory[1]:\n - memory[0] pages: initial=1 max=1\nExport[2]:\n - func[0] <checkRange> -> \"checkRange\"\n - func[1] <test> -> \"test\"\nCode[2]:\n - func[0] size=39 <checkRange>\n - func[1] size=12 <test>\n",
      "disassemble": "\nmemory_fill.3.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n00003b func[0] <checkRange>:\n 00003c: 03 40                      | loop\n 00003e: 20 00                      |   local.get 0\n 000040: 20 01                      |   local.get 1\n 000042: 46                         |   i32.eq\n 000043: 04 40                      |   if\n 000045: 41 7f                      |     i32.const 4294967295\n 000047: 0f                         |     return\n 000048: 0b                         |   end\n 000049: 20 00                      |   local.get 0\n 00004b: 2d 00 00                   |   i32.load8_u 0 0\n 00004e: 20 02                      |   local.get 2\n 000050: 46                         |   i32.eq\n 000051: 04 40                      |   if\n 000053: 20 00                      |     local.get 0\n 000055: 41 01                      |     i32.const 1\n 000057: 6a                         |     i32.add\n 000058: 21 00                      |     local.set 0\n 00005a: 0c 01                      |     br 1\n 00005c: 0b                         |   end\n 00005d: 0b                         | end\n 00005e: 20 00                      | local.get 0\n 000060: 0f                         | return\n 000061: 0b                         | end\n000063 func[1] <test>:\n 000064: 41 12                      | i32.const 18\n 000066: 41 d5 00                   | i32.const 85\n 000069: 41 00                      | i32.const 0\n 00006b: fc 0b 00                   | memory.fill 0\n 00006e: 0b                         | end\n"
    },
    "memory_fill.4.wasm": {
      "header": "\nmemory_fill.4.wasm:\tfile format wasm 0x1\n\nSections:\n\n     Type start=0x0000000a end=0x00000015 (size=0x0000000b) count: 2\n Function start=0x00000017 end=0x0000001a (size=0x00000003) count: 2\n   Memory start=0x0000001c end=0x00000020 (size=0x00000004) count: 1\n   Export start=0x00000022 end=0x00000037 (size=0x00000015) count: 2\n     Code start=0x00000039 end=0x00000071 (size=0x00000038) count: 2\n",
      "details": "\nmemory_fill.4.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nType[2]:\n - type[0] (i32, i32, i32) -> i32\n - type[1] () -> nil\nFunction[2]:\n - func[0] sig=0 <checkRange>\n - func[1] sig=1 <test>\nMemory[1]:\n - memory[0] pages: initial=1 max=1\nExport[2]:\n - func[0] <checkRange> -> \"checkRange\"\n - func[1] <test> -> \"test\"\nCode[2]:\n - func[0] size=39 <checkRange>\n - func[1] size=14 <test>\n",
      "disassemble": "\nmemory_fill.4.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n00003b func[0] <checkRange>:\n 00003c: 03 40                      | loop\n 00003e: 20 00                      |   local.get 0\n 000040: 20 01                      |   local.get 1\n 000042: 46                         |   i32.eq\n 000043: 04 40                      |   if\n 000045: 41 7f                      |     i32.const 4294967295\n 000047: 0f                         |     return\n 000048: 0b                         |   end\n 000049: 20 00                      |   local.get 0\n 00004b: 2d 00 00                   |   i32.load8_u 0 0\n 00004e: 20 02                      |   local.get 2\n 000050: 46                         |   i32.eq\n 000051: 04 40                      |   if\n 000053: 20 00                      |     local.get 0\n 000055: 41 01                      |     i32.const 1\n 000057: 6a                         |     i32.add\n 000058: 21 00                      |     local.set 0\n 00005a: 0c 01                      |     br 1\n 00005c: 0b                         |   end\n 00005d: 0b                         | end\n 00005e: 20 00                      | local.get 0\n 000060: 0f                         | return\n 000061: 0b                         | end\n000063 func[1] <test>:\n 000064: 41 80 80 04                | i32.const 65536\n 000068: 41 d5 00                   | i32.const 85\n 00006b: 41 00                      | i32.const 0\n 00006d: fc 0b 00                   | memory.fill 0\n 000070: 0b                         | end\n"
    },
    "memory_fill.5.wasm": {
      "header": "\nmemory_fill.5.wasm:\tfile format wasm 0x1\n\nSections:\n\n     Type start=0x0000000a end=0x00000015 (size=0x0000000b) count: 2\n Function start=0x00000017 end=0x0000001a (size=0x00000003) count: 2\n   Memory start=0x0000001c end=0x00000020 (size=0x00000004) count: 1\n   Export start=0x00000022 end=0x00000037 (size=0x00000015) count: 2\n     Code start=0x00000039 end=0x00000071 (size=0x00000038) count: 2\n",
      "details": "\nmemory_fill.5.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nType[2]:\n - type[0] (i32, i32, i32) -> i32\n - type[1] () -> nil\nFunction[2]:\n - func[0] sig=0 <checkRange>\n - func[1] sig=1 <test>\nMemory[1]:\n - memory[0] pages: initial=1 max=1\nExport[2]:\n - func[0] <checkRange> -> \"checkRange\"\n - func[1] <test> -> \"test\"\nCode[2]:\n - func[0] size=39 <checkRange>\n - func[1] size=14 <test>\n",
      "disassemble": "\nmemory_fill.5.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n00003b func[0] <checkRange>:\n 00003c: 03 40                      | loop\n 00003e: 20 00                      |   local.get 0\n 000040: 20 01                      |   local.get 1\n 000042: 46                         |   i32.eq\n 000043: 04 40                      |   if\n 000045: 41 7f                      |     i32.const 4294967295\n 000047: 0f                         |     return\n 000048: 0b                         |   end\n 000049: 20 00                      |   local.get 0\n 00004b: 2d 00 00                   |   i32.load8_u 0 0\n 00004e: 20 02                      |   local.get 2\n 000050: 46                         |   i32.eq\n 000051: 04 40                      |   if\n 000053: 20 00                      |     local.get 0\n 000055: 41 01                      |     i32.const 1\n 000057: 6a                         |     i32.add\n 000058: 21 00                      |     local.set 0\n 00005a: 0c 01                      |     br 1\n 00005c: 0b                         |   end\n 00005d: 0b                         | end\n 00005e: 20 00                      | local.get 0\n 000060: 0f                         | return\n 000061: 0b                         | end\n000063 func[1] <test>:\n 000064: 41 80 80 08                | i32.const 131072\n 000068: 41 d5 00                   | i32.const 85\n 00006b: 41 00                      | i32.const 0\n 00006d: fc 0b 00                   | memory.fill 0\n 000070: 0b                         | end\n"
    },
    "memory_fill.6.wasm": {
      "header": "\nmemory_fill.6.wasm:\tfile format wasm 0x1\n\nSections:\n\n     Type start=0x0000000a end=0x00000015 (size=0x0000000b) count: 2\n Function start=0x00000017 end=0x0000001a (size=0x00000003) count: 2\n   Memory start=0x0000001c end=0x00000020 (size=0x00000004) count: 1\n   Export start=0x00000022 end=0x00000037 (size=0x00000015) count: 2\n     Code start=0x00000039 end=0x00000071 (size=0x00000038) count: 2\n",
      "details": "\nmemory_fill.6.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nType[2]:\n - type[0] (i32, i32, i32) -> i32\n - type[1] () -> nil\nFunction[2]:\n - func[0] sig=0 <checkRange>\n - func[1] sig=1 <test>\nMemory[1]:\n - memory[0] pages: initial=1 max=1\nExport[2]:\n - func[0] <checkRange> -> \"checkRange\"\n - func[1] <test> -> \"test\"\nCode[2]:\n - func[0] size=39 <checkRange>\n - func[1] size=14 <test>\n",
      "disassemble": "\nmemory_fill.6.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n00003b func[0] <checkRange>:\n 00003c: 03 40                      | loop\n 00003e: 20 00                      |   local.get 0\n 000040: 20 01                      |   local.get 1\n 000042: 46                         |   i32.eq\n 000043: 04 40                      |   if\n 000045: 41 7f                      |     i32.const 4294967295\n 000047: 0f                         |     return\n 000048: 0b                         |   end\n 000049: 20 00                      |   local.get 0\n 00004b: 2d 00 00                   |   i32.load8_u 0 0\n 00004e: 20 02                      |   local.get 2\n 000050: 46                         |   i32.eq\n 000051: 04 40                      |   if\n 000053: 20 00                      |     local.get 0\n 000055: 41 01                      |     i32.const 1\n 000057: 6a                         |     i32.add\n 000058: 21 00                      |     local.set 0\n 00005a: 0c 01                      |     br 1\n 00005c: 0b                         |   end\n 00005d: 0b                         | end\n 00005e: 20 00                      | local.get 0\n 000060: 0f                         | return\n 000061: 0b                         | end\n000063 func[1] <test>:\n 000064: 41 01                      | i32.const 1\n 000066: 41 aa 01                   | i32.const 170\n 000069: 41 fe ff 03                | i32.const 65534\n 00006d: fc 0b 00                   | memory.fill 0\n 000070: 0b                         | end\n"
    },
    "memory_fill.7.wasm": {
      "header": "\nmemory_fill.7.wasm:\tfile format wasm 0x1\n\nSections:\n\n     Type start=0x0000000a end=0x00000015 (size=0x0000000b) count: 2\n Function start=0x00000017 end=0x0000001a (size=0x00000003) count: 2\n   Memory start=0x0000001c end=0x00000020 (size=0x00000004) count: 1\n   Export start=0x00000022 end=0x00000037 (size=0x00000015) count: 2\n     Code start=0x00000039 end=0x00000079 (size=0x00000040) count: 2\n",
      "details": "\nmemory_fill.7.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nType[2]:\n - type[0] (i32, i32, i32) -> i32\n - type[1] () -> nil\nFunction[2]:\n - func[0] sig=0 <checkRange>\n - func[1] sig=1 <test>\nMemory[1]:\n - memory[0] pages: initial=1 max=1\nExport[2]:\n - func[0] <checkRange> -> \"checkRange\"\n - func[1] <test> -> \"test\"\nCode[2]:\n - func[0] size=39 <checkRange>\n - func[1] size=22 <test>\n",
      "disassemble": "\nmemory_fill.7.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n00003b func[0] <checkRange>:\n 00003c: 03 40                      | loop\n 00003e: 20 00                      |   local.get 0\n 000040: 20 01                      |   local.get 1\n 000042: 46                         |   i32.eq\n 000043: 04 40                      |   if\n 000045: 41 7f                      |     i32.const 4294967295\n 000047: 0f                         |     return\n 000048: 0b                         |   end\n 000049: 20 00                      |   local.get 0\n 00004b: 2d 00 00                   |   i32.load8_u 0 0\n 00004e: 20 02                      |   local.get 2\n 000050: 46                         |   i32.eq\n 000051: 04 40                      |   if\n 000053: 20 00                      |     local.get 0\n 000055: 41 01                      |     i32.const 1\n 000057: 6a                         |     i32.add\n 000058: 21 00                      |     local.set 0\n 00005a: 0c 01                      |     br 1\n 00005c: 0b                         |   end\n 00005d: 0b                         | end\n 00005e: 20 00                      | local.get 0\n 000060: 0f                         | return\n 000061: 0b                         | end\n000063 func[1] <test>:\n 000064: 41 12                      | i32.const 18\n 000066: 41 d5 00                   | i32.const 85\n 000069: 41 0a                      | i32.const 10\n 00006b: fc 0b 00                   | memory.fill 0\n 00006e: 41 15                      | i32.const 21\n 000070: 41 aa 01                   | i32.const 170\n 000073: 41 04                      | i32.const 4\n 000075: fc 0b 00                   | memory.fill 0\n 000078: 0b                         | end\n"
    },
    "memory_fill.72.wasm": {
      "header": "\nmemory_fill.72.wasm:\tfile format wasm 0x1\n\nSections:\n\n     Type start=0x0000000a end=0x00000018 (size=0x0000000e) count: 2\n Function start=0x0000001a end=0x0000001d (size=0x00000003) count: 2\n   Memory start=0x0000001f end=0x00000023 (size=0x00000004) count: 1\n   Export start=0x00000025 end=0x00000039 (size=0x00000014) count: 2\n     Code start=0x0000003b end=0x00000070 (size=0x00000035) count: 2\n",
      "details": "\nmemory_fill.72.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nType[2]:\n - type[0] (i32, i32, i32) -> i32\n - type[1] (i32, i32, i32) -> nil\nFunction[2]:\n - func[0] sig=0 <checkRange>\n - func[1] sig=1 <run>\nMemory[1]:\n - memory[0] pages: initial=1 max=1\nExport[2]:\n - func[0] <checkRange> -> \"checkRange\"\n - func[1] <run> -> \"run\"\nCode[2]:\n - func[0] size=39 <checkRange>\n - func[1] size=11 <run>\n",
      "disassemble": "\nmemory_fill.72.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n00003d func[0] <checkRange>:\n 00003e: 03 40                      | loop\n 000040: 20 00                      |   local.get 0\n 000042: 20 01                      |   local.get 1\n 000044: 46                         |   i32.eq\n 000045: 04 40                      |   if\n 000047: 41 7f                      |     i32.const 4294967295\n 000049: 0f                         |     return\n 00004a: 0b                         |   end\n 00004b: 20 00                      |   local.get 0\n 00004d: 2d 00 00                   |   i32.load8_u 0 0\n 000050: 20 02                      |   local.get 2\n 000052: 46                         |   i32.eq\n 000053: 04 40                      |   if\n 000055: 20 00                      |     local.get 0\n 000057: 41 01                      |     i32.const 1\n 000059: 6a                         |     i32.add\n 00005a: 21 00                      |     local.set 0\n 00005c: 0c 01                      |     br 1\n 00005e: 0b                         |   end\n 00005f: 0b                         | end\n 000060: 20 00                      | local.get 0\n 000062: 0f                         | return\n 000063: 0b                         | end\n000065 func[1] <run>:\n 000066: 20 00                      | local.get 0\n 000068: 20 01                      | local.get 1\n 00006a: 20 02                      | local.get 2\n 00006c: fc 0b 00                   | memory.fill 0\n 00006f: 0b                         | end\n"
    },
    "memory_fill.73.wasm": {
      "header": "\nmemory_fill.73.wasm:\tfile format wasm 0x1\n\nSections:\n\n     Type start=0x0000000a end=0x00000018 (size=0x0000000e) count: 2\n Function start=0x0000001a end=0x0000001d (size=0x00000003) count: 2\n   Memory start=0x0000001f end=0x00000023 (size=0x00000004) count: 1\n   Export start=0x00000025 end=0x00000039 (size=0x00000014) count: 2\n     Code start=0x0000003b end=0x00000070 (size=0x00000035) count: 2\n",
      "details": "\nmemory_fill.73.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nType[2]:\n - type[0] (i32, i32, i32) -> i32\n - type[1] (i32, i32, i32) -> nil\nFunction[2]:\n - func[0] sig=0 <checkRange>\n - func[1] sig=1 <run>\nMemory[1]:\n - memory[0] pages: initial=1 max=1\nExport[2]:\n - func[0] <checkRange> -> \"checkRange\"\n - func[1] <run> -> \"run\"\nCode[2]:\n - func[0] size=39 <checkRange>\n - func[1] size=11 <run>\n",
      "disassemble": "\nmemory_fill.73.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n00003d func[0] <checkRange>:\n 00003e: 03 40                      | loop\n 000040: 20 00                      |   local.get 0\n 000042: 20 01                      |   local.get 1\n 000044: 46                         |   i32.eq\n 000045: 04 40                      |   if\n 000047: 41 7f                      |     i32.const 4294967295\n 000049: 0f                         |     return\n 00004a: 0b                         |   end\n 00004b: 20 00                      |   local.get 0\n 00004d: 2d 00 00                   |   i32.load8_u 0 0\n 000050: 20 02                      |   local.get 2\n 000052: 46                         |   i32.eq\n 000053: 04 40                      |   if\n 000055: 20 00                      |     local.get 0\n 000057: 41 01                      |     i32.const 1\n 000059: 6a                         |     i32.add\n 00005a: 21 00                      |     local.set 0\n 00005c: 0c 01                      |     br 1\n 00005e: 0b                         |   end\n 00005f: 0b                         | end\n 000060: 20 00                      | local.get 0\n 000062: 0f                         | return\n 000063: 0b                         | end\n000065 func[1] <run>:\n 000066: 20 00                      | local.get 0\n 000068: 20 01                      | local.get 1\n 00006a: 20 02                      | local.get 2\n 00006c: fc 0b 00                   | memory.fill 0\n 00006f: 0b                         | end\n"
    },
    "memory_fill.74.wasm": {
      "header": "\nmemory_fill.74.wasm:\tfile format wasm 0x1\n\nSections:\n\n     Type start=0x0000000a end=0x00000018 (size=0x0000000e) count: 2\n Function start=0x0000001a end=0x0000001d (size=0x00000003) count: 2\n   Memory start=0x0000001f end=0x00000023 (size=0x00000004) count: 1\n   Export start=0x00000025 end=0x00000039 (size=0x00000014) count: 2\n     Code start=0x0000003b end=0x00000070 (size=0x00000035) count: 2\n",
      "details": "\nmemory_fill.74.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nType[2]:\n - type[0] (i32, i32, i32) -> i32\n - type[1] (i32, i32, i32) -> nil\nFunction[2]:\n - func[0] sig=0 <checkRange>\n - func[1] sig=1 <run>\nMemory[1]:\n - memory[0] pages: initial=1 max=1\nExport[2]:\n - func[0] <checkRange> -> \"checkRange\"\n - func[1] <run> -> \"run\"\nCode[2]:\n - func[0] size=39 <checkRange>\n - func[1] size=11 <run>\n",
      "disassemble": "\nmemory_fill.74.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n00003d func[0] <checkRange>:\n 00003e: 03 40                      | loop\n 000040: 20 00                      |   local.get 0\n 000042: 20 01                      |   local.get 1\n 000044: 46                         |   i32.eq\n 000045: 04 40                      |   if\n 000047: 41 7f                      |     i32.const 4294967295\n 000049: 0f                         |     return\n 00004a: 0b                         |   end\n 00004b: 20 00                      |   local.get 0\n 00004d: 2d 00 00                   |   i32.load8_u 0 0\n 000050: 20 02                      |   local.get 2\n 000052: 46                         |   i32.eq\n 000053: 04 40                      |   if\n 000055: 20 00                      |     local.get 0\n 000057: 41 01                      |     i32.const 1\n 000059: 6a                         |     i32.add\n 00005a: 21 00                      |     local.set 0\n 00005c: 0c 01                      |     br 1\n 00005e: 0b                         |   end\n 00005f: 0b                         | end\n 000060: 20 00                      | local.get 0\n 000062: 0f                         | return\n 000063: 0b                         | end\n000065 func[1] <run>:\n 000066: 20 00                      | local.get 0\n 000068: 20 01                      | local.get 1\n 00006a: 20 02                      | local.get 2\n 00006c: fc 0b 00                   | memory.fill 0\n 00006f: 0b                         | end\n"
    }
  }
}
