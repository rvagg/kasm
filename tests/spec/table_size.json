{
  "bin": {
    "table_size.0.wasm": "AGFzbQEAAAABCQJgAAF/YAF/AAMJCAAAAAABAQEBBA8EbwAAbwABbwEAAm8BAwgHUQgHc2l6ZS10MAAAB3NpemUtdDEAAQdzaXplLXQyAAIHc2l6ZS10MwADB2dyb3ctdDAABAdncm93LXQxAAUHZ3Jvdy10MgAGB2dyb3ctdDMABwpFCAUA/BAACwUA/BABCwUA/BACCwUA/BADCwoA0G8gAPwPABoLCgDQbyAA/A8BGgsKANBvIAD8DwIaCwoA0G8gAPwPAxoL",
    "table_size.1.wasm": "AGFzbQEAAAABBAFgAAADAgEABAQBbwABCgcBBQD8EAAL",
    "table_size.2.wasm": "AGFzbQEAAAABBQFgAAF9AwIBAAQEAW8AAQoHAQUA/BAACw=="
  },
  "spec": {"source_filename": "/workspace/wasm-spec/test/core/table_size.wast",
 "commands": [
  {"type": "module", "line": 1, "filename": "table_size.0.wasm"}, 
  {"type": "assert_return", "line": 26, "action": {"type": "invoke", "field": "size-t0", "args": []}, "expected": [{"type": "i32", "value": "0"}]}, 
  {"type": "assert_return", "line": 27, "action": {"type": "invoke", "field": "grow-t0", "args": [{"type": "i32", "value": "1"}]}, "expected": []}, 
  {"type": "assert_return", "line": 28, "action": {"type": "invoke", "field": "size-t0", "args": []}, "expected": [{"type": "i32", "value": "1"}]}, 
  {"type": "assert_return", "line": 29, "action": {"type": "invoke", "field": "grow-t0", "args": [{"type": "i32", "value": "4"}]}, "expected": []}, 
  {"type": "assert_return", "line": 30, "action": {"type": "invoke", "field": "size-t0", "args": []}, "expected": [{"type": "i32", "value": "5"}]}, 
  {"type": "assert_return", "line": 31, "action": {"type": "invoke", "field": "grow-t0", "args": [{"type": "i32", "value": "0"}]}, "expected": []}, 
  {"type": "assert_return", "line": 32, "action": {"type": "invoke", "field": "size-t0", "args": []}, "expected": [{"type": "i32", "value": "5"}]}, 
  {"type": "assert_return", "line": 34, "action": {"type": "invoke", "field": "size-t1", "args": []}, "expected": [{"type": "i32", "value": "1"}]}, 
  {"type": "assert_return", "line": 35, "action": {"type": "invoke", "field": "grow-t1", "args": [{"type": "i32", "value": "1"}]}, "expected": []}, 
  {"type": "assert_return", "line": 36, "action": {"type": "invoke", "field": "size-t1", "args": []}, "expected": [{"type": "i32", "value": "2"}]}, 
  {"type": "assert_return", "line": 37, "action": {"type": "invoke", "field": "grow-t1", "args": [{"type": "i32", "value": "4"}]}, "expected": []}, 
  {"type": "assert_return", "line": 38, "action": {"type": "invoke", "field": "size-t1", "args": []}, "expected": [{"type": "i32", "value": "6"}]}, 
  {"type": "assert_return", "line": 39, "action": {"type": "invoke", "field": "grow-t1", "args": [{"type": "i32", "value": "0"}]}, "expected": []}, 
  {"type": "assert_return", "line": 40, "action": {"type": "invoke", "field": "size-t1", "args": []}, "expected": [{"type": "i32", "value": "6"}]}, 
  {"type": "assert_return", "line": 42, "action": {"type": "invoke", "field": "size-t2", "args": []}, "expected": [{"type": "i32", "value": "0"}]}, 
  {"type": "assert_return", "line": 43, "action": {"type": "invoke", "field": "grow-t2", "args": [{"type": "i32", "value": "3"}]}, "expected": []}, 
  {"type": "assert_return", "line": 44, "action": {"type": "invoke", "field": "size-t2", "args": []}, "expected": [{"type": "i32", "value": "0"}]}, 
  {"type": "assert_return", "line": 45, "action": {"type": "invoke", "field": "grow-t2", "args": [{"type": "i32", "value": "1"}]}, "expected": []}, 
  {"type": "assert_return", "line": 46, "action": {"type": "invoke", "field": "size-t2", "args": []}, "expected": [{"type": "i32", "value": "1"}]}, 
  {"type": "assert_return", "line": 47, "action": {"type": "invoke", "field": "grow-t2", "args": [{"type": "i32", "value": "0"}]}, "expected": []}, 
  {"type": "assert_return", "line": 48, "action": {"type": "invoke", "field": "size-t2", "args": []}, "expected": [{"type": "i32", "value": "1"}]}, 
  {"type": "assert_return", "line": 49, "action": {"type": "invoke", "field": "grow-t2", "args": [{"type": "i32", "value": "4"}]}, "expected": []}, 
  {"type": "assert_return", "line": 50, "action": {"type": "invoke", "field": "size-t2", "args": []}, "expected": [{"type": "i32", "value": "1"}]}, 
  {"type": "assert_return", "line": 51, "action": {"type": "invoke", "field": "grow-t2", "args": [{"type": "i32", "value": "1"}]}, "expected": []}, 
  {"type": "assert_return", "line": 52, "action": {"type": "invoke", "field": "size-t2", "args": []}, "expected": [{"type": "i32", "value": "2"}]}, 
  {"type": "assert_return", "line": 54, "action": {"type": "invoke", "field": "size-t3", "args": []}, "expected": [{"type": "i32", "value": "3"}]}, 
  {"type": "assert_return", "line": 55, "action": {"type": "invoke", "field": "grow-t3", "args": [{"type": "i32", "value": "1"}]}, "expected": []}, 
  {"type": "assert_return", "line": 56, "action": {"type": "invoke", "field": "size-t3", "args": []}, "expected": [{"type": "i32", "value": "4"}]}, 
  {"type": "assert_return", "line": 57, "action": {"type": "invoke", "field": "grow-t3", "args": [{"type": "i32", "value": "3"}]}, "expected": []}, 
  {"type": "assert_return", "line": 58, "action": {"type": "invoke", "field": "size-t3", "args": []}, "expected": [{"type": "i32", "value": "7"}]}, 
  {"type": "assert_return", "line": 59, "action": {"type": "invoke", "field": "grow-t3", "args": [{"type": "i32", "value": "0"}]}, "expected": []}, 
  {"type": "assert_return", "line": 60, "action": {"type": "invoke", "field": "size-t3", "args": []}, "expected": [{"type": "i32", "value": "7"}]}, 
  {"type": "assert_return", "line": 61, "action": {"type": "invoke", "field": "grow-t3", "args": [{"type": "i32", "value": "2"}]}, "expected": []}, 
  {"type": "assert_return", "line": 62, "action": {"type": "invoke", "field": "size-t3", "args": []}, "expected": [{"type": "i32", "value": "7"}]}, 
  {"type": "assert_return", "line": 63, "action": {"type": "invoke", "field": "grow-t3", "args": [{"type": "i32", "value": "1"}]}, "expected": []}, 
  {"type": "assert_return", "line": 64, "action": {"type": "invoke", "field": "size-t3", "args": []}, "expected": [{"type": "i32", "value": "8"}]}, 
  {"type": "assert_invalid", "line": 70, "filename": "table_size.1.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 79, "filename": "table_size.2.wasm", "text": "type mismatch", "module_type": "binary"}]},
  "code": [
    "(module (table $t0 0 externref) (table $t1 1 externref) (table $t2 0 2 externref) (table $t3 3 8 externref)\n  (func (export \"size-t0\") (result i32) table.size)\n  (func (export \"size-t1\") (result i32) (table.size $t1))\n  (func (export \"size-t2\") (result i32) (table.size $t2))\n  (func (export \"size-t3\") (result i32) (table.size $t3))\n  (func (export \"grow-t0\") (param $sz i32) (drop (table.grow $t0 (ref.null extern) (local.get $sz))) )\n  (func (export \"grow-t1\") (param $sz i32) (drop (table.grow $t1 (ref.null extern) (local.get $sz))) )\n  (func (export \"grow-t2\") (param $sz i32) (drop (table.grow $t2 (ref.null extern) (local.get $sz))) )\n  (func (export \"grow-t3\") (param $sz i32) (drop (table.grow $t3 (ref.null extern) (local.get $sz))) ))",
    "(assert_return (invoke \"size-t0\") (i32.const 0))",
    "(assert_return (invoke \"grow-t0\" (i32.const 1)))",
    "(assert_return (invoke \"size-t0\") (i32.const 1))",
    "(assert_return (invoke \"grow-t0\" (i32.const 4)))",
    "(assert_return (invoke \"size-t0\") (i32.const 5))",
    "(assert_return (invoke \"grow-t0\" (i32.const 0)))",
    "(assert_return (invoke \"size-t0\") (i32.const 5))",
    "(assert_return (invoke \"size-t1\") (i32.const 1))",
    "(assert_return (invoke \"grow-t1\" (i32.const 1)))",
    "(assert_return (invoke \"size-t1\") (i32.const 2))",
    "(assert_return (invoke \"grow-t1\" (i32.const 4)))",
    "(assert_return (invoke \"size-t1\") (i32.const 6))",
    "(assert_return (invoke \"grow-t1\" (i32.const 0)))",
    "(assert_return (invoke \"size-t1\") (i32.const 6))",
    "(assert_return (invoke \"size-t2\") (i32.const 0))",
    "(assert_return (invoke \"grow-t2\" (i32.const 3)))",
    "(assert_return (invoke \"size-t2\") (i32.const 0))",
    "(assert_return (invoke \"grow-t2\" (i32.const 1)))",
    "(assert_return (invoke \"size-t2\") (i32.const 1))",
    "(assert_return (invoke \"grow-t2\" (i32.const 0)))",
    "(assert_return (invoke \"size-t2\") (i32.const 1))",
    "(assert_return (invoke \"grow-t2\" (i32.const 4)))",
    "(assert_return (invoke \"size-t2\") (i32.const 1))",
    "(assert_return (invoke \"grow-t2\" (i32.const 1)))",
    "(assert_return (invoke \"size-t2\") (i32.const 2))",
    "(assert_return (invoke \"size-t3\") (i32.const 3))",
    "(assert_return (invoke \"grow-t3\" (i32.const 1)))",
    "(assert_return (invoke \"size-t3\") (i32.const 4))",
    "(assert_return (invoke \"grow-t3\" (i32.const 3)))",
    "(assert_return (invoke \"size-t3\") (i32.const 7))",
    "(assert_return (invoke \"grow-t3\" (i32.const 0)))",
    "(assert_return (invoke \"size-t3\") (i32.const 7))",
    "(assert_return (invoke \"grow-t3\" (i32.const 2)))",
    "(assert_return (invoke \"size-t3\") (i32.const 7))",
    "(assert_return (invoke \"grow-t3\" (i32.const 1)))",
    "(assert_return (invoke \"size-t3\") (i32.const 8))",
    "(assert_invalid (module (table $t 1 externref) (func $type-result-i32-vs-empty (table.size $t) ) ) \"type mismatch\")",
    "(assert_invalid (module (table $t 1 externref) (func $type-result-i32-vs-f32 (result f32) (table.size $t) ) ) \"type mismatch\")"
  ],
  "dump": {
    "table_size.0.wasm": {
      "header": "\ntable_size.0.wasm:\tfile format wasm 0x1\n\nSections:\n\n     Type start=0x0000000a end=0x00000013 (size=0x00000009) count: 2\n Function start=0x00000015 end=0x0000001e (size=0x00000009) count: 8\n    Table start=0x00000020 end=0x0000002f (size=0x0000000f) count: 4\n   Export start=0x00000031 end=0x00000082 (size=0x00000051) count: 8\n     Code start=0x00000084 end=0x000000c9 (size=0x00000045) count: 8\n",
      "details": "\ntable_size.0.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nType[2]:\n - type[0] () -> i32\n - type[1] (i32) -> nil\nFunction[8]:\n - func[0] sig=0 <size-t0>\n - func[1] sig=0 <size-t1>\n - func[2] sig=0 <size-t2>\n - func[3] sig=0 <size-t3>\n - func[4] sig=1 <grow-t0>\n - func[5] sig=1 <grow-t1>\n - func[6] sig=1 <grow-t2>\n - func[7] sig=1 <grow-t3>\nTable[4]:\n - table[0] type=externref initial=0\n - table[1] type=externref initial=1\n - table[2] type=externref initial=0 max=2\n - table[3] type=externref initial=3 max=8\nExport[8]:\n - func[0] <size-t0> -> \"size-t0\"\n - func[1] <size-t1> -> \"size-t1\"\n - func[2] <size-t2> -> \"size-t2\"\n - func[3] <size-t3> -> \"size-t3\"\n - func[4] <grow-t0> -> \"grow-t0\"\n - func[5] <grow-t1> -> \"grow-t1\"\n - func[6] <grow-t2> -> \"grow-t2\"\n - func[7] <grow-t3> -> \"grow-t3\"\nCode[8]:\n - func[0] size=5 <size-t0>\n - func[1] size=5 <size-t1>\n - func[2] size=5 <size-t2>\n - func[3] size=5 <size-t3>\n - func[4] size=10 <grow-t0>\n - func[5] size=10 <grow-t1>\n - func[6] size=10 <grow-t2>\n - func[7] size=10 <grow-t3>\n",
      "disassemble": "\ntable_size.0.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n000086 func[0] <size-t0>:\n 000087: fc 10 00                   | table.size 0\n 00008a: 0b                         | end\n00008c func[1] <size-t1>:\n 00008d: fc 10 01                   | table.size 1\n 000090: 0b                         | end\n000092 func[2] <size-t2>:\n 000093: fc 10 02                   | table.size 2\n 000096: 0b                         | end\n000098 func[3] <size-t3>:\n 000099: fc 10 03                   | table.size 3\n 00009c: 0b                         | end\n00009e func[4] <grow-t0>:\n 00009f: d0 6f                      | ref.null extern\n 0000a1: 20 00                      | local.get 0\n 0000a3: fc 0f 00                   | table.grow 0\n 0000a6: 1a                         | drop\n 0000a7: 0b                         | end\n0000a9 func[5] <grow-t1>:\n 0000aa: d0 6f                      | ref.null extern\n 0000ac: 20 00                      | local.get 0\n 0000ae: fc 0f 01                   | table.grow 1\n 0000b1: 1a                         | drop\n 0000b2: 0b                         | end\n0000b4 func[6] <grow-t2>:\n 0000b5: d0 6f                      | ref.null extern\n 0000b7: 20 00                      | local.get 0\n 0000b9: fc 0f 02                   | table.grow 2\n 0000bc: 1a                         | drop\n 0000bd: 0b                         | end\n0000bf func[7] <grow-t3>:\n 0000c0: d0 6f                      | ref.null extern\n 0000c2: 20 00                      | local.get 0\n 0000c4: fc 0f 03                   | table.grow 3\n 0000c7: 1a                         | drop\n 0000c8: 0b                         | end\n"
    }
  }
}
