{
  "bin": {
    "left-to-right.0.wasm": "AGFzbQEAAAABQA1gAn9/AX9gAn5+AX9gAn19AX9gAnx8AX9gAABgAAF/YAABfmAAAX1gAAF8YAJ/fwBgAn5+AGACfX0AYAJ8fAADhAGCAQAAAQECAgMDBAQFBQUFBQUGBgYFBQcHBwUFCAgIBQUJCgsMBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUEBQFwAQgIBQMBAAEHqghfB2kzMl9hZGQAIwdpMzJfc3ViACQHaTMyX211bAAlCWkzMl9kaXZfcwAmCWkzMl9kaXZfdQAnCWkzMl9yZW1fcwAoCWkzMl9yZW1fdQApB2kzMl9hbmQAKgZpMzJfb3IAKwdpMzJfeG9yACwHaTMyX3NobAAtCWkzMl9zaHJfdQAuCWkzMl9zaHJfcwAvBmkzMl9lcQAwBmkzMl9uZQAxCGkzMl9sdF9zADIIaTMyX2xlX3MAMwhpMzJfbHRfdQA0CGkzMl9sZV91ADUIaTMyX2d0X3MANghpMzJfZ2VfcwA3CGkzMl9ndF91ADgIaTMyX2dlX3UAOQlpMzJfc3RvcmUAOgppMzJfc3RvcmU4ADsLaTMyX3N0b3JlMTYAPAhpMzJfY2FsbAA9EWkzMl9jYWxsX2luZGlyZWN0AD4KaTMyX3NlbGVjdAA/B2k2NF9hZGQAQAdpNjRfc3ViAEEHaTY0X211bABCCWk2NF9kaXZfcwBDCWk2NF9kaXZfdQBECWk2NF9yZW1fcwBFCWk2NF9yZW1fdQBGB2k2NF9hbmQARwZpNjRfb3IASAdpNjRfeG9yAEkHaTY0X3NobABKCWk2NF9zaHJfdQBLCWk2NF9zaHJfcwBMBmk2NF9lcQBNBmk2NF9uZQBOCGk2NF9sdF9zAE8IaTY0X2xlX3MAUAhpNjRfbHRfdQBRCGk2NF9sZV91AFIIaTY0X2d0X3MAUwhpNjRfZ2VfcwBUCGk2NF9ndF91AFUIaTY0X2dlX3UAVglpNjRfc3RvcmUAVwppNjRfc3RvcmU4AFgLaTY0X3N0b3JlMTYAWQtpNjRfc3RvcmUzMgBaCGk2NF9jYWxsAFsRaTY0X2NhbGxfaW5kaXJlY3QAXAppNjRfc2VsZWN0AF0HZjMyX2FkZABeB2YzMl9zdWIAXwdmMzJfbXVsAGAHZjMyX2RpdgBhDGYzMl9jb3B5c2lnbgBiBmYzMl9lcQBjBmYzMl9uZQBkBmYzMl9sdABlBmYzMl9sZQBmBmYzMl9ndABnBmYzMl9nZQBoB2YzMl9taW4AaQdmMzJfbWF4AGoJZjMyX3N0b3JlAGsIZjMyX2NhbGwAbBFmMzJfY2FsbF9pbmRpcmVjdABtCmYzMl9zZWxlY3QAbgdmNjRfYWRkAG8HZjY0X3N1YgBwB2Y2NF9tdWwAcQdmNjRfZGl2AHIMZjY0X2NvcHlzaWduAHMGZjY0X2VxAHQGZjY0X25lAHUGZjY0X2x0AHYGZjY0X2xlAHcGZjY0X2d0AHgGZjY0X2dlAHkHZjY0X21pbgB6B2Y2NF9tYXgAewlmNjRfc3RvcmUAfAhmNjRfY2FsbAB9EWY2NF9jYWxsX2luZGlyZWN0AH4KZjY0X3NlbGVjdAB/BWJyX2lmAIABCGJyX3RhYmxlAIEBCQ4BAEEACwgAAQIDBAUGBwqqDYIBBABBfwsEAEF+CwQAQX8LBABBfgsEAEF/CwQAQX4LBABBfwsEAEF+CwkAQQhBADYCAAsnAEELQQotAAA6AABBCkEJLQAAOgAAQQlBCC0AADoAAEEIQX06AAALBwBBCCgCAAsNABAJQQhBAToAAEEACw0AEAlBCEECOgAAQQELDQAQCUEIQQM6AABBAQsNABAJQQhBBDoAAEEACw0AEAlBCEEFOgAAQQALDQAQCUEIQQE6AABCAAsNABAJQQhBAjoAAEIBCw0AEAlBCEEDOgAAQgELDQAQCUEIQQQ6AABBAgsNABAJQQhBBToAAEEACxAAEAlBCEEBOgAAQwAAAAALEAAQCUEIQQI6AABDAACAPwsQABAJQQhBAzoAAEMAAIA/Cw0AEAlBCEEEOgAAQQQLDQAQCUEIQQU6AABBAAsUABAJQQhBAToAAEQAAAAAAAAAAAsUABAJQQhBAjoAAEQAAAAAAADwPwsUABAJQQhBAzoAAEQAAAAAAADwPwsNABAJQQhBBDoAAEEGCw0AEAlBCEEFOgAAQQALAgALAgALAgALAgALDAAQCBALEAxqGhAKCwwAEAgQCxAMaxoQCgsMABAIEAsQDGwaEAoLDAAQCBALEAxtGhAKCwwAEAgQCxAMbhoQCgsMABAIEAsQDG8aEAoLDAAQCBALEAxwGhAKCwwAEAgQCxAMcRoQCgsMABAIEAsQDHIaEAoLDAAQCBALEAxzGhAKCwwAEAgQCxAMdBoQCgsMABAIEAsQDHYaEAoLDAAQCBALEAx1GhAKCwwAEAgQCxAMRhoQCgsMABAIEAsQDEcaEAoLDAAQCBALEAxIGhAKCwwAEAgQCxAMTBoQCgsMABAIEAsQDEkaEAoLDAAQCBALEAxNGhAKCwwAEAgQCxAMShoQCgsMABAIEAsQDE4aEAoLDAAQCBALEAxLGhAKCwwAEAgQCxAMTxoQCgsNABAIEAsQDDYCABAKCw0AEAgQCxAMOgAAEAoLDQAQCBALEAw7AQAQCgsMABAIEAsQDBAfEAoLEAAQCBALEAwQDhEAABoQCgsOABAIEAsQDBAPGxoQCgsMABAIEBAQEXwaEAoLDAAQCBAQEBF9GhAKCwwAEAgQEBARfhoQCgsMABAIEBAQEX8aEAoLDAAQCBAQEBGAGhAKCwwAEAgQEBARgRoQCgsMABAIEBAQEYIaEAoLDAAQCBAQEBGDGhAKCwwAEAgQEBARhBoQCgsMABAIEBAQEYUaEAoLDAAQCBAQEBGGGhAKCwwAEAgQEBARiBoQCgsMABAIEBAQEYcaEAoLDAAQCBAQEBFRGhAKCwwAEAgQEBARUhoQCgsMABAIEBAQEVMaEAoLDAAQCBAQEBFXGhAKCwwAEAgQEBARVBoQCgsMABAIEBAQEVgaEAoLDAAQCBAQEBFVGhAKCwwAEAgQEBARWRoQCgsMABAIEBAQEVYaEAoLDAAQCBAQEBFaGhAKCw0AEAgQCxARNwMAEAoLDQAQCBALEBE8AAAQCgsNABAIEAsQET0BABAKCw0AEAgQCxARPgIAEAoLDAAQCBAQEBEQIBAKCxAAEAgQEBAREBMRAQAaEAoLDgAQCBAQEBEQFBsaEAoLDAAQCBAVEBaSGhAKCwwAEAgQFRAWkxoQCgsMABAIEBUQFpQaEAoLDAAQCBAVEBaVGhAKCwwAEAgQFRAWmBoQCgsMABAIEBUQFlsaEAoLDAAQCBAVEBZcGhAKCwwAEAgQFRAWXRoQCgsMABAIEBUQFl8aEAoLDAAQCBAVEBZeGhAKCwwAEAgQFRAWYBoQCgsMABAIEBUQFpYaEAoLDAAQCBAVEBaXGhAKCw0AEAgQCxAWOAIAEAoLDAAQCBAVEBYQIRAKCxAAEAgQFRAWEBgRAgAaEAoLDgAQCBAVEBYQGRsaEAoLDAAQCBAaEBugGhAKCwwAEAgQGhAboRoQCgsMABAIEBoQG6IaEAoLDAAQCBAaEBujGhAKCwwAEAgQGhAbphoQCgsMABAIEBoQG2EaEAoLDAAQCBAaEBtiGhAKCwwAEAgQGhAbYxoQCgsMABAIEBoQG2UaEAoLDAAQCBAaEBtkGhAKCwwAEAgQGhAbZhoQCgsMABAIEBoQG6QaEAoLDAAQCBAaEBulGhAKCw0AEAgQCxAbOQMAEAoLDAAQCBAaEBsQIhAKCxAAEAgQGhAbEB0RAwAaEAoLDgAQCBAaEBsQHhsaEAoLEwACfxAIEAsQDEEAcQ0AGhAKCwsVAAJ/EAgCfxALEAwOAQEACxoQCgsL"
  },
  "spec": {"source_filename": "/workspace/wasm-spec/test/core/left-to-right.wast",
 "commands": [
  {"type": "module", "line": 1, "filename": "left-to-right.0.wasm"}, 
  {"type": "assert_return", "line": 181, "action": {"type": "invoke", "field": "i32_add", "args": []}, "expected": [{"type": "i32", "value": "258"}]}, 
  {"type": "assert_return", "line": 181, "action": {"type": "invoke", "field": "i64_add", "args": []}, "expected": [{"type": "i32", "value": "258"}]}, 
  {"type": "assert_return", "line": 182, "action": {"type": "invoke", "field": "i32_sub", "args": []}, "expected": [{"type": "i32", "value": "258"}]}, 
  {"type": "assert_return", "line": 182, "action": {"type": "invoke", "field": "i64_sub", "args": []}, "expected": [{"type": "i32", "value": "258"}]}, 
  {"type": "assert_return", "line": 183, "action": {"type": "invoke", "field": "i32_mul", "args": []}, "expected": [{"type": "i32", "value": "258"}]}, 
  {"type": "assert_return", "line": 183, "action": {"type": "invoke", "field": "i64_mul", "args": []}, "expected": [{"type": "i32", "value": "258"}]}, 
  {"type": "assert_return", "line": 184, "action": {"type": "invoke", "field": "i32_div_s", "args": []}, "expected": [{"type": "i32", "value": "258"}]}, 
  {"type": "assert_return", "line": 184, "action": {"type": "invoke", "field": "i64_div_s", "args": []}, "expected": [{"type": "i32", "value": "258"}]}, 
  {"type": "assert_return", "line": 185, "action": {"type": "invoke", "field": "i32_div_u", "args": []}, "expected": [{"type": "i32", "value": "258"}]}, 
  {"type": "assert_return", "line": 185, "action": {"type": "invoke", "field": "i64_div_u", "args": []}, "expected": [{"type": "i32", "value": "258"}]}, 
  {"type": "assert_return", "line": 186, "action": {"type": "invoke", "field": "i32_rem_s", "args": []}, "expected": [{"type": "i32", "value": "258"}]}, 
  {"type": "assert_return", "line": 186, "action": {"type": "invoke", "field": "i64_rem_s", "args": []}, "expected": [{"type": "i32", "value": "258"}]}, 
  {"type": "assert_return", "line": 187, "action": {"type": "invoke", "field": "i32_rem_u", "args": []}, "expected": [{"type": "i32", "value": "258"}]}, 
  {"type": "assert_return", "line": 187, "action": {"type": "invoke", "field": "i64_rem_u", "args": []}, "expected": [{"type": "i32", "value": "258"}]}, 
  {"type": "assert_return", "line": 188, "action": {"type": "invoke", "field": "i32_and", "args": []}, "expected": [{"type": "i32", "value": "258"}]}, 
  {"type": "assert_return", "line": 188, "action": {"type": "invoke", "field": "i64_and", "args": []}, "expected": [{"type": "i32", "value": "258"}]}, 
  {"type": "assert_return", "line": 189, "action": {"type": "invoke", "field": "i32_or", "args": []}, "expected": [{"type": "i32", "value": "258"}]}, 
  {"type": "assert_return", "line": 189, "action": {"type": "invoke", "field": "i64_or", "args": []}, "expected": [{"type": "i32", "value": "258"}]}, 
  {"type": "assert_return", "line": 190, "action": {"type": "invoke", "field": "i32_xor", "args": []}, "expected": [{"type": "i32", "value": "258"}]}, 
  {"type": "assert_return", "line": 190, "action": {"type": "invoke", "field": "i64_xor", "args": []}, "expected": [{"type": "i32", "value": "258"}]}, 
  {"type": "assert_return", "line": 191, "action": {"type": "invoke", "field": "i32_shl", "args": []}, "expected": [{"type": "i32", "value": "258"}]}, 
  {"type": "assert_return", "line": 191, "action": {"type": "invoke", "field": "i64_shl", "args": []}, "expected": [{"type": "i32", "value": "258"}]}, 
  {"type": "assert_return", "line": 192, "action": {"type": "invoke", "field": "i32_shr_u", "args": []}, "expected": [{"type": "i32", "value": "258"}]}, 
  {"type": "assert_return", "line": 192, "action": {"type": "invoke", "field": "i64_shr_u", "args": []}, "expected": [{"type": "i32", "value": "258"}]}, 
  {"type": "assert_return", "line": 193, "action": {"type": "invoke", "field": "i32_shr_s", "args": []}, "expected": [{"type": "i32", "value": "258"}]}, 
  {"type": "assert_return", "line": 193, "action": {"type": "invoke", "field": "i64_shr_s", "args": []}, "expected": [{"type": "i32", "value": "258"}]}, 
  {"type": "assert_return", "line": 194, "action": {"type": "invoke", "field": "i32_eq", "args": []}, "expected": [{"type": "i32", "value": "258"}]}, 
  {"type": "assert_return", "line": 194, "action": {"type": "invoke", "field": "i64_eq", "args": []}, "expected": [{"type": "i32", "value": "258"}]}, 
  {"type": "assert_return", "line": 195, "action": {"type": "invoke", "field": "i32_ne", "args": []}, "expected": [{"type": "i32", "value": "258"}]}, 
  {"type": "assert_return", "line": 195, "action": {"type": "invoke", "field": "i64_ne", "args": []}, "expected": [{"type": "i32", "value": "258"}]}, 
  {"type": "assert_return", "line": 196, "action": {"type": "invoke", "field": "i32_lt_s", "args": []}, "expected": [{"type": "i32", "value": "258"}]}, 
  {"type": "assert_return", "line": 196, "action": {"type": "invoke", "field": "i64_lt_s", "args": []}, "expected": [{"type": "i32", "value": "258"}]}, 
  {"type": "assert_return", "line": 197, "action": {"type": "invoke", "field": "i32_le_s", "args": []}, "expected": [{"type": "i32", "value": "258"}]}, 
  {"type": "assert_return", "line": 197, "action": {"type": "invoke", "field": "i64_le_s", "args": []}, "expected": [{"type": "i32", "value": "258"}]}, 
  {"type": "assert_return", "line": 198, "action": {"type": "invoke", "field": "i32_lt_u", "args": []}, "expected": [{"type": "i32", "value": "258"}]}, 
  {"type": "assert_return", "line": 198, "action": {"type": "invoke", "field": "i64_lt_u", "args": []}, "expected": [{"type": "i32", "value": "258"}]}, 
  {"type": "assert_return", "line": 199, "action": {"type": "invoke", "field": "i32_le_u", "args": []}, "expected": [{"type": "i32", "value": "258"}]}, 
  {"type": "assert_return", "line": 199, "action": {"type": "invoke", "field": "i64_le_u", "args": []}, "expected": [{"type": "i32", "value": "258"}]}, 
  {"type": "assert_return", "line": 200, "action": {"type": "invoke", "field": "i32_gt_s", "args": []}, "expected": [{"type": "i32", "value": "258"}]}, 
  {"type": "assert_return", "line": 200, "action": {"type": "invoke", "field": "i64_gt_s", "args": []}, "expected": [{"type": "i32", "value": "258"}]}, 
  {"type": "assert_return", "line": 201, "action": {"type": "invoke", "field": "i32_ge_s", "args": []}, "expected": [{"type": "i32", "value": "258"}]}, 
  {"type": "assert_return", "line": 201, "action": {"type": "invoke", "field": "i64_ge_s", "args": []}, "expected": [{"type": "i32", "value": "258"}]}, 
  {"type": "assert_return", "line": 202, "action": {"type": "invoke", "field": "i32_gt_u", "args": []}, "expected": [{"type": "i32", "value": "258"}]}, 
  {"type": "assert_return", "line": 202, "action": {"type": "invoke", "field": "i64_gt_u", "args": []}, "expected": [{"type": "i32", "value": "258"}]}, 
  {"type": "assert_return", "line": 203, "action": {"type": "invoke", "field": "i32_ge_u", "args": []}, "expected": [{"type": "i32", "value": "258"}]}, 
  {"type": "assert_return", "line": 203, "action": {"type": "invoke", "field": "i64_ge_u", "args": []}, "expected": [{"type": "i32", "value": "258"}]}, 
  {"type": "assert_return", "line": 204, "action": {"type": "invoke", "field": "i32_store", "args": []}, "expected": [{"type": "i32", "value": "258"}]}, 
  {"type": "assert_return", "line": 204, "action": {"type": "invoke", "field": "i64_store", "args": []}, "expected": [{"type": "i32", "value": "258"}]}, 
  {"type": "assert_return", "line": 205, "action": {"type": "invoke", "field": "i32_store8", "args": []}, "expected": [{"type": "i32", "value": "258"}]}, 
  {"type": "assert_return", "line": 205, "action": {"type": "invoke", "field": "i64_store8", "args": []}, "expected": [{"type": "i32", "value": "258"}]}, 
  {"type": "assert_return", "line": 206, "action": {"type": "invoke", "field": "i32_store16", "args": []}, "expected": [{"type": "i32", "value": "258"}]}, 
  {"type": "assert_return", "line": 206, "action": {"type": "invoke", "field": "i64_store16", "args": []}, "expected": [{"type": "i32", "value": "258"}]}, 
  {"type": "assert_return", "line": 207, "action": {"type": "invoke", "field": "i64_store32", "args": []}, "expected": [{"type": "i32", "value": "258"}]}, 
  {"type": "assert_return", "line": 208, "action": {"type": "invoke", "field": "i32_call", "args": []}, "expected": [{"type": "i32", "value": "258"}]}, 
  {"type": "assert_return", "line": 208, "action": {"type": "invoke", "field": "i64_call", "args": []}, "expected": [{"type": "i32", "value": "258"}]}, 
  {"type": "assert_return", "line": 209, "action": {"type": "invoke", "field": "i32_call_indirect", "args": []}, "expected": [{"type": "i32", "value": "66052"}]}, 
  {"type": "assert_return", "line": 210, "action": {"type": "invoke", "field": "i64_call_indirect", "args": []}, "expected": [{"type": "i32", "value": "66052"}]}, 
  {"type": "assert_return", "line": 211, "action": {"type": "invoke", "field": "i32_select", "args": []}, "expected": [{"type": "i32", "value": "66053"}]}, 
  {"type": "assert_return", "line": 211, "action": {"type": "invoke", "field": "i64_select", "args": []}, "expected": [{"type": "i32", "value": "66053"}]}, 
  {"type": "assert_return", "line": 213, "action": {"type": "invoke", "field": "f32_add", "args": []}, "expected": [{"type": "i32", "value": "258"}]}, 
  {"type": "assert_return", "line": 213, "action": {"type": "invoke", "field": "f64_add", "args": []}, "expected": [{"type": "i32", "value": "258"}]}, 
  {"type": "assert_return", "line": 214, "action": {"type": "invoke", "field": "f32_sub", "args": []}, "expected": [{"type": "i32", "value": "258"}]}, 
  {"type": "assert_return", "line": 214, "action": {"type": "invoke", "field": "f64_sub", "args": []}, "expected": [{"type": "i32", "value": "258"}]}, 
  {"type": "assert_return", "line": 215, "action": {"type": "invoke", "field": "f32_mul", "args": []}, "expected": [{"type": "i32", "value": "258"}]}, 
  {"type": "assert_return", "line": 215, "action": {"type": "invoke", "field": "f64_mul", "args": []}, "expected": [{"type": "i32", "value": "258"}]}, 
  {"type": "assert_return", "line": 216, "action": {"type": "invoke", "field": "f32_div", "args": []}, "expected": [{"type": "i32", "value": "258"}]}, 
  {"type": "assert_return", "line": 216, "action": {"type": "invoke", "field": "f64_div", "args": []}, "expected": [{"type": "i32", "value": "258"}]}, 
  {"type": "assert_return", "line": 217, "action": {"type": "invoke", "field": "f32_copysign", "args": []}, "expected": [{"type": "i32", "value": "258"}]}, 
  {"type": "assert_return", "line": 217, "action": {"type": "invoke", "field": "f64_copysign", "args": []}, "expected": [{"type": "i32", "value": "258"}]}, 
  {"type": "assert_return", "line": 218, "action": {"type": "invoke", "field": "f32_eq", "args": []}, "expected": [{"type": "i32", "value": "258"}]}, 
  {"type": "assert_return", "line": 218, "action": {"type": "invoke", "field": "f64_eq", "args": []}, "expected": [{"type": "i32", "value": "258"}]}, 
  {"type": "assert_return", "line": 219, "action": {"type": "invoke", "field": "f32_ne", "args": []}, "expected": [{"type": "i32", "value": "258"}]}, 
  {"type": "assert_return", "line": 219, "action": {"type": "invoke", "field": "f64_ne", "args": []}, "expected": [{"type": "i32", "value": "258"}]}, 
  {"type": "assert_return", "line": 220, "action": {"type": "invoke", "field": "f32_lt", "args": []}, "expected": [{"type": "i32", "value": "258"}]}, 
  {"type": "assert_return", "line": 220, "action": {"type": "invoke", "field": "f64_lt", "args": []}, "expected": [{"type": "i32", "value": "258"}]}, 
  {"type": "assert_return", "line": 221, "action": {"type": "invoke", "field": "f32_le", "args": []}, "expected": [{"type": "i32", "value": "258"}]}, 
  {"type": "assert_return", "line": 221, "action": {"type": "invoke", "field": "f64_le", "args": []}, "expected": [{"type": "i32", "value": "258"}]}, 
  {"type": "assert_return", "line": 222, "action": {"type": "invoke", "field": "f32_gt", "args": []}, "expected": [{"type": "i32", "value": "258"}]}, 
  {"type": "assert_return", "line": 222, "action": {"type": "invoke", "field": "f64_gt", "args": []}, "expected": [{"type": "i32", "value": "258"}]}, 
  {"type": "assert_return", "line": 223, "action": {"type": "invoke", "field": "f32_ge", "args": []}, "expected": [{"type": "i32", "value": "258"}]}, 
  {"type": "assert_return", "line": 223, "action": {"type": "invoke", "field": "f64_ge", "args": []}, "expected": [{"type": "i32", "value": "258"}]}, 
  {"type": "assert_return", "line": 224, "action": {"type": "invoke", "field": "f32_min", "args": []}, "expected": [{"type": "i32", "value": "258"}]}, 
  {"type": "assert_return", "line": 224, "action": {"type": "invoke", "field": "f64_min", "args": []}, "expected": [{"type": "i32", "value": "258"}]}, 
  {"type": "assert_return", "line": 225, "action": {"type": "invoke", "field": "f32_max", "args": []}, "expected": [{"type": "i32", "value": "258"}]}, 
  {"type": "assert_return", "line": 225, "action": {"type": "invoke", "field": "f64_max", "args": []}, "expected": [{"type": "i32", "value": "258"}]}, 
  {"type": "assert_return", "line": 226, "action": {"type": "invoke", "field": "f32_store", "args": []}, "expected": [{"type": "i32", "value": "258"}]}, 
  {"type": "assert_return", "line": 226, "action": {"type": "invoke", "field": "f64_store", "args": []}, "expected": [{"type": "i32", "value": "258"}]}, 
  {"type": "assert_return", "line": 227, "action": {"type": "invoke", "field": "f32_call", "args": []}, "expected": [{"type": "i32", "value": "258"}]}, 
  {"type": "assert_return", "line": 227, "action": {"type": "invoke", "field": "f64_call", "args": []}, "expected": [{"type": "i32", "value": "258"}]}, 
  {"type": "assert_return", "line": 228, "action": {"type": "invoke", "field": "f32_call_indirect", "args": []}, "expected": [{"type": "i32", "value": "66052"}]}, 
  {"type": "assert_return", "line": 229, "action": {"type": "invoke", "field": "f64_call_indirect", "args": []}, "expected": [{"type": "i32", "value": "66052"}]}, 
  {"type": "assert_return", "line": 230, "action": {"type": "invoke", "field": "f32_select", "args": []}, "expected": [{"type": "i32", "value": "66053"}]}, 
  {"type": "assert_return", "line": 230, "action": {"type": "invoke", "field": "f64_select", "args": []}, "expected": [{"type": "i32", "value": "66053"}]}, 
  {"type": "assert_return", "line": 232, "action": {"type": "invoke", "field": "br_if", "args": []}, "expected": [{"type": "i32", "value": "258"}]}, 
  {"type": "assert_return", "line": 233, "action": {"type": "invoke", "field": "br_table", "args": []}, "expected": [{"type": "i32", "value": "258"}]}]},
  "code": [
    "(module (memory 1) (type $i32_T (func (param i32 i32) (result i32))) (type $i64_T (func (param i64 i64) (result i32))) (type $f32_T (func (param f32 f32) (result i32))) (type $f64_T (func (param f64 f64) (result i32))) (table funcref (elem $i32_t0 $i32_t1 $i64_t0 $i64_t1 $f32_t0 $f32_t1 $f64_t0 $f64_t1) )\n  (func $i32_t0 (type $i32_T) (i32.const -1))\n  (func $i32_t1 (type $i32_T) (i32.const -2))\n  (func $i64_t0 (type $i64_T) (i32.const -1))\n  (func $i64_t1 (type $i64_T) (i32.const -2))\n  (func $f32_t0 (type $f32_T) (i32.const -1))\n  (func $f32_t1 (type $f32_T) (i32.const -2))\n  (func $f64_t0 (type $f64_T) (i32.const -1))\n  (func $f64_t1 (type $f64_T) (i32.const -2))\n  (func $reset (i32.store (i32.const 8) (i32.const 0)))\n  (func $bump (i32.store8 (i32.const 11) (i32.load8_u (i32.const 10))) (i32.store8 (i32.const 10) (i32.load8_u (i32.const 9))) (i32.store8 (i32.const 9) (i32.load8_u (i32.const 8))) (i32.store8 (i32.const 8) (i32.const -3)))\n  (func $get (result i32) (i32.load (i32.const 8)))\n  (func $i32_left (result i32) (call $bump) (i32.store8 (i32.const 8) (i32.const 1)) (i32.const 0))\n  (func $i32_right (result i32) (call $bump) (i32.store8 (i32.const 8) (i32.const 2)) (i32.const 1))\n  (func $i32_another (result i32) (call $bump) (i32.store8 (i32.const 8) (i32.const 3)) (i32.const 1))\n  (func $i32_callee (result i32) (call $bump) (i32.store8 (i32.const 8) (i32.const 4)) (i32.const 0))\n  (func $i32_bool (result i32) (call $bump) (i32.store8 (i32.const 8) (i32.const 5)) (i32.const 0))\n  (func $i64_left (result i64) (call $bump) (i32.store8 (i32.const 8) (i32.const 1)) (i64.const 0))\n  (func $i64_right (result i64) (call $bump) (i32.store8 (i32.const 8) (i32.const 2)) (i64.const 1))\n  (func $i64_another (result i64) (call $bump) (i32.store8 (i32.const 8) (i32.const 3)) (i64.const 1))\n  (func $i64_callee (result i32) (call $bump) (i32.store8 (i32.const 8) (i32.const 4)) (i32.const 2))\n  (func $i64_bool (result i32) (call $bump) (i32.store8 (i32.const 8) (i32.const 5)) (i32.const 0))\n  (func $f32_left (result f32) (call $bump) (i32.store8 (i32.const 8) (i32.const 1)) (f32.const 0))\n  (func $f32_right (result f32) (call $bump) (i32.store8 (i32.const 8) (i32.const 2)) (f32.const 1))\n  (func $f32_another (result f32) (call $bump) (i32.store8 (i32.const 8) (i32.const 3)) (f32.const 1))\n  (func $f32_callee (result i32) (call $bump) (i32.store8 (i32.const 8) (i32.const 4)) (i32.const 4))\n  (func $f32_bool (result i32) (call $bump) (i32.store8 (i32.const 8) (i32.const 5)) (i32.const 0))\n  (func $f64_left (result f64) (call $bump) (i32.store8 (i32.const 8) (i32.const 1)) (f64.const 0))\n  (func $f64_right (result f64) (call $bump) (i32.store8 (i32.const 8) (i32.const 2)) (f64.const 1))\n  (func $f64_another (result f64) (call $bump) (i32.store8 (i32.const 8) (i32.const 3)) (f64.const 1))\n  (func $f64_callee (result i32) (call $bump) (i32.store8 (i32.const 8) (i32.const 4)) (i32.const 6))\n  (func $f64_bool (result i32) (call $bump) (i32.store8 (i32.const 8) (i32.const 5)) (i32.const 0))\n  (func $i32_dummy (param i32 i32))\n  (func $i64_dummy (param i64 i64))\n  (func $f32_dummy (param f32 f32))\n  (func $f64_dummy (param f64 f64))\n  (func (export \"i32_add\") (result i32) (call $reset) (drop (i32.add (call $i32_left) (call $i32_right))) (call $get))\n  (func (export \"i32_sub\") (result i32) (call $reset) (drop (i32.sub (call $i32_left) (call $i32_right))) (call $get))\n  (func (export \"i32_mul\") (result i32) (call $reset) (drop (i32.mul (call $i32_left) (call $i32_right))) (call $get))\n  (func (export \"i32_div_s\") (result i32) (call $reset) (drop (i32.div_s (call $i32_left) (call $i32_right))) (call $get))\n  (func (export \"i32_div_u\") (result i32) (call $reset) (drop (i32.div_u (call $i32_left) (call $i32_right))) (call $get))\n  (func (export \"i32_rem_s\") (result i32) (call $reset) (drop (i32.rem_s (call $i32_left) (call $i32_right))) (call $get))\n  (func (export \"i32_rem_u\") (result i32) (call $reset) (drop (i32.rem_u (call $i32_left) (call $i32_right))) (call $get))\n  (func (export \"i32_and\") (result i32) (call $reset) (drop (i32.and (call $i32_left) (call $i32_right))) (call $get))\n  (func (export \"i32_or\") (result i32) (call $reset) (drop (i32.or (call $i32_left) (call $i32_right))) (call $get))\n  (func (export \"i32_xor\") (result i32) (call $reset) (drop (i32.xor (call $i32_left) (call $i32_right))) (call $get))\n  (func (export \"i32_shl\") (result i32) (call $reset) (drop (i32.shl (call $i32_left) (call $i32_right))) (call $get))\n  (func (export \"i32_shr_u\") (result i32) (call $reset) (drop (i32.shr_u (call $i32_left) (call $i32_right))) (call $get))\n  (func (export \"i32_shr_s\") (result i32) (call $reset) (drop (i32.shr_s (call $i32_left) (call $i32_right))) (call $get))\n  (func (export \"i32_eq\") (result i32) (call $reset) (drop (i32.eq (call $i32_left) (call $i32_right))) (call $get))\n  (func (export \"i32_ne\") (result i32) (call $reset) (drop (i32.ne (call $i32_left) (call $i32_right))) (call $get))\n  (func (export \"i32_lt_s\") (result i32) (call $reset) (drop (i32.lt_s (call $i32_left) (call $i32_right))) (call $get))\n  (func (export \"i32_le_s\") (result i32) (call $reset) (drop (i32.le_s (call $i32_left) (call $i32_right))) (call $get))\n  (func (export \"i32_lt_u\") (result i32) (call $reset) (drop (i32.lt_u (call $i32_left) (call $i32_right))) (call $get))\n  (func (export \"i32_le_u\") (result i32) (call $reset) (drop (i32.le_u (call $i32_left) (call $i32_right))) (call $get))\n  (func (export \"i32_gt_s\") (result i32) (call $reset) (drop (i32.gt_s (call $i32_left) (call $i32_right))) (call $get))\n  (func (export \"i32_ge_s\") (result i32) (call $reset) (drop (i32.ge_s (call $i32_left) (call $i32_right))) (call $get))\n  (func (export \"i32_gt_u\") (result i32) (call $reset) (drop (i32.gt_u (call $i32_left) (call $i32_right))) (call $get))\n  (func (export \"i32_ge_u\") (result i32) (call $reset) (drop (i32.ge_u (call $i32_left) (call $i32_right))) (call $get))\n  (func (export \"i32_store\") (result i32) (call $reset) (i32.store (call $i32_left) (call $i32_right)) (call $get))\n  (func (export \"i32_store8\") (result i32) (call $reset) (i32.store8 (call $i32_left) (call $i32_right)) (call $get))\n  (func (export \"i32_store16\") (result i32) (call $reset) (i32.store16 (call $i32_left) (call $i32_right)) (call $get))\n  (func (export \"i32_call\") (result i32) (call $reset) (call $i32_dummy (call $i32_left) (call $i32_right)) (call $get))\n  (func (export \"i32_call_indirect\") (result i32) (call $reset) (drop (call_indirect (type $i32_T) (call $i32_left) (call $i32_right) (call $i32_callee))) (call $get))\n  (func (export \"i32_select\") (result i32) (call $reset) (drop (select (call $i32_left) (call $i32_right) (call $i32_bool))) (call $get))\n  (func (export \"i64_add\") (result i32) (call $reset) (drop (i64.add (call $i64_left) (call $i64_right))) (call $get))\n  (func (export \"i64_sub\") (result i32) (call $reset) (drop (i64.sub (call $i64_left) (call $i64_right))) (call $get))\n  (func (export \"i64_mul\") (result i32) (call $reset) (drop (i64.mul (call $i64_left) (call $i64_right))) (call $get))\n  (func (export \"i64_div_s\") (result i32) (call $reset) (drop (i64.div_s (call $i64_left) (call $i64_right))) (call $get))\n  (func (export \"i64_div_u\") (result i32) (call $reset) (drop (i64.div_u (call $i64_left) (call $i64_right))) (call $get))\n  (func (export \"i64_rem_s\") (result i32) (call $reset) (drop (i64.rem_s (call $i64_left) (call $i64_right))) (call $get))\n  (func (export \"i64_rem_u\") (result i32) (call $reset) (drop (i64.rem_u (call $i64_left) (call $i64_right))) (call $get))\n  (func (export \"i64_and\") (result i32) (call $reset) (drop (i64.and (call $i64_left) (call $i64_right))) (call $get))\n  (func (export \"i64_or\") (result i32) (call $reset) (drop (i64.or (call $i64_left) (call $i64_right))) (call $get))\n  (func (export \"i64_xor\") (result i32) (call $reset) (drop (i64.xor (call $i64_left) (call $i64_right))) (call $get))\n  (func (export \"i64_shl\") (result i32) (call $reset) (drop (i64.shl (call $i64_left) (call $i64_right))) (call $get))\n  (func (export \"i64_shr_u\") (result i32) (call $reset) (drop (i64.shr_u (call $i64_left) (call $i64_right))) (call $get))\n  (func (export \"i64_shr_s\") (result i32) (call $reset) (drop (i64.shr_s (call $i64_left) (call $i64_right))) (call $get))\n  (func (export \"i64_eq\") (result i32) (call $reset) (drop (i64.eq (call $i64_left) (call $i64_right))) (call $get))\n  (func (export \"i64_ne\") (result i32) (call $reset) (drop (i64.ne (call $i64_left) (call $i64_right))) (call $get))\n  (func (export \"i64_lt_s\") (result i32) (call $reset) (drop (i64.lt_s (call $i64_left) (call $i64_right))) (call $get))\n  (func (export \"i64_le_s\") (result i32) (call $reset) (drop (i64.le_s (call $i64_left) (call $i64_right))) (call $get))\n  (func (export \"i64_lt_u\") (result i32) (call $reset) (drop (i64.lt_u (call $i64_left) (call $i64_right))) (call $get))\n  (func (export \"i64_le_u\") (result i32) (call $reset) (drop (i64.le_u (call $i64_left) (call $i64_right))) (call $get))\n  (func (export \"i64_gt_s\") (result i32) (call $reset) (drop (i64.gt_s (call $i64_left) (call $i64_right))) (call $get))\n  (func (export \"i64_ge_s\") (result i32) (call $reset) (drop (i64.ge_s (call $i64_left) (call $i64_right))) (call $get))\n  (func (export \"i64_gt_u\") (result i32) (call $reset) (drop (i64.gt_u (call $i64_left) (call $i64_right))) (call $get))\n  (func (export \"i64_ge_u\") (result i32) (call $reset) (drop (i64.ge_u (call $i64_left) (call $i64_right))) (call $get))\n  (func (export \"i64_store\") (result i32) (call $reset) (i64.store (call $i32_left) (call $i64_right)) (call $get))\n  (func (export \"i64_store8\") (result i32) (call $reset) (i64.store8 (call $i32_left) (call $i64_right)) (call $get))\n  (func (export \"i64_store16\") (result i32) (call $reset) (i64.store16 (call $i32_left) (call $i64_right)) (call $get))\n  (func (export \"i64_store32\") (result i32) (call $reset) (i64.store32 (call $i32_left) (call $i64_right)) (call $get))\n  (func (export \"i64_call\") (result i32) (call $reset) (call $i64_dummy (call $i64_left) (call $i64_right)) (call $get))\n  (func (export \"i64_call_indirect\") (result i32) (call $reset) (drop (call_indirect (type $i64_T) (call $i64_left) (call $i64_right) (call $i64_callee))) (call $get))\n  (func (export \"i64_select\") (result i32) (call $reset) (drop (select (call $i64_left) (call $i64_right) (call $i64_bool))) (call $get))\n  (func (export \"f32_add\") (result i32) (call $reset) (drop (f32.add (call $f32_left) (call $f32_right))) (call $get))\n  (func (export \"f32_sub\") (result i32) (call $reset) (drop (f32.sub (call $f32_left) (call $f32_right))) (call $get))\n  (func (export \"f32_mul\") (result i32) (call $reset) (drop (f32.mul (call $f32_left) (call $f32_right))) (call $get))\n  (func (export \"f32_div\") (result i32) (call $reset) (drop (f32.div (call $f32_left) (call $f32_right))) (call $get))\n  (func (export \"f32_copysign\") (result i32) (call $reset) (drop (f32.copysign (call $f32_left) (call $f32_right))) (call $get))\n  (func (export \"f32_eq\") (result i32) (call $reset) (drop (f32.eq (call $f32_left) (call $f32_right))) (call $get))\n  (func (export \"f32_ne\") (result i32) (call $reset) (drop (f32.ne (call $f32_left) (call $f32_right))) (call $get))\n  (func (export \"f32_lt\") (result i32) (call $reset) (drop (f32.lt (call $f32_left) (call $f32_right))) (call $get))\n  (func (export \"f32_le\") (result i32) (call $reset) (drop (f32.le (call $f32_left) (call $f32_right))) (call $get))\n  (func (export \"f32_gt\") (result i32) (call $reset) (drop (f32.gt (call $f32_left) (call $f32_right))) (call $get))\n  (func (export \"f32_ge\") (result i32) (call $reset) (drop (f32.ge (call $f32_left) (call $f32_right))) (call $get))\n  (func (export \"f32_min\") (result i32) (call $reset) (drop (f32.min (call $f32_left) (call $f32_right))) (call $get))\n  (func (export \"f32_max\") (result i32) (call $reset) (drop (f32.max (call $f32_left) (call $f32_right))) (call $get))\n  (func (export \"f32_store\") (result i32) (call $reset) (f32.store (call $i32_left) (call $f32_right)) (call $get))\n  (func (export \"f32_call\") (result i32) (call $reset) (call $f32_dummy (call $f32_left) (call $f32_right)) (call $get))\n  (func (export \"f32_call_indirect\") (result i32) (call $reset) (drop (call_indirect (type $f32_T) (call $f32_left) (call $f32_right) (call $f32_callee))) (call $get))\n  (func (export \"f32_select\") (result i32) (call $reset) (drop (select (call $f32_left) (call $f32_right) (call $f32_bool))) (call $get))\n  (func (export \"f64_add\") (result i32) (call $reset) (drop (f64.add (call $f64_left) (call $f64_right))) (call $get))\n  (func (export \"f64_sub\") (result i32) (call $reset) (drop (f64.sub (call $f64_left) (call $f64_right))) (call $get))\n  (func (export \"f64_mul\") (result i32) (call $reset) (drop (f64.mul (call $f64_left) (call $f64_right))) (call $get))\n  (func (export \"f64_div\") (result i32) (call $reset) (drop (f64.div (call $f64_left) (call $f64_right))) (call $get))\n  (func (export \"f64_copysign\") (result i32) (call $reset) (drop (f64.copysign (call $f64_left) (call $f64_right))) (call $get))\n  (func (export \"f64_eq\") (result i32) (call $reset) (drop (f64.eq (call $f64_left) (call $f64_right))) (call $get))\n  (func (export \"f64_ne\") (result i32) (call $reset) (drop (f64.ne (call $f64_left) (call $f64_right))) (call $get))\n  (func (export \"f64_lt\") (result i32) (call $reset) (drop (f64.lt (call $f64_left) (call $f64_right))) (call $get))\n  (func (export \"f64_le\") (result i32) (call $reset) (drop (f64.le (call $f64_left) (call $f64_right))) (call $get))\n  (func (export \"f64_gt\") (result i32) (call $reset) (drop (f64.gt (call $f64_left) (call $f64_right))) (call $get))\n  (func (export \"f64_ge\") (result i32) (call $reset) (drop (f64.ge (call $f64_left) (call $f64_right))) (call $get))\n  (func (export \"f64_min\") (result i32) (call $reset) (drop (f64.min (call $f64_left) (call $f64_right))) (call $get))\n  (func (export \"f64_max\") (result i32) (call $reset) (drop (f64.max (call $f64_left) (call $f64_right))) (call $get))\n  (func (export \"f64_store\") (result i32) (call $reset) (f64.store (call $i32_left) (call $f64_right)) (call $get))\n  (func (export \"f64_call\") (result i32) (call $reset) (call $f64_dummy (call $f64_left) (call $f64_right)) (call $get))\n  (func (export \"f64_call_indirect\") (result i32) (call $reset) (drop (call_indirect (type $f64_T) (call $f64_left) (call $f64_right) (call $f64_callee))) (call $get))\n  (func (export \"f64_select\") (result i32) (call $reset) (drop (select (call $f64_left) (call $f64_right) (call $f64_bool))) (call $get))\n  (func (export \"br_if\") (result i32) (block (result i32) (call $reset) (drop (br_if 0 (call $i32_left) (i32.and (call $i32_right) (i32.const 0)))) (call $get) ) )\n  (func (export \"br_table\") (result i32) (block $a (result i32) (call $reset) (drop (block $b (result i32) (br_table $a $b (call $i32_left) (call $i32_right)) ) ) (call $get) ) ))",
    "(assert_return (invoke \"i32_add\") (i32.const 0x0102))",
    "(assert_return (invoke \"i64_add\") (i32.const 0x0102))",
    "(assert_return (invoke \"i32_sub\") (i32.const 0x0102))",
    "(assert_return (invoke \"i64_sub\") (i32.const 0x0102))",
    "(assert_return (invoke \"i32_mul\") (i32.const 0x0102))",
    "(assert_return (invoke \"i64_mul\") (i32.const 0x0102))",
    "(assert_return (invoke \"i32_div_s\") (i32.const 0x0102))",
    "(assert_return (invoke \"i64_div_s\") (i32.const 0x0102))",
    "(assert_return (invoke \"i32_div_u\") (i32.const 0x0102))",
    "(assert_return (invoke \"i64_div_u\") (i32.const 0x0102))",
    "(assert_return (invoke \"i32_rem_s\") (i32.const 0x0102))",
    "(assert_return (invoke \"i64_rem_s\") (i32.const 0x0102))",
    "(assert_return (invoke \"i32_rem_u\") (i32.const 0x0102))",
    "(assert_return (invoke \"i64_rem_u\") (i32.const 0x0102))",
    "(assert_return (invoke \"i32_and\") (i32.const 0x0102))",
    "(assert_return (invoke \"i64_and\") (i32.const 0x0102))",
    "(assert_return (invoke \"i32_or\") (i32.const 0x0102))",
    "(assert_return (invoke \"i64_or\") (i32.const 0x0102))",
    "(assert_return (invoke \"i32_xor\") (i32.const 0x0102))",
    "(assert_return (invoke \"i64_xor\") (i32.const 0x0102))",
    "(assert_return (invoke \"i32_shl\") (i32.const 0x0102))",
    "(assert_return (invoke \"i64_shl\") (i32.const 0x0102))",
    "(assert_return (invoke \"i32_shr_u\") (i32.const 0x0102))",
    "(assert_return (invoke \"i64_shr_u\") (i32.const 0x0102))",
    "(assert_return (invoke \"i32_shr_s\") (i32.const 0x0102))",
    "(assert_return (invoke \"i64_shr_s\") (i32.const 0x0102))",
    "(assert_return (invoke \"i32_eq\") (i32.const 0x0102))",
    "(assert_return (invoke \"i64_eq\") (i32.const 0x0102))",
    "(assert_return (invoke \"i32_ne\") (i32.const 0x0102))",
    "(assert_return (invoke \"i64_ne\") (i32.const 0x0102))",
    "(assert_return (invoke \"i32_lt_s\") (i32.const 0x0102))",
    "(assert_return (invoke \"i64_lt_s\") (i32.const 0x0102))",
    "(assert_return (invoke \"i32_le_s\") (i32.const 0x0102))",
    "(assert_return (invoke \"i64_le_s\") (i32.const 0x0102))",
    "(assert_return (invoke \"i32_lt_u\") (i32.const 0x0102))",
    "(assert_return (invoke \"i64_lt_u\") (i32.const 0x0102))",
    "(assert_return (invoke \"i32_le_u\") (i32.const 0x0102))",
    "(assert_return (invoke \"i64_le_u\") (i32.const 0x0102))",
    "(assert_return (invoke \"i32_gt_s\") (i32.const 0x0102))",
    "(assert_return (invoke \"i64_gt_s\") (i32.const 0x0102))",
    "(assert_return (invoke \"i32_ge_s\") (i32.const 0x0102))",
    "(assert_return (invoke \"i64_ge_s\") (i32.const 0x0102))",
    "(assert_return (invoke \"i32_gt_u\") (i32.const 0x0102))",
    "(assert_return (invoke \"i64_gt_u\") (i32.const 0x0102))",
    "(assert_return (invoke \"i32_ge_u\") (i32.const 0x0102))",
    "(assert_return (invoke \"i64_ge_u\") (i32.const 0x0102))",
    "(assert_return (invoke \"i32_store\") (i32.const 0x0102))",
    "(assert_return (invoke \"i64_store\") (i32.const 0x0102))",
    "(assert_return (invoke \"i32_store8\") (i32.const 0x0102))",
    "(assert_return (invoke \"i64_store8\") (i32.const 0x0102))",
    "(assert_return (invoke \"i32_store16\") (i32.const 0x0102))",
    "(assert_return (invoke \"i64_store16\") (i32.const 0x0102))",
    "(assert_return (invoke \"i64_store32\") (i32.const 0x0102))",
    "(assert_return (invoke \"i32_call\") (i32.const 0x0102))",
    "(assert_return (invoke \"i64_call\") (i32.const 0x0102))",
    "(assert_return (invoke \"i32_call_indirect\") (i32.const 0x010204))",
    "(assert_return (invoke \"i64_call_indirect\") (i32.const 0x010204))",
    "(assert_return (invoke \"i32_select\") (i32.const 0x010205))",
    "(assert_return (invoke \"i64_select\") (i32.const 0x010205))",
    "(assert_return (invoke \"f32_add\") (i32.const 0x0102))",
    "(assert_return (invoke \"f64_add\") (i32.const 0x0102))",
    "(assert_return (invoke \"f32_sub\") (i32.const 0x0102))",
    "(assert_return (invoke \"f64_sub\") (i32.const 0x0102))",
    "(assert_return (invoke \"f32_mul\") (i32.const 0x0102))",
    "(assert_return (invoke \"f64_mul\") (i32.const 0x0102))",
    "(assert_return (invoke \"f32_div\") (i32.const 0x0102))",
    "(assert_return (invoke \"f64_div\") (i32.const 0x0102))",
    "(assert_return (invoke \"f32_copysign\") (i32.const 0x0102))",
    "(assert_return (invoke \"f64_copysign\") (i32.const 0x0102))",
    "(assert_return (invoke \"f32_eq\") (i32.const 0x0102))",
    "(assert_return (invoke \"f64_eq\") (i32.const 0x0102))",
    "(assert_return (invoke \"f32_ne\") (i32.const 0x0102))",
    "(assert_return (invoke \"f64_ne\") (i32.const 0x0102))",
    "(assert_return (invoke \"f32_lt\") (i32.const 0x0102))",
    "(assert_return (invoke \"f64_lt\") (i32.const 0x0102))",
    "(assert_return (invoke \"f32_le\") (i32.const 0x0102))",
    "(assert_return (invoke \"f64_le\") (i32.const 0x0102))",
    "(assert_return (invoke \"f32_gt\") (i32.const 0x0102))",
    "(assert_return (invoke \"f64_gt\") (i32.const 0x0102))",
    "(assert_return (invoke \"f32_ge\") (i32.const 0x0102))",
    "(assert_return (invoke \"f64_ge\") (i32.const 0x0102))",
    "(assert_return (invoke \"f32_min\") (i32.const 0x0102))",
    "(assert_return (invoke \"f64_min\") (i32.const 0x0102))",
    "(assert_return (invoke \"f32_max\") (i32.const 0x0102))",
    "(assert_return (invoke \"f64_max\") (i32.const 0x0102))",
    "(assert_return (invoke \"f32_store\") (i32.const 0x0102))",
    "(assert_return (invoke \"f64_store\") (i32.const 0x0102))",
    "(assert_return (invoke \"f32_call\") (i32.const 0x0102))",
    "(assert_return (invoke \"f64_call\") (i32.const 0x0102))",
    "(assert_return (invoke \"f32_call_indirect\") (i32.const 0x010204))",
    "(assert_return (invoke \"f64_call_indirect\") (i32.const 0x010204))",
    "(assert_return (invoke \"f32_select\") (i32.const 0x010205))",
    "(assert_return (invoke \"f64_select\") (i32.const 0x010205))",
    "(assert_return (invoke \"br_if\") (i32.const 0x0102))",
    "(assert_return (invoke \"br_table\") (i32.const 0x0102))"
  ],
  "dump": {
    "left-to-right.0.wasm": {
      "header": "\nleft-to-right.0.wasm:\tfile format wasm 0x1\n\nSections:\n\n     Type start=0x0000000a end=0x0000004a (size=0x00000040) count: 13\n Function start=0x0000004d end=0x000000d1 (size=0x00000084) count: 130\n    Table start=0x000000d3 end=0x000000d8 (size=0x00000005) count: 1\n   Memory start=0x000000da end=0x000000dd (size=0x00000003) count: 1\n   Export start=0x000000e0 end=0x0000050a (size=0x0000042a) count: 95\n     Elem start=0x0000050c end=0x0000051a (size=0x0000000e) count: 1\n     Code start=0x0000051d end=0x00000bc7 (size=0x000006aa) count: 130\n",
      "details": "\nleft-to-right.0.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nType[13]:\n - type[0] (i32, i32) -> i32\n - type[1] (i64, i64) -> i32\n - type[2] (f32, f32) -> i32\n - type[3] (f64, f64) -> i32\n - type[4] () -> nil\n - type[5] () -> i32\n - type[6] () -> i64\n - type[7] () -> f32\n - type[8] () -> f64\n - type[9] (i32, i32) -> nil\n - type[10] (i64, i64) -> nil\n - type[11] (f32, f32) -> nil\n - type[12] (f64, f64) -> nil\nFunction[130]:\n - func[0] sig=0\n - func[1] sig=0\n - func[2] sig=1\n - func[3] sig=1\n - func[4] sig=2\n - func[5] sig=2\n - func[6] sig=3\n - func[7] sig=3\n - func[8] sig=4\n - func[9] sig=4\n - func[10] sig=5\n - func[11] sig=5\n - func[12] sig=5\n - func[13] sig=5\n - func[14] sig=5\n - func[15] sig=5\n - func[16] sig=6\n - func[17] sig=6\n - func[18] sig=6\n - func[19] sig=5\n - func[20] sig=5\n - func[21] sig=7\n - func[22] sig=7\n - func[23] sig=7\n - func[24] sig=5\n - func[25] sig=5\n - func[26] sig=8\n - func[27] sig=8\n - func[28] sig=8\n - func[29] sig=5\n - func[30] sig=5\n - func[31] sig=9\n - func[32] sig=10\n - func[33] sig=11\n - func[34] sig=12\n - func[35] sig=5 <i32_add>\n - func[36] sig=5 <i32_sub>\n - func[37] sig=5 <i32_mul>\n - func[38] sig=5 <i32_div_s>\n - func[39] sig=5 <i32_div_u>\n - func[40] sig=5 <i32_rem_s>\n - func[41] sig=5 <i32_rem_u>\n - func[42] sig=5 <i32_and>\n - func[43] sig=5 <i32_or>\n - func[44] sig=5 <i32_xor>\n - func[45] sig=5 <i32_shl>\n - func[46] sig=5 <i32_shr_u>\n - func[47] sig=5 <i32_shr_s>\n - func[48] sig=5 <i32_eq>\n - func[49] sig=5 <i32_ne>\n - func[50] sig=5 <i32_lt_s>\n - func[51] sig=5 <i32_le_s>\n - func[52] sig=5 <i32_lt_u>\n - func[53] sig=5 <i32_le_u>\n - func[54] sig=5 <i32_gt_s>\n - func[55] sig=5 <i32_ge_s>\n - func[56] sig=5 <i32_gt_u>\n - func[57] sig=5 <i32_ge_u>\n - func[58] sig=5 <i32_store>\n - func[59] sig=5 <i32_store8>\n - func[60] sig=5 <i32_store16>\n - func[61] sig=5 <i32_call>\n - func[62] sig=5 <i32_call_indirect>\n - func[63] sig=5 <i32_select>\n - func[64] sig=5 <i64_add>\n - func[65] sig=5 <i64_sub>\n - func[66] sig=5 <i64_mul>\n - func[67] sig=5 <i64_div_s>\n - func[68] sig=5 <i64_div_u>\n - func[69] sig=5 <i64_rem_s>\n - func[70] sig=5 <i64_rem_u>\n - func[71] sig=5 <i64_and>\n - func[72] sig=5 <i64_or>\n - func[73] sig=5 <i64_xor>\n - func[74] sig=5 <i64_shl>\n - func[75] sig=5 <i64_shr_u>\n - func[76] sig=5 <i64_shr_s>\n - func[77] sig=5 <i64_eq>\n - func[78] sig=5 <i64_ne>\n - func[79] sig=5 <i64_lt_s>\n - func[80] sig=5 <i64_le_s>\n - func[81] sig=5 <i64_lt_u>\n - func[82] sig=5 <i64_le_u>\n - func[83] sig=5 <i64_gt_s>\n - func[84] sig=5 <i64_ge_s>\n - func[85] sig=5 <i64_gt_u>\n - func[86] sig=5 <i64_ge_u>\n - func[87] sig=5 <i64_store>\n - func[88] sig=5 <i64_store8>\n - func[89] sig=5 <i64_store16>\n - func[90] sig=5 <i64_store32>\n - func[91] sig=5 <i64_call>\n - func[92] sig=5 <i64_call_indirect>\n - func[93] sig=5 <i64_select>\n - func[94] sig=5 <f32_add>\n - func[95] sig=5 <f32_sub>\n - func[96] sig=5 <f32_mul>\n - func[97] sig=5 <f32_div>\n - func[98] sig=5 <f32_copysign>\n - func[99] sig=5 <f32_eq>\n - func[100] sig=5 <f32_ne>\n - func[101] sig=5 <f32_lt>\n - func[102] sig=5 <f32_le>\n - func[103] sig=5 <f32_gt>\n - func[104] sig=5 <f32_ge>\n - func[105] sig=5 <f32_min>\n - func[106] sig=5 <f32_max>\n - func[107] sig=5 <f32_store>\n - func[108] sig=5 <f32_call>\n - func[109] sig=5 <f32_call_indirect>\n - func[110] sig=5 <f32_select>\n - func[111] sig=5 <f64_add>\n - func[112] sig=5 <f64_sub>\n - func[113] sig=5 <f64_mul>\n - func[114] sig=5 <f64_div>\n - func[115] sig=5 <f64_copysign>\n - func[116] sig=5 <f64_eq>\n - func[117] sig=5 <f64_ne>\n - func[118] sig=5 <f64_lt>\n - func[119] sig=5 <f64_le>\n - func[120] sig=5 <f64_gt>\n - func[121] sig=5 <f64_ge>\n - func[122] sig=5 <f64_min>\n - func[123] sig=5 <f64_max>\n - func[124] sig=5 <f64_store>\n - func[125] sig=5 <f64_call>\n - func[126] sig=5 <f64_call_indirect>\n - func[127] sig=5 <f64_select>\n - func[128] sig=5 <br_if>\n - func[129] sig=5 <br_table>\nTable[1]:\n - table[0] type=funcref initial=8 max=8\nMemory[1]:\n - memory[0] pages: initial=1\nExport[95]:\n - func[35] <i32_add> -> \"i32_add\"\n - func[36] <i32_sub> -> \"i32_sub\"\n - func[37] <i32_mul> -> \"i32_mul\"\n - func[38] <i32_div_s> -> \"i32_div_s\"\n - func[39] <i32_div_u> -> \"i32_div_u\"\n - func[40] <i32_rem_s> -> \"i32_rem_s\"\n - func[41] <i32_rem_u> -> \"i32_rem_u\"\n - func[42] <i32_and> -> \"i32_and\"\n - func[43] <i32_or> -> \"i32_or\"\n - func[44] <i32_xor> -> \"i32_xor\"\n - func[45] <i32_shl> -> \"i32_shl\"\n - func[46] <i32_shr_u> -> \"i32_shr_u\"\n - func[47] <i32_shr_s> -> \"i32_shr_s\"\n - func[48] <i32_eq> -> \"i32_eq\"\n - func[49] <i32_ne> -> \"i32_ne\"\n - func[50] <i32_lt_s> -> \"i32_lt_s\"\n - func[51] <i32_le_s> -> \"i32_le_s\"\n - func[52] <i32_lt_u> -> \"i32_lt_u\"\n - func[53] <i32_le_u> -> \"i32_le_u\"\n - func[54] <i32_gt_s> -> \"i32_gt_s\"\n - func[55] <i32_ge_s> -> \"i32_ge_s\"\n - func[56] <i32_gt_u> -> \"i32_gt_u\"\n - func[57] <i32_ge_u> -> \"i32_ge_u\"\n - func[58] <i32_store> -> \"i32_store\"\n - func[59] <i32_store8> -> \"i32_store8\"\n - func[60] <i32_store16> -> \"i32_store16\"\n - func[61] <i32_call> -> \"i32_call\"\n - func[62] <i32_call_indirect> -> \"i32_call_indirect\"\n - func[63] <i32_select> -> \"i32_select\"\n - func[64] <i64_add> -> \"i64_add\"\n - func[65] <i64_sub> -> \"i64_sub\"\n - func[66] <i64_mul> -> \"i64_mul\"\n - func[67] <i64_div_s> -> \"i64_div_s\"\n - func[68] <i64_div_u> -> \"i64_div_u\"\n - func[69] <i64_rem_s> -> \"i64_rem_s\"\n - func[70] <i64_rem_u> -> \"i64_rem_u\"\n - func[71] <i64_and> -> \"i64_and\"\n - func[72] <i64_or> -> \"i64_or\"\n - func[73] <i64_xor> -> \"i64_xor\"\n - func[74] <i64_shl> -> \"i64_shl\"\n - func[75] <i64_shr_u> -> \"i64_shr_u\"\n - func[76] <i64_shr_s> -> \"i64_shr_s\"\n - func[77] <i64_eq> -> \"i64_eq\"\n - func[78] <i64_ne> -> \"i64_ne\"\n - func[79] <i64_lt_s> -> \"i64_lt_s\"\n - func[80] <i64_le_s> -> \"i64_le_s\"\n - func[81] <i64_lt_u> -> \"i64_lt_u\"\n - func[82] <i64_le_u> -> \"i64_le_u\"\n - func[83] <i64_gt_s> -> \"i64_gt_s\"\n - func[84] <i64_ge_s> -> \"i64_ge_s\"\n - func[85] <i64_gt_u> -> \"i64_gt_u\"\n - func[86] <i64_ge_u> -> \"i64_ge_u\"\n - func[87] <i64_store> -> \"i64_store\"\n - func[88] <i64_store8> -> \"i64_store8\"\n - func[89] <i64_store16> -> \"i64_store16\"\n - func[90] <i64_store32> -> \"i64_store32\"\n - func[91] <i64_call> -> \"i64_call\"\n - func[92] <i64_call_indirect> -> \"i64_call_indirect\"\n - func[93] <i64_select> -> \"i64_select\"\n - func[94] <f32_add> -> \"f32_add\"\n - func[95] <f32_sub> -> \"f32_sub\"\n - func[96] <f32_mul> -> \"f32_mul\"\n - func[97] <f32_div> -> \"f32_div\"\n - func[98] <f32_copysign> -> \"f32_copysign\"\n - func[99] <f32_eq> -> \"f32_eq\"\n - func[100] <f32_ne> -> \"f32_ne\"\n - func[101] <f32_lt> -> \"f32_lt\"\n - func[102] <f32_le> -> \"f32_le\"\n - func[103] <f32_gt> -> \"f32_gt\"\n - func[104] <f32_ge> -> \"f32_ge\"\n - func[105] <f32_min> -> \"f32_min\"\n - func[106] <f32_max> -> \"f32_max\"\n - func[107] <f32_store> -> \"f32_store\"\n - func[108] <f32_call> -> \"f32_call\"\n - func[109] <f32_call_indirect> -> \"f32_call_indirect\"\n - func[110] <f32_select> -> \"f32_select\"\n - func[111] <f64_add> -> \"f64_add\"\n - func[112] <f64_sub> -> \"f64_sub\"\n - func[113] <f64_mul> -> \"f64_mul\"\n - func[114] <f64_div> -> \"f64_div\"\n - func[115] <f64_copysign> -> \"f64_copysign\"\n - func[116] <f64_eq> -> \"f64_eq\"\n - func[117] <f64_ne> -> \"f64_ne\"\n - func[118] <f64_lt> -> \"f64_lt\"\n - func[119] <f64_le> -> \"f64_le\"\n - func[120] <f64_gt> -> \"f64_gt\"\n - func[121] <f64_ge> -> \"f64_ge\"\n - func[122] <f64_min> -> \"f64_min\"\n - func[123] <f64_max> -> \"f64_max\"\n - func[124] <f64_store> -> \"f64_store\"\n - func[125] <f64_call> -> \"f64_call\"\n - func[126] <f64_call_indirect> -> \"f64_call_indirect\"\n - func[127] <f64_select> -> \"f64_select\"\n - func[128] <br_if> -> \"br_if\"\n - func[129] <br_table> -> \"br_table\"\nElem[1]:\n - segment[0] flags=0 table=0 count=8 - init i32=0\n  - elem[0] = ref.func:0\n  - elem[1] = ref.func:1\n  - elem[2] = ref.func:2\n  - elem[3] = ref.func:3\n  - elem[4] = ref.func:4\n  - elem[5] = ref.func:5\n  - elem[6] = ref.func:6\n  - elem[7] = ref.func:7\nCode[130]:\n - func[0] size=4\n - func[1] size=4\n - func[2] size=4\n - func[3] size=4\n - func[4] size=4\n - func[5] size=4\n - func[6] size=4\n - func[7] size=4\n - func[8] size=9\n - func[9] size=39\n - func[10] size=7\n - func[11] size=13\n - func[12] size=13\n - func[13] size=13\n - func[14] size=13\n - func[15] size=13\n - func[16] size=13\n - func[17] size=13\n - func[18] size=13\n - func[19] size=13\n - func[20] size=13\n - func[21] size=16\n - func[22] size=16\n - func[23] size=16\n - func[24] size=13\n - func[25] size=13\n - func[26] size=20\n - func[27] size=20\n - func[28] size=20\n - func[29] size=13\n - func[30] size=13\n - func[31] size=2\n - func[32] size=2\n - func[33] size=2\n - func[34] size=2\n - func[35] size=12 <i32_add>\n - func[36] size=12 <i32_sub>\n - func[37] size=12 <i32_mul>\n - func[38] size=12 <i32_div_s>\n - func[39] size=12 <i32_div_u>\n - func[40] size=12 <i32_rem_s>\n - func[41] size=12 <i32_rem_u>\n - func[42] size=12 <i32_and>\n - func[43] size=12 <i32_or>\n - func[44] size=12 <i32_xor>\n - func[45] size=12 <i32_shl>\n - func[46] size=12 <i32_shr_u>\n - func[47] size=12 <i32_shr_s>\n - func[48] size=12 <i32_eq>\n - func[49] size=12 <i32_ne>\n - func[50] size=12 <i32_lt_s>\n - func[51] size=12 <i32_le_s>\n - func[52] size=12 <i32_lt_u>\n - func[53] size=12 <i32_le_u>\n - func[54] size=12 <i32_gt_s>\n - func[55] size=12 <i32_ge_s>\n - func[56] size=12 <i32_gt_u>\n - func[57] size=12 <i32_ge_u>\n - func[58] size=13 <i32_store>\n - func[59] size=13 <i32_store8>\n - func[60] size=13 <i32_store16>\n - func[61] size=12 <i32_call>\n - func[62] size=16 <i32_call_indirect>\n - func[63] size=14 <i32_select>\n - func[64] size=12 <i64_add>\n - func[65] size=12 <i64_sub>\n - func[66] size=12 <i64_mul>\n - func[67] size=12 <i64_div_s>\n - func[68] size=12 <i64_div_u>\n - func[69] size=12 <i64_rem_s>\n - func[70] size=12 <i64_rem_u>\n - func[71] size=12 <i64_and>\n - func[72] size=12 <i64_or>\n - func[73] size=12 <i64_xor>\n - func[74] size=12 <i64_shl>\n - func[75] size=12 <i64_shr_u>\n - func[76] size=12 <i64_shr_s>\n - func[77] size=12 <i64_eq>\n - func[78] size=12 <i64_ne>\n - func[79] size=12 <i64_lt_s>\n - func[80] size=12 <i64_le_s>\n - func[81] size=12 <i64_lt_u>\n - func[82] size=12 <i64_le_u>\n - func[83] size=12 <i64_gt_s>\n - func[84] size=12 <i64_ge_s>\n - func[85] size=12 <i64_gt_u>\n - func[86] size=12 <i64_ge_u>\n - func[87] size=13 <i64_store>\n - func[88] size=13 <i64_store8>\n - func[89] size=13 <i64_store16>\n - func[90] size=13 <i64_store32>\n - func[91] size=12 <i64_call>\n - func[92] size=16 <i64_call_indirect>\n - func[93] size=14 <i64_select>\n - func[94] size=12 <f32_add>\n - func[95] size=12 <f32_sub>\n - func[96] size=12 <f32_mul>\n - func[97] size=12 <f32_div>\n - func[98] size=12 <f32_copysign>\n - func[99] size=12 <f32_eq>\n - func[100] size=12 <f32_ne>\n - func[101] size=12 <f32_lt>\n - func[102] size=12 <f32_le>\n - func[103] size=12 <f32_gt>\n - func[104] size=12 <f32_ge>\n - func[105] size=12 <f32_min>\n - func[106] size=12 <f32_max>\n - func[107] size=13 <f32_store>\n - func[108] size=12 <f32_call>\n - func[109] size=16 <f32_call_indirect>\n - func[110] size=14 <f32_select>\n - func[111] size=12 <f64_add>\n - func[112] size=12 <f64_sub>\n - func[113] size=12 <f64_mul>\n - func[114] size=12 <f64_div>\n - func[115] size=12 <f64_copysign>\n - func[116] size=12 <f64_eq>\n - func[117] size=12 <f64_ne>\n - func[118] size=12 <f64_lt>\n - func[119] size=12 <f64_le>\n - func[120] size=12 <f64_gt>\n - func[121] size=12 <f64_ge>\n - func[122] size=12 <f64_min>\n - func[123] size=12 <f64_max>\n - func[124] size=13 <f64_store>\n - func[125] size=12 <f64_call>\n - func[126] size=16 <f64_call_indirect>\n - func[127] size=14 <f64_select>\n - func[128] size=19 <br_if>\n - func[129] size=21 <br_table>\n",
      "disassemble": "\nleft-to-right.0.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n000520 func[0]:\n 000521: 41 7f                      | i32.const 4294967295\n 000523: 0b                         | end\n000525 func[1]:\n 000526: 41 7e                      | i32.const 4294967294\n 000528: 0b                         | end\n00052a func[2]:\n 00052b: 41 7f                      | i32.const 4294967295\n 00052d: 0b                         | end\n00052f func[3]:\n 000530: 41 7e                      | i32.const 4294967294\n 000532: 0b                         | end\n000534 func[4]:\n 000535: 41 7f                      | i32.const 4294967295\n 000537: 0b                         | end\n000539 func[5]:\n 00053a: 41 7e                      | i32.const 4294967294\n 00053c: 0b                         | end\n00053e func[6]:\n 00053f: 41 7f                      | i32.const 4294967295\n 000541: 0b                         | end\n000543 func[7]:\n 000544: 41 7e                      | i32.const 4294967294\n 000546: 0b                         | end\n000548 func[8]:\n 000549: 41 08                      | i32.const 8\n 00054b: 41 00                      | i32.const 0\n 00054d: 36 02 00                   | i32.store 2 0\n 000550: 0b                         | end\n000552 func[9]:\n 000553: 41 0b                      | i32.const 11\n 000555: 41 0a                      | i32.const 10\n 000557: 2d 00 00                   | i32.load8_u 0 0\n 00055a: 3a 00 00                   | i32.store8 0 0\n 00055d: 41 0a                      | i32.const 10\n 00055f: 41 09                      | i32.const 9\n 000561: 2d 00 00                   | i32.load8_u 0 0\n 000564: 3a 00 00                   | i32.store8 0 0\n 000567: 41 09                      | i32.const 9\n 000569: 41 08                      | i32.const 8\n 00056b: 2d 00 00                   | i32.load8_u 0 0\n 00056e: 3a 00 00                   | i32.store8 0 0\n 000571: 41 08                      | i32.const 8\n 000573: 41 7d                      | i32.const 4294967293\n 000575: 3a 00 00                   | i32.store8 0 0\n 000578: 0b                         | end\n00057a func[10]:\n 00057b: 41 08                      | i32.const 8\n 00057d: 28 02 00                   | i32.load 2 0\n 000580: 0b                         | end\n000582 func[11]:\n 000583: 10 09                      | call 9\n 000585: 41 08                      | i32.const 8\n 000587: 41 01                      | i32.const 1\n 000589: 3a 00 00                   | i32.store8 0 0\n 00058c: 41 00                      | i32.const 0\n 00058e: 0b                         | end\n000590 func[12]:\n 000591: 10 09                      | call 9\n 000593: 41 08                      | i32.const 8\n 000595: 41 02                      | i32.const 2\n 000597: 3a 00 00                   | i32.store8 0 0\n 00059a: 41 01                      | i32.const 1\n 00059c: 0b                         | end\n00059e func[13]:\n 00059f: 10 09                      | call 9\n 0005a1: 41 08                      | i32.const 8\n 0005a3: 41 03                      | i32.const 3\n 0005a5: 3a 00 00                   | i32.store8 0 0\n 0005a8: 41 01                      | i32.const 1\n 0005aa: 0b                         | end\n0005ac func[14]:\n 0005ad: 10 09                      | call 9\n 0005af: 41 08                      | i32.const 8\n 0005b1: 41 04                      | i32.const 4\n 0005b3: 3a 00 00                   | i32.store8 0 0\n 0005b6: 41 00                      | i32.const 0\n 0005b8: 0b                         | end\n0005ba func[15]:\n 0005bb: 10 09                      | call 9\n 0005bd: 41 08                      | i32.const 8\n 0005bf: 41 05                      | i32.const 5\n 0005c1: 3a 00 00                   | i32.store8 0 0\n 0005c4: 41 00                      | i32.const 0\n 0005c6: 0b                         | end\n0005c8 func[16]:\n 0005c9: 10 09                      | call 9\n 0005cb: 41 08                      | i32.const 8\n 0005cd: 41 01                      | i32.const 1\n 0005cf: 3a 00 00                   | i32.store8 0 0\n 0005d2: 42 00                      | i64.const 0\n 0005d4: 0b                         | end\n0005d6 func[17]:\n 0005d7: 10 09                      | call 9\n 0005d9: 41 08                      | i32.const 8\n 0005db: 41 02                      | i32.const 2\n 0005dd: 3a 00 00                   | i32.store8 0 0\n 0005e0: 42 01                      | i64.const 1\n 0005e2: 0b                         | end\n0005e4 func[18]:\n 0005e5: 10 09                      | call 9\n 0005e7: 41 08                      | i32.const 8\n 0005e9: 41 03                      | i32.const 3\n 0005eb: 3a 00 00                   | i32.store8 0 0\n 0005ee: 42 01                      | i64.const 1\n 0005f0: 0b                         | end\n0005f2 func[19]:\n 0005f3: 10 09                      | call 9\n 0005f5: 41 08                      | i32.const 8\n 0005f7: 41 04                      | i32.const 4\n 0005f9: 3a 00 00                   | i32.store8 0 0\n 0005fc: 41 02                      | i32.const 2\n 0005fe: 0b                         | end\n000600 func[20]:\n 000601: 10 09                      | call 9\n 000603: 41 08                      | i32.const 8\n 000605: 41 05                      | i32.const 5\n 000607: 3a 00 00                   | i32.store8 0 0\n 00060a: 41 00                      | i32.const 0\n 00060c: 0b                         | end\n00060e func[21]:\n 00060f: 10 09                      | call 9\n 000611: 41 08                      | i32.const 8\n 000613: 41 01                      | i32.const 1\n 000615: 3a 00 00                   | i32.store8 0 0\n 000618: 43 00 00 00 00             | f32.const 0x0p+0\n 00061d: 0b                         | end\n00061f func[22]:\n 000620: 10 09                      | call 9\n 000622: 41 08                      | i32.const 8\n 000624: 41 02                      | i32.const 2\n 000626: 3a 00 00                   | i32.store8 0 0\n 000629: 43 00 00 80 3f             | f32.const 0x1p+0\n 00062e: 0b                         | end\n000630 func[23]:\n 000631: 10 09                      | call 9\n 000633: 41 08                      | i32.const 8\n 000635: 41 03                      | i32.const 3\n 000637: 3a 00 00                   | i32.store8 0 0\n 00063a: 43 00 00 80 3f             | f32.const 0x1p+0\n 00063f: 0b                         | end\n000641 func[24]:\n 000642: 10 09                      | call 9\n 000644: 41 08                      | i32.const 8\n 000646: 41 04                      | i32.const 4\n 000648: 3a 00 00                   | i32.store8 0 0\n 00064b: 41 04                      | i32.const 4\n 00064d: 0b                         | end\n00064f func[25]:\n 000650: 10 09                      | call 9\n 000652: 41 08                      | i32.const 8\n 000654: 41 05                      | i32.const 5\n 000656: 3a 00 00                   | i32.store8 0 0\n 000659: 41 00                      | i32.const 0\n 00065b: 0b                         | end\n00065d func[26]:\n 00065e: 10 09                      | call 9\n 000660: 41 08                      | i32.const 8\n 000662: 41 01                      | i32.const 1\n 000664: 3a 00 00                   | i32.store8 0 0\n 000667: 44 00 00 00 00 00 00 00 00 | f64.const 0x0p+0\n 000670: 0b                         | end\n000672 func[27]:\n 000673: 10 09                      | call 9\n 000675: 41 08                      | i32.const 8\n 000677: 41 02                      | i32.const 2\n 000679: 3a 00 00                   | i32.store8 0 0\n 00067c: 44 00 00 00 00 00 00 f0 3f | f64.const 0x1p+0\n 000685: 0b                         | end\n000687 func[28]:\n 000688: 10 09                      | call 9\n 00068a: 41 08                      | i32.const 8\n 00068c: 41 03                      | i32.const 3\n 00068e: 3a 00 00                   | i32.store8 0 0\n 000691: 44 00 00 00 00 00 00 f0 3f | f64.const 0x1p+0\n 00069a: 0b                         | end\n00069c func[29]:\n 00069d: 10 09                      | call 9\n 00069f: 41 08                      | i32.const 8\n 0006a1: 41 04                      | i32.const 4\n 0006a3: 3a 00 00                   | i32.store8 0 0\n 0006a6: 41 06                      | i32.const 6\n 0006a8: 0b                         | end\n0006aa func[30]:\n 0006ab: 10 09                      | call 9\n 0006ad: 41 08                      | i32.const 8\n 0006af: 41 05                      | i32.const 5\n 0006b1: 3a 00 00                   | i32.store8 0 0\n 0006b4: 41 00                      | i32.const 0\n 0006b6: 0b                         | end\n0006b8 func[31]:\n 0006b9: 0b                         | end\n0006bb func[32]:\n 0006bc: 0b                         | end\n0006be func[33]:\n 0006bf: 0b                         | end\n0006c1 func[34]:\n 0006c2: 0b                         | end\n0006c4 func[35] <i32_add>:\n 0006c5: 10 08                      | call 8\n 0006c7: 10 0b                      | call 11\n 0006c9: 10 0c                      | call 12\n 0006cb: 6a                         | i32.add\n 0006cc: 1a                         | drop\n 0006cd: 10 0a                      | call 10\n 0006cf: 0b                         | end\n0006d1 func[36] <i32_sub>:\n 0006d2: 10 08                      | call 8\n 0006d4: 10 0b                      | call 11\n 0006d6: 10 0c                      | call 12\n 0006d8: 6b                         | i32.sub\n 0006d9: 1a                         | drop\n 0006da: 10 0a                      | call 10\n 0006dc: 0b                         | end\n0006de func[37] <i32_mul>:\n 0006df: 10 08                      | call 8\n 0006e1: 10 0b                      | call 11\n 0006e3: 10 0c                      | call 12\n 0006e5: 6c                         | i32.mul\n 0006e6: 1a                         | drop\n 0006e7: 10 0a                      | call 10\n 0006e9: 0b                         | end\n0006eb func[38] <i32_div_s>:\n 0006ec: 10 08                      | call 8\n 0006ee: 10 0b                      | call 11\n 0006f0: 10 0c                      | call 12\n 0006f2: 6d                         | i32.div_s\n 0006f3: 1a                         | drop\n 0006f4: 10 0a                      | call 10\n 0006f6: 0b                         | end\n0006f8 func[39] <i32_div_u>:\n 0006f9: 10 08                      | call 8\n 0006fb: 10 0b                      | call 11\n 0006fd: 10 0c                      | call 12\n 0006ff: 6e                         | i32.div_u\n 000700: 1a                         | drop\n 000701: 10 0a                      | call 10\n 000703: 0b                         | end\n000705 func[40] <i32_rem_s>:\n 000706: 10 08                      | call 8\n 000708: 10 0b                      | call 11\n 00070a: 10 0c                      | call 12\n 00070c: 6f                         | i32.rem_s\n 00070d: 1a                         | drop\n 00070e: 10 0a                      | call 10\n 000710: 0b                         | end\n000712 func[41] <i32_rem_u>:\n 000713: 10 08                      | call 8\n 000715: 10 0b                      | call 11\n 000717: 10 0c                      | call 12\n 000719: 70                         | i32.rem_u\n 00071a: 1a                         | drop\n 00071b: 10 0a                      | call 10\n 00071d: 0b                         | end\n00071f func[42] <i32_and>:\n 000720: 10 08                      | call 8\n 000722: 10 0b                      | call 11\n 000724: 10 0c                      | call 12\n 000726: 71                         | i32.and\n 000727: 1a                         | drop\n 000728: 10 0a                      | call 10\n 00072a: 0b                         | end\n00072c func[43] <i32_or>:\n 00072d: 10 08                      | call 8\n 00072f: 10 0b                      | call 11\n 000731: 10 0c                      | call 12\n 000733: 72                         | i32.or\n 000734: 1a                         | drop\n 000735: 10 0a                      | call 10\n 000737: 0b                         | end\n000739 func[44] <i32_xor>:\n 00073a: 10 08                      | call 8\n 00073c: 10 0b                      | call 11\n 00073e: 10 0c                      | call 12\n 000740: 73                         | i32.xor\n 000741: 1a                         | drop\n 000742: 10 0a                      | call 10\n 000744: 0b                         | end\n000746 func[45] <i32_shl>:\n 000747: 10 08                      | call 8\n 000749: 10 0b                      | call 11\n 00074b: 10 0c                      | call 12\n 00074d: 74                         | i32.shl\n 00074e: 1a                         | drop\n 00074f: 10 0a                      | call 10\n 000751: 0b                         | end\n000753 func[46] <i32_shr_u>:\n 000754: 10 08                      | call 8\n 000756: 10 0b                      | call 11\n 000758: 10 0c                      | call 12\n 00075a: 76                         | i32.shr_u\n 00075b: 1a                         | drop\n 00075c: 10 0a                      | call 10\n 00075e: 0b                         | end\n000760 func[47] <i32_shr_s>:\n 000761: 10 08                      | call 8\n 000763: 10 0b                      | call 11\n 000765: 10 0c                      | call 12\n 000767: 75                         | i32.shr_s\n 000768: 1a                         | drop\n 000769: 10 0a                      | call 10\n 00076b: 0b                         | end\n00076d func[48] <i32_eq>:\n 00076e: 10 08                      | call 8\n 000770: 10 0b                      | call 11\n 000772: 10 0c                      | call 12\n 000774: 46                         | i32.eq\n 000775: 1a                         | drop\n 000776: 10 0a                      | call 10\n 000778: 0b                         | end\n00077a func[49] <i32_ne>:\n 00077b: 10 08                      | call 8\n 00077d: 10 0b                      | call 11\n 00077f: 10 0c                      | call 12\n 000781: 47                         | i32.ne\n 000782: 1a                         | drop\n 000783: 10 0a                      | call 10\n 000785: 0b                         | end\n000787 func[50] <i32_lt_s>:\n 000788: 10 08                      | call 8\n 00078a: 10 0b                      | call 11\n 00078c: 10 0c                      | call 12\n 00078e: 48                         | i32.lt_s\n 00078f: 1a                         | drop\n 000790: 10 0a                      | call 10\n 000792: 0b                         | end\n000794 func[51] <i32_le_s>:\n 000795: 10 08                      | call 8\n 000797: 10 0b                      | call 11\n 000799: 10 0c                      | call 12\n 00079b: 4c                         | i32.le_s\n 00079c: 1a                         | drop\n 00079d: 10 0a                      | call 10\n 00079f: 0b                         | end\n0007a1 func[52] <i32_lt_u>:\n 0007a2: 10 08                      | call 8\n 0007a4: 10 0b                      | call 11\n 0007a6: 10 0c                      | call 12\n 0007a8: 49                         | i32.lt_u\n 0007a9: 1a                         | drop\n 0007aa: 10 0a                      | call 10\n 0007ac: 0b                         | end\n0007ae func[53] <i32_le_u>:\n 0007af: 10 08                      | call 8\n 0007b1: 10 0b                      | call 11\n 0007b3: 10 0c                      | call 12\n 0007b5: 4d                         | i32.le_u\n 0007b6: 1a                         | drop\n 0007b7: 10 0a                      | call 10\n 0007b9: 0b                         | end\n0007bb func[54] <i32_gt_s>:\n 0007bc: 10 08                      | call 8\n 0007be: 10 0b                      | call 11\n 0007c0: 10 0c                      | call 12\n 0007c2: 4a                         | i32.gt_s\n 0007c3: 1a                         | drop\n 0007c4: 10 0a                      | call 10\n 0007c6: 0b                         | end\n0007c8 func[55] <i32_ge_s>:\n 0007c9: 10 08                      | call 8\n 0007cb: 10 0b                      | call 11\n 0007cd: 10 0c                      | call 12\n 0007cf: 4e                         | i32.ge_s\n 0007d0: 1a                         | drop\n 0007d1: 10 0a                      | call 10\n 0007d3: 0b                         | end\n0007d5 func[56] <i32_gt_u>:\n 0007d6: 10 08                      | call 8\n 0007d8: 10 0b                      | call 11\n 0007da: 10 0c                      | call 12\n 0007dc: 4b                         | i32.gt_u\n 0007dd: 1a                         | drop\n 0007de: 10 0a                      | call 10\n 0007e0: 0b                         | end\n0007e2 func[57] <i32_ge_u>:\n 0007e3: 10 08                      | call 8\n 0007e5: 10 0b                      | call 11\n 0007e7: 10 0c                      | call 12\n 0007e9: 4f                         | i32.ge_u\n 0007ea: 1a                         | drop\n 0007eb: 10 0a                      | call 10\n 0007ed: 0b                         | end\n0007ef func[58] <i32_store>:\n 0007f0: 10 08                      | call 8\n 0007f2: 10 0b                      | call 11\n 0007f4: 10 0c                      | call 12\n 0007f6: 36 02 00                   | i32.store 2 0\n 0007f9: 10 0a                      | call 10\n 0007fb: 0b                         | end\n0007fd func[59] <i32_store8>:\n 0007fe: 10 08                      | call 8\n 000800: 10 0b                      | call 11\n 000802: 10 0c                      | call 12\n 000804: 3a 00 00                   | i32.store8 0 0\n 000807: 10 0a                      | call 10\n 000809: 0b                         | end\n00080b func[60] <i32_store16>:\n 00080c: 10 08                      | call 8\n 00080e: 10 0b                      | call 11\n 000810: 10 0c                      | call 12\n 000812: 3b 01 00                   | i32.store16 1 0\n 000815: 10 0a                      | call 10\n 000817: 0b                         | end\n000819 func[61] <i32_call>:\n 00081a: 10 08                      | call 8\n 00081c: 10 0b                      | call 11\n 00081e: 10 0c                      | call 12\n 000820: 10 1f                      | call 31\n 000822: 10 0a                      | call 10\n 000824: 0b                         | end\n000826 func[62] <i32_call_indirect>:\n 000827: 10 08                      | call 8\n 000829: 10 0b                      | call 11\n 00082b: 10 0c                      | call 12\n 00082d: 10 0e                      | call 14\n 00082f: 11 00 00                   | call_indirect 0 (type 0)\n 000832: 1a                         | drop\n 000833: 10 0a                      | call 10\n 000835: 0b                         | end\n000837 func[63] <i32_select>:\n 000838: 10 08                      | call 8\n 00083a: 10 0b                      | call 11\n 00083c: 10 0c                      | call 12\n 00083e: 10 0f                      | call 15\n 000840: 1b                         | select\n 000841: 1a                         | drop\n 000842: 10 0a                      | call 10\n 000844: 0b                         | end\n000846 func[64] <i64_add>:\n 000847: 10 08                      | call 8\n 000849: 10 10                      | call 16\n 00084b: 10 11                      | call 17\n 00084d: 7c                         | i64.add\n 00084e: 1a                         | drop\n 00084f: 10 0a                      | call 10\n 000851: 0b                         | end\n000853 func[65] <i64_sub>:\n 000854: 10 08                      | call 8\n 000856: 10 10                      | call 16\n 000858: 10 11                      | call 17\n 00085a: 7d                         | i64.sub\n 00085b: 1a                         | drop\n 00085c: 10 0a                      | call 10\n 00085e: 0b                         | end\n000860 func[66] <i64_mul>:\n 000861: 10 08                      | call 8\n 000863: 10 10                      | call 16\n 000865: 10 11                      | call 17\n 000867: 7e                         | i64.mul\n 000868: 1a                         | drop\n 000869: 10 0a                      | call 10\n 00086b: 0b                         | end\n00086d func[67] <i64_div_s>:\n 00086e: 10 08                      | call 8\n 000870: 10 10                      | call 16\n 000872: 10 11                      | call 17\n 000874: 7f                         | i64.div_s\n 000875: 1a                         | drop\n 000876: 10 0a                      | call 10\n 000878: 0b                         | end\n00087a func[68] <i64_div_u>:\n 00087b: 10 08                      | call 8\n 00087d: 10 10                      | call 16\n 00087f: 10 11                      | call 17\n 000881: 80                         | i64.div_u\n 000882: 1a                         | drop\n 000883: 10 0a                      | call 10\n 000885: 0b                         | end\n000887 func[69] <i64_rem_s>:\n 000888: 10 08                      | call 8\n 00088a: 10 10                      | call 16\n 00088c: 10 11                      | call 17\n 00088e: 81                         | i64.rem_s\n 00088f: 1a                         | drop\n 000890: 10 0a                      | call 10\n 000892: 0b                         | end\n000894 func[70] <i64_rem_u>:\n 000895: 10 08                      | call 8\n 000897: 10 10                      | call 16\n 000899: 10 11                      | call 17\n 00089b: 82                         | i64.rem_u\n 00089c: 1a                         | drop\n 00089d: 10 0a                      | call 10\n 00089f: 0b                         | end\n0008a1 func[71] <i64_and>:\n 0008a2: 10 08                      | call 8\n 0008a4: 10 10                      | call 16\n 0008a6: 10 11                      | call 17\n 0008a8: 83                         | i64.and\n 0008a9: 1a                         | drop\n 0008aa: 10 0a                      | call 10\n 0008ac: 0b                         | end\n0008ae func[72] <i64_or>:\n 0008af: 10 08                      | call 8\n 0008b1: 10 10                      | call 16\n 0008b3: 10 11                      | call 17\n 0008b5: 84                         | i64.or\n 0008b6: 1a                         | drop\n 0008b7: 10 0a                      | call 10\n 0008b9: 0b                         | end\n0008bb func[73] <i64_xor>:\n 0008bc: 10 08                      | call 8\n 0008be: 10 10                      | call 16\n 0008c0: 10 11                      | call 17\n 0008c2: 85                         | i64.xor\n 0008c3: 1a                         | drop\n 0008c4: 10 0a                      | call 10\n 0008c6: 0b                         | end\n0008c8 func[74] <i64_shl>:\n 0008c9: 10 08                      | call 8\n 0008cb: 10 10                      | call 16\n 0008cd: 10 11                      | call 17\n 0008cf: 86                         | i64.shl\n 0008d0: 1a                         | drop\n 0008d1: 10 0a                      | call 10\n 0008d3: 0b                         | end\n0008d5 func[75] <i64_shr_u>:\n 0008d6: 10 08                      | call 8\n 0008d8: 10 10                      | call 16\n 0008da: 10 11                      | call 17\n 0008dc: 88                         | i64.shr_u\n 0008dd: 1a                         | drop\n 0008de: 10 0a                      | call 10\n 0008e0: 0b                         | end\n0008e2 func[76] <i64_shr_s>:\n 0008e3: 10 08                      | call 8\n 0008e5: 10 10                      | call 16\n 0008e7: 10 11                      | call 17\n 0008e9: 87                         | i64.shr_s\n 0008ea: 1a                         | drop\n 0008eb: 10 0a                      | call 10\n 0008ed: 0b                         | end\n0008ef func[77] <i64_eq>:\n 0008f0: 10 08                      | call 8\n 0008f2: 10 10                      | call 16\n 0008f4: 10 11                      | call 17\n 0008f6: 51                         | i64.eq\n 0008f7: 1a                         | drop\n 0008f8: 10 0a                      | call 10\n 0008fa: 0b                         | end\n0008fc func[78] <i64_ne>:\n 0008fd: 10 08                      | call 8\n 0008ff: 10 10                      | call 16\n 000901: 10 11                      | call 17\n 000903: 52                         | i64.ne\n 000904: 1a                         | drop\n 000905: 10 0a                      | call 10\n 000907: 0b                         | end\n000909 func[79] <i64_lt_s>:\n 00090a: 10 08                      | call 8\n 00090c: 10 10                      | call 16\n 00090e: 10 11                      | call 17\n 000910: 53                         | i64.lt_s\n 000911: 1a                         | drop\n 000912: 10 0a                      | call 10\n 000914: 0b                         | end\n000916 func[80] <i64_le_s>:\n 000917: 10 08                      | call 8\n 000919: 10 10                      | call 16\n 00091b: 10 11                      | call 17\n 00091d: 57                         | i64.le_s\n 00091e: 1a                         | drop\n 00091f: 10 0a                      | call 10\n 000921: 0b                         | end\n000923 func[81] <i64_lt_u>:\n 000924: 10 08                      | call 8\n 000926: 10 10                      | call 16\n 000928: 10 11                      | call 17\n 00092a: 54                         | i64.lt_u\n 00092b: 1a                         | drop\n 00092c: 10 0a                      | call 10\n 00092e: 0b                         | end\n000930 func[82] <i64_le_u>:\n 000931: 10 08                      | call 8\n 000933: 10 10                      | call 16\n 000935: 10 11                      | call 17\n 000937: 58                         | i64.le_u\n 000938: 1a                         | drop\n 000939: 10 0a                      | call 10\n 00093b: 0b                         | end\n00093d func[83] <i64_gt_s>:\n 00093e: 10 08                      | call 8\n 000940: 10 10                      | call 16\n 000942: 10 11                      | call 17\n 000944: 55                         | i64.gt_s\n 000945: 1a                         | drop\n 000946: 10 0a                      | call 10\n 000948: 0b                         | end\n00094a func[84] <i64_ge_s>:\n 00094b: 10 08                      | call 8\n 00094d: 10 10                      | call 16\n 00094f: 10 11                      | call 17\n 000951: 59                         | i64.ge_s\n 000952: 1a                         | drop\n 000953: 10 0a                      | call 10\n 000955: 0b                         | end\n000957 func[85] <i64_gt_u>:\n 000958: 10 08                      | call 8\n 00095a: 10 10                      | call 16\n 00095c: 10 11                      | call 17\n 00095e: 56                         | i64.gt_u\n 00095f: 1a                         | drop\n 000960: 10 0a                      | call 10\n 000962: 0b                         | end\n000964 func[86] <i64_ge_u>:\n 000965: 10 08                      | call 8\n 000967: 10 10                      | call 16\n 000969: 10 11                      | call 17\n 00096b: 5a                         | i64.ge_u\n 00096c: 1a                         | drop\n 00096d: 10 0a                      | call 10\n 00096f: 0b                         | end\n000971 func[87] <i64_store>:\n 000972: 10 08                      | call 8\n 000974: 10 0b                      | call 11\n 000976: 10 11                      | call 17\n 000978: 37 03 00                   | i64.store 3 0\n 00097b: 10 0a                      | call 10\n 00097d: 0b                         | end\n00097f func[88] <i64_store8>:\n 000980: 10 08                      | call 8\n 000982: 10 0b                      | call 11\n 000984: 10 11                      | call 17\n 000986: 3c 00 00                   | i64.store8 0 0\n 000989: 10 0a                      | call 10\n 00098b: 0b                         | end\n00098d func[89] <i64_store16>:\n 00098e: 10 08                      | call 8\n 000990: 10 0b                      | call 11\n 000992: 10 11                      | call 17\n 000994: 3d 01 00                   | i64.store16 1 0\n 000997: 10 0a                      | call 10\n 000999: 0b                         | end\n00099b func[90] <i64_store32>:\n 00099c: 10 08                      | call 8\n 00099e: 10 0b                      | call 11\n 0009a0: 10 11                      | call 17\n 0009a2: 3e 02 00                   | i64.store32 2 0\n 0009a5: 10 0a                      | call 10\n 0009a7: 0b                         | end\n0009a9 func[91] <i64_call>:\n 0009aa: 10 08                      | call 8\n 0009ac: 10 10                      | call 16\n 0009ae: 10 11                      | call 17\n 0009b0: 10 20                      | call 32\n 0009b2: 10 0a                      | call 10\n 0009b4: 0b                         | end\n0009b6 func[92] <i64_call_indirect>:\n 0009b7: 10 08                      | call 8\n 0009b9: 10 10                      | call 16\n 0009bb: 10 11                      | call 17\n 0009bd: 10 13                      | call 19\n 0009bf: 11 01 00                   | call_indirect 0 (type 1)\n 0009c2: 1a                         | drop\n 0009c3: 10 0a                      | call 10\n 0009c5: 0b                         | end\n0009c7 func[93] <i64_select>:\n 0009c8: 10 08                      | call 8\n 0009ca: 10 10                      | call 16\n 0009cc: 10 11                      | call 17\n 0009ce: 10 14                      | call 20\n 0009d0: 1b                         | select\n 0009d1: 1a                         | drop\n 0009d2: 10 0a                      | call 10\n 0009d4: 0b                         | end\n0009d6 func[94] <f32_add>:\n 0009d7: 10 08                      | call 8\n 0009d9: 10 15                      | call 21\n 0009db: 10 16                      | call 22\n 0009dd: 92                         | f32.add\n 0009de: 1a                         | drop\n 0009df: 10 0a                      | call 10\n 0009e1: 0b                         | end\n0009e3 func[95] <f32_sub>:\n 0009e4: 10 08                      | call 8\n 0009e6: 10 15                      | call 21\n 0009e8: 10 16                      | call 22\n 0009ea: 93                         | f32.sub\n 0009eb: 1a                         | drop\n 0009ec: 10 0a                      | call 10\n 0009ee: 0b                         | end\n0009f0 func[96] <f32_mul>:\n 0009f1: 10 08                      | call 8\n 0009f3: 10 15                      | call 21\n 0009f5: 10 16                      | call 22\n 0009f7: 94                         | f32.mul\n 0009f8: 1a                         | drop\n 0009f9: 10 0a                      | call 10\n 0009fb: 0b                         | end\n0009fd func[97] <f32_div>:\n 0009fe: 10 08                      | call 8\n 000a00: 10 15                      | call 21\n 000a02: 10 16                      | call 22\n 000a04: 95                         | f32.div\n 000a05: 1a                         | drop\n 000a06: 10 0a                      | call 10\n 000a08: 0b                         | end\n000a0a func[98] <f32_copysign>:\n 000a0b: 10 08                      | call 8\n 000a0d: 10 15                      | call 21\n 000a0f: 10 16                      | call 22\n 000a11: 98                         | f32.copysign\n 000a12: 1a                         | drop\n 000a13: 10 0a                      | call 10\n 000a15: 0b                         | end\n000a17 func[99] <f32_eq>:\n 000a18: 10 08                      | call 8\n 000a1a: 10 15                      | call 21\n 000a1c: 10 16                      | call 22\n 000a1e: 5b                         | f32.eq\n 000a1f: 1a                         | drop\n 000a20: 10 0a                      | call 10\n 000a22: 0b                         | end\n000a24 func[100] <f32_ne>:\n 000a25: 10 08                      | call 8\n 000a27: 10 15                      | call 21\n 000a29: 10 16                      | call 22\n 000a2b: 5c                         | f32.ne\n 000a2c: 1a                         | drop\n 000a2d: 10 0a                      | call 10\n 000a2f: 0b                         | end\n000a31 func[101] <f32_lt>:\n 000a32: 10 08                      | call 8\n 000a34: 10 15                      | call 21\n 000a36: 10 16                      | call 22\n 000a38: 5d                         | f32.lt\n 000a39: 1a                         | drop\n 000a3a: 10 0a                      | call 10\n 000a3c: 0b                         | end\n000a3e func[102] <f32_le>:\n 000a3f: 10 08                      | call 8\n 000a41: 10 15                      | call 21\n 000a43: 10 16                      | call 22\n 000a45: 5f                         | f32.le\n 000a46: 1a                         | drop\n 000a47: 10 0a                      | call 10\n 000a49: 0b                         | end\n000a4b func[103] <f32_gt>:\n 000a4c: 10 08                      | call 8\n 000a4e: 10 15                      | call 21\n 000a50: 10 16                      | call 22\n 000a52: 5e                         | f32.gt\n 000a53: 1a                         | drop\n 000a54: 10 0a                      | call 10\n 000a56: 0b                         | end\n000a58 func[104] <f32_ge>:\n 000a59: 10 08                      | call 8\n 000a5b: 10 15                      | call 21\n 000a5d: 10 16                      | call 22\n 000a5f: 60                         | f32.ge\n 000a60: 1a                         | drop\n 000a61: 10 0a                      | call 10\n 000a63: 0b                         | end\n000a65 func[105] <f32_min>:\n 000a66: 10 08                      | call 8\n 000a68: 10 15                      | call 21\n 000a6a: 10 16                      | call 22\n 000a6c: 96                         | f32.min\n 000a6d: 1a                         | drop\n 000a6e: 10 0a                      | call 10\n 000a70: 0b                         | end\n000a72 func[106] <f32_max>:\n 000a73: 10 08                      | call 8\n 000a75: 10 15                      | call 21\n 000a77: 10 16                      | call 22\n 000a79: 97                         | f32.max\n 000a7a: 1a                         | drop\n 000a7b: 10 0a                      | call 10\n 000a7d: 0b                         | end\n000a7f func[107] <f32_store>:\n 000a80: 10 08                      | call 8\n 000a82: 10 0b                      | call 11\n 000a84: 10 16                      | call 22\n 000a86: 38 02 00                   | f32.store 2 0\n 000a89: 10 0a                      | call 10\n 000a8b: 0b                         | end\n000a8d func[108] <f32_call>:\n 000a8e: 10 08                      | call 8\n 000a90: 10 15                      | call 21\n 000a92: 10 16                      | call 22\n 000a94: 10 21                      | call 33\n 000a96: 10 0a                      | call 10\n 000a98: 0b                         | end\n000a9a func[109] <f32_call_indirect>:\n 000a9b: 10 08                      | call 8\n 000a9d: 10 15                      | call 21\n 000a9f: 10 16                      | call 22\n 000aa1: 10 18                      | call 24\n 000aa3: 11 02 00                   | call_indirect 0 (type 2)\n 000aa6: 1a                         | drop\n 000aa7: 10 0a                      | call 10\n 000aa9: 0b                         | end\n000aab func[110] <f32_select>:\n 000aac: 10 08                      | call 8\n 000aae: 10 15                      | call 21\n 000ab0: 10 16                      | call 22\n 000ab2: 10 19                      | call 25\n 000ab4: 1b                         | select\n 000ab5: 1a                         | drop\n 000ab6: 10 0a                      | call 10\n 000ab8: 0b                         | end\n000aba func[111] <f64_add>:\n 000abb: 10 08                      | call 8\n 000abd: 10 1a                      | call 26\n 000abf: 10 1b                      | call 27\n 000ac1: a0                         | f64.add\n 000ac2: 1a                         | drop\n 000ac3: 10 0a                      | call 10\n 000ac5: 0b                         | end\n000ac7 func[112] <f64_sub>:\n 000ac8: 10 08                      | call 8\n 000aca: 10 1a                      | call 26\n 000acc: 10 1b                      | call 27\n 000ace: a1                         | f64.sub\n 000acf: 1a                         | drop\n 000ad0: 10 0a                      | call 10\n 000ad2: 0b                         | end\n000ad4 func[113] <f64_mul>:\n 000ad5: 10 08                      | call 8\n 000ad7: 10 1a                      | call 26\n 000ad9: 10 1b                      | call 27\n 000adb: a2                         | f64.mul\n 000adc: 1a                         | drop\n 000add: 10 0a                      | call 10\n 000adf: 0b                         | end\n000ae1 func[114] <f64_div>:\n 000ae2: 10 08                      | call 8\n 000ae4: 10 1a                      | call 26\n 000ae6: 10 1b                      | call 27\n 000ae8: a3                         | f64.div\n 000ae9: 1a                         | drop\n 000aea: 10 0a                      | call 10\n 000aec: 0b                         | end\n000aee func[115] <f64_copysign>:\n 000aef: 10 08                      | call 8\n 000af1: 10 1a                      | call 26\n 000af3: 10 1b                      | call 27\n 000af5: a6                         | f64.copysign\n 000af6: 1a                         | drop\n 000af7: 10 0a                      | call 10\n 000af9: 0b                         | end\n000afb func[116] <f64_eq>:\n 000afc: 10 08                      | call 8\n 000afe: 10 1a                      | call 26\n 000b00: 10 1b                      | call 27\n 000b02: 61                         | f64.eq\n 000b03: 1a                         | drop\n 000b04: 10 0a                      | call 10\n 000b06: 0b                         | end\n000b08 func[117] <f64_ne>:\n 000b09: 10 08                      | call 8\n 000b0b: 10 1a                      | call 26\n 000b0d: 10 1b                      | call 27\n 000b0f: 62                         | f64.ne\n 000b10: 1a                         | drop\n 000b11: 10 0a                      | call 10\n 000b13: 0b                         | end\n000b15 func[118] <f64_lt>:\n 000b16: 10 08                      | call 8\n 000b18: 10 1a                      | call 26\n 000b1a: 10 1b                      | call 27\n 000b1c: 63                         | f64.lt\n 000b1d: 1a                         | drop\n 000b1e: 10 0a                      | call 10\n 000b20: 0b                         | end\n000b22 func[119] <f64_le>:\n 000b23: 10 08                      | call 8\n 000b25: 10 1a                      | call 26\n 000b27: 10 1b                      | call 27\n 000b29: 65                         | f64.le\n 000b2a: 1a                         | drop\n 000b2b: 10 0a                      | call 10\n 000b2d: 0b                         | end\n000b2f func[120] <f64_gt>:\n 000b30: 10 08                      | call 8\n 000b32: 10 1a                      | call 26\n 000b34: 10 1b                      | call 27\n 000b36: 64                         | f64.gt\n 000b37: 1a                         | drop\n 000b38: 10 0a                      | call 10\n 000b3a: 0b                         | end\n000b3c func[121] <f64_ge>:\n 000b3d: 10 08                      | call 8\n 000b3f: 10 1a                      | call 26\n 000b41: 10 1b                      | call 27\n 000b43: 66                         | f64.ge\n 000b44: 1a                         | drop\n 000b45: 10 0a                      | call 10\n 000b47: 0b                         | end\n000b49 func[122] <f64_min>:\n 000b4a: 10 08                      | call 8\n 000b4c: 10 1a                      | call 26\n 000b4e: 10 1b                      | call 27\n 000b50: a4                         | f64.min\n 000b51: 1a                         | drop\n 000b52: 10 0a                      | call 10\n 000b54: 0b                         | end\n000b56 func[123] <f64_max>:\n 000b57: 10 08                      | call 8\n 000b59: 10 1a                      | call 26\n 000b5b: 10 1b                      | call 27\n 000b5d: a5                         | f64.max\n 000b5e: 1a                         | drop\n 000b5f: 10 0a                      | call 10\n 000b61: 0b                         | end\n000b63 func[124] <f64_store>:\n 000b64: 10 08                      | call 8\n 000b66: 10 0b                      | call 11\n 000b68: 10 1b                      | call 27\n 000b6a: 39 03 00                   | f64.store 3 0\n 000b6d: 10 0a                      | call 10\n 000b6f: 0b                         | end\n000b71 func[125] <f64_call>:\n 000b72: 10 08                      | call 8\n 000b74: 10 1a                      | call 26\n 000b76: 10 1b                      | call 27\n 000b78: 10 22                      | call 34\n 000b7a: 10 0a                      | call 10\n 000b7c: 0b                         | end\n000b7e func[126] <f64_call_indirect>:\n 000b7f: 10 08                      | call 8\n 000b81: 10 1a                      | call 26\n 000b83: 10 1b                      | call 27\n 000b85: 10 1d                      | call 29\n 000b87: 11 03 00                   | call_indirect 0 (type 3)\n 000b8a: 1a                         | drop\n 000b8b: 10 0a                      | call 10\n 000b8d: 0b                         | end\n000b8f func[127] <f64_select>:\n 000b90: 10 08                      | call 8\n 000b92: 10 1a                      | call 26\n 000b94: 10 1b                      | call 27\n 000b96: 10 1e                      | call 30\n 000b98: 1b                         | select\n 000b99: 1a                         | drop\n 000b9a: 10 0a                      | call 10\n 000b9c: 0b                         | end\n000b9e func[128] <br_if>:\n 000b9f: 02 7f                      | block i32\n 000ba1: 10 08                      |   call 8\n 000ba3: 10 0b                      |   call 11\n 000ba5: 10 0c                      |   call 12\n 000ba7: 41 00                      |   i32.const 0\n 000ba9: 71                         |   i32.and\n 000baa: 0d 00                      |   br_if 0\n 000bac: 1a                         |   drop\n 000bad: 10 0a                      |   call 10\n 000baf: 0b                         | end\n 000bb0: 0b                         | end\n000bb2 func[129] <br_table>:\n 000bb3: 02 7f                      | block i32\n 000bb5: 10 08                      |   call 8\n 000bb7: 02 7f                      |   block i32\n 000bb9: 10 0b                      |     call 11\n 000bbb: 10 0c                      |     call 12\n 000bbd: 0e 01 01 00                |     br_table 1 0\n 000bc1: 0b                         |   end\n 000bc2: 1a                         |   drop\n 000bc3: 10 0a                      |   call 10\n 000bc5: 0b                         | end\n 000bc6: 0b                         | end\n"
    }
  }
}
