{
  "bin": {
    "labels.0.wasm": "AGFzbQEAAAABCgJgAAF/YAF/AX8DExIAAAAAAQAAAAABAQAAAAAAAAAHmgESBWJsb2NrAAAFbG9vcDEAAQVsb29wMgACBWxvb3AzAAMFbG9vcDQABAVsb29wNQAFBWxvb3A2AAYCaWYABwNpZjIACAZzd2l0Y2gACQZyZXR1cm4ACgZicl9pZjAACwZicl9pZjEADAZicl9pZjIADQZicl9pZjMADgJicgAPCXNoYWRvd2luZwAQDHJlZGVmaW5pdGlvbgARCoMGEgsAAn9BAQwAQQALCyMBAX9BACEAAn8DfyAAQQFqIQAgAEEFRgRAIAAMAgsMAAsLCzQBAX9BACEAAn8DfyAAQQFqIQAgAEEFRgRADAELIABBCEYEQCAADAILIABBAWohAAwACwsLIwEBf0EAIQACfwN/IABBAWohACAAQQVGBEAgAAwCCyAACwsLIwEBf0EBIQECfwN/IAEgAWohASABIABLBEAgAQwCCwwACwsLCgADf0EBC0EBagsLAAN/QQANAEEDCwuEAQEBf0EAIQACQEEBBEAMAEGaBSEACyAAQQFqIQBBAQRADABBmgUhAAVB+AYhAAsgAEEBaiEAQQEEQAwAQZoFIQAFQfgGIQALIABBAWohAEEABEBB+AYhAAUMAEGaBSEACyAAQQFqIQBBAARAQfgGIQAFDABBmgUhAAsgAEEBaiEACyAAC4QBAQF/QQAhAAJAQQEEQAwAQZoFIQALIABBAWohAEEBBEAMAEGaBSEABUH4BiEACyAAQQFqIQBBAQRADABBmgUhAAVB+AYhAAsgAEEBaiEAQQAEQEH4BiEABQwAQZoFIQALIABBAWohAEEABEBB+AYhAAUMAEGaBSEACyAAQQFqIQALIAALLQACf0EKAn8CQAJAAkACQAJAIAAOBAQAAQIDCwtBAgwDC0EDDAMLC0EFC2wLCxgAAkACQAJAIAAOAQABDAILQQAPCwtBAgtWAQF/QQAhAAJ/AkBBAA0AIABBAXIhAEEBDQAgAEECciEACwJ/IABBBHIhACAAC0EADQAaIABBCHIhAAJ/IABBEHIhACAAC0EBDQAaIABBIHIhACAACwsTAAJ/An9BAQwAC0EBDQAaQQALCxgAAn9BAQRAAn9BAQwAC0EBDQEaC0EACwskAQF/An8Cf0EBIQAgAAsCf0ECIQAgAAsNABpBAAtBAGoaIAALIQACf0EBBEACf0EBDAALDAEFAkACf0EBDAALGgsLQQELCwwAAn9BAQwAQQJzCwsSAAJ/An9BAgsCf0EDDAALagsL",
    "labels.1.wasm": "AGFzbQEAAAABBAFgAAADAgEACg0BCwACQEEBDQCMAQsL",
    "labels.2.wasm": "AGFzbQEAAAABBAFgAAADAgEAChABDgACQEMAAAAAQQENAAsL",
    "labels.3.wasm": "AGFzbQEAAAABBAFgAAADAgEAChABDgACQEMAAAAAQQENAAsL"
  },
  "spec": {"source_filename": "/workspace/wasm-spec/test/core/labels.wast",
 "commands": [
  {"type": "module", "line": 1, "filename": "labels.0.wasm"}, 
  {"type": "assert_return", "line": 291, "action": {"type": "invoke", "field": "block", "args": []}, "expected": [{"type": "i32", "value": "1"}]}, 
  {"type": "assert_return", "line": 292, "action": {"type": "invoke", "field": "loop1", "args": []}, "expected": [{"type": "i32", "value": "5"}]}, 
  {"type": "assert_return", "line": 293, "action": {"type": "invoke", "field": "loop2", "args": []}, "expected": [{"type": "i32", "value": "8"}]}, 
  {"type": "assert_return", "line": 294, "action": {"type": "invoke", "field": "loop3", "args": []}, "expected": [{"type": "i32", "value": "1"}]}, 
  {"type": "assert_return", "line": 295, "action": {"type": "invoke", "field": "loop4", "args": [{"type": "i32", "value": "8"}]}, "expected": [{"type": "i32", "value": "16"}]}, 
  {"type": "assert_return", "line": 296, "action": {"type": "invoke", "field": "loop5", "args": []}, "expected": [{"type": "i32", "value": "2"}]}, 
  {"type": "assert_return", "line": 297, "action": {"type": "invoke", "field": "loop6", "args": []}, "expected": [{"type": "i32", "value": "3"}]}, 
  {"type": "assert_return", "line": 298, "action": {"type": "invoke", "field": "if", "args": []}, "expected": [{"type": "i32", "value": "5"}]}, 
  {"type": "assert_return", "line": 299, "action": {"type": "invoke", "field": "if2", "args": []}, "expected": [{"type": "i32", "value": "5"}]}, 
  {"type": "assert_return", "line": 300, "action": {"type": "invoke", "field": "switch", "args": [{"type": "i32", "value": "0"}]}, "expected": [{"type": "i32", "value": "50"}]}, 
  {"type": "assert_return", "line": 301, "action": {"type": "invoke", "field": "switch", "args": [{"type": "i32", "value": "1"}]}, "expected": [{"type": "i32", "value": "20"}]}, 
  {"type": "assert_return", "line": 302, "action": {"type": "invoke", "field": "switch", "args": [{"type": "i32", "value": "2"}]}, "expected": [{"type": "i32", "value": "20"}]}, 
  {"type": "assert_return", "line": 303, "action": {"type": "invoke", "field": "switch", "args": [{"type": "i32", "value": "3"}]}, "expected": [{"type": "i32", "value": "3"}]}, 
  {"type": "assert_return", "line": 304, "action": {"type": "invoke", "field": "switch", "args": [{"type": "i32", "value": "4"}]}, "expected": [{"type": "i32", "value": "50"}]}, 
  {"type": "assert_return", "line": 305, "action": {"type": "invoke", "field": "switch", "args": [{"type": "i32", "value": "5"}]}, "expected": [{"type": "i32", "value": "50"}]}, 
  {"type": "assert_return", "line": 306, "action": {"type": "invoke", "field": "return", "args": [{"type": "i32", "value": "0"}]}, "expected": [{"type": "i32", "value": "0"}]}, 
  {"type": "assert_return", "line": 307, "action": {"type": "invoke", "field": "return", "args": [{"type": "i32", "value": "1"}]}, "expected": [{"type": "i32", "value": "2"}]}, 
  {"type": "assert_return", "line": 308, "action": {"type": "invoke", "field": "return", "args": [{"type": "i32", "value": "2"}]}, "expected": [{"type": "i32", "value": "2"}]}, 
  {"type": "assert_return", "line": 309, "action": {"type": "invoke", "field": "br_if0", "args": []}, "expected": [{"type": "i32", "value": "29"}]}, 
  {"type": "assert_return", "line": 310, "action": {"type": "invoke", "field": "br_if1", "args": []}, "expected": [{"type": "i32", "value": "1"}]}, 
  {"type": "assert_return", "line": 311, "action": {"type": "invoke", "field": "br_if2", "args": []}, "expected": [{"type": "i32", "value": "1"}]}, 
  {"type": "assert_return", "line": 312, "action": {"type": "invoke", "field": "br_if3", "args": []}, "expected": [{"type": "i32", "value": "2"}]}, 
  {"type": "assert_return", "line": 313, "action": {"type": "invoke", "field": "br", "args": []}, "expected": [{"type": "i32", "value": "1"}]}, 
  {"type": "assert_return", "line": 314, "action": {"type": "invoke", "field": "shadowing", "args": []}, "expected": [{"type": "i32", "value": "1"}]}, 
  {"type": "assert_return", "line": 315, "action": {"type": "invoke", "field": "redefinition", "args": []}, "expected": [{"type": "i32", "value": "5"}]}, 
  {"type": "assert_invalid", "line": 318, "filename": "labels.1.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 322, "filename": "labels.2.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 326, "filename": "labels.3.wasm", "text": "type mismatch", "module_type": "binary"}]},
  "code": [
    "(module \n  (func (export \"block\") (result i32) (block $exit (result i32) (br $exit (i32.const 1)) (i32.const 0) ) )\n  (func (export \"loop1\") (result i32) (local $i i32) (local.set $i (i32.const 0)) (block $exit (result i32) (loop $cont (result i32) (local.set $i (i32.add (local.get $i) (i32.const 1))) (if (i32.eq (local.get $i) (i32.const 5)) (then (br $exit (local.get $i))) ) (br $cont) ) ) )\n  (func (export \"loop2\") (result i32) (local $i i32) (local.set $i (i32.const 0)) (block $exit (result i32) (loop $cont (result i32) (local.set $i (i32.add (local.get $i) (i32.const 1))) (if (i32.eq (local.get $i) (i32.const 5)) (then (br $cont)) ) (if (i32.eq (local.get $i) (i32.const 8)) (then (br $exit (local.get $i))) ) (local.set $i (i32.add (local.get $i) (i32.const 1))) (br $cont) ) ) )\n  (func (export \"loop3\") (result i32) (local $i i32) (local.set $i (i32.const 0)) (block $exit (result i32) (loop $cont (result i32) (local.set $i (i32.add (local.get $i) (i32.const 1))) (if (i32.eq (local.get $i) (i32.const 5)) (then (br $exit (local.get $i))) ) (local.get $i) ) ) )\n  (func (export \"loop4\") (param $max i32) (result i32) (local $i i32) (local.set $i (i32.const 1)) (block $exit (result i32) (loop $cont (result i32) (local.set $i (i32.add (local.get $i) (local.get $i))) (if (i32.gt_u (local.get $i) (local.get $max)) (then (br $exit (local.get $i))) ) (br $cont) ) ) )\n  (func (export \"loop5\") (result i32) (i32.add (loop $l (result i32) (i32.const 1)) (i32.const 1) ) )\n  (func (export \"loop6\") (result i32) (loop (result i32) (br_if 0 (i32.const 0)) (i32.const 3) ) )\n  (func (export \"if\") (result i32) (local $i i32) (local.set $i (i32.const 0)) (block (if $l (i32.const 1) (then (br $l) (local.set $i (i32.const 666))) ) (local.set $i (i32.add (local.get $i) (i32.const 1))) (if $l (i32.const 1) (then (br $l) (local.set $i (i32.const 666))) (else (local.set $i (i32.const 888))) ) (local.set $i (i32.add (local.get $i) (i32.const 1))) (if $l (i32.const 1) (then (br $l) (local.set $i (i32.const 666))) (else (local.set $i (i32.const 888))) ) (local.set $i (i32.add (local.get $i) (i32.const 1))) (if $l (i32.const 0) (then (local.set $i (i32.const 888))) (else (br $l) (local.set $i (i32.const 666))) ) (local.set $i (i32.add (local.get $i) (i32.const 1))) (if $l (i32.const 0) (then (local.set $i (i32.const 888))) (else (br $l) (local.set $i (i32.const 666))) ) (local.set $i (i32.add (local.get $i) (i32.const 1))) ) (local.get $i) )\n  (func (export \"if2\") (result i32) (local $i i32) (local.set $i (i32.const 0)) (block (if (i32.const 1) (then (br 0) (local.set $i (i32.const 666))) ) (local.set $i (i32.add (local.get $i) (i32.const 1))) (if (i32.const 1) (then (br 0) (local.set $i (i32.const 666))) (else (local.set $i (i32.const 888))) ) (local.set $i (i32.add (local.get $i) (i32.const 1))) (if (i32.const 1) (then (br 0) (local.set $i (i32.const 666))) (else (local.set $i (i32.const 888))) ) (local.set $i (i32.add (local.get $i) (i32.const 1))) (if (i32.const 0) (then (local.set $i (i32.const 888))) (else (br 0) (local.set $i (i32.const 666))) ) (local.set $i (i32.add (local.get $i) (i32.const 1))) (if (i32.const 0) (then (local.set $i (i32.const 888))) (else (br 0) (local.set $i (i32.const 666))) ) (local.set $i (i32.add (local.get $i) (i32.const 1))) ) (local.get $i) )\n  (func (export \"switch\") (param i32) (result i32) (block $ret (result i32) (i32.mul (i32.const 10) (block $exit (result i32) (block $0 (block $default (block $3 (block $2 (block $1 (br_table $0 $1 $2 $3 $default (local.get 0)) ) ) (br $exit (i32.const 2)) ) (br $ret (i32.const 3)) ) ) (i32.const 5) ) ) ) )\n  (func (export \"return\") (param i32) (result i32) (block $default (block $1 (block $0 (br_table $0 $1 (local.get 0)) (br $default) ) (return (i32.const 0)) ) ) (i32.const 2) )\n  (func (export \"br_if0\") (result i32) (local $i i32) (local.set $i (i32.const 0)) (block $outer (result i32) (block $inner (br_if $inner (i32.const 0)) (local.set $i (i32.or (local.get $i) (i32.const 0x1))) (br_if $inner (i32.const 1)) (local.set $i (i32.or (local.get $i) (i32.const 0x2))) ) (drop (br_if $outer (block (result i32) (local.set $i (i32.or (local.get $i) (i32.const 0x4))) (local.get $i) ) (i32.const 0) )) (local.set $i (i32.or (local.get $i) (i32.const 0x8))) (drop (br_if $outer (block (result i32) (local.set $i (i32.or (local.get $i) (i32.const 0x10))) (local.get $i) ) (i32.const 1) )) (local.set $i (i32.or (local.get $i) (i32.const 0x20))) (local.get $i) ) )\n  (func (export \"br_if1\") (result i32) (block $l0 (result i32) (drop (br_if $l0 (block $l1 (result i32) (br $l1 (i32.const 1))) (i32.const 1) ) ) (i32.const 0) ) )\n  (func (export \"br_if2\") (result i32) (block $l0 (result i32) (if (i32.const 1) (then (drop (br_if $l0 (block $l1 (result i32) (br $l1 (i32.const 1))) (i32.const 1) ) ) ) ) (i32.const 0) ) )\n  (func (export \"br_if3\") (result i32) (local $i1 i32) (drop (i32.add (block $l0 (result i32) (drop (br_if $l0 (block (result i32) (local.set $i1 (i32.const 1)) (local.get $i1)) (block (result i32) (local.set $i1 (i32.const 2)) (local.get $i1)) )) (i32.const 0) ) (i32.const 0) ) ) (local.get $i1) )\n  (func (export \"br\") (result i32) (block $l0 (result i32) (if (i32.const 1) (then (br $l0 (block $l1 (result i32) (br $l1 (i32.const 1))))) (else (block (drop (block $l1 (result i32) (br $l1 (i32.const 1)))))) ) (i32.const 1) ) )\n  (func (export \"shadowing\") (result i32) (block $l1 (result i32) (i32.xor (br $l1 (i32.const 1)) (i32.const 2))) )\n  (func (export \"redefinition\") (result i32) (block $l1 (result i32) (i32.add (block $l1 (result i32) (i32.const 2)) (block $l1 (result i32) (br $l1 (i32.const 3))) ) ) ))",
    "(assert_return (invoke \"block\") (i32.const 1))",
    "(assert_return (invoke \"loop1\") (i32.const 5))",
    "(assert_return (invoke \"loop2\") (i32.const 8))",
    "(assert_return (invoke \"loop3\") (i32.const 1))",
    "(assert_return (invoke \"loop4\" (i32.const 8)) (i32.const 16))",
    "(assert_return (invoke \"loop5\") (i32.const 2))",
    "(assert_return (invoke \"loop6\") (i32.const 3))",
    "(assert_return (invoke \"if\") (i32.const 5))",
    "(assert_return (invoke \"if2\") (i32.const 5))",
    "(assert_return (invoke \"switch\" (i32.const 0)) (i32.const 50))",
    "(assert_return (invoke \"switch\" (i32.const 1)) (i32.const 20))",
    "(assert_return (invoke \"switch\" (i32.const 2)) (i32.const 20))",
    "(assert_return (invoke \"switch\" (i32.const 3)) (i32.const 3))",
    "(assert_return (invoke \"switch\" (i32.const 4)) (i32.const 50))",
    "(assert_return (invoke \"switch\" (i32.const 5)) (i32.const 50))",
    "(assert_return (invoke \"return\" (i32.const 0)) (i32.const 0))",
    "(assert_return (invoke \"return\" (i32.const 1)) (i32.const 2))",
    "(assert_return (invoke \"return\" (i32.const 2)) (i32.const 2))",
    "(assert_return (invoke \"br_if0\") (i32.const 0x1d))",
    "(assert_return (invoke \"br_if1\") (i32.const 1))",
    "(assert_return (invoke \"br_if2\") (i32.const 1))",
    "(assert_return (invoke \"br_if3\") (i32.const 2))",
    "(assert_return (invoke \"br\") (i32.const 1))",
    "(assert_return (invoke \"shadowing\") (i32.const 1))",
    "(assert_return (invoke \"redefinition\") (i32.const 5))",
    "(assert_invalid (module (func (block $l (f32.neg (br_if $l (i32.const 1))) (nop)))) \"type mismatch\")",
    "(assert_invalid (module (func (block $l (br_if $l (f32.const 0) (i32.const 1))))) \"type mismatch\")",
    "(assert_invalid (module (func (block $l (br_if $l (f32.const 0) (i32.const 1))))) \"type mismatch\")"
  ],
  "dump": {
    "labels.0.wasm": {
      "header": "\nlabels.0.wasm:\tfile format wasm 0x1\n\nSections:\n\n     Type start=0x0000000a end=0x00000014 (size=0x0000000a) count: 2\n Function start=0x00000016 end=0x00000029 (size=0x00000013) count: 18\n   Export start=0x0000002c end=0x000000c6 (size=0x0000009a) count: 18\n     Code start=0x000000c9 end=0x000003cc (size=0x00000303) count: 18\n",
      "details": "\nlabels.0.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nType[2]:\n - type[0] () -> i32\n - type[1] (i32) -> i32\nFunction[18]:\n - func[0] sig=0 <block>\n - func[1] sig=0 <loop1>\n - func[2] sig=0 <loop2>\n - func[3] sig=0 <loop3>\n - func[4] sig=1 <loop4>\n - func[5] sig=0 <loop5>\n - func[6] sig=0 <loop6>\n - func[7] sig=0 <if>\n - func[8] sig=0 <if2>\n - func[9] sig=1 <switch>\n - func[10] sig=1 <return>\n - func[11] sig=0 <br_if0>\n - func[12] sig=0 <br_if1>\n - func[13] sig=0 <br_if2>\n - func[14] sig=0 <br_if3>\n - func[15] sig=0 <br>\n - func[16] sig=0 <shadowing>\n - func[17] sig=0 <redefinition>\nExport[18]:\n - func[0] <block> -> \"block\"\n - func[1] <loop1> -> \"loop1\"\n - func[2] <loop2> -> \"loop2\"\n - func[3] <loop3> -> \"loop3\"\n - func[4] <loop4> -> \"loop4\"\n - func[5] <loop5> -> \"loop5\"\n - func[6] <loop6> -> \"loop6\"\n - func[7] <if> -> \"if\"\n - func[8] <if2> -> \"if2\"\n - func[9] <switch> -> \"switch\"\n - func[10] <return> -> \"return\"\n - func[11] <br_if0> -> \"br_if0\"\n - func[12] <br_if1> -> \"br_if1\"\n - func[13] <br_if2> -> \"br_if2\"\n - func[14] <br_if3> -> \"br_if3\"\n - func[15] <br> -> \"br\"\n - func[16] <shadowing> -> \"shadowing\"\n - func[17] <redefinition> -> \"redefinition\"\nCode[18]:\n - func[0] size=11 <block>\n - func[1] size=35 <loop1>\n - func[2] size=52 <loop2>\n - func[3] size=35 <loop3>\n - func[4] size=35 <loop4>\n - func[5] size=10 <loop5>\n - func[6] size=11 <loop6>\n - func[7] size=132 <if>\n - func[8] size=132 <if2>\n - func[9] size=45 <switch>\n - func[10] size=24 <return>\n - func[11] size=86 <br_if0>\n - func[12] size=19 <br_if1>\n - func[13] size=24 <br_if2>\n - func[14] size=36 <br_if3>\n - func[15] size=33 <br>\n - func[16] size=12 <shadowing>\n - func[17] size=18 <redefinition>\n",
      "disassemble": "\nlabels.0.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n0000cb func[0] <block>:\n 0000cc: 02 7f                      | block i32\n 0000ce: 41 01                      |   i32.const 1\n 0000d0: 0c 00                      |   br 0\n 0000d2: 41 00                      |   i32.const 0\n 0000d4: 0b                         | end\n 0000d5: 0b                         | end\n0000d7 func[1] <loop1>:\n 0000d8: 01 7f                      | local[0] type=i32\n 0000da: 41 00                      | i32.const 0\n 0000dc: 21 00                      | local.set 0\n 0000de: 02 7f                      | block i32\n 0000e0: 03 7f                      |   loop i32\n 0000e2: 20 00                      |     local.get 0\n 0000e4: 41 01                      |     i32.const 1\n 0000e6: 6a                         |     i32.add\n 0000e7: 21 00                      |     local.set 0\n 0000e9: 20 00                      |     local.get 0\n 0000eb: 41 05                      |     i32.const 5\n 0000ed: 46                         |     i32.eq\n 0000ee: 04 40                      |     if\n 0000f0: 20 00                      |       local.get 0\n 0000f2: 0c 02                      |       br 2\n 0000f4: 0b                         |     end\n 0000f5: 0c 00                      |     br 0\n 0000f7: 0b                         |   end\n 0000f8: 0b                         | end\n 0000f9: 0b                         | end\n0000fb func[2] <loop2>:\n 0000fc: 01 7f                      | local[0] type=i32\n 0000fe: 41 00                      | i32.const 0\n 000100: 21 00                      | local.set 0\n 000102: 02 7f                      | block i32\n 000104: 03 7f                      |   loop i32\n 000106: 20 00                      |     local.get 0\n 000108: 41 01                      |     i32.const 1\n 00010a: 6a                         |     i32.add\n 00010b: 21 00                      |     local.set 0\n 00010d: 20 00                      |     local.get 0\n 00010f: 41 05                      |     i32.const 5\n 000111: 46                         |     i32.eq\n 000112: 04 40                      |     if\n 000114: 0c 01                      |       br 1\n 000116: 0b                         |     end\n 000117: 20 00                      |     local.get 0\n 000119: 41 08                      |     i32.const 8\n 00011b: 46                         |     i32.eq\n 00011c: 04 40                      |     if\n 00011e: 20 00                      |       local.get 0\n 000120: 0c 02                      |       br 2\n 000122: 0b                         |     end\n 000123: 20 00                      |     local.get 0\n 000125: 41 01                      |     i32.const 1\n 000127: 6a                         |     i32.add\n 000128: 21 00                      |     local.set 0\n 00012a: 0c 00                      |     br 0\n 00012c: 0b                         |   end\n 00012d: 0b                         | end\n 00012e: 0b                         | end\n000130 func[3] <loop3>:\n 000131: 01 7f                      | local[0] type=i32\n 000133: 41 00                      | i32.const 0\n 000135: 21 00                      | local.set 0\n 000137: 02 7f                      | block i32\n 000139: 03 7f                      |   loop i32\n 00013b: 20 00                      |     local.get 0\n 00013d: 41 01                      |     i32.const 1\n 00013f: 6a                         |     i32.add\n 000140: 21 00                      |     local.set 0\n 000142: 20 00                      |     local.get 0\n 000144: 41 05                      |     i32.const 5\n 000146: 46                         |     i32.eq\n 000147: 04 40                      |     if\n 000149: 20 00                      |       local.get 0\n 00014b: 0c 02                      |       br 2\n 00014d: 0b                         |     end\n 00014e: 20 00                      |     local.get 0\n 000150: 0b                         |   end\n 000151: 0b                         | end\n 000152: 0b                         | end\n000154 func[4] <loop4>:\n 000155: 01 7f                      | local[1] type=i32\n 000157: 41 01                      | i32.const 1\n 000159: 21 01                      | local.set 1\n 00015b: 02 7f                      | block i32\n 00015d: 03 7f                      |   loop i32\n 00015f: 20 01                      |     local.get 1\n 000161: 20 01                      |     local.get 1\n 000163: 6a                         |     i32.add\n 000164: 21 01                      |     local.set 1\n 000166: 20 01                      |     local.get 1\n 000168: 20 00                      |     local.get 0\n 00016a: 4b                         |     i32.gt_u\n 00016b: 04 40                      |     if\n 00016d: 20 01                      |       local.get 1\n 00016f: 0c 02                      |       br 2\n 000171: 0b                         |     end\n 000172: 0c 00                      |     br 0\n 000174: 0b                         |   end\n 000175: 0b                         | end\n 000176: 0b                         | end\n000178 func[5] <loop5>:\n 000179: 03 7f                      | loop i32\n 00017b: 41 01                      |   i32.const 1\n 00017d: 0b                         | end\n 00017e: 41 01                      | i32.const 1\n 000180: 6a                         | i32.add\n 000181: 0b                         | end\n000183 func[6] <loop6>:\n 000184: 03 7f                      | loop i32\n 000186: 41 00                      |   i32.const 0\n 000188: 0d 00                      |   br_if 0\n 00018a: 41 03                      |   i32.const 3\n 00018c: 0b                         | end\n 00018d: 0b                         | end\n000190 func[7] <if>:\n 000191: 01 7f                      | local[0] type=i32\n 000193: 41 00                      | i32.const 0\n 000195: 21 00                      | local.set 0\n 000197: 02 40                      | block\n 000199: 41 01                      |   i32.const 1\n 00019b: 04 40                      |   if\n 00019d: 0c 00                      |     br 0\n 00019f: 41 9a 05                   |     i32.const 666\n 0001a2: 21 00                      |     local.set 0\n 0001a4: 0b                         |   end\n 0001a5: 20 00                      |   local.get 0\n 0001a7: 41 01                      |   i32.const 1\n 0001a9: 6a                         |   i32.add\n 0001aa: 21 00                      |   local.set 0\n 0001ac: 41 01                      |   i32.const 1\n 0001ae: 04 40                      |   if\n 0001b0: 0c 00                      |     br 0\n 0001b2: 41 9a 05                   |     i32.const 666\n 0001b5: 21 00                      |     local.set 0\n 0001b7: 05                         |   else\n 0001b8: 41 f8 06                   |     i32.const 888\n 0001bb: 21 00                      |     local.set 0\n 0001bd: 0b                         |   end\n 0001be: 20 00                      |   local.get 0\n 0001c0: 41 01                      |   i32.const 1\n 0001c2: 6a                         |   i32.add\n 0001c3: 21 00                      |   local.set 0\n 0001c5: 41 01                      |   i32.const 1\n 0001c7: 04 40                      |   if\n 0001c9: 0c 00                      |     br 0\n 0001cb: 41 9a 05                   |     i32.const 666\n 0001ce: 21 00                      |     local.set 0\n 0001d0: 05                         |   else\n 0001d1: 41 f8 06                   |     i32.const 888\n 0001d4: 21 00                      |     local.set 0\n 0001d6: 0b                         |   end\n 0001d7: 20 00                      |   local.get 0\n 0001d9: 41 01                      |   i32.const 1\n 0001db: 6a                         |   i32.add\n 0001dc: 21 00                      |   local.set 0\n 0001de: 41 00                      |   i32.const 0\n 0001e0: 04 40                      |   if\n 0001e2: 41 f8 06                   |     i32.const 888\n 0001e5: 21 00                      |     local.set 0\n 0001e7: 05                         |   else\n 0001e8: 0c 00                      |     br 0\n 0001ea: 41 9a 05                   |     i32.const 666\n 0001ed: 21 00                      |     local.set 0\n 0001ef: 0b                         |   end\n 0001f0: 20 00                      |   local.get 0\n 0001f2: 41 01                      |   i32.const 1\n 0001f4: 6a                         |   i32.add\n 0001f5: 21 00                      |   local.set 0\n 0001f7: 41 00                      |   i32.const 0\n 0001f9: 04 40                      |   if\n 0001fb: 41 f8 06                   |     i32.const 888\n 0001fe: 21 00                      |     local.set 0\n 000200: 05                         |   else\n 000201: 0c 00                      |     br 0\n 000203: 41 9a 05                   |     i32.const 666\n 000206: 21 00                      |     local.set 0\n 000208: 0b                         |   end\n 000209: 20 00                      |   local.get 0\n 00020b: 41 01                      |   i32.const 1\n 00020d: 6a                         |   i32.add\n 00020e: 21 00                      |   local.set 0\n 000210: 0b                         | end\n 000211: 20 00                      | local.get 0\n 000213: 0b                         | end\n000216 func[8] <if2>:\n 000217: 01 7f                      | local[0] type=i32\n 000219: 41 00                      | i32.const 0\n 00021b: 21 00                      | local.set 0\n 00021d: 02 40                      | block\n 00021f: 41 01                      |   i32.const 1\n 000221: 04 40                      |   if\n 000223: 0c 00                      |     br 0\n 000225: 41 9a 05                   |     i32.const 666\n 000228: 21 00                      |     local.set 0\n 00022a: 0b                         |   end\n 00022b: 20 00                      |   local.get 0\n 00022d: 41 01                      |   i32.const 1\n 00022f: 6a                         |   i32.add\n 000230: 21 00                      |   local.set 0\n 000232: 41 01                      |   i32.const 1\n 000234: 04 40                      |   if\n 000236: 0c 00                      |     br 0\n 000238: 41 9a 05                   |     i32.const 666\n 00023b: 21 00                      |     local.set 0\n 00023d: 05                         |   else\n 00023e: 41 f8 06                   |     i32.const 888\n 000241: 21 00                      |     local.set 0\n 000243: 0b                         |   end\n 000244: 20 00                      |   local.get 0\n 000246: 41 01                      |   i32.const 1\n 000248: 6a                         |   i32.add\n 000249: 21 00                      |   local.set 0\n 00024b: 41 01                      |   i32.const 1\n 00024d: 04 40                      |   if\n 00024f: 0c 00                      |     br 0\n 000251: 41 9a 05                   |     i32.const 666\n 000254: 21 00                      |     local.set 0\n 000256: 05                         |   else\n 000257: 41 f8 06                   |     i32.const 888\n 00025a: 21 00                      |     local.set 0\n 00025c: 0b                         |   end\n 00025d: 20 00                      |   local.get 0\n 00025f: 41 01                      |   i32.const 1\n 000261: 6a                         |   i32.add\n 000262: 21 00                      |   local.set 0\n 000264: 41 00                      |   i32.const 0\n 000266: 04 40                      |   if\n 000268: 41 f8 06                   |     i32.const 888\n 00026b: 21 00                      |     local.set 0\n 00026d: 05                         |   else\n 00026e: 0c 00                      |     br 0\n 000270: 41 9a 05                   |     i32.const 666\n 000273: 21 00                      |     local.set 0\n 000275: 0b                         |   end\n 000276: 20 00                      |   local.get 0\n 000278: 41 01                      |   i32.const 1\n 00027a: 6a                         |   i32.add\n 00027b: 21 00                      |   local.set 0\n 00027d: 41 00                      |   i32.const 0\n 00027f: 04 40                      |   if\n 000281: 41 f8 06                   |     i32.const 888\n 000284: 21 00                      |     local.set 0\n 000286: 05                         |   else\n 000287: 0c 00                      |     br 0\n 000289: 41 9a 05                   |     i32.const 666\n 00028c: 21 00                      |     local.set 0\n 00028e: 0b                         |   end\n 00028f: 20 00                      |   local.get 0\n 000291: 41 01                      |   i32.const 1\n 000293: 6a                         |   i32.add\n 000294: 21 00                      |   local.set 0\n 000296: 0b                         | end\n 000297: 20 00                      | local.get 0\n 000299: 0b                         | end\n00029b func[9] <switch>:\n 00029c: 02 7f                      | block i32\n 00029e: 41 0a                      |   i32.const 10\n 0002a0: 02 7f                      |   block i32\n 0002a2: 02 40                      |     block\n 0002a4: 02 40                      |       block\n 0002a6: 02 40                      |         block\n 0002a8: 02 40                      |           block\n 0002aa: 02 40                      |             block\n 0002ac: 20 00                      |               local.get 0\n 0002ae: 0e 04 04 00 01 02 03       |               br_table 4 0 1 2 3\n 0002b5: 0b                         |             end\n 0002b6: 0b                         |           end\n 0002b7: 41 02                      |           i32.const 2\n 0002b9: 0c 03                      |           br 3\n 0002bb: 0b                         |         end\n 0002bc: 41 03                      |         i32.const 3\n 0002be: 0c 03                      |         br 3\n 0002c0: 0b                         |       end\n 0002c1: 0b                         |     end\n 0002c2: 41 05                      |     i32.const 5\n 0002c4: 0b                         |   end\n 0002c5: 6c                         |   i32.mul\n 0002c6: 0b                         | end\n 0002c7: 0b                         | end\n0002c9 func[10] <return>:\n 0002ca: 02 40                      | block\n 0002cc: 02 40                      |   block\n 0002ce: 02 40                      |     block\n 0002d0: 20 00                      |       local.get 0\n 0002d2: 0e 01 00 01                |       br_table 0 1\n 0002d6: 0c 02                      |       br 2\n 0002d8: 0b                         |     end\n 0002d9: 41 00                      |     i32.const 0\n 0002db: 0f                         |     return\n 0002dc: 0b                         |   end\n 0002dd: 0b                         | end\n 0002de: 41 02                      | i32.const 2\n 0002e0: 0b                         | end\n0002e2 func[11] <br_if0>:\n 0002e3: 01 7f                      | local[0] type=i32\n 0002e5: 41 00                      | i32.const 0\n 0002e7: 21 00                      | local.set 0\n 0002e9: 02 7f                      | block i32\n 0002eb: 02 40                      |   block\n 0002ed: 41 00                      |     i32.const 0\n 0002ef: 0d 00                      |     br_if 0\n 0002f1: 20 00                      |     local.get 0\n 0002f3: 41 01                      |     i32.const 1\n 0002f5: 72                         |     i32.or\n 0002f6: 21 00                      |     local.set 0\n 0002f8: 41 01                      |     i32.const 1\n 0002fa: 0d 00                      |     br_if 0\n 0002fc: 20 00                      |     local.get 0\n 0002fe: 41 02                      |     i32.const 2\n 000300: 72                         |     i32.or\n 000301: 21 00                      |     local.set 0\n 000303: 0b                         |   end\n 000304: 02 7f                      |   block i32\n 000306: 20 00                      |     local.get 0\n 000308: 41 04                      |     i32.const 4\n 00030a: 72                         |     i32.or\n 00030b: 21 00                      |     local.set 0\n 00030d: 20 00                      |     local.get 0\n 00030f: 0b                         |   end\n 000310: 41 00                      |   i32.const 0\n 000312: 0d 00                      |   br_if 0\n 000314: 1a                         |   drop\n 000315: 20 00                      |   local.get 0\n 000317: 41 08                      |   i32.const 8\n 000319: 72                         |   i32.or\n 00031a: 21 00                      |   local.set 0\n 00031c: 02 7f                      |   block i32\n 00031e: 20 00                      |     local.get 0\n 000320: 41 10                      |     i32.const 16\n 000322: 72                         |     i32.or\n 000323: 21 00                      |     local.set 0\n 000325: 20 00                      |     local.get 0\n 000327: 0b                         |   end\n 000328: 41 01                      |   i32.const 1\n 00032a: 0d 00                      |   br_if 0\n 00032c: 1a                         |   drop\n 00032d: 20 00                      |   local.get 0\n 00032f: 41 20                      |   i32.const 32\n 000331: 72                         |   i32.or\n 000332: 21 00                      |   local.set 0\n 000334: 20 00                      |   local.get 0\n 000336: 0b                         | end\n 000337: 0b                         | end\n000339 func[12] <br_if1>:\n 00033a: 02 7f                      | block i32\n 00033c: 02 7f                      |   block i32\n 00033e: 41 01                      |     i32.const 1\n 000340: 0c 00                      |     br 0\n 000342: 0b                         |   end\n 000343: 41 01                      |   i32.const 1\n 000345: 0d 00                      |   br_if 0\n 000347: 1a                         |   drop\n 000348: 41 00                      |   i32.const 0\n 00034a: 0b                         | end\n 00034b: 0b                         | end\n00034d func[13] <br_if2>:\n 00034e: 02 7f                      | block i32\n 000350: 41 01                      |   i32.const 1\n 000352: 04 40                      |   if\n 000354: 02 7f                      |     block i32\n 000356: 41 01                      |       i32.const 1\n 000358: 0c 00                      |       br 0\n 00035a: 0b                         |     end\n 00035b: 41 01                      |     i32.const 1\n 00035d: 0d 01                      |     br_if 1\n 00035f: 1a                         |     drop\n 000360: 0b                         |   end\n 000361: 41 00                      |   i32.const 0\n 000363: 0b                         | end\n 000364: 0b                         | end\n000366 func[14] <br_if3>:\n 000367: 01 7f                      | local[0] type=i32\n 000369: 02 7f                      | block i32\n 00036b: 02 7f                      |   block i32\n 00036d: 41 01                      |     i32.const 1\n 00036f: 21 00                      |     local.set 0\n 000371: 20 00                      |     local.get 0\n 000373: 0b                         |   end\n 000374: 02 7f                      |   block i32\n 000376: 41 02                      |     i32.const 2\n 000378: 21 00                      |     local.set 0\n 00037a: 20 00                      |     local.get 0\n 00037c: 0b                         |   end\n 00037d: 0d 00                      |   br_if 0\n 00037f: 1a                         |   drop\n 000380: 41 00                      |   i32.const 0\n 000382: 0b                         | end\n 000383: 41 00                      | i32.const 0\n 000385: 6a                         | i32.add\n 000386: 1a                         | drop\n 000387: 20 00                      | local.get 0\n 000389: 0b                         | end\n00038b func[15] <br>:\n 00038c: 02 7f                      | block i32\n 00038e: 41 01                      |   i32.const 1\n 000390: 04 40                      |   if\n 000392: 02 7f                      |     block i32\n 000394: 41 01                      |       i32.const 1\n 000396: 0c 00                      |       br 0\n 000398: 0b                         |     end\n 000399: 0c 01                      |     br 1\n 00039b: 05                         |   else\n 00039c: 02 40                      |     block\n 00039e: 02 7f                      |       block i32\n 0003a0: 41 01                      |         i32.const 1\n 0003a2: 0c 00                      |         br 0\n 0003a4: 0b                         |       end\n 0003a5: 1a                         |       drop\n 0003a6: 0b                         |     end\n 0003a7: 0b                         |   end\n 0003a8: 41 01                      |   i32.const 1\n 0003aa: 0b                         | end\n 0003ab: 0b                         | end\n0003ad func[16] <shadowing>:\n 0003ae: 02 7f                      | block i32\n 0003b0: 41 01                      |   i32.const 1\n 0003b2: 0c 00                      |   br 0\n 0003b4: 41 02                      |   i32.const 2\n 0003b6: 73                         |   i32.xor\n 0003b7: 0b                         | end\n 0003b8: 0b                         | end\n0003ba func[17] <redefinition>:\n 0003bb: 02 7f                      | block i32\n 0003bd: 02 7f                      |   block i32\n 0003bf: 41 02                      |     i32.const 2\n 0003c1: 0b                         |   end\n 0003c2: 02 7f                      |   block i32\n 0003c4: 41 03                      |     i32.const 3\n 0003c6: 0c 00                      |     br 0\n 0003c8: 0b                         |   end\n 0003c9: 6a                         |   i32.add\n 0003ca: 0b                         | end\n 0003cb: 0b                         | end\n"
    }
  }
}
