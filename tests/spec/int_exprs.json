{
  "bin": {
    "int_exprs.0.wasm": "AGFzbQEAAAABDQJgAn9/AX9gAn5+AX8DBQQAAAEBB20EGGkzMi5ub19mb2xkX2NtcF9zX29mZnNldAAAGGkzMi5ub19mb2xkX2NtcF91X29mZnNldAABGGk2NC5ub19mb2xkX2NtcF9zX29mZnNldAACGGk2NC5ub19mb2xkX2NtcF91X29mZnNldAADCjkEDQAgAEEBaiABQQFqSAsNACAAQQFqIAFBAWpJCw0AIABCAXwgAUIBfFMLDQAgAEIBfCABQgF8VAs=",
    "int_exprs.1.wasm": "AGFzbQEAAAABBgFgAX4BfgMCAQAHHQEZaTY0Lm5vX2ZvbGRfd3JhcF9leHRlbmRfcwAACggBBgAgAKesCw==",
    "int_exprs.10.wasm": "AGFzbQEAAAABCwJgAX8Bf2ABfgF+AwMCAAEHLQITaTMyLm5vX2ZvbGRfcmVtX3NfMgAAE2k2NC5ub19mb2xkX3JlbV9zXzIAAQoRAgcAIABBAm8LBwAgAEICgQs=",
    "int_exprs.11.wasm": "AGFzbQEAAAABCwJgAX8Bf2ABfgF+AwUEAAABAQc5BAtpMzIuZGl2X3NfMAAAC2kzMi5kaXZfdV8wAAELaTY0LmRpdl9zXzAAAgtpNjQuZGl2X3VfMAADCiEEBwAgAEEAbQsHACAAQQBuCwcAIABCAH8LBwAgAEIAgAs=",
    "int_exprs.12.wasm": "AGFzbQEAAAABCwJgAX8Bf2ABfgF+AwUEAAABAQc5BAtpMzIuZGl2X3NfMwAAC2kzMi5kaXZfdV8zAAELaTY0LmRpdl9zXzMAAgtpNjQuZGl2X3VfMwADCiEEBwAgAEEDbQsHACAAQQNuCwcAIABCA38LBwAgAEIDgAs=",
    "int_exprs.13.wasm": "AGFzbQEAAAABCwJgAX8Bf2ABfgF+AwUEAAABAQc5BAtpMzIuZGl2X3NfNQAAC2kzMi5kaXZfdV81AAELaTY0LmRpdl9zXzUAAgtpNjQuZGl2X3VfNQADCiEEBwAgAEEFbQsHACAAQQVuCwcAIABCBX8LBwAgAEIFgAs=",
    "int_exprs.14.wasm": "AGFzbQEAAAABCwJgAX8Bf2ABfgF+AwUEAAABAQc5BAtpMzIuZGl2X3NfNwAAC2kzMi5kaXZfdV83AAELaTY0LmRpdl9zXzcAAgtpNjQuZGl2X3VfNwADCiEEBwAgAEEHbQsHACAAQQduCwcAIABCB38LBwAgAEIHgAs=",
    "int_exprs.15.wasm": "AGFzbQEAAAABCwJgAX8Bf2ABfgF+AwUEAAABAQc5BAtpMzIucmVtX3NfMwAAC2kzMi5yZW1fdV8zAAELaTY0LnJlbV9zXzMAAgtpNjQucmVtX3VfMwADCiEEBwAgAEEDbwsHACAAQQNwCwcAIABCA4ELBwAgAEIDggs=",
    "int_exprs.16.wasm": "AGFzbQEAAAABCwJgAX8Bf2ABfgF+AwUEAAABAQc5BAtpMzIucmVtX3NfNQAAC2kzMi5yZW1fdV81AAELaTY0LnJlbV9zXzUAAgtpNjQucmVtX3VfNQADCiEEBwAgAEEFbwsHACAAQQVwCwcAIABCBYELBwAgAEIFggs=",
    "int_exprs.17.wasm": "AGFzbQEAAAABCwJgAX8Bf2ABfgF+AwUEAAABAQc5BAtpMzIucmVtX3NfNwAAC2kzMi5yZW1fdV83AAELaTY0LnJlbV9zXzcAAgtpNjQucmVtX3VfNwADCiEEBwAgAEEHbwsHACAAQQdwCwcAIABCB4ELBwAgAEIHggs=",
    "int_exprs.18.wasm": "AGFzbQEAAAABCwJgAX8Bf2ABfgF+AwMCAAEHLwIUaTMyLm5vX2ZvbGRfZGl2X25lZzEAABRpNjQubm9fZm9sZF9kaXZfbmVnMQABChECBwAgAEF/bQsHACAAQn9/Cw==",
    "int_exprs.2.wasm": "AGFzbQEAAAABBgFgAX4BfgMCAQAHHQEZaTY0Lm5vX2ZvbGRfd3JhcF9leHRlbmRfdQAACggBBgAgAKetCw==",
    "int_exprs.3.wasm": "AGFzbQEAAAABCwJgAX8Bf2ABfgF+AwUEAAABAQdhBBVpMzIubm9fZm9sZF9zaGxfc2hyX3MAABVpMzIubm9fZm9sZF9zaGxfc2hyX3UAARVpNjQubm9fZm9sZF9zaGxfc2hyX3MAAhVpNjQubm9fZm9sZF9zaGxfc2hyX3UAAwotBAoAIABBAXRBAXULCgAgAEEBdEEBdgsKACAAQgGGQgGHCwoAIABCAYZCAYgL",
    "int_exprs.4.wasm": "AGFzbQEAAAABCwJgAX8Bf2ABfgF+AwUEAAABAQdhBBVpMzIubm9fZm9sZF9zaHJfc19zaGwAABVpMzIubm9fZm9sZF9zaHJfdV9zaGwAARVpNjQubm9fZm9sZF9zaHJfc19zaGwAAhVpNjQubm9fZm9sZF9zaHJfdV9zaGwAAwotBAoAIABBAXVBAXQLCgAgAEEBdkEBdAsKACAAQgGHQgGGCwoAIABCAYhCAYYL",
    "int_exprs.5.wasm": "AGFzbQEAAAABCwJgAX8Bf2ABfgF+AwUEAAABAQdhBBVpMzIubm9fZm9sZF9kaXZfc19tdWwAABVpMzIubm9fZm9sZF9kaXZfdV9tdWwAARVpNjQubm9fZm9sZF9kaXZfc19tdWwAAhVpNjQubm9fZm9sZF9kaXZfdV9tdWwAAwotBAoAIABBBm1BBmwLCgAgAEEGbkEGbAsKACAAQgZ/QgZ+CwoAIABCBoBCBn4L",
    "int_exprs.6.wasm": "AGFzbQEAAAABCwJgAX8Bf2ABfgF+AwUEAAABAQdlBBZpMzIubm9fZm9sZF9kaXZfc19zZWxmAAAWaTMyLm5vX2ZvbGRfZGl2X3Vfc2VsZgABFmk2NC5ub19mb2xkX2Rpdl9zX3NlbGYAAhZpNjQubm9fZm9sZF9kaXZfdV9zZWxmAAMKIQQHACAAIABtCwcAIAAgAG4LBwAgACAAfwsHACAAIACACw==",
    "int_exprs.7.wasm": "AGFzbQEAAAABCwJgAX8Bf2ABfgF+AwUEAAABAQdlBBZpMzIubm9fZm9sZF9yZW1fc19zZWxmAAAWaTMyLm5vX2ZvbGRfcmVtX3Vfc2VsZgABFmk2NC5ub19mb2xkX3JlbV9zX3NlbGYAAhZpNjQubm9fZm9sZF9yZW1fdV9zZWxmAAMKIQQHACAAIABvCwcAIAAgAHALBwAgACAAgQsHACAAIACCCw==",
    "int_exprs.8.wasm": "AGFzbQEAAAABCwJgAX8Bf2ABfgF+AwUEAAABAQdhBBVpMzIubm9fZm9sZF9tdWxfZGl2X3MAABVpMzIubm9fZm9sZF9tdWxfZGl2X3UAARVpNjQubm9fZm9sZF9tdWxfZGl2X3MAAhVpNjQubm9fZm9sZF9tdWxfZGl2X3UAAwotBAoAIABBBmxBBm0LCgAgAEEGbEEGbgsKACAAQgZ+QgZ/CwoAIABCBn5CBoAL",
    "int_exprs.9.wasm": "AGFzbQEAAAABCwJgAX8Bf2ABfgF+AwMCAAEHLQITaTMyLm5vX2ZvbGRfZGl2X3NfMgAAE2k2NC5ub19mb2xkX2Rpdl9zXzIAAQoRAgcAIABBAm0LBwAgAEICfws="
  },
  "spec": {"source_filename": "/workspace/wasm-spec/test/core/int_exprs.wast",
 "commands": [
  {"type": "module", "line": 6, "filename": "int_exprs.0.wasm"}, 
  {"type": "assert_return", "line": 18, "action": {"type": "invoke", "field": "i32.no_fold_cmp_s_offset", "args": [{"type": "i32", "value": "2147483647"}, {"type": "i32", "value": "0"}]}, "expected": [{"type": "i32", "value": "1"}]}, 
  {"type": "assert_return", "line": 19, "action": {"type": "invoke", "field": "i32.no_fold_cmp_u_offset", "args": [{"type": "i32", "value": "4294967295"}, {"type": "i32", "value": "0"}]}, "expected": [{"type": "i32", "value": "1"}]}, 
  {"type": "assert_return", "line": 20, "action": {"type": "invoke", "field": "i64.no_fold_cmp_s_offset", "args": [{"type": "i64", "value": "9223372036854775807"}, {"type": "i64", "value": "0"}]}, "expected": [{"type": "i32", "value": "1"}]}, 
  {"type": "assert_return", "line": 21, "action": {"type": "invoke", "field": "i64.no_fold_cmp_u_offset", "args": [{"type": "i64", "value": "18446744073709551615"}, {"type": "i64", "value": "0"}]}, "expected": [{"type": "i32", "value": "1"}]}, 
  {"type": "module", "line": 25, "filename": "int_exprs.1.wasm"}, 
  {"type": "assert_return", "line": 30, "action": {"type": "invoke", "field": "i64.no_fold_wrap_extend_s", "args": [{"type": "i64", "value": "4538991236898928"}]}, "expected": [{"type": "i64", "value": "1079009392"}]}, 
  {"type": "assert_return", "line": 31, "action": {"type": "invoke", "field": "i64.no_fold_wrap_extend_s", "args": [{"type": "i64", "value": "45230338458316960"}]}, "expected": [{"type": "i64", "value": "18446744072918986912"}]}, 
  {"type": "module", "line": 35, "filename": "int_exprs.2.wasm"}, 
  {"type": "assert_return", "line": 40, "action": {"type": "invoke", "field": "i64.no_fold_wrap_extend_u", "args": [{"type": "i64", "value": "4538991236898928"}]}, "expected": [{"type": "i64", "value": "1079009392"}]}, 
  {"type": "module", "line": 44, "filename": "int_exprs.3.wasm"}, 
  {"type": "assert_return", "line": 56, "action": {"type": "invoke", "field": "i32.no_fold_shl_shr_s", "args": [{"type": "i32", "value": "2147483648"}]}, "expected": [{"type": "i32", "value": "0"}]}, 
  {"type": "assert_return", "line": 57, "action": {"type": "invoke", "field": "i32.no_fold_shl_shr_u", "args": [{"type": "i32", "value": "2147483648"}]}, "expected": [{"type": "i32", "value": "0"}]}, 
  {"type": "assert_return", "line": 58, "action": {"type": "invoke", "field": "i64.no_fold_shl_shr_s", "args": [{"type": "i64", "value": "9223372036854775808"}]}, "expected": [{"type": "i64", "value": "0"}]}, 
  {"type": "assert_return", "line": 59, "action": {"type": "invoke", "field": "i64.no_fold_shl_shr_u", "args": [{"type": "i64", "value": "9223372036854775808"}]}, "expected": [{"type": "i64", "value": "0"}]}, 
  {"type": "module", "line": 63, "filename": "int_exprs.4.wasm"}, 
  {"type": "assert_return", "line": 75, "action": {"type": "invoke", "field": "i32.no_fold_shr_s_shl", "args": [{"type": "i32", "value": "1"}]}, "expected": [{"type": "i32", "value": "0"}]}, 
  {"type": "assert_return", "line": 76, "action": {"type": "invoke", "field": "i32.no_fold_shr_u_shl", "args": [{"type": "i32", "value": "1"}]}, "expected": [{"type": "i32", "value": "0"}]}, 
  {"type": "assert_return", "line": 77, "action": {"type": "invoke", "field": "i64.no_fold_shr_s_shl", "args": [{"type": "i64", "value": "1"}]}, "expected": [{"type": "i64", "value": "0"}]}, 
  {"type": "assert_return", "line": 78, "action": {"type": "invoke", "field": "i64.no_fold_shr_u_shl", "args": [{"type": "i64", "value": "1"}]}, "expected": [{"type": "i64", "value": "0"}]}, 
  {"type": "module", "line": 82, "filename": "int_exprs.5.wasm"}, 
  {"type": "assert_return", "line": 94, "action": {"type": "invoke", "field": "i32.no_fold_div_s_mul", "args": [{"type": "i32", "value": "1"}]}, "expected": [{"type": "i32", "value": "0"}]}, 
  {"type": "assert_return", "line": 95, "action": {"type": "invoke", "field": "i32.no_fold_div_u_mul", "args": [{"type": "i32", "value": "1"}]}, "expected": [{"type": "i32", "value": "0"}]}, 
  {"type": "assert_return", "line": 96, "action": {"type": "invoke", "field": "i64.no_fold_div_s_mul", "args": [{"type": "i64", "value": "1"}]}, "expected": [{"type": "i64", "value": "0"}]}, 
  {"type": "assert_return", "line": 97, "action": {"type": "invoke", "field": "i64.no_fold_div_u_mul", "args": [{"type": "i64", "value": "1"}]}, "expected": [{"type": "i64", "value": "0"}]}, 
  {"type": "module", "line": 101, "filename": "int_exprs.6.wasm"}, 
  {"type": "assert_trap", "line": 113, "action": {"type": "invoke", "field": "i32.no_fold_div_s_self", "args": [{"type": "i32", "value": "0"}]}, "text": "integer divide by zero", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 114, "action": {"type": "invoke", "field": "i32.no_fold_div_u_self", "args": [{"type": "i32", "value": "0"}]}, "text": "integer divide by zero", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 115, "action": {"type": "invoke", "field": "i64.no_fold_div_s_self", "args": [{"type": "i64", "value": "0"}]}, "text": "integer divide by zero", "expected": [{"type": "i64"}]}, 
  {"type": "assert_trap", "line": 116, "action": {"type": "invoke", "field": "i64.no_fold_div_u_self", "args": [{"type": "i64", "value": "0"}]}, "text": "integer divide by zero", "expected": [{"type": "i64"}]}, 
  {"type": "module", "line": 120, "filename": "int_exprs.7.wasm"}, 
  {"type": "assert_trap", "line": 132, "action": {"type": "invoke", "field": "i32.no_fold_rem_s_self", "args": [{"type": "i32", "value": "0"}]}, "text": "integer divide by zero", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 133, "action": {"type": "invoke", "field": "i32.no_fold_rem_u_self", "args": [{"type": "i32", "value": "0"}]}, "text": "integer divide by zero", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 134, "action": {"type": "invoke", "field": "i64.no_fold_rem_s_self", "args": [{"type": "i64", "value": "0"}]}, "text": "integer divide by zero", "expected": [{"type": "i64"}]}, 
  {"type": "assert_trap", "line": 135, "action": {"type": "invoke", "field": "i64.no_fold_rem_u_self", "args": [{"type": "i64", "value": "0"}]}, "text": "integer divide by zero", "expected": [{"type": "i64"}]}, 
  {"type": "module", "line": 139, "filename": "int_exprs.8.wasm"}, 
  {"type": "assert_return", "line": 151, "action": {"type": "invoke", "field": "i32.no_fold_mul_div_s", "args": [{"type": "i32", "value": "2147483648"}]}, "expected": [{"type": "i32", "value": "0"}]}, 
  {"type": "assert_return", "line": 152, "action": {"type": "invoke", "field": "i32.no_fold_mul_div_u", "args": [{"type": "i32", "value": "2147483648"}]}, "expected": [{"type": "i32", "value": "0"}]}, 
  {"type": "assert_return", "line": 153, "action": {"type": "invoke", "field": "i64.no_fold_mul_div_s", "args": [{"type": "i64", "value": "9223372036854775808"}]}, "expected": [{"type": "i64", "value": "0"}]}, 
  {"type": "assert_return", "line": 154, "action": {"type": "invoke", "field": "i64.no_fold_mul_div_u", "args": [{"type": "i64", "value": "9223372036854775808"}]}, "expected": [{"type": "i64", "value": "0"}]}, 
  {"type": "module", "line": 158, "filename": "int_exprs.9.wasm"}, 
  {"type": "assert_return", "line": 166, "action": {"type": "invoke", "field": "i32.no_fold_div_s_2", "args": [{"type": "i32", "value": "4294967285"}]}, "expected": [{"type": "i32", "value": "4294967291"}]}, 
  {"type": "assert_return", "line": 167, "action": {"type": "invoke", "field": "i64.no_fold_div_s_2", "args": [{"type": "i64", "value": "18446744073709551605"}]}, "expected": [{"type": "i64", "value": "18446744073709551611"}]}, 
  {"type": "module", "line": 171, "filename": "int_exprs.10.wasm"}, 
  {"type": "assert_return", "line": 179, "action": {"type": "invoke", "field": "i32.no_fold_rem_s_2", "args": [{"type": "i32", "value": "4294967285"}]}, "expected": [{"type": "i32", "value": "4294967295"}]}, 
  {"type": "assert_return", "line": 180, "action": {"type": "invoke", "field": "i64.no_fold_rem_s_2", "args": [{"type": "i64", "value": "18446744073709551605"}]}, "expected": [{"type": "i64", "value": "18446744073709551615"}]}, 
  {"type": "module", "line": 184, "filename": "int_exprs.11.wasm"}, 
  {"type": "assert_trap", "line": 196, "action": {"type": "invoke", "field": "i32.div_s_0", "args": [{"type": "i32", "value": "71"}]}, "text": "integer divide by zero", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 197, "action": {"type": "invoke", "field": "i32.div_u_0", "args": [{"type": "i32", "value": "71"}]}, "text": "integer divide by zero", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 198, "action": {"type": "invoke", "field": "i64.div_s_0", "args": [{"type": "i64", "value": "71"}]}, "text": "integer divide by zero", "expected": [{"type": "i64"}]}, 
  {"type": "assert_trap", "line": 199, "action": {"type": "invoke", "field": "i64.div_u_0", "args": [{"type": "i64", "value": "71"}]}, "text": "integer divide by zero", "expected": [{"type": "i64"}]}, 
  {"type": "module", "line": 203, "filename": "int_exprs.12.wasm"}, 
  {"type": "assert_return", "line": 215, "action": {"type": "invoke", "field": "i32.div_s_3", "args": [{"type": "i32", "value": "71"}]}, "expected": [{"type": "i32", "value": "23"}]}, 
  {"type": "assert_return", "line": 216, "action": {"type": "invoke", "field": "i32.div_s_3", "args": [{"type": "i32", "value": "1610612736"}]}, "expected": [{"type": "i32", "value": "536870912"}]}, 
  {"type": "assert_return", "line": 217, "action": {"type": "invoke", "field": "i32.div_u_3", "args": [{"type": "i32", "value": "71"}]}, "expected": [{"type": "i32", "value": "23"}]}, 
  {"type": "assert_return", "line": 218, "action": {"type": "invoke", "field": "i32.div_u_3", "args": [{"type": "i32", "value": "3221225472"}]}, "expected": [{"type": "i32", "value": "1073741824"}]}, 
  {"type": "assert_return", "line": 219, "action": {"type": "invoke", "field": "i64.div_s_3", "args": [{"type": "i64", "value": "71"}]}, "expected": [{"type": "i64", "value": "23"}]}, 
  {"type": "assert_return", "line": 220, "action": {"type": "invoke", "field": "i64.div_s_3", "args": [{"type": "i64", "value": "3458764513820540928"}]}, "expected": [{"type": "i64", "value": "1152921504606846976"}]}, 
  {"type": "assert_return", "line": 221, "action": {"type": "invoke", "field": "i64.div_u_3", "args": [{"type": "i64", "value": "71"}]}, "expected": [{"type": "i64", "value": "23"}]}, 
  {"type": "assert_return", "line": 222, "action": {"type": "invoke", "field": "i64.div_u_3", "args": [{"type": "i64", "value": "13835058055282163712"}]}, "expected": [{"type": "i64", "value": "4611686018427387904"}]}, 
  {"type": "module", "line": 226, "filename": "int_exprs.13.wasm"}, 
  {"type": "assert_return", "line": 238, "action": {"type": "invoke", "field": "i32.div_s_5", "args": [{"type": "i32", "value": "71"}]}, "expected": [{"type": "i32", "value": "14"}]}, 
  {"type": "assert_return", "line": 239, "action": {"type": "invoke", "field": "i32.div_s_5", "args": [{"type": "i32", "value": "1342177280"}]}, "expected": [{"type": "i32", "value": "268435456"}]}, 
  {"type": "assert_return", "line": 240, "action": {"type": "invoke", "field": "i32.div_u_5", "args": [{"type": "i32", "value": "71"}]}, "expected": [{"type": "i32", "value": "14"}]}, 
  {"type": "assert_return", "line": 241, "action": {"type": "invoke", "field": "i32.div_u_5", "args": [{"type": "i32", "value": "2684354560"}]}, "expected": [{"type": "i32", "value": "536870912"}]}, 
  {"type": "assert_return", "line": 242, "action": {"type": "invoke", "field": "i64.div_s_5", "args": [{"type": "i64", "value": "71"}]}, "expected": [{"type": "i64", "value": "14"}]}, 
  {"type": "assert_return", "line": 243, "action": {"type": "invoke", "field": "i64.div_s_5", "args": [{"type": "i64", "value": "5764607523034234880"}]}, "expected": [{"type": "i64", "value": "1152921504606846976"}]}, 
  {"type": "assert_return", "line": 244, "action": {"type": "invoke", "field": "i64.div_u_5", "args": [{"type": "i64", "value": "71"}]}, "expected": [{"type": "i64", "value": "14"}]}, 
  {"type": "assert_return", "line": 245, "action": {"type": "invoke", "field": "i64.div_u_5", "args": [{"type": "i64", "value": "11529215046068469760"}]}, "expected": [{"type": "i64", "value": "2305843009213693952"}]}, 
  {"type": "module", "line": 249, "filename": "int_exprs.14.wasm"}, 
  {"type": "assert_return", "line": 261, "action": {"type": "invoke", "field": "i32.div_s_7", "args": [{"type": "i32", "value": "71"}]}, "expected": [{"type": "i32", "value": "10"}]}, 
  {"type": "assert_return", "line": 262, "action": {"type": "invoke", "field": "i32.div_s_7", "args": [{"type": "i32", "value": "1879048192"}]}, "expected": [{"type": "i32", "value": "268435456"}]}, 
  {"type": "assert_return", "line": 263, "action": {"type": "invoke", "field": "i32.div_u_7", "args": [{"type": "i32", "value": "71"}]}, "expected": [{"type": "i32", "value": "10"}]}, 
  {"type": "assert_return", "line": 264, "action": {"type": "invoke", "field": "i32.div_u_7", "args": [{"type": "i32", "value": "3758096384"}]}, "expected": [{"type": "i32", "value": "536870912"}]}, 
  {"type": "assert_return", "line": 265, "action": {"type": "invoke", "field": "i64.div_s_7", "args": [{"type": "i64", "value": "71"}]}, "expected": [{"type": "i64", "value": "10"}]}, 
  {"type": "assert_return", "line": 266, "action": {"type": "invoke", "field": "i64.div_s_7", "args": [{"type": "i64", "value": "8070450532247928832"}]}, "expected": [{"type": "i64", "value": "1152921504606846976"}]}, 
  {"type": "assert_return", "line": 267, "action": {"type": "invoke", "field": "i64.div_u_7", "args": [{"type": "i64", "value": "71"}]}, "expected": [{"type": "i64", "value": "10"}]}, 
  {"type": "assert_return", "line": 268, "action": {"type": "invoke", "field": "i64.div_u_7", "args": [{"type": "i64", "value": "16140901064495857664"}]}, "expected": [{"type": "i64", "value": "2305843009213693952"}]}, 
  {"type": "module", "line": 272, "filename": "int_exprs.15.wasm"}, 
  {"type": "assert_return", "line": 284, "action": {"type": "invoke", "field": "i32.rem_s_3", "args": [{"type": "i32", "value": "71"}]}, "expected": [{"type": "i32", "value": "2"}]}, 
  {"type": "assert_return", "line": 285, "action": {"type": "invoke", "field": "i32.rem_s_3", "args": [{"type": "i32", "value": "1610612736"}]}, "expected": [{"type": "i32", "value": "0"}]}, 
  {"type": "assert_return", "line": 286, "action": {"type": "invoke", "field": "i32.rem_u_3", "args": [{"type": "i32", "value": "71"}]}, "expected": [{"type": "i32", "value": "2"}]}, 
  {"type": "assert_return", "line": 287, "action": {"type": "invoke", "field": "i32.rem_u_3", "args": [{"type": "i32", "value": "3221225472"}]}, "expected": [{"type": "i32", "value": "0"}]}, 
  {"type": "assert_return", "line": 288, "action": {"type": "invoke", "field": "i64.rem_s_3", "args": [{"type": "i64", "value": "71"}]}, "expected": [{"type": "i64", "value": "2"}]}, 
  {"type": "assert_return", "line": 289, "action": {"type": "invoke", "field": "i64.rem_s_3", "args": [{"type": "i64", "value": "3458764513820540928"}]}, "expected": [{"type": "i64", "value": "0"}]}, 
  {"type": "assert_return", "line": 290, "action": {"type": "invoke", "field": "i64.rem_u_3", "args": [{"type": "i64", "value": "71"}]}, "expected": [{"type": "i64", "value": "2"}]}, 
  {"type": "assert_return", "line": 291, "action": {"type": "invoke", "field": "i64.rem_u_3", "args": [{"type": "i64", "value": "13835058055282163712"}]}, "expected": [{"type": "i64", "value": "0"}]}, 
  {"type": "module", "line": 295, "filename": "int_exprs.16.wasm"}, 
  {"type": "assert_return", "line": 307, "action": {"type": "invoke", "field": "i32.rem_s_5", "args": [{"type": "i32", "value": "71"}]}, "expected": [{"type": "i32", "value": "1"}]}, 
  {"type": "assert_return", "line": 308, "action": {"type": "invoke", "field": "i32.rem_s_5", "args": [{"type": "i32", "value": "1342177280"}]}, "expected": [{"type": "i32", "value": "0"}]}, 
  {"type": "assert_return", "line": 309, "action": {"type": "invoke", "field": "i32.rem_u_5", "args": [{"type": "i32", "value": "71"}]}, "expected": [{"type": "i32", "value": "1"}]}, 
  {"type": "assert_return", "line": 310, "action": {"type": "invoke", "field": "i32.rem_u_5", "args": [{"type": "i32", "value": "2684354560"}]}, "expected": [{"type": "i32", "value": "0"}]}, 
  {"type": "assert_return", "line": 311, "action": {"type": "invoke", "field": "i64.rem_s_5", "args": [{"type": "i64", "value": "71"}]}, "expected": [{"type": "i64", "value": "1"}]}, 
  {"type": "assert_return", "line": 312, "action": {"type": "invoke", "field": "i64.rem_s_5", "args": [{"type": "i64", "value": "5764607523034234880"}]}, "expected": [{"type": "i64", "value": "0"}]}, 
  {"type": "assert_return", "line": 313, "action": {"type": "invoke", "field": "i64.rem_u_5", "args": [{"type": "i64", "value": "71"}]}, "expected": [{"type": "i64", "value": "1"}]}, 
  {"type": "assert_return", "line": 314, "action": {"type": "invoke", "field": "i64.rem_u_5", "args": [{"type": "i64", "value": "11529215046068469760"}]}, "expected": [{"type": "i64", "value": "0"}]}, 
  {"type": "module", "line": 318, "filename": "int_exprs.17.wasm"}, 
  {"type": "assert_return", "line": 330, "action": {"type": "invoke", "field": "i32.rem_s_7", "args": [{"type": "i32", "value": "71"}]}, "expected": [{"type": "i32", "value": "1"}]}, 
  {"type": "assert_return", "line": 331, "action": {"type": "invoke", "field": "i32.rem_s_7", "args": [{"type": "i32", "value": "1879048192"}]}, "expected": [{"type": "i32", "value": "0"}]}, 
  {"type": "assert_return", "line": 332, "action": {"type": "invoke", "field": "i32.rem_u_7", "args": [{"type": "i32", "value": "71"}]}, "expected": [{"type": "i32", "value": "1"}]}, 
  {"type": "assert_return", "line": 333, "action": {"type": "invoke", "field": "i32.rem_u_7", "args": [{"type": "i32", "value": "3758096384"}]}, "expected": [{"type": "i32", "value": "0"}]}, 
  {"type": "assert_return", "line": 334, "action": {"type": "invoke", "field": "i64.rem_s_7", "args": [{"type": "i64", "value": "71"}]}, "expected": [{"type": "i64", "value": "1"}]}, 
  {"type": "assert_return", "line": 335, "action": {"type": "invoke", "field": "i64.rem_s_7", "args": [{"type": "i64", "value": "8070450532247928832"}]}, "expected": [{"type": "i64", "value": "0"}]}, 
  {"type": "assert_return", "line": 336, "action": {"type": "invoke", "field": "i64.rem_u_7", "args": [{"type": "i64", "value": "71"}]}, "expected": [{"type": "i64", "value": "1"}]}, 
  {"type": "assert_return", "line": 337, "action": {"type": "invoke", "field": "i64.rem_u_7", "args": [{"type": "i64", "value": "16140901064495857664"}]}, "expected": [{"type": "i64", "value": "0"}]}, 
  {"type": "module", "line": 341, "filename": "int_exprs.18.wasm"}, 
  {"type": "assert_trap", "line": 349, "action": {"type": "invoke", "field": "i32.no_fold_div_neg1", "args": [{"type": "i32", "value": "2147483648"}]}, "text": "integer overflow", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 350, "action": {"type": "invoke", "field": "i64.no_fold_div_neg1", "args": [{"type": "i64", "value": "9223372036854775808"}]}, "text": "integer overflow", "expected": [{"type": "i64"}]}]},
  "code": [
    "(module \n  (func (export \"i32.no_fold_cmp_s_offset\") (param $x i32) (param $y i32) (result i32) (i32.lt_s (i32.add (local.get $x) (i32.const 1)) (i32.add (local.get $y) (i32.const 1))))\n  (func (export \"i32.no_fold_cmp_u_offset\") (param $x i32) (param $y i32) (result i32) (i32.lt_u (i32.add (local.get $x) (i32.const 1)) (i32.add (local.get $y) (i32.const 1))))\n  (func (export \"i64.no_fold_cmp_s_offset\") (param $x i64) (param $y i64) (result i32) (i64.lt_s (i64.add (local.get $x) (i64.const 1)) (i64.add (local.get $y) (i64.const 1))))\n  (func (export \"i64.no_fold_cmp_u_offset\") (param $x i64) (param $y i64) (result i32) (i64.lt_u (i64.add (local.get $x) (i64.const 1)) (i64.add (local.get $y) (i64.const 1)))))",
    "(assert_return (invoke \"i32.no_fold_cmp_s_offset\" (i32.const 0x7fffffff) (i32.const 0)) (i32.const 1))",
    "(assert_return (invoke \"i32.no_fold_cmp_u_offset\" (i32.const 0xffffffff) (i32.const 0)) (i32.const 1))",
    "(assert_return (invoke \"i64.no_fold_cmp_s_offset\" (i64.const 0x7fffffffffffffff) (i64.const 0)) (i32.const 1))",
    "(assert_return (invoke \"i64.no_fold_cmp_u_offset\" (i64.const 0xffffffffffffffff) (i64.const 0)) (i32.const 1))",
    "(module \n  (func (export \"i64.no_fold_wrap_extend_s\") (param $x i64) (result i64) (i64.extend_i32_s (i32.wrap_i64 (local.get $x)))))",
    "(assert_return (invoke \"i64.no_fold_wrap_extend_s\" (i64.const 0x0010203040506070)) (i64.const 0x0000000040506070))",
    "(assert_return (invoke \"i64.no_fold_wrap_extend_s\" (i64.const 0x00a0b0c0d0e0f0a0)) (i64.const 0xffffffffd0e0f0a0))",
    "(module \n  (func (export \"i64.no_fold_wrap_extend_u\") (param $x i64) (result i64) (i64.extend_i32_u (i32.wrap_i64 (local.get $x)))))",
    "(assert_return (invoke \"i64.no_fold_wrap_extend_u\" (i64.const 0x0010203040506070)) (i64.const 0x0000000040506070))",
    "(module \n  (func (export \"i32.no_fold_shl_shr_s\") (param $x i32) (result i32) (i32.shr_s (i32.shl (local.get $x) (i32.const 1)) (i32.const 1)))\n  (func (export \"i32.no_fold_shl_shr_u\") (param $x i32) (result i32) (i32.shr_u (i32.shl (local.get $x) (i32.const 1)) (i32.const 1)))\n  (func (export \"i64.no_fold_shl_shr_s\") (param $x i64) (result i64) (i64.shr_s (i64.shl (local.get $x) (i64.const 1)) (i64.const 1)))\n  (func (export \"i64.no_fold_shl_shr_u\") (param $x i64) (result i64) (i64.shr_u (i64.shl (local.get $x) (i64.const 1)) (i64.const 1))))",
    "(assert_return (invoke \"i32.no_fold_shl_shr_s\" (i32.const 0x80000000)) (i32.const 0))",
    "(assert_return (invoke \"i32.no_fold_shl_shr_u\" (i32.const 0x80000000)) (i32.const 0))",
    "(assert_return (invoke \"i64.no_fold_shl_shr_s\" (i64.const 0x8000000000000000)) (i64.const 0))",
    "(assert_return (invoke \"i64.no_fold_shl_shr_u\" (i64.const 0x8000000000000000)) (i64.const 0))",
    "(module \n  (func (export \"i32.no_fold_shr_s_shl\") (param $x i32) (result i32) (i32.shl (i32.shr_s (local.get $x) (i32.const 1)) (i32.const 1)))\n  (func (export \"i32.no_fold_shr_u_shl\") (param $x i32) (result i32) (i32.shl (i32.shr_u (local.get $x) (i32.const 1)) (i32.const 1)))\n  (func (export \"i64.no_fold_shr_s_shl\") (param $x i64) (result i64) (i64.shl (i64.shr_s (local.get $x) (i64.const 1)) (i64.const 1)))\n  (func (export \"i64.no_fold_shr_u_shl\") (param $x i64) (result i64) (i64.shl (i64.shr_u (local.get $x) (i64.const 1)) (i64.const 1))))",
    "(assert_return (invoke \"i32.no_fold_shr_s_shl\" (i32.const 1)) (i32.const 0))",
    "(assert_return (invoke \"i32.no_fold_shr_u_shl\" (i32.const 1)) (i32.const 0))",
    "(assert_return (invoke \"i64.no_fold_shr_s_shl\" (i64.const 1)) (i64.const 0))",
    "(assert_return (invoke \"i64.no_fold_shr_u_shl\" (i64.const 1)) (i64.const 0))",
    "(module \n  (func (export \"i32.no_fold_div_s_mul\") (param $x i32) (result i32) (i32.mul (i32.div_s (local.get $x) (i32.const 6)) (i32.const 6)))\n  (func (export \"i32.no_fold_div_u_mul\") (param $x i32) (result i32) (i32.mul (i32.div_u (local.get $x) (i32.const 6)) (i32.const 6)))\n  (func (export \"i64.no_fold_div_s_mul\") (param $x i64) (result i64) (i64.mul (i64.div_s (local.get $x) (i64.const 6)) (i64.const 6)))\n  (func (export \"i64.no_fold_div_u_mul\") (param $x i64) (result i64) (i64.mul (i64.div_u (local.get $x) (i64.const 6)) (i64.const 6))))",
    "(assert_return (invoke \"i32.no_fold_div_s_mul\" (i32.const 1)) (i32.const 0))",
    "(assert_return (invoke \"i32.no_fold_div_u_mul\" (i32.const 1)) (i32.const 0))",
    "(assert_return (invoke \"i64.no_fold_div_s_mul\" (i64.const 1)) (i64.const 0))",
    "(assert_return (invoke \"i64.no_fold_div_u_mul\" (i64.const 1)) (i64.const 0))",
    "(module \n  (func (export \"i32.no_fold_div_s_self\") (param $x i32) (result i32) (i32.div_s (local.get $x) (local.get $x)))\n  (func (export \"i32.no_fold_div_u_self\") (param $x i32) (result i32) (i32.div_u (local.get $x) (local.get $x)))\n  (func (export \"i64.no_fold_div_s_self\") (param $x i64) (result i64) (i64.div_s (local.get $x) (local.get $x)))\n  (func (export \"i64.no_fold_div_u_self\") (param $x i64) (result i64) (i64.div_u (local.get $x) (local.get $x))))",
    "(assert_trap (invoke \"i32.no_fold_div_s_self\" (i32.const 0)) \"integer divide by zero\")",
    "(assert_trap (invoke \"i32.no_fold_div_u_self\" (i32.const 0)) \"integer divide by zero\")",
    "(assert_trap (invoke \"i64.no_fold_div_s_self\" (i64.const 0)) \"integer divide by zero\")",
    "(assert_trap (invoke \"i64.no_fold_div_u_self\" (i64.const 0)) \"integer divide by zero\")",
    "(module \n  (func (export \"i32.no_fold_rem_s_self\") (param $x i32) (result i32) (i32.rem_s (local.get $x) (local.get $x)))\n  (func (export \"i32.no_fold_rem_u_self\") (param $x i32) (result i32) (i32.rem_u (local.get $x) (local.get $x)))\n  (func (export \"i64.no_fold_rem_s_self\") (param $x i64) (result i64) (i64.rem_s (local.get $x) (local.get $x)))\n  (func (export \"i64.no_fold_rem_u_self\") (param $x i64) (result i64) (i64.rem_u (local.get $x) (local.get $x))))",
    "(assert_trap (invoke \"i32.no_fold_rem_s_self\" (i32.const 0)) \"integer divide by zero\")",
    "(assert_trap (invoke \"i32.no_fold_rem_u_self\" (i32.const 0)) \"integer divide by zero\")",
    "(assert_trap (invoke \"i64.no_fold_rem_s_self\" (i64.const 0)) \"integer divide by zero\")",
    "(assert_trap (invoke \"i64.no_fold_rem_u_self\" (i64.const 0)) \"integer divide by zero\")",
    "(module \n  (func (export \"i32.no_fold_mul_div_s\") (param $x i32) (result i32) (i32.div_s (i32.mul (local.get $x) (i32.const 6)) (i32.const 6)))\n  (func (export \"i32.no_fold_mul_div_u\") (param $x i32) (result i32) (i32.div_u (i32.mul (local.get $x) (i32.const 6)) (i32.const 6)))\n  (func (export \"i64.no_fold_mul_div_s\") (param $x i64) (result i64) (i64.div_s (i64.mul (local.get $x) (i64.const 6)) (i64.const 6)))\n  (func (export \"i64.no_fold_mul_div_u\") (param $x i64) (result i64) (i64.div_u (i64.mul (local.get $x) (i64.const 6)) (i64.const 6))))",
    "(assert_return (invoke \"i32.no_fold_mul_div_s\" (i32.const 0x80000000)) (i32.const 0))",
    "(assert_return (invoke \"i32.no_fold_mul_div_u\" (i32.const 0x80000000)) (i32.const 0))",
    "(assert_return (invoke \"i64.no_fold_mul_div_s\" (i64.const 0x8000000000000000)) (i64.const 0))",
    "(assert_return (invoke \"i64.no_fold_mul_div_u\" (i64.const 0x8000000000000000)) (i64.const 0))",
    "(module \n  (func (export \"i32.no_fold_div_s_2\") (param $x i32) (result i32) (i32.div_s (local.get $x) (i32.const 2)))\n  (func (export \"i64.no_fold_div_s_2\") (param $x i64) (result i64) (i64.div_s (local.get $x) (i64.const 2))))",
    "(assert_return (invoke \"i32.no_fold_div_s_2\" (i32.const -11)) (i32.const -5))",
    "(assert_return (invoke \"i64.no_fold_div_s_2\" (i64.const -11)) (i64.const -5))",
    "(module \n  (func (export \"i32.no_fold_rem_s_2\") (param $x i32) (result i32) (i32.rem_s (local.get $x) (i32.const 2)))\n  (func (export \"i64.no_fold_rem_s_2\") (param $x i64) (result i64) (i64.rem_s (local.get $x) (i64.const 2))))",
    "(assert_return (invoke \"i32.no_fold_rem_s_2\" (i32.const -11)) (i32.const -1))",
    "(assert_return (invoke \"i64.no_fold_rem_s_2\" (i64.const -11)) (i64.const -1))",
    "(module \n  (func (export \"i32.div_s_0\") (param $x i32) (result i32) (i32.div_s (local.get $x) (i32.const 0)))\n  (func (export \"i32.div_u_0\") (param $x i32) (result i32) (i32.div_u (local.get $x) (i32.const 0)))\n  (func (export \"i64.div_s_0\") (param $x i64) (result i64) (i64.div_s (local.get $x) (i64.const 0)))\n  (func (export \"i64.div_u_0\") (param $x i64) (result i64) (i64.div_u (local.get $x) (i64.const 0))))",
    "(assert_trap (invoke \"i32.div_s_0\" (i32.const 71)) \"integer divide by zero\")",
    "(assert_trap (invoke \"i32.div_u_0\" (i32.const 71)) \"integer divide by zero\")",
    "(assert_trap (invoke \"i64.div_s_0\" (i64.const 71)) \"integer divide by zero\")",
    "(assert_trap (invoke \"i64.div_u_0\" (i64.const 71)) \"integer divide by zero\")",
    "(module \n  (func (export \"i32.div_s_3\") (param $x i32) (result i32) (i32.div_s (local.get $x) (i32.const 3)))\n  (func (export \"i32.div_u_3\") (param $x i32) (result i32) (i32.div_u (local.get $x) (i32.const 3)))\n  (func (export \"i64.div_s_3\") (param $x i64) (result i64) (i64.div_s (local.get $x) (i64.const 3)))\n  (func (export \"i64.div_u_3\") (param $x i64) (result i64) (i64.div_u (local.get $x) (i64.const 3))))",
    "(assert_return (invoke \"i32.div_s_3\" (i32.const 71)) (i32.const 23))",
    "(assert_return (invoke \"i32.div_s_3\" (i32.const 0x60000000)) (i32.const 0x20000000))",
    "(assert_return (invoke \"i32.div_u_3\" (i32.const 71)) (i32.const 23))",
    "(assert_return (invoke \"i32.div_u_3\" (i32.const 0xc0000000)) (i32.const 0x40000000))",
    "(assert_return (invoke \"i64.div_s_3\" (i64.const 71)) (i64.const 23))",
    "(assert_return (invoke \"i64.div_s_3\" (i64.const 0x3000000000000000)) (i64.const 0x1000000000000000))",
    "(assert_return (invoke \"i64.div_u_3\" (i64.const 71)) (i64.const 23))",
    "(assert_return (invoke \"i64.div_u_3\" (i64.const 0xc000000000000000)) (i64.const 0x4000000000000000))",
    "(module \n  (func (export \"i32.div_s_5\") (param $x i32) (result i32) (i32.div_s (local.get $x) (i32.const 5)))\n  (func (export \"i32.div_u_5\") (param $x i32) (result i32) (i32.div_u (local.get $x) (i32.const 5)))\n  (func (export \"i64.div_s_5\") (param $x i64) (result i64) (i64.div_s (local.get $x) (i64.const 5)))\n  (func (export \"i64.div_u_5\") (param $x i64) (result i64) (i64.div_u (local.get $x) (i64.const 5))))",
    "(assert_return (invoke \"i32.div_s_5\" (i32.const 71)) (i32.const 14))",
    "(assert_return (invoke \"i32.div_s_5\" (i32.const 0x50000000)) (i32.const 0x10000000))",
    "(assert_return (invoke \"i32.div_u_5\" (i32.const 71)) (i32.const 14))",
    "(assert_return (invoke \"i32.div_u_5\" (i32.const 0xa0000000)) (i32.const 0x20000000))",
    "(assert_return (invoke \"i64.div_s_5\" (i64.const 71)) (i64.const 14))",
    "(assert_return (invoke \"i64.div_s_5\" (i64.const 0x5000000000000000)) (i64.const 0x1000000000000000))",
    "(assert_return (invoke \"i64.div_u_5\" (i64.const 71)) (i64.const 14))",
    "(assert_return (invoke \"i64.div_u_5\" (i64.const 0xa000000000000000)) (i64.const 0x2000000000000000))",
    "(module \n  (func (export \"i32.div_s_7\") (param $x i32) (result i32) (i32.div_s (local.get $x) (i32.const 7)))\n  (func (export \"i32.div_u_7\") (param $x i32) (result i32) (i32.div_u (local.get $x) (i32.const 7)))\n  (func (export \"i64.div_s_7\") (param $x i64) (result i64) (i64.div_s (local.get $x) (i64.const 7)))\n  (func (export \"i64.div_u_7\") (param $x i64) (result i64) (i64.div_u (local.get $x) (i64.const 7))))",
    "(assert_return (invoke \"i32.div_s_7\" (i32.const 71)) (i32.const 10))",
    "(assert_return (invoke \"i32.div_s_7\" (i32.const 0x70000000)) (i32.const 0x10000000))",
    "(assert_return (invoke \"i32.div_u_7\" (i32.const 71)) (i32.const 10))",
    "(assert_return (invoke \"i32.div_u_7\" (i32.const 0xe0000000)) (i32.const 0x20000000))",
    "(assert_return (invoke \"i64.div_s_7\" (i64.const 71)) (i64.const 10))",
    "(assert_return (invoke \"i64.div_s_7\" (i64.const 0x7000000000000000)) (i64.const 0x1000000000000000))",
    "(assert_return (invoke \"i64.div_u_7\" (i64.const 71)) (i64.const 10))",
    "(assert_return (invoke \"i64.div_u_7\" (i64.const 0xe000000000000000)) (i64.const 0x2000000000000000))",
    "(module \n  (func (export \"i32.rem_s_3\") (param $x i32) (result i32) (i32.rem_s (local.get $x) (i32.const 3)))\n  (func (export \"i32.rem_u_3\") (param $x i32) (result i32) (i32.rem_u (local.get $x) (i32.const 3)))\n  (func (export \"i64.rem_s_3\") (param $x i64) (result i64) (i64.rem_s (local.get $x) (i64.const 3)))\n  (func (export \"i64.rem_u_3\") (param $x i64) (result i64) (i64.rem_u (local.get $x) (i64.const 3))))",
    "(assert_return (invoke \"i32.rem_s_3\" (i32.const 71)) (i32.const 2))",
    "(assert_return (invoke \"i32.rem_s_3\" (i32.const 0x60000000)) (i32.const 0))",
    "(assert_return (invoke \"i32.rem_u_3\" (i32.const 71)) (i32.const 2))",
    "(assert_return (invoke \"i32.rem_u_3\" (i32.const 0xc0000000)) (i32.const 0))",
    "(assert_return (invoke \"i64.rem_s_3\" (i64.const 71)) (i64.const 2))",
    "(assert_return (invoke \"i64.rem_s_3\" (i64.const 0x3000000000000000)) (i64.const 0))",
    "(assert_return (invoke \"i64.rem_u_3\" (i64.const 71)) (i64.const 2))",
    "(assert_return (invoke \"i64.rem_u_3\" (i64.const 0xc000000000000000)) (i64.const 0))",
    "(module \n  (func (export \"i32.rem_s_5\") (param $x i32) (result i32) (i32.rem_s (local.get $x) (i32.const 5)))\n  (func (export \"i32.rem_u_5\") (param $x i32) (result i32) (i32.rem_u (local.get $x) (i32.const 5)))\n  (func (export \"i64.rem_s_5\") (param $x i64) (result i64) (i64.rem_s (local.get $x) (i64.const 5)))\n  (func (export \"i64.rem_u_5\") (param $x i64) (result i64) (i64.rem_u (local.get $x) (i64.const 5))))",
    "(assert_return (invoke \"i32.rem_s_5\" (i32.const 71)) (i32.const 1))",
    "(assert_return (invoke \"i32.rem_s_5\" (i32.const 0x50000000)) (i32.const 0))",
    "(assert_return (invoke \"i32.rem_u_5\" (i32.const 71)) (i32.const 1))",
    "(assert_return (invoke \"i32.rem_u_5\" (i32.const 0xa0000000)) (i32.const 0))",
    "(assert_return (invoke \"i64.rem_s_5\" (i64.const 71)) (i64.const 1))",
    "(assert_return (invoke \"i64.rem_s_5\" (i64.const 0x5000000000000000)) (i64.const 0))",
    "(assert_return (invoke \"i64.rem_u_5\" (i64.const 71)) (i64.const 1))",
    "(assert_return (invoke \"i64.rem_u_5\" (i64.const 0xa000000000000000)) (i64.const 0))",
    "(module \n  (func (export \"i32.rem_s_7\") (param $x i32) (result i32) (i32.rem_s (local.get $x) (i32.const 7)))\n  (func (export \"i32.rem_u_7\") (param $x i32) (result i32) (i32.rem_u (local.get $x) (i32.const 7)))\n  (func (export \"i64.rem_s_7\") (param $x i64) (result i64) (i64.rem_s (local.get $x) (i64.const 7)))\n  (func (export \"i64.rem_u_7\") (param $x i64) (result i64) (i64.rem_u (local.get $x) (i64.const 7))))",
    "(assert_return (invoke \"i32.rem_s_7\" (i32.const 71)) (i32.const 1))",
    "(assert_return (invoke \"i32.rem_s_7\" (i32.const 0x70000000)) (i32.const 0))",
    "(assert_return (invoke \"i32.rem_u_7\" (i32.const 71)) (i32.const 1))",
    "(assert_return (invoke \"i32.rem_u_7\" (i32.const 0xe0000000)) (i32.const 0))",
    "(assert_return (invoke \"i64.rem_s_7\" (i64.const 71)) (i64.const 1))",
    "(assert_return (invoke \"i64.rem_s_7\" (i64.const 0x7000000000000000)) (i64.const 0))",
    "(assert_return (invoke \"i64.rem_u_7\" (i64.const 71)) (i64.const 1))",
    "(assert_return (invoke \"i64.rem_u_7\" (i64.const 0xe000000000000000)) (i64.const 0))",
    "(module \n  (func (export \"i32.no_fold_div_neg1\") (param $x i32) (result i32) (i32.div_s (local.get $x) (i32.const -1)))\n  (func (export \"i64.no_fold_div_neg1\") (param $x i64) (result i64) (i64.div_s (local.get $x) (i64.const -1))))",
    "(assert_trap (invoke \"i32.no_fold_div_neg1\" (i32.const 0x80000000)) \"integer overflow\")",
    "(assert_trap (invoke \"i64.no_fold_div_neg1\" (i64.const 0x8000000000000000)) \"integer overflow\")"
  ],
  "dump": {
    "int_exprs.0.wasm": {
      "header": "\nint_exprs.0.wasm:\tfile format wasm 0x1\n\nSections:\n\n     Type start=0x0000000a end=0x00000017 (size=0x0000000d) count: 2\n Function start=0x00000019 end=0x0000001e (size=0x00000005) count: 4\n   Export start=0x00000020 end=0x0000008d (size=0x0000006d) count: 4\n     Code start=0x0000008f end=0x000000c8 (size=0x00000039) count: 4\n",
      "details": "\nint_exprs.0.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nType[2]:\n - type[0] (i32, i32) -> i32\n - type[1] (i64, i64) -> i32\nFunction[4]:\n - func[0] sig=0 <i32.no_fold_cmp_s_offset>\n - func[1] sig=0 <i32.no_fold_cmp_u_offset>\n - func[2] sig=1 <i64.no_fold_cmp_s_offset>\n - func[3] sig=1 <i64.no_fold_cmp_u_offset>\nExport[4]:\n - func[0] <i32.no_fold_cmp_s_offset> -> \"i32.no_fold_cmp_s_offset\"\n - func[1] <i32.no_fold_cmp_u_offset> -> \"i32.no_fold_cmp_u_offset\"\n - func[2] <i64.no_fold_cmp_s_offset> -> \"i64.no_fold_cmp_s_offset\"\n - func[3] <i64.no_fold_cmp_u_offset> -> \"i64.no_fold_cmp_u_offset\"\nCode[4]:\n - func[0] size=13 <i32.no_fold_cmp_s_offset>\n - func[1] size=13 <i32.no_fold_cmp_u_offset>\n - func[2] size=13 <i64.no_fold_cmp_s_offset>\n - func[3] size=13 <i64.no_fold_cmp_u_offset>\n",
      "disassemble": "\nint_exprs.0.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n000091 func[0] <i32.no_fold_cmp_s_offset>:\n 000092: 20 00                      | local.get 0\n 000094: 41 01                      | i32.const 1\n 000096: 6a                         | i32.add\n 000097: 20 01                      | local.get 1\n 000099: 41 01                      | i32.const 1\n 00009b: 6a                         | i32.add\n 00009c: 48                         | i32.lt_s\n 00009d: 0b                         | end\n00009f func[1] <i32.no_fold_cmp_u_offset>:\n 0000a0: 20 00                      | local.get 0\n 0000a2: 41 01                      | i32.const 1\n 0000a4: 6a                         | i32.add\n 0000a5: 20 01                      | local.get 1\n 0000a7: 41 01                      | i32.const 1\n 0000a9: 6a                         | i32.add\n 0000aa: 49                         | i32.lt_u\n 0000ab: 0b                         | end\n0000ad func[2] <i64.no_fold_cmp_s_offset>:\n 0000ae: 20 00                      | local.get 0\n 0000b0: 42 01                      | i64.const 1\n 0000b2: 7c                         | i64.add\n 0000b3: 20 01                      | local.get 1\n 0000b5: 42 01                      | i64.const 1\n 0000b7: 7c                         | i64.add\n 0000b8: 53                         | i64.lt_s\n 0000b9: 0b                         | end\n0000bb func[3] <i64.no_fold_cmp_u_offset>:\n 0000bc: 20 00                      | local.get 0\n 0000be: 42 01                      | i64.const 1\n 0000c0: 7c                         | i64.add\n 0000c1: 20 01                      | local.get 1\n 0000c3: 42 01                      | i64.const 1\n 0000c5: 7c                         | i64.add\n 0000c6: 54                         | i64.lt_u\n 0000c7: 0b                         | end\n"
    },
    "int_exprs.1.wasm": {
      "header": "\nint_exprs.1.wasm:\tfile format wasm 0x1\n\nSections:\n\n     Type start=0x0000000a end=0x00000010 (size=0x00000006) count: 1\n Function start=0x00000012 end=0x00000014 (size=0x00000002) count: 1\n   Export start=0x00000016 end=0x00000033 (size=0x0000001d) count: 1\n     Code start=0x00000035 end=0x0000003d (size=0x00000008) count: 1\n",
      "details": "\nint_exprs.1.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nType[1]:\n - type[0] (i64) -> i64\nFunction[1]:\n - func[0] sig=0 <i64.no_fold_wrap_extend_s>\nExport[1]:\n - func[0] <i64.no_fold_wrap_extend_s> -> \"i64.no_fold_wrap_extend_s\"\nCode[1]:\n - func[0] size=6 <i64.no_fold_wrap_extend_s>\n",
      "disassemble": "\nint_exprs.1.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n000037 func[0] <i64.no_fold_wrap_extend_s>:\n 000038: 20 00                      | local.get 0\n 00003a: a7                         | i32.wrap_i64\n 00003b: ac                         | i64.extend_i32_s\n 00003c: 0b                         | end\n"
    },
    "int_exprs.2.wasm": {
      "header": "\nint_exprs.2.wasm:\tfile format wasm 0x1\n\nSections:\n\n     Type start=0x0000000a end=0x00000010 (size=0x00000006) count: 1\n Function start=0x00000012 end=0x00000014 (size=0x00000002) count: 1\n   Export start=0x00000016 end=0x00000033 (size=0x0000001d) count: 1\n     Code start=0x00000035 end=0x0000003d (size=0x00000008) count: 1\n",
      "details": "\nint_exprs.2.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nType[1]:\n - type[0] (i64) -> i64\nFunction[1]:\n - func[0] sig=0 <i64.no_fold_wrap_extend_u>\nExport[1]:\n - func[0] <i64.no_fold_wrap_extend_u> -> \"i64.no_fold_wrap_extend_u\"\nCode[1]:\n - func[0] size=6 <i64.no_fold_wrap_extend_u>\n",
      "disassemble": "\nint_exprs.2.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n000037 func[0] <i64.no_fold_wrap_extend_u>:\n 000038: 20 00                      | local.get 0\n 00003a: a7                         | i32.wrap_i64\n 00003b: ad                         | i64.extend_i32_u\n 00003c: 0b                         | end\n"
    },
    "int_exprs.3.wasm": {
      "header": "\nint_exprs.3.wasm:\tfile format wasm 0x1\n\nSections:\n\n     Type start=0x0000000a end=0x00000015 (size=0x0000000b) count: 2\n Function start=0x00000017 end=0x0000001c (size=0x00000005) count: 4\n   Export start=0x0000001e end=0x0000007f (size=0x00000061) count: 4\n     Code start=0x00000081 end=0x000000ae (size=0x0000002d) count: 4\n",
      "details": "\nint_exprs.3.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nType[2]:\n - type[0] (i32) -> i32\n - type[1] (i64) -> i64\nFunction[4]:\n - func[0] sig=0 <i32.no_fold_shl_shr_s>\n - func[1] sig=0 <i32.no_fold_shl_shr_u>\n - func[2] sig=1 <i64.no_fold_shl_shr_s>\n - func[3] sig=1 <i64.no_fold_shl_shr_u>\nExport[4]:\n - func[0] <i32.no_fold_shl_shr_s> -> \"i32.no_fold_shl_shr_s\"\n - func[1] <i32.no_fold_shl_shr_u> -> \"i32.no_fold_shl_shr_u\"\n - func[2] <i64.no_fold_shl_shr_s> -> \"i64.no_fold_shl_shr_s\"\n - func[3] <i64.no_fold_shl_shr_u> -> \"i64.no_fold_shl_shr_u\"\nCode[4]:\n - func[0] size=10 <i32.no_fold_shl_shr_s>\n - func[1] size=10 <i32.no_fold_shl_shr_u>\n - func[2] size=10 <i64.no_fold_shl_shr_s>\n - func[3] size=10 <i64.no_fold_shl_shr_u>\n",
      "disassemble": "\nint_exprs.3.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n000083 func[0] <i32.no_fold_shl_shr_s>:\n 000084: 20 00                      | local.get 0\n 000086: 41 01                      | i32.const 1\n 000088: 74                         | i32.shl\n 000089: 41 01                      | i32.const 1\n 00008b: 75                         | i32.shr_s\n 00008c: 0b                         | end\n00008e func[1] <i32.no_fold_shl_shr_u>:\n 00008f: 20 00                      | local.get 0\n 000091: 41 01                      | i32.const 1\n 000093: 74                         | i32.shl\n 000094: 41 01                      | i32.const 1\n 000096: 76                         | i32.shr_u\n 000097: 0b                         | end\n000099 func[2] <i64.no_fold_shl_shr_s>:\n 00009a: 20 00                      | local.get 0\n 00009c: 42 01                      | i64.const 1\n 00009e: 86                         | i64.shl\n 00009f: 42 01                      | i64.const 1\n 0000a1: 87                         | i64.shr_s\n 0000a2: 0b                         | end\n0000a4 func[3] <i64.no_fold_shl_shr_u>:\n 0000a5: 20 00                      | local.get 0\n 0000a7: 42 01                      | i64.const 1\n 0000a9: 86                         | i64.shl\n 0000aa: 42 01                      | i64.const 1\n 0000ac: 88                         | i64.shr_u\n 0000ad: 0b                         | end\n"
    },
    "int_exprs.4.wasm": {
      "header": "\nint_exprs.4.wasm:\tfile format wasm 0x1\n\nSections:\n\n     Type start=0x0000000a end=0x00000015 (size=0x0000000b) count: 2\n Function start=0x00000017 end=0x0000001c (size=0x00000005) count: 4\n   Export start=0x0000001e end=0x0000007f (size=0x00000061) count: 4\n     Code start=0x00000081 end=0x000000ae (size=0x0000002d) count: 4\n",
      "details": "\nint_exprs.4.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nType[2]:\n - type[0] (i32) -> i32\n - type[1] (i64) -> i64\nFunction[4]:\n - func[0] sig=0 <i32.no_fold_shr_s_shl>\n - func[1] sig=0 <i32.no_fold_shr_u_shl>\n - func[2] sig=1 <i64.no_fold_shr_s_shl>\n - func[3] sig=1 <i64.no_fold_shr_u_shl>\nExport[4]:\n - func[0] <i32.no_fold_shr_s_shl> -> \"i32.no_fold_shr_s_shl\"\n - func[1] <i32.no_fold_shr_u_shl> -> \"i32.no_fold_shr_u_shl\"\n - func[2] <i64.no_fold_shr_s_shl> -> \"i64.no_fold_shr_s_shl\"\n - func[3] <i64.no_fold_shr_u_shl> -> \"i64.no_fold_shr_u_shl\"\nCode[4]:\n - func[0] size=10 <i32.no_fold_shr_s_shl>\n - func[1] size=10 <i32.no_fold_shr_u_shl>\n - func[2] size=10 <i64.no_fold_shr_s_shl>\n - func[3] size=10 <i64.no_fold_shr_u_shl>\n",
      "disassemble": "\nint_exprs.4.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n000083 func[0] <i32.no_fold_shr_s_shl>:\n 000084: 20 00                      | local.get 0\n 000086: 41 01                      | i32.const 1\n 000088: 75                         | i32.shr_s\n 000089: 41 01                      | i32.const 1\n 00008b: 74                         | i32.shl\n 00008c: 0b                         | end\n00008e func[1] <i32.no_fold_shr_u_shl>:\n 00008f: 20 00                      | local.get 0\n 000091: 41 01                      | i32.const 1\n 000093: 76                         | i32.shr_u\n 000094: 41 01                      | i32.const 1\n 000096: 74                         | i32.shl\n 000097: 0b                         | end\n000099 func[2] <i64.no_fold_shr_s_shl>:\n 00009a: 20 00                      | local.get 0\n 00009c: 42 01                      | i64.const 1\n 00009e: 87                         | i64.shr_s\n 00009f: 42 01                      | i64.const 1\n 0000a1: 86                         | i64.shl\n 0000a2: 0b                         | end\n0000a4 func[3] <i64.no_fold_shr_u_shl>:\n 0000a5: 20 00                      | local.get 0\n 0000a7: 42 01                      | i64.const 1\n 0000a9: 88                         | i64.shr_u\n 0000aa: 42 01                      | i64.const 1\n 0000ac: 86                         | i64.shl\n 0000ad: 0b                         | end\n"
    },
    "int_exprs.5.wasm": {
      "header": "\nint_exprs.5.wasm:\tfile format wasm 0x1\n\nSections:\n\n     Type start=0x0000000a end=0x00000015 (size=0x0000000b) count: 2\n Function start=0x00000017 end=0x0000001c (size=0x00000005) count: 4\n   Export start=0x0000001e end=0x0000007f (size=0x00000061) count: 4\n     Code start=0x00000081 end=0x000000ae (size=0x0000002d) count: 4\n",
      "details": "\nint_exprs.5.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nType[2]:\n - type[0] (i32) -> i32\n - type[1] (i64) -> i64\nFunction[4]:\n - func[0] sig=0 <i32.no_fold_div_s_mul>\n - func[1] sig=0 <i32.no_fold_div_u_mul>\n - func[2] sig=1 <i64.no_fold_div_s_mul>\n - func[3] sig=1 <i64.no_fold_div_u_mul>\nExport[4]:\n - func[0] <i32.no_fold_div_s_mul> -> \"i32.no_fold_div_s_mul\"\n - func[1] <i32.no_fold_div_u_mul> -> \"i32.no_fold_div_u_mul\"\n - func[2] <i64.no_fold_div_s_mul> -> \"i64.no_fold_div_s_mul\"\n - func[3] <i64.no_fold_div_u_mul> -> \"i64.no_fold_div_u_mul\"\nCode[4]:\n - func[0] size=10 <i32.no_fold_div_s_mul>\n - func[1] size=10 <i32.no_fold_div_u_mul>\n - func[2] size=10 <i64.no_fold_div_s_mul>\n - func[3] size=10 <i64.no_fold_div_u_mul>\n",
      "disassemble": "\nint_exprs.5.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n000083 func[0] <i32.no_fold_div_s_mul>:\n 000084: 20 00                      | local.get 0\n 000086: 41 06                      | i32.const 6\n 000088: 6d                         | i32.div_s\n 000089: 41 06                      | i32.const 6\n 00008b: 6c                         | i32.mul\n 00008c: 0b                         | end\n00008e func[1] <i32.no_fold_div_u_mul>:\n 00008f: 20 00                      | local.get 0\n 000091: 41 06                      | i32.const 6\n 000093: 6e                         | i32.div_u\n 000094: 41 06                      | i32.const 6\n 000096: 6c                         | i32.mul\n 000097: 0b                         | end\n000099 func[2] <i64.no_fold_div_s_mul>:\n 00009a: 20 00                      | local.get 0\n 00009c: 42 06                      | i64.const 6\n 00009e: 7f                         | i64.div_s\n 00009f: 42 06                      | i64.const 6\n 0000a1: 7e                         | i64.mul\n 0000a2: 0b                         | end\n0000a4 func[3] <i64.no_fold_div_u_mul>:\n 0000a5: 20 00                      | local.get 0\n 0000a7: 42 06                      | i64.const 6\n 0000a9: 80                         | i64.div_u\n 0000aa: 42 06                      | i64.const 6\n 0000ac: 7e                         | i64.mul\n 0000ad: 0b                         | end\n"
    },
    "int_exprs.6.wasm": {
      "header": "\nint_exprs.6.wasm:\tfile format wasm 0x1\n\nSections:\n\n     Type start=0x0000000a end=0x00000015 (size=0x0000000b) count: 2\n Function start=0x00000017 end=0x0000001c (size=0x00000005) count: 4\n   Export start=0x0000001e end=0x00000083 (size=0x00000065) count: 4\n     Code start=0x00000085 end=0x000000a6 (size=0x00000021) count: 4\n",
      "details": "\nint_exprs.6.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nType[2]:\n - type[0] (i32) -> i32\n - type[1] (i64) -> i64\nFunction[4]:\n - func[0] sig=0 <i32.no_fold_div_s_self>\n - func[1] sig=0 <i32.no_fold_div_u_self>\n - func[2] sig=1 <i64.no_fold_div_s_self>\n - func[3] sig=1 <i64.no_fold_div_u_self>\nExport[4]:\n - func[0] <i32.no_fold_div_s_self> -> \"i32.no_fold_div_s_self\"\n - func[1] <i32.no_fold_div_u_self> -> \"i32.no_fold_div_u_self\"\n - func[2] <i64.no_fold_div_s_self> -> \"i64.no_fold_div_s_self\"\n - func[3] <i64.no_fold_div_u_self> -> \"i64.no_fold_div_u_self\"\nCode[4]:\n - func[0] size=7 <i32.no_fold_div_s_self>\n - func[1] size=7 <i32.no_fold_div_u_self>\n - func[2] size=7 <i64.no_fold_div_s_self>\n - func[3] size=7 <i64.no_fold_div_u_self>\n",
      "disassemble": "\nint_exprs.6.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n000087 func[0] <i32.no_fold_div_s_self>:\n 000088: 20 00                      | local.get 0\n 00008a: 20 00                      | local.get 0\n 00008c: 6d                         | i32.div_s\n 00008d: 0b                         | end\n00008f func[1] <i32.no_fold_div_u_self>:\n 000090: 20 00                      | local.get 0\n 000092: 20 00                      | local.get 0\n 000094: 6e                         | i32.div_u\n 000095: 0b                         | end\n000097 func[2] <i64.no_fold_div_s_self>:\n 000098: 20 00                      | local.get 0\n 00009a: 20 00                      | local.get 0\n 00009c: 7f                         | i64.div_s\n 00009d: 0b                         | end\n00009f func[3] <i64.no_fold_div_u_self>:\n 0000a0: 20 00                      | local.get 0\n 0000a2: 20 00                      | local.get 0\n 0000a4: 80                         | i64.div_u\n 0000a5: 0b                         | end\n"
    },
    "int_exprs.7.wasm": {
      "header": "\nint_exprs.7.wasm:\tfile format wasm 0x1\n\nSections:\n\n     Type start=0x0000000a end=0x00000015 (size=0x0000000b) count: 2\n Function start=0x00000017 end=0x0000001c (size=0x00000005) count: 4\n   Export start=0x0000001e end=0x00000083 (size=0x00000065) count: 4\n     Code start=0x00000085 end=0x000000a6 (size=0x00000021) count: 4\n",
      "details": "\nint_exprs.7.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nType[2]:\n - type[0] (i32) -> i32\n - type[1] (i64) -> i64\nFunction[4]:\n - func[0] sig=0 <i32.no_fold_rem_s_self>\n - func[1] sig=0 <i32.no_fold_rem_u_self>\n - func[2] sig=1 <i64.no_fold_rem_s_self>\n - func[3] sig=1 <i64.no_fold_rem_u_self>\nExport[4]:\n - func[0] <i32.no_fold_rem_s_self> -> \"i32.no_fold_rem_s_self\"\n - func[1] <i32.no_fold_rem_u_self> -> \"i32.no_fold_rem_u_self\"\n - func[2] <i64.no_fold_rem_s_self> -> \"i64.no_fold_rem_s_self\"\n - func[3] <i64.no_fold_rem_u_self> -> \"i64.no_fold_rem_u_self\"\nCode[4]:\n - func[0] size=7 <i32.no_fold_rem_s_self>\n - func[1] size=7 <i32.no_fold_rem_u_self>\n - func[2] size=7 <i64.no_fold_rem_s_self>\n - func[3] size=7 <i64.no_fold_rem_u_self>\n",
      "disassemble": "\nint_exprs.7.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n000087 func[0] <i32.no_fold_rem_s_self>:\n 000088: 20 00                      | local.get 0\n 00008a: 20 00                      | local.get 0\n 00008c: 6f                         | i32.rem_s\n 00008d: 0b                         | end\n00008f func[1] <i32.no_fold_rem_u_self>:\n 000090: 20 00                      | local.get 0\n 000092: 20 00                      | local.get 0\n 000094: 70                         | i32.rem_u\n 000095: 0b                         | end\n000097 func[2] <i64.no_fold_rem_s_self>:\n 000098: 20 00                      | local.get 0\n 00009a: 20 00                      | local.get 0\n 00009c: 81                         | i64.rem_s\n 00009d: 0b                         | end\n00009f func[3] <i64.no_fold_rem_u_self>:\n 0000a0: 20 00                      | local.get 0\n 0000a2: 20 00                      | local.get 0\n 0000a4: 82                         | i64.rem_u\n 0000a5: 0b                         | end\n"
    },
    "int_exprs.8.wasm": {
      "header": "\nint_exprs.8.wasm:\tfile format wasm 0x1\n\nSections:\n\n     Type start=0x0000000a end=0x00000015 (size=0x0000000b) count: 2\n Function start=0x00000017 end=0x0000001c (size=0x00000005) count: 4\n   Export start=0x0000001e end=0x0000007f (size=0x00000061) count: 4\n     Code start=0x00000081 end=0x000000ae (size=0x0000002d) count: 4\n",
      "details": "\nint_exprs.8.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nType[2]:\n - type[0] (i32) -> i32\n - type[1] (i64) -> i64\nFunction[4]:\n - func[0] sig=0 <i32.no_fold_mul_div_s>\n - func[1] sig=0 <i32.no_fold_mul_div_u>\n - func[2] sig=1 <i64.no_fold_mul_div_s>\n - func[3] sig=1 <i64.no_fold_mul_div_u>\nExport[4]:\n - func[0] <i32.no_fold_mul_div_s> -> \"i32.no_fold_mul_div_s\"\n - func[1] <i32.no_fold_mul_div_u> -> \"i32.no_fold_mul_div_u\"\n - func[2] <i64.no_fold_mul_div_s> -> \"i64.no_fold_mul_div_s\"\n - func[3] <i64.no_fold_mul_div_u> -> \"i64.no_fold_mul_div_u\"\nCode[4]:\n - func[0] size=10 <i32.no_fold_mul_div_s>\n - func[1] size=10 <i32.no_fold_mul_div_u>\n - func[2] size=10 <i64.no_fold_mul_div_s>\n - func[3] size=10 <i64.no_fold_mul_div_u>\n",
      "disassemble": "\nint_exprs.8.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n000083 func[0] <i32.no_fold_mul_div_s>:\n 000084: 20 00                      | local.get 0\n 000086: 41 06                      | i32.const 6\n 000088: 6c                         | i32.mul\n 000089: 41 06                      | i32.const 6\n 00008b: 6d                         | i32.div_s\n 00008c: 0b                         | end\n00008e func[1] <i32.no_fold_mul_div_u>:\n 00008f: 20 00                      | local.get 0\n 000091: 41 06                      | i32.const 6\n 000093: 6c                         | i32.mul\n 000094: 41 06                      | i32.const 6\n 000096: 6e                         | i32.div_u\n 000097: 0b                         | end\n000099 func[2] <i64.no_fold_mul_div_s>:\n 00009a: 20 00                      | local.get 0\n 00009c: 42 06                      | i64.const 6\n 00009e: 7e                         | i64.mul\n 00009f: 42 06                      | i64.const 6\n 0000a1: 7f                         | i64.div_s\n 0000a2: 0b                         | end\n0000a4 func[3] <i64.no_fold_mul_div_u>:\n 0000a5: 20 00                      | local.get 0\n 0000a7: 42 06                      | i64.const 6\n 0000a9: 7e                         | i64.mul\n 0000aa: 42 06                      | i64.const 6\n 0000ac: 80                         | i64.div_u\n 0000ad: 0b                         | end\n"
    },
    "int_exprs.9.wasm": {
      "header": "\nint_exprs.9.wasm:\tfile format wasm 0x1\n\nSections:\n\n     Type start=0x0000000a end=0x00000015 (size=0x0000000b) count: 2\n Function start=0x00000017 end=0x0000001a (size=0x00000003) count: 2\n   Export start=0x0000001c end=0x00000049 (size=0x0000002d) count: 2\n     Code start=0x0000004b end=0x0000005c (size=0x00000011) count: 2\n",
      "details": "\nint_exprs.9.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nType[2]:\n - type[0] (i32) -> i32\n - type[1] (i64) -> i64\nFunction[2]:\n - func[0] sig=0 <i32.no_fold_div_s_2>\n - func[1] sig=1 <i64.no_fold_div_s_2>\nExport[2]:\n - func[0] <i32.no_fold_div_s_2> -> \"i32.no_fold_div_s_2\"\n - func[1] <i64.no_fold_div_s_2> -> \"i64.no_fold_div_s_2\"\nCode[2]:\n - func[0] size=7 <i32.no_fold_div_s_2>\n - func[1] size=7 <i64.no_fold_div_s_2>\n",
      "disassemble": "\nint_exprs.9.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n00004d func[0] <i32.no_fold_div_s_2>:\n 00004e: 20 00                      | local.get 0\n 000050: 41 02                      | i32.const 2\n 000052: 6d                         | i32.div_s\n 000053: 0b                         | end\n000055 func[1] <i64.no_fold_div_s_2>:\n 000056: 20 00                      | local.get 0\n 000058: 42 02                      | i64.const 2\n 00005a: 7f                         | i64.div_s\n 00005b: 0b                         | end\n"
    },
    "int_exprs.10.wasm": {
      "header": "\nint_exprs.10.wasm:\tfile format wasm 0x1\n\nSections:\n\n     Type start=0x0000000a end=0x00000015 (size=0x0000000b) count: 2\n Function start=0x00000017 end=0x0000001a (size=0x00000003) count: 2\n   Export start=0x0000001c end=0x00000049 (size=0x0000002d) count: 2\n     Code start=0x0000004b end=0x0000005c (size=0x00000011) count: 2\n",
      "details": "\nint_exprs.10.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nType[2]:\n - type[0] (i32) -> i32\n - type[1] (i64) -> i64\nFunction[2]:\n - func[0] sig=0 <i32.no_fold_rem_s_2>\n - func[1] sig=1 <i64.no_fold_rem_s_2>\nExport[2]:\n - func[0] <i32.no_fold_rem_s_2> -> \"i32.no_fold_rem_s_2\"\n - func[1] <i64.no_fold_rem_s_2> -> \"i64.no_fold_rem_s_2\"\nCode[2]:\n - func[0] size=7 <i32.no_fold_rem_s_2>\n - func[1] size=7 <i64.no_fold_rem_s_2>\n",
      "disassemble": "\nint_exprs.10.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n00004d func[0] <i32.no_fold_rem_s_2>:\n 00004e: 20 00                      | local.get 0\n 000050: 41 02                      | i32.const 2\n 000052: 6f                         | i32.rem_s\n 000053: 0b                         | end\n000055 func[1] <i64.no_fold_rem_s_2>:\n 000056: 20 00                      | local.get 0\n 000058: 42 02                      | i64.const 2\n 00005a: 81                         | i64.rem_s\n 00005b: 0b                         | end\n"
    },
    "int_exprs.11.wasm": {
      "header": "\nint_exprs.11.wasm:\tfile format wasm 0x1\n\nSections:\n\n     Type start=0x0000000a end=0x00000015 (size=0x0000000b) count: 2\n Function start=0x00000017 end=0x0000001c (size=0x00000005) count: 4\n   Export start=0x0000001e end=0x00000057 (size=0x00000039) count: 4\n     Code start=0x00000059 end=0x0000007a (size=0x00000021) count: 4\n",
      "details": "\nint_exprs.11.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nType[2]:\n - type[0] (i32) -> i32\n - type[1] (i64) -> i64\nFunction[4]:\n - func[0] sig=0 <i32.div_s_0>\n - func[1] sig=0 <i32.div_u_0>\n - func[2] sig=1 <i64.div_s_0>\n - func[3] sig=1 <i64.div_u_0>\nExport[4]:\n - func[0] <i32.div_s_0> -> \"i32.div_s_0\"\n - func[1] <i32.div_u_0> -> \"i32.div_u_0\"\n - func[2] <i64.div_s_0> -> \"i64.div_s_0\"\n - func[3] <i64.div_u_0> -> \"i64.div_u_0\"\nCode[4]:\n - func[0] size=7 <i32.div_s_0>\n - func[1] size=7 <i32.div_u_0>\n - func[2] size=7 <i64.div_s_0>\n - func[3] size=7 <i64.div_u_0>\n",
      "disassemble": "\nint_exprs.11.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n00005b func[0] <i32.div_s_0>:\n 00005c: 20 00                      | local.get 0\n 00005e: 41 00                      | i32.const 0\n 000060: 6d                         | i32.div_s\n 000061: 0b                         | end\n000063 func[1] <i32.div_u_0>:\n 000064: 20 00                      | local.get 0\n 000066: 41 00                      | i32.const 0\n 000068: 6e                         | i32.div_u\n 000069: 0b                         | end\n00006b func[2] <i64.div_s_0>:\n 00006c: 20 00                      | local.get 0\n 00006e: 42 00                      | i64.const 0\n 000070: 7f                         | i64.div_s\n 000071: 0b                         | end\n000073 func[3] <i64.div_u_0>:\n 000074: 20 00                      | local.get 0\n 000076: 42 00                      | i64.const 0\n 000078: 80                         | i64.div_u\n 000079: 0b                         | end\n"
    },
    "int_exprs.12.wasm": {
      "header": "\nint_exprs.12.wasm:\tfile format wasm 0x1\n\nSections:\n\n     Type start=0x0000000a end=0x00000015 (size=0x0000000b) count: 2\n Function start=0x00000017 end=0x0000001c (size=0x00000005) count: 4\n   Export start=0x0000001e end=0x00000057 (size=0x00000039) count: 4\n     Code start=0x00000059 end=0x0000007a (size=0x00000021) count: 4\n",
      "details": "\nint_exprs.12.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nType[2]:\n - type[0] (i32) -> i32\n - type[1] (i64) -> i64\nFunction[4]:\n - func[0] sig=0 <i32.div_s_3>\n - func[1] sig=0 <i32.div_u_3>\n - func[2] sig=1 <i64.div_s_3>\n - func[3] sig=1 <i64.div_u_3>\nExport[4]:\n - func[0] <i32.div_s_3> -> \"i32.div_s_3\"\n - func[1] <i32.div_u_3> -> \"i32.div_u_3\"\n - func[2] <i64.div_s_3> -> \"i64.div_s_3\"\n - func[3] <i64.div_u_3> -> \"i64.div_u_3\"\nCode[4]:\n - func[0] size=7 <i32.div_s_3>\n - func[1] size=7 <i32.div_u_3>\n - func[2] size=7 <i64.div_s_3>\n - func[3] size=7 <i64.div_u_3>\n",
      "disassemble": "\nint_exprs.12.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n00005b func[0] <i32.div_s_3>:\n 00005c: 20 00                      | local.get 0\n 00005e: 41 03                      | i32.const 3\n 000060: 6d                         | i32.div_s\n 000061: 0b                         | end\n000063 func[1] <i32.div_u_3>:\n 000064: 20 00                      | local.get 0\n 000066: 41 03                      | i32.const 3\n 000068: 6e                         | i32.div_u\n 000069: 0b                         | end\n00006b func[2] <i64.div_s_3>:\n 00006c: 20 00                      | local.get 0\n 00006e: 42 03                      | i64.const 3\n 000070: 7f                         | i64.div_s\n 000071: 0b                         | end\n000073 func[3] <i64.div_u_3>:\n 000074: 20 00                      | local.get 0\n 000076: 42 03                      | i64.const 3\n 000078: 80                         | i64.div_u\n 000079: 0b                         | end\n"
    },
    "int_exprs.13.wasm": {
      "header": "\nint_exprs.13.wasm:\tfile format wasm 0x1\n\nSections:\n\n     Type start=0x0000000a end=0x00000015 (size=0x0000000b) count: 2\n Function start=0x00000017 end=0x0000001c (size=0x00000005) count: 4\n   Export start=0x0000001e end=0x00000057 (size=0x00000039) count: 4\n     Code start=0x00000059 end=0x0000007a (size=0x00000021) count: 4\n",
      "details": "\nint_exprs.13.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nType[2]:\n - type[0] (i32) -> i32\n - type[1] (i64) -> i64\nFunction[4]:\n - func[0] sig=0 <i32.div_s_5>\n - func[1] sig=0 <i32.div_u_5>\n - func[2] sig=1 <i64.div_s_5>\n - func[3] sig=1 <i64.div_u_5>\nExport[4]:\n - func[0] <i32.div_s_5> -> \"i32.div_s_5\"\n - func[1] <i32.div_u_5> -> \"i32.div_u_5\"\n - func[2] <i64.div_s_5> -> \"i64.div_s_5\"\n - func[3] <i64.div_u_5> -> \"i64.div_u_5\"\nCode[4]:\n - func[0] size=7 <i32.div_s_5>\n - func[1] size=7 <i32.div_u_5>\n - func[2] size=7 <i64.div_s_5>\n - func[3] size=7 <i64.div_u_5>\n",
      "disassemble": "\nint_exprs.13.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n00005b func[0] <i32.div_s_5>:\n 00005c: 20 00                      | local.get 0\n 00005e: 41 05                      | i32.const 5\n 000060: 6d                         | i32.div_s\n 000061: 0b                         | end\n000063 func[1] <i32.div_u_5>:\n 000064: 20 00                      | local.get 0\n 000066: 41 05                      | i32.const 5\n 000068: 6e                         | i32.div_u\n 000069: 0b                         | end\n00006b func[2] <i64.div_s_5>:\n 00006c: 20 00                      | local.get 0\n 00006e: 42 05                      | i64.const 5\n 000070: 7f                         | i64.div_s\n 000071: 0b                         | end\n000073 func[3] <i64.div_u_5>:\n 000074: 20 00                      | local.get 0\n 000076: 42 05                      | i64.const 5\n 000078: 80                         | i64.div_u\n 000079: 0b                         | end\n"
    },
    "int_exprs.14.wasm": {
      "header": "\nint_exprs.14.wasm:\tfile format wasm 0x1\n\nSections:\n\n     Type start=0x0000000a end=0x00000015 (size=0x0000000b) count: 2\n Function start=0x00000017 end=0x0000001c (size=0x00000005) count: 4\n   Export start=0x0000001e end=0x00000057 (size=0x00000039) count: 4\n     Code start=0x00000059 end=0x0000007a (size=0x00000021) count: 4\n",
      "details": "\nint_exprs.14.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nType[2]:\n - type[0] (i32) -> i32\n - type[1] (i64) -> i64\nFunction[4]:\n - func[0] sig=0 <i32.div_s_7>\n - func[1] sig=0 <i32.div_u_7>\n - func[2] sig=1 <i64.div_s_7>\n - func[3] sig=1 <i64.div_u_7>\nExport[4]:\n - func[0] <i32.div_s_7> -> \"i32.div_s_7\"\n - func[1] <i32.div_u_7> -> \"i32.div_u_7\"\n - func[2] <i64.div_s_7> -> \"i64.div_s_7\"\n - func[3] <i64.div_u_7> -> \"i64.div_u_7\"\nCode[4]:\n - func[0] size=7 <i32.div_s_7>\n - func[1] size=7 <i32.div_u_7>\n - func[2] size=7 <i64.div_s_7>\n - func[3] size=7 <i64.div_u_7>\n",
      "disassemble": "\nint_exprs.14.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n00005b func[0] <i32.div_s_7>:\n 00005c: 20 00                      | local.get 0\n 00005e: 41 07                      | i32.const 7\n 000060: 6d                         | i32.div_s\n 000061: 0b                         | end\n000063 func[1] <i32.div_u_7>:\n 000064: 20 00                      | local.get 0\n 000066: 41 07                      | i32.const 7\n 000068: 6e                         | i32.div_u\n 000069: 0b                         | end\n00006b func[2] <i64.div_s_7>:\n 00006c: 20 00                      | local.get 0\n 00006e: 42 07                      | i64.const 7\n 000070: 7f                         | i64.div_s\n 000071: 0b                         | end\n000073 func[3] <i64.div_u_7>:\n 000074: 20 00                      | local.get 0\n 000076: 42 07                      | i64.const 7\n 000078: 80                         | i64.div_u\n 000079: 0b                         | end\n"
    },
    "int_exprs.15.wasm": {
      "header": "\nint_exprs.15.wasm:\tfile format wasm 0x1\n\nSections:\n\n     Type start=0x0000000a end=0x00000015 (size=0x0000000b) count: 2\n Function start=0x00000017 end=0x0000001c (size=0x00000005) count: 4\n   Export start=0x0000001e end=0x00000057 (size=0x00000039) count: 4\n     Code start=0x00000059 end=0x0000007a (size=0x00000021) count: 4\n",
      "details": "\nint_exprs.15.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nType[2]:\n - type[0] (i32) -> i32\n - type[1] (i64) -> i64\nFunction[4]:\n - func[0] sig=0 <i32.rem_s_3>\n - func[1] sig=0 <i32.rem_u_3>\n - func[2] sig=1 <i64.rem_s_3>\n - func[3] sig=1 <i64.rem_u_3>\nExport[4]:\n - func[0] <i32.rem_s_3> -> \"i32.rem_s_3\"\n - func[1] <i32.rem_u_3> -> \"i32.rem_u_3\"\n - func[2] <i64.rem_s_3> -> \"i64.rem_s_3\"\n - func[3] <i64.rem_u_3> -> \"i64.rem_u_3\"\nCode[4]:\n - func[0] size=7 <i32.rem_s_3>\n - func[1] size=7 <i32.rem_u_3>\n - func[2] size=7 <i64.rem_s_3>\n - func[3] size=7 <i64.rem_u_3>\n",
      "disassemble": "\nint_exprs.15.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n00005b func[0] <i32.rem_s_3>:\n 00005c: 20 00                      | local.get 0\n 00005e: 41 03                      | i32.const 3\n 000060: 6f                         | i32.rem_s\n 000061: 0b                         | end\n000063 func[1] <i32.rem_u_3>:\n 000064: 20 00                      | local.get 0\n 000066: 41 03                      | i32.const 3\n 000068: 70                         | i32.rem_u\n 000069: 0b                         | end\n00006b func[2] <i64.rem_s_3>:\n 00006c: 20 00                      | local.get 0\n 00006e: 42 03                      | i64.const 3\n 000070: 81                         | i64.rem_s\n 000071: 0b                         | end\n000073 func[3] <i64.rem_u_3>:\n 000074: 20 00                      | local.get 0\n 000076: 42 03                      | i64.const 3\n 000078: 82                         | i64.rem_u\n 000079: 0b                         | end\n"
    },
    "int_exprs.16.wasm": {
      "header": "\nint_exprs.16.wasm:\tfile format wasm 0x1\n\nSections:\n\n     Type start=0x0000000a end=0x00000015 (size=0x0000000b) count: 2\n Function start=0x00000017 end=0x0000001c (size=0x00000005) count: 4\n   Export start=0x0000001e end=0x00000057 (size=0x00000039) count: 4\n     Code start=0x00000059 end=0x0000007a (size=0x00000021) count: 4\n",
      "details": "\nint_exprs.16.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nType[2]:\n - type[0] (i32) -> i32\n - type[1] (i64) -> i64\nFunction[4]:\n - func[0] sig=0 <i32.rem_s_5>\n - func[1] sig=0 <i32.rem_u_5>\n - func[2] sig=1 <i64.rem_s_5>\n - func[3] sig=1 <i64.rem_u_5>\nExport[4]:\n - func[0] <i32.rem_s_5> -> \"i32.rem_s_5\"\n - func[1] <i32.rem_u_5> -> \"i32.rem_u_5\"\n - func[2] <i64.rem_s_5> -> \"i64.rem_s_5\"\n - func[3] <i64.rem_u_5> -> \"i64.rem_u_5\"\nCode[4]:\n - func[0] size=7 <i32.rem_s_5>\n - func[1] size=7 <i32.rem_u_5>\n - func[2] size=7 <i64.rem_s_5>\n - func[3] size=7 <i64.rem_u_5>\n",
      "disassemble": "\nint_exprs.16.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n00005b func[0] <i32.rem_s_5>:\n 00005c: 20 00                      | local.get 0\n 00005e: 41 05                      | i32.const 5\n 000060: 6f                         | i32.rem_s\n 000061: 0b                         | end\n000063 func[1] <i32.rem_u_5>:\n 000064: 20 00                      | local.get 0\n 000066: 41 05                      | i32.const 5\n 000068: 70                         | i32.rem_u\n 000069: 0b                         | end\n00006b func[2] <i64.rem_s_5>:\n 00006c: 20 00                      | local.get 0\n 00006e: 42 05                      | i64.const 5\n 000070: 81                         | i64.rem_s\n 000071: 0b                         | end\n000073 func[3] <i64.rem_u_5>:\n 000074: 20 00                      | local.get 0\n 000076: 42 05                      | i64.const 5\n 000078: 82                         | i64.rem_u\n 000079: 0b                         | end\n"
    },
    "int_exprs.17.wasm": {
      "header": "\nint_exprs.17.wasm:\tfile format wasm 0x1\n\nSections:\n\n     Type start=0x0000000a end=0x00000015 (size=0x0000000b) count: 2\n Function start=0x00000017 end=0x0000001c (size=0x00000005) count: 4\n   Export start=0x0000001e end=0x00000057 (size=0x00000039) count: 4\n     Code start=0x00000059 end=0x0000007a (size=0x00000021) count: 4\n",
      "details": "\nint_exprs.17.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nType[2]:\n - type[0] (i32) -> i32\n - type[1] (i64) -> i64\nFunction[4]:\n - func[0] sig=0 <i32.rem_s_7>\n - func[1] sig=0 <i32.rem_u_7>\n - func[2] sig=1 <i64.rem_s_7>\n - func[3] sig=1 <i64.rem_u_7>\nExport[4]:\n - func[0] <i32.rem_s_7> -> \"i32.rem_s_7\"\n - func[1] <i32.rem_u_7> -> \"i32.rem_u_7\"\n - func[2] <i64.rem_s_7> -> \"i64.rem_s_7\"\n - func[3] <i64.rem_u_7> -> \"i64.rem_u_7\"\nCode[4]:\n - func[0] size=7 <i32.rem_s_7>\n - func[1] size=7 <i32.rem_u_7>\n - func[2] size=7 <i64.rem_s_7>\n - func[3] size=7 <i64.rem_u_7>\n",
      "disassemble": "\nint_exprs.17.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n00005b func[0] <i32.rem_s_7>:\n 00005c: 20 00                      | local.get 0\n 00005e: 41 07                      | i32.const 7\n 000060: 6f                         | i32.rem_s\n 000061: 0b                         | end\n000063 func[1] <i32.rem_u_7>:\n 000064: 20 00                      | local.get 0\n 000066: 41 07                      | i32.const 7\n 000068: 70                         | i32.rem_u\n 000069: 0b                         | end\n00006b func[2] <i64.rem_s_7>:\n 00006c: 20 00                      | local.get 0\n 00006e: 42 07                      | i64.const 7\n 000070: 81                         | i64.rem_s\n 000071: 0b                         | end\n000073 func[3] <i64.rem_u_7>:\n 000074: 20 00                      | local.get 0\n 000076: 42 07                      | i64.const 7\n 000078: 82                         | i64.rem_u\n 000079: 0b                         | end\n"
    },
    "int_exprs.18.wasm": {
      "header": "\nint_exprs.18.wasm:\tfile format wasm 0x1\n\nSections:\n\n     Type start=0x0000000a end=0x00000015 (size=0x0000000b) count: 2\n Function start=0x00000017 end=0x0000001a (size=0x00000003) count: 2\n   Export start=0x0000001c end=0x0000004b (size=0x0000002f) count: 2\n     Code start=0x0000004d end=0x0000005e (size=0x00000011) count: 2\n",
      "details": "\nint_exprs.18.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nType[2]:\n - type[0] (i32) -> i32\n - type[1] (i64) -> i64\nFunction[2]:\n - func[0] sig=0 <i32.no_fold_div_neg1>\n - func[1] sig=1 <i64.no_fold_div_neg1>\nExport[2]:\n - func[0] <i32.no_fold_div_neg1> -> \"i32.no_fold_div_neg1\"\n - func[1] <i64.no_fold_div_neg1> -> \"i64.no_fold_div_neg1\"\nCode[2]:\n - func[0] size=7 <i32.no_fold_div_neg1>\n - func[1] size=7 <i64.no_fold_div_neg1>\n",
      "disassemble": "\nint_exprs.18.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n00004f func[0] <i32.no_fold_div_neg1>:\n 000050: 20 00                      | local.get 0\n 000052: 41 7f                      | i32.const 4294967295\n 000054: 6d                         | i32.div_s\n 000055: 0b                         | end\n000057 func[1] <i64.no_fold_div_neg1>:\n 000058: 20 00                      | local.get 0\n 00005a: 42 7f                      | i64.const 18446744073709551615\n 00005c: 7f                         | i64.div_s\n 00005d: 0b                         | end\n"
    }
  }
}
