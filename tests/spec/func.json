{
  "bin": {
    "func.0.wasm": "AGFzbQEAAAABvAEcYAAAYAAAYAABf2ABfwBgA398fwF/YAAAYAN/fH4AYAJ/fABgBX99fn98AGAAA398fWAAAn98YAAFf31+f3xgBH99fn8Df35/YAABfmAAAX1gAAF8YAJ/fwF/YAJ+fgF+YAJ9fQF9YAJ8fAF8YAZ9f35/fH8BfGAAA39/f2AAAn9+YAF/AX9gAX8Cf35gAX8Cf39gAAJ/f2ARf359fX98fX9/f318fHx/f30QfH1/f39+fX9/fXx8f31/fANiYQAAAAAAAAAAAAAAAAAAAwMGBwgAAAIJCgsBAgMEAgMEAAUMAAINDg8CDQ4PDxAREhMQERITFAAAAg0ODwoVAAIWAAINDg8KFQIWAAINDg8KFQIWAxcYAxcYAxcZGwINDg8HlAlGAWYAAgFnAAQKdHlwZS11c2UtMQAZCnR5cGUtdXNlLTIAGgp0eXBlLXVzZS0zABsKdHlwZS11c2UtNAAcCnR5cGUtdXNlLTUAHQp0eXBlLXVzZS02AB4KdHlwZS11c2UtNwAfD2xvY2FsLWZpcnN0LWkzMgAkD2xvY2FsLWZpcnN0LWk2NAAlD2xvY2FsLWZpcnN0LWYzMgAmD2xvY2FsLWZpcnN0LWY2NAAnEGxvY2FsLXNlY29uZC1pMzIAKBBsb2NhbC1zZWNvbmQtaTY0ACkQbG9jYWwtc2Vjb25kLWYzMgAqEGxvY2FsLXNlY29uZC1mNjQAKwtsb2NhbC1taXhlZAAsD3BhcmFtLWZpcnN0LWkzMgAtD3BhcmFtLWZpcnN0LWk2NAAuD3BhcmFtLWZpcnN0LWYzMgAvD3BhcmFtLWZpcnN0LWY2NAAwEHBhcmFtLXNlY29uZC1pMzIAMRBwYXJhbS1zZWNvbmQtaTY0ADIQcGFyYW0tc2Vjb25kLWYzMgAzEHBhcmFtLXNlY29uZC1mNjQANAtwYXJhbS1taXhlZAA1BWVtcHR5ADYKdmFsdWUtdm9pZAA3CXZhbHVlLWkzMgA4CXZhbHVlLWk2NAA5CXZhbHVlLWYzMgA6CXZhbHVlLWY2NAA7DXZhbHVlLWkzMi1mNjQAPBF2YWx1ZS1pMzItaTMyLWkzMgA9EHZhbHVlLWJsb2NrLXZvaWQAPg92YWx1ZS1ibG9jay1pMzIAPxN2YWx1ZS1ibG9jay1pMzItaTY0AEAMcmV0dXJuLWVtcHR5AEEKcmV0dXJuLWkzMgBCCnJldHVybi1pNjQAQwpyZXR1cm4tZjMyAEQKcmV0dXJuLWY2NABFDnJldHVybi1pMzItZjY0AEYScmV0dXJuLWkzMi1pMzItaTMyAEcQcmV0dXJuLWJsb2NrLWkzMgBIFHJldHVybi1ibG9jay1pMzItaTY0AEkLYnJlYWstZW1wdHkASglicmVhay1pMzIASwlicmVhay1pNjQATAlicmVhay1mMzIATQlicmVhay1mNjQATg1icmVhay1pMzItZjY0AE8RYnJlYWstaTMyLWkzMi1pMzIAUA9icmVhay1ibG9jay1pMzIAURNicmVhay1ibG9jay1pMzItaTY0AFIRYnJlYWstYnJfaWYtZW1wdHkAUw9icmVhay1icl9pZi1udW0AVBNicmVhay1icl9pZi1udW0tbnVtAFUUYnJlYWstYnJfdGFibGUtZW1wdHkAVhJicmVhay1icl90YWJsZS1udW0AVxZicmVhay1icl90YWJsZS1udW0tbnVtAFgbYnJlYWstYnJfdGFibGUtbmVzdGVkLWVtcHR5AFkZYnJlYWstYnJfdGFibGUtbmVzdGVkLW51bQBaHWJyZWFrLWJyX3RhYmxlLW5lc3RlZC1udW0tbnVtAFsJbGFyZ2Utc2lnAFwOaW5pdC1sb2NhbC1pMzIAXQ5pbml0LWxvY2FsLWk2NABeDmluaXQtbG9jYWwtZjMyAF8OaW5pdC1sb2NhbC1mNjQAYAq3BmECAAsCAAsCAAsCAAsCAAsCAAsCAAsEAQF/CwQBAX8LCAMBfwF8AX4LBgIBfwF8CwwFAX8BfQF+AX8BfAsCAAsCAAsCAAsCAAsCAAsCAAsCAAsCAAsCAAsDAAALAwAACwMAAAsDAAALAgALBABBAAsCAAsEAEEACwQAQQALAgALBABBAAsCAAsCAAsQBgF9AX8BfgF/AXwBfwAACxAGAX0BfwF+AX8BfAF/AAALBgECfyAACwYBAn4gAAsGAQJ9IAALBgECfCAACwYBAn8gAQsGAQJ+IAELBgECfSABCwYBAnwgAQsoBgF9AX8BfgF/AXwBfyAAjBogAUUaIAJQGiADRRogBJoaIAVFGiAECwQAIAALBAAgAAsEACAACwQAIAALBAAgAQsEACABCwQAIAELBAAgAQscACAAjBogAUUaIAJQGiADRRogBJoaIAVFGiAECwIACwQAEAALBQBBzQALBQBC4TwLBwBDZmabQgsLAEThehSuR3FTQAsOAEHNAEQAAAAAAAAcQAsIAEEBQQJBAwsJAAJAEAAQAAsLCgACfxAAQc0ACwsLAAIWEABBAUICCwsDAA8LBgBBzgAPCwYAQsY9DwsIAENmZp1CDwsMAERSuB6F67FTQA8LDwBBzgBEUrgeheuxU0APCwkAQQFBAkEDDwsLAAJ/EABBzQALDwsMAAIWEABBAUICCw8LBAAMAAsHAEHPAAwACwcAQqs+DAALCQBDzcyfQgwACw0ARMP1KFyP8lNADAALEABBzwBEw/UoXI/yU0AMAAsKAEEBQQJBAwwACwwAAn8QAEHNAAsMAAsNAAIWEABBAUICCwwACwYAIAANAAsLAEEyIAANABpBMwsQAEEyQjMgAA0AGhpBM0I0CwkAIAAOAgAAAAsMAEEyIAAOAQAAQTMLEABBMkIzIAAOAQAAQTNCNAsMAAJAIAAOAgABAAsLEwACf0EyIAAOAgABAEEzC0ECagsXAAIaQTJBMyAADgIAAQBBM0F9C2pBNAsiACAFIAIgACAIIAcgASADIAkgBCAGIA0gCyAPIBAgDiAMCwYBAX8gAAsGAQF+IAALBgEBfSAACwYBAXwgAAs=",
    "func.1.wasm": "AGFzbQEAAAABDANgAX8AYAABfGAAAAMGBQEAAAECCikFCwBEAAAAAAAAAAALAgALAgALCwBEAAAAAAAAAAALCQBBABACEAMaCw==",
    "func.10.wat": "KHR5cGUgJHNpZyAoZnVuYyAocGFyYW0gaTMyKSAocmVzdWx0IGkzMikpKShmdW5jIChyZXN1bHQgaTMyKSAocGFyYW0gaTMyKSAodHlwZSAkc2lnKSAoaTMyLmNvbnN0IDApKQ==",
    "func.11.wat": "KGZ1bmMgKHJlc3VsdCBpMzIpIChwYXJhbSBpMzIpIChpMzIuY29uc3QgMCkp",
    "func.12.wat": "KHR5cGUgJHNpZyAoZnVuYykpKGZ1bmMgKHR5cGUgJHNpZykgKHJlc3VsdCBpMzIpIChpMzIuY29uc3QgMCkp",
    "func.13.wat": "KHR5cGUgJHNpZyAoZnVuYyAocGFyYW0gaTMyKSAocmVzdWx0IGkzMikpKShmdW5jICh0eXBlICRzaWcpIChyZXN1bHQgaTMyKSAoaTMyLmNvbnN0IDApKQ==",
    "func.14.wat": "KHR5cGUgJHNpZyAoZnVuYyAocGFyYW0gaTMyKSAocmVzdWx0IGkzMikpKShmdW5jICh0eXBlICRzaWcpIChwYXJhbSBpMzIpIChpMzIuY29uc3QgMCkp",
    "func.15.wat": "KHR5cGUgJHNpZyAoZnVuYyAocGFyYW0gaTMyIGkzMikgKHJlc3VsdCBpMzIpKSkoZnVuYyAodHlwZSAkc2lnKSAocGFyYW0gaTMyKSAocmVzdWx0IGkzMikgKHVucmVhY2hhYmxlKSk=",
    "func.16.wasm": "AGFzbQEAAAABBQFgAAF+AwIBAAoIAQYBAX8gAAs=",
    "func.17.wasm": "AGFzbQEAAAABBAFgAAADAgEACgkBBwEBfSAARQs=",
    "func.18.wasm": "AGFzbQEAAAABBAFgAAADAgEACgsBCQIBfAF+IAGaCw==",
    "func.19.wasm": "AGFzbQEAAAABBgFgAX8BfgMCAQAKBgEEACAACw==",
    "func.2.wasm": "AGFzbQEAAAABCQJgAX8AYAABfAMFBAEAAQIKHwQLAEQAAAAAAAAAAAsCAAsLAEQAAAAAAADwPwsCAAs=",
    "func.20.wasm": "AGFzbQEAAAABBQFgAX0AAwIBAAoHAQUAIABFCw==",
    "func.21.wasm": "AGFzbQEAAAABBgFgAnx+AAMCAQAKBwEFACABmgs=",
    "func.22.wasm": "AGFzbQEAAAABBQFgAAF/AwIBAAoEAQIACw==",
    "func.23.wasm": "AGFzbQEAAAABBQFgAAF+AwIBAAoEAQIACw==",
    "func.24.wasm": "AGFzbQEAAAABBQFgAAF9AwIBAAoEAQIACw==",
    "func.25.wasm": "AGFzbQEAAAABBQFgAAF8AwIBAAoEAQIACw==",
    "func.26.wasm": "AGFzbQEAAAABBgFgAAJ8fwMCAQAKBAECAAs=",
    "func.27.wasm": "AGFzbQEAAAABBQFgAAF/AwIBAAoFAQMAAQs=",
    "func.28.wasm": "AGFzbQEAAAABBgFgAAJ/fwMCAQAKBQEDAAEL",
    "func.29.wasm": "AGFzbQEAAAABBAFgAAADAgEACgYBBABBAAs=",
    "func.3.wat": "KGZ1bmMgJGYgKHJlc3VsdCBmNjQpIChmNjQuY29uc3QgMCkpKGZ1bmMgJGcgKHBhcmFtIGkzMikpKGZ1bmMgJGggKHJlc3VsdCBmNjQpIChmNjQuY29uc3QgMSkpKHR5cGUgJHQgKGZ1bmMgKHBhcmFtIGkzMikpKShmdW5jICh0eXBlIDIpIChwYXJhbSBpMzIpKQ==",
    "func.30.wasm": "AGFzbQEAAAABBAFgAAADAgEACggBBgBBAEIACw==",
    "func.31.wasm": "AGFzbQEAAAABBQFgAAF/AwIBAAoJAQcAQwAAAAAL",
    "func.32.wasm": "AGFzbQEAAAABBgFgAAJ9fQMCAQAKCQEHAEMAAAAACw==",
    "func.33.wasm": "AGFzbQEAAAABBQFgAAF9AwIBAAoOAQwAQwAAAABDAAAAAAs=",
    "func.34.wasm": "AGFzbQEAAAABBQFgAAF/AwIBAAoFAQMADws=",
    "func.35.wasm": "AGFzbQEAAAABBgFgAAJ/fwMCAQAKBQEDAA8L",
    "func.36.wasm": "AGFzbQEAAAABBQFgAAF/AwIBAAoGAQQAAQ8L",
    "func.37.wasm": "AGFzbQEAAAABBgFgAAJ/fgMCAQAKBgEEAAEPCw==",
    "func.38.wasm": "AGFzbQEAAAABBQFgAAF/AwIBAAoHAQUAQgAPCw==",
    "func.39.wasm": "AGFzbQEAAAABBgFgAAJ+fgMCAQAKBwEFAEIADws=",
    "func.4.wasm": "AGFzbQEAAAABCgJgAAF/YAF/AX8DBQQBAQEABw0DAWYAAAFnAAIBcAADCiEEBgEBfyABCwYBAX8gAQsGACAAEAELCgEBf0EqIQAgAAs=",
    "func.40.wasm": "AGFzbQEAAAABBQFgAAF/AwIBAAoHAQUAD0EBCw==",
    "func.41.wasm": "AGFzbQEAAAABBgFgAAJ/fwMCAQAKCQEHAA9BAUECCw==",
    "func.42.wasm": "AGFzbQEAAAABBgFgAAJ/fwMCAQAKCQEHAEEBD0ECCw==",
    "func.43.wasm": "AGFzbQEAAAABBQFgAAF/AwIBAAoIAQYAAQ9BAQs=",
    "func.44.wasm": "AGFzbQEAAAABBgFgAAJ/fwMCAQAKCAEGAAEPQQEL",
    "func.45.wasm": "AGFzbQEAAAABBQFgAAF/AwIBAAoJAQcAQgEPQQEL",
    "func.46.wasm": "AGFzbQEAAAABBgFgAAJ/fwMCAQAKCwEJAEIBD0EBQQIL",
    "func.47.wasm": "AGFzbQEAAAABBQFgAAF/AwIBAAoKAQgAQgEPQQEPCw==",
    "func.48.wasm": "AGFzbQEAAAABBgFgAAJ/fwMCAQAKDAEKAEEBD0EBQQIPCw==",
    "func.49.wasm": "AGFzbQEAAAABBQFgAAF/AwIBAAoGAQQADAAL",
    "func.5.wasm": "AGFzbQEAAAABHQRgAABgAABgCH5+fH58fn1/AGAIfH58fnx+fX8AAwwLAAMAAwMCAgAAAAAEBQFwAQcHB3cEGXNpZ25hdHVyZS1leHBsaWNpdC1yZXVzZWQABxlzaWduYXR1cmUtaW1wbGljaXQtcmV1c2VkAAgcc2lnbmF0dXJlLWV4cGxpY2l0LWR1cGxpY2F0ZQAJHHNpZ25hdHVyZS1pbXBsaWNpdC1kdXBsaWNhdGUACgkNAQBBAAsHBAIBBAAFBgqFAgsCAAsCAAsCAAsCAAsCAAsCAAsCAAsMAEEBEQAAQQQRAAALiQEARAAAAAAAAAAAQgBEAAAAAAAAAABCAEQAAAAAAAAAAEIAQwAAAABBAEEAEQMARAAAAAAAAAAAQgBEAAAAAAAAAABCAEQAAAAAAAAAAEIAQwAAAABBAEECEQMARAAAAAAAAAAAQgBEAAAAAAAAAABCAEQAAAAAAAAAAEIAQwAAAABBAEEDEQMACwcAQQERAQALTgBCAEIARAAAAAAAAAAAQgBEAAAAAAAAAABCAEMAAAAAQQBBBRECAEIAQgBEAAAAAAAAAABCAEQAAAAAAAAAAEIAQwAAAABBAEEGEQIACw==",
    "func.50.wasm": "AGFzbQEAAAABBgFgAAJ/fwMCAQAKBgEEAAwACw==",
    "func.51.wasm": "AGFzbQEAAAABBQFgAAF/AwIBAAoLAQkAQwAAAAAMAAs=",
    "func.52.wasm": "AGFzbQEAAAABBgFgAAJ/fwMCAQAKCAEGAEEADAAL",
    "func.53.wasm": "AGFzbQEAAAABBQFgAAF/AwIBAAoIAQYADABBAQs=",
    "func.54.wasm": "AGFzbQEAAAABBgFgAAJ/fwMCAQAKCgEIAAwAQQFBAgs=",
    "func.55.wasm": "AGFzbQEAAAABBQFgAAF/AwIBAAoKAQgAQgEMAEEBCw==",
    "func.56.wasm": "AGFzbQEAAAABBgFgAAJ/fwMCAQAKDAEKAEEBDABBAUECCw==",
    "func.57.wasm": "AGFzbQEAAAABBQFgAAF/AwIBAAoMAQoAQgEMAEEBDAAL",
    "func.58.wasm": "AGFzbQEAAAABBQFgAAF/AwIBAAoNAQsAAkAMAQtBAQwACw==",
    "func.59.wasm": "AGFzbQEAAAABBgFgAAJ/fwMCAQAKDwENAAJADAELQQFBAgwACw==",
    "func.6.wat": "KHR5cGUgJHNpZyAoZnVuYyAocGFyYW0gaTMyKSAocmVzdWx0IGkzMikpKShmdW5jICh0eXBlICRzaWcpIChyZXN1bHQgaTMyKSAocGFyYW0gaTMyKSAoaTMyLmNvbnN0IDApKQ==",
    "func.60.wasm": "AGFzbQEAAAABBQFgAAF/AwIBAAoOAQwAAkABDAELQQEMAAs=",
    "func.61.wasm": "AGFzbQEAAAABBgFgAAJ/fwMCAQAKEAEOAAJAAQwBC0EBQQIMAAs=",
    "func.62.wasm": "AGFzbQEAAAABBQFgAAF/AwIBAAoPAQ0AAkBCAQwBC0EBDAAL",
    "func.63.wasm": "AGFzbQEAAAABBgFgAAJ/fwMCAQAKEQEPAAJ/QQEMAQtBAUECDAAL",
    "func.64.wat": "KGZ1bmMgKG5vcCkgKGxvY2FsIGkzMikp",
    "func.65.wat": "KGZ1bmMgKG5vcCkgKHBhcmFtIGkzMikp",
    "func.66.wat": "KGZ1bmMgKG5vcCkgKHJlc3VsdCBpMzIpKQ==",
    "func.67.wat": "KGZ1bmMgKGxvY2FsIGkzMikgKHBhcmFtIGkzMikp",
    "func.68.wat": "KGZ1bmMgKGxvY2FsIGkzMikgKHJlc3VsdCBpMzIpIChsb2NhbC5nZXQgMCkp",
    "func.69.wat": "KGZ1bmMgKHJlc3VsdCBpMzIpIChwYXJhbSBpMzIpIChsb2NhbC5nZXQgMCkp",
    "func.7.wat": "KHR5cGUgJHNpZyAoZnVuYyAocGFyYW0gaTMyKSAocmVzdWx0IGkzMikpKShmdW5jIChwYXJhbSBpMzIpICh0eXBlICRzaWcpIChyZXN1bHQgaTMyKSAoaTMyLmNvbnN0IDApKQ==",
    "func.70.wat": "KGZ1bmMgJGZvbykoZnVuYyAkZm9vKQ==",
    "func.71.wat": "KGltcG9ydCAiIiAiIiAoZnVuYyAkZm9vKSkoZnVuYyAkZm9vKQ==",
    "func.72.wat": "KGltcG9ydCAiIiAiIiAoZnVuYyAkZm9vKSkoaW1wb3J0ICIiICIiIChmdW5jICRmb28pKQ==",
    "func.73.wat": "KGZ1bmMgKHBhcmFtICRmb28gaTMyKSAocGFyYW0gJGZvbyBpMzIpKQ==",
    "func.74.wat": "KGZ1bmMgKHBhcmFtICRmb28gaTMyKSAobG9jYWwgJGZvbyBpMzIpKQ==",
    "func.75.wat": "KGZ1bmMgKGxvY2FsICRmb28gaTMyKSAobG9jYWwgJGZvbyBpMzIpKQ==",
    "func.8.wat": "KHR5cGUgJHNpZyAoZnVuYyAocGFyYW0gaTMyKSAocmVzdWx0IGkzMikpKShmdW5jIChwYXJhbSBpMzIpIChyZXN1bHQgaTMyKSAodHlwZSAkc2lnKSAoaTMyLmNvbnN0IDApKQ==",
    "func.9.wat": "KHR5cGUgJHNpZyAoZnVuYyAocGFyYW0gaTMyKSAocmVzdWx0IGkzMikpKShmdW5jIChyZXN1bHQgaTMyKSAodHlwZSAkc2lnKSAocGFyYW0gaTMyKSAoaTMyLmNvbnN0IDApKQ=="
  },
  "spec": {"source_filename": "/home/rvagg/git/webassembly/spec/test/core/func.wast",
 "commands": [
  {"type": "module", "line": 3, "filename": "func.0.wasm"}, 
  {"type": "assert_return", "line": 241, "action": {"type": "invoke", "field": "type-use-1", "args": []}, "expected": []}, 
  {"type": "assert_return", "line": 242, "action": {"type": "invoke", "field": "type-use-2", "args": []}, "expected": [{"type": "i32", "value": "0"}]}, 
  {"type": "assert_return", "line": 243, "action": {"type": "invoke", "field": "type-use-3", "args": [{"type": "i32", "value": "1"}]}, "expected": []}, 
  {"type": "assert_return", "line": 245, "action": {"type": "invoke", "field": "type-use-4", "args": [{"type": "i32", "value": "1"}, {"type": "f64", "value": "4607182418800017408"}, {"type": "i32", "value": "1"}]}, "expected": [{"type": "i32", "value": "0"}]}, 
  {"type": "assert_return", "line": 248, "action": {"type": "invoke", "field": "type-use-5", "args": []}, "expected": [{"type": "i32", "value": "0"}]}, 
  {"type": "assert_return", "line": 249, "action": {"type": "invoke", "field": "type-use-6", "args": [{"type": "i32", "value": "1"}]}, "expected": []}, 
  {"type": "assert_return", "line": 251, "action": {"type": "invoke", "field": "type-use-7", "args": [{"type": "i32", "value": "1"}, {"type": "f64", "value": "4607182418800017408"}, {"type": "i32", "value": "1"}]}, "expected": [{"type": "i32", "value": "0"}]}, 
  {"type": "assert_return", "line": 255, "action": {"type": "invoke", "field": "local-first-i32", "args": []}, "expected": [{"type": "i32", "value": "0"}]}, 
  {"type": "assert_return", "line": 256, "action": {"type": "invoke", "field": "local-first-i64", "args": []}, "expected": [{"type": "i64", "value": "0"}]}, 
  {"type": "assert_return", "line": 257, "action": {"type": "invoke", "field": "local-first-f32", "args": []}, "expected": [{"type": "f32", "value": "0"}]}, 
  {"type": "assert_return", "line": 258, "action": {"type": "invoke", "field": "local-first-f64", "args": []}, "expected": [{"type": "f64", "value": "0"}]}, 
  {"type": "assert_return", "line": 259, "action": {"type": "invoke", "field": "local-second-i32", "args": []}, "expected": [{"type": "i32", "value": "0"}]}, 
  {"type": "assert_return", "line": 260, "action": {"type": "invoke", "field": "local-second-i64", "args": []}, "expected": [{"type": "i64", "value": "0"}]}, 
  {"type": "assert_return", "line": 261, "action": {"type": "invoke", "field": "local-second-f32", "args": []}, "expected": [{"type": "f32", "value": "0"}]}, 
  {"type": "assert_return", "line": 262, "action": {"type": "invoke", "field": "local-second-f64", "args": []}, "expected": [{"type": "f64", "value": "0"}]}, 
  {"type": "assert_return", "line": 263, "action": {"type": "invoke", "field": "local-mixed", "args": []}, "expected": [{"type": "f64", "value": "0"}]}, 
  {"type": "assert_return", "line": 266, "action": {"type": "invoke", "field": "param-first-i32", "args": [{"type": "i32", "value": "2"}, {"type": "i32", "value": "3"}]}, "expected": [{"type": "i32", "value": "2"}]}, 
  {"type": "assert_return", "line": 269, "action": {"type": "invoke", "field": "param-first-i64", "args": [{"type": "i64", "value": "2"}, {"type": "i64", "value": "3"}]}, "expected": [{"type": "i64", "value": "2"}]}, 
  {"type": "assert_return", "line": 272, "action": {"type": "invoke", "field": "param-first-f32", "args": [{"type": "f32", "value": "1073741824"}, {"type": "f32", "value": "1077936128"}]}, "expected": [{"type": "f32", "value": "1073741824"}]}, 
  {"type": "assert_return", "line": 275, "action": {"type": "invoke", "field": "param-first-f64", "args": [{"type": "f64", "value": "4611686018427387904"}, {"type": "f64", "value": "4613937818241073152"}]}, "expected": [{"type": "f64", "value": "4611686018427387904"}]}, 
  {"type": "assert_return", "line": 278, "action": {"type": "invoke", "field": "param-second-i32", "args": [{"type": "i32", "value": "2"}, {"type": "i32", "value": "3"}]}, "expected": [{"type": "i32", "value": "3"}]}, 
  {"type": "assert_return", "line": 281, "action": {"type": "invoke", "field": "param-second-i64", "args": [{"type": "i64", "value": "2"}, {"type": "i64", "value": "3"}]}, "expected": [{"type": "i64", "value": "3"}]}, 
  {"type": "assert_return", "line": 284, "action": {"type": "invoke", "field": "param-second-f32", "args": [{"type": "f32", "value": "1073741824"}, {"type": "f32", "value": "1077936128"}]}, "expected": [{"type": "f32", "value": "1077936128"}]}, 
  {"type": "assert_return", "line": 287, "action": {"type": "invoke", "field": "param-second-f64", "args": [{"type": "f64", "value": "4611686018427387904"}, {"type": "f64", "value": "4613937818241073152"}]}, "expected": [{"type": "f64", "value": "4613937818241073152"}]}, 
  {"type": "assert_return", "line": 291, "action": {"type": "invoke", "field": "param-mixed", "args": [{"type": "f32", "value": "1065353216"}, {"type": "i32", "value": "2"}, {"type": "i64", "value": "3"}, {"type": "i32", "value": "4"}, {"type": "f64", "value": "4617878467915022336"}, {"type": "i32", "value": "6"}]}, "expected": [{"type": "f64", "value": "4617878467915022336"}]}, 
  {"type": "assert_return", "line": 298, "action": {"type": "invoke", "field": "empty", "args": []}, "expected": []}, 
  {"type": "assert_return", "line": 299, "action": {"type": "invoke", "field": "value-void", "args": []}, "expected": []}, 
  {"type": "assert_return", "line": 300, "action": {"type": "invoke", "field": "value-i32", "args": []}, "expected": [{"type": "i32", "value": "77"}]}, 
  {"type": "assert_return", "line": 301, "action": {"type": "invoke", "field": "value-i64", "args": []}, "expected": [{"type": "i64", "value": "7777"}]}, 
  {"type": "assert_return", "line": 302, "action": {"type": "invoke", "field": "value-f32", "args": []}, "expected": [{"type": "f32", "value": "1117480550"}]}, 
  {"type": "assert_return", "line": 303, "action": {"type": "invoke", "field": "value-f64", "args": []}, "expected": [{"type": "f64", "value": "4635172994171566817"}]}, 
  {"type": "assert_return", "line": 304, "action": {"type": "invoke", "field": "value-i32-f64", "args": []}, "expected": [{"type": "i32", "value": "77"}, {"type": "f64", "value": "4619567317775286272"}]}, 
  {"type": "assert_return", "line": 305, "action": {"type": "invoke", "field": "value-i32-i32-i32", "args": []}, "expected": [{"type": "i32", "value": "1"}, {"type": "i32", "value": "2"}, {"type": "i32", "value": "3"}]}, 
  {"type": "assert_return", "line": 308, "action": {"type": "invoke", "field": "value-block-void", "args": []}, "expected": []}, 
  {"type": "assert_return", "line": 309, "action": {"type": "invoke", "field": "value-block-i32", "args": []}, "expected": [{"type": "i32", "value": "77"}]}, 
  {"type": "assert_return", "line": 310, "action": {"type": "invoke", "field": "value-block-i32-i64", "args": []}, "expected": [{"type": "i32", "value": "1"}, {"type": "i64", "value": "2"}]}, 
  {"type": "assert_return", "line": 312, "action": {"type": "invoke", "field": "return-empty", "args": []}, "expected": []}, 
  {"type": "assert_return", "line": 313, "action": {"type": "invoke", "field": "return-i32", "args": []}, "expected": [{"type": "i32", "value": "78"}]}, 
  {"type": "assert_return", "line": 314, "action": {"type": "invoke", "field": "return-i64", "args": []}, "expected": [{"type": "i64", "value": "7878"}]}, 
  {"type": "assert_return", "line": 315, "action": {"type": "invoke", "field": "return-f32", "args": []}, "expected": [{"type": "f32", "value": "1117611622"}]}, 
  {"type": "assert_return", "line": 316, "action": {"type": "invoke", "field": "return-f64", "args": []}, "expected": [{"type": "f64", "value": "4635244066603186258"}]}, 
  {"type": "assert_return", "line": 317, "action": {"type": "invoke", "field": "return-i32-f64", "args": []}, "expected": [{"type": "i32", "value": "78"}, {"type": "f64", "value": "4635244066603186258"}]}, 
  {"type": "assert_return", "line": 318, "action": {"type": "invoke", "field": "return-i32-i32-i32", "args": []}, "expected": [{"type": "i32", "value": "1"}, {"type": "i32", "value": "2"}, {"type": "i32", "value": "3"}]}, 
  {"type": "assert_return", "line": 321, "action": {"type": "invoke", "field": "return-block-i32", "args": []}, "expected": [{"type": "i32", "value": "77"}]}, 
  {"type": "assert_return", "line": 322, "action": {"type": "invoke", "field": "return-block-i32-i64", "args": []}, "expected": [{"type": "i32", "value": "1"}, {"type": "i64", "value": "2"}]}, 
  {"type": "assert_return", "line": 324, "action": {"type": "invoke", "field": "break-empty", "args": []}, "expected": []}, 
  {"type": "assert_return", "line": 325, "action": {"type": "invoke", "field": "break-i32", "args": []}, "expected": [{"type": "i32", "value": "79"}]}, 
  {"type": "assert_return", "line": 326, "action": {"type": "invoke", "field": "break-i64", "args": []}, "expected": [{"type": "i64", "value": "7979"}]}, 
  {"type": "assert_return", "line": 327, "action": {"type": "invoke", "field": "break-f32", "args": []}, "expected": [{"type": "f32", "value": "1117768909"}]}, 
  {"type": "assert_return", "line": 328, "action": {"type": "invoke", "field": "break-f64", "args": []}, "expected": [{"type": "f64", "value": "4635315139034805699"}]}, 
  {"type": "assert_return", "line": 329, "action": {"type": "invoke", "field": "break-i32-f64", "args": []}, "expected": [{"type": "i32", "value": "79"}, {"type": "f64", "value": "4635315139034805699"}]}, 
  {"type": "assert_return", "line": 330, "action": {"type": "invoke", "field": "break-i32-i32-i32", "args": []}, "expected": [{"type": "i32", "value": "1"}, {"type": "i32", "value": "2"}, {"type": "i32", "value": "3"}]}, 
  {"type": "assert_return", "line": 333, "action": {"type": "invoke", "field": "break-block-i32", "args": []}, "expected": [{"type": "i32", "value": "77"}]}, 
  {"type": "assert_return", "line": 334, "action": {"type": "invoke", "field": "break-block-i32-i64", "args": []}, "expected": [{"type": "i32", "value": "1"}, {"type": "i64", "value": "2"}]}, 
  {"type": "assert_return", "line": 336, "action": {"type": "invoke", "field": "break-br_if-empty", "args": [{"type": "i32", "value": "0"}]}, "expected": []}, 
  {"type": "assert_return", "line": 337, "action": {"type": "invoke", "field": "break-br_if-empty", "args": [{"type": "i32", "value": "2"}]}, "expected": []}, 
  {"type": "assert_return", "line": 338, "action": {"type": "invoke", "field": "break-br_if-num", "args": [{"type": "i32", "value": "0"}]}, "expected": [{"type": "i32", "value": "51"}]}, 
  {"type": "assert_return", "line": 339, "action": {"type": "invoke", "field": "break-br_if-num", "args": [{"type": "i32", "value": "1"}]}, "expected": [{"type": "i32", "value": "50"}]}, 
  {"type": "assert_return", "line": 340, "action": {"type": "invoke", "field": "break-br_if-num-num", "args": [{"type": "i32", "value": "0"}]}, "expected": [{"type": "i32", "value": "51"}, {"type": "i64", "value": "52"}]}, 
  {"type": "assert_return", "line": 343, "action": {"type": "invoke", "field": "break-br_if-num-num", "args": [{"type": "i32", "value": "1"}]}, "expected": [{"type": "i32", "value": "50"}, {"type": "i64", "value": "51"}]}, 
  {"type": "assert_return", "line": 347, "action": {"type": "invoke", "field": "break-br_table-empty", "args": [{"type": "i32", "value": "0"}]}, "expected": []}, 
  {"type": "assert_return", "line": 348, "action": {"type": "invoke", "field": "break-br_table-empty", "args": [{"type": "i32", "value": "1"}]}, "expected": []}, 
  {"type": "assert_return", "line": 349, "action": {"type": "invoke", "field": "break-br_table-empty", "args": [{"type": "i32", "value": "5"}]}, "expected": []}, 
  {"type": "assert_return", "line": 350, "action": {"type": "invoke", "field": "break-br_table-empty", "args": [{"type": "i32", "value": "4294967295"}]}, "expected": []}, 
  {"type": "assert_return", "line": 351, "action": {"type": "invoke", "field": "break-br_table-num", "args": [{"type": "i32", "value": "0"}]}, "expected": [{"type": "i32", "value": "50"}]}, 
  {"type": "assert_return", "line": 352, "action": {"type": "invoke", "field": "break-br_table-num", "args": [{"type": "i32", "value": "1"}]}, "expected": [{"type": "i32", "value": "50"}]}, 
  {"type": "assert_return", "line": 353, "action": {"type": "invoke", "field": "break-br_table-num", "args": [{"type": "i32", "value": "10"}]}, "expected": [{"type": "i32", "value": "50"}]}, 
  {"type": "assert_return", "line": 354, "action": {"type": "invoke", "field": "break-br_table-num", "args": [{"type": "i32", "value": "4294967196"}]}, "expected": [{"type": "i32", "value": "50"}]}, 
  {"type": "assert_return", "line": 355, "action": {"type": "invoke", "field": "break-br_table-num-num", "args": [{"type": "i32", "value": "0"}]}, "expected": [{"type": "i32", "value": "50"}, {"type": "i64", "value": "51"}]}, 
  {"type": "assert_return", "line": 358, "action": {"type": "invoke", "field": "break-br_table-num-num", "args": [{"type": "i32", "value": "1"}]}, "expected": [{"type": "i32", "value": "50"}, {"type": "i64", "value": "51"}]}, 
  {"type": "assert_return", "line": 361, "action": {"type": "invoke", "field": "break-br_table-num-num", "args": [{"type": "i32", "value": "10"}]}, "expected": [{"type": "i32", "value": "50"}, {"type": "i64", "value": "51"}]}, 
  {"type": "assert_return", "line": 364, "action": {"type": "invoke", "field": "break-br_table-num-num", "args": [{"type": "i32", "value": "4294967196"}]}, "expected": [{"type": "i32", "value": "50"}, {"type": "i64", "value": "51"}]}, 
  {"type": "assert_return", "line": 367, "action": {"type": "invoke", "field": "break-br_table-nested-empty", "args": [{"type": "i32", "value": "0"}]}, "expected": []}, 
  {"type": "assert_return", "line": 368, "action": {"type": "invoke", "field": "break-br_table-nested-empty", "args": [{"type": "i32", "value": "1"}]}, "expected": []}, 
  {"type": "assert_return", "line": 369, "action": {"type": "invoke", "field": "break-br_table-nested-empty", "args": [{"type": "i32", "value": "3"}]}, "expected": []}, 
  {"type": "assert_return", "line": 370, "action": {"type": "invoke", "field": "break-br_table-nested-empty", "args": [{"type": "i32", "value": "4294967294"}]}, "expected": []}, 
  {"type": "assert_return", "line": 372, "action": {"type": "invoke", "field": "break-br_table-nested-num", "args": [{"type": "i32", "value": "0"}]}, "expected": [{"type": "i32", "value": "52"}]}, 
  {"type": "assert_return", "line": 375, "action": {"type": "invoke", "field": "break-br_table-nested-num", "args": [{"type": "i32", "value": "1"}]}, "expected": [{"type": "i32", "value": "50"}]}, 
  {"type": "assert_return", "line": 378, "action": {"type": "invoke", "field": "break-br_table-nested-num", "args": [{"type": "i32", "value": "2"}]}, "expected": [{"type": "i32", "value": "52"}]}, 
  {"type": "assert_return", "line": 381, "action": {"type": "invoke", "field": "break-br_table-nested-num", "args": [{"type": "i32", "value": "4294967293"}]}, "expected": [{"type": "i32", "value": "52"}]}, 
  {"type": "assert_return", "line": 384, "action": {"type": "invoke", "field": "break-br_table-nested-num-num", "args": [{"type": "i32", "value": "0"}]}, "expected": [{"type": "i32", "value": "101"}, {"type": "i32", "value": "52"}]}, 
  {"type": "assert_return", "line": 388, "action": {"type": "invoke", "field": "break-br_table-nested-num-num", "args": [{"type": "i32", "value": "1"}]}, "expected": [{"type": "i32", "value": "50"}, {"type": "i32", "value": "51"}]}, 
  {"type": "assert_return", "line": 392, "action": {"type": "invoke", "field": "break-br_table-nested-num-num", "args": [{"type": "i32", "value": "2"}]}, "expected": [{"type": "i32", "value": "101"}, {"type": "i32", "value": "52"}]}, 
  {"type": "assert_return", "line": 396, "action": {"type": "invoke", "field": "break-br_table-nested-num-num", "args": [{"type": "i32", "value": "4294967293"}]}, "expected": [{"type": "i32", "value": "101"}, {"type": "i32", "value": "52"}]}, 
  {"type": "assert_return", "line": 401, "action": {"type": "invoke", "field": "large-sig", "args": [{"type": "i32", "value": "0"}, {"type": "i64", "value": "1"}, {"type": "f32", "value": "1073741824"}, {"type": "f32", "value": "1077936128"}, {"type": "i32", "value": "4"}, {"type": "f64", "value": "4617315517961601024"}, {"type": "f32", "value": "1086324736"}, {"type": "i32", "value": "7"}, {"type": "i32", "value": "8"}, {"type": "i32", "value": "9"}, {"type": "f32", "value": "1092616192"}, {"type": "f64", "value": "4622382067542392832"}, {"type": "f64", "value": "4622945017495814144"}, {"type": "f64", "value": "4623507967449235456"}, {"type": "i32", "value": "14"}, {"type": "i32", "value": "15"}, {"type": "f32", "value": "1098907648"}]}, "expected": [{"type": "f64", "value": "4617315517961601024"}, {"type": "f32", "value": "1073741824"}, {"type": "i32", "value": "0"}, {"type": "i32", "value": "8"}, {"type": "i32", "value": "7"}, {"type": "i64", "value": "1"}, {"type": "f32", "value": "1077936128"}, {"type": "i32", "value": "9"}, {"type": "i32", "value": "4"}, {"type": "f32", "value": "1086324736"}, {"type": "f64", "value": "4623507967449235456"}, {"type": "f64", "value": "4622382067542392832"}, {"type": "i32", "value": "15"}, {"type": "f32", "value": "1098907648"}, {"type": "i32", "value": "14"}, {"type": "f64", "value": "4622945017495814144"}]}, 
  {"type": "assert_return", "line": 414, "action": {"type": "invoke", "field": "init-local-i32", "args": []}, "expected": [{"type": "i32", "value": "0"}]}, 
  {"type": "assert_return", "line": 415, "action": {"type": "invoke", "field": "init-local-i64", "args": []}, "expected": [{"type": "i64", "value": "0"}]}, 
  {"type": "assert_return", "line": 416, "action": {"type": "invoke", "field": "init-local-f32", "args": []}, "expected": [{"type": "f32", "value": "0"}]}, 
  {"type": "assert_return", "line": 417, "action": {"type": "invoke", "field": "init-local-f64", "args": []}, "expected": [{"type": "f64", "value": "0"}]}, 
  {"type": "module", "line": 422, "filename": "func.1.wasm"}, 
  {"type": "assert_invalid", "line": 436, "filename": "func.2.wasm", "text": "unknown type", "module_type": "binary"}, 
  {"type": "assert_malformed", "line": 448, "filename": "func.3.wat", "text": "unknown type", "module_type": "text"}, 
  {"type": "module", "line": 459, "filename": "func.4.wasm"}, 
  {"type": "assert_return", "line": 483, "action": {"type": "invoke", "field": "f", "args": [{"type": "i32", "value": "42"}]}, "expected": [{"type": "i32", "value": "0"}]}, 
  {"type": "assert_return", "line": 484, "action": {"type": "invoke", "field": "g", "args": [{"type": "i32", "value": "42"}]}, "expected": [{"type": "i32", "value": "0"}]}, 
  {"type": "assert_return", "line": 485, "action": {"type": "invoke", "field": "p", "args": []}, "expected": [{"type": "i32", "value": "42"}]}, 
  {"type": "module", "line": 488, "filename": "func.5.wasm"}, 
  {"type": "assert_return", "line": 551, "action": {"type": "invoke", "field": "signature-explicit-reused", "args": []}, "expected": []}, 
  {"type": "assert_return", "line": 552, "action": {"type": "invoke", "field": "signature-implicit-reused", "args": []}, "expected": []}, 
  {"type": "assert_return", "line": 553, "action": {"type": "invoke", "field": "signature-explicit-duplicate", "args": []}, "expected": []}, 
  {"type": "assert_return", "line": 554, "action": {"type": "invoke", "field": "signature-implicit-duplicate", "args": []}, "expected": []}, 
  {"type": "assert_malformed", "line": 560, "filename": "func.6.wat", "text": "unexpected token", "module_type": "text"}, 
  {"type": "assert_malformed", "line": 567, "filename": "func.7.wat", "text": "unexpected token", "module_type": "text"}, 
  {"type": "assert_malformed", "line": 574, "filename": "func.8.wat", "text": "unexpected token", "module_type": "text"}, 
  {"type": "assert_malformed", "line": 581, "filename": "func.9.wat", "text": "unexpected token", "module_type": "text"}, 
  {"type": "assert_malformed", "line": 588, "filename": "func.10.wat", "text": "unexpected token", "module_type": "text"}, 
  {"type": "assert_malformed", "line": 595, "filename": "func.11.wat", "text": "unexpected token", "module_type": "text"}, 
  {"type": "assert_malformed", "line": 602, "filename": "func.12.wat", "text": "inline function type", "module_type": "text"}, 
  {"type": "assert_malformed", "line": 609, "filename": "func.13.wat", "text": "inline function type", "module_type": "text"}, 
  {"type": "assert_malformed", "line": 616, "filename": "func.14.wat", "text": "inline function type", "module_type": "text"}, 
  {"type": "assert_malformed", "line": 623, "filename": "func.15.wat", "text": "inline function type", "module_type": "text"}, 
  {"type": "assert_invalid", "line": 634, "filename": "func.16.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 638, "filename": "func.17.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 642, "filename": "func.18.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 650, "filename": "func.19.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 654, "filename": "func.20.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 658, "filename": "func.21.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 666, "filename": "func.22.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 670, "filename": "func.23.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 674, "filename": "func.24.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 678, "filename": "func.25.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 682, "filename": "func.26.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 687, "filename": "func.27.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 693, "filename": "func.28.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 699, "filename": "func.29.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 705, "filename": "func.30.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 711, "filename": "func.31.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 717, "filename": "func.32.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 723, "filename": "func.33.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 730, "filename": "func.34.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 736, "filename": "func.35.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 742, "filename": "func.36.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 748, "filename": "func.37.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 754, "filename": "func.38.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 760, "filename": "func.39.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 767, "filename": "func.40.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 773, "filename": "func.41.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 779, "filename": "func.42.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 785, "filename": "func.43.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 791, "filename": "func.44.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 797, "filename": "func.45.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 803, "filename": "func.46.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 809, "filename": "func.47.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 815, "filename": "func.48.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 822, "filename": "func.49.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 828, "filename": "func.50.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 834, "filename": "func.51.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 840, "filename": "func.52.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 846, "filename": "func.53.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 852, "filename": "func.54.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 858, "filename": "func.55.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 864, "filename": "func.56.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 870, "filename": "func.57.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 877, "filename": "func.58.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 883, "filename": "func.59.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 889, "filename": "func.60.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 895, "filename": "func.61.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 901, "filename": "func.62.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 907, "filename": "func.63.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_malformed", "line": 917, "filename": "func.64.wat", "text": "unexpected token", "module_type": "text"}, 
  {"type": "assert_malformed", "line": 921, "filename": "func.65.wat", "text": "unexpected token", "module_type": "text"}, 
  {"type": "assert_malformed", "line": 925, "filename": "func.66.wat", "text": "unexpected token", "module_type": "text"}, 
  {"type": "assert_malformed", "line": 929, "filename": "func.67.wat", "text": "unexpected token", "module_type": "text"}, 
  {"type": "assert_malformed", "line": 933, "filename": "func.68.wat", "text": "unexpected token", "module_type": "text"}, 
  {"type": "assert_malformed", "line": 937, "filename": "func.69.wat", "text": "unexpected token", "module_type": "text"}, 
  {"type": "assert_malformed", "line": 943, "filename": "func.70.wat", "text": "duplicate func", "module_type": "text"}, 
  {"type": "assert_malformed", "line": 947, "filename": "func.71.wat", "text": "duplicate func", "module_type": "text"}, 
  {"type": "assert_malformed", "line": 951, "filename": "func.72.wat", "text": "duplicate func", "module_type": "text"}, 
  {"type": "assert_malformed", "line": 956, "filename": "func.73.wat", "text": "duplicate local", "module_type": "text"}, 
  {"type": "assert_malformed", "line": 958, "filename": "func.74.wat", "text": "duplicate local", "module_type": "text"}, 
  {"type": "assert_malformed", "line": 960, "filename": "func.75.wat", "text": "duplicate local", "module_type": "text"}]},
  "code": [
    "(module (type $sig (func))\n  (func $dummy)\n  (func)\n  (func (export \"f\"))\n  (func $f)\n  (func $h (export \"g\"))\n  (func (local))\n  (func (local) (local))\n  (func (local i32))\n  (func (local $x i32))\n  (func (local i32 f64 i64))\n  (func (local i32) (local f64))\n  (func (local i32 f32) (local $x i64) (local) (local i32 f64))\n  (func (param))\n  (func (param) (param))\n  (func (param i32))\n  (func (param $x i32))\n  (func (param i32 f64 i64))\n  (func (param i32) (param f64))\n  (func (param i32 f32) (param $x i64) (param) (param i32 f64))\n  (func (result))\n  (func (result) (result))\n  (func (result i32) (unreachable))\n  (func (result i32 f64 f32) (unreachable))\n  (func (result i32) (result f64) (unreachable))\n  (func (result i32 f32) (result i64) (result) (result i32 f64) (unreachable)) (type $sig-1 (func)) (type $sig-2 (func (result i32))) (type $sig-3 (func (param $x i32))) (type $sig-4 (func (param i32 f64 i32) (result i32)))\n  (func (export \"type-use-1\") (type $sig-1))\n  (func (export \"type-use-2\") (type $sig-2) (i32.const 0))\n  (func (export \"type-use-3\") (type $sig-3))\n  (func (export \"type-use-4\") (type $sig-4) (i32.const 0))\n  (func (export \"type-use-5\") (type $sig-2) (result i32) (i32.const 0))\n  (func (export \"type-use-6\") (type $sig-3) (param i32))\n  (func (export \"type-use-7\") (type $sig-4) (param i32) (param f64 i32) (result i32) (i32.const 0) )\n  (func (type $sig))\n  (func (type $forward))\n  (func $complex (param i32 f32) (param $x i64) (param) (param i32) (result) (result i32) (result) (result i64 i32) (local f32) (local $y i32) (local i64 i32) (local) (local f64 i32) (unreachable) (unreachable) )\n  (func $complex-sig (type $sig) (local f32) (local $y i32) (local i64 i32) (local) (local f64 i32) (unreachable) (unreachable) ) (type $forward (func))\n  (func (export \"local-first-i32\") (result i32) (local i32 i32) (local.get 0))\n  (func (export \"local-first-i64\") (result i64) (local i64 i64) (local.get 0))\n  (func (export \"local-first-f32\") (result f32) (local f32 f32) (local.get 0))\n  (func (export \"local-first-f64\") (result f64) (local f64 f64) (local.get 0))\n  (func (export \"local-second-i32\") (result i32) (local i32 i32) (local.get 1))\n  (func (export \"local-second-i64\") (result i64) (local i64 i64) (local.get 1))\n  (func (export \"local-second-f32\") (result f32) (local f32 f32) (local.get 1))\n  (func (export \"local-second-f64\") (result f64) (local f64 f64) (local.get 1))\n  (func (export \"local-mixed\") (result f64) (local f32) (local $x i32) (local i64 i32) (local) (local f64 i32) (drop (f32.neg (local.get 0))) (drop (i32.eqz (local.get 1))) (drop (i64.eqz (local.get 2))) (drop (i32.eqz (local.get 3))) (drop (f64.neg (local.get 4))) (drop (i32.eqz (local.get 5))) (local.get 4) )\n  (func (export \"param-first-i32\") (param i32 i32) (result i32) (local.get 0))\n  (func (export \"param-first-i64\") (param i64 i64) (result i64) (local.get 0))\n  (func (export \"param-first-f32\") (param f32 f32) (result f32) (local.get 0))\n  (func (export \"param-first-f64\") (param f64 f64) (result f64) (local.get 0))\n  (func (export \"param-second-i32\") (param i32 i32) (result i32) (local.get 1))\n  (func (export \"param-second-i64\") (param i64 i64) (result i64) (local.get 1))\n  (func (export \"param-second-f32\") (param f32 f32) (result f32) (local.get 1))\n  (func (export \"param-second-f64\") (param f64 f64) (result f64) (local.get 1))\n  (func (export \"param-mixed\") (param f32 i32) (param) (param $x i64) (param i32 f64 i32) (result f64) (drop (f32.neg (local.get 0))) (drop (i32.eqz (local.get 1))) (drop (i64.eqz (local.get 2))) (drop (i32.eqz (local.get 3))) (drop (f64.neg (local.get 4))) (drop (i32.eqz (local.get 5))) (local.get 4) )\n  (func (export \"empty\"))\n  (func (export \"value-void\") (call $dummy))\n  (func (export \"value-i32\") (result i32) (i32.const 77))\n  (func (export \"value-i64\") (result i64) (i64.const 7777))\n  (func (export \"value-f32\") (result f32) (f32.const 77.7))\n  (func (export \"value-f64\") (result f64) (f64.const 77.77))\n  (func (export \"value-i32-f64\") (result i32 f64) (i32.const 77) (f64.const 7))\n  (func (export \"value-i32-i32-i32\") (result i32 i32 i32) (i32.const 1) (i32.const 2) (i32.const 3) )\n  (func (export \"value-block-void\") (block (call $dummy) (call $dummy)))\n  (func (export \"value-block-i32\") (result i32) (block (result i32) (call $dummy) (i32.const 77)) )\n  (func (export \"value-block-i32-i64\") (result i32 i64) (block (result i32 i64) (call $dummy) (i32.const 1) (i64.const 2)) )\n  (func (export \"return-empty\") (return))\n  (func (export \"return-i32\") (result i32) (return (i32.const 78)))\n  (func (export \"return-i64\") (result i64) (return (i64.const 7878)))\n  (func (export \"return-f32\") (result f32) (return (f32.const 78.7)))\n  (func (export \"return-f64\") (result f64) (return (f64.const 78.78)))\n  (func (export \"return-i32-f64\") (result i32 f64) (return (i32.const 78) (f64.const 78.78)) )\n  (func (export \"return-i32-i32-i32\") (result i32 i32 i32) (return (i32.const 1) (i32.const 2) (i32.const 3)) )\n  (func (export \"return-block-i32\") (result i32) (return (block (result i32) (call $dummy) (i32.const 77))) )\n  (func (export \"return-block-i32-i64\") (result i32 i64) (return (block (result i32 i64) (call $dummy) (i32.const 1) (i64.const 2))) )\n  (func (export \"break-empty\") (br 0))\n  (func (export \"break-i32\") (result i32) (br 0 (i32.const 79)))\n  (func (export \"break-i64\") (result i64) (br 0 (i64.const 7979)))\n  (func (export \"break-f32\") (result f32) (br 0 (f32.const 79.9)))\n  (func (export \"break-f64\") (result f64) (br 0 (f64.const 79.79)))\n  (func (export \"break-i32-f64\") (result i32 f64) (br 0 (i32.const 79) (f64.const 79.79)) )\n  (func (export \"break-i32-i32-i32\") (result i32 i32 i32) (br 0 (i32.const 1) (i32.const 2) (i32.const 3)) )\n  (func (export \"break-block-i32\") (result i32) (br 0 (block (result i32) (call $dummy) (i32.const 77))) )\n  (func (export \"break-block-i32-i64\") (result i32 i64) (br 0 (block (result i32 i64) (call $dummy) (i32.const 1) (i64.const 2))) )\n  (func (export \"break-br_if-empty\") (param i32) (br_if 0 (local.get 0)) )\n  (func (export \"break-br_if-num\") (param i32) (result i32) (drop (br_if 0 (i32.const 50) (local.get 0))) (i32.const 51) )\n  (func (export \"break-br_if-num-num\") (param i32) (result i32 i64) (drop (drop (br_if 0 (i32.const 50) (i64.const 51) (local.get 0)))) (i32.const 51) (i64.const 52) )\n  (func (export \"break-br_table-empty\") (param i32) (br_table 0 0 0 (local.get 0)) )\n  (func (export \"break-br_table-num\") (param i32) (result i32) (br_table 0 0 (i32.const 50) (local.get 0)) (i32.const 51) )\n  (func (export \"break-br_table-num-num\") (param i32) (result i32 i64) (br_table 0 0 (i32.const 50) (i64.const 51) (local.get 0)) (i32.const 51) (i64.const 52) )\n  (func (export \"break-br_table-nested-empty\") (param i32) (block (br_table 0 1 0 (local.get 0))) )\n  (func (export \"break-br_table-nested-num\") (param i32) (result i32) (i32.add (block (result i32) (br_table 0 1 0 (i32.const 50) (local.get 0)) (i32.const 51) ) (i32.const 2) ) )\n  (func (export \"break-br_table-nested-num-num\") (param i32) (result i32 i32) (i32.add (block (result i32 i32) (br_table 0 1 0 (i32.const 50) (i32.const 51) (local.get 0)) (i32.const 51) (i32.const -3) ) ) (i32.const 52) )\n  (func (export \"large-sig\") (param i32 i64 f32 f32 i32 f64 f32 i32 i32 i32 f32 f64 f64 f64 i32 i32 f32) (result f64 f32 i32 i32 i32 i64 f32 i32 i32 f32 f64 f64 i32 f32 i32 f64) (local.get 5) (local.get 2) (local.get 0) (local.get 8) (local.get 7) (local.get 1) (local.get 3) (local.get 9) (local.get 4) (local.get 6) (local.get 13) (local.get 11) (local.get 15) (local.get 16) (local.get 14) (local.get 12) )\n  (func (export \"init-local-i32\") (result i32) (local i32) (local.get 0))\n  (func (export \"init-local-i64\") (result i64) (local i64) (local.get 0))\n  (func (export \"init-local-f32\") (result f32) (local f32) (local.get 0))\n  (func (export \"init-local-f64\") (result f64) (local f64) (local.get 0)))",
    "(assert_return (invoke \"type-use-1\"))",
    "(assert_return (invoke \"type-use-2\") (i32.const 0))",
    "(assert_return (invoke \"type-use-3\" (i32.const 1)))",
    "(assert_return (invoke \"type-use-4\" (i32.const 1) (f64.const 1) (i32.const 1)) (i32.const 0))",
    "(assert_return (invoke \"type-use-5\") (i32.const 0))",
    "(assert_return (invoke \"type-use-6\" (i32.const 1)))",
    "(assert_return (invoke \"type-use-7\" (i32.const 1) (f64.const 1) (i32.const 1)) (i32.const 0))",
    "(assert_return (invoke \"local-first-i32\") (i32.const 0))",
    "(assert_return (invoke \"local-first-i64\") (i64.const 0))",
    "(assert_return (invoke \"local-first-f32\") (f32.const 0))",
    "(assert_return (invoke \"local-first-f64\") (f64.const 0))",
    "(assert_return (invoke \"local-second-i32\") (i32.const 0))",
    "(assert_return (invoke \"local-second-i64\") (i64.const 0))",
    "(assert_return (invoke \"local-second-f32\") (f32.const 0))",
    "(assert_return (invoke \"local-second-f64\") (f64.const 0))",
    "(assert_return (invoke \"local-mixed\") (f64.const 0))",
    "(assert_return (invoke \"param-first-i32\" (i32.const 2) (i32.const 3)) (i32.const 2))",
    "(assert_return (invoke \"param-first-i64\" (i64.const 2) (i64.const 3)) (i64.const 2))",
    "(assert_return (invoke \"param-first-f32\" (f32.const 2) (f32.const 3)) (f32.const 2))",
    "(assert_return (invoke \"param-first-f64\" (f64.const 2) (f64.const 3)) (f64.const 2))",
    "(assert_return (invoke \"param-second-i32\" (i32.const 2) (i32.const 3)) (i32.const 3))",
    "(assert_return (invoke \"param-second-i64\" (i64.const 2) (i64.const 3)) (i64.const 3))",
    "(assert_return (invoke \"param-second-f32\" (f32.const 2) (f32.const 3)) (f32.const 3))",
    "(assert_return (invoke \"param-second-f64\" (f64.const 2) (f64.const 3)) (f64.const 3))",
    "(assert_return (invoke \"param-mixed\" (f32.const 1) (i32.const 2) (i64.const 3) (i32.const 4) (f64.const 5.5) (i32.const 6) ) (f64.const 5.5))",
    "(assert_return (invoke \"empty\"))",
    "(assert_return (invoke \"value-void\"))",
    "(assert_return (invoke \"value-i32\") (i32.const 77))",
    "(assert_return (invoke \"value-i64\") (i64.const 7777))",
    "(assert_return (invoke \"value-f32\") (f32.const 77.7))",
    "(assert_return (invoke \"value-f64\") (f64.const 77.77))",
    "(assert_return (invoke \"value-i32-f64\") (i32.const 77) (f64.const 7))",
    "(assert_return (invoke \"value-i32-i32-i32\") (i32.const 1) (i32.const 2) (i32.const 3))",
    "(assert_return (invoke \"value-block-void\"))",
    "(assert_return (invoke \"value-block-i32\") (i32.const 77))",
    "(assert_return (invoke \"value-block-i32-i64\") (i32.const 1) (i64.const 2))",
    "(assert_return (invoke \"return-empty\"))",
    "(assert_return (invoke \"return-i32\") (i32.const 78))",
    "(assert_return (invoke \"return-i64\") (i64.const 7878))",
    "(assert_return (invoke \"return-f32\") (f32.const 78.7))",
    "(assert_return (invoke \"return-f64\") (f64.const 78.78))",
    "(assert_return (invoke \"return-i32-f64\") (i32.const 78) (f64.const 78.78))",
    "(assert_return (invoke \"return-i32-i32-i32\") (i32.const 1) (i32.const 2) (i32.const 3))",
    "(assert_return (invoke \"return-block-i32\") (i32.const 77))",
    "(assert_return (invoke \"return-block-i32-i64\") (i32.const 1) (i64.const 2))",
    "(assert_return (invoke \"break-empty\"))",
    "(assert_return (invoke \"break-i32\") (i32.const 79))",
    "(assert_return (invoke \"break-i64\") (i64.const 7979))",
    "(assert_return (invoke \"break-f32\") (f32.const 79.9))",
    "(assert_return (invoke \"break-f64\") (f64.const 79.79))",
    "(assert_return (invoke \"break-i32-f64\") (i32.const 79) (f64.const 79.79))",
    "(assert_return (invoke \"break-i32-i32-i32\") (i32.const 1) (i32.const 2) (i32.const 3))",
    "(assert_return (invoke \"break-block-i32\") (i32.const 77))",
    "(assert_return (invoke \"break-block-i32-i64\") (i32.const 1) (i64.const 2))",
    "(assert_return (invoke \"break-br_if-empty\" (i32.const 0)))",
    "(assert_return (invoke \"break-br_if-empty\" (i32.const 2)))",
    "(assert_return (invoke \"break-br_if-num\" (i32.const 0)) (i32.const 51))",
    "(assert_return (invoke \"break-br_if-num\" (i32.const 1)) (i32.const 50))",
    "(assert_return (invoke \"break-br_if-num-num\" (i32.const 0)) (i32.const 51) (i64.const 52))",
    "(assert_return (invoke \"break-br_if-num-num\" (i32.const 1)) (i32.const 50) (i64.const 51))",
    "(assert_return (invoke \"break-br_table-empty\" (i32.const 0)))",
    "(assert_return (invoke \"break-br_table-empty\" (i32.const 1)))",
    "(assert_return (invoke \"break-br_table-empty\" (i32.const 5)))",
    "(assert_return (invoke \"break-br_table-empty\" (i32.const -1)))",
    "(assert_return (invoke \"break-br_table-num\" (i32.const 0)) (i32.const 50))",
    "(assert_return (invoke \"break-br_table-num\" (i32.const 1)) (i32.const 50))",
    "(assert_return (invoke \"break-br_table-num\" (i32.const 10)) (i32.const 50))",
    "(assert_return (invoke \"break-br_table-num\" (i32.const -100)) (i32.const 50))",
    "(assert_return (invoke \"break-br_table-num-num\" (i32.const 0)) (i32.const 50) (i64.const 51))",
    "(assert_return (invoke \"break-br_table-num-num\" (i32.const 1)) (i32.const 50) (i64.const 51))",
    "(assert_return (invoke \"break-br_table-num-num\" (i32.const 10)) (i32.const 50) (i64.const 51))",
    "(assert_return (invoke \"break-br_table-num-num\" (i32.const -100)) (i32.const 50) (i64.const 51))",
    "(assert_return (invoke \"break-br_table-nested-empty\" (i32.const 0)))",
    "(assert_return (invoke \"break-br_table-nested-empty\" (i32.const 1)))",
    "(assert_return (invoke \"break-br_table-nested-empty\" (i32.const 3)))",
    "(assert_return (invoke \"break-br_table-nested-empty\" (i32.const -2)))",
    "(assert_return (invoke \"break-br_table-nested-num\" (i32.const 0)) (i32.const 52))",
    "(assert_return (invoke \"break-br_table-nested-num\" (i32.const 1)) (i32.const 50))",
    "(assert_return (invoke \"break-br_table-nested-num\" (i32.const 2)) (i32.const 52))",
    "(assert_return (invoke \"break-br_table-nested-num\" (i32.const -3)) (i32.const 52))",
    "(assert_return (invoke \"break-br_table-nested-num-num\" (i32.const 0)) (i32.const 101) (i32.const 52))",
    "(assert_return (invoke \"break-br_table-nested-num-num\" (i32.const 1)) (i32.const 50) (i32.const 51))",
    "(assert_return (invoke \"break-br_table-nested-num-num\" (i32.const 2)) (i32.const 101) (i32.const 52))",
    "(assert_return (invoke \"break-br_table-nested-num-num\" (i32.const -3)) (i32.const 101) (i32.const 52))",
    "(assert_return (invoke \"large-sig\" (i32.const 0) (i64.const 1) (f32.const 2) (f32.const 3) (i32.const 4) (f64.const 5) (f32.const 6) (i32.const 7) (i32.const 8) (i32.const 9) (f32.const 10) (f64.const 11) (f64.const 12) (f64.const 13) (i32.const 14) (i32.const 15) (f32.const 16) ) (f64.const 5) (f32.const 2) (i32.const 0) (i32.const 8) (i32.const 7) (i64.const 1) (f32.const 3) (i32.const 9) (i32.const 4) (f32.const 6) (f64.const 13) (f64.const 11) (i32.const 15) (f32.const 16) (i32.const 14) (f64.const 12))",
    "(assert_return (invoke \"init-local-i32\") (i32.const 0))",
    "(assert_return (invoke \"init-local-i64\") (i64.const 0))",
    "(assert_return (invoke \"init-local-f32\") (f32.const 0))",
    "(assert_return (invoke \"init-local-f64\") (f64.const 0))",
    "(module \n  (func $f (result f64) (f64.const 0))\n  (func $g (param i32)) (type $t (func (param i32)))\n  (func $i32->void (type 0))\n  (func $void->f64 (type 1) (f64.const 0))\n  (func $check (call $i32->void (i32.const 0)) (drop (call $void->f64)) ))",
    "(assert_invalid (module (func $f (result f64) (f64.const 0)) (func $g (param i32)) (func $h (result f64) (f64.const 1)) (type $t (func (param i32))) (func (type 2)) ) \"unknown type\")",
    "(assert_malformed (module quote \"(func $f (result f64) (f64.const 0))\" \"(func $g (param i32))\" \"(func $h (result f64) (f64.const 1))\" \"(type $t (func (param i32)))\" \"(func (type 2) (param i32))\" ) \"unknown type\")",
    "(module (type $proc (func (result i32))) (type $sig (func (param i32) (result i32)))\n  (func (export \"f\") (type $sig) (local $var i32) (local.get $var) )\n  (func $g (type $sig) (local $var i32) (local.get $var) )\n  (func (export \"g\") (type $sig) (call $g (local.get 0)) )\n  (func (export \"p\") (type $proc) (local $var i32) (local.set 0 (i32.const 42)) (local.get $var) ))",
    "(assert_return (invoke \"f\" (i32.const 42)) (i32.const 0))",
    "(assert_return (invoke \"g\" (i32.const 42)) (i32.const 0))",
    "(assert_return (invoke \"p\") (i32.const 42))",
    "(module (type $sig (func))\n  (func $empty-sig-1)\n  (func $complex-sig-1 (param f64 i64 f64 i64 f64 i64 f32 i32))\n  (func $empty-sig-2)\n  (func $complex-sig-2 (param f64 i64 f64 i64 f64 i64 f32 i32))\n  (func $complex-sig-3 (param f64 i64 f64 i64 f64 i64 f32 i32))\n  (func $complex-sig-4 (param i64 i64 f64 i64 f64 i64 f32 i32))\n  (func $complex-sig-5 (param i64 i64 f64 i64 f64 i64 f32 i32)) (type $empty-sig-duplicate (func)) (type $complex-sig-duplicate (func (param i64 i64 f64 i64 f64 i64 f32 i32))) (table funcref (elem $complex-sig-3 $empty-sig-2 $complex-sig-1 $complex-sig-3 $empty-sig-1 $complex-sig-4 $complex-sig-5 ) )\n  (func (export \"signature-explicit-reused\") (call_indirect (type $sig) (i32.const 1)) (call_indirect (type $sig) (i32.const 4)) )\n  (func (export \"signature-implicit-reused\") (call_indirect (type 3) (f64.const 0) (i64.const 0) (f64.const 0) (i64.const 0) (f64.const 0) (i64.const 0) (f32.const 0) (i32.const 0) (i32.const 0) ) (call_indirect (type 3) (f64.const 0) (i64.const 0) (f64.const 0) (i64.const 0) (f64.const 0) (i64.const 0) (f32.const 0) (i32.const 0) (i32.const 2) ) (call_indirect (type 3) (f64.const 0) (i64.const 0) (f64.const 0) (i64.const 0) (f64.const 0) (i64.const 0) (f32.const 0) (i32.const 0) (i32.const 3) ) )\n  (func (export \"signature-explicit-duplicate\") (call_indirect (type $empty-sig-duplicate) (i32.const 1)) )\n  (func (export \"signature-implicit-duplicate\") (call_indirect (type $complex-sig-duplicate) (i64.const 0) (i64.const 0) (f64.const 0) (i64.const 0) (f64.const 0) (i64.const 0) (f32.const 0) (i32.const 0) (i32.const 5) ) (call_indirect (type $complex-sig-duplicate) (i64.const 0) (i64.const 0) (f64.const 0) (i64.const 0) (f64.const 0) (i64.const 0) (f32.const 0) (i32.const 0) (i32.const 6) ) ))",
    "(assert_return (invoke \"signature-explicit-reused\"))",
    "(assert_return (invoke \"signature-implicit-reused\"))",
    "(assert_return (invoke \"signature-explicit-duplicate\"))",
    "(assert_return (invoke \"signature-implicit-duplicate\"))",
    "(assert_malformed (module quote \"(type $sig (func (param i32) (result i32)))\" \"(func (type $sig) (result i32) (param i32) (i32.const 0))\" ) \"unexpected token\")",
    "(assert_malformed (module quote \"(type $sig (func (param i32) (result i32)))\" \"(func (param i32) (type $sig) (result i32) (i32.const 0))\" ) \"unexpected token\")",
    "(assert_malformed (module quote \"(type $sig (func (param i32) (result i32)))\" \"(func (param i32) (result i32) (type $sig) (i32.const 0))\" ) \"unexpected token\")",
    "(assert_malformed (module quote \"(type $sig (func (param i32) (result i32)))\" \"(func (result i32) (type $sig) (param i32) (i32.const 0))\" ) \"unexpected token\")",
    "(assert_malformed (module quote \"(type $sig (func (param i32) (result i32)))\" \"(func (result i32) (param i32) (type $sig) (i32.const 0))\" ) \"unexpected token\")",
    "(assert_malformed (module quote \"(func (result i32) (param i32) (i32.const 0))\" ) \"unexpected token\")",
    "(assert_malformed (module quote \"(type $sig (func))\" \"(func (type $sig) (result i32) (i32.const 0))\" ) \"inline function type\")",
    "(assert_malformed (module quote \"(type $sig (func (param i32) (result i32)))\" \"(func (type $sig) (result i32) (i32.const 0))\" ) \"inline function type\")",
    "(assert_malformed (module quote \"(type $sig (func (param i32) (result i32)))\" \"(func (type $sig) (param i32) (i32.const 0))\" ) \"inline function type\")",
    "(assert_malformed (module quote \"(type $sig (func (param i32 i32) (result i32)))\" \"(func (type $sig) (param i32) (result i32) (unreachable))\" ) \"inline function type\")",
    "(assert_invalid (module (func $type-local-num-vs-num (result i64) (local i32) (local.get 0))) \"type mismatch\")",
    "(assert_invalid (module (func $type-local-num-vs-num (local f32) (i32.eqz (local.get 0)))) \"type mismatch\")",
    "(assert_invalid (module (func $type-local-num-vs-num (local f64 i64) (f64.neg (local.get 1)))) \"type mismatch\")",
    "(assert_invalid (module (func $type-param-num-vs-num (param i32) (result i64) (local.get 0))) \"type mismatch\")",
    "(assert_invalid (module (func $type-param-num-vs-num (param f32) (i32.eqz (local.get 0)))) \"type mismatch\")",
    "(assert_invalid (module (func $type-param-num-vs-num (param f64 i64) (f64.neg (local.get 1)))) \"type mismatch\")",
    "(assert_invalid (module (func $type-empty-i32 (result i32))) \"type mismatch\")",
    "(assert_invalid (module (func $type-empty-i64 (result i64))) \"type mismatch\")",
    "(assert_invalid (module (func $type-empty-f32 (result f32))) \"type mismatch\")",
    "(assert_invalid (module (func $type-empty-f64 (result f64))) \"type mismatch\")",
    "(assert_invalid (module (func $type-empty-f64-i32 (result f64 i32))) \"type mismatch\")",
    "(assert_invalid (module (func $type-value-void-vs-num (result i32) (nop) )) \"type mismatch\")",
    "(assert_invalid (module (func $type-value-void-vs-nums (result i32 i32) (nop) )) \"type mismatch\")",
    "(assert_invalid (module (func $type-value-num-vs-void (i32.const 0) )) \"type mismatch\")",
    "(assert_invalid (module (func $type-value-nums-vs-void (i32.const 0) (i64.const 0) )) \"type mismatch\")",
    "(assert_invalid (module (func $type-value-num-vs-num (result i32) (f32.const 0) )) \"type mismatch\")",
    "(assert_invalid (module (func $type-value-num-vs-nums (result f32 f32) (f32.const 0) )) \"type mismatch\")",
    "(assert_invalid (module (func $type-value-nums-vs-num (result f32) (f32.const 0) (f32.const 0) )) \"type mismatch\")",
    "(assert_invalid (module (func $type-return-last-empty-vs-num (result i32) (return) )) \"type mismatch\")",
    "(assert_invalid (module (func $type-return-last-empty-vs-nums (result i32 i32) (return) )) \"type mismatch\")",
    "(assert_invalid (module (func $type-return-last-void-vs-num (result i32) (return (nop)) )) \"type mismatch\")",
    "(assert_invalid (module (func $type-return-last-void-vs-nums (result i32 i64) (return (nop)) )) \"type mismatch\")",
    "(assert_invalid (module (func $type-return-last-num-vs-num (result i32) (return (i64.const 0)) )) \"type mismatch\")",
    "(assert_invalid (module (func $type-return-last-num-vs-nums (result i64 i64) (return (i64.const 0)) )) \"type mismatch\")",
    "(assert_invalid (module (func $type-return-empty-vs-num (result i32) (return) (i32.const 1) )) \"type mismatch\")",
    "(assert_invalid (module (func $type-return-empty-vs-nums (result i32 i32) (return) (i32.const 1) (i32.const 2) )) \"type mismatch\")",
    "(assert_invalid (module (func $type-return-partial-vs-nums (result i32 i32) (i32.const 1) (return) (i32.const 2) )) \"type mismatch\")",
    "(assert_invalid (module (func $type-return-void-vs-num (result i32) (return (nop)) (i32.const 1) )) \"type mismatch\")",
    "(assert_invalid (module (func $type-return-void-vs-nums (result i32 i32) (return (nop)) (i32.const 1) )) \"type mismatch\")",
    "(assert_invalid (module (func $type-return-num-vs-num (result i32) (return (i64.const 1)) (i32.const 1) )) \"type mismatch\")",
    "(assert_invalid (module (func $type-return-num-vs-nums (result i32 i32) (return (i64.const 1)) (i32.const 1) (i32.const 2) )) \"type mismatch\")",
    "(assert_invalid (module (func $type-return-first-num-vs-num (result i32) (return (i64.const 1)) (return (i32.const 1)) )) \"type mismatch\")",
    "(assert_invalid (module (func $type-return-first-num-vs-nums (result i32 i32) (return (i32.const 1)) (return (i32.const 1) (i32.const 2)) )) \"type mismatch\")",
    "(assert_invalid (module (func $type-break-last-void-vs-num (result i32) (br 0) )) \"type mismatch\")",
    "(assert_invalid (module (func $type-break-last-void-vs-nums (result i32 i32) (br 0) )) \"type mismatch\")",
    "(assert_invalid (module (func $type-break-last-num-vs-num (result i32) (br 0 (f32.const 0)) )) \"type mismatch\")",
    "(assert_invalid (module (func $type-break-last-num-vs-nums (result i32 i32) (br 0 (i32.const 0)) )) \"type mismatch\")",
    "(assert_invalid (module (func $type-break-void-vs-num (result i32) (br 0) (i32.const 1) )) \"type mismatch\")",
    "(assert_invalid (module (func $type-break-void-vs-nums (result i32 i32) (br 0) (i32.const 1) (i32.const 2) )) \"type mismatch\")",
    "(assert_invalid (module (func $type-break-num-vs-num (result i32) (br 0 (i64.const 1)) (i32.const 1) )) \"type mismatch\")",
    "(assert_invalid (module (func $type-break-num-vs-nums (result i32 i32) (br 0 (i32.const 1)) (i32.const 1) (i32.const 2) )) \"type mismatch\")",
    "(assert_invalid (module (func $type-break-first-num-vs-num (result i32) (br 0 (i64.const 1)) (br 0 (i32.const 1)) )) \"type mismatch\")",
    "(assert_invalid (module (func $type-break-nested-empty-vs-num (result i32) (block (br 1)) (br 0 (i32.const 1)) )) \"type mismatch\")",
    "(assert_invalid (module (func $type-break-nested-empty-vs-nums (result i32 i32) (block (br 1)) (br 0 (i32.const 1) (i32.const 2)) )) \"type mismatch\")",
    "(assert_invalid (module (func $type-break-nested-void-vs-num (result i32) (block (br 1 (nop))) (br 0 (i32.const 1)) )) \"type mismatch\")",
    "(assert_invalid (module (func $type-break-nested-void-vs-nums (result i32 i32) (block (br 1 (nop))) (br 0 (i32.const 1) (i32.const 2)) )) \"type mismatch\")",
    "(assert_invalid (module (func $type-break-nested-num-vs-num (result i32) (block (br 1 (i64.const 1))) (br 0 (i32.const 1)) )) \"type mismatch\")",
    "(assert_invalid (module (func $type-break-nested-num-vs-nums (result i32 i32) (block (result i32) (br 1 (i32.const 1))) (br 0 (i32.const 1) (i32.const 2)) )) \"type mismatch\")",
    "(assert_malformed (module quote \"(func (nop) (local i32))\") \"unexpected token\")",
    "(assert_malformed (module quote \"(func (nop) (param i32))\") \"unexpected token\")",
    "(assert_malformed (module quote \"(func (nop) (result i32))\") \"unexpected token\")",
    "(assert_malformed (module quote \"(func (local i32) (param i32))\") \"unexpected token\")",
    "(assert_malformed (module quote \"(func (local i32) (result i32) (local.get 0))\") \"unexpected token\")",
    "(assert_malformed (module quote \"(func (result i32) (param i32) (local.get 0))\") \"unexpected token\")",
    "(assert_malformed (module quote \"(func $foo)\" \"(func $foo)\") \"duplicate func\")",
    "(assert_malformed (module quote \"(import \\\"\\\" \\\"\\\" (func $foo))\" \"(func $foo)\") \"duplicate func\")",
    "(assert_malformed (module quote \"(import \\\"\\\" \\\"\\\" (func $foo))\" \"(import \\\"\\\" \\\"\\\" (func $foo))\") \"duplicate func\")",
    "(assert_malformed (module quote \"(func (param $foo i32) (param $foo i32))\") \"duplicate local\")",
    "(assert_malformed (module quote \"(func (param $foo i32) (local $foo i32))\") \"duplicate local\")",
    "(assert_malformed (module quote \"(func (local $foo i32) (local $foo i32))\") \"duplicate local\")"
  ],
  "dump": {
    "func.0.wasm": {
      "header": "\nfunc.0.wasm:\tfile format wasm 0x1\n\nSections:\n\n     Type start=0x0000000b end=0x000000c7 (size=0x000000bc) count: 28\n Function start=0x000000c9 end=0x0000012b (size=0x00000062) count: 97\n   Export start=0x0000012e end=0x000005c2 (size=0x00000494) count: 70\n     Code start=0x000005c5 end=0x000008fc (size=0x00000337) count: 97\n",
      "details": "\nfunc.0.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nType[28]:\n - type[0] () -> nil\n - type[1] () -> nil\n - type[2] () -> i32\n - type[3] (i32) -> nil\n - type[4] (i32, f64, i32) -> i32\n - type[5] () -> nil\n - type[6] (i32, f64, i64) -> nil\n - type[7] (i32, f64) -> nil\n - type[8] (i32, f32, i64, i32, f64) -> nil\n - type[9] () -> (i32, f64, f32)\n - type[10] () -> (i32, f64)\n - type[11] () -> (i32, f32, i64, i32, f64)\n - type[12] (i32, f32, i64, i32) -> (i32, i64, i32)\n - type[13] () -> i64\n - type[14] () -> f32\n - type[15] () -> f64\n - type[16] (i32, i32) -> i32\n - type[17] (i64, i64) -> i64\n - type[18] (f32, f32) -> f32\n - type[19] (f64, f64) -> f64\n - type[20] (f32, i32, i64, i32, f64, i32) -> f64\n - type[21] () -> (i32, i32, i32)\n - type[22] () -> (i32, i64)\n - type[23] (i32) -> i32\n - type[24] (i32) -> (i32, i64)\n - type[25] (i32) -> (i32, i32)\n - type[26] () -> (i32, i32)\n - type[27] (i32, i64, f32, f32, i32, f64, f32, i32, i32, i32, f32, f64, f64, f64, i32, i32, f32) -> (f64, f32, i32, i32, i32, i64, f32, i32, i32, f32, f64, f64, i32, f32, i32, f64)\nFunction[97]:\n - func[0] sig=0\n - func[1] sig=0\n - func[2] sig=0 <f>\n - func[3] sig=0\n - func[4] sig=0 <g>\n - func[5] sig=0\n - func[6] sig=0\n - func[7] sig=0\n - func[8] sig=0\n - func[9] sig=0\n - func[10] sig=0\n - func[11] sig=0\n - func[12] sig=0\n - func[13] sig=0\n - func[14] sig=3\n - func[15] sig=3\n - func[16] sig=6\n - func[17] sig=7\n - func[18] sig=8\n - func[19] sig=0\n - func[20] sig=0\n - func[21] sig=2\n - func[22] sig=9\n - func[23] sig=10\n - func[24] sig=11\n - func[25] sig=1 <type-use-1>\n - func[26] sig=2 <type-use-2>\n - func[27] sig=3 <type-use-3>\n - func[28] sig=4 <type-use-4>\n - func[29] sig=2 <type-use-5>\n - func[30] sig=3 <type-use-6>\n - func[31] sig=4 <type-use-7>\n - func[32] sig=0\n - func[33] sig=5\n - func[34] sig=12\n - func[35] sig=0\n - func[36] sig=2 <local-first-i32>\n - func[37] sig=13 <local-first-i64>\n - func[38] sig=14 <local-first-f32>\n - func[39] sig=15 <local-first-f64>\n - func[40] sig=2 <local-second-i32>\n - func[41] sig=13 <local-second-i64>\n - func[42] sig=14 <local-second-f32>\n - func[43] sig=15 <local-second-f64>\n - func[44] sig=15 <local-mixed>\n - func[45] sig=16 <param-first-i32>\n - func[46] sig=17 <param-first-i64>\n - func[47] sig=18 <param-first-f32>\n - func[48] sig=19 <param-first-f64>\n - func[49] sig=16 <param-second-i32>\n - func[50] sig=17 <param-second-i64>\n - func[51] sig=18 <param-second-f32>\n - func[52] sig=19 <param-second-f64>\n - func[53] sig=20 <param-mixed>\n - func[54] sig=0 <empty>\n - func[55] sig=0 <value-void>\n - func[56] sig=2 <value-i32>\n - func[57] sig=13 <value-i64>\n - func[58] sig=14 <value-f32>\n - func[59] sig=15 <value-f64>\n - func[60] sig=10 <value-i32-f64>\n - func[61] sig=21 <value-i32-i32-i32>\n - func[62] sig=0 <value-block-void>\n - func[63] sig=2 <value-block-i32>\n - func[64] sig=22 <value-block-i32-i64>\n - func[65] sig=0 <return-empty>\n - func[66] sig=2 <return-i32>\n - func[67] sig=13 <return-i64>\n - func[68] sig=14 <return-f32>\n - func[69] sig=15 <return-f64>\n - func[70] sig=10 <return-i32-f64>\n - func[71] sig=21 <return-i32-i32-i32>\n - func[72] sig=2 <return-block-i32>\n - func[73] sig=22 <return-block-i32-i64>\n - func[74] sig=0 <break-empty>\n - func[75] sig=2 <break-i32>\n - func[76] sig=13 <break-i64>\n - func[77] sig=14 <break-f32>\n - func[78] sig=15 <break-f64>\n - func[79] sig=10 <break-i32-f64>\n - func[80] sig=21 <break-i32-i32-i32>\n - func[81] sig=2 <break-block-i32>\n - func[82] sig=22 <break-block-i32-i64>\n - func[83] sig=3 <break-br_if-empty>\n - func[84] sig=23 <break-br_if-num>\n - func[85] sig=24 <break-br_if-num-num>\n - func[86] sig=3 <break-br_table-empty>\n - func[87] sig=23 <break-br_table-num>\n - func[88] sig=24 <break-br_table-num-num>\n - func[89] sig=3 <break-br_table-nested-empty>\n - func[90] sig=23 <break-br_table-nested-num>\n - func[91] sig=25 <break-br_table-nested-num-num>\n - func[92] sig=27 <large-sig>\n - func[93] sig=2 <init-local-i32>\n - func[94] sig=13 <init-local-i64>\n - func[95] sig=14 <init-local-f32>\n - func[96] sig=15 <init-local-f64>\nExport[70]:\n - func[2] <f> -> \"f\"\n - func[4] <g> -> \"g\"\n - func[25] <type-use-1> -> \"type-use-1\"\n - func[26] <type-use-2> -> \"type-use-2\"\n - func[27] <type-use-3> -> \"type-use-3\"\n - func[28] <type-use-4> -> \"type-use-4\"\n - func[29] <type-use-5> -> \"type-use-5\"\n - func[30] <type-use-6> -> \"type-use-6\"\n - func[31] <type-use-7> -> \"type-use-7\"\n - func[36] <local-first-i32> -> \"local-first-i32\"\n - func[37] <local-first-i64> -> \"local-first-i64\"\n - func[38] <local-first-f32> -> \"local-first-f32\"\n - func[39] <local-first-f64> -> \"local-first-f64\"\n - func[40] <local-second-i32> -> \"local-second-i32\"\n - func[41] <local-second-i64> -> \"local-second-i64\"\n - func[42] <local-second-f32> -> \"local-second-f32\"\n - func[43] <local-second-f64> -> \"local-second-f64\"\n - func[44] <local-mixed> -> \"local-mixed\"\n - func[45] <param-first-i32> -> \"param-first-i32\"\n - func[46] <param-first-i64> -> \"param-first-i64\"\n - func[47] <param-first-f32> -> \"param-first-f32\"\n - func[48] <param-first-f64> -> \"param-first-f64\"\n - func[49] <param-second-i32> -> \"param-second-i32\"\n - func[50] <param-second-i64> -> \"param-second-i64\"\n - func[51] <param-second-f32> -> \"param-second-f32\"\n - func[52] <param-second-f64> -> \"param-second-f64\"\n - func[53] <param-mixed> -> \"param-mixed\"\n - func[54] <empty> -> \"empty\"\n - func[55] <value-void> -> \"value-void\"\n - func[56] <value-i32> -> \"value-i32\"\n - func[57] <value-i64> -> \"value-i64\"\n - func[58] <value-f32> -> \"value-f32\"\n - func[59] <value-f64> -> \"value-f64\"\n - func[60] <value-i32-f64> -> \"value-i32-f64\"\n - func[61] <value-i32-i32-i32> -> \"value-i32-i32-i32\"\n - func[62] <value-block-void> -> \"value-block-void\"\n - func[63] <value-block-i32> -> \"value-block-i32\"\n - func[64] <value-block-i32-i64> -> \"value-block-i32-i64\"\n - func[65] <return-empty> -> \"return-empty\"\n - func[66] <return-i32> -> \"return-i32\"\n - func[67] <return-i64> -> \"return-i64\"\n - func[68] <return-f32> -> \"return-f32\"\n - func[69] <return-f64> -> \"return-f64\"\n - func[70] <return-i32-f64> -> \"return-i32-f64\"\n - func[71] <return-i32-i32-i32> -> \"return-i32-i32-i32\"\n - func[72] <return-block-i32> -> \"return-block-i32\"\n - func[73] <return-block-i32-i64> -> \"return-block-i32-i64\"\n - func[74] <break-empty> -> \"break-empty\"\n - func[75] <break-i32> -> \"break-i32\"\n - func[76] <break-i64> -> \"break-i64\"\n - func[77] <break-f32> -> \"break-f32\"\n - func[78] <break-f64> -> \"break-f64\"\n - func[79] <break-i32-f64> -> \"break-i32-f64\"\n - func[80] <break-i32-i32-i32> -> \"break-i32-i32-i32\"\n - func[81] <break-block-i32> -> \"break-block-i32\"\n - func[82] <break-block-i32-i64> -> \"break-block-i32-i64\"\n - func[83] <break-br_if-empty> -> \"break-br_if-empty\"\n - func[84] <break-br_if-num> -> \"break-br_if-num\"\n - func[85] <break-br_if-num-num> -> \"break-br_if-num-num\"\n - func[86] <break-br_table-empty> -> \"break-br_table-empty\"\n - func[87] <break-br_table-num> -> \"break-br_table-num\"\n - func[88] <break-br_table-num-num> -> \"break-br_table-num-num\"\n - func[89] <break-br_table-nested-empty> -> \"break-br_table-nested-empty\"\n - func[90] <break-br_table-nested-num> -> \"break-br_table-nested-num\"\n - func[91] <break-br_table-nested-num-num> -> \"break-br_table-nested-num-num\"\n - func[92] <large-sig> -> \"large-sig\"\n - func[93] <init-local-i32> -> \"init-local-i32\"\n - func[94] <init-local-i64> -> \"init-local-i64\"\n - func[95] <init-local-f32> -> \"init-local-f32\"\n - func[96] <init-local-f64> -> \"init-local-f64\"\nCode[97]:\n - func[0] size=2\n - func[1] size=2\n - func[2] size=2 <f>\n - func[3] size=2\n - func[4] size=2 <g>\n - func[5] size=2\n - func[6] size=2\n - func[7] size=4\n - func[8] size=4\n - func[9] size=8\n - func[10] size=6\n - func[11] size=12\n - func[12] size=2\n - func[13] size=2\n - func[14] size=2\n - func[15] size=2\n - func[16] size=2\n - func[17] size=2\n - func[18] size=2\n - func[19] size=2\n - func[20] size=2\n - func[21] size=3\n - func[22] size=3\n - func[23] size=3\n - func[24] size=3\n - func[25] size=2 <type-use-1>\n - func[26] size=4 <type-use-2>\n - func[27] size=2 <type-use-3>\n - func[28] size=4 <type-use-4>\n - func[29] size=4 <type-use-5>\n - func[30] size=2 <type-use-6>\n - func[31] size=4 <type-use-7>\n - func[32] size=2\n - func[33] size=2\n - func[34] size=16\n - func[35] size=16\n - func[36] size=6 <local-first-i32>\n - func[37] size=6 <local-first-i64>\n - func[38] size=6 <local-first-f32>\n - func[39] size=6 <local-first-f64>\n - func[40] size=6 <local-second-i32>\n - func[41] size=6 <local-second-i64>\n - func[42] size=6 <local-second-f32>\n - func[43] size=6 <local-second-f64>\n - func[44] size=40 <local-mixed>\n - func[45] size=4 <param-first-i32>\n - func[46] size=4 <param-first-i64>\n - func[47] size=4 <param-first-f32>\n - func[48] size=4 <param-first-f64>\n - func[49] size=4 <param-second-i32>\n - func[50] size=4 <param-second-i64>\n - func[51] size=4 <param-second-f32>\n - func[52] size=4 <param-second-f64>\n - func[53] size=28 <param-mixed>\n - func[54] size=2 <empty>\n - func[55] size=4 <value-void>\n - func[56] size=5 <value-i32>\n - func[57] size=5 <value-i64>\n - func[58] size=7 <value-f32>\n - func[59] size=11 <value-f64>\n - func[60] size=14 <value-i32-f64>\n - func[61] size=8 <value-i32-i32-i32>\n - func[62] size=9 <value-block-void>\n - func[63] size=10 <value-block-i32>\n - func[64] size=11 <value-block-i32-i64>\n - func[65] size=3 <return-empty>\n - func[66] size=6 <return-i32>\n - func[67] size=6 <return-i64>\n - func[68] size=8 <return-f32>\n - func[69] size=12 <return-f64>\n - func[70] size=15 <return-i32-f64>\n - func[71] size=9 <return-i32-i32-i32>\n - func[72] size=11 <return-block-i32>\n - func[73] size=12 <return-block-i32-i64>\n - func[74] size=4 <break-empty>\n - func[75] size=7 <break-i32>\n - func[76] size=7 <break-i64>\n - func[77] size=9 <break-f32>\n - func[78] size=13 <break-f64>\n - func[79] size=16 <break-i32-f64>\n - func[80] size=10 <break-i32-i32-i32>\n - func[81] size=12 <break-block-i32>\n - func[82] size=13 <break-block-i32-i64>\n - func[83] size=6 <break-br_if-empty>\n - func[84] size=11 <break-br_if-num>\n - func[85] size=16 <break-br_if-num-num>\n - func[86] size=9 <break-br_table-empty>\n - func[87] size=12 <break-br_table-num>\n - func[88] size=16 <break-br_table-num-num>\n - func[89] size=12 <break-br_table-nested-empty>\n - func[90] size=19 <break-br_table-nested-num>\n - func[91] size=23 <break-br_table-nested-num-num>\n - func[92] size=34 <large-sig>\n - func[93] size=6 <init-local-i32>\n - func[94] size=6 <init-local-i64>\n - func[95] size=6 <init-local-f32>\n - func[96] size=6 <init-local-f64>\n",
      "disassemble": "\nfunc.0.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n0005c7 func[0]:\n 0005c8: 0b                         | end\n0005ca func[1]:\n 0005cb: 0b                         | end\n0005cd func[2] <f>:\n 0005ce: 0b                         | end\n0005d0 func[3]:\n 0005d1: 0b                         | end\n0005d3 func[4] <g>:\n 0005d4: 0b                         | end\n0005d6 func[5]:\n 0005d7: 0b                         | end\n0005d9 func[6]:\n 0005da: 0b                         | end\n0005dc func[7]:\n 0005dd: 01 7f                      | local[0] type=i32\n 0005df: 0b                         | end\n0005e1 func[8]:\n 0005e2: 01 7f                      | local[0] type=i32\n 0005e4: 0b                         | end\n0005e6 func[9]:\n 0005e7: 01 7f                      | local[0] type=i32\n 0005e9: 01 7c                      | local[1] type=f64\n 0005eb: 01 7e                      | local[2] type=i64\n 0005ed: 0b                         | end\n0005ef func[10]:\n 0005f0: 01 7f                      | local[0] type=i32\n 0005f2: 01 7c                      | local[1] type=f64\n 0005f4: 0b                         | end\n0005f6 func[11]:\n 0005f7: 01 7f                      | local[0] type=i32\n 0005f9: 01 7d                      | local[1] type=f32\n 0005fb: 01 7e                      | local[2] type=i64\n 0005fd: 01 7f                      | local[3] type=i32\n 0005ff: 01 7c                      | local[4] type=f64\n 000601: 0b                         | end\n000603 func[12]:\n 000604: 0b                         | end\n000606 func[13]:\n 000607: 0b                         | end\n000609 func[14]:\n 00060a: 0b                         | end\n00060c func[15]:\n 00060d: 0b                         | end\n00060f func[16]:\n 000610: 0b                         | end\n000612 func[17]:\n 000613: 0b                         | end\n000615 func[18]:\n 000616: 0b                         | end\n000618 func[19]:\n 000619: 0b                         | end\n00061b func[20]:\n 00061c: 0b                         | end\n00061e func[21]:\n 00061f: 00                         | unreachable\n 000620: 0b                         | end\n000622 func[22]:\n 000623: 00                         | unreachable\n 000624: 0b                         | end\n000626 func[23]:\n 000627: 00                         | unreachable\n 000628: 0b                         | end\n00062a func[24]:\n 00062b: 00                         | unreachable\n 00062c: 0b                         | end\n00062e func[25] <type-use-1>:\n 00062f: 0b                         | end\n000631 func[26] <type-use-2>:\n 000632: 41 00                      | i32.const 0\n 000634: 0b                         | end\n000636 func[27] <type-use-3>:\n 000637: 0b                         | end\n000639 func[28] <type-use-4>:\n 00063a: 41 00                      | i32.const 0\n 00063c: 0b                         | end\n00063e func[29] <type-use-5>:\n 00063f: 41 00                      | i32.const 0\n 000641: 0b                         | end\n000643 func[30] <type-use-6>:\n 000644: 0b                         | end\n000646 func[31] <type-use-7>:\n 000647: 41 00                      | i32.const 0\n 000649: 0b                         | end\n00064b func[32]:\n 00064c: 0b                         | end\n00064e func[33]:\n 00064f: 0b                         | end\n000651 func[34]:\n 000652: 01 7d                      | local[4] type=f32\n 000654: 01 7f                      | local[5] type=i32\n 000656: 01 7e                      | local[6] type=i64\n 000658: 01 7f                      | local[7] type=i32\n 00065a: 01 7c                      | local[8] type=f64\n 00065c: 01 7f                      | local[9] type=i32\n 00065e: 00                         | unreachable\n 00065f: 00                         | unreachable\n 000660: 0b                         | end\n000662 func[35]:\n 000663: 01 7d                      | local[0] type=f32\n 000665: 01 7f                      | local[1] type=i32\n 000667: 01 7e                      | local[2] type=i64\n 000669: 01 7f                      | local[3] type=i32\n 00066b: 01 7c                      | local[4] type=f64\n 00066d: 01 7f                      | local[5] type=i32\n 00066f: 00                         | unreachable\n 000670: 00                         | unreachable\n 000671: 0b                         | end\n000673 func[36] <local-first-i32>:\n 000674: 02 7f                      | local[0..1] type=i32\n 000676: 20 00                      | local.get 0\n 000678: 0b                         | end\n00067a func[37] <local-first-i64>:\n 00067b: 02 7e                      | local[0..1] type=i64\n 00067d: 20 00                      | local.get 0\n 00067f: 0b                         | end\n000681 func[38] <local-first-f32>:\n 000682: 02 7d                      | local[0..1] type=f32\n 000684: 20 00                      | local.get 0\n 000686: 0b                         | end\n000688 func[39] <local-first-f64>:\n 000689: 02 7c                      | local[0..1] type=f64\n 00068b: 20 00                      | local.get 0\n 00068d: 0b                         | end\n00068f func[40] <local-second-i32>:\n 000690: 02 7f                      | local[0..1] type=i32\n 000692: 20 01                      | local.get 1\n 000694: 0b                         | end\n000696 func[41] <local-second-i64>:\n 000697: 02 7e                      | local[0..1] type=i64\n 000699: 20 01                      | local.get 1\n 00069b: 0b                         | end\n00069d func[42] <local-second-f32>:\n 00069e: 02 7d                      | local[0..1] type=f32\n 0006a0: 20 01                      | local.get 1\n 0006a2: 0b                         | end\n0006a4 func[43] <local-second-f64>:\n 0006a5: 02 7c                      | local[0..1] type=f64\n 0006a7: 20 01                      | local.get 1\n 0006a9: 0b                         | end\n0006ab func[44] <local-mixed>:\n 0006ac: 01 7d                      | local[0] type=f32\n 0006ae: 01 7f                      | local[1] type=i32\n 0006b0: 01 7e                      | local[2] type=i64\n 0006b2: 01 7f                      | local[3] type=i32\n 0006b4: 01 7c                      | local[4] type=f64\n 0006b6: 01 7f                      | local[5] type=i32\n 0006b8: 20 00                      | local.get 0\n 0006ba: 8c                         | f32.neg\n 0006bb: 1a                         | drop\n 0006bc: 20 01                      | local.get 1\n 0006be: 45                         | i32.eqz\n 0006bf: 1a                         | drop\n 0006c0: 20 02                      | local.get 2\n 0006c2: 50                         | i64.eqz\n 0006c3: 1a                         | drop\n 0006c4: 20 03                      | local.get 3\n 0006c6: 45                         | i32.eqz\n 0006c7: 1a                         | drop\n 0006c8: 20 04                      | local.get 4\n 0006ca: 9a                         | f64.neg\n 0006cb: 1a                         | drop\n 0006cc: 20 05                      | local.get 5\n 0006ce: 45                         | i32.eqz\n 0006cf: 1a                         | drop\n 0006d0: 20 04                      | local.get 4\n 0006d2: 0b                         | end\n0006d4 func[45] <param-first-i32>:\n 0006d5: 20 00                      | local.get 0\n 0006d7: 0b                         | end\n0006d9 func[46] <param-first-i64>:\n 0006da: 20 00                      | local.get 0\n 0006dc: 0b                         | end\n0006de func[47] <param-first-f32>:\n 0006df: 20 00                      | local.get 0\n 0006e1: 0b                         | end\n0006e3 func[48] <param-first-f64>:\n 0006e4: 20 00                      | local.get 0\n 0006e6: 0b                         | end\n0006e8 func[49] <param-second-i32>:\n 0006e9: 20 01                      | local.get 1\n 0006eb: 0b                         | end\n0006ed func[50] <param-second-i64>:\n 0006ee: 20 01                      | local.get 1\n 0006f0: 0b                         | end\n0006f2 func[51] <param-second-f32>:\n 0006f3: 20 01                      | local.get 1\n 0006f5: 0b                         | end\n0006f7 func[52] <param-second-f64>:\n 0006f8: 20 01                      | local.get 1\n 0006fa: 0b                         | end\n0006fc func[53] <param-mixed>:\n 0006fd: 20 00                      | local.get 0\n 0006ff: 8c                         | f32.neg\n 000700: 1a                         | drop\n 000701: 20 01                      | local.get 1\n 000703: 45                         | i32.eqz\n 000704: 1a                         | drop\n 000705: 20 02                      | local.get 2\n 000707: 50                         | i64.eqz\n 000708: 1a                         | drop\n 000709: 20 03                      | local.get 3\n 00070b: 45                         | i32.eqz\n 00070c: 1a                         | drop\n 00070d: 20 04                      | local.get 4\n 00070f: 9a                         | f64.neg\n 000710: 1a                         | drop\n 000711: 20 05                      | local.get 5\n 000713: 45                         | i32.eqz\n 000714: 1a                         | drop\n 000715: 20 04                      | local.get 4\n 000717: 0b                         | end\n000719 func[54] <empty>:\n 00071a: 0b                         | end\n00071c func[55] <value-void>:\n 00071d: 10 00                      | call 0\n 00071f: 0b                         | end\n000721 func[56] <value-i32>:\n 000722: 41 cd 00                   | i32.const 77\n 000725: 0b                         | end\n000727 func[57] <value-i64>:\n 000728: 42 e1 3c                   | i64.const 7777\n 00072b: 0b                         | end\n00072d func[58] <value-f32>:\n 00072e: 43 66 66 9b 42             | f32.const 0x1.36ccccp+6\n 000733: 0b                         | end\n000735 func[59] <value-f64>:\n 000736: 44 e1 7a 14 ae 47 71 53 40 | f64.const 0x1.37147ae147ae1p+6\n 00073f: 0b                         | end\n000741 func[60] <value-i32-f64>:\n 000742: 41 cd 00                   | i32.const 77\n 000745: 44 00 00 00 00 00 00 1c 40 | f64.const 0x1.cp+2\n 00074e: 0b                         | end\n000750 func[61] <value-i32-i32-i32>:\n 000751: 41 01                      | i32.const 1\n 000753: 41 02                      | i32.const 2\n 000755: 41 03                      | i32.const 3\n 000757: 0b                         | end\n000759 func[62] <value-block-void>:\n 00075a: 02 40                      | block\n 00075c: 10 00                      |   call 0\n 00075e: 10 00                      |   call 0\n 000760: 0b                         | end\n 000761: 0b                         | end\n000763 func[63] <value-block-i32>:\n 000764: 02 7f                      | block i32\n 000766: 10 00                      |   call 0\n 000768: 41 cd 00                   |   i32.const 77\n 00076b: 0b                         | end\n 00076c: 0b                         | end\n00076e func[64] <value-block-i32-i64>:\n 00076f: 02 16                      | block type[22]\n 000771: 10 00                      |   call 0\n 000773: 41 01                      |   i32.const 1\n 000775: 42 02                      |   i64.const 2\n 000777: 0b                         | end\n 000778: 0b                         | end\n00077a func[65] <return-empty>:\n 00077b: 0f                         | return\n 00077c: 0b                         | end\n00077e func[66] <return-i32>:\n 00077f: 41 ce 00                   | i32.const 78\n 000782: 0f                         | return\n 000783: 0b                         | end\n000785 func[67] <return-i64>:\n 000786: 42 c6 3d                   | i64.const 7878\n 000789: 0f                         | return\n 00078a: 0b                         | end\n00078c func[68] <return-f32>:\n 00078d: 43 66 66 9d 42             | f32.const 0x1.3accccp+6\n 000792: 0f                         | return\n 000793: 0b                         | end\n000795 func[69] <return-f64>:\n 000796: 44 52 b8 1e 85 eb b1 53 40 | f64.const 0x1.3b1eb851eb852p+6\n 00079f: 0f                         | return\n 0007a0: 0b                         | end\n0007a2 func[70] <return-i32-f64>:\n 0007a3: 41 ce 00                   | i32.const 78\n 0007a6: 44 52 b8 1e 85 eb b1 53 40 | f64.const 0x1.3b1eb851eb852p+6\n 0007af: 0f                         | return\n 0007b0: 0b                         | end\n0007b2 func[71] <return-i32-i32-i32>:\n 0007b3: 41 01                      | i32.const 1\n 0007b5: 41 02                      | i32.const 2\n 0007b7: 41 03                      | i32.const 3\n 0007b9: 0f                         | return\n 0007ba: 0b                         | end\n0007bc func[72] <return-block-i32>:\n 0007bd: 02 7f                      | block i32\n 0007bf: 10 00                      |   call 0\n 0007c1: 41 cd 00                   |   i32.const 77\n 0007c4: 0b                         | end\n 0007c5: 0f                         | return\n 0007c6: 0b                         | end\n0007c8 func[73] <return-block-i32-i64>:\n 0007c9: 02 16                      | block type[22]\n 0007cb: 10 00                      |   call 0\n 0007cd: 41 01                      |   i32.const 1\n 0007cf: 42 02                      |   i64.const 2\n 0007d1: 0b                         | end\n 0007d2: 0f                         | return\n 0007d3: 0b                         | end\n0007d5 func[74] <break-empty>:\n 0007d6: 0c 00                      | br 0\n 0007d8: 0b                         | end\n0007da func[75] <break-i32>:\n 0007db: 41 cf 00                   | i32.const 79\n 0007de: 0c 00                      | br 0\n 0007e0: 0b                         | end\n0007e2 func[76] <break-i64>:\n 0007e3: 42 ab 3e                   | i64.const 7979\n 0007e6: 0c 00                      | br 0\n 0007e8: 0b                         | end\n0007ea func[77] <break-f32>:\n 0007eb: 43 cd cc 9f 42             | f32.const 0x1.3f999ap+6\n 0007f0: 0c 00                      | br 0\n 0007f2: 0b                         | end\n0007f4 func[78] <break-f64>:\n 0007f5: 44 c3 f5 28 5c 8f f2 53 40 | f64.const 0x1.3f28f5c28f5c3p+6\n 0007fe: 0c 00                      | br 0\n 000800: 0b                         | end\n000802 func[79] <break-i32-f64>:\n 000803: 41 cf 00                   | i32.const 79\n 000806: 44 c3 f5 28 5c 8f f2 53 40 | f64.const 0x1.3f28f5c28f5c3p+6\n 00080f: 0c 00                      | br 0\n 000811: 0b                         | end\n000813 func[80] <break-i32-i32-i32>:\n 000814: 41 01                      | i32.const 1\n 000816: 41 02                      | i32.const 2\n 000818: 41 03                      | i32.const 3\n 00081a: 0c 00                      | br 0\n 00081c: 0b                         | end\n00081e func[81] <break-block-i32>:\n 00081f: 02 7f                      | block i32\n 000821: 10 00                      |   call 0\n 000823: 41 cd 00                   |   i32.const 77\n 000826: 0b                         | end\n 000827: 0c 00                      | br 0\n 000829: 0b                         | end\n00082b func[82] <break-block-i32-i64>:\n 00082c: 02 16                      | block type[22]\n 00082e: 10 00                      |   call 0\n 000830: 41 01                      |   i32.const 1\n 000832: 42 02                      |   i64.const 2\n 000834: 0b                         | end\n 000835: 0c 00                      | br 0\n 000837: 0b                         | end\n000839 func[83] <break-br_if-empty>:\n 00083a: 20 00                      | local.get 0\n 00083c: 0d 00                      | br_if 0\n 00083e: 0b                         | end\n000840 func[84] <break-br_if-num>:\n 000841: 41 32                      | i32.const 50\n 000843: 20 00                      | local.get 0\n 000845: 0d 00                      | br_if 0\n 000847: 1a                         | drop\n 000848: 41 33                      | i32.const 51\n 00084a: 0b                         | end\n00084c func[85] <break-br_if-num-num>:\n 00084d: 41 32                      | i32.const 50\n 00084f: 42 33                      | i64.const 51\n 000851: 20 00                      | local.get 0\n 000853: 0d 00                      | br_if 0\n 000855: 1a                         | drop\n 000856: 1a                         | drop\n 000857: 41 33                      | i32.const 51\n 000859: 42 34                      | i64.const 52\n 00085b: 0b                         | end\n00085d func[86] <break-br_table-empty>:\n 00085e: 20 00                      | local.get 0\n 000860: 0e 02 00 00 00             | br_table 0 0 0\n 000865: 0b                         | end\n000867 func[87] <break-br_table-num>:\n 000868: 41 32                      | i32.const 50\n 00086a: 20 00                      | local.get 0\n 00086c: 0e 01 00 00                | br_table 0 0\n 000870: 41 33                      | i32.const 51\n 000872: 0b                         | end\n000874 func[88] <break-br_table-num-num>:\n 000875: 41 32                      | i32.const 50\n 000877: 42 33                      | i64.const 51\n 000879: 20 00                      | local.get 0\n 00087b: 0e 01 00 00                | br_table 0 0\n 00087f: 41 33                      | i32.const 51\n 000881: 42 34                      | i64.const 52\n 000883: 0b                         | end\n000885 func[89] <break-br_table-nested-empty>:\n 000886: 02 40                      | block\n 000888: 20 00                      |   local.get 0\n 00088a: 0e 02 00 01 00             |   br_table 0 1 0\n 00088f: 0b                         | end\n 000890: 0b                         | end\n000892 func[90] <break-br_table-nested-num>:\n 000893: 02 7f                      | block i32\n 000895: 41 32                      |   i32.const 50\n 000897: 20 00                      |   local.get 0\n 000899: 0e 02 00 01 00             |   br_table 0 1 0\n 00089e: 41 33                      |   i32.const 51\n 0008a0: 0b                         | end\n 0008a1: 41 02                      | i32.const 2\n 0008a3: 6a                         | i32.add\n 0008a4: 0b                         | end\n0008a6 func[91] <break-br_table-nested-num-num>:\n 0008a7: 02 1a                      | block type[26]\n 0008a9: 41 32                      |   i32.const 50\n 0008ab: 41 33                      |   i32.const 51\n 0008ad: 20 00                      |   local.get 0\n 0008af: 0e 02 00 01 00             |   br_table 0 1 0\n 0008b4: 41 33                      |   i32.const 51\n 0008b6: 41 7d                      |   i32.const 4294967293\n 0008b8: 0b                         | end\n 0008b9: 6a                         | i32.add\n 0008ba: 41 34                      | i32.const 52\n 0008bc: 0b                         | end\n0008be func[92] <large-sig>:\n 0008bf: 20 05                      | local.get 5\n 0008c1: 20 02                      | local.get 2\n 0008c3: 20 00                      | local.get 0\n 0008c5: 20 08                      | local.get 8\n 0008c7: 20 07                      | local.get 7\n 0008c9: 20 01                      | local.get 1\n 0008cb: 20 03                      | local.get 3\n 0008cd: 20 09                      | local.get 9\n 0008cf: 20 04                      | local.get 4\n 0008d1: 20 06                      | local.get 6\n 0008d3: 20 0d                      | local.get 13\n 0008d5: 20 0b                      | local.get 11\n 0008d7: 20 0f                      | local.get 15\n 0008d9: 20 10                      | local.get 16\n 0008db: 20 0e                      | local.get 14\n 0008dd: 20 0c                      | local.get 12\n 0008df: 0b                         | end\n0008e1 func[93] <init-local-i32>:\n 0008e2: 01 7f                      | local[0] type=i32\n 0008e4: 20 00                      | local.get 0\n 0008e6: 0b                         | end\n0008e8 func[94] <init-local-i64>:\n 0008e9: 01 7e                      | local[0] type=i64\n 0008eb: 20 00                      | local.get 0\n 0008ed: 0b                         | end\n0008ef func[95] <init-local-f32>:\n 0008f0: 01 7d                      | local[0] type=f32\n 0008f2: 20 00                      | local.get 0\n 0008f4: 0b                         | end\n0008f6 func[96] <init-local-f64>:\n 0008f7: 01 7c                      | local[0] type=f64\n 0008f9: 20 00                      | local.get 0\n 0008fb: 0b                         | end\n"
    },
    "func.1.wasm": {
      "header": "\nfunc.1.wasm:\tfile format wasm 0x1\n\nSections:\n\n     Type start=0x0000000a end=0x00000016 (size=0x0000000c) count: 3\n Function start=0x00000018 end=0x0000001e (size=0x00000006) count: 5\n     Code start=0x00000020 end=0x00000049 (size=0x00000029) count: 5\n",
      "details": "\nfunc.1.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nType[3]:\n - type[0] (i32) -> nil\n - type[1] () -> f64\n - type[2] () -> nil\nFunction[5]:\n - func[0] sig=1\n - func[1] sig=0\n - func[2] sig=0\n - func[3] sig=1\n - func[4] sig=2\nCode[5]:\n - func[0] size=11\n - func[1] size=2\n - func[2] size=2\n - func[3] size=11\n - func[4] size=9\n",
      "disassemble": "\nfunc.1.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n000022 func[0]:\n 000023: 44 00 00 00 00 00 00 00 00 | f64.const 0x0p+0\n 00002c: 0b                         | end\n00002e func[1]:\n 00002f: 0b                         | end\n000031 func[2]:\n 000032: 0b                         | end\n000034 func[3]:\n 000035: 44 00 00 00 00 00 00 00 00 | f64.const 0x0p+0\n 00003e: 0b                         | end\n000040 func[4]:\n 000041: 41 00                      | i32.const 0\n 000043: 10 02                      | call 2\n 000045: 10 03                      | call 3\n 000047: 1a                         | drop\n 000048: 0b                         | end\n"
    },
    "func.4.wasm": {
      "header": "\nfunc.4.wasm:\tfile format wasm 0x1\n\nSections:\n\n     Type start=0x0000000a end=0x00000014 (size=0x0000000a) count: 2\n Function start=0x00000016 end=0x0000001b (size=0x00000005) count: 4\n   Export start=0x0000001d end=0x0000002a (size=0x0000000d) count: 3\n     Code start=0x0000002c end=0x0000004d (size=0x00000021) count: 4\n",
      "details": "\nfunc.4.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nType[2]:\n - type[0] () -> i32\n - type[1] (i32) -> i32\nFunction[4]:\n - func[0] sig=1 <f>\n - func[1] sig=1\n - func[2] sig=1 <g>\n - func[3] sig=0 <p>\nExport[3]:\n - func[0] <f> -> \"f\"\n - func[2] <g> -> \"g\"\n - func[3] <p> -> \"p\"\nCode[4]:\n - func[0] size=6 <f>\n - func[1] size=6\n - func[2] size=6 <g>\n - func[3] size=10 <p>\n",
      "disassemble": "\nfunc.4.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n00002e func[0] <f>:\n 00002f: 01 7f                      | local[1] type=i32\n 000031: 20 01                      | local.get 1\n 000033: 0b                         | end\n000035 func[1]:\n 000036: 01 7f                      | local[1] type=i32\n 000038: 20 01                      | local.get 1\n 00003a: 0b                         | end\n00003c func[2] <g>:\n 00003d: 20 00                      | local.get 0\n 00003f: 10 01                      | call 1\n 000041: 0b                         | end\n000043 func[3] <p>:\n 000044: 01 7f                      | local[0] type=i32\n 000046: 41 2a                      | i32.const 42\n 000048: 21 00                      | local.set 0\n 00004a: 20 00                      | local.get 0\n 00004c: 0b                         | end\n"
    },
    "func.5.wasm": {
      "header": "\nfunc.5.wasm:\tfile format wasm 0x1\n\nSections:\n\n     Type start=0x0000000a end=0x00000027 (size=0x0000001d) count: 4\n Function start=0x00000029 end=0x00000035 (size=0x0000000c) count: 11\n    Table start=0x00000037 end=0x0000003c (size=0x00000005) count: 1\n   Export start=0x0000003e end=0x000000b5 (size=0x00000077) count: 4\n     Elem start=0x000000b7 end=0x000000c4 (size=0x0000000d) count: 1\n     Code start=0x000000c7 end=0x000001cc (size=0x00000105) count: 11\n",
      "details": "\nfunc.5.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nType[4]:\n - type[0] () -> nil\n - type[1] () -> nil\n - type[2] (i64, i64, f64, i64, f64, i64, f32, i32) -> nil\n - type[3] (f64, i64, f64, i64, f64, i64, f32, i32) -> nil\nFunction[11]:\n - func[0] sig=0\n - func[1] sig=3\n - func[2] sig=0\n - func[3] sig=3\n - func[4] sig=3\n - func[5] sig=2\n - func[6] sig=2\n - func[7] sig=0 <signature-explicit-reused>\n - func[8] sig=0 <signature-implicit-reused>\n - func[9] sig=0 <signature-explicit-duplicate>\n - func[10] sig=0 <signature-implicit-duplicate>\nTable[1]:\n - table[0] type=funcref initial=7 max=7\nExport[4]:\n - func[7] <signature-explicit-reused> -> \"signature-explicit-reused\"\n - func[8] <signature-implicit-reused> -> \"signature-implicit-reused\"\n - func[9] <signature-explicit-duplicate> -> \"signature-explicit-duplicate\"\n - func[10] <signature-implicit-duplicate> -> \"signature-implicit-duplicate\"\nElem[1]:\n - segment[0] flags=0 table=0 count=7 - init i32=0\n  - elem[0] = ref.func:4\n  - elem[1] = ref.func:2\n  - elem[2] = ref.func:1\n  - elem[3] = ref.func:4\n  - elem[4] = ref.func:0\n  - elem[5] = ref.func:5\n  - elem[6] = ref.func:6\nCode[11]:\n - func[0] size=2\n - func[1] size=2\n - func[2] size=2\n - func[3] size=2\n - func[4] size=2\n - func[5] size=2\n - func[6] size=2\n - func[7] size=12 <signature-explicit-reused>\n - func[8] size=137 <signature-implicit-reused>\n - func[9] size=7 <signature-explicit-duplicate>\n - func[10] size=78 <signature-implicit-duplicate>\n",
      "disassemble": "\nfunc.5.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n0000c9 func[0]:\n 0000ca: 0b                         | end\n0000cc func[1]:\n 0000cd: 0b                         | end\n0000cf func[2]:\n 0000d0: 0b                         | end\n0000d2 func[3]:\n 0000d3: 0b                         | end\n0000d5 func[4]:\n 0000d6: 0b                         | end\n0000d8 func[5]:\n 0000d9: 0b                         | end\n0000db func[6]:\n 0000dc: 0b                         | end\n0000de func[7] <signature-explicit-reused>:\n 0000df: 41 01                      | i32.const 1\n 0000e1: 11 00 00                   | call_indirect 0 (type 0)\n 0000e4: 41 04                      | i32.const 4\n 0000e6: 11 00 00                   | call_indirect 0 (type 0)\n 0000e9: 0b                         | end\n0000ec func[8] <signature-implicit-reused>:\n 0000ed: 44 00 00 00 00 00 00 00 00 | f64.const 0x0p+0\n 0000f6: 42 00                      | i64.const 0\n 0000f8: 44 00 00 00 00 00 00 00 00 | f64.const 0x0p+0\n 000101: 42 00                      | i64.const 0\n 000103: 44 00 00 00 00 00 00 00 00 | f64.const 0x0p+0\n 00010c: 42 00                      | i64.const 0\n 00010e: 43 00 00 00 00             | f32.const 0x0p+0\n 000113: 41 00                      | i32.const 0\n 000115: 41 00                      | i32.const 0\n 000117: 11 03 00                   | call_indirect 0 (type 3)\n 00011a: 44 00 00 00 00 00 00 00 00 | f64.const 0x0p+0\n 000123: 42 00                      | i64.const 0\n 000125: 44 00 00 00 00 00 00 00 00 | f64.const 0x0p+0\n 00012e: 42 00                      | i64.const 0\n 000130: 44 00 00 00 00 00 00 00 00 | f64.const 0x0p+0\n 000139: 42 00                      | i64.const 0\n 00013b: 43 00 00 00 00             | f32.const 0x0p+0\n 000140: 41 00                      | i32.const 0\n 000142: 41 02                      | i32.const 2\n 000144: 11 03 00                   | call_indirect 0 (type 3)\n 000147: 44 00 00 00 00 00 00 00 00 | f64.const 0x0p+0\n 000150: 42 00                      | i64.const 0\n 000152: 44 00 00 00 00 00 00 00 00 | f64.const 0x0p+0\n 00015b: 42 00                      | i64.const 0\n 00015d: 44 00 00 00 00 00 00 00 00 | f64.const 0x0p+0\n 000166: 42 00                      | i64.const 0\n 000168: 43 00 00 00 00             | f32.const 0x0p+0\n 00016d: 41 00                      | i32.const 0\n 00016f: 41 03                      | i32.const 3\n 000171: 11 03 00                   | call_indirect 0 (type 3)\n 000174: 0b                         | end\n000176 func[9] <signature-explicit-duplicate>:\n 000177: 41 01                      | i32.const 1\n 000179: 11 01 00                   | call_indirect 0 (type 1)\n 00017c: 0b                         | end\n00017e func[10] <signature-implicit-duplicate>:\n 00017f: 42 00                      | i64.const 0\n 000181: 42 00                      | i64.const 0\n 000183: 44 00 00 00 00 00 00 00 00 | f64.const 0x0p+0\n 00018c: 42 00                      | i64.const 0\n 00018e: 44 00 00 00 00 00 00 00 00 | f64.const 0x0p+0\n 000197: 42 00                      | i64.const 0\n 000199: 43 00 00 00 00             | f32.const 0x0p+0\n 00019e: 41 00                      | i32.const 0\n 0001a0: 41 05                      | i32.const 5\n 0001a2: 11 02 00                   | call_indirect 0 (type 2)\n 0001a5: 42 00                      | i64.const 0\n 0001a7: 42 00                      | i64.const 0\n 0001a9: 44 00 00 00 00 00 00 00 00 | f64.const 0x0p+0\n 0001b2: 42 00                      | i64.const 0\n 0001b4: 44 00 00 00 00 00 00 00 00 | f64.const 0x0p+0\n 0001bd: 42 00                      | i64.const 0\n 0001bf: 43 00 00 00 00             | f32.const 0x0p+0\n 0001c4: 41 00                      | i32.const 0\n 0001c6: 41 06                      | i32.const 6\n 0001c8: 11 02 00                   | call_indirect 0 (type 2)\n 0001cb: 0b                         | end\n"
    }
  }
}
