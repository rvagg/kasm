{
  "bin": {
    "imports.0.wasm": "AGFzbQEAAAABHgdgAABgAX8AYAF9AGAAAX9gAAF9YAF/AX9gAX4BfgMIBwABAgMEBQYECAJwAApwAQoUBQMBAAIGFAN/AEE3C30AQwAAMEILfgFCwgALB60BDQRmdW5jAAAIZnVuYy1pMzIAAQhmdW5jLWYzMgACCWZ1bmMtPmkzMgADCWZ1bmMtPmYzMgAEDWZ1bmMtaTMyLT5pMzIABQ1mdW5jLWk2NC0+aTY0AAYKZ2xvYmFsLWkzMgMACmdsb2JhbC1mMzIDAQ5nbG9iYWwtbXV0LWk2NAMCDHRhYmxlLTEwLWluZgEAC3RhYmxlLTEwLTIwAQEMbWVtb3J5LTItaW5mAgAKIQcCAAsCAAsCAAsEAEEWCwcAQwAAMEELBAAgAAsEACAACw==",
    "imports.1.wasm": "AGFzbQEAAAABJAhgAX8AYAF+AGABfQBgAXwAYAF/AGACf30AYAJ8fABgAX4BfgKDAxIIc3BlY3Rlc3QJcHJpbnRfaTMyAAAIc3BlY3Rlc3QJcHJpbnRfaTY0AAEIc3BlY3Rlc3QJcHJpbnRfaTMyAAAIc3BlY3Rlc3QJcHJpbnRfaTY0AAEIc3BlY3Rlc3QJcHJpbnRfZjMyAAIIc3BlY3Rlc3QJcHJpbnRfZjY0AAMIc3BlY3Rlc3QNcHJpbnRfaTMyX2YzMgAFCHNwZWN0ZXN0DXByaW50X2Y2NF9mNjQABghzcGVjdGVzdAlwcmludF9pMzIAAAhzcGVjdGVzdAlwcmludF9mNjQAAwR0ZXN0DWZ1bmMtaTY0LT5pNjQABwhzcGVjdGVzdAlwcmludF9pMzIAAAhzcGVjdGVzdAlwcmludF9pMzIAAAhzcGVjdGVzdAlwcmludF9pMzIAAAhzcGVjdGVzdAlwcmludF9pMzIAAAhzcGVjdGVzdAlwcmludF9pMzIAAAhzcGVjdGVzdAlwcmludF9pMzIABAhzcGVjdGVzdAlwcmludF9pMzIABAMDAgABBAUBcAECAgczCAJwMQALAnAyAAwCcDMADQJwNAANAnA1AA4CcDYADwdwcmludDMyABIHcHJpbnQ2NAATCQgBAEEACwICBQpoAiwBAX0gALIhASAAEAAgAEEBakMAAChCEAYgABACIAAQCCABEAQgAEEAEQAACzkBAXwgABAKuSEBIAAQASABRAAAAAAAAPA/oEQAAAAAAIBKQBAHIAAQAyABEAUgARAJIAFBAREDAAs=",
    "imports.10.wasm": "AGFzbQEAAAABBgFgAX8BfwIWAQR0ZXN0DWZ1bmMtaTMyLT5pMzIAAA==",
    "imports.100.wasm": "AGFzbQEAAAACFgEEdGVzdAxtZW1vcnktMi1pbmYCAAI=",
    "imports.101.wasm": "AGFzbQEAAAACFgEEdGVzdAxtZW1vcnktMi1pbmYCAAE=",
    "imports.102.wasm": "AGFzbQEAAAACFgEEdGVzdAxtZW1vcnktMi1pbmYCAAA=",
    "imports.103.wasm": "AGFzbQEAAAACFAEIc3BlY3Rlc3QGbWVtb3J5AgAB",
    "imports.104.wasm": "AGFzbQEAAAACFAEIc3BlY3Rlc3QGbWVtb3J5AgAA",
    "imports.105.wasm": "AGFzbQEAAAACFQEIc3BlY3Rlc3QGbWVtb3J5AgEBAg==",
    "imports.106.wasm": "AGFzbQEAAAACFQEIc3BlY3Rlc3QGbWVtb3J5AgEAAg==",
    "imports.107.wasm": "AGFzbQEAAAACFQEIc3BlY3Rlc3QGbWVtb3J5AgEBAw==",
    "imports.108.wasm": "AGFzbQEAAAACFQEIc3BlY3Rlc3QGbWVtb3J5AgEAAw==",
    "imports.109.wasm": "AGFzbQEAAAACEQEEdGVzdAd1bmtub3duAgAB",
    "imports.11.wasm": "AGFzbQEAAAABBgFgAX4BfgIWAQR0ZXN0DWZ1bmMtaTY0LT5pNjQAAA==",
    "imports.110.wasm": "AGFzbQEAAAACFQEIc3BlY3Rlc3QHdW5rbm93bgIAAQ==",
    "imports.111.wasm": "AGFzbQEAAAACFgEEdGVzdAxtZW1vcnktMi1pbmYCAAM=",
    "imports.112.wasm": "AGFzbQEAAAACFwEEdGVzdAxtZW1vcnktMi1pbmYCAQID",
    "imports.113.wasm": "AGFzbQEAAAACFAEIc3BlY3Rlc3QGbWVtb3J5AgAC",
    "imports.114.wasm": "AGFzbQEAAAACFQEIc3BlY3Rlc3QGbWVtb3J5AgEBAQ==",
    "imports.115.wasm": "AGFzbQEAAAACEgEEdGVzdAhmdW5jLWkzMgIAAQ==",
    "imports.116.wasm": "AGFzbQEAAAACFAEEdGVzdApnbG9iYWwtaTMyAgAB",
    "imports.117.wasm": "AGFzbQEAAAACFgEEdGVzdAx0YWJsZS0xMC1pbmYCAAE=",
    "imports.118.wasm": "AGFzbQEAAAACFwEIc3BlY3Rlc3QJcHJpbnRfaTMyAgAB",
    "imports.119.wasm": "AGFzbQEAAAACGAEIc3BlY3Rlc3QKZ2xvYmFsX2kzMgIAAQ==",
    "imports.12.wasm": "AGFzbQEAAAABBAFgAAACEAEEdGVzdAd1bmtub3duAAA=",
    "imports.120.wasm": "AGFzbQEAAAACEwEIc3BlY3Rlc3QFdGFibGUCAAE=",
    "imports.121.wasm": "AGFzbQEAAAACFAEIc3BlY3Rlc3QGbWVtb3J5AgAC",
    "imports.122.wasm": "AGFzbQEAAAACFQEIc3BlY3Rlc3QGbWVtb3J5AgEBAQ==",
    "imports.123.wasm": "AGFzbQEAAAABBgFgAX8BfwIVAQhzcGVjdGVzdAZtZW1vcnkCAQADAwIBAAcIAQRncm93AAAKCAEGACAAQAAL",
    "imports.124.wasm": "AGFzbQEAAAABBQFgAAF/AwIBAAUDAQABBxECBm1lbW9yeQIABGdyb3cAAAoIAQYAQQFAAAs=",
    "imports.125.wasm": "AGFzbQEAAAABBQFgAAF/AhgBDGdyb3duLW1lbW9yeQZtZW1vcnkCAAIDAgEABxECBm1lbW9yeQIABGdyb3cAAAoIAQYAQQFAAAs=",
    "imports.126.wasm": "AGFzbQEAAAABBQFgAAF/AiEBFWdyb3duLWltcG9ydGVkLW1lbW9yeQZtZW1vcnkCAAMDAgEABwgBBHNpemUAAAoGAQQAPwAL",
    "imports.127.wat": "KGZ1bmMpIChpbXBvcnQgIiIgIiIgKGZ1bmMpKQ==",
    "imports.128.wat": "KGZ1bmMpIChpbXBvcnQgIiIgIiIgKGdsb2JhbCBpNjQpKQ==",
    "imports.129.wat": "KGZ1bmMpIChpbXBvcnQgIiIgIiIgKHRhYmxlIDAgZnVuY3JlZikp",
    "imports.13.wasm": "AGFzbQEAAAABBAFgAAACFAEIc3BlY3Rlc3QHdW5rbm93bgAA",
    "imports.130.wat": "KGZ1bmMpIChpbXBvcnQgIiIgIiIgKG1lbW9yeSAwKSk=",
    "imports.131.wat": "KGdsb2JhbCBpNjQgKGk2NC5jb25zdCAwKSkgKGltcG9ydCAiIiAiIiAoZnVuYykp",
    "imports.132.wat": "KGdsb2JhbCBpNjQgKGk2NC5jb25zdCAwKSkgKGltcG9ydCAiIiAiIiAoZ2xvYmFsIGYzMikp",
    "imports.133.wat": "KGdsb2JhbCBpNjQgKGk2NC5jb25zdCAwKSkgKGltcG9ydCAiIiAiIiAodGFibGUgMCBmdW5jcmVmKSk=",
    "imports.134.wat": "KGdsb2JhbCBpNjQgKGk2NC5jb25zdCAwKSkgKGltcG9ydCAiIiAiIiAobWVtb3J5IDApKQ==",
    "imports.135.wat": "KHRhYmxlIDAgZnVuY3JlZikgKGltcG9ydCAiIiAiIiAoZnVuYykp",
    "imports.136.wat": "KHRhYmxlIDAgZnVuY3JlZikgKGltcG9ydCAiIiAiIiAoZ2xvYmFsIGkzMikp",
    "imports.137.wat": "KHRhYmxlIDAgZnVuY3JlZikgKGltcG9ydCAiIiAiIiAodGFibGUgMCBmdW5jcmVmKSk=",
    "imports.138.wat": "KHRhYmxlIDAgZnVuY3JlZikgKGltcG9ydCAiIiAiIiAobWVtb3J5IDApKQ==",
    "imports.139.wat": "KG1lbW9yeSAwKSAoaW1wb3J0ICIiICIiIChmdW5jKSk=",
    "imports.14.wasm": "AGFzbQEAAAABBQFgAX8AAg0BBHRlc3QEZnVuYwAA",
    "imports.140.wat": "KG1lbW9yeSAwKSAoaW1wb3J0ICIiICIiIChnbG9iYWwgaTMyKSk=",
    "imports.141.wat": "KG1lbW9yeSAwKSAoaW1wb3J0ICIiICIiICh0YWJsZSAxIDMgZnVuY3JlZikp",
    "imports.142.wat": "KG1lbW9yeSAwKSAoaW1wb3J0ICIiICIiIChtZW1vcnkgMSAyKSk=",
    "imports.143.wasm": "AGFzbQEAAAA=",
    "imports.144.wasm": "AGFzbQEAAAABKQpgAABgAX8AYAJ/fwBgAX4AYAF9AGABfABgAAF/YAABfmAAAX1gAAF8AugCEAhub3Qgd2FzbQpvdmVybG9hZGVkAAAIbm90IHdhc20Kb3ZlcmxvYWRlZAABCG5vdCB3YXNtCm92ZXJsb2FkZWQAAghub3Qgd2FzbQpvdmVybG9hZGVkAAMIbm90IHdhc20Kb3ZlcmxvYWRlZAAECG5vdCB3YXNtCm92ZXJsb2FkZWQABQhub3Qgd2FzbQpvdmVybG9hZGVkAAYIbm90IHdhc20Kb3ZlcmxvYWRlZAAHCG5vdCB3YXNtCm92ZXJsb2FkZWQACAhub3Qgd2FzbQpvdmVybG9hZGVkAAkIbm90IHdhc20Kb3ZlcmxvYWRlZAN/AAhub3Qgd2FzbQpvdmVybG9hZGVkA34ACG5vdCB3YXNtCm92ZXJsb2FkZWQDfQAIbm90IHdhc20Kb3ZlcmxvYWRlZAN8AAhub3Qgd2FzbQpvdmVybG9hZGVkAXAAAAhub3Qgd2FzbQpvdmVybG9hZGVkAgAA",
    "imports.15.wasm": "AGFzbQEAAAABBQFgAAF/Ag0BBHRlc3QEZnVuYwAA",
    "imports.16.wasm": "AGFzbQEAAAABBgFgAX8BfwINAQR0ZXN0BGZ1bmMAAA==",
    "imports.17.wasm": "AGFzbQEAAAABBAFgAAACEQEEdGVzdAhmdW5jLWkzMgAA",
    "imports.18.wasm": "AGFzbQEAAAABBQFgAAF/AhEBBHRlc3QIZnVuYy1pMzIAAA==",
    "imports.19.wasm": "AGFzbQEAAAABBQFgAX0AAhEBBHRlc3QIZnVuYy1pMzIAAA==",
    "imports.2.wasm": "AGFzbQEAAAABBQFgAAF/Ag0BBHRlc3QEZnVuYwAB",
    "imports.20.wasm": "AGFzbQEAAAABBQFgAX4AAhEBBHRlc3QIZnVuYy1pMzIAAA==",
    "imports.21.wasm": "AGFzbQEAAAABBgFgAX8BfwIRAQR0ZXN0CGZ1bmMtaTMyAAA=",
    "imports.22.wasm": "AGFzbQEAAAABBAFgAAACEgEEdGVzdAlmdW5jLT5pMzIAAA==",
    "imports.23.wasm": "AGFzbQEAAAABBQFgAX8AAhIBBHRlc3QJZnVuYy0+aTMyAAA=",
    "imports.24.wasm": "AGFzbQEAAAABBQFgAAF9AhIBBHRlc3QJZnVuYy0+aTMyAAA=",
    "imports.25.wasm": "AGFzbQEAAAABBQFgAAF+AhIBBHRlc3QJZnVuYy0+aTMyAAA=",
    "imports.26.wasm": "AGFzbQEAAAABBgFgAX8BfwISAQR0ZXN0CWZ1bmMtPmkzMgAA",
    "imports.27.wasm": "AGFzbQEAAAABBAFgAAACFgEEdGVzdA1mdW5jLWkzMi0+aTMyAAA=",
    "imports.28.wasm": "AGFzbQEAAAABBQFgAX8AAhYBBHRlc3QNZnVuYy1pMzItPmkzMgAA",
    "imports.29.wasm": "AGFzbQEAAAABBQFgAAF/AhYBBHRlc3QNZnVuYy1pMzItPmkzMgAA",
    "imports.3.wasm": "AGFzbQEAAAABBQFgAX8AAhYBCHNwZWN0ZXN0CXByaW50X2kzMgAAAwIBAAcNAQlwcmludF9pMzIAAQoIAQYAIAAQAAs=",
    "imports.30.wasm": "AGFzbQEAAAABBQFgAAF/AhMBBHRlc3QKZ2xvYmFsLWkzMgAA",
    "imports.31.wasm": "AGFzbQEAAAABBAFgAAACFQEEdGVzdAx0YWJsZS0xMC1pbmYAAA==",
    "imports.32.wasm": "AGFzbQEAAAABBAFgAAACFQEEdGVzdAxtZW1vcnktMi1pbmYAAA==",
    "imports.33.wasm": "AGFzbQEAAAABBAFgAAACFwEIc3BlY3Rlc3QKZ2xvYmFsX2kzMgAA",
    "imports.34.wasm": "AGFzbQEAAAABBAFgAAACEgEIc3BlY3Rlc3QFdGFibGUAAA==",
    "imports.35.wasm": "AGFzbQEAAAABBAFgAAACEwEIc3BlY3Rlc3QGbWVtb3J5AAA=",
    "imports.36.wasm": "AGFzbQEAAAABEQRgAAF/YAABfmAAAX1gAAF8AqIBBwhzcGVjdGVzdApnbG9iYWxfaTMyA38ACHNwZWN0ZXN0Cmdsb2JhbF9pMzIDfwAIc3BlY3Rlc3QKZ2xvYmFsX2kzMgN/AAhzcGVjdGVzdApnbG9iYWxfaTMyA38ACHNwZWN0ZXN0Cmdsb2JhbF9pNjQDfgAIc3BlY3Rlc3QKZ2xvYmFsX2YzMgN9AAhzcGVjdGVzdApnbG9iYWxfZjY0A3wAAwgHAAAAAAECAwc5BwVnZXQtMAAABWdldC0xAAEFZ2V0LXgAAgVnZXQteQADBWdldC00AAQFZ2V0LTUABQVnZXQtNgAGCiQHBAAjAAsEACMBCwQAIwILBAAjAwsEACMECwQAIwULBAAjBgs=",
    "imports.37.wasm": "AGFzbQEAAAACFAEEdGVzdApnbG9iYWwtaTMyA38A",
    "imports.38.wasm": "AGFzbQEAAAACFAEEdGVzdApnbG9iYWwtZjMyA30A",
    "imports.39.wasm": "AGFzbQEAAAACGAEEdGVzdA5nbG9iYWwtbXV0LWk2NAN+AQ==",
    "imports.4.wasm": "AGFzbQEAAAABCwJgAX8AYAJ/fwF/AhYBCHNwZWN0ZXN0CXByaW50X2kzMgAAAwIBAQcNAQlwcmludF9pMzIAAQoJAQcAIAAgAWoL",
    "imports.40.wasm": "AGFzbQEAAAACEQEEdGVzdAd1bmtub3duA38A",
    "imports.41.wasm": "AGFzbQEAAAACFQEIc3BlY3Rlc3QHdW5rbm93bgN/AA==",
    "imports.42.wasm": "AGFzbQEAAAACFAEEdGVzdApnbG9iYWwtaTMyA34A",
    "imports.43.wasm": "AGFzbQEAAAACFAEEdGVzdApnbG9iYWwtaTMyA30A",
    "imports.44.wasm": "AGFzbQEAAAACFAEEdGVzdApnbG9iYWwtaTMyA3wA",
    "imports.45.wasm": "AGFzbQEAAAACFAEEdGVzdApnbG9iYWwtaTMyA38B",
    "imports.46.wasm": "AGFzbQEAAAACFAEEdGVzdApnbG9iYWwtZjMyA38A",
    "imports.47.wasm": "AGFzbQEAAAACFAEEdGVzdApnbG9iYWwtZjMyA34A",
    "imports.48.wasm": "AGFzbQEAAAACFAEEdGVzdApnbG9iYWwtZjMyA3wA",
    "imports.49.wasm": "AGFzbQEAAAACFAEEdGVzdApnbG9iYWwtZjMyA30B",
    "imports.5.wasm": "AGFzbQEAAAABBAFgAAACDQEEdGVzdARmdW5jAAA=",
    "imports.50.wasm": "AGFzbQEAAAACGAEEdGVzdA5nbG9iYWwtbXV0LWk2NAN/AQ==",
    "imports.51.wasm": "AGFzbQEAAAACGAEEdGVzdA5nbG9iYWwtbXV0LWk2NAN9AQ==",
    "imports.52.wasm": "AGFzbQEAAAACGAEEdGVzdA5nbG9iYWwtbXV0LWk2NAN8AQ==",
    "imports.53.wasm": "AGFzbQEAAAACGAEEdGVzdA5nbG9iYWwtbXV0LWk2NAN+AA==",
    "imports.54.wasm": "AGFzbQEAAAACDgEEdGVzdARmdW5jA38A",
    "imports.55.wasm": "AGFzbQEAAAACFgEEdGVzdAx0YWJsZS0xMC1pbmYDfwA=",
    "imports.56.wasm": "AGFzbQEAAAACFgEEdGVzdAxtZW1vcnktMi1pbmYDfwA=",
    "imports.57.wasm": "AGFzbQEAAAACFwEIc3BlY3Rlc3QJcHJpbnRfaTMyA38A",
    "imports.58.wasm": "AGFzbQEAAAACEwEIc3BlY3Rlc3QFdGFibGUDfwA=",
    "imports.59.wasm": "AGFzbQEAAAACFAEIc3BlY3Rlc3QGbWVtb3J5A38A",
    "imports.6.wasm": "AGFzbQEAAAABBQFgAX8AAhEBBHRlc3QIZnVuYy1pMzIAAA==",
    "imports.60.wasm": "AGFzbQEAAAABCgJgAAF/YAF/AX8CFQEIc3BlY3Rlc3QFdGFibGUBcAEKFAMEAwEAAAcIAQRjYWxsAAAJCAEAQQELAgECChMDBwAgABEAAAsEAEELCwQAQRYL",
    "imports.61.wasm": "AGFzbQEAAAABCgJgAAF/YAF/AX8CFQEIc3BlY3Rlc3QFdGFibGUBcAEKFAMEAwEAAAcIAQRjYWxsAAAJCAEAQQELAgECChMDBwAgABEAAAsEAEELCwQAQRYL",
    "imports.62.wasm": "AGFzbQEAAAACJwIIc3BlY3Rlc3QFdGFibGUBcAAACHNwZWN0ZXN0BXRhYmxlAXAAAAQHAnAACnAACg==",
    "imports.63.wasm": "AGFzbQEAAAACFwEEdGVzdAx0YWJsZS0xMC1pbmYBcAAK",
    "imports.64.wasm": "AGFzbQEAAAACFwEEdGVzdAx0YWJsZS0xMC1pbmYBcAAF",
    "imports.65.wasm": "AGFzbQEAAAACFwEEdGVzdAx0YWJsZS0xMC1pbmYBcAAA",
    "imports.66.wasm": "AGFzbQEAAAACFgEEdGVzdAt0YWJsZS0xMC0yMAFwAAo=",
    "imports.67.wasm": "AGFzbQEAAAACFgEEdGVzdAt0YWJsZS0xMC0yMAFwAAU=",
    "imports.68.wasm": "AGFzbQEAAAACFgEEdGVzdAt0YWJsZS0xMC0yMAFwAAA=",
    "imports.69.wasm": "AGFzbQEAAAACFwEEdGVzdAt0YWJsZS0xMC0yMAFwAQoU",
    "imports.7.wasm": "AGFzbQEAAAABBQFgAX0AAhEBBHRlc3QIZnVuYy1mMzIAAA==",
    "imports.70.wasm": "AGFzbQEAAAACFwEEdGVzdAt0YWJsZS0xMC0yMAFwAQUU",
    "imports.71.wasm": "AGFzbQEAAAACFwEEdGVzdAt0YWJsZS0xMC0yMAFwAQAU",
    "imports.72.wasm": "AGFzbQEAAAACFwEEdGVzdAt0YWJsZS0xMC0yMAFwAQoZ",
    "imports.73.wasm": "AGFzbQEAAAACFwEEdGVzdAt0YWJsZS0xMC0yMAFwAQUZ",
    "imports.74.wasm": "AGFzbQEAAAACFwEEdGVzdAt0YWJsZS0xMC0yMAFwAQAZ",
    "imports.75.wasm": "AGFzbQEAAAACFAEIc3BlY3Rlc3QFdGFibGUBcAAK",
    "imports.76.wasm": "AGFzbQEAAAACFAEIc3BlY3Rlc3QFdGFibGUBcAAF",
    "imports.77.wasm": "AGFzbQEAAAACFAEIc3BlY3Rlc3QFdGFibGUBcAAA",
    "imports.78.wasm": "AGFzbQEAAAACFQEIc3BlY3Rlc3QFdGFibGUBcAEKFA==",
    "imports.79.wasm": "AGFzbQEAAAACFQEIc3BlY3Rlc3QFdGFibGUBcAEFFA==",
    "imports.8.wasm": "AGFzbQEAAAABBQFgAAF/AhIBBHRlc3QJZnVuYy0+aTMyAAA=",
    "imports.80.wasm": "AGFzbQEAAAACFQEIc3BlY3Rlc3QFdGFibGUBcAEAFA==",
    "imports.81.wasm": "AGFzbQEAAAACFQEIc3BlY3Rlc3QFdGFibGUBcAEKGQ==",
    "imports.82.wasm": "AGFzbQEAAAACFQEIc3BlY3Rlc3QFdGFibGUBcAEFGQ==",
    "imports.83.wasm": "AGFzbQEAAAACEgEEdGVzdAd1bmtub3duAXAACg==",
    "imports.84.wasm": "AGFzbQEAAAACFgEIc3BlY3Rlc3QHdW5rbm93bgFwAAo=",
    "imports.85.wasm": "AGFzbQEAAAACFwEEdGVzdAx0YWJsZS0xMC1pbmYBcAAM",
    "imports.86.wasm": "AGFzbQEAAAACGAEEdGVzdAx0YWJsZS0xMC1pbmYBcAEKFA==",
    "imports.87.wasm": "AGFzbQEAAAACFwEEdGVzdAt0YWJsZS0xMC0yMAFwAQwU",
    "imports.88.wasm": "AGFzbQEAAAACFwEEdGVzdAt0YWJsZS0xMC0yMAFwAQoS",
    "imports.89.wasm": "AGFzbQEAAAACFAEIc3BlY3Rlc3QFdGFibGUBcAAM",
    "imports.9.wasm": "AGFzbQEAAAABBQFgAAF9AhIBBHRlc3QJZnVuYy0+ZjMyAAA=",
    "imports.90.wasm": "AGFzbQEAAAACFQEIc3BlY3Rlc3QFdGFibGUBcAEKDw==",
    "imports.91.wasm": "AGFzbQEAAAACDwEEdGVzdARmdW5jAXAACg==",
    "imports.92.wasm": "AGFzbQEAAAACFQEEdGVzdApnbG9iYWwtaTMyAXAACg==",
    "imports.93.wasm": "AGFzbQEAAAACFwEEdGVzdAxtZW1vcnktMi1pbmYBcAAK",
    "imports.94.wasm": "AGFzbQEAAAACGAEIc3BlY3Rlc3QJcHJpbnRfaTMyAXAACg==",
    "imports.95.wasm": "AGFzbQEAAAABBgFgAX8BfwIVAQhzcGVjdGVzdAZtZW1vcnkCAQECAwIBAAcIAQRsb2FkAAAKCQEHACAAKAIACwsHAQBBCgsBEA==",
    "imports.96.wasm": "AGFzbQEAAAABBgFgAX8BfwIVAQhzcGVjdGVzdAZtZW1vcnkCAQECAwIBAAcIAQRsb2FkAAAKCQEHACAAKAIACwsHAQBBCgsBEA==",
    "imports.97.wasm": "AGFzbQEAAAACCwIAAAIAAQAAAgAB",
    "imports.98.wasm": "AGFzbQEAAAACBgEAAAIAAQUDAQAA",
    "imports.99.wasm": "AGFzbQEAAAAFBQIAAAAA"
  },
  "spec": {"source_filename": "/home/rvagg/git/webassembly/spec/test/core/imports.wast",
 "commands": [
  {"type": "module", "line": 3, "filename": "imports.0.wasm"}, 
  {"type": "register", "line": 21, "as": "test"}, 
  {"type": "module", "line": 26, "filename": "imports.1.wasm"}, 
  {"type": "assert_return", "line": 85, "action": {"type": "invoke", "field": "print32", "args": [{"type": "i32", "value": "13"}]}, "expected": []}, 
  {"type": "assert_return", "line": 86, "action": {"type": "invoke", "field": "print64", "args": [{"type": "i64", "value": "24"}]}, "expected": []}, 
  {"type": "assert_invalid", "line": 89, "filename": "imports.2.wasm", "text": "unknown type", "module_type": "binary"}, 
  {"type": "module", "line": 97, "filename": "imports.3.wasm"}, 
  {"type": "assert_return", "line": 104, "action": {"type": "invoke", "field": "print_i32", "args": [{"type": "i32", "value": "13"}]}, "expected": []}, 
  {"type": "module", "line": 107, "filename": "imports.4.wasm"}, 
  {"type": "assert_return", "line": 114, "action": {"type": "invoke", "field": "print_i32", "args": [{"type": "i32", "value": "5"}, {"type": "i32", "value": "11"}]}, "expected": [{"type": "i32", "value": "16"}]}, 
  {"type": "module", "line": 116, "filename": "imports.5.wasm"}, 
  {"type": "module", "line": 117, "filename": "imports.6.wasm"}, 
  {"type": "module", "line": 118, "filename": "imports.7.wasm"}, 
  {"type": "module", "line": 119, "filename": "imports.8.wasm"}, 
  {"type": "module", "line": 120, "filename": "imports.9.wasm"}, 
  {"type": "module", "line": 121, "filename": "imports.10.wasm"}, 
  {"type": "module", "line": 122, "filename": "imports.11.wasm"}, 
  {"type": "assert_unlinkable", "line": 125, "filename": "imports.12.wasm", "text": "unknown import", "module_type": "binary"}, 
  {"type": "assert_unlinkable", "line": 129, "filename": "imports.13.wasm", "text": "unknown import", "module_type": "binary"}, 
  {"type": "assert_unlinkable", "line": 134, "filename": "imports.14.wasm", "text": "incompatible import type", "module_type": "binary"}, 
  {"type": "assert_unlinkable", "line": 138, "filename": "imports.15.wasm", "text": "incompatible import type", "module_type": "binary"}, 
  {"type": "assert_unlinkable", "line": 142, "filename": "imports.16.wasm", "text": "incompatible import type", "module_type": "binary"}, 
  {"type": "assert_unlinkable", "line": 146, "filename": "imports.17.wasm", "text": "incompatible import type", "module_type": "binary"}, 
  {"type": "assert_unlinkable", "line": 150, "filename": "imports.18.wasm", "text": "incompatible import type", "module_type": "binary"}, 
  {"type": "assert_unlinkable", "line": 154, "filename": "imports.19.wasm", "text": "incompatible import type", "module_type": "binary"}, 
  {"type": "assert_unlinkable", "line": 158, "filename": "imports.20.wasm", "text": "incompatible import type", "module_type": "binary"}, 
  {"type": "assert_unlinkable", "line": 162, "filename": "imports.21.wasm", "text": "incompatible import type", "module_type": "binary"}, 
  {"type": "assert_unlinkable", "line": 166, "filename": "imports.22.wasm", "text": "incompatible import type", "module_type": "binary"}, 
  {"type": "assert_unlinkable", "line": 170, "filename": "imports.23.wasm", "text": "incompatible import type", "module_type": "binary"}, 
  {"type": "assert_unlinkable", "line": 174, "filename": "imports.24.wasm", "text": "incompatible import type", "module_type": "binary"}, 
  {"type": "assert_unlinkable", "line": 178, "filename": "imports.25.wasm", "text": "incompatible import type", "module_type": "binary"}, 
  {"type": "assert_unlinkable", "line": 182, "filename": "imports.26.wasm", "text": "incompatible import type", "module_type": "binary"}, 
  {"type": "assert_unlinkable", "line": 186, "filename": "imports.27.wasm", "text": "incompatible import type", "module_type": "binary"}, 
  {"type": "assert_unlinkable", "line": 190, "filename": "imports.28.wasm", "text": "incompatible import type", "module_type": "binary"}, 
  {"type": "assert_unlinkable", "line": 194, "filename": "imports.29.wasm", "text": "incompatible import type", "module_type": "binary"}, 
  {"type": "assert_unlinkable", "line": 199, "filename": "imports.30.wasm", "text": "incompatible import type", "module_type": "binary"}, 
  {"type": "assert_unlinkable", "line": 203, "filename": "imports.31.wasm", "text": "incompatible import type", "module_type": "binary"}, 
  {"type": "assert_unlinkable", "line": 207, "filename": "imports.32.wasm", "text": "incompatible import type", "module_type": "binary"}, 
  {"type": "assert_unlinkable", "line": 211, "filename": "imports.33.wasm", "text": "incompatible import type", "module_type": "binary"}, 
  {"type": "assert_unlinkable", "line": 215, "filename": "imports.34.wasm", "text": "incompatible import type", "module_type": "binary"}, 
  {"type": "assert_unlinkable", "line": 219, "filename": "imports.35.wasm", "text": "incompatible import type", "module_type": "binary"}, 
  {"type": "module", "line": 226, "filename": "imports.36.wasm"}, 
  {"type": "assert_return", "line": 246, "action": {"type": "invoke", "field": "get-0", "args": []}, "expected": [{"type": "i32", "value": "666"}]}, 
  {"type": "assert_return", "line": 247, "action": {"type": "invoke", "field": "get-1", "args": []}, "expected": [{"type": "i32", "value": "666"}]}, 
  {"type": "assert_return", "line": 248, "action": {"type": "invoke", "field": "get-x", "args": []}, "expected": [{"type": "i32", "value": "666"}]}, 
  {"type": "assert_return", "line": 249, "action": {"type": "invoke", "field": "get-y", "args": []}, "expected": [{"type": "i32", "value": "666"}]}, 
  {"type": "assert_return", "line": 250, "action": {"type": "invoke", "field": "get-4", "args": []}, "expected": [{"type": "i64", "value": "666"}]}, 
  {"type": "assert_return", "line": 251, "action": {"type": "invoke", "field": "get-5", "args": []}, "expected": [{"type": "f32", "value": "1143383654"}]}, 
  {"type": "assert_return", "line": 252, "action": {"type": "invoke", "field": "get-6", "args": []}, "expected": [{"type": "f64", "value": "4649074691427585229"}]}, 
  {"type": "module", "line": 254, "filename": "imports.37.wasm"}, 
  {"type": "module", "line": 255, "filename": "imports.38.wasm"}, 
  {"type": "module", "line": 256, "filename": "imports.39.wasm"}, 
  {"type": "assert_unlinkable", "line": 259, "filename": "imports.40.wasm", "text": "unknown import", "module_type": "binary"}, 
  {"type": "assert_unlinkable", "line": 263, "filename": "imports.41.wasm", "text": "unknown import", "module_type": "binary"}, 
  {"type": "assert_unlinkable", "line": 268, "filename": "imports.42.wasm", "text": "incompatible import type", "module_type": "binary"}, 
  {"type": "assert_unlinkable", "line": 272, "filename": "imports.43.wasm", "text": "incompatible import type", "module_type": "binary"}, 
  {"type": "assert_unlinkable", "line": 276, "filename": "imports.44.wasm", "text": "incompatible import type", "module_type": "binary"}, 
  {"type": "assert_unlinkable", "line": 280, "filename": "imports.45.wasm", "text": "incompatible import type", "module_type": "binary"}, 
  {"type": "assert_unlinkable", "line": 284, "filename": "imports.46.wasm", "text": "incompatible import type", "module_type": "binary"}, 
  {"type": "assert_unlinkable", "line": 288, "filename": "imports.47.wasm", "text": "incompatible import type", "module_type": "binary"}, 
  {"type": "assert_unlinkable", "line": 292, "filename": "imports.48.wasm", "text": "incompatible import type", "module_type": "binary"}, 
  {"type": "assert_unlinkable", "line": 296, "filename": "imports.49.wasm", "text": "incompatible import type", "module_type": "binary"}, 
  {"type": "assert_unlinkable", "line": 300, "filename": "imports.50.wasm", "text": "incompatible import type", "module_type": "binary"}, 
  {"type": "assert_unlinkable", "line": 304, "filename": "imports.51.wasm", "text": "incompatible import type", "module_type": "binary"}, 
  {"type": "assert_unlinkable", "line": 308, "filename": "imports.52.wasm", "text": "incompatible import type", "module_type": "binary"}, 
  {"type": "assert_unlinkable", "line": 312, "filename": "imports.53.wasm", "text": "incompatible import type", "module_type": "binary"}, 
  {"type": "assert_unlinkable", "line": 317, "filename": "imports.54.wasm", "text": "incompatible import type", "module_type": "binary"}, 
  {"type": "assert_unlinkable", "line": 321, "filename": "imports.55.wasm", "text": "incompatible import type", "module_type": "binary"}, 
  {"type": "assert_unlinkable", "line": 325, "filename": "imports.56.wasm", "text": "incompatible import type", "module_type": "binary"}, 
  {"type": "assert_unlinkable", "line": 329, "filename": "imports.57.wasm", "text": "incompatible import type", "module_type": "binary"}, 
  {"type": "assert_unlinkable", "line": 333, "filename": "imports.58.wasm", "text": "incompatible import type", "module_type": "binary"}, 
  {"type": "assert_unlinkable", "line": 337, "filename": "imports.59.wasm", "text": "incompatible import type", "module_type": "binary"}, 
  {"type": "module", "line": 344, "filename": "imports.60.wasm"}, 
  {"type": "assert_trap", "line": 356, "action": {"type": "invoke", "field": "call", "args": [{"type": "i32", "value": "0"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_return", "line": 357, "action": {"type": "invoke", "field": "call", "args": [{"type": "i32", "value": "1"}]}, "expected": [{"type": "i32", "value": "11"}]}, 
  {"type": "assert_return", "line": 358, "action": {"type": "invoke", "field": "call", "args": [{"type": "i32", "value": "2"}]}, "expected": [{"type": "i32", "value": "22"}]}, 
  {"type": "assert_trap", "line": 359, "action": {"type": "invoke", "field": "call", "args": [{"type": "i32", "value": "3"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 360, "action": {"type": "invoke", "field": "call", "args": [{"type": "i32", "value": "100"}]}, "text": "undefined element", "expected": [{"type": "i32"}]}, 
  {"type": "module", "line": 363, "filename": "imports.61.wasm"}, 
  {"type": "assert_trap", "line": 375, "action": {"type": "invoke", "field": "call", "args": [{"type": "i32", "value": "0"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_return", "line": 376, "action": {"type": "invoke", "field": "call", "args": [{"type": "i32", "value": "1"}]}, "expected": [{"type": "i32", "value": "11"}]}, 
  {"type": "assert_return", "line": 377, "action": {"type": "invoke", "field": "call", "args": [{"type": "i32", "value": "2"}]}, "expected": [{"type": "i32", "value": "22"}]}, 
  {"type": "assert_trap", "line": 378, "action": {"type": "invoke", "field": "call", "args": [{"type": "i32", "value": "3"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 379, "action": {"type": "invoke", "field": "call", "args": [{"type": "i32", "value": "100"}]}, "text": "undefined element", "expected": [{"type": "i32"}]}, 
  {"type": "module", "line": 382, "filename": "imports.62.wasm"}, 
  {"type": "module", "line": 389, "filename": "imports.63.wasm"}, 
  {"type": "module", "line": 390, "filename": "imports.64.wasm"}, 
  {"type": "module", "line": 391, "filename": "imports.65.wasm"}, 
  {"type": "module", "line": 392, "filename": "imports.66.wasm"}, 
  {"type": "module", "line": 393, "filename": "imports.67.wasm"}, 
  {"type": "module", "line": 394, "filename": "imports.68.wasm"}, 
  {"type": "module", "line": 395, "filename": "imports.69.wasm"}, 
  {"type": "module", "line": 396, "filename": "imports.70.wasm"}, 
  {"type": "module", "line": 397, "filename": "imports.71.wasm"}, 
  {"type": "module", "line": 398, "filename": "imports.72.wasm"}, 
  {"type": "module", "line": 399, "filename": "imports.73.wasm"}, 
  {"type": "module", "line": 400, "filename": "imports.74.wasm"}, 
  {"type": "module", "line": 401, "filename": "imports.75.wasm"}, 
  {"type": "module", "line": 402, "filename": "imports.76.wasm"}, 
  {"type": "module", "line": 403, "filename": "imports.77.wasm"}, 
  {"type": "module", "line": 404, "filename": "imports.78.wasm"}, 
  {"type": "module", "line": 405, "filename": "imports.79.wasm"}, 
  {"type": "module", "line": 406, "filename": "imports.80.wasm"}, 
  {"type": "module", "line": 407, "filename": "imports.81.wasm"}, 
  {"type": "module", "line": 408, "filename": "imports.82.wasm"}, 
  {"type": "assert_unlinkable", "line": 411, "filename": "imports.83.wasm", "text": "unknown import", "module_type": "binary"}, 
  {"type": "assert_unlinkable", "line": 415, "filename": "imports.84.wasm", "text": "unknown import", "module_type": "binary"}, 
  {"type": "assert_unlinkable", "line": 420, "filename": "imports.85.wasm", "text": "incompatible import type", "module_type": "binary"}, 
  {"type": "assert_unlinkable", "line": 424, "filename": "imports.86.wasm", "text": "incompatible import type", "module_type": "binary"}, 
  {"type": "assert_unlinkable", "line": 428, "filename": "imports.87.wasm", "text": "incompatible import type", "module_type": "binary"}, 
  {"type": "assert_unlinkable", "line": 432, "filename": "imports.88.wasm", "text": "incompatible import type", "module_type": "binary"}, 
  {"type": "assert_unlinkable", "line": 436, "filename": "imports.89.wasm", "text": "incompatible import type", "module_type": "binary"}, 
  {"type": "assert_unlinkable", "line": 440, "filename": "imports.90.wasm", "text": "incompatible import type", "module_type": "binary"}, 
  {"type": "assert_unlinkable", "line": 445, "filename": "imports.91.wasm", "text": "incompatible import type", "module_type": "binary"}, 
  {"type": "assert_unlinkable", "line": 449, "filename": "imports.92.wasm", "text": "incompatible import type", "module_type": "binary"}, 
  {"type": "assert_unlinkable", "line": 453, "filename": "imports.93.wasm", "text": "incompatible import type", "module_type": "binary"}, 
  {"type": "assert_unlinkable", "line": 457, "filename": "imports.94.wasm", "text": "incompatible import type", "module_type": "binary"}, 
  {"type": "module", "line": 465, "filename": "imports.95.wasm"}, 
  {"type": "assert_return", "line": 472, "action": {"type": "invoke", "field": "load", "args": [{"type": "i32", "value": "0"}]}, "expected": [{"type": "i32", "value": "0"}]}, 
  {"type": "assert_return", "line": 473, "action": {"type": "invoke", "field": "load", "args": [{"type": "i32", "value": "10"}]}, "expected": [{"type": "i32", "value": "16"}]}, 
  {"type": "assert_return", "line": 474, "action": {"type": "invoke", "field": "load", "args": [{"type": "i32", "value": "8"}]}, "expected": [{"type": "i32", "value": "1048576"}]}, 
  {"type": "assert_trap", "line": 475, "action": {"type": "invoke", "field": "load", "args": [{"type": "i32", "value": "1000000"}]}, "text": "out of bounds memory access", "expected": [{"type": "i32"}]}, 
  {"type": "module", "line": 477, "filename": "imports.96.wasm"}, 
  {"type": "assert_return", "line": 483, "action": {"type": "invoke", "field": "load", "args": [{"type": "i32", "value": "0"}]}, "expected": [{"type": "i32", "value": "0"}]}, 
  {"type": "assert_return", "line": 484, "action": {"type": "invoke", "field": "load", "args": [{"type": "i32", "value": "10"}]}, "expected": [{"type": "i32", "value": "16"}]}, 
  {"type": "assert_return", "line": 485, "action": {"type": "invoke", "field": "load", "args": [{"type": "i32", "value": "8"}]}, "expected": [{"type": "i32", "value": "1048576"}]}, 
  {"type": "assert_trap", "line": 486, "action": {"type": "invoke", "field": "load", "args": [{"type": "i32", "value": "1000000"}]}, "text": "out of bounds memory access", "expected": [{"type": "i32"}]}, 
  {"type": "assert_invalid", "line": 489, "filename": "imports.97.wasm", "text": "multiple memories", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 493, "filename": "imports.98.wasm", "text": "multiple memories", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 497, "filename": "imports.99.wasm", "text": "multiple memories", "module_type": "binary"}, 
  {"type": "module", "line": 501, "filename": "imports.100.wasm"}, 
  {"type": "module", "line": 502, "filename": "imports.101.wasm"}, 
  {"type": "module", "line": 503, "filename": "imports.102.wasm"}, 
  {"type": "module", "line": 504, "filename": "imports.103.wasm"}, 
  {"type": "module", "line": 505, "filename": "imports.104.wasm"}, 
  {"type": "module", "line": 506, "filename": "imports.105.wasm"}, 
  {"type": "module", "line": 507, "filename": "imports.106.wasm"}, 
  {"type": "module", "line": 508, "filename": "imports.107.wasm"}, 
  {"type": "module", "line": 509, "filename": "imports.108.wasm"}, 
  {"type": "assert_unlinkable", "line": 512, "filename": "imports.109.wasm", "text": "unknown import", "module_type": "binary"}, 
  {"type": "assert_unlinkable", "line": 516, "filename": "imports.110.wasm", "text": "unknown import", "module_type": "binary"}, 
  {"type": "assert_unlinkable", "line": 521, "filename": "imports.111.wasm", "text": "incompatible import type", "module_type": "binary"}, 
  {"type": "assert_unlinkable", "line": 525, "filename": "imports.112.wasm", "text": "incompatible import type", "module_type": "binary"}, 
  {"type": "assert_unlinkable", "line": 529, "filename": "imports.113.wasm", "text": "incompatible import type", "module_type": "binary"}, 
  {"type": "assert_unlinkable", "line": 533, "filename": "imports.114.wasm", "text": "incompatible import type", "module_type": "binary"}, 
  {"type": "assert_unlinkable", "line": 538, "filename": "imports.115.wasm", "text": "incompatible import type", "module_type": "binary"}, 
  {"type": "assert_unlinkable", "line": 542, "filename": "imports.116.wasm", "text": "incompatible import type", "module_type": "binary"}, 
  {"type": "assert_unlinkable", "line": 546, "filename": "imports.117.wasm", "text": "incompatible import type", "module_type": "binary"}, 
  {"type": "assert_unlinkable", "line": 550, "filename": "imports.118.wasm", "text": "incompatible import type", "module_type": "binary"}, 
  {"type": "assert_unlinkable", "line": 554, "filename": "imports.119.wasm", "text": "incompatible import type", "module_type": "binary"}, 
  {"type": "assert_unlinkable", "line": 558, "filename": "imports.120.wasm", "text": "incompatible import type", "module_type": "binary"}, 
  {"type": "assert_unlinkable", "line": 563, "filename": "imports.121.wasm", "text": "incompatible import type", "module_type": "binary"}, 
  {"type": "assert_unlinkable", "line": 567, "filename": "imports.122.wasm", "text": "incompatible import type", "module_type": "binary"}, 
  {"type": "module", "line": 571, "filename": "imports.123.wasm"}, 
  {"type": "assert_return", "line": 575, "action": {"type": "invoke", "field": "grow", "args": [{"type": "i32", "value": "0"}]}, "expected": [{"type": "i32", "value": "1"}]}, 
  {"type": "assert_return", "line": 576, "action": {"type": "invoke", "field": "grow", "args": [{"type": "i32", "value": "1"}]}, "expected": [{"type": "i32", "value": "1"}]}, 
  {"type": "assert_return", "line": 577, "action": {"type": "invoke", "field": "grow", "args": [{"type": "i32", "value": "0"}]}, "expected": [{"type": "i32", "value": "2"}]}, 
  {"type": "assert_return", "line": 578, "action": {"type": "invoke", "field": "grow", "args": [{"type": "i32", "value": "1"}]}, "expected": [{"type": "i32", "value": "4294967295"}]}, 
  {"type": "assert_return", "line": 579, "action": {"type": "invoke", "field": "grow", "args": [{"type": "i32", "value": "0"}]}, "expected": [{"type": "i32", "value": "2"}]}, 
  {"type": "module", "line": 581, "name": "$Mgm", "filename": "imports.124.wasm"}, 
  {"type": "register", "line": 585, "name": "$Mgm", "as": "grown-memory"}, 
  {"type": "assert_return", "line": 586, "action": {"type": "invoke", "module": "$Mgm", "field": "grow", "args": []}, "expected": [{"type": "i32", "value": "1"}]}, 
  {"type": "module", "line": 587, "name": "$Mgim1", "filename": "imports.125.wasm"}, 
  {"type": "register", "line": 592, "name": "$Mgim1", "as": "grown-imported-memory"}, 
  {"type": "assert_return", "line": 593, "action": {"type": "invoke", "module": "$Mgim1", "field": "grow", "args": []}, "expected": [{"type": "i32", "value": "2"}]}, 
  {"type": "module", "line": 594, "name": "$Mgim2", "filename": "imports.126.wasm"}, 
  {"type": "assert_return", "line": 599, "action": {"type": "invoke", "module": "$Mgim2", "field": "size", "args": []}, "expected": [{"type": "i32", "value": "3"}]}, 
  {"type": "assert_malformed", "line": 605, "filename": "imports.127.wat", "text": "import after function", "module_type": "text"}, 
  {"type": "assert_malformed", "line": 609, "filename": "imports.128.wat", "text": "import after function", "module_type": "text"}, 
  {"type": "assert_malformed", "line": 613, "filename": "imports.129.wat", "text": "import after function", "module_type": "text"}, 
  {"type": "assert_malformed", "line": 617, "filename": "imports.130.wat", "text": "import after function", "module_type": "text"}, 
  {"type": "assert_malformed", "line": 622, "filename": "imports.131.wat", "text": "import after global", "module_type": "text"}, 
  {"type": "assert_malformed", "line": 626, "filename": "imports.132.wat", "text": "import after global", "module_type": "text"}, 
  {"type": "assert_malformed", "line": 630, "filename": "imports.133.wat", "text": "import after global", "module_type": "text"}, 
  {"type": "assert_malformed", "line": 634, "filename": "imports.134.wat", "text": "import after global", "module_type": "text"}, 
  {"type": "assert_malformed", "line": 639, "filename": "imports.135.wat", "text": "import after table", "module_type": "text"}, 
  {"type": "assert_malformed", "line": 643, "filename": "imports.136.wat", "text": "import after table", "module_type": "text"}, 
  {"type": "assert_malformed", "line": 647, "filename": "imports.137.wat", "text": "import after table", "module_type": "text"}, 
  {"type": "assert_malformed", "line": 651, "filename": "imports.138.wat", "text": "import after table", "module_type": "text"}, 
  {"type": "assert_malformed", "line": 656, "filename": "imports.139.wat", "text": "import after memory", "module_type": "text"}, 
  {"type": "assert_malformed", "line": 660, "filename": "imports.140.wat", "text": "import after memory", "module_type": "text"}, 
  {"type": "assert_malformed", "line": 664, "filename": "imports.141.wat", "text": "import after memory", "module_type": "text"}, 
  {"type": "assert_malformed", "line": 668, "filename": "imports.142.wat", "text": "import after memory", "module_type": "text"}, 
  {"type": "module", "line": 675, "filename": "imports.143.wasm"}, 
  {"type": "register", "line": 676, "as": "not wasm"}, 
  {"type": "assert_unlinkable", "line": 678, "filename": "imports.144.wasm", "text": "unknown import", "module_type": "binary"}]},
  "code": [
    "(module \n  (func (export \"func\"))\n  (func (export \"func-i32\") (param i32))\n  (func (export \"func-f32\") (param f32))\n  (func (export \"func->i32\") (result i32) (i32.const 22))\n  (func (export \"func->f32\") (result f32) (f32.const 11))\n  (func (export \"func-i32->i32\") (param i32) (result i32) (local.get 0))\n  (func (export \"func-i64->i64\") (param i64) (result i64) (local.get 0)) (global (export \"global-i32\") i32 (i32.const 55)) (global (export \"global-f32\") f32 (f32.const 44)) (global (export \"global-mut-i64\") (mut i64) (i64.const 66)) (table (export \"table-10-inf\") 10 funcref) (table (export \"table-10-20\") 10 20 funcref) (memory (export \"memory-2-inf\") 2) )",
    "(register \"test\")",
    "(module (type $func_i32 (func (param i32))) (type $func_i64 (func (param i64))) (type $func_f32 (func (param f32))) (type $func_f64 (func (param f64))) (import \"spectest\" \"print_i32\" (func (param i32)))\n  (func (import \"spectest\" \"print_i64\") (param i64)) (import \"spectest\" \"print_i32\" (func $print_i32 (param i32))) (import \"spectest\" \"print_i64\" (func $print_i64 (param i64))) (import \"spectest\" \"print_f32\" (func $print_f32 (param f32))) (import \"spectest\" \"print_f64\" (func $print_f64 (param f64))) (import \"spectest\" \"print_i32_f32\" (func $print_i32_f32 (param i32 f32))) (import \"spectest\" \"print_f64_f64\" (func $print_f64_f64 (param f64 f64)))\n  (func $print_i32-2 (import \"spectest\" \"print_i32\") (param i32))\n  (func $print_f64-2 (import \"spectest\" \"print_f64\") (param f64)) (import \"test\" \"-i64->i64\" (func $i64->i64 (param i64) (result i64)))\n  (func (export \"p1\") (import \"spectest\" \"print_i32\") (param i32))\n  (func $p (export \"p2\") (import \"spectest\" \"print_i32\") (param i32))\n  (func (export \"p3\") (export \"p4\") (import \"spectest\" \"print_i32\") (param i32))\n  (func (export \"p5\") (import \"spectest\" \"print_i32\") (type 0))\n  (func (export \"p6\") (import \"spectest\" \"print_i32\") (type 0) (param i32) (result)) (import \"spectest\" \"print_i32\" (func (type $forward)))\n  (func (import \"spectest\" \"print_i32\") (type $forward)) (type $forward (func (param i32))) (table funcref (elem $print_i32 $print_f64))\n  (func (export \"print32\") (param $i i32) (local $x f32) (local.set $x (f32.convert_i32_s (local.get $i))) (call 0 (local.get $i)) (call $print_i32_f32 (i32.add (local.get $i) (i32.const 1)) (f32.const 42) ) (call $print_i32 (local.get $i)) (call $print_i32-2 (local.get $i)) (call $print_f32 (local.get $x)) (call_indirect (type $func_i32) (local.get $i) (i32.const 0)) )\n  (func (export \"print64\") (param $i i64) (local $x f64) (local.set $x (f64.convert_i64_s (call $i64->i64 (local.get $i)))) (call 1 (local.get $i)) (call $print_f64_f64 (f64.add (local.get $x) (f64.const 1)) (f64.const 53) ) (call $print_i64 (local.get $i)) (call $print_f64 (local.get $x)) (call $print_f64-2 (local.get $x)) (call_indirect (type $func_f64) (local.get $x) (i32.const 1)) ))",
    "(assert_return (invoke \"print32\" (i32.const 13)))",
    "(assert_return (invoke \"print64\" (i64.const 24)))",
    "(assert_invalid (module (type (func (result i32))) (import \"test\" \"func\" (func (type 1))) ) \"unknown type\")",
    "(module (import \"spectest\" \"print_i32\" (func $imported_print (param i32)))\n  (func (export \"print_i32\") (param $i i32) (call $imported_print (local.get $i)) ))",
    "(assert_return (invoke \"print_i32\" (i32.const 13)))",
    "(module (import \"spectest\" \"print_i32\" (func $imported_print (param i32)))\n  (func (export \"print_i32\") (param $i i32) (param $j i32) (result i32) (i32.add (local.get $i) (local.get $j)) ))",
    "(assert_return (invoke \"print_i32\" (i32.const 5) (i32.const 11)) (i32.const 16))",
    "(module (import \"test\" \"\" (func)))",
    "(module (import \"test\" \"-i32\" (func (param i32))))",
    "(module (import \"test\" \"-f32\" (func (param f32))))",
    "(module (import \"test\" \"->i32\" (func (result i32))))",
    "(module (import \"test\" \"->f32\" (func (result f32))))",
    "(module (import \"test\" \"-i32->i32\" (func (param i32) (result i32))))",
    "(module (import \"test\" \"-i64->i64\" (func (param i64) (result i64))))",
    "(assert_unlinkable (module (import \"test\" \"unknown\" (func))) \"unknown import\")",
    "(assert_unlinkable (module (import \"spectest\" \"unknown\" (func))) \"unknown import\")",
    "(assert_unlinkable (module (import \"test\" \"func\" (func (param i32)))) \"incompatible import type\")",
    "(assert_unlinkable (module (import \"test\" \"func\" (func (result i32)))) \"incompatible import type\")",
    "(assert_unlinkable (module (import \"test\" \"func\" (func (param i32) (result i32)))) \"incompatible import type\")",
    "(assert_unlinkable (module (import \"test\" \"func-i32\" (func))) \"incompatible import type\")",
    "(assert_unlinkable (module (import \"test\" \"func-i32\" (func (result i32)))) \"incompatible import type\")",
    "(assert_unlinkable (module (import \"test\" \"func-i32\" (func (param f32)))) \"incompatible import type\")",
    "(assert_unlinkable (module (import \"test\" \"func-i32\" (func (param i64)))) \"incompatible import type\")",
    "(assert_unlinkable (module (import \"test\" \"func-i32\" (func (param i32) (result i32)))) \"incompatible import type\")",
    "(assert_unlinkable (module (import \"test\" \"func->i32\" (func))) \"incompatible import type\")",
    "(assert_unlinkable (module (import \"test\" \"func->i32\" (func (param i32)))) \"incompatible import type\")",
    "(assert_unlinkable (module (import \"test\" \"func->i32\" (func (result f32)))) \"incompatible import type\")",
    "(assert_unlinkable (module (import \"test\" \"func->i32\" (func (result i64)))) \"incompatible import type\")",
    "(assert_unlinkable (module (import \"test\" \"func->i32\" (func (param i32) (result i32)))) \"incompatible import type\")",
    "(assert_unlinkable (module (import \"test\" \"func-i32->i32\" (func))) \"incompatible import type\")",
    "(assert_unlinkable (module (import \"test\" \"func-i32->i32\" (func (param i32)))) \"incompatible import type\")",
    "(assert_unlinkable (module (import \"test\" \"func-i32->i32\" (func (result i32)))) \"incompatible import type\")",
    "(assert_unlinkable (module (import \"test\" \"global-i32\" (func (result i32)))) \"incompatible import type\")",
    "(assert_unlinkable (module (import \"test\" \"table-10-inf\" (func))) \"incompatible import type\")",
    "(assert_unlinkable (module (import \"test\" \"memory-2-inf\" (func))) \"incompatible import type\")",
    "(assert_unlinkable (module (import \"spectest\" \"global_i32\" (func))) \"incompatible import type\")",
    "(assert_unlinkable (module (import \"spectest\" \"table\" (func))) \"incompatible import type\")",
    "(assert_unlinkable (module (import \"spectest\" \"memory\" (func))) \"incompatible import type\")",
    "(module (import \"spectest\" \"global_i32\" (global i32)) (global (import \"spectest\" \"global_i32\") i32) (import \"spectest\" \"global_i32\" (global $x i32)) (global $y (import \"spectest\" \"global_i32\") i32) (import \"spectest\" \"global_i64\" (global i64)) (import \"spectest\" \"global_f32\" (global f32)) (import \"spectest\" \"global_f64\" (global f64))\n  (func (export \"get-0\") (result i32) (global.get 0))\n  (func (export \"get-1\") (result i32) (global.get 1))\n  (func (export \"get-x\") (result i32) (global.get $x))\n  (func (export \"get-y\") (result i32) (global.get $y))\n  (func (export \"get-4\") (result i64) (global.get 4))\n  (func (export \"get-5\") (result f32) (global.get 5))\n  (func (export \"get-6\") (result f64) (global.get 6)))",
    "(assert_return (invoke \"get-0\") (i32.const 666))",
    "(assert_return (invoke \"get-1\") (i32.const 666))",
    "(assert_return (invoke \"get-x\") (i32.const 666))",
    "(assert_return (invoke \"get-y\") (i32.const 666))",
    "(assert_return (invoke \"get-4\") (i64.const 666))",
    "(assert_return (invoke \"get-5\") (f32.const 666.6))",
    "(assert_return (invoke \"get-6\") (f64.const 666.6))",
    "(module (import \"test\" \"global-i32\" (global i32)))",
    "(module (import \"test\" \"global-f32\" (global f32)))",
    "(module (import \"test\" \"global-mut-i64\" (global (mut i64))))",
    "(assert_unlinkable (module (import \"test\" \"unknown\" (global i32))) \"unknown import\")",
    "(assert_unlinkable (module (import \"spectest\" \"unknown\" (global i32))) \"unknown import\")",
    "(assert_unlinkable (module (import \"test\" \"global-i32\" (global i64))) \"incompatible import type\")",
    "(assert_unlinkable (module (import \"test\" \"global-i32\" (global f32))) \"incompatible import type\")",
    "(assert_unlinkable (module (import \"test\" \"global-i32\" (global f64))) \"incompatible import type\")",
    "(assert_unlinkable (module (import \"test\" \"global-i32\" (global (mut i32)))) \"incompatible import type\")",
    "(assert_unlinkable (module (import \"test\" \"global-f32\" (global i32))) \"incompatible import type\")",
    "(assert_unlinkable (module (import \"test\" \"global-f32\" (global i64))) \"incompatible import type\")",
    "(assert_unlinkable (module (import \"test\" \"global-f32\" (global f64))) \"incompatible import type\")",
    "(assert_unlinkable (module (import \"test\" \"global-f32\" (global (mut f32)))) \"incompatible import type\")",
    "(assert_unlinkable (module (import \"test\" \"global-mut-i64\" (global (mut i32)))) \"incompatible import type\")",
    "(assert_unlinkable (module (import \"test\" \"global-mut-i64\" (global (mut f32)))) \"incompatible import type\")",
    "(assert_unlinkable (module (import \"test\" \"global-mut-i64\" (global (mut f64)))) \"incompatible import type\")",
    "(assert_unlinkable (module (import \"test\" \"global-mut-i64\" (global i64))) \"incompatible import type\")",
    "(assert_unlinkable (module (import \"test\" \"func\" (global i32))) \"incompatible import type\")",
    "(assert_unlinkable (module (import \"test\" \"table-10-inf\" (global i32))) \"incompatible import type\")",
    "(assert_unlinkable (module (import \"test\" \"memory-2-inf\" (global i32))) \"incompatible import type\")",
    "(assert_unlinkable (module (import \"spectest\" \"print_i32\" (global i32))) \"incompatible import type\")",
    "(assert_unlinkable (module (import \"spectest\" \"table\" (global i32))) \"incompatible import type\")",
    "(assert_unlinkable (module (import \"spectest\" \"memory\" (global i32))) \"incompatible import type\")",
    "(module (type (func (result i32))) (import \"spectest\" \"table\" (table $tab 10 20 funcref)) (elem (table $tab) (i32.const 1) $f $g)\n  (func (export \"call\") (param i32) (result i32) (call_indirect $tab (type 0) (local.get 0)) )\n  (func $f (result i32) (i32.const 11))\n  (func $g (result i32) (i32.const 22)))",
    "(assert_trap (invoke \"call\" (i32.const 0)) \"uninitialized element\")",
    "(assert_return (invoke \"call\" (i32.const 1)) (i32.const 11))",
    "(assert_return (invoke \"call\" (i32.const 2)) (i32.const 22))",
    "(assert_trap (invoke \"call\" (i32.const 3)) \"uninitialized element\")",
    "(assert_trap (invoke \"call\" (i32.const 100)) \"undefined element\")",
    "(module (type (func (result i32))) (table $tab (import \"spectest\" \"table\") 10 20 funcref) (elem (table $tab) (i32.const 1) $f $g)\n  (func (export \"call\") (param i32) (result i32) (call_indirect $tab (type 0) (local.get 0)) )\n  (func $f (result i32) (i32.const 11))\n  (func $g (result i32) (i32.const 22)))",
    "(assert_trap (invoke \"call\" (i32.const 0)) \"uninitialized element\")",
    "(assert_return (invoke \"call\" (i32.const 1)) (i32.const 11))",
    "(assert_return (invoke \"call\" (i32.const 2)) (i32.const 22))",
    "(assert_trap (invoke \"call\" (i32.const 3)) \"uninitialized element\")",
    "(assert_trap (invoke \"call\" (i32.const 100)) \"undefined element\")",
    "(module (import \"spectest\" \"table\" (table 0 funcref)) (import \"spectest\" \"table\" (table 0 funcref)) (table 10 funcref) (table 10 funcref))",
    "(module (import \"test\" \"table-10-inf\" (table 10 funcref)))",
    "(module (import \"test\" \"table-10-inf\" (table 5 funcref)))",
    "(module (import \"test\" \"table-10-inf\" (table 0 funcref)))",
    "(module (import \"test\" \"table-10-20\" (table 10 funcref)))",
    "(module (import \"test\" \"table-10-20\" (table 5 funcref)))",
    "(module (import \"test\" \"table-10-20\" (table 0 funcref)))",
    "(module (import \"test\" \"table-10-20\" (table 10 20 funcref)))",
    "(module (import \"test\" \"table-10-20\" (table 5 20 funcref)))",
    "(module (import \"test\" \"table-10-20\" (table 0 20 funcref)))",
    "(module (import \"test\" \"table-10-20\" (table 10 25 funcref)))",
    "(module (import \"test\" \"table-10-20\" (table 5 25 funcref)))",
    "(module (import \"test\" \"table-10-20\" (table 0 25 funcref)))",
    "(module (import \"spectest\" \"table\" (table 10 funcref)))",
    "(module (import \"spectest\" \"table\" (table 5 funcref)))",
    "(module (import \"spectest\" \"table\" (table 0 funcref)))",
    "(module (import \"spectest\" \"table\" (table 10 20 funcref)))",
    "(module (import \"spectest\" \"table\" (table 5 20 funcref)))",
    "(module (import \"spectest\" \"table\" (table 0 20 funcref)))",
    "(module (import \"spectest\" \"table\" (table 10 25 funcref)))",
    "(module (import \"spectest\" \"table\" (table 5 25 funcref)))",
    "(assert_unlinkable (module (import \"test\" \"unknown\" (table 10 funcref))) \"unknown import\")",
    "(assert_unlinkable (module (import \"spectest\" \"unknown\" (table 10 funcref))) \"unknown import\")",
    "(assert_unlinkable (module (import \"test\" \"table-10-inf\" (table 12 funcref))) \"incompatible import type\")",
    "(assert_unlinkable (module (import \"test\" \"table-10-inf\" (table 10 20 funcref))) \"incompatible import type\")",
    "(assert_unlinkable (module (import \"test\" \"table-10-20\" (table 12 20 funcref))) \"incompatible import type\")",
    "(assert_unlinkable (module (import \"test\" \"table-10-20\" (table 10 18 funcref))) \"incompatible import type\")",
    "(assert_unlinkable (module (import \"spectest\" \"table\" (table 12 funcref))) \"incompatible import type\")",
    "(assert_unlinkable (module (import \"spectest\" \"table\" (table 10 15 funcref))) \"incompatible import type\")",
    "(assert_unlinkable (module (import \"test\" \"func\" (table 10 funcref))) \"incompatible import type\")",
    "(assert_unlinkable (module (import \"test\" \"global-i32\" (table 10 funcref))) \"incompatible import type\")",
    "(assert_unlinkable (module (import \"test\" \"memory-2-inf\" (table 10 funcref))) \"incompatible import type\")",
    "(assert_unlinkable (module (import \"spectest\" \"print_i32\" (table 10 funcref))) \"incompatible import type\")",
    "(module (import \"spectest\" \"memory\" (memory 1 2)) (data (memory 0) (i32.const 10) \"\\10\")\n  (func (export \"load\") (param i32) (result i32) (i32.load (local.get 0))))",
    "(assert_return (invoke \"load\" (i32.const 0)) (i32.const 0))",
    "(assert_return (invoke \"load\" (i32.const 10)) (i32.const 16))",
    "(assert_return (invoke \"load\" (i32.const 8)) (i32.const 0x100000))",
    "(assert_trap (invoke \"load\" (i32.const 1000000)) \"out of bounds memory access\")",
    "(module (memory (import \"spectest\" \"memory\") 1 2) (data (memory 0) (i32.const 10) \"\\10\")\n  (func (export \"load\") (param i32) (result i32) (i32.load (local.get 0))))",
    "(assert_return (invoke \"load\" (i32.const 0)) (i32.const 0))",
    "(assert_return (invoke \"load\" (i32.const 10)) (i32.const 16))",
    "(assert_return (invoke \"load\" (i32.const 8)) (i32.const 0x100000))",
    "(assert_trap (invoke \"load\" (i32.const 1000000)) \"out of bounds memory access\")",
    "(assert_invalid (module (import \"\" \"\" (memory 1)) (import \"\" \"\" (memory 1))) \"multiple memories\")",
    "(assert_invalid (module (import \"\" \"\" (memory 1)) (memory 0)) \"multiple memories\")",
    "(assert_invalid (module (memory 0) (memory 0)) \"multiple memories\")",
    "(module (import \"test\" \"memory-2-inf\" (memory 2)))",
    "(module (import \"test\" \"memory-2-inf\" (memory 1)))",
    "(module (import \"test\" \"memory-2-inf\" (memory 0)))",
    "(module (import \"spectest\" \"memory\" (memory 1)))",
    "(module (import \"spectest\" \"memory\" (memory 0)))",
    "(module (import \"spectest\" \"memory\" (memory 1 2)))",
    "(module (import \"spectest\" \"memory\" (memory 0 2)))",
    "(module (import \"spectest\" \"memory\" (memory 1 3)))",
    "(module (import \"spectest\" \"memory\" (memory 0 3)))",
    "(assert_unlinkable (module (import \"test\" \"unknown\" (memory 1))) \"unknown import\")",
    "(assert_unlinkable (module (import \"spectest\" \"unknown\" (memory 1))) \"unknown import\")",
    "(assert_unlinkable (module (import \"test\" \"memory-2-inf\" (memory 3))) \"incompatible import type\")",
    "(assert_unlinkable (module (import \"test\" \"memory-2-inf\" (memory 2 3))) \"incompatible import type\")",
    "(assert_unlinkable (module (import \"spectest\" \"memory\" (memory 2))) \"incompatible import type\")",
    "(assert_unlinkable (module (import \"spectest\" \"memory\" (memory 1 1))) \"incompatible import type\")",
    "(assert_unlinkable (module (import \"test\" \"func-i32\" (memory 1))) \"incompatible import type\")",
    "(assert_unlinkable (module (import \"test\" \"global-i32\" (memory 1))) \"incompatible import type\")",
    "(assert_unlinkable (module (import \"test\" \"table-10-inf\" (memory 1))) \"incompatible import type\")",
    "(assert_unlinkable (module (import \"spectest\" \"print_i32\" (memory 1))) \"incompatible import type\")",
    "(assert_unlinkable (module (import \"spectest\" \"global_i32\" (memory 1))) \"incompatible import type\")",
    "(assert_unlinkable (module (import \"spectest\" \"table\" (memory 1))) \"incompatible import type\")",
    "(assert_unlinkable (module (import \"spectest\" \"memory\" (memory 2))) \"incompatible import type\")",
    "(assert_unlinkable (module (import \"spectest\" \"memory\" (memory 1 1))) \"incompatible import type\")",
    "(module (import \"spectest\" \"memory\" (memory 0 3))\n  (func (export \"grow\") (param i32) (result i32) (memory.grow (local.get 0))))",
    "(assert_return (invoke \"grow\" (i32.const 0)) (i32.const 1))",
    "(assert_return (invoke \"grow\" (i32.const 1)) (i32.const 1))",
    "(assert_return (invoke \"grow\" (i32.const 0)) (i32.const 2))",
    "(assert_return (invoke \"grow\" (i32.const 1)) (i32.const -1))",
    "(assert_return (invoke \"grow\" (i32.const 0)) (i32.const 2))",
    "(module $Mgm (memory (export \"memory\") 1)\n  (func (export \"grow\") (result i32) (memory.grow (i32.const 1))))",
    "(register \"grown-memory\" $Mgm)",
    "(assert_return (invoke $Mgm \"grow\") (i32.const 1))",
    "(module $Mgim1 (memory (export \"memory\") (import \"grown-memory\" \"memory\") 2)\n  (func (export \"grow\") (result i32) (memory.grow (i32.const 1))))",
    "(register \"grown-imported-memory\" $Mgim1)",
    "(assert_return (invoke $Mgim1 \"grow\") (i32.const 2))",
    "(module $Mgim2 (import \"grown-imported-memory\" \"memory\" (memory 3))\n  (func (export \"size\") (result i32) (memory.size)))",
    "(assert_return (invoke $Mgim2 \"size\") (i32.const 3))",
    "(assert_malformed (module quote \"(func) (import \\\"\\\" \\\"\\\" (func))\") \"import after function\")",
    "(assert_malformed (module quote \"(func) (import \\\"\\\" \\\"\\\" (global i64))\") \"import after function\")",
    "(assert_malformed (module quote \"(func) (import \\\"\\\" \\\"\\\" (table 0 funcref))\") \"import after function\")",
    "(assert_malformed (module quote \"(func) (import \\\"\\\" \\\"\\\" (memory 0))\") \"import after function\")",
    "(assert_malformed (module quote \"(global i64 (i64.const 0)) (import \\\"\\\" \\\"\\\" (func))\") \"import after global\")",
    "(assert_malformed (module quote \"(global i64 (i64.const 0)) (import \\\"\\\" \\\"\\\" (global f32))\") \"import after global\")",
    "(assert_malformed (module quote \"(global i64 (i64.const 0)) (import \\\"\\\" \\\"\\\" (table 0 funcref))\") \"import after global\")",
    "(assert_malformed (module quote \"(global i64 (i64.const 0)) (import \\\"\\\" \\\"\\\" (memory 0))\") \"import after global\")",
    "(assert_malformed (module quote \"(table 0 funcref) (import \\\"\\\" \\\"\\\" (func))\") \"import after table\")",
    "(assert_malformed (module quote \"(table 0 funcref) (import \\\"\\\" \\\"\\\" (global i32))\") \"import after table\")",
    "(assert_malformed (module quote \"(table 0 funcref) (import \\\"\\\" \\\"\\\" (table 0 funcref))\") \"import after table\")",
    "(assert_malformed (module quote \"(table 0 funcref) (import \\\"\\\" \\\"\\\" (memory 0))\") \"import after table\")",
    "(assert_malformed (module quote \"(memory 0) (import \\\"\\\" \\\"\\\" (func))\") \"import after memory\")",
    "(assert_malformed (module quote \"(memory 0) (import \\\"\\\" \\\"\\\" (global i32))\") \"import after memory\")",
    "(assert_malformed (module quote \"(memory 0) (import \\\"\\\" \\\"\\\" (table 1 3 funcref))\") \"import after memory\")",
    "(assert_malformed (module quote \"(memory 0) (import \\\"\\\" \\\"\\\" (memory 1 2))\") \"import after memory\")",
    "(module )",
    "(register \"not wasm\")",
    "(assert_unlinkable (module (import \"not wasm\" \"overloaded\" (func)) (import \"not wasm\" \"overloaded\" (func (param i32))) (import \"not wasm\" \"overloaded\" (func (param i32 i32))) (import \"not wasm\" \"overloaded\" (func (param i64))) (import \"not wasm\" \"overloaded\" (func (param f32))) (import \"not wasm\" \"overloaded\" (func (param f64))) (import \"not wasm\" \"overloaded\" (func (result i32))) (import \"not wasm\" \"overloaded\" (func (result i64))) (import \"not wasm\" \"overloaded\" (func (result f32))) (import \"not wasm\" \"overloaded\" (func (result f64))) (import \"not wasm\" \"overloaded\" (global i32)) (import \"not wasm\" \"overloaded\" (global i64)) (import \"not wasm\" \"overloaded\" (global f32)) (import \"not wasm\" \"overloaded\" (global f64)) (import \"not wasm\" \"overloaded\" (table 0 funcref)) (import \"not wasm\" \"overloaded\" (memory 0)) ) \"unknown import\")"
  ],
  "dump": {
    "imports.0.wasm": {
      "header": "\nimports.0.wasm:\tfile format wasm 0x1\n\nSections:\n\n     Type start=0x0000000a end=0x00000028 (size=0x0000001e) count: 7\n Function start=0x0000002a end=0x00000032 (size=0x00000008) count: 7\n    Table start=0x00000034 end=0x0000003c (size=0x00000008) count: 2\n   Memory start=0x0000003e end=0x00000041 (size=0x00000003) count: 1\n   Global start=0x00000043 end=0x00000057 (size=0x00000014) count: 3\n   Export start=0x0000005a end=0x00000107 (size=0x000000ad) count: 13\n     Code start=0x00000109 end=0x0000012a (size=0x00000021) count: 7\n",
      "details": "\nimports.0.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nType[7]:\n - type[0] () -> nil\n - type[1] (i32) -> nil\n - type[2] (f32) -> nil\n - type[3] () -> i32\n - type[4] () -> f32\n - type[5] (i32) -> i32\n - type[6] (i64) -> i64\nFunction[7]:\n - func[0] sig=0 <func>\n - func[1] sig=1 <func-i32>\n - func[2] sig=2 <func-f32>\n - func[3] sig=3 <func->i32>\n - func[4] sig=4 <func->f32>\n - func[5] sig=5 <func-i32->i32>\n - func[6] sig=6 <func-i64->i64>\nTable[2]:\n - table[0] type=funcref initial=10\n - table[1] type=funcref initial=10 max=20\nMemory[1]:\n - memory[0] pages: initial=2\nGlobal[3]:\n - global[0] i32 mutable=0 <global-i32> - init i32=55\n - global[1] f32 mutable=0 <global-f32> - init f32=0x1.6p+5\n - global[2] i64 mutable=1 <global-mut-i64> - init i64=66\nExport[13]:\n - func[0] <func> -> \"func\"\n - func[1] <func-i32> -> \"func-i32\"\n - func[2] <func-f32> -> \"func-f32\"\n - func[3] <func->i32> -> \"func->i32\"\n - func[4] <func->f32> -> \"func->f32\"\n - func[5] <func-i32->i32> -> \"func-i32->i32\"\n - func[6] <func-i64->i64> -> \"func-i64->i64\"\n - global[0] -> \"global-i32\"\n - global[1] -> \"global-f32\"\n - global[2] -> \"global-mut-i64\"\n - table[0] -> \"table-10-inf\"\n - table[1] -> \"table-10-20\"\n - memory[0] -> \"memory-2-inf\"\nCode[7]:\n - func[0] size=2 <func>\n - func[1] size=2 <func-i32>\n - func[2] size=2 <func-f32>\n - func[3] size=4 <func->i32>\n - func[4] size=7 <func->f32>\n - func[5] size=4 <func-i32->i32>\n - func[6] size=4 <func-i64->i64>\n",
      "disassemble": "\nimports.0.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n00010b func[0] <func>:\n 00010c: 0b                         | end\n00010e func[1] <func-i32>:\n 00010f: 0b                         | end\n000111 func[2] <func-f32>:\n 000112: 0b                         | end\n000114 func[3] <func->i32>:\n 000115: 41 16                      | i32.const 22\n 000117: 0b                         | end\n000119 func[4] <func->f32>:\n 00011a: 43 00 00 30 41             | f32.const 0x1.6p+3\n 00011f: 0b                         | end\n000121 func[5] <func-i32->i32>:\n 000122: 20 00                      | local.get 0\n 000124: 0b                         | end\n000126 func[6] <func-i64->i64>:\n 000127: 20 00                      | local.get 0\n 000129: 0b                         | end\n"
    },
    "imports.1.wasm": {
      "header": "\nimports.1.wasm:\tfile format wasm 0x1\n\nSections:\n\n     Type start=0x0000000a end=0x0000002e (size=0x00000024) count: 8\n   Import start=0x00000031 end=0x000001b4 (size=0x00000183) count: 18\n Function start=0x000001b6 end=0x000001b9 (size=0x00000003) count: 2\n    Table start=0x000001bb end=0x000001c0 (size=0x00000005) count: 1\n   Export start=0x000001c2 end=0x000001f5 (size=0x00000033) count: 8\n     Elem start=0x000001f7 end=0x000001ff (size=0x00000008) count: 1\n     Code start=0x00000201 end=0x00000269 (size=0x00000068) count: 2\n",
      "details": "\nimports.1.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nType[8]:\n - type[0] (i32) -> nil\n - type[1] (i64) -> nil\n - type[2] (f32) -> nil\n - type[3] (f64) -> nil\n - type[4] (i32) -> nil\n - type[5] (i32, f32) -> nil\n - type[6] (f64, f64) -> nil\n - type[7] (i64) -> i64\nImport[18]:\n - func[0] sig=0 <spectest.print_i32> <- spectest.print_i32\n - func[1] sig=1 <spectest.print_i64> <- spectest.print_i64\n - func[2] sig=0 <spectest.print_i32> <- spectest.print_i32\n - func[3] sig=1 <spectest.print_i64> <- spectest.print_i64\n - func[4] sig=2 <spectest.print_f32> <- spectest.print_f32\n - func[5] sig=3 <spectest.print_f64> <- spectest.print_f64\n - func[6] sig=5 <spectest.print_i32_f32> <- spectest.print_i32_f32\n - func[7] sig=6 <spectest.print_f64_f64> <- spectest.print_f64_f64\n - func[8] sig=0 <spectest.print_i32> <- spectest.print_i32\n - func[9] sig=3 <spectest.print_f64> <- spectest.print_f64\n - func[10] sig=7 <test.func-i64->i64> <- test.func-i64->i64\n - func[11] sig=0 <p1> <- spectest.print_i32\n - func[12] sig=0 <p2> <- spectest.print_i32\n - func[13] sig=0 <p4> <- spectest.print_i32\n - func[14] sig=0 <p5> <- spectest.print_i32\n - func[15] sig=0 <p6> <- spectest.print_i32\n - func[16] sig=4 <spectest.print_i32> <- spectest.print_i32\n - func[17] sig=4 <spectest.print_i32> <- spectest.print_i32\nFunction[2]:\n - func[18] sig=0 <print32>\n - func[19] sig=1 <print64>\nTable[1]:\n - table[0] type=funcref initial=2 max=2\nExport[8]:\n - func[11] <p1> -> \"p1\"\n - func[12] <p2> -> \"p2\"\n - func[13] <p4> -> \"p3\"\n - func[13] <p4> -> \"p4\"\n - func[14] <p5> -> \"p5\"\n - func[15] <p6> -> \"p6\"\n - func[18] <print32> -> \"print32\"\n - func[19] <print64> -> \"print64\"\nElem[1]:\n - segment[0] flags=0 table=0 count=2 - init i32=0\n  - elem[0] = ref.func:2 <spectest.print_i32>\n  - elem[1] = ref.func:5 <spectest.print_f64>\nCode[2]:\n - func[18] size=44 <print32>\n - func[19] size=57 <print64>\n",
      "disassemble": "\nimports.1.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n000203 func[18] <print32>:\n 000204: 01 7d                      | local[1] type=f32\n 000206: 20 00                      | local.get 0\n 000208: b2                         | f32.convert_i32_s\n 000209: 21 01                      | local.set 1\n 00020b: 20 00                      | local.get 0\n 00020d: 10 00                      | call 0 <spectest.print_i32>\n 00020f: 20 00                      | local.get 0\n 000211: 41 01                      | i32.const 1\n 000213: 6a                         | i32.add\n 000214: 43 00 00 28 42             | f32.const 0x1.5p+5\n 000219: 10 06                      | call 6 <spectest.print_i32_f32>\n 00021b: 20 00                      | local.get 0\n 00021d: 10 02                      | call 2 <spectest.print_i32>\n 00021f: 20 00                      | local.get 0\n 000221: 10 08                      | call 8 <spectest.print_i32>\n 000223: 20 01                      | local.get 1\n 000225: 10 04                      | call 4 <spectest.print_f32>\n 000227: 20 00                      | local.get 0\n 000229: 41 00                      | i32.const 0\n 00022b: 11 00 00                   | call_indirect 0 (type 0)\n 00022e: 0b                         | end\n000230 func[19] <print64>:\n 000231: 01 7c                      | local[1] type=f64\n 000233: 20 00                      | local.get 0\n 000235: 10 0a                      | call 10 <test.func-i64->i64>\n 000237: b9                         | f64.convert_i64_s\n 000238: 21 01                      | local.set 1\n 00023a: 20 00                      | local.get 0\n 00023c: 10 01                      | call 1 <spectest.print_i64>\n 00023e: 20 01                      | local.get 1\n 000240: 44 00 00 00 00 00 00 f0 3f | f64.const 0x1p+0\n 000249: a0                         | f64.add\n 00024a: 44 00 00 00 00 00 80 4a 40 | f64.const 0x1.a8p+5\n 000253: 10 07                      | call 7 <spectest.print_f64_f64>\n 000255: 20 00                      | local.get 0\n 000257: 10 03                      | call 3 <spectest.print_i64>\n 000259: 20 01                      | local.get 1\n 00025b: 10 05                      | call 5 <spectest.print_f64>\n 00025d: 20 01                      | local.get 1\n 00025f: 10 09                      | call 9 <spectest.print_f64>\n 000261: 20 01                      | local.get 1\n 000263: 41 01                      | i32.const 1\n 000265: 11 03 00                   | call_indirect 0 (type 3)\n 000268: 0b                         | end\n"
    },
    "imports.3.wasm": {
      "header": "\nimports.3.wasm:\tfile format wasm 0x1\n\nSections:\n\n     Type start=0x0000000a end=0x0000000f (size=0x00000005) count: 1\n   Import start=0x00000011 end=0x00000027 (size=0x00000016) count: 1\n Function start=0x00000029 end=0x0000002b (size=0x00000002) count: 1\n   Export start=0x0000002d end=0x0000003a (size=0x0000000d) count: 1\n     Code start=0x0000003c end=0x00000044 (size=0x00000008) count: 1\n",
      "details": "\nimports.3.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nType[1]:\n - type[0] (i32) -> nil\nImport[1]:\n - func[0] sig=0 <spectest.print_i32> <- spectest.print_i32\nFunction[1]:\n - func[1] sig=0 <print_i32>\nExport[1]:\n - func[1] <print_i32> -> \"print_i32\"\nCode[1]:\n - func[1] size=6 <print_i32>\n",
      "disassemble": "\nimports.3.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n00003e func[1] <print_i32>:\n 00003f: 20 00                      | local.get 0\n 000041: 10 00                      | call 0 <spectest.print_i32>\n 000043: 0b                         | end\n"
    },
    "imports.4.wasm": {
      "header": "\nimports.4.wasm:\tfile format wasm 0x1\n\nSections:\n\n     Type start=0x0000000a end=0x00000015 (size=0x0000000b) count: 2\n   Import start=0x00000017 end=0x0000002d (size=0x00000016) count: 1\n Function start=0x0000002f end=0x00000031 (size=0x00000002) count: 1\n   Export start=0x00000033 end=0x00000040 (size=0x0000000d) count: 1\n     Code start=0x00000042 end=0x0000004b (size=0x00000009) count: 1\n",
      "details": "\nimports.4.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nType[2]:\n - type[0] (i32) -> nil\n - type[1] (i32, i32) -> i32\nImport[1]:\n - func[0] sig=0 <spectest.print_i32> <- spectest.print_i32\nFunction[1]:\n - func[1] sig=1 <print_i32>\nExport[1]:\n - func[1] <print_i32> -> \"print_i32\"\nCode[1]:\n - func[1] size=7 <print_i32>\n",
      "disassemble": "\nimports.4.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n000044 func[1] <print_i32>:\n 000045: 20 00                      | local.get 0\n 000047: 20 01                      | local.get 1\n 000049: 6a                         | i32.add\n 00004a: 0b                         | end\n"
    },
    "imports.5.wasm": {
      "header": "\nimports.5.wasm:\tfile format wasm 0x1\n\nSections:\n\n     Type start=0x0000000a end=0x0000000e (size=0x00000004) count: 1\n   Import start=0x00000010 end=0x0000001d (size=0x0000000d) count: 1\n",
      "details": "\nimports.5.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nType[1]:\n - type[0] () -> nil\nImport[1]:\n - func[0] sig=0 <test.func> <- test.func\n",
      "disassemble": "\nimports.5.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n"
    },
    "imports.6.wasm": {
      "header": "\nimports.6.wasm:\tfile format wasm 0x1\n\nSections:\n\n     Type start=0x0000000a end=0x0000000f (size=0x00000005) count: 1\n   Import start=0x00000011 end=0x00000022 (size=0x00000011) count: 1\n",
      "details": "\nimports.6.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nType[1]:\n - type[0] (i32) -> nil\nImport[1]:\n - func[0] sig=0 <test.func-i32> <- test.func-i32\n",
      "disassemble": "\nimports.6.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n"
    },
    "imports.7.wasm": {
      "header": "\nimports.7.wasm:\tfile format wasm 0x1\n\nSections:\n\n     Type start=0x0000000a end=0x0000000f (size=0x00000005) count: 1\n   Import start=0x00000011 end=0x00000022 (size=0x00000011) count: 1\n",
      "details": "\nimports.7.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nType[1]:\n - type[0] (f32) -> nil\nImport[1]:\n - func[0] sig=0 <test.func-f32> <- test.func-f32\n",
      "disassemble": "\nimports.7.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n"
    },
    "imports.8.wasm": {
      "header": "\nimports.8.wasm:\tfile format wasm 0x1\n\nSections:\n\n     Type start=0x0000000a end=0x0000000f (size=0x00000005) count: 1\n   Import start=0x00000011 end=0x00000023 (size=0x00000012) count: 1\n",
      "details": "\nimports.8.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nType[1]:\n - type[0] () -> i32\nImport[1]:\n - func[0] sig=0 <test.func->i32> <- test.func->i32\n",
      "disassemble": "\nimports.8.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n"
    },
    "imports.9.wasm": {
      "header": "\nimports.9.wasm:\tfile format wasm 0x1\n\nSections:\n\n     Type start=0x0000000a end=0x0000000f (size=0x00000005) count: 1\n   Import start=0x00000011 end=0x00000023 (size=0x00000012) count: 1\n",
      "details": "\nimports.9.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nType[1]:\n - type[0] () -> f32\nImport[1]:\n - func[0] sig=0 <test.func->f32> <- test.func->f32\n",
      "disassemble": "\nimports.9.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n"
    },
    "imports.10.wasm": {
      "header": "\nimports.10.wasm:\tfile format wasm 0x1\n\nSections:\n\n     Type start=0x0000000a end=0x00000010 (size=0x00000006) count: 1\n   Import start=0x00000012 end=0x00000028 (size=0x00000016) count: 1\n",
      "details": "\nimports.10.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nType[1]:\n - type[0] (i32) -> i32\nImport[1]:\n - func[0] sig=0 <test.func-i32->i32> <- test.func-i32->i32\n",
      "disassemble": "\nimports.10.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n"
    },
    "imports.11.wasm": {
      "header": "\nimports.11.wasm:\tfile format wasm 0x1\n\nSections:\n\n     Type start=0x0000000a end=0x00000010 (size=0x00000006) count: 1\n   Import start=0x00000012 end=0x00000028 (size=0x00000016) count: 1\n",
      "details": "\nimports.11.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nType[1]:\n - type[0] (i64) -> i64\nImport[1]:\n - func[0] sig=0 <test.func-i64->i64> <- test.func-i64->i64\n",
      "disassemble": "\nimports.11.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n"
    },
    "imports.36.wasm": {
      "header": "\nimports.36.wasm:\tfile format wasm 0x1\n\nSections:\n\n     Type start=0x0000000a end=0x0000001b (size=0x00000011) count: 4\n   Import start=0x0000001e end=0x000000c0 (size=0x000000a2) count: 7\n Function start=0x000000c2 end=0x000000ca (size=0x00000008) count: 7\n   Export start=0x000000cc end=0x00000105 (size=0x00000039) count: 7\n     Code start=0x00000107 end=0x0000012b (size=0x00000024) count: 7\n",
      "details": "\nimports.36.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nType[4]:\n - type[0] () -> i32\n - type[1] () -> i64\n - type[2] () -> f32\n - type[3] () -> f64\nImport[7]:\n - global[0] i32 mutable=0 <- spectest.global_i32\n - global[1] i32 mutable=0 <- spectest.global_i32\n - global[2] i32 mutable=0 <- spectest.global_i32\n - global[3] i32 mutable=0 <- spectest.global_i32\n - global[4] i64 mutable=0 <- spectest.global_i64\n - global[5] f32 mutable=0 <- spectest.global_f32\n - global[6] f64 mutable=0 <- spectest.global_f64\nFunction[7]:\n - func[0] sig=0 <get-0>\n - func[1] sig=0 <get-1>\n - func[2] sig=0 <get-x>\n - func[3] sig=0 <get-y>\n - func[4] sig=1 <get-4>\n - func[5] sig=2 <get-5>\n - func[6] sig=3 <get-6>\nExport[7]:\n - func[0] <get-0> -> \"get-0\"\n - func[1] <get-1> -> \"get-1\"\n - func[2] <get-x> -> \"get-x\"\n - func[3] <get-y> -> \"get-y\"\n - func[4] <get-4> -> \"get-4\"\n - func[5] <get-5> -> \"get-5\"\n - func[6] <get-6> -> \"get-6\"\nCode[7]:\n - func[0] size=4 <get-0>\n - func[1] size=4 <get-1>\n - func[2] size=4 <get-x>\n - func[3] size=4 <get-y>\n - func[4] size=4 <get-4>\n - func[5] size=4 <get-5>\n - func[6] size=4 <get-6>\n",
      "disassemble": "\nimports.36.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n000109 func[0] <get-0>:\n 00010a: 23 00                      | global.get 0 <spectest.global_i32>\n 00010c: 0b                         | end\n00010e func[1] <get-1>:\n 00010f: 23 01                      | global.get 1 <spectest.global_i32>\n 000111: 0b                         | end\n000113 func[2] <get-x>:\n 000114: 23 02                      | global.get 2 <spectest.global_i32>\n 000116: 0b                         | end\n000118 func[3] <get-y>:\n 000119: 23 03                      | global.get 3 <spectest.global_i32>\n 00011b: 0b                         | end\n00011d func[4] <get-4>:\n 00011e: 23 04                      | global.get 4 <spectest.global_i64>\n 000120: 0b                         | end\n000122 func[5] <get-5>:\n 000123: 23 05                      | global.get 5 <spectest.global_f32>\n 000125: 0b                         | end\n000127 func[6] <get-6>:\n 000128: 23 06                      | global.get 6 <spectest.global_f64>\n 00012a: 0b                         | end\n"
    },
    "imports.37.wasm": {
      "header": "\nimports.37.wasm:\tfile format wasm 0x1\n\nSections:\n\n   Import start=0x0000000a end=0x0000001e (size=0x00000014) count: 1\n",
      "details": "\nimports.37.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nImport[1]:\n - global[0] i32 mutable=0 <- test.global-i32\n",
      "disassemble": "\nimports.37.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n"
    },
    "imports.38.wasm": {
      "header": "\nimports.38.wasm:\tfile format wasm 0x1\n\nSections:\n\n   Import start=0x0000000a end=0x0000001e (size=0x00000014) count: 1\n",
      "details": "\nimports.38.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nImport[1]:\n - global[0] f32 mutable=0 <- test.global-f32\n",
      "disassemble": "\nimports.38.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n"
    },
    "imports.39.wasm": {
      "header": "\nimports.39.wasm:\tfile format wasm 0x1\n\nSections:\n\n   Import start=0x0000000a end=0x00000022 (size=0x00000018) count: 1\n",
      "details": "\nimports.39.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nImport[1]:\n - global[0] i64 mutable=1 <- test.global-mut-i64\n",
      "disassemble": "\nimports.39.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n"
    },
    "imports.60.wasm": {
      "header": "\nimports.60.wasm:\tfile format wasm 0x1\n\nSections:\n\n     Type start=0x0000000a end=0x00000014 (size=0x0000000a) count: 2\n   Import start=0x00000016 end=0x0000002b (size=0x00000015) count: 1\n Function start=0x0000002d end=0x00000031 (size=0x00000004) count: 3\n   Export start=0x00000033 end=0x0000003b (size=0x00000008) count: 1\n     Elem start=0x0000003d end=0x00000045 (size=0x00000008) count: 1\n     Code start=0x00000047 end=0x0000005a (size=0x00000013) count: 3\n",
      "details": "\nimports.60.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nType[2]:\n - type[0] () -> i32\n - type[1] (i32) -> i32\nImport[1]:\n - table[0] type=funcref initial=10 max=20 <- spectest.table\nFunction[3]:\n - func[0] sig=1 <call>\n - func[1] sig=0\n - func[2] sig=0\nExport[1]:\n - func[0] <call> -> \"call\"\nElem[1]:\n - segment[0] flags=0 table=0 count=2 - init i32=1\n  - elem[1] = ref.func:1\n  - elem[2] = ref.func:2\nCode[3]:\n - func[0] size=7 <call>\n - func[1] size=4\n - func[2] size=4\n",
      "disassemble": "\nimports.60.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n000049 func[0] <call>:\n 00004a: 20 00                      | local.get 0\n 00004c: 11 00 00                   | call_indirect 0 <spectest.table> (type 0)\n 00004f: 0b                         | end\n000051 func[1]:\n 000052: 41 0b                      | i32.const 11\n 000054: 0b                         | end\n000056 func[2]:\n 000057: 41 16                      | i32.const 22\n 000059: 0b                         | end\n"
    },
    "imports.61.wasm": {
      "header": "\nimports.61.wasm:\tfile format wasm 0x1\n\nSections:\n\n     Type start=0x0000000a end=0x00000014 (size=0x0000000a) count: 2\n   Import start=0x00000016 end=0x0000002b (size=0x00000015) count: 1\n Function start=0x0000002d end=0x00000031 (size=0x00000004) count: 3\n   Export start=0x00000033 end=0x0000003b (size=0x00000008) count: 1\n     Elem start=0x0000003d end=0x00000045 (size=0x00000008) count: 1\n     Code start=0x00000047 end=0x0000005a (size=0x00000013) count: 3\n",
      "details": "\nimports.61.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nType[2]:\n - type[0] () -> i32\n - type[1] (i32) -> i32\nImport[1]:\n - table[0] type=funcref initial=10 max=20 <- spectest.table\nFunction[3]:\n - func[0] sig=1 <call>\n - func[1] sig=0\n - func[2] sig=0\nExport[1]:\n - func[0] <call> -> \"call\"\nElem[1]:\n - segment[0] flags=0 table=0 count=2 - init i32=1\n  - elem[1] = ref.func:1\n  - elem[2] = ref.func:2\nCode[3]:\n - func[0] size=7 <call>\n - func[1] size=4\n - func[2] size=4\n",
      "disassemble": "\nimports.61.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n000049 func[0] <call>:\n 00004a: 20 00                      | local.get 0\n 00004c: 11 00 00                   | call_indirect 0 <spectest.table> (type 0)\n 00004f: 0b                         | end\n000051 func[1]:\n 000052: 41 0b                      | i32.const 11\n 000054: 0b                         | end\n000056 func[2]:\n 000057: 41 16                      | i32.const 22\n 000059: 0b                         | end\n"
    },
    "imports.62.wasm": {
      "header": "\nimports.62.wasm:\tfile format wasm 0x1\n\nSections:\n\n   Import start=0x0000000a end=0x00000031 (size=0x00000027) count: 2\n    Table start=0x00000033 end=0x0000003a (size=0x00000007) count: 2\n",
      "details": "\nimports.62.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nImport[2]:\n - table[0] type=funcref initial=0 <- spectest.table\n - table[1] type=funcref initial=0 <- spectest.table\nTable[2]:\n - table[2] type=funcref initial=10\n - table[3] type=funcref initial=10\n",
      "disassemble": "\nimports.62.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n"
    },
    "imports.63.wasm": {
      "header": "\nimports.63.wasm:\tfile format wasm 0x1\n\nSections:\n\n   Import start=0x0000000a end=0x00000021 (size=0x00000017) count: 1\n",
      "details": "\nimports.63.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nImport[1]:\n - table[0] type=funcref initial=10 <- test.table-10-inf\n",
      "disassemble": "\nimports.63.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n"
    },
    "imports.64.wasm": {
      "header": "\nimports.64.wasm:\tfile format wasm 0x1\n\nSections:\n\n   Import start=0x0000000a end=0x00000021 (size=0x00000017) count: 1\n",
      "details": "\nimports.64.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nImport[1]:\n - table[0] type=funcref initial=5 <- test.table-10-inf\n",
      "disassemble": "\nimports.64.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n"
    },
    "imports.65.wasm": {
      "header": "\nimports.65.wasm:\tfile format wasm 0x1\n\nSections:\n\n   Import start=0x0000000a end=0x00000021 (size=0x00000017) count: 1\n",
      "details": "\nimports.65.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nImport[1]:\n - table[0] type=funcref initial=0 <- test.table-10-inf\n",
      "disassemble": "\nimports.65.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n"
    },
    "imports.66.wasm": {
      "header": "\nimports.66.wasm:\tfile format wasm 0x1\n\nSections:\n\n   Import start=0x0000000a end=0x00000020 (size=0x00000016) count: 1\n",
      "details": "\nimports.66.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nImport[1]:\n - table[0] type=funcref initial=10 <- test.table-10-20\n",
      "disassemble": "\nimports.66.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n"
    },
    "imports.67.wasm": {
      "header": "\nimports.67.wasm:\tfile format wasm 0x1\n\nSections:\n\n   Import start=0x0000000a end=0x00000020 (size=0x00000016) count: 1\n",
      "details": "\nimports.67.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nImport[1]:\n - table[0] type=funcref initial=5 <- test.table-10-20\n",
      "disassemble": "\nimports.67.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n"
    },
    "imports.68.wasm": {
      "header": "\nimports.68.wasm:\tfile format wasm 0x1\n\nSections:\n\n   Import start=0x0000000a end=0x00000020 (size=0x00000016) count: 1\n",
      "details": "\nimports.68.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nImport[1]:\n - table[0] type=funcref initial=0 <- test.table-10-20\n",
      "disassemble": "\nimports.68.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n"
    },
    "imports.69.wasm": {
      "header": "\nimports.69.wasm:\tfile format wasm 0x1\n\nSections:\n\n   Import start=0x0000000a end=0x00000021 (size=0x00000017) count: 1\n",
      "details": "\nimports.69.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nImport[1]:\n - table[0] type=funcref initial=10 max=20 <- test.table-10-20\n",
      "disassemble": "\nimports.69.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n"
    },
    "imports.70.wasm": {
      "header": "\nimports.70.wasm:\tfile format wasm 0x1\n\nSections:\n\n   Import start=0x0000000a end=0x00000021 (size=0x00000017) count: 1\n",
      "details": "\nimports.70.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nImport[1]:\n - table[0] type=funcref initial=5 max=20 <- test.table-10-20\n",
      "disassemble": "\nimports.70.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n"
    },
    "imports.71.wasm": {
      "header": "\nimports.71.wasm:\tfile format wasm 0x1\n\nSections:\n\n   Import start=0x0000000a end=0x00000021 (size=0x00000017) count: 1\n",
      "details": "\nimports.71.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nImport[1]:\n - table[0] type=funcref initial=0 max=20 <- test.table-10-20\n",
      "disassemble": "\nimports.71.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n"
    },
    "imports.72.wasm": {
      "header": "\nimports.72.wasm:\tfile format wasm 0x1\n\nSections:\n\n   Import start=0x0000000a end=0x00000021 (size=0x00000017) count: 1\n",
      "details": "\nimports.72.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nImport[1]:\n - table[0] type=funcref initial=10 max=25 <- test.table-10-20\n",
      "disassemble": "\nimports.72.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n"
    },
    "imports.73.wasm": {
      "header": "\nimports.73.wasm:\tfile format wasm 0x1\n\nSections:\n\n   Import start=0x0000000a end=0x00000021 (size=0x00000017) count: 1\n",
      "details": "\nimports.73.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nImport[1]:\n - table[0] type=funcref initial=5 max=25 <- test.table-10-20\n",
      "disassemble": "\nimports.73.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n"
    },
    "imports.74.wasm": {
      "header": "\nimports.74.wasm:\tfile format wasm 0x1\n\nSections:\n\n   Import start=0x0000000a end=0x00000021 (size=0x00000017) count: 1\n",
      "details": "\nimports.74.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nImport[1]:\n - table[0] type=funcref initial=0 max=25 <- test.table-10-20\n",
      "disassemble": "\nimports.74.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n"
    },
    "imports.75.wasm": {
      "header": "\nimports.75.wasm:\tfile format wasm 0x1\n\nSections:\n\n   Import start=0x0000000a end=0x0000001e (size=0x00000014) count: 1\n",
      "details": "\nimports.75.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nImport[1]:\n - table[0] type=funcref initial=10 <- spectest.table\n",
      "disassemble": "\nimports.75.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n"
    },
    "imports.76.wasm": {
      "header": "\nimports.76.wasm:\tfile format wasm 0x1\n\nSections:\n\n   Import start=0x0000000a end=0x0000001e (size=0x00000014) count: 1\n",
      "details": "\nimports.76.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nImport[1]:\n - table[0] type=funcref initial=5 <- spectest.table\n",
      "disassemble": "\nimports.76.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n"
    },
    "imports.77.wasm": {
      "header": "\nimports.77.wasm:\tfile format wasm 0x1\n\nSections:\n\n   Import start=0x0000000a end=0x0000001e (size=0x00000014) count: 1\n",
      "details": "\nimports.77.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nImport[1]:\n - table[0] type=funcref initial=0 <- spectest.table\n",
      "disassemble": "\nimports.77.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n"
    },
    "imports.78.wasm": {
      "header": "\nimports.78.wasm:\tfile format wasm 0x1\n\nSections:\n\n   Import start=0x0000000a end=0x0000001f (size=0x00000015) count: 1\n",
      "details": "\nimports.78.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nImport[1]:\n - table[0] type=funcref initial=10 max=20 <- spectest.table\n",
      "disassemble": "\nimports.78.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n"
    },
    "imports.79.wasm": {
      "header": "\nimports.79.wasm:\tfile format wasm 0x1\n\nSections:\n\n   Import start=0x0000000a end=0x0000001f (size=0x00000015) count: 1\n",
      "details": "\nimports.79.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nImport[1]:\n - table[0] type=funcref initial=5 max=20 <- spectest.table\n",
      "disassemble": "\nimports.79.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n"
    },
    "imports.80.wasm": {
      "header": "\nimports.80.wasm:\tfile format wasm 0x1\n\nSections:\n\n   Import start=0x0000000a end=0x0000001f (size=0x00000015) count: 1\n",
      "details": "\nimports.80.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nImport[1]:\n - table[0] type=funcref initial=0 max=20 <- spectest.table\n",
      "disassemble": "\nimports.80.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n"
    },
    "imports.81.wasm": {
      "header": "\nimports.81.wasm:\tfile format wasm 0x1\n\nSections:\n\n   Import start=0x0000000a end=0x0000001f (size=0x00000015) count: 1\n",
      "details": "\nimports.81.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nImport[1]:\n - table[0] type=funcref initial=10 max=25 <- spectest.table\n",
      "disassemble": "\nimports.81.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n"
    },
    "imports.82.wasm": {
      "header": "\nimports.82.wasm:\tfile format wasm 0x1\n\nSections:\n\n   Import start=0x0000000a end=0x0000001f (size=0x00000015) count: 1\n",
      "details": "\nimports.82.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nImport[1]:\n - table[0] type=funcref initial=5 max=25 <- spectest.table\n",
      "disassemble": "\nimports.82.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n"
    },
    "imports.95.wasm": {
      "header": "\nimports.95.wasm:\tfile format wasm 0x1\n\nSections:\n\n     Type start=0x0000000a end=0x00000010 (size=0x00000006) count: 1\n   Import start=0x00000012 end=0x00000027 (size=0x00000015) count: 1\n Function start=0x00000029 end=0x0000002b (size=0x00000002) count: 1\n   Export start=0x0000002d end=0x00000035 (size=0x00000008) count: 1\n     Code start=0x00000037 end=0x00000040 (size=0x00000009) count: 1\n     Data start=0x00000042 end=0x00000049 (size=0x00000007) count: 1\n",
      "details": "\nimports.95.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nType[1]:\n - type[0] (i32) -> i32\nImport[1]:\n - memory[0] pages: initial=1 max=2 <- spectest.memory\nFunction[1]:\n - func[0] sig=0 <load>\nExport[1]:\n - func[0] <load> -> \"load\"\nCode[1]:\n - func[0] size=7 <load>\nData[1]:\n - segment[0] memory=0 size=1 - init i32=10\n  - 000000a: 10                                       .\n",
      "disassemble": "\nimports.95.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n000039 func[0] <load>:\n 00003a: 20 00                      | local.get 0\n 00003c: 28 02 00                   | i32.load 2 0\n 00003f: 0b                         | end\n"
    },
    "imports.96.wasm": {
      "header": "\nimports.96.wasm:\tfile format wasm 0x1\n\nSections:\n\n     Type start=0x0000000a end=0x00000010 (size=0x00000006) count: 1\n   Import start=0x00000012 end=0x00000027 (size=0x00000015) count: 1\n Function start=0x00000029 end=0x0000002b (size=0x00000002) count: 1\n   Export start=0x0000002d end=0x00000035 (size=0x00000008) count: 1\n     Code start=0x00000037 end=0x00000040 (size=0x00000009) count: 1\n     Data start=0x00000042 end=0x00000049 (size=0x00000007) count: 1\n",
      "details": "\nimports.96.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nType[1]:\n - type[0] (i32) -> i32\nImport[1]:\n - memory[0] pages: initial=1 max=2 <- spectest.memory\nFunction[1]:\n - func[0] sig=0 <load>\nExport[1]:\n - func[0] <load> -> \"load\"\nCode[1]:\n - func[0] size=7 <load>\nData[1]:\n - segment[0] memory=0 size=1 - init i32=10\n  - 000000a: 10                                       .\n",
      "disassemble": "\nimports.96.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n000039 func[0] <load>:\n 00003a: 20 00                      | local.get 0\n 00003c: 28 02 00                   | i32.load 2 0\n 00003f: 0b                         | end\n"
    },
    "imports.100.wasm": {
      "header": "\nimports.100.wasm:\tfile format wasm 0x1\n\nSections:\n\n   Import start=0x0000000a end=0x00000020 (size=0x00000016) count: 1\n",
      "details": "\nimports.100.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nImport[1]:\n - memory[0] pages: initial=2 <- test.memory-2-inf\n",
      "disassemble": "\nimports.100.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n"
    },
    "imports.101.wasm": {
      "header": "\nimports.101.wasm:\tfile format wasm 0x1\n\nSections:\n\n   Import start=0x0000000a end=0x00000020 (size=0x00000016) count: 1\n",
      "details": "\nimports.101.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nImport[1]:\n - memory[0] pages: initial=1 <- test.memory-2-inf\n",
      "disassemble": "\nimports.101.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n"
    },
    "imports.102.wasm": {
      "header": "\nimports.102.wasm:\tfile format wasm 0x1\n\nSections:\n\n   Import start=0x0000000a end=0x00000020 (size=0x00000016) count: 1\n",
      "details": "\nimports.102.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nImport[1]:\n - memory[0] pages: initial=0 <- test.memory-2-inf\n",
      "disassemble": "\nimports.102.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n"
    },
    "imports.103.wasm": {
      "header": "\nimports.103.wasm:\tfile format wasm 0x1\n\nSections:\n\n   Import start=0x0000000a end=0x0000001e (size=0x00000014) count: 1\n",
      "details": "\nimports.103.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nImport[1]:\n - memory[0] pages: initial=1 <- spectest.memory\n",
      "disassemble": "\nimports.103.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n"
    },
    "imports.104.wasm": {
      "header": "\nimports.104.wasm:\tfile format wasm 0x1\n\nSections:\n\n   Import start=0x0000000a end=0x0000001e (size=0x00000014) count: 1\n",
      "details": "\nimports.104.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nImport[1]:\n - memory[0] pages: initial=0 <- spectest.memory\n",
      "disassemble": "\nimports.104.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n"
    },
    "imports.105.wasm": {
      "header": "\nimports.105.wasm:\tfile format wasm 0x1\n\nSections:\n\n   Import start=0x0000000a end=0x0000001f (size=0x00000015) count: 1\n",
      "details": "\nimports.105.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nImport[1]:\n - memory[0] pages: initial=1 max=2 <- spectest.memory\n",
      "disassemble": "\nimports.105.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n"
    },
    "imports.106.wasm": {
      "header": "\nimports.106.wasm:\tfile format wasm 0x1\n\nSections:\n\n   Import start=0x0000000a end=0x0000001f (size=0x00000015) count: 1\n",
      "details": "\nimports.106.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nImport[1]:\n - memory[0] pages: initial=0 max=2 <- spectest.memory\n",
      "disassemble": "\nimports.106.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n"
    },
    "imports.107.wasm": {
      "header": "\nimports.107.wasm:\tfile format wasm 0x1\n\nSections:\n\n   Import start=0x0000000a end=0x0000001f (size=0x00000015) count: 1\n",
      "details": "\nimports.107.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nImport[1]:\n - memory[0] pages: initial=1 max=3 <- spectest.memory\n",
      "disassemble": "\nimports.107.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n"
    },
    "imports.108.wasm": {
      "header": "\nimports.108.wasm:\tfile format wasm 0x1\n\nSections:\n\n   Import start=0x0000000a end=0x0000001f (size=0x00000015) count: 1\n",
      "details": "\nimports.108.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nImport[1]:\n - memory[0] pages: initial=0 max=3 <- spectest.memory\n",
      "disassemble": "\nimports.108.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n"
    },
    "imports.123.wasm": {
      "header": "\nimports.123.wasm:\tfile format wasm 0x1\n\nSections:\n\n     Type start=0x0000000a end=0x00000010 (size=0x00000006) count: 1\n   Import start=0x00000012 end=0x00000027 (size=0x00000015) count: 1\n Function start=0x00000029 end=0x0000002b (size=0x00000002) count: 1\n   Export start=0x0000002d end=0x00000035 (size=0x00000008) count: 1\n     Code start=0x00000037 end=0x0000003f (size=0x00000008) count: 1\n",
      "details": "\nimports.123.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nType[1]:\n - type[0] (i32) -> i32\nImport[1]:\n - memory[0] pages: initial=0 max=3 <- spectest.memory\nFunction[1]:\n - func[0] sig=0 <grow>\nExport[1]:\n - func[0] <grow> -> \"grow\"\nCode[1]:\n - func[0] size=6 <grow>\n",
      "disassemble": "\nimports.123.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n000039 func[0] <grow>:\n 00003a: 20 00                      | local.get 0\n 00003c: 40 00                      | memory.grow 0\n 00003e: 0b                         | end\n"
    },
    "imports.124.wasm": {
      "header": "\nimports.124.wasm:\tfile format wasm 0x1\n\nSections:\n\n     Type start=0x0000000a end=0x0000000f (size=0x00000005) count: 1\n Function start=0x00000011 end=0x00000013 (size=0x00000002) count: 1\n   Memory start=0x00000015 end=0x00000018 (size=0x00000003) count: 1\n   Export start=0x0000001a end=0x0000002b (size=0x00000011) count: 2\n     Code start=0x0000002d end=0x00000035 (size=0x00000008) count: 1\n",
      "details": "\nimports.124.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nType[1]:\n - type[0] () -> i32\nFunction[1]:\n - func[0] sig=0 <grow>\nMemory[1]:\n - memory[0] pages: initial=1\nExport[2]:\n - memory[0] -> \"memory\"\n - func[0] <grow> -> \"grow\"\nCode[1]:\n - func[0] size=6 <grow>\n",
      "disassemble": "\nimports.124.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n00002f func[0] <grow>:\n 000030: 41 01                      | i32.const 1\n 000032: 40 00                      | memory.grow 0\n 000034: 0b                         | end\n"
    },
    "imports.125.wasm": {
      "header": "\nimports.125.wasm:\tfile format wasm 0x1\n\nSections:\n\n     Type start=0x0000000a end=0x0000000f (size=0x00000005) count: 1\n   Import start=0x00000011 end=0x00000029 (size=0x00000018) count: 1\n Function start=0x0000002b end=0x0000002d (size=0x00000002) count: 1\n   Export start=0x0000002f end=0x00000040 (size=0x00000011) count: 2\n     Code start=0x00000042 end=0x0000004a (size=0x00000008) count: 1\n",
      "details": "\nimports.125.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nType[1]:\n - type[0] () -> i32\nImport[1]:\n - memory[0] pages: initial=2 <- grown-memory.memory\nFunction[1]:\n - func[0] sig=0 <grow>\nExport[2]:\n - memory[0] -> \"memory\"\n - func[0] <grow> -> \"grow\"\nCode[1]:\n - func[0] size=6 <grow>\n",
      "disassemble": "\nimports.125.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n000044 func[0] <grow>:\n 000045: 41 01                      | i32.const 1\n 000047: 40 00                      | memory.grow 0\n 000049: 0b                         | end\n"
    },
    "imports.126.wasm": {
      "header": "\nimports.126.wasm:\tfile format wasm 0x1\n\nSections:\n\n     Type start=0x0000000a end=0x0000000f (size=0x00000005) count: 1\n   Import start=0x00000011 end=0x00000032 (size=0x00000021) count: 1\n Function start=0x00000034 end=0x00000036 (size=0x00000002) count: 1\n   Export start=0x00000038 end=0x00000040 (size=0x00000008) count: 1\n     Code start=0x00000042 end=0x00000048 (size=0x00000006) count: 1\n",
      "details": "\nimports.126.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nType[1]:\n - type[0] () -> i32\nImport[1]:\n - memory[0] pages: initial=3 <- grown-imported-memory.memory\nFunction[1]:\n - func[0] sig=0 <size>\nExport[1]:\n - func[0] <size> -> \"size\"\nCode[1]:\n - func[0] size=4 <size>\n",
      "disassemble": "\nimports.126.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n000044 func[0] <size>:\n 000045: 3f 00                      | memory.size 0\n 000047: 0b                         | end\n"
    },
    "imports.143.wasm": {
      "header": "\nimports.143.wasm:\tfile format wasm 0x1\n\nSections:\n\n",
      "details": "\nimports.143.wasm:\tfile format wasm 0x1\n\nSection Details:\n\n",
      "disassemble": "\nimports.143.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n"
    }
  }
}
