{
  "bin": {
    "memory.0.wasm": "AGFzbQEAAAAFAwEAAA==",
    "memory.1.wasm": "AGFzbQEAAAAFAwEAAQ==",
    "memory.10.wasm": "AGFzbQEAAAABBQFgAAF/AwIBAAUEAQEBAQcLAQdtZW1zaXplAAAKBgEEAD8ACwsHAQBBAAsBeA==",
    "memory.11.wasm": "AGFzbQEAAAALBgEAQQALAA==",
    "memory.12.wasm": "AGFzbQEAAAALBgEAQQALAA==",
    "memory.13.wasm": "AGFzbQEAAAALBwEAQQALAXg=",
    "memory.14.wasm": "AGFzbQEAAAABBAFgAAADAgEACgoBCABBACoCABoL",
    "memory.15.wasm": "AGFzbQEAAAABBAFgAAADAgEACg4BDABBAEMAAAAAOAIACw==",
    "memory.16.wasm": "AGFzbQEAAAABBAFgAAADAgEACgoBCABBACwAABoL",
    "memory.17.wasm": "AGFzbQEAAAABBAFgAAADAgEACgsBCQBBAEEAOgAACw==",
    "memory.18.wasm": "AGFzbQEAAAABBAFgAAADAgEACgcBBQA/ABoL",
    "memory.19.wasm": "AGFzbQEAAAABBAFgAAADAgEACgkBBwBBAEAAGgs=",
    "memory.2.wasm": "AGFzbQEAAAAFBAEBAAA=",
    "memory.20.wasm": "AGFzbQEAAAAFBAEBAQA=",
    "memory.21.wasm": "AGFzbQEAAAAFBQEAgYAE",
    "memory.22.wasm": "AGFzbQEAAAAFBwEAgICAgAg=",
    "memory.23.wasm": "AGFzbQEAAAAFBwEA/////w8=",
    "memory.24.wasm": "AGFzbQEAAAAFBgEBAIGABA==",
    "memory.25.wasm": "AGFzbQEAAAAFCAEBAICAgIAI",
    "memory.26.wasm": "AGFzbQEAAAAFCAEBAP////8P",
    "memory.27.wat": "KG1lbW9yeSAweDFfMDAwMF8wMDAwKQ==",
    "memory.28.wat": "KG1lbW9yeSAweDFfMDAwMF8wMDAwIDB4MV8wMDAwXzAwMDAp",
    "memory.29.wat": "KG1lbW9yeSAwIDB4MV8wMDAwXzAwMDAp",
    "memory.3.wasm": "AGFzbQEAAAAFBAEBAAE=",
    "memory.30.wasm": "AGFzbQEAAAABEwRgAAF/YAABfGABfwF/YAF+AX4DDQwAAQICAgIDAwMDAwMFAwEAAQehAQwEZGF0YQAABGNhc3QAAQtpMzJfbG9hZDhfcwACC2kzMl9sb2FkOF91AAMMaTMyX2xvYWQxNl9zAAQMaTMyX2xvYWQxNl91AAULaTY0X2xvYWQ4X3MABgtpNjRfbG9hZDhfdQAHDGk2NF9sb2FkMTZfcwAIDGk2NF9sb2FkMTZfdQAJDGk2NF9sb2FkMzJfcwAKDGk2NF9sb2FkMzJfdQALCp8CDE4AQQAtAABBwQBGQQMtAABBpwFGcUEGLQAAQQBGQRMtAABBAEZxcUEULQAAQdcARkEXLQAAQc0ARnFBGC0AAEEARkH/By0AAEEARnFxcQs4AEEIQseffzcDAEEIKwMAQseff79hBEBEAAAAAAAAAAAPC0EJQgA3AABBD0HFgAE7AABBCSsAAAsOAEEIIAA6AABBCCwAAAsOAEEIIAA6AABBCC0AAAsOAEEIIAA7AQBBCC4BAAsOAEEIIAA7AQBBCC8BAAsOAEEIIAA8AABBCDAAAAsOAEEIIAA8AABBCDEAAAsOAEEIIAA9AQBBCDIBAAsOAEEIIAA9AQBBCDMBAAsOAEEIIAA+AgBBCDQCAAsOAEEIIAA+AgBBCDUCAAsLFAIAQQALBUFCQ6dEAEEUCwRXQVNN",
    "memory.31.wat": "KG1lbW9yeSAkZm9vIDEpKG1lbW9yeSAkZm9vIDEp",
    "memory.32.wat": "KGltcG9ydCAiIiAiIiAobWVtb3J5ICRmb28gMSkpKG1lbW9yeSAkZm9vIDEp",
    "memory.33.wat": "KGltcG9ydCAiIiAiIiAobWVtb3J5ICRmb28gMSkpKGltcG9ydCAiIiAiIiAobWVtb3J5ICRmb28gMSkp",
    "memory.4.wasm": "AGFzbQEAAAAFBQEBAYAC",
    "memory.5.wasm": "AGFzbQEAAAAFBgEBAICABA==",
    "memory.6.wasm": "AGFzbQEAAAAFBQIAAAAA",
    "memory.7.wasm": "AGFzbQEAAAACFAEIc3BlY3Rlc3QGbWVtb3J5AgAABQMBAAA=",
    "memory.8.wasm": "AGFzbQEAAAABBQFgAAF/AwIBAAUEAQEAAAcLAQdtZW1zaXplAAAKBgEEAD8ACwsGAQBBAAsA",
    "memory.9.wasm": "AGFzbQEAAAABBQFgAAF/AwIBAAUEAQEAAAcLAQdtZW1zaXplAAAKBgEEAD8ACwsGAQBBAAsA"
  },
  "spec": {"source_filename": "/workspace/wasm-spec/test/core/memory.wast",
 "commands": [
  {"type": "module", "line": 3, "filename": "memory.0.wasm"}, 
  {"type": "module", "line": 4, "filename": "memory.1.wasm"}, 
  {"type": "module", "line": 5, "filename": "memory.2.wasm"}, 
  {"type": "module", "line": 6, "filename": "memory.3.wasm"}, 
  {"type": "module", "line": 7, "filename": "memory.4.wasm"}, 
  {"type": "module", "line": 8, "filename": "memory.5.wasm"}, 
  {"type": "assert_invalid", "line": 10, "filename": "memory.6.wasm", "text": "multiple memories", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 11, "filename": "memory.7.wasm", "text": "multiple memories", "module_type": "binary"}, 
  {"type": "module", "line": 13, "filename": "memory.8.wasm"}, 
  {"type": "assert_return", "line": 14, "action": {"type": "invoke", "field": "memsize", "args": []}, "expected": [{"type": "i32", "value": "0"}]}, 
  {"type": "module", "line": 15, "filename": "memory.9.wasm"}, 
  {"type": "assert_return", "line": 16, "action": {"type": "invoke", "field": "memsize", "args": []}, "expected": [{"type": "i32", "value": "0"}]}, 
  {"type": "module", "line": 17, "filename": "memory.10.wasm"}, 
  {"type": "assert_return", "line": 18, "action": {"type": "invoke", "field": "memsize", "args": []}, "expected": [{"type": "i32", "value": "1"}]}, 
  {"type": "assert_invalid", "line": 20, "filename": "memory.11.wasm", "text": "unknown memory", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 21, "filename": "memory.12.wasm", "text": "unknown memory", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 22, "filename": "memory.13.wasm", "text": "unknown memory", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 25, "filename": "memory.14.wasm", "text": "unknown memory", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 29, "filename": "memory.15.wasm", "text": "unknown memory", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 33, "filename": "memory.16.wasm", "text": "unknown memory", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 37, "filename": "memory.17.wasm", "text": "unknown memory", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 41, "filename": "memory.18.wasm", "text": "unknown memory", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 45, "filename": "memory.19.wasm", "text": "unknown memory", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 51, "filename": "memory.20.wasm", "text": "size minimum must not be greater than maximum", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 55, "filename": "memory.21.wasm", "text": "memory size must be at most 65536 pages (4GiB)", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 59, "filename": "memory.22.wasm", "text": "memory size must be at most 65536 pages (4GiB)", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 63, "filename": "memory.23.wasm", "text": "memory size must be at most 65536 pages (4GiB)", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 67, "filename": "memory.24.wasm", "text": "memory size must be at most 65536 pages (4GiB)", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 71, "filename": "memory.25.wasm", "text": "memory size must be at most 65536 pages (4GiB)", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 75, "filename": "memory.26.wasm", "text": "memory size must be at most 65536 pages (4GiB)", "module_type": "binary"}, 
  {"type": "assert_malformed", "line": 80, "filename": "memory.27.wat", "text": "i32 constant out of range", "module_type": "text"}, 
  {"type": "assert_malformed", "line": 84, "filename": "memory.28.wat", "text": "i32 constant out of range", "module_type": "text"}, 
  {"type": "assert_malformed", "line": 88, "filename": "memory.29.wat", "text": "i32 constant out of range", "module_type": "text"}, 
  {"type": "module", "line": 92, "filename": "memory.30.wasm"}, 
  {"type": "assert_return", "line": 180, "action": {"type": "invoke", "field": "data", "args": []}, "expected": [{"type": "i32", "value": "1"}]}, 
  {"type": "assert_return", "line": 181, "action": {"type": "invoke", "field": "cast", "args": []}, "expected": [{"type": "f64", "value": "4631107791820423168"}]}, 
  {"type": "assert_return", "line": 183, "action": {"type": "invoke", "field": "i32_load8_s", "args": [{"type": "i32", "value": "4294967295"}]}, "expected": [{"type": "i32", "value": "4294967295"}]}, 
  {"type": "assert_return", "line": 184, "action": {"type": "invoke", "field": "i32_load8_u", "args": [{"type": "i32", "value": "4294967295"}]}, "expected": [{"type": "i32", "value": "255"}]}, 
  {"type": "assert_return", "line": 185, "action": {"type": "invoke", "field": "i32_load16_s", "args": [{"type": "i32", "value": "4294967295"}]}, "expected": [{"type": "i32", "value": "4294967295"}]}, 
  {"type": "assert_return", "line": 186, "action": {"type": "invoke", "field": "i32_load16_u", "args": [{"type": "i32", "value": "4294967295"}]}, "expected": [{"type": "i32", "value": "65535"}]}, 
  {"type": "assert_return", "line": 188, "action": {"type": "invoke", "field": "i32_load8_s", "args": [{"type": "i32", "value": "100"}]}, "expected": [{"type": "i32", "value": "100"}]}, 
  {"type": "assert_return", "line": 189, "action": {"type": "invoke", "field": "i32_load8_u", "args": [{"type": "i32", "value": "200"}]}, "expected": [{"type": "i32", "value": "200"}]}, 
  {"type": "assert_return", "line": 190, "action": {"type": "invoke", "field": "i32_load16_s", "args": [{"type": "i32", "value": "20000"}]}, "expected": [{"type": "i32", "value": "20000"}]}, 
  {"type": "assert_return", "line": 191, "action": {"type": "invoke", "field": "i32_load16_u", "args": [{"type": "i32", "value": "40000"}]}, "expected": [{"type": "i32", "value": "40000"}]}, 
  {"type": "assert_return", "line": 193, "action": {"type": "invoke", "field": "i32_load8_s", "args": [{"type": "i32", "value": "4275856707"}]}, "expected": [{"type": "i32", "value": "67"}]}, 
  {"type": "assert_return", "line": 194, "action": {"type": "invoke", "field": "i32_load8_s", "args": [{"type": "i32", "value": "878104047"}]}, "expected": [{"type": "i32", "value": "4294967279"}]}, 
  {"type": "assert_return", "line": 195, "action": {"type": "invoke", "field": "i32_load8_u", "args": [{"type": "i32", "value": "4275856707"}]}, "expected": [{"type": "i32", "value": "67"}]}, 
  {"type": "assert_return", "line": 196, "action": {"type": "invoke", "field": "i32_load8_u", "args": [{"type": "i32", "value": "878104047"}]}, "expected": [{"type": "i32", "value": "239"}]}, 
  {"type": "assert_return", "line": 197, "action": {"type": "invoke", "field": "i32_load16_s", "args": [{"type": "i32", "value": "4275856707"}]}, "expected": [{"type": "i32", "value": "25923"}]}, 
  {"type": "assert_return", "line": 198, "action": {"type": "invoke", "field": "i32_load16_s", "args": [{"type": "i32", "value": "878104047"}]}, "expected": [{"type": "i32", "value": "4294954479"}]}, 
  {"type": "assert_return", "line": 199, "action": {"type": "invoke", "field": "i32_load16_u", "args": [{"type": "i32", "value": "4275856707"}]}, "expected": [{"type": "i32", "value": "25923"}]}, 
  {"type": "assert_return", "line": 200, "action": {"type": "invoke", "field": "i32_load16_u", "args": [{"type": "i32", "value": "878104047"}]}, "expected": [{"type": "i32", "value": "52719"}]}, 
  {"type": "assert_return", "line": 202, "action": {"type": "invoke", "field": "i64_load8_s", "args": [{"type": "i64", "value": "18446744073709551615"}]}, "expected": [{"type": "i64", "value": "18446744073709551615"}]}, 
  {"type": "assert_return", "line": 203, "action": {"type": "invoke", "field": "i64_load8_u", "args": [{"type": "i64", "value": "18446744073709551615"}]}, "expected": [{"type": "i64", "value": "255"}]}, 
  {"type": "assert_return", "line": 204, "action": {"type": "invoke", "field": "i64_load16_s", "args": [{"type": "i64", "value": "18446744073709551615"}]}, "expected": [{"type": "i64", "value": "18446744073709551615"}]}, 
  {"type": "assert_return", "line": 205, "action": {"type": "invoke", "field": "i64_load16_u", "args": [{"type": "i64", "value": "18446744073709551615"}]}, "expected": [{"type": "i64", "value": "65535"}]}, 
  {"type": "assert_return", "line": 206, "action": {"type": "invoke", "field": "i64_load32_s", "args": [{"type": "i64", "value": "18446744073709551615"}]}, "expected": [{"type": "i64", "value": "18446744073709551615"}]}, 
  {"type": "assert_return", "line": 207, "action": {"type": "invoke", "field": "i64_load32_u", "args": [{"type": "i64", "value": "18446744073709551615"}]}, "expected": [{"type": "i64", "value": "4294967295"}]}, 
  {"type": "assert_return", "line": 209, "action": {"type": "invoke", "field": "i64_load8_s", "args": [{"type": "i64", "value": "100"}]}, "expected": [{"type": "i64", "value": "100"}]}, 
  {"type": "assert_return", "line": 210, "action": {"type": "invoke", "field": "i64_load8_u", "args": [{"type": "i64", "value": "200"}]}, "expected": [{"type": "i64", "value": "200"}]}, 
  {"type": "assert_return", "line": 211, "action": {"type": "invoke", "field": "i64_load16_s", "args": [{"type": "i64", "value": "20000"}]}, "expected": [{"type": "i64", "value": "20000"}]}, 
  {"type": "assert_return", "line": 212, "action": {"type": "invoke", "field": "i64_load16_u", "args": [{"type": "i64", "value": "40000"}]}, "expected": [{"type": "i64", "value": "40000"}]}, 
  {"type": "assert_return", "line": 213, "action": {"type": "invoke", "field": "i64_load32_s", "args": [{"type": "i64", "value": "20000"}]}, "expected": [{"type": "i64", "value": "20000"}]}, 
  {"type": "assert_return", "line": 214, "action": {"type": "invoke", "field": "i64_load32_u", "args": [{"type": "i64", "value": "40000"}]}, "expected": [{"type": "i64", "value": "40000"}]}, 
  {"type": "assert_return", "line": 216, "action": {"type": "invoke", "field": "i64_load8_s", "args": [{"type": "i64", "value": "18364758543954109763"}]}, "expected": [{"type": "i64", "value": "67"}]}, 
  {"type": "assert_return", "line": 217, "action": {"type": "invoke", "field": "i64_load8_s", "args": [{"type": "i64", "value": "3771275841602506223"}]}, "expected": [{"type": "i64", "value": "18446744073709551599"}]}, 
  {"type": "assert_return", "line": 218, "action": {"type": "invoke", "field": "i64_load8_u", "args": [{"type": "i64", "value": "18364758543954109763"}]}, "expected": [{"type": "i64", "value": "67"}]}, 
  {"type": "assert_return", "line": 219, "action": {"type": "invoke", "field": "i64_load8_u", "args": [{"type": "i64", "value": "3771275841602506223"}]}, "expected": [{"type": "i64", "value": "239"}]}, 
  {"type": "assert_return", "line": 220, "action": {"type": "invoke", "field": "i64_load16_s", "args": [{"type": "i64", "value": "18364758543954109763"}]}, "expected": [{"type": "i64", "value": "25923"}]}, 
  {"type": "assert_return", "line": 221, "action": {"type": "invoke", "field": "i64_load16_s", "args": [{"type": "i64", "value": "3771275841602506223"}]}, "expected": [{"type": "i64", "value": "18446744073709538799"}]}, 
  {"type": "assert_return", "line": 222, "action": {"type": "invoke", "field": "i64_load16_u", "args": [{"type": "i64", "value": "18364758543954109763"}]}, "expected": [{"type": "i64", "value": "25923"}]}, 
  {"type": "assert_return", "line": 223, "action": {"type": "invoke", "field": "i64_load16_u", "args": [{"type": "i64", "value": "3771275841602506223"}]}, "expected": [{"type": "i64", "value": "52719"}]}, 
  {"type": "assert_return", "line": 224, "action": {"type": "invoke", "field": "i64_load32_s", "args": [{"type": "i64", "value": "18364758543954109763"}]}, "expected": [{"type": "i64", "value": "1446274371"}]}, 
  {"type": "assert_return", "line": 225, "action": {"type": "invoke", "field": "i64_load32_s", "args": [{"type": "i64", "value": "3771275841602506223"}]}, "expected": [{"type": "i64", "value": "18446744071976963567"}]}, 
  {"type": "assert_return", "line": 226, "action": {"type": "invoke", "field": "i64_load32_u", "args": [{"type": "i64", "value": "18364758543954109763"}]}, "expected": [{"type": "i64", "value": "1446274371"}]}, 
  {"type": "assert_return", "line": 227, "action": {"type": "invoke", "field": "i64_load32_u", "args": [{"type": "i64", "value": "3771275841602506223"}]}, "expected": [{"type": "i64", "value": "2562379247"}]}, 
  {"type": "assert_malformed", "line": 231, "filename": "memory.31.wat", "text": "duplicate memory", "module_type": "text"}, 
  {"type": "assert_malformed", "line": 235, "filename": "memory.32.wat", "text": "duplicate memory", "module_type": "text"}, 
  {"type": "assert_malformed", "line": 239, "filename": "memory.33.wat", "text": "duplicate memory", "module_type": "text"}]},
  "code": [
    "(module (memory 0))",
    "(module (memory 1))",
    "(module (memory 0 0))",
    "(module (memory 0 1))",
    "(module (memory 1 256))",
    "(module (memory 0 65536))",
    "(assert_invalid (module (memory 0) (memory 0)) \"multiple memories\")",
    "(assert_invalid (module (memory (import \"spectest\" \"memory\") 0) (memory 0)) \"multiple memories\")",
    "(module (memory (data))\n  (func (export \"memsize\") (result i32) (memory.size)))",
    "(assert_return (invoke \"memsize\") (i32.const 0))",
    "(module (memory (data \"\"))\n  (func (export \"memsize\") (result i32) (memory.size)))",
    "(assert_return (invoke \"memsize\") (i32.const 0))",
    "(module (memory (data \"x\"))\n  (func (export \"memsize\") (result i32) (memory.size)))",
    "(assert_return (invoke \"memsize\") (i32.const 1))",
    "(assert_invalid (module (data (i32.const 0))) \"unknown memory\")",
    "(assert_invalid (module (data (i32.const 0) \"\")) \"unknown memory\")",
    "(assert_invalid (module (data (i32.const 0) \"x\")) \"unknown memory\")",
    "(assert_invalid (module (func (drop (f32.load (i32.const 0))))) \"unknown memory\")",
    "(assert_invalid (module (func (f32.store (i32.const 0) (f32.const 0)))) \"unknown memory\")",
    "(assert_invalid (module (func (drop (i32.load8_s (i32.const 0))))) \"unknown memory\")",
    "(assert_invalid (module (func (i32.store8 (i32.const 0) (i32.const 0)))) \"unknown memory\")",
    "(assert_invalid (module (func (drop (memory.size)))) \"unknown memory\")",
    "(assert_invalid (module (func (drop (memory.grow (i32.const 0))))) \"unknown memory\")",
    "(assert_invalid (module (memory 1 0)) \"size minimum must not be greater than maximum\")",
    "(assert_invalid (module (memory 65537)) \"memory size must be at most 65536 pages (4GiB)\")",
    "(assert_invalid (module (memory 2147483648)) \"memory size must be at most 65536 pages (4GiB)\")",
    "(assert_invalid (module (memory 4294967295)) \"memory size must be at most 65536 pages (4GiB)\")",
    "(assert_invalid (module (memory 0 65537)) \"memory size must be at most 65536 pages (4GiB)\")",
    "(assert_invalid (module (memory 0 2147483648)) \"memory size must be at most 65536 pages (4GiB)\")",
    "(assert_invalid (module (memory 0 4294967295)) \"memory size must be at most 65536 pages (4GiB)\")",
    "(assert_malformed (module quote \"(memory 0x1_0000_0000)\") \"i32 constant out of range\")",
    "(assert_malformed (module quote \"(memory 0x1_0000_0000 0x1_0000_0000)\") \"i32 constant out of range\")",
    "(assert_malformed (module quote \"(memory 0 0x1_0000_0000)\") \"i32 constant out of range\")",
    "(module (memory 1) (data (i32.const 0) \"ABC\\a7D\") (data (i32.const 20) \"WASM\")\n  (func (export \"data\") (result i32) (i32.and (i32.and (i32.and (i32.eq (i32.load8_u (i32.const 0)) (i32.const 65)) (i32.eq (i32.load8_u (i32.const 3)) (i32.const 167)) ) (i32.and (i32.eq (i32.load8_u (i32.const 6)) (i32.const 0)) (i32.eq (i32.load8_u (i32.const 19)) (i32.const 0)) ) ) (i32.and (i32.and (i32.eq (i32.load8_u (i32.const 20)) (i32.const 87)) (i32.eq (i32.load8_u (i32.const 23)) (i32.const 77)) ) (i32.and (i32.eq (i32.load8_u (i32.const 24)) (i32.const 0)) (i32.eq (i32.load8_u (i32.const 1023)) (i32.const 0)) ) ) ) )\n  (func (export \"cast\") (result f64) (i64.store (i32.const 8) (i64.const -12345)) (if (f64.eq (f64.load (i32.const 8)) (f64.reinterpret_i64 (i64.const -12345)) ) (then (return (f64.const 0))) ) (i64.store align=1 (i32.const 9) (i64.const 0)) (i32.store16 align=1 (i32.const 15) (i32.const 16453)) (f64.load align=1 (i32.const 9)) )\n  (func (export \"i32_load8_s\") (param $i i32) (result i32)\t(i32.store8 (i32.const 8) (local.get $i))\t(i32.load8_s (i32.const 8)) )\n  (func (export \"i32_load8_u\") (param $i i32) (result i32)\t(i32.store8 (i32.const 8) (local.get $i))\t(i32.load8_u (i32.const 8)) )\n  (func (export \"i32_load16_s\") (param $i i32) (result i32)\t(i32.store16 (i32.const 8) (local.get $i))\t(i32.load16_s (i32.const 8)) )\n  (func (export \"i32_load16_u\") (param $i i32) (result i32)\t(i32.store16 (i32.const 8) (local.get $i))\t(i32.load16_u (i32.const 8)) )\n  (func (export \"i64_load8_s\") (param $i i64) (result i64)\t(i64.store8 (i32.const 8) (local.get $i))\t(i64.load8_s (i32.const 8)) )\n  (func (export \"i64_load8_u\") (param $i i64) (result i64)\t(i64.store8 (i32.const 8) (local.get $i))\t(i64.load8_u (i32.const 8)) )\n  (func (export \"i64_load16_s\") (param $i i64) (result i64)\t(i64.store16 (i32.const 8) (local.get $i))\t(i64.load16_s (i32.const 8)) )\n  (func (export \"i64_load16_u\") (param $i i64) (result i64)\t(i64.store16 (i32.const 8) (local.get $i))\t(i64.load16_u (i32.const 8)) )\n  (func (export \"i64_load32_s\") (param $i i64) (result i64)\t(i64.store32 (i32.const 8) (local.get $i))\t(i64.load32_s (i32.const 8)) )\n  (func (export \"i64_load32_u\") (param $i i64) (result i64)\t(i64.store32 (i32.const 8) (local.get $i))\t(i64.load32_u (i32.const 8)) ))",
    "(assert_return (invoke \"data\") (i32.const 1))",
    "(assert_return (invoke \"cast\") (f64.const 42.0))",
    "(assert_return (invoke \"i32_load8_s\" (i32.const -1)) (i32.const -1))",
    "(assert_return (invoke \"i32_load8_u\" (i32.const -1)) (i32.const 255))",
    "(assert_return (invoke \"i32_load16_s\" (i32.const -1)) (i32.const -1))",
    "(assert_return (invoke \"i32_load16_u\" (i32.const -1)) (i32.const 65535))",
    "(assert_return (invoke \"i32_load8_s\" (i32.const 100)) (i32.const 100))",
    "(assert_return (invoke \"i32_load8_u\" (i32.const 200)) (i32.const 200))",
    "(assert_return (invoke \"i32_load16_s\" (i32.const 20000)) (i32.const 20000))",
    "(assert_return (invoke \"i32_load16_u\" (i32.const 40000)) (i32.const 40000))",
    "(assert_return (invoke \"i32_load8_s\" (i32.const 0xfedc6543)) (i32.const 0x43))",
    "(assert_return (invoke \"i32_load8_s\" (i32.const 0x3456cdef)) (i32.const 0xffffffef))",
    "(assert_return (invoke \"i32_load8_u\" (i32.const 0xfedc6543)) (i32.const 0x43))",
    "(assert_return (invoke \"i32_load8_u\" (i32.const 0x3456cdef)) (i32.const 0xef))",
    "(assert_return (invoke \"i32_load16_s\" (i32.const 0xfedc6543)) (i32.const 0x6543))",
    "(assert_return (invoke \"i32_load16_s\" (i32.const 0x3456cdef)) (i32.const 0xffffcdef))",
    "(assert_return (invoke \"i32_load16_u\" (i32.const 0xfedc6543)) (i32.const 0x6543))",
    "(assert_return (invoke \"i32_load16_u\" (i32.const 0x3456cdef)) (i32.const 0xcdef))",
    "(assert_return (invoke \"i64_load8_s\" (i64.const -1)) (i64.const -1))",
    "(assert_return (invoke \"i64_load8_u\" (i64.const -1)) (i64.const 255))",
    "(assert_return (invoke \"i64_load16_s\" (i64.const -1)) (i64.const -1))",
    "(assert_return (invoke \"i64_load16_u\" (i64.const -1)) (i64.const 65535))",
    "(assert_return (invoke \"i64_load32_s\" (i64.const -1)) (i64.const -1))",
    "(assert_return (invoke \"i64_load32_u\" (i64.const -1)) (i64.const 4294967295))",
    "(assert_return (invoke \"i64_load8_s\" (i64.const 100)) (i64.const 100))",
    "(assert_return (invoke \"i64_load8_u\" (i64.const 200)) (i64.const 200))",
    "(assert_return (invoke \"i64_load16_s\" (i64.const 20000)) (i64.const 20000))",
    "(assert_return (invoke \"i64_load16_u\" (i64.const 40000)) (i64.const 40000))",
    "(assert_return (invoke \"i64_load32_s\" (i64.const 20000)) (i64.const 20000))",
    "(assert_return (invoke \"i64_load32_u\" (i64.const 40000)) (i64.const 40000))",
    "(assert_return (invoke \"i64_load8_s\" (i64.const 0xfedcba9856346543)) (i64.const 0x43))",
    "(assert_return (invoke \"i64_load8_s\" (i64.const 0x3456436598bacdef)) (i64.const 0xffffffffffffffef))",
    "(assert_return (invoke \"i64_load8_u\" (i64.const 0xfedcba9856346543)) (i64.const 0x43))",
    "(assert_return (invoke \"i64_load8_u\" (i64.const 0x3456436598bacdef)) (i64.const 0xef))",
    "(assert_return (invoke \"i64_load16_s\" (i64.const 0xfedcba9856346543)) (i64.const 0x6543))",
    "(assert_return (invoke \"i64_load16_s\" (i64.const 0x3456436598bacdef)) (i64.const 0xffffffffffffcdef))",
    "(assert_return (invoke \"i64_load16_u\" (i64.const 0xfedcba9856346543)) (i64.const 0x6543))",
    "(assert_return (invoke \"i64_load16_u\" (i64.const 0x3456436598bacdef)) (i64.const 0xcdef))",
    "(assert_return (invoke \"i64_load32_s\" (i64.const 0xfedcba9856346543)) (i64.const 0x56346543))",
    "(assert_return (invoke \"i64_load32_s\" (i64.const 0x3456436598bacdef)) (i64.const 0xffffffff98bacdef))",
    "(assert_return (invoke \"i64_load32_u\" (i64.const 0xfedcba9856346543)) (i64.const 0x56346543))",
    "(assert_return (invoke \"i64_load32_u\" (i64.const 0x3456436598bacdef)) (i64.const 0x98bacdef))",
    "(assert_malformed (module quote \"(memory $foo 1)\" \"(memory $foo 1)\") \"duplicate memory\")",
    "(assert_malformed (module quote \"(import \\\"\\\" \\\"\\\" (memory $foo 1))\" \"(memory $foo 1)\") \"duplicate memory\")",
    "(assert_malformed (module quote \"(import \\\"\\\" \\\"\\\" (memory $foo 1))\" \"(import \\\"\\\" \\\"\\\" (memory $foo 1))\") \"duplicate memory\")"
  ],
  "dump": {
    "memory.0.wasm": {
      "header": "\nmemory.0.wasm:\tfile format wasm 0x1\n\nSections:\n\n   Memory start=0x0000000a end=0x0000000d (size=0x00000003) count: 1\n",
      "details": "\nmemory.0.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nMemory[1]:\n - memory[0] pages: initial=0\n",
      "disassemble": "\nmemory.0.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n"
    },
    "memory.1.wasm": {
      "header": "\nmemory.1.wasm:\tfile format wasm 0x1\n\nSections:\n\n   Memory start=0x0000000a end=0x0000000d (size=0x00000003) count: 1\n",
      "details": "\nmemory.1.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nMemory[1]:\n - memory[0] pages: initial=1\n",
      "disassemble": "\nmemory.1.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n"
    },
    "memory.2.wasm": {
      "header": "\nmemory.2.wasm:\tfile format wasm 0x1\n\nSections:\n\n   Memory start=0x0000000a end=0x0000000e (size=0x00000004) count: 1\n",
      "details": "\nmemory.2.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nMemory[1]:\n - memory[0] pages: initial=0 max=0\n",
      "disassemble": "\nmemory.2.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n"
    },
    "memory.3.wasm": {
      "header": "\nmemory.3.wasm:\tfile format wasm 0x1\n\nSections:\n\n   Memory start=0x0000000a end=0x0000000e (size=0x00000004) count: 1\n",
      "details": "\nmemory.3.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nMemory[1]:\n - memory[0] pages: initial=0 max=1\n",
      "disassemble": "\nmemory.3.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n"
    },
    "memory.4.wasm": {
      "header": "\nmemory.4.wasm:\tfile format wasm 0x1\n\nSections:\n\n   Memory start=0x0000000a end=0x0000000f (size=0x00000005) count: 1\n",
      "details": "\nmemory.4.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nMemory[1]:\n - memory[0] pages: initial=1 max=256\n",
      "disassemble": "\nmemory.4.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n"
    },
    "memory.5.wasm": {
      "header": "\nmemory.5.wasm:\tfile format wasm 0x1\n\nSections:\n\n   Memory start=0x0000000a end=0x00000010 (size=0x00000006) count: 1\n",
      "details": "\nmemory.5.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nMemory[1]:\n - memory[0] pages: initial=0 max=65536\n",
      "disassemble": "\nmemory.5.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n"
    },
    "memory.8.wasm": {
      "header": "\nmemory.8.wasm:\tfile format wasm 0x1\n\nSections:\n\n     Type start=0x0000000a end=0x0000000f (size=0x00000005) count: 1\n Function start=0x00000011 end=0x00000013 (size=0x00000002) count: 1\n   Memory start=0x00000015 end=0x00000019 (size=0x00000004) count: 1\n   Export start=0x0000001b end=0x00000026 (size=0x0000000b) count: 1\n     Code start=0x00000028 end=0x0000002e (size=0x00000006) count: 1\n     Data start=0x00000030 end=0x00000036 (size=0x00000006) count: 1\n",
      "details": "\nmemory.8.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nType[1]:\n - type[0] () -> i32\nFunction[1]:\n - func[0] sig=0 <memsize>\nMemory[1]:\n - memory[0] pages: initial=0 max=0\nExport[1]:\n - func[0] <memsize> -> \"memsize\"\nCode[1]:\n - func[0] size=4 <memsize>\nData[1]:\n - segment[0] memory=0 size=0 - init i32=0\n",
      "disassemble": "\nmemory.8.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n00002a func[0] <memsize>:\n 00002b: 3f 00                      | memory.size 0\n 00002d: 0b                         | end\n"
    },
    "memory.9.wasm": {
      "header": "\nmemory.9.wasm:\tfile format wasm 0x1\n\nSections:\n\n     Type start=0x0000000a end=0x0000000f (size=0x00000005) count: 1\n Function start=0x00000011 end=0x00000013 (size=0x00000002) count: 1\n   Memory start=0x00000015 end=0x00000019 (size=0x00000004) count: 1\n   Export start=0x0000001b end=0x00000026 (size=0x0000000b) count: 1\n     Code start=0x00000028 end=0x0000002e (size=0x00000006) count: 1\n     Data start=0x00000030 end=0x00000036 (size=0x00000006) count: 1\n",
      "details": "\nmemory.9.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nType[1]:\n - type[0] () -> i32\nFunction[1]:\n - func[0] sig=0 <memsize>\nMemory[1]:\n - memory[0] pages: initial=0 max=0\nExport[1]:\n - func[0] <memsize> -> \"memsize\"\nCode[1]:\n - func[0] size=4 <memsize>\nData[1]:\n - segment[0] memory=0 size=0 - init i32=0\n",
      "disassemble": "\nmemory.9.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n00002a func[0] <memsize>:\n 00002b: 3f 00                      | memory.size 0\n 00002d: 0b                         | end\n"
    },
    "memory.10.wasm": {
      "header": "\nmemory.10.wasm:\tfile format wasm 0x1\n\nSections:\n\n     Type start=0x0000000a end=0x0000000f (size=0x00000005) count: 1\n Function start=0x00000011 end=0x00000013 (size=0x00000002) count: 1\n   Memory start=0x00000015 end=0x00000019 (size=0x00000004) count: 1\n   Export start=0x0000001b end=0x00000026 (size=0x0000000b) count: 1\n     Code start=0x00000028 end=0x0000002e (size=0x00000006) count: 1\n     Data start=0x00000030 end=0x00000037 (size=0x00000007) count: 1\n",
      "details": "\nmemory.10.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nType[1]:\n - type[0] () -> i32\nFunction[1]:\n - func[0] sig=0 <memsize>\nMemory[1]:\n - memory[0] pages: initial=1 max=1\nExport[1]:\n - func[0] <memsize> -> \"memsize\"\nCode[1]:\n - func[0] size=4 <memsize>\nData[1]:\n - segment[0] memory=0 size=1 - init i32=0\n  - 0000000: 78                                       x\n",
      "disassemble": "\nmemory.10.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n00002a func[0] <memsize>:\n 00002b: 3f 00                      | memory.size 0\n 00002d: 0b                         | end\n"
    },
    "memory.30.wasm": {
      "header": "\nmemory.30.wasm:\tfile format wasm 0x1\n\nSections:\n\n     Type start=0x0000000a end=0x0000001d (size=0x00000013) count: 4\n Function start=0x0000001f end=0x0000002c (size=0x0000000d) count: 12\n   Memory start=0x0000002e end=0x00000031 (size=0x00000003) count: 1\n   Export start=0x00000034 end=0x000000d5 (size=0x000000a1) count: 12\n     Code start=0x000000d8 end=0x000001f7 (size=0x0000011f) count: 12\n     Data start=0x000001f9 end=0x0000020d (size=0x00000014) count: 2\n",
      "details": "\nmemory.30.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nType[4]:\n - type[0] () -> i32\n - type[1] () -> f64\n - type[2] (i32) -> i32\n - type[3] (i64) -> i64\nFunction[12]:\n - func[0] sig=0 <data>\n - func[1] sig=1 <cast>\n - func[2] sig=2 <i32_load8_s>\n - func[3] sig=2 <i32_load8_u>\n - func[4] sig=2 <i32_load16_s>\n - func[5] sig=2 <i32_load16_u>\n - func[6] sig=3 <i64_load8_s>\n - func[7] sig=3 <i64_load8_u>\n - func[8] sig=3 <i64_load16_s>\n - func[9] sig=3 <i64_load16_u>\n - func[10] sig=3 <i64_load32_s>\n - func[11] sig=3 <i64_load32_u>\nMemory[1]:\n - memory[0] pages: initial=1\nExport[12]:\n - func[0] <data> -> \"data\"\n - func[1] <cast> -> \"cast\"\n - func[2] <i32_load8_s> -> \"i32_load8_s\"\n - func[3] <i32_load8_u> -> \"i32_load8_u\"\n - func[4] <i32_load16_s> -> \"i32_load16_s\"\n - func[5] <i32_load16_u> -> \"i32_load16_u\"\n - func[6] <i64_load8_s> -> \"i64_load8_s\"\n - func[7] <i64_load8_u> -> \"i64_load8_u\"\n - func[8] <i64_load16_s> -> \"i64_load16_s\"\n - func[9] <i64_load16_u> -> \"i64_load16_u\"\n - func[10] <i64_load32_s> -> \"i64_load32_s\"\n - func[11] <i64_load32_u> -> \"i64_load32_u\"\nCode[12]:\n - func[0] size=78 <data>\n - func[1] size=56 <cast>\n - func[2] size=14 <i32_load8_s>\n - func[3] size=14 <i32_load8_u>\n - func[4] size=14 <i32_load16_s>\n - func[5] size=14 <i32_load16_u>\n - func[6] size=14 <i64_load8_s>\n - func[7] size=14 <i64_load8_u>\n - func[8] size=14 <i64_load16_s>\n - func[9] size=14 <i64_load16_u>\n - func[10] size=14 <i64_load32_s>\n - func[11] size=14 <i64_load32_u>\nData[2]:\n - segment[0] memory=0 size=5 - init i32=0\n  - 0000000: 4142 43a7 44                             ABC.D\n - segment[1] memory=0 size=4 - init i32=20\n  - 0000014: 5741 534d                                WASM\n",
      "disassemble": "\nmemory.30.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n0000da func[0] <data>:\n 0000db: 41 00                      | i32.const 0\n 0000dd: 2d 00 00                   | i32.load8_u 0 0\n 0000e0: 41 c1 00                   | i32.const 65\n 0000e3: 46                         | i32.eq\n 0000e4: 41 03                      | i32.const 3\n 0000e6: 2d 00 00                   | i32.load8_u 0 0\n 0000e9: 41 a7 01                   | i32.const 167\n 0000ec: 46                         | i32.eq\n 0000ed: 71                         | i32.and\n 0000ee: 41 06                      | i32.const 6\n 0000f0: 2d 00 00                   | i32.load8_u 0 0\n 0000f3: 41 00                      | i32.const 0\n 0000f5: 46                         | i32.eq\n 0000f6: 41 13                      | i32.const 19\n 0000f8: 2d 00 00                   | i32.load8_u 0 0\n 0000fb: 41 00                      | i32.const 0\n 0000fd: 46                         | i32.eq\n 0000fe: 71                         | i32.and\n 0000ff: 71                         | i32.and\n 000100: 41 14                      | i32.const 20\n 000102: 2d 00 00                   | i32.load8_u 0 0\n 000105: 41 d7 00                   | i32.const 87\n 000108: 46                         | i32.eq\n 000109: 41 17                      | i32.const 23\n 00010b: 2d 00 00                   | i32.load8_u 0 0\n 00010e: 41 cd 00                   | i32.const 77\n 000111: 46                         | i32.eq\n 000112: 71                         | i32.and\n 000113: 41 18                      | i32.const 24\n 000115: 2d 00 00                   | i32.load8_u 0 0\n 000118: 41 00                      | i32.const 0\n 00011a: 46                         | i32.eq\n 00011b: 41 ff 07                   | i32.const 1023\n 00011e: 2d 00 00                   | i32.load8_u 0 0\n 000121: 41 00                      | i32.const 0\n 000123: 46                         | i32.eq\n 000124: 71                         | i32.and\n 000125: 71                         | i32.and\n 000126: 71                         | i32.and\n 000127: 0b                         | end\n000129 func[1] <cast>:\n 00012a: 41 08                      | i32.const 8\n 00012c: 42 c7 9f 7f                | i64.const 18446744073709539271\n 000130: 37 03 00                   | i64.store 3 0\n 000133: 41 08                      | i32.const 8\n 000135: 2b 03 00                   | f64.load 3 0\n 000138: 42 c7 9f 7f                | i64.const 18446744073709539271\n 00013c: bf                         | f64.reinterpret_i64\n 00013d: 61                         | f64.eq\n 00013e: 04 40                      | if\n 000140: 44 00 00 00 00 00 00 00 00 |   f64.const 0x0p+0\n 000149: 0f                         |   return\n 00014a: 0b                         | end\n 00014b: 41 09                      | i32.const 9\n 00014d: 42 00                      | i64.const 0\n 00014f: 37 00 00                   | i64.store 0 0\n 000152: 41 0f                      | i32.const 15\n 000154: 41 c5 80 01                | i32.const 16453\n 000158: 3b 00 00                   | i32.store16 0 0\n 00015b: 41 09                      | i32.const 9\n 00015d: 2b 00 00                   | f64.load 0 0\n 000160: 0b                         | end\n000162 func[2] <i32_load8_s>:\n 000163: 41 08                      | i32.const 8\n 000165: 20 00                      | local.get 0\n 000167: 3a 00 00                   | i32.store8 0 0\n 00016a: 41 08                      | i32.const 8\n 00016c: 2c 00 00                   | i32.load8_s 0 0\n 00016f: 0b                         | end\n000171 func[3] <i32_load8_u>:\n 000172: 41 08                      | i32.const 8\n 000174: 20 00                      | local.get 0\n 000176: 3a 00 00                   | i32.store8 0 0\n 000179: 41 08                      | i32.const 8\n 00017b: 2d 00 00                   | i32.load8_u 0 0\n 00017e: 0b                         | end\n000180 func[4] <i32_load16_s>:\n 000181: 41 08                      | i32.const 8\n 000183: 20 00                      | local.get 0\n 000185: 3b 01 00                   | i32.store16 1 0\n 000188: 41 08                      | i32.const 8\n 00018a: 2e 01 00                   | i32.load16_s 1 0\n 00018d: 0b                         | end\n00018f func[5] <i32_load16_u>:\n 000190: 41 08                      | i32.const 8\n 000192: 20 00                      | local.get 0\n 000194: 3b 01 00                   | i32.store16 1 0\n 000197: 41 08                      | i32.const 8\n 000199: 2f 01 00                   | i32.load16_u 1 0\n 00019c: 0b                         | end\n00019e func[6] <i64_load8_s>:\n 00019f: 41 08                      | i32.const 8\n 0001a1: 20 00                      | local.get 0\n 0001a3: 3c 00 00                   | i64.store8 0 0\n 0001a6: 41 08                      | i32.const 8\n 0001a8: 30 00 00                   | i64.load8_s 0 0\n 0001ab: 0b                         | end\n0001ad func[7] <i64_load8_u>:\n 0001ae: 41 08                      | i32.const 8\n 0001b0: 20 00                      | local.get 0\n 0001b2: 3c 00 00                   | i64.store8 0 0\n 0001b5: 41 08                      | i32.const 8\n 0001b7: 31 00 00                   | i64.load8_u 0 0\n 0001ba: 0b                         | end\n0001bc func[8] <i64_load16_s>:\n 0001bd: 41 08                      | i32.const 8\n 0001bf: 20 00                      | local.get 0\n 0001c1: 3d 01 00                   | i64.store16 1 0\n 0001c4: 41 08                      | i32.const 8\n 0001c6: 32 01 00                   | i64.load16_s 1 0\n 0001c9: 0b                         | end\n0001cb func[9] <i64_load16_u>:\n 0001cc: 41 08                      | i32.const 8\n 0001ce: 20 00                      | local.get 0\n 0001d0: 3d 01 00                   | i64.store16 1 0\n 0001d3: 41 08                      | i32.const 8\n 0001d5: 33 01 00                   | i64.load16_u 1 0\n 0001d8: 0b                         | end\n0001da func[10] <i64_load32_s>:\n 0001db: 41 08                      | i32.const 8\n 0001dd: 20 00                      | local.get 0\n 0001df: 3e 02 00                   | i64.store32 2 0\n 0001e2: 41 08                      | i32.const 8\n 0001e4: 34 02 00                   | i64.load32_s 2 0\n 0001e7: 0b                         | end\n0001e9 func[11] <i64_load32_u>:\n 0001ea: 41 08                      | i32.const 8\n 0001ec: 20 00                      | local.get 0\n 0001ee: 3e 02 00                   | i64.store32 2 0\n 0001f1: 41 08                      | i32.const 8\n 0001f3: 35 02 00                   | i64.load32_u 2 0\n 0001f6: 0b                         | end\n"
    }
  }
}
