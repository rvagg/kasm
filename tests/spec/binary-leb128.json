{
  "bin": {
    "binary-leb128.0.wasm": "AGFzbQEAAAAFBAEAggA=",
    "binary-leb128.1.wasm": "AGFzbQEAAAAFBwEAgoCAgAA=",
    "binary-leb128.10.wasm": "AGFzbQEAAAABBQFgAX8AAhcBiABzcGVjdGVzdAlwcmludF9pMzIAAA==",
    "binary-leb128.11.wasm": "AGFzbQEAAAABBQFgAX8AAhcBCHNwZWN0ZXN0iQBwcmludF9pMzIAAA==",
    "binary-leb128.12.wasm": "AGFzbQEAAAABBQFgAX8AAhcBCHNwZWN0ZXN0CXByaW50X2kzMgCAAA==",
    "binary-leb128.13.wasm": "AGFzbQEAAAABBAFgAAADAwGAAAoEAQIACw==",
    "binary-leb128.14.wasm": "AGFzbQEAAAABBAFgAAADAgEABwcBggBmMQAACgQBAgAL",
    "binary-leb128.15.wasm": "AGFzbQEAAAABBAFgAAADAgEABwcBAmYxAIAACgQBAgAL",
    "binary-leb128.16.wasm": "AGFzbQEAAAABBAFgAAADAgEACgWBAAIACw==",
    "binary-leb128.17.wasm": "AGFzbQEAAAAGBwF/AEGAAAs=",
    "binary-leb128.18.wasm": "AGFzbQEAAAAGBwF/AEH/fws=",
    "binary-leb128.19.wasm": "AGFzbQEAAAAGCgF/AEGAgICAAAs=",
    "binary-leb128.2.wasm": "AGFzbQEAAAAFBgEBggCCAA==",
    "binary-leb128.20.wasm": "AGFzbQEAAAAGCgF/AEH/////fws=",
    "binary-leb128.21.wasm": "AGFzbQEAAAAGBwF+AEKAAAs=",
    "binary-leb128.22.wasm": "AGFzbQEAAAAGBwF+AEL/fws=",
    "binary-leb128.23.wasm": "AGFzbQEAAAAGDwF+AEKAgICAgICAgIAACw==",
    "binary-leb128.24.wasm": "AGFzbQEAAAAGDwF+AEL///////////9/Cw==",
    "binary-leb128.25.wasm": "AGFzbQEAAAAFCAEAgoCAgIAA",
    "binary-leb128.26.wasm": "AGFzbQEAAAAFCgEBggCCgICAgAA=",
    "binary-leb128.27.wasm": "AGFzbQEAAAAFAwEAAAsLAYCAgICAAEEACwA=",
    "binary-leb128.28.wasm": "AGFzbQEAAAAEBAFwAAAJCwGAgICAgABBAAsA",
    "binary-leb128.29.wasm": "AGFzbQEAAAAAg4CAgIAAATEy",
    "binary-leb128.3.wasm": "AGFzbQEAAAAFCQEBggCCgICAAA==",
    "binary-leb128.30.wasm": "AGFzbQEAAAAACoOAgICAADEyMzQ=",
    "binary-leb128.31.wasm": "AGFzbQEAAAABDAFggoCAgIAAf34Bfw==",
    "binary-leb128.32.wasm": "AGFzbQEAAAABDAFgAn9+gYCAgIAAfw==",
    "binary-leb128.33.wasm": "AGFzbQEAAAABBQFgAX8AAhsBiICAgIAAc3BlY3Rlc3QJcHJpbnRfaTMyAAA=",
    "binary-leb128.34.wasm": "AGFzbQEAAAABBQFgAX8AAhsBCHNwZWN0ZXN0iYCAgIAAcHJpbnRfaTMyAAA=",
    "binary-leb128.35.wasm": "AGFzbQEAAAABBQFgAX8AAhsBCHNwZWN0ZXN0CXByaW50X2kzMgCAgICAgAA=",
    "binary-leb128.36.wasm": "AGFzbQEAAAABBAFgAAADAwGAgICAgAAKBAECAAs=",
    "binary-leb128.37.wasm": "AGFzbQEAAAABBAFgAAADAgEABwsBgoCAgIAAZjEAAAoEAQIACw==",
    "binary-leb128.38.wasm": "AGFzbQEAAAABBAFgAAADAgEABwsBAmYxAICAgICAAAoEAQIACw==",
    "binary-leb128.39.wasm": "AGFzbQEAAAABBAFgAAADAgEACgWBgICAgAACAAs=",
    "binary-leb128.4.wasm": "AGFzbQEAAAAFAwEAAAsHAYAAQQALAA==",
    "binary-leb128.40.wasm": "AGFzbQEAAAABBAFgAAADAgEABQMBAAEKEQEPAQF/QQAoAoKAgICAgICAgIAAGgs=",
    "binary-leb128.41.wasm": "AGFzbQEAAAABBAFgAAADAgEABQMBAAEKEQEPAQF/QQAogoCAgIAAABoL",
    "binary-leb128.42.wasm": "AGFzbQEAAAABBAFgAAADAgEABQMBAAEKEgEQAQF/QQBBAzaCgICAgAADCw==",
    "binary-leb128.43.wasm": "AGFzbQEAAAABBAFgAAADAgEABQMBAAEKEgEQAQF/QQBBAzYCgoCAgICAgICAgAAL",
    "binary-leb128.44.wasm": "AGFzbQEAAAAGCwF/AEGAgICAgAAL",
    "binary-leb128.45.wasm": "AGFzbQEAAAAGCwF/AEH//////38L",
    "binary-leb128.46.wasm": "AGFzbQEAAAAGEAF+AEKAgICAgICAgICAAAs=",
    "binary-leb128.47.wasm": "AGFzbQEAAAAGEAF+AEL/////////////fws=",
    "binary-leb128.48.wasm": "AGFzbQEAAAAFBwEAgoCAgHA=",
    "binary-leb128.49.wasm": "AGFzbQEAAAAFBwEAgoCAgEA=",
    "binary-leb128.5.wasm": "AGFzbQEAAAAEBAFwAAAJCQECgABBAAsAAA==",
    "binary-leb128.50.wasm": "AGFzbQEAAAAFCQEBggCCgICAEA==",
    "binary-leb128.51.wasm": "AGFzbQEAAAAFCQEBggCCgICAQA==",
    "binary-leb128.52.wasm": "AGFzbQEAAAAFAwEAAAsKAYCAgIAQQQALAA==",
    "binary-leb128.53.wasm": "AGFzbQEAAAAEBAFwAAAJCgGAgICAEEEACwA=",
    "binary-leb128.54.wasm": "AGFzbQEAAAAAg4CAgBABMTI=",
    "binary-leb128.55.wasm": "AGFzbQEAAAAACYOAgIBAMTIzNA==",
    "binary-leb128.56.wasm": "AGFzbQEAAAABCwFggoCAgBB/fgF/",
    "binary-leb128.57.wasm": "AGFzbQEAAAABCwFgAn9+gYCAgEB/",
    "binary-leb128.58.wasm": "AGFzbQEAAAABBQFgAX8AAhoBiICAgBBzcGVjdGVzdAlwcmludF9pMzIAAA==",
    "binary-leb128.59.wasm": "AGFzbQEAAAABBQFgAX8AAhoBCHNwZWN0ZXN0iYCAgEBwcmludF9pMzIAAA==",
    "binary-leb128.6.wasm": "AGFzbQEAAAAAigABMTIzNDU2Nzg5",
    "binary-leb128.60.wasm": "AGFzbQEAAAABBQFgAX8AAhoBCHNwZWN0ZXN0CXByaW50X2kzMgCAgICAEA==",
    "binary-leb128.61.wasm": "AGFzbQEAAAABBAFgAAADBgGAgICAEAoEAQIACw==",
    "binary-leb128.62.wasm": "AGFzbQEAAAABBAFgAAADAgEABwoBgoCAgBBmMQAACgQBAgAL",
    "binary-leb128.63.wasm": "AGFzbQEAAAABBAFgAAADAgEABwoBAmYxAICAgIAQCgQBAgAL",
    "binary-leb128.64.wasm": "AGFzbQEAAAABBAFgAAADAgEACgiBgICAEAIACw==",
    "binary-leb128.65.wasm": "AGFzbQEAAAABBAFgAAADAgEABQMBAAEKEAEOAQF/QQAoAoKAgICAgICAgBAaCw==",
    "binary-leb128.66.wasm": "AGFzbQEAAAABBAFgAAADAgEABQMBAAEKEAEOAQF/QQAoAoKAgICAgICAgEAaCw==",
    "binary-leb128.67.wasm": "AGFzbQEAAAABBAFgAAADAgEABQMBAAEKEAEOAQF/QQAogoCAgBAAGgs=",
    "binary-leb128.68.wasm": "AGFzbQEAAAABBAFgAAADAgEABQMBAAEKEAEOAQF/QQAogoCAgEAAGgs=",
    "binary-leb128.69.wasm": "AGFzbQEAAAABBAFgAAADAgEABQMBAAEKEQEPAQF/QQBBAzaCgICAEAML",
    "binary-leb128.7.wasm": "AGFzbQEAAAAAC4gAMTIzNDU2Nzg5",
    "binary-leb128.70.wasm": "AGFzbQEAAAABBAFgAAADAgEABQMBAAEKEQEPAQF/QQBBAzaCgICAQAML",
    "binary-leb128.71.wasm": "AGFzbQEAAAABBAFgAAADAgEABQMBAAEKEQEPAQF/QQBBAzYCgoCAgICAgICAEAs=",
    "binary-leb128.72.wasm": "AGFzbQEAAAABBAFgAAADAgEABQMBAAEKEQEPAQF/QQBBAzYCgoCAgICAgICAQAs=",
    "binary-leb128.73.wasm": "AGFzbQEAAAAGCgF/AEGAgICAcAs=",
    "binary-leb128.74.wasm": "AGFzbQEAAAAGCgF/AEH/////Dws=",
    "binary-leb128.75.wasm": "AGFzbQEAAAAGCgF/AEGAgICAHws=",
    "binary-leb128.76.wasm": "AGFzbQEAAAAGCgF/AEH/////Tws=",
    "binary-leb128.77.wasm": "AGFzbQEAAAAGDwF+AEKAgICAgICAgIB+Cw==",
    "binary-leb128.78.wasm": "AGFzbQEAAAAGDwF+AEL///////////8BCw==",
    "binary-leb128.79.wasm": "AGFzbQEAAAAGDwF+AEKAgICAgICAgIACCw==",
    "binary-leb128.8.wasm": "AGFzbQEAAAABCAFgggB/fgF/",
    "binary-leb128.80.wasm": "AGFzbQEAAAAGDwF+AEL///////////9BCw==",
    "binary-leb128.81.wasm": "AGFzbQEAAAABBAFgAAADAgEAChsBGQAA/IAAAPyBgAAA/IaAgAAA/IeAgIAAAAs=",
    "binary-leb128.82.wasm": "AGFzbQEAAAABBAFgAAADAgEACg0BCwAA/IeAgICAAAAL",
    "binary-leb128.83.wasm": "AGFzbQEAAAAFAwEAAAsHAYAAQQALAA==",
    "binary-leb128.84.wasm": "AGFzbQEAAAAFAwEAAAsIAYIAAEEACwA=",
    "binary-leb128.85.wasm": "AGFzbQEAAAAFAwEAAAsJAYIAgABBAAsA",
    "binary-leb128.86.wasm": "AGFzbQEAAAAEBAFwAAAJBwGAAEEACwA=",
    "binary-leb128.87.wasm": "AGFzbQEAAAAEBAFwAAAJCQECgABBAAsAAA==",
    "binary-leb128.88.wasm": "AGFzbQEAAAAEBAFwAAAJCQGCAABBAAsAAA==",
    "binary-leb128.89.wasm": "AGFzbQEAAAAEBAFwAAAJCgGCAIAAQQALAAA=",
    "binary-leb128.9.wasm": "AGFzbQEAAAABCAFgAn9+gQB/",
    "binary-leb128.90.wasm": "AGFzbQEAAAABBQHgfwAA"
  },
  "spec": {"source_filename": "/Users/rvagg/git/webassembly/spec/test/core/binary-leb128.wast",
 "commands": [
  {"type": "module", "line": 2, "filename": "binary-leb128.0.wasm"}, 
  {"type": "module", "line": 7, "filename": "binary-leb128.1.wasm"}, 
  {"type": "module", "line": 12, "filename": "binary-leb128.2.wasm"}, 
  {"type": "module", "line": 18, "filename": "binary-leb128.3.wasm"}, 
  {"type": "module", "line": 24, "filename": "binary-leb128.4.wasm"}, 
  {"type": "module", "line": 32, "filename": "binary-leb128.5.wasm"}, 
  {"type": "module", "line": 41, "filename": "binary-leb128.6.wasm"}, 
  {"type": "module", "line": 49, "filename": "binary-leb128.7.wasm"}, 
  {"type": "module", "line": 57, "filename": "binary-leb128.8.wasm"}, 
  {"type": "module", "line": 66, "filename": "binary-leb128.9.wasm"}, 
  {"type": "module", "line": 75, "filename": "binary-leb128.10.wasm"}, 
  {"type": "module", "line": 87, "filename": "binary-leb128.11.wasm"}, 
  {"type": "module", "line": 99, "filename": "binary-leb128.12.wasm"}, 
  {"type": "module", "line": 111, "filename": "binary-leb128.13.wasm"}, 
  {"type": "module", "line": 120, "filename": "binary-leb128.14.wasm"}, 
  {"type": "module", "line": 133, "filename": "binary-leb128.15.wasm"}, 
  {"type": "module", "line": 146, "filename": "binary-leb128.16.wasm"}, 
  {"type": "module", "line": 158, "filename": "binary-leb128.17.wasm"}, 
  {"type": "module", "line": 165, "filename": "binary-leb128.18.wasm"}, 
  {"type": "module", "line": 172, "filename": "binary-leb128.19.wasm"}, 
  {"type": "module", "line": 179, "filename": "binary-leb128.20.wasm"}, 
  {"type": "module", "line": 187, "filename": "binary-leb128.21.wasm"}, 
  {"type": "module", "line": 194, "filename": "binary-leb128.22.wasm"}, 
  {"type": "module", "line": 201, "filename": "binary-leb128.23.wasm"}, 
  {"type": "module", "line": 208, "filename": "binary-leb128.24.wasm"}, 
  {"type": "assert_malformed", "line": 218, "filename": "binary-leb128.25.wasm", "text": "integer representation too long", "module_type": "binary"}, 
  {"type": "assert_malformed", "line": 226, "filename": "binary-leb128.26.wasm", "text": "integer representation too long", "module_type": "binary"}, 
  {"type": "assert_malformed", "line": 235, "filename": "binary-leb128.27.wasm", "text": "integer representation too long", "module_type": "binary"}, 
  {"type": "assert_malformed", "line": 246, "filename": "binary-leb128.28.wasm", "text": "integer representation too long", "module_type": "binary"}, 
  {"type": "assert_malformed", "line": 257, "filename": "binary-leb128.29.wasm", "text": "integer representation too long", "module_type": "binary"}, 
  {"type": "assert_malformed", "line": 268, "filename": "binary-leb128.30.wasm", "text": "integer representation too long", "module_type": "binary"}, 
  {"type": "assert_malformed", "line": 279, "filename": "binary-leb128.31.wasm", "text": "integer representation too long", "module_type": "binary"}, 
  {"type": "assert_malformed", "line": 291, "filename": "binary-leb128.32.wasm", "text": "integer representation too long", "module_type": "binary"}, 
  {"type": "assert_malformed", "line": 303, "filename": "binary-leb128.33.wasm", "text": "integer representation too long", "module_type": "binary"}, 
  {"type": "assert_malformed", "line": 318, "filename": "binary-leb128.34.wasm", "text": "integer representation too long", "module_type": "binary"}, 
  {"type": "assert_malformed", "line": 333, "filename": "binary-leb128.35.wasm", "text": "integer representation too long", "module_type": "binary"}, 
  {"type": "assert_malformed", "line": 348, "filename": "binary-leb128.36.wasm", "text": "integer representation too long", "module_type": "binary"}, 
  {"type": "assert_malformed", "line": 360, "filename": "binary-leb128.37.wasm", "text": "integer representation too long", "module_type": "binary"}, 
  {"type": "assert_malformed", "line": 376, "filename": "binary-leb128.38.wasm", "text": "integer representation too long", "module_type": "binary"}, 
  {"type": "assert_malformed", "line": 392, "filename": "binary-leb128.39.wasm", "text": "integer representation too long", "module_type": "binary"}, 
  {"type": "assert_malformed", "line": 405, "filename": "binary-leb128.40.wasm", "text": "integer representation too long", "module_type": "binary"}, 
  {"type": "assert_malformed", "line": 424, "filename": "binary-leb128.41.wasm", "text": "integer representation too long", "module_type": "binary"}, 
  {"type": "assert_malformed", "line": 443, "filename": "binary-leb128.42.wasm", "text": "integer representation too long", "module_type": "binary"}, 
  {"type": "assert_malformed", "line": 462, "filename": "binary-leb128.43.wasm", "text": "integer representation too long", "module_type": "binary"}, 
  {"type": "assert_malformed", "line": 483, "filename": "binary-leb128.44.wasm", "text": "integer representation too long", "module_type": "binary"}, 
  {"type": "assert_malformed", "line": 493, "filename": "binary-leb128.45.wasm", "text": "integer representation too long", "module_type": "binary"}, 
  {"type": "assert_malformed", "line": 504, "filename": "binary-leb128.46.wasm", "text": "integer representation too long", "module_type": "binary"}, 
  {"type": "assert_malformed", "line": 514, "filename": "binary-leb128.47.wasm", "text": "integer representation too long", "module_type": "binary"}, 
  {"type": "assert_malformed", "line": 526, "filename": "binary-leb128.48.wasm", "text": "integer too large", "module_type": "binary"}, 
  {"type": "assert_malformed", "line": 534, "filename": "binary-leb128.49.wasm", "text": "integer too large", "module_type": "binary"}, 
  {"type": "assert_malformed", "line": 542, "filename": "binary-leb128.50.wasm", "text": "integer too large", "module_type": "binary"}, 
  {"type": "assert_malformed", "line": 551, "filename": "binary-leb128.51.wasm", "text": "integer too large", "module_type": "binary"}, 
  {"type": "assert_malformed", "line": 560, "filename": "binary-leb128.52.wasm", "text": "integer too large", "module_type": "binary"}, 
  {"type": "assert_malformed", "line": 571, "filename": "binary-leb128.53.wasm", "text": "integer too large", "module_type": "binary"}, 
  {"type": "assert_malformed", "line": 582, "filename": "binary-leb128.54.wasm", "text": "integer too large", "module_type": "binary"}, 
  {"type": "assert_malformed", "line": 593, "filename": "binary-leb128.55.wasm", "text": "integer too large", "module_type": "binary"}, 
  {"type": "assert_malformed", "line": 604, "filename": "binary-leb128.56.wasm", "text": "integer too large", "module_type": "binary"}, 
  {"type": "assert_malformed", "line": 616, "filename": "binary-leb128.57.wasm", "text": "integer too large", "module_type": "binary"}, 
  {"type": "assert_malformed", "line": 628, "filename": "binary-leb128.58.wasm", "text": "integer too large", "module_type": "binary"}, 
  {"type": "assert_malformed", "line": 643, "filename": "binary-leb128.59.wasm", "text": "integer too large", "module_type": "binary"}, 
  {"type": "assert_malformed", "line": 658, "filename": "binary-leb128.60.wasm", "text": "integer too large", "module_type": "binary"}, 
  {"type": "assert_malformed", "line": 673, "filename": "binary-leb128.61.wasm", "text": "integer too large", "module_type": "binary"}, 
  {"type": "assert_malformed", "line": 686, "filename": "binary-leb128.62.wasm", "text": "integer too large", "module_type": "binary"}, 
  {"type": "assert_malformed", "line": 702, "filename": "binary-leb128.63.wasm", "text": "integer too large", "module_type": "binary"}, 
  {"type": "assert_malformed", "line": 718, "filename": "binary-leb128.64.wasm", "text": "integer too large", "module_type": "binary"}, 
  {"type": "assert_malformed", "line": 731, "filename": "binary-leb128.65.wasm", "text": "integer representation too long", "module_type": "binary"}, 
  {"type": "assert_malformed", "line": 751, "filename": "binary-leb128.66.wasm", "text": "integer representation too long", "module_type": "binary"}, 
  {"type": "assert_malformed", "line": 771, "filename": "binary-leb128.67.wasm", "text": "integer too large", "module_type": "binary"}, 
  {"type": "assert_malformed", "line": 789, "filename": "binary-leb128.68.wasm", "text": "integer too large", "module_type": "binary"}, 
  {"type": "assert_malformed", "line": 808, "filename": "binary-leb128.69.wasm", "text": "integer too large", "module_type": "binary"}, 
  {"type": "assert_malformed", "line": 827, "filename": "binary-leb128.70.wasm", "text": "integer too large", "module_type": "binary"}, 
  {"type": "assert_malformed", "line": 846, "filename": "binary-leb128.71.wasm", "text": "integer representation too long", "module_type": "binary"}, 
  {"type": "assert_malformed", "line": 866, "filename": "binary-leb128.72.wasm", "text": "integer representation too long", "module_type": "binary"}, 
  {"type": "assert_malformed", "line": 888, "filename": "binary-leb128.73.wasm", "text": "integer too large", "module_type": "binary"}, 
  {"type": "assert_malformed", "line": 898, "filename": "binary-leb128.74.wasm", "text": "integer too large", "module_type": "binary"}, 
  {"type": "assert_malformed", "line": 908, "filename": "binary-leb128.75.wasm", "text": "integer too large", "module_type": "binary"}, 
  {"type": "assert_malformed", "line": 918, "filename": "binary-leb128.76.wasm", "text": "integer too large", "module_type": "binary"}, 
  {"type": "assert_malformed", "line": 929, "filename": "binary-leb128.77.wasm", "text": "integer too large", "module_type": "binary"}, 
  {"type": "assert_malformed", "line": 939, "filename": "binary-leb128.78.wasm", "text": "integer too large", "module_type": "binary"}, 
  {"type": "assert_malformed", "line": 949, "filename": "binary-leb128.79.wasm", "text": "integer too large", "module_type": "binary"}, 
  {"type": "assert_malformed", "line": 959, "filename": "binary-leb128.80.wasm", "text": "integer too large", "module_type": "binary"}, 
  {"type": "module", "line": 969, "filename": "binary-leb128.81.wasm"}, 
  {"type": "assert_malformed", "line": 990, "filename": "binary-leb128.82.wasm", "text": "integer representation too long", "module_type": "binary"}, 
  {"type": "module", "line": 1007, "filename": "binary-leb128.83.wasm"}, 
  {"type": "module", "line": 1015, "filename": "binary-leb128.84.wasm"}, 
  {"type": "module", "line": 1024, "filename": "binary-leb128.85.wasm"}, 
  {"type": "module", "line": 1035, "filename": "binary-leb128.86.wasm"}, 
  {"type": "module", "line": 1043, "filename": "binary-leb128.87.wasm"}, 
  {"type": "module", "line": 1052, "filename": "binary-leb128.88.wasm"}, 
  {"type": "module", "line": 1061, "filename": "binary-leb128.89.wasm"}, 
  {"type": "assert_malformed", "line": 1073, "filename": "binary-leb128.90.wasm", "text": "integer representation too long", "module_type": "binary"}]},
  "code": [
    "(module binary \"\\00asm\" \"\\01\\00\\00\\00\" \"\\05\\04\\01\" \"\\00\\82\\00\" )",
    "(module binary \"\\00asm\" \"\\01\\00\\00\\00\" \"\\05\\07\\01\" \"\\00\\82\\80\\80\\80\\00\" )",
    "(module binary \"\\00asm\" \"\\01\\00\\00\\00\" \"\\05\\06\\01\" \"\\01\\82\\00\" \"\\82\\00\" )",
    "(module binary \"\\00asm\" \"\\01\\00\\00\\00\" \"\\05\\09\\01\" \"\\01\\82\\00\" \"\\82\\80\\80\\80\\00\" )",
    "(module binary \"\\00asm\" \"\\01\\00\\00\\00\" \"\\05\\03\\01\" \"\\00\\00\" \"\\0b\\07\\01\" \"\\80\\00\" \"\\41\\00\\0b\\00\" )",
    "(module binary \"\\00asm\" \"\\01\\00\\00\\00\" \"\\04\\04\\01\" \"\\70\\00\\00\" \"\\09\\09\\01\" \"\\02\" \"\\80\\00\" \"\\41\\00\\0b\\00\\00\" )",
    "(module binary \"\\00asm\" \"\\01\\00\\00\\00\" \"\\00\" \"\\8a\\00\" \"\\01\" \"1\" \"23456789\" )",
    "(module binary \"\\00asm\" \"\\01\\00\\00\\00\" \"\\00\" \"\\0b\" \"\\88\\00\" \"12345678\" \"9\" )",
    "(module binary \"\\00asm\" \"\\01\\00\\00\\00\" \"\\01\\08\\01\" \"\\60\" \"\\82\\00\" \"\\7f\\7e\" \"\\01\" \"\\7f\" )",
    "(module binary \"\\00asm\" \"\\01\\00\\00\\00\" \"\\01\\08\\01\" \"\\60\" \"\\02\" \"\\7f\\7e\" \"\\81\\00\" \"\\7f\" )",
    "(module binary \"\\00asm\" \"\\01\\00\\00\\00\" \"\\01\\05\\01\" \"\\60\\01\\7f\\00\" \"\\02\\17\\01\" \"\\88\\00\" \"\\73\\70\\65\\63\\74\\65\\73\\74\" \"\\09\" \"\\70\\72\\69\\6e\\74\\5f\\69\\33\\32\" \"\\00\" \"\\00\" )",
    "(module binary \"\\00asm\" \"\\01\\00\\00\\00\" \"\\01\\05\\01\" \"\\60\\01\\7f\\00\" \"\\02\\17\\01\" \"\\08\" \"\\73\\70\\65\\63\\74\\65\\73\\74\" \"\\89\\00\" \"\\70\\72\\69\\6e\\74\\5f\\69\\33\\32\" \"\\00\" \"\\00\" )",
    "(module binary \"\\00asm\" \"\\01\\00\\00\\00\" \"\\01\\05\\01\" \"\\60\\01\\7f\\00\" \"\\02\\17\\01\" \"\\08\" \"\\73\\70\\65\\63\\74\\65\\73\\74\" \"\\09\" \"\\70\\72\\69\\6e\\74\\5f\\69\\33\\32\" \"\\00\" \"\\80\\00\" )",
    "(module binary \"\\00asm\" \"\\01\\00\\00\\00\" \"\\01\\04\\01\" \"\\60\\00\\00\" \"\\03\\03\\01\" \"\\80\\00\" \"\\0a\\04\\01\" \"\\02\\00\\0b\" )",
    "(module binary \"\\00asm\" \"\\01\\00\\00\\00\" \"\\01\\04\\01\" \"\\60\\00\\00\" \"\\03\\02\\01\\00\" \"\\07\\07\\01\" \"\\82\\00\" \"\\66\\31\" \"\\00\" \"\\00\" \"\\0a\\04\\01\" \"\\02\\00\\0b\" )",
    "(module binary \"\\00asm\" \"\\01\\00\\00\\00\" \"\\01\\04\\01\" \"\\60\\00\\00\" \"\\03\\02\\01\\00\" \"\\07\\07\\01\" \"\\02\" \"\\66\\31\" \"\\00\" \"\\80\\00\" \"\\0a\\04\\01\" \"\\02\\00\\0b\" )",
    "(module binary \"\\00asm\" \"\\01\\00\\00\\00\" \"\\01\\04\\01\" \"\\60\\00\\00\" \"\\03\\02\\01\\00\" \"\\0a\" \"\\05\" \"\\81\\00\" \"\\02\\00\\0b\" )",
    "(module binary \"\\00asm\" \"\\01\\00\\00\\00\" \"\\06\\07\\01\" \"\\7f\\00\" \"\\41\\80\\00\" \"\\0b\" )",
    "(module binary \"\\00asm\" \"\\01\\00\\00\\00\" \"\\06\\07\\01\" \"\\7f\\00\" \"\\41\\ff\\7f\" \"\\0b\" )",
    "(module binary \"\\00asm\" \"\\01\\00\\00\\00\" \"\\06\\0a\\01\" \"\\7f\\00\" \"\\41\\80\\80\\80\\80\\00\" \"\\0b\" )",
    "(module binary \"\\00asm\" \"\\01\\00\\00\\00\" \"\\06\\0a\\01\" \"\\7f\\00\" \"\\41\\ff\\ff\\ff\\ff\\7f\" \"\\0b\" )",
    "(module binary \"\\00asm\" \"\\01\\00\\00\\00\" \"\\06\\07\\01\" \"\\7e\\00\" \"\\42\\80\\00\" \"\\0b\" )",
    "(module binary \"\\00asm\" \"\\01\\00\\00\\00\" \"\\06\\07\\01\" \"\\7e\\00\" \"\\42\\ff\\7f\" \"\\0b\" )",
    "(module binary \"\\00asm\" \"\\01\\00\\00\\00\" \"\\06\\0f\\01\" \"\\7e\\00\" \"\\42\\80\\80\\80\\80\\80\\80\\80\\80\\80\\00\" \"\\0b\" )",
    "(module binary \"\\00asm\" \"\\01\\00\\00\\00\" \"\\06\\0f\\01\" \"\\7e\\00\" \"\\42\\ff\\ff\\ff\\ff\\ff\\ff\\ff\\ff\\ff\\7f\" \"\\0b\" )",
    "(assert_malformed (module binary \"\\00asm\" \"\\01\\00\\00\\00\" \"\\05\\08\\01\" \"\\00\\82\\80\\80\\80\\80\\00\" ) \"integer representation too long\")",
    "(assert_malformed (module binary \"\\00asm\" \"\\01\\00\\00\\00\" \"\\05\\0a\\01\" \"\\01\\82\\00\" \"\\82\\80\\80\\80\\80\\00\" ) \"integer representation too long\")",
    "(assert_malformed (module binary \"\\00asm\" \"\\01\\00\\00\\00\" \"\\05\\03\\01\" \"\\00\\00\" \"\\0b\\0b\\01\" \"\\80\\80\\80\\80\\80\\00\" \"\\41\\00\\0b\\00\" ) \"integer representation too long\")",
    "(assert_malformed (module binary \"\\00asm\" \"\\01\\00\\00\\00\" \"\\04\\04\\01\" \"\\70\\00\\00\" \"\\09\\0b\\01\" \"\\80\\80\\80\\80\\80\\00\" \"\\41\\00\\0b\\00\" ) \"integer representation too long\")",
    "(assert_malformed (module binary \"\\00asm\" \"\\01\\00\\00\\00\" \"\\00\" \"\\83\\80\\80\\80\\80\\00\" \"\\01\" \"1\" \"2\" ) \"integer representation too long\")",
    "(assert_malformed (module binary \"\\00asm\" \"\\01\\00\\00\\00\" \"\\00\" \"\\0A\" \"\\83\\80\\80\\80\\80\\00\" \"123\" \"4\" ) \"integer representation too long\")",
    "(assert_malformed (module binary \"\\00asm\" \"\\01\\00\\00\\00\" \"\\01\\0c\\01\" \"\\60\" \"\\82\\80\\80\\80\\80\\00\" \"\\7f\\7e\" \"\\01\" \"\\7f\" ) \"integer representation too long\")",
    "(assert_malformed (module binary \"\\00asm\" \"\\01\\00\\00\\00\" \"\\01\\0c\\01\" \"\\60\" \"\\02\" \"\\7f\\7e\" \"\\81\\80\\80\\80\\80\\00\" \"\\7f\" ) \"integer representation too long\")",
    "(assert_malformed (module binary \"\\00asm\" \"\\01\\00\\00\\00\" \"\\01\\05\\01\" \"\\60\\01\\7f\\00\" \"\\02\\1b\\01\" \"\\88\\80\\80\\80\\80\\00\" \"\\73\\70\\65\\63\\74\\65\\73\\74\" \"\\09\" \"\\70\\72\\69\\6e\\74\\5f\\69\\33\\32\" \"\\00\" \"\\00\" ) \"integer representation too long\")",
    "(assert_malformed (module binary \"\\00asm\" \"\\01\\00\\00\\00\" \"\\01\\05\\01\" \"\\60\\01\\7f\\00\" \"\\02\\1b\\01\" \"\\08\" \"\\73\\70\\65\\63\\74\\65\\73\\74\" \"\\89\\80\\80\\80\\80\\00\" \"\\70\\72\\69\\6e\\74\\5f\\69\\33\\32\" \"\\00\" \"\\00\" ) \"integer representation too long\")",
    "(assert_malformed (module binary \"\\00asm\" \"\\01\\00\\00\\00\" \"\\01\\05\\01\" \"\\60\\01\\7f\\00\" \"\\02\\1b\\01\" \"\\08\" \"\\73\\70\\65\\63\\74\\65\\73\\74\" \"\\09\" \"\\70\\72\\69\\6e\\74\\5f\\69\\33\\32\" \"\\00\" \"\\80\\80\\80\\80\\80\\00\" ) \"integer representation too long\")",
    "(assert_malformed (module binary \"\\00asm\" \"\\01\\00\\00\\00\" \"\\01\\04\\01\" \"\\60\\00\\00\" \"\\03\\03\\01\" \"\\80\\80\\80\\80\\80\\00\" \"\\0a\\04\\01\" \"\\02\\00\\0b\" ) \"integer representation too long\")",
    "(assert_malformed (module binary \"\\00asm\" \"\\01\\00\\00\\00\" \"\\01\\04\\01\" \"\\60\\00\\00\" \"\\03\\02\\01\\00\" \"\\07\\0b\\01\" \"\\82\\80\\80\\80\\80\\00\" \"\\66\\31\" \"\\00\" \"\\00\" \"\\0a\\04\\01\" \"\\02\\00\\0b\" ) \"integer representation too long\")",
    "(assert_malformed (module binary \"\\00asm\" \"\\01\\00\\00\\00\" \"\\01\\04\\01\" \"\\60\\00\\00\" \"\\03\\02\\01\\00\" \"\\07\\0b\\01\" \"\\02\" \"\\66\\31\" \"\\00\" \"\\80\\80\\80\\80\\80\\00\" \"\\0a\\04\\01\" \"\\02\\00\\0b\" ) \"integer representation too long\")",
    "(assert_malformed (module binary \"\\00asm\" \"\\01\\00\\00\\00\" \"\\01\\04\\01\" \"\\60\\00\\00\" \"\\03\\02\\01\\00\" \"\\0a\" \"\\05\" \"\\81\\80\\80\\80\\80\\00\" \"\\02\\00\\0b\" ) \"integer representation too long\")",
    "(assert_malformed (module binary \"\\00asm\" \"\\01\\00\\00\\00\" \"\\01\\04\\01\\60\\00\\00\" \"\\03\\02\\01\\00\" \"\\05\\03\\01\\00\\01\" \"\\0a\\11\\01\" \"\\0f\\01\\01\" \"\\7f\" \"\\41\\00\" \"\\28\" \"\\02\" \"\\82\\80\\80\\80\\80\\80\\80\\80\\80\\80\\00\" \"\\1a\" \"\\0b\" ) \"integer representation too long\")",
    "(assert_malformed (module binary \"\\00asm\" \"\\01\\00\\00\\00\" \"\\01\\04\\01\\60\\00\\00\" \"\\03\\02\\01\\00\" \"\\05\\03\\01\\00\\01\" \"\\0a\\11\\01\" \"\\0f\\01\\01\" \"\\7f\" \"\\41\\00\" \"\\28\" \"\\82\\80\\80\\80\\80\\00\" \"\\00\" \"\\1a\" \"\\0b\" ) \"integer representation too long\")",
    "(assert_malformed (module binary \"\\00asm\" \"\\01\\00\\00\\00\" \"\\01\\04\\01\\60\\00\\00\" \"\\03\\02\\01\\00\" \"\\05\\03\\01\\00\\01\" \"\\0a\\12\\01\" \"\\10\\01\\01\" \"\\7f\" \"\\41\\00\" \"\\41\\03\" \"\\36\" \"\\82\\80\\80\\80\\80\\00\" \"\\03\" \"\\0b\" ) \"integer representation too long\")",
    "(assert_malformed (module binary \"\\00asm\" \"\\01\\00\\00\\00\" \"\\01\\04\\01\\60\\00\\00\" \"\\03\\02\\01\\00\" \"\\05\\03\\01\\00\\01\" \"\\0a\\12\\01\" \"\\10\\01\\01\" \"\\7f\" \"\\41\\00\" \"\\41\\03\" \"\\36\" \"\\02\" \"\\82\\80\\80\\80\\80\\80\\80\\80\\80\\80\\00\" \"\\0b\" ) \"integer representation too long\")",
    "(assert_malformed (module binary \"\\00asm\" \"\\01\\00\\00\\00\" \"\\06\\0b\\01\" \"\\7f\\00\" \"\\41\\80\\80\\80\\80\\80\\00\" \"\\0b\" ) \"integer representation too long\")",
    "(assert_malformed (module binary \"\\00asm\" \"\\01\\00\\00\\00\" \"\\06\\0b\\01\" \"\\7f\\00\" \"\\41\\ff\\ff\\ff\\ff\\ff\\7f\" \"\\0b\" ) \"integer representation too long\")",
    "(assert_malformed (module binary \"\\00asm\" \"\\01\\00\\00\\00\" \"\\06\\10\\01\" \"\\7e\\00\" \"\\42\\80\\80\\80\\80\\80\\80\\80\\80\\80\\80\\00\" \"\\0b\" ) \"integer representation too long\")",
    "(assert_malformed (module binary \"\\00asm\" \"\\01\\00\\00\\00\" \"\\06\\10\\01\" \"\\7e\\00\" \"\\42\\ff\\ff\\ff\\ff\\ff\\ff\\ff\\ff\\ff\\ff\\7f\" \"\\0b\" ) \"integer representation too long\")",
    "(assert_malformed (module binary \"\\00asm\" \"\\01\\00\\00\\00\" \"\\05\\07\\01\" \"\\00\\82\\80\\80\\80\\70\" ) \"integer too large\")",
    "(assert_malformed (module binary \"\\00asm\" \"\\01\\00\\00\\00\" \"\\05\\07\\01\" \"\\00\\82\\80\\80\\80\\40\" ) \"integer too large\")",
    "(assert_malformed (module binary \"\\00asm\" \"\\01\\00\\00\\00\" \"\\05\\09\\01\" \"\\01\\82\\00\" \"\\82\\80\\80\\80\\10\" ) \"integer too large\")",
    "(assert_malformed (module binary \"\\00asm\" \"\\01\\00\\00\\00\" \"\\05\\09\\01\" \"\\01\\82\\00\" \"\\82\\80\\80\\80\\40\" ) \"integer too large\")",
    "(assert_malformed (module binary \"\\00asm\" \"\\01\\00\\00\\00\" \"\\05\\03\\01\" \"\\00\\00\" \"\\0b\\0a\\01\" \"\\80\\80\\80\\80\\10\" \"\\41\\00\\0b\\00\" ) \"integer too large\")",
    "(assert_malformed (module binary \"\\00asm\" \"\\01\\00\\00\\00\" \"\\04\\04\\01\" \"\\70\\00\\00\" \"\\09\\0a\\01\" \"\\80\\80\\80\\80\\10\" \"\\41\\00\\0b\\00\" ) \"integer too large\")",
    "(assert_malformed (module binary \"\\00asm\" \"\\01\\00\\00\\00\" \"\\00\" \"\\83\\80\\80\\80\\10\" \"\\01\" \"1\" \"2\" ) \"integer too large\")",
    "(assert_malformed (module binary \"\\00asm\" \"\\01\\00\\00\\00\" \"\\00\" \"\\09\" \"\\83\\80\\80\\80\\40\" \"123\" \"4\" ) \"integer too large\")",
    "(assert_malformed (module binary \"\\00asm\" \"\\01\\00\\00\\00\" \"\\01\\0b\\01\" \"\\60\" \"\\82\\80\\80\\80\\10\" \"\\7f\\7e\" \"\\01\" \"\\7f\" ) \"integer too large\")",
    "(assert_malformed (module binary \"\\00asm\" \"\\01\\00\\00\\00\" \"\\01\\0b\\01\" \"\\60\" \"\\02\" \"\\7f\\7e\" \"\\81\\80\\80\\80\\40\" \"\\7f\" ) \"integer too large\")",
    "(assert_malformed (module binary \"\\00asm\" \"\\01\\00\\00\\00\" \"\\01\\05\\01\" \"\\60\\01\\7f\\00\" \"\\02\\1a\\01\" \"\\88\\80\\80\\80\\10\" \"\\73\\70\\65\\63\\74\\65\\73\\74\" \"\\09\" \"\\70\\72\\69\\6e\\74\\5f\\69\\33\\32\" \"\\00\" \"\\00\" ) \"integer too large\")",
    "(assert_malformed (module binary \"\\00asm\" \"\\01\\00\\00\\00\" \"\\01\\05\\01\" \"\\60\\01\\7f\\00\" \"\\02\\1a\\01\" \"\\08\" \"\\73\\70\\65\\63\\74\\65\\73\\74\" \"\\89\\80\\80\\80\\40\" \"\\70\\72\\69\\6e\\74\\5f\\69\\33\\32\" \"\\00\" \"\\00\" ) \"integer too large\")",
    "(assert_malformed (module binary \"\\00asm\" \"\\01\\00\\00\\00\" \"\\01\\05\\01\" \"\\60\\01\\7f\\00\" \"\\02\\1a\\01\" \"\\08\" \"\\73\\70\\65\\63\\74\\65\\73\\74\" \"\\09\" \"\\70\\72\\69\\6e\\74\\5f\\69\\33\\32\" \"\\00\" \"\\80\\80\\80\\80\\10\" ) \"integer too large\")",
    "(assert_malformed (module binary \"\\00asm\" \"\\01\\00\\00\\00\" \"\\01\\04\\01\" \"\\60\\00\\00\" \"\\03\\06\\01\" \"\\80\\80\\80\\80\\10\" \"\\0a\\04\\01\" \"\\02\\00\\0b\" ) \"integer too large\")",
    "(assert_malformed (module binary \"\\00asm\" \"\\01\\00\\00\\00\" \"\\01\\04\\01\" \"\\60\\00\\00\" \"\\03\\02\\01\\00\" \"\\07\\0a\\01\" \"\\82\\80\\80\\80\\10\" \"\\66\\31\" \"\\00\" \"\\00\" \"\\0a\\04\\01\" \"\\02\\00\\0b\" ) \"integer too large\")",
    "(assert_malformed (module binary \"\\00asm\" \"\\01\\00\\00\\00\" \"\\01\\04\\01\" \"\\60\\00\\00\" \"\\03\\02\\01\\00\" \"\\07\\0a\\01\" \"\\02\" \"\\66\\31\" \"\\00\" \"\\80\\80\\80\\80\\10\" \"\\0a\\04\\01\" \"\\02\\00\\0b\" ) \"integer too large\")",
    "(assert_malformed (module binary \"\\00asm\" \"\\01\\00\\00\\00\" \"\\01\\04\\01\" \"\\60\\00\\00\" \"\\03\\02\\01\\00\" \"\\0a\" \"\\08\" \"\\81\\80\\80\\80\\10\" \"\\02\\00\\0b\" ) \"integer too large\")",
    "(assert_malformed (module binary \"\\00asm\" \"\\01\\00\\00\\00\" \"\\01\\04\\01\\60\\00\\00\" \"\\03\\02\\01\\00\" \"\\05\\03\\01\\00\\01\" \"\\0a\\10\\01\" \"\\0e\\01\\01\" \"\\7f\" \"\\41\\00\" \"\\28\" \"\\02\" \"\\82\\80\\80\\80\\80\\80\\80\\80\\80\\10\" \"\\1a\" \"\\0b\" ) \"integer representation too long\")",
    "(assert_malformed (module binary \"\\00asm\" \"\\01\\00\\00\\00\" \"\\01\\04\\01\\60\\00\\00\" \"\\03\\02\\01\\00\" \"\\05\\03\\01\\00\\01\" \"\\0a\\10\\01\" \"\\0e\\01\\01\" \"\\7f\" \"\\41\\00\" \"\\28\" \"\\02\" \"\\82\\80\\80\\80\\80\\80\\80\\80\\80\\40\" \"\\1a\" \"\\0b\" ) \"integer representation too long\")",
    "(assert_malformed (module binary \"\\00asm\" \"\\01\\00\\00\\00\" \"\\01\\04\\01\\60\\00\\00\" \"\\03\\02\\01\\00\" \"\\05\\03\\01\\00\\01\" \"\\0a\\10\\01\" \"\\0e\\01\\01\" \"\\7f\" \"\\41\\00\" \"\\28\" \"\\82\\80\\80\\80\\10\" \"\\00\" \"\\1a\" \"\\0b\" ) \"integer too large\")",
    "(assert_malformed (module binary \"\\00asm\" \"\\01\\00\\00\\00\" \"\\01\\04\\01\\60\\00\\00\" \"\\03\\02\\01\\00\" \"\\05\\03\\01\\00\\01\" \"\\0a\\10\\01\" \"\\0e\\01\\01\" \"\\7f\" \"\\41\\00\" \"\\28\" \"\\82\\80\\80\\80\\40\" \"\\00\" \"\\1a\" \"\\0b\" ) \"integer too large\")",
    "(assert_malformed (module binary \"\\00asm\" \"\\01\\00\\00\\00\" \"\\01\\04\\01\\60\\00\\00\" \"\\03\\02\\01\\00\" \"\\05\\03\\01\\00\\01\" \"\\0a\\11\\01\" \"\\0f\\01\\01\" \"\\7f\" \"\\41\\00\" \"\\41\\03\" \"\\36\" \"\\82\\80\\80\\80\\10\" \"\\03\" \"\\0b\" ) \"integer too large\")",
    "(assert_malformed (module binary \"\\00asm\" \"\\01\\00\\00\\00\" \"\\01\\04\\01\\60\\00\\00\" \"\\03\\02\\01\\00\" \"\\05\\03\\01\\00\\01\" \"\\0a\\11\\01\" \"\\0f\\01\\01\" \"\\7f\" \"\\41\\00\" \"\\41\\03\" \"\\36\" \"\\82\\80\\80\\80\\40\" \"\\03\" \"\\0b\" ) \"integer too large\")",
    "(assert_malformed (module binary \"\\00asm\" \"\\01\\00\\00\\00\" \"\\01\\04\\01\\60\\00\\00\" \"\\03\\02\\01\\00\" \"\\05\\03\\01\\00\\01\" \"\\0a\\11\\01\" \"\\0f\\01\\01\" \"\\7f\" \"\\41\\00\" \"\\41\\03\" \"\\36\" \"\\02\" \"\\82\\80\\80\\80\\80\\80\\80\\80\\80\\10\" \"\\0b\" ) \"integer representation too long\")",
    "(assert_malformed (module binary \"\\00asm\" \"\\01\\00\\00\\00\" \"\\01\\04\\01\\60\\00\\00\" \"\\03\\02\\01\\00\" \"\\05\\03\\01\\00\\01\" \"\\0a\\11\\01\" \"\\0f\\01\\01\" \"\\7f\" \"\\41\\00\" \"\\41\\03\" \"\\36\" \"\\02\" \"\\82\\80\\80\\80\\80\\80\\80\\80\\80\\40\" \"\\0b\" ) \"integer representation too long\")",
    "(assert_malformed (module binary \"\\00asm\" \"\\01\\00\\00\\00\" \"\\06\\0a\\01\" \"\\7f\\00\" \"\\41\\80\\80\\80\\80\\70\" \"\\0b\" ) \"integer too large\")",
    "(assert_malformed (module binary \"\\00asm\" \"\\01\\00\\00\\00\" \"\\06\\0a\\01\" \"\\7f\\00\" \"\\41\\ff\\ff\\ff\\ff\\0f\" \"\\0b\" ) \"integer too large\")",
    "(assert_malformed (module binary \"\\00asm\" \"\\01\\00\\00\\00\" \"\\06\\0a\\01\" \"\\7f\\00\" \"\\41\\80\\80\\80\\80\\1f\" \"\\0b\" ) \"integer too large\")",
    "(assert_malformed (module binary \"\\00asm\" \"\\01\\00\\00\\00\" \"\\06\\0a\\01\" \"\\7f\\00\" \"\\41\\ff\\ff\\ff\\ff\\4f\" \"\\0b\" ) \"integer too large\")",
    "(assert_malformed (module binary \"\\00asm\" \"\\01\\00\\00\\00\" \"\\06\\0f\\01\" \"\\7e\\00\" \"\\42\\80\\80\\80\\80\\80\\80\\80\\80\\80\\7e\" \"\\0b\" ) \"integer too large\")",
    "(assert_malformed (module binary \"\\00asm\" \"\\01\\00\\00\\00\" \"\\06\\0f\\01\" \"\\7e\\00\" \"\\42\\ff\\ff\\ff\\ff\\ff\\ff\\ff\\ff\\ff\\01\" \"\\0b\" ) \"integer too large\")",
    "(assert_malformed (module binary \"\\00asm\" \"\\01\\00\\00\\00\" \"\\06\\0f\\01\" \"\\7e\\00\" \"\\42\\80\\80\\80\\80\\80\\80\\80\\80\\80\\02\" \"\\0b\" ) \"integer too large\")",
    "(assert_malformed (module binary \"\\00asm\" \"\\01\\00\\00\\00\" \"\\06\\0f\\01\" \"\\7e\\00\" \"\\42\\ff\\ff\\ff\\ff\\ff\\ff\\ff\\ff\\ff\\41\" \"\\0b\" ) \"integer too large\")",
    "(module binary \"\\00asm\" \"\\01\\00\\00\\00\" \"\\01\\04\\01\" \"\\60\\00\\00\" \"\\03\\02\\01\" \"\\00\" \"\\0a\\1b\\01\\19\" \"\\00\" \"\\00\" \"\\fc\\80\\00\" \"\\00\" \"\\fc\\81\\80\\00\" \"\\00\" \"\\fc\\86\\80\\80\\00\" \"\\00\" \"\\fc\\87\\80\\80\\80\\00\" \"\\00\" \"\\0b\" )",
    "(assert_malformed (module binary \"\\00asm\" \"\\01\\00\\00\\00\" \"\\01\\04\\01\" \"\\60\\00\\00\" \"\\03\\02\\01\" \"\\00\" \"\\0a\\0d\\01\\0b\" \"\\00\" \"\\00\" \"\\fc\\87\\80\\80\\80\\80\\00\" \"\\00\" \"\\0b\" ) \"integer representation too long\")",
    "(module binary \"\\00asm\" \"\\01\\00\\00\\00\" \"\\05\\03\\01\" \"\\00\\00\" \"\\0b\\07\\01\" \"\\80\\00\" \"\\41\\00\\0b\\00\" )",
    "(module binary \"\\00asm\" \"\\01\\00\\00\\00\" \"\\05\\03\\01\" \"\\00\\00\" \"\\0b\\08\\01\" \"\\82\\00\" \"\\00\" \"\\41\\00\\0b\\00\" )",
    "(module binary \"\\00asm\" \"\\01\\00\\00\\00\" \"\\05\\03\\01\" \"\\00\\00\" \"\\0b\\09\\01\" \"\\82\\00\" \"\\80\\00\" \"\\41\\00\\0b\\00\" )",
    "(module binary \"\\00asm\" \"\\01\\00\\00\\00\" \"\\04\\04\\01\" \"\\70\\00\\00\" \"\\09\\07\\01\" \"\\80\\00\" \"\\41\\00\\0b\\00\" )",
    "(module binary \"\\00asm\" \"\\01\\00\\00\\00\" \"\\04\\04\\01\" \"\\70\\00\\00\" \"\\09\\09\\01\" \"\\02\" \"\\80\\00\" \"\\41\\00\\0b\\00\\00\" )",
    "(module binary \"\\00asm\" \"\\01\\00\\00\\00\" \"\\04\\04\\01\" \"\\70\\00\\00\" \"\\09\\09\\01\" \"\\82\\00\" \"\\00\" \"\\41\\00\\0b\\00\\00\" )",
    "(module binary \"\\00asm\" \"\\01\\00\\00\\00\" \"\\04\\04\\01\" \"\\70\\00\\00\" \"\\09\\0a\\01\" \"\\82\\00\" \"\\80\\00\" \"\\41\\00\\0b\\00\\00\" )",
    "(assert_malformed (module binary \"\\00asm\" \"\\01\\00\\00\\00\" \"\\01\" \"\\05\" \"\\01\" \"\\e0\\7f\" \"\\00\\00\" ) \"integer representation too long\")"
  ],
  "dump": {
    "binary-leb128.0.wasm": {
      "header": "\nbinary-leb128.0.wasm:\tfile format wasm 0x1\n\nSections:\n\n   Memory start=0x0000000a end=0x0000000e (size=0x00000004) count: 1\n",
      "details": "\nbinary-leb128.0.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nMemory[1]:\n - memory[0] pages: initial=2\n",
      "disassemble": "\nbinary-leb128.0.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n"
    },
    "binary-leb128.1.wasm": {
      "header": "\nbinary-leb128.1.wasm:\tfile format wasm 0x1\n\nSections:\n\n   Memory start=0x0000000a end=0x00000011 (size=0x00000007) count: 1\n",
      "details": "\nbinary-leb128.1.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nMemory[1]:\n - memory[0] pages: initial=2\n",
      "disassemble": "\nbinary-leb128.1.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n"
    },
    "binary-leb128.2.wasm": {
      "header": "\nbinary-leb128.2.wasm:\tfile format wasm 0x1\n\nSections:\n\n   Memory start=0x0000000a end=0x00000010 (size=0x00000006) count: 1\n",
      "details": "\nbinary-leb128.2.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nMemory[1]:\n - memory[0] pages: initial=2 max=2\n",
      "disassemble": "\nbinary-leb128.2.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n"
    },
    "binary-leb128.3.wasm": {
      "header": "\nbinary-leb128.3.wasm:\tfile format wasm 0x1\n\nSections:\n\n   Memory start=0x0000000a end=0x00000013 (size=0x00000009) count: 1\n",
      "details": "\nbinary-leb128.3.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nMemory[1]:\n - memory[0] pages: initial=2 max=2\n",
      "disassemble": "\nbinary-leb128.3.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n"
    },
    "binary-leb128.4.wasm": {
      "header": "\nbinary-leb128.4.wasm:\tfile format wasm 0x1\n\nSections:\n\n   Memory start=0x0000000a end=0x0000000d (size=0x00000003) count: 1\n     Data start=0x0000000f end=0x00000016 (size=0x00000007) count: 1\n",
      "details": "\nbinary-leb128.4.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nMemory[1]:\n - memory[0] pages: initial=0\nData[1]:\n - segment[0] memory=0 size=0 - init i32=0\n",
      "disassemble": "\nbinary-leb128.4.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n"
    },
    "binary-leb128.5.wasm": {
      "header": "\nbinary-leb128.5.wasm:\tfile format wasm 0x1\n\nSections:\n\n    Table start=0x0000000a end=0x0000000e (size=0x00000004) count: 1\n     Elem start=0x00000010 end=0x00000019 (size=0x00000009) count: 1\n",
      "details": "\nbinary-leb128.5.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nTable[1]:\n - table[0] type=funcref initial=0\nElem[1]:\n - segment[0] flags=2 table=0 count=0 - init i32=0\n",
      "disassemble": "\nbinary-leb128.5.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n"
    },
    "binary-leb128.6.wasm": {
      "header": "\nbinary-leb128.6.wasm:\tfile format wasm 0x1\n\nSections:\n\n   Custom start=0x0000000b end=0x00000015 (size=0x0000000a) \"1\"\n",
      "details": "\nbinary-leb128.6.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nCustom:\n - name: \"1\"\n",
      "disassemble": "\nbinary-leb128.6.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n"
    },
    "binary-leb128.7.wasm": {
      "header": "\nbinary-leb128.7.wasm:\tfile format wasm 0x1\n\nSections:\n\n   Custom start=0x0000000a end=0x00000015 (size=0x0000000b) \"12345678\"\n",
      "details": "\nbinary-leb128.7.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nCustom:\n - name: \"12345678\"\n",
      "disassemble": "\nbinary-leb128.7.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n"
    },
    "binary-leb128.8.wasm": {
      "header": "\nbinary-leb128.8.wasm:\tfile format wasm 0x1\n\nSections:\n\n     Type start=0x0000000a end=0x00000012 (size=0x00000008) count: 1\n",
      "details": "\nbinary-leb128.8.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nType[1]:\n - type[0] (i32, i64) -> i32\n",
      "disassemble": "\nbinary-leb128.8.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n"
    },
    "binary-leb128.9.wasm": {
      "header": "\nbinary-leb128.9.wasm:\tfile format wasm 0x1\n\nSections:\n\n     Type start=0x0000000a end=0x00000012 (size=0x00000008) count: 1\n",
      "details": "\nbinary-leb128.9.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nType[1]:\n - type[0] (i32, i64) -> i32\n",
      "disassemble": "\nbinary-leb128.9.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n"
    },
    "binary-leb128.10.wasm": {
      "header": "\nbinary-leb128.10.wasm:\tfile format wasm 0x1\n\nSections:\n\n     Type start=0x0000000a end=0x0000000f (size=0x00000005) count: 1\n   Import start=0x00000011 end=0x00000028 (size=0x00000017) count: 1\n",
      "details": "\nbinary-leb128.10.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nType[1]:\n - type[0] (i32) -> nil\nImport[1]:\n - func[0] sig=0 <spectest.print_i32> <- spectest.print_i32\n",
      "disassemble": "\nbinary-leb128.10.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n"
    },
    "binary-leb128.11.wasm": {
      "header": "\nbinary-leb128.11.wasm:\tfile format wasm 0x1\n\nSections:\n\n     Type start=0x0000000a end=0x0000000f (size=0x00000005) count: 1\n   Import start=0x00000011 end=0x00000028 (size=0x00000017) count: 1\n",
      "details": "\nbinary-leb128.11.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nType[1]:\n - type[0] (i32) -> nil\nImport[1]:\n - func[0] sig=0 <spectest.print_i32> <- spectest.print_i32\n",
      "disassemble": "\nbinary-leb128.11.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n"
    },
    "binary-leb128.12.wasm": {
      "header": "\nbinary-leb128.12.wasm:\tfile format wasm 0x1\n\nSections:\n\n     Type start=0x0000000a end=0x0000000f (size=0x00000005) count: 1\n   Import start=0x00000011 end=0x00000028 (size=0x00000017) count: 1\n",
      "details": "\nbinary-leb128.12.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nType[1]:\n - type[0] (i32) -> nil\nImport[1]:\n - func[0] sig=0 <spectest.print_i32> <- spectest.print_i32\n",
      "disassemble": "\nbinary-leb128.12.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n"
    },
    "binary-leb128.13.wasm": {
      "header": "\nbinary-leb128.13.wasm:\tfile format wasm 0x1\n\nSections:\n\n     Type start=0x0000000a end=0x0000000e (size=0x00000004) count: 1\n Function start=0x00000010 end=0x00000013 (size=0x00000003) count: 1\n     Code start=0x00000015 end=0x00000019 (size=0x00000004) count: 1\n",
      "details": "\nbinary-leb128.13.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nType[1]:\n - type[0] () -> nil\nFunction[1]:\n - func[0] sig=0\nCode[1]:\n - func[0] size=2\n",
      "disassemble": "\nbinary-leb128.13.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n000017 func[0]:\n 000018: 0b                         | end\n"
    },
    "binary-leb128.14.wasm": {
      "header": "\nbinary-leb128.14.wasm:\tfile format wasm 0x1\n\nSections:\n\n     Type start=0x0000000a end=0x0000000e (size=0x00000004) count: 1\n Function start=0x00000010 end=0x00000012 (size=0x00000002) count: 1\n   Export start=0x00000014 end=0x0000001b (size=0x00000007) count: 1\n     Code start=0x0000001d end=0x00000021 (size=0x00000004) count: 1\n",
      "details": "\nbinary-leb128.14.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nType[1]:\n - type[0] () -> nil\nFunction[1]:\n - func[0] sig=0 <f1>\nExport[1]:\n - func[0] <f1> -> \"f1\"\nCode[1]:\n - func[0] size=2 <f1>\n",
      "disassemble": "\nbinary-leb128.14.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n00001f func[0] <f1>:\n 000020: 0b                         | end\n"
    },
    "binary-leb128.15.wasm": {
      "header": "\nbinary-leb128.15.wasm:\tfile format wasm 0x1\n\nSections:\n\n     Type start=0x0000000a end=0x0000000e (size=0x00000004) count: 1\n Function start=0x00000010 end=0x00000012 (size=0x00000002) count: 1\n   Export start=0x00000014 end=0x0000001b (size=0x00000007) count: 1\n     Code start=0x0000001d end=0x00000021 (size=0x00000004) count: 1\n",
      "details": "\nbinary-leb128.15.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nType[1]:\n - type[0] () -> nil\nFunction[1]:\n - func[0] sig=0 <f1>\nExport[1]:\n - func[0] <f1> -> \"f1\"\nCode[1]:\n - func[0] size=2 <f1>\n",
      "disassemble": "\nbinary-leb128.15.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n00001f func[0] <f1>:\n 000020: 0b                         | end\n"
    },
    "binary-leb128.16.wasm": {
      "header": "\nbinary-leb128.16.wasm:\tfile format wasm 0x1\n\nSections:\n\n     Type start=0x0000000a end=0x0000000e (size=0x00000004) count: 1\n Function start=0x00000010 end=0x00000012 (size=0x00000002) count: 1\n     Code start=0x00000014 end=0x00000019 (size=0x00000005) count: 1\n",
      "details": "\nbinary-leb128.16.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nType[1]:\n - type[0] () -> nil\nFunction[1]:\n - func[0] sig=0\nCode[1]:\n - func[0] size=2\n",
      "disassemble": "\nbinary-leb128.16.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n000017 func[0]:\n 000018: 0b                         | end\n"
    },
    "binary-leb128.17.wasm": {
      "header": "\nbinary-leb128.17.wasm:\tfile format wasm 0x1\n\nSections:\n\n   Global start=0x0000000a end=0x00000011 (size=0x00000007) count: 1\n",
      "details": "\nbinary-leb128.17.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nGlobal[1]:\n - global[0] i32 mutable=0 - init i32=0\n",
      "disassemble": "\nbinary-leb128.17.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n"
    },
    "binary-leb128.18.wasm": {
      "header": "\nbinary-leb128.18.wasm:\tfile format wasm 0x1\n\nSections:\n\n   Global start=0x0000000a end=0x00000011 (size=0x00000007) count: 1\n",
      "details": "\nbinary-leb128.18.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nGlobal[1]:\n - global[0] i32 mutable=0 - init i32=-1\n",
      "disassemble": "\nbinary-leb128.18.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n"
    },
    "binary-leb128.19.wasm": {
      "header": "\nbinary-leb128.19.wasm:\tfile format wasm 0x1\n\nSections:\n\n   Global start=0x0000000a end=0x00000014 (size=0x0000000a) count: 1\n",
      "details": "\nbinary-leb128.19.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nGlobal[1]:\n - global[0] i32 mutable=0 - init i32=0\n",
      "disassemble": "\nbinary-leb128.19.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n"
    },
    "binary-leb128.20.wasm": {
      "header": "\nbinary-leb128.20.wasm:\tfile format wasm 0x1\n\nSections:\n\n   Global start=0x0000000a end=0x00000014 (size=0x0000000a) count: 1\n",
      "details": "\nbinary-leb128.20.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nGlobal[1]:\n - global[0] i32 mutable=0 - init i32=-1\n",
      "disassemble": "\nbinary-leb128.20.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n"
    },
    "binary-leb128.21.wasm": {
      "header": "\nbinary-leb128.21.wasm:\tfile format wasm 0x1\n\nSections:\n\n   Global start=0x0000000a end=0x00000011 (size=0x00000007) count: 1\n",
      "details": "\nbinary-leb128.21.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nGlobal[1]:\n - global[0] i64 mutable=0 - init i64=0\n",
      "disassemble": "\nbinary-leb128.21.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n"
    },
    "binary-leb128.22.wasm": {
      "header": "\nbinary-leb128.22.wasm:\tfile format wasm 0x1\n\nSections:\n\n   Global start=0x0000000a end=0x00000011 (size=0x00000007) count: 1\n",
      "details": "\nbinary-leb128.22.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nGlobal[1]:\n - global[0] i64 mutable=0 - init i64=-1\n",
      "disassemble": "\nbinary-leb128.22.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n"
    },
    "binary-leb128.23.wasm": {
      "header": "\nbinary-leb128.23.wasm:\tfile format wasm 0x1\n\nSections:\n\n   Global start=0x0000000a end=0x00000019 (size=0x0000000f) count: 1\n",
      "details": "\nbinary-leb128.23.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nGlobal[1]:\n - global[0] i64 mutable=0 - init i64=0\n",
      "disassemble": "\nbinary-leb128.23.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n"
    },
    "binary-leb128.24.wasm": {
      "header": "\nbinary-leb128.24.wasm:\tfile format wasm 0x1\n\nSections:\n\n   Global start=0x0000000a end=0x00000019 (size=0x0000000f) count: 1\n",
      "details": "\nbinary-leb128.24.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nGlobal[1]:\n - global[0] i64 mutable=0 - init i64=-1\n",
      "disassemble": "\nbinary-leb128.24.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n"
    },
    "binary-leb128.81.wasm": {
      "header": "\nbinary-leb128.81.wasm:\tfile format wasm 0x1\n\nSections:\n\n     Type start=0x0000000a end=0x0000000e (size=0x00000004) count: 1\n Function start=0x00000010 end=0x00000012 (size=0x00000002) count: 1\n     Code start=0x00000014 end=0x0000002f (size=0x0000001b) count: 1\n",
      "details": "\nbinary-leb128.81.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nType[1]:\n - type[0] () -> nil\nFunction[1]:\n - func[0] sig=0\nCode[1]:\n - func[0] size=25\n",
      "disassemble": "\nbinary-leb128.81.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n000016 func[0]:\n 000017: 00                         | unreachable\n 000019: 80 00                      | i32.trunc_sat_f32_s\n 00001b: 00                         | unreachable\n 00001e: 80 00                      | i32.trunc_sat_f32_u\n 000020: 00                         | unreachable\n 000024: 80 00                      | i64.trunc_sat_f64_s\n 000026: 00                         | unreachable\n 00002b: 80 00                      | i64.trunc_sat_f64_u\n 00002d: 00                         | unreachable\n 00002e: 0b                         | end\n"
    },
    "binary-leb128.83.wasm": {
      "header": "\nbinary-leb128.83.wasm:\tfile format wasm 0x1\n\nSections:\n\n   Memory start=0x0000000a end=0x0000000d (size=0x00000003) count: 1\n     Data start=0x0000000f end=0x00000016 (size=0x00000007) count: 1\n",
      "details": "\nbinary-leb128.83.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nMemory[1]:\n - memory[0] pages: initial=0\nData[1]:\n - segment[0] memory=0 size=0 - init i32=0\n",
      "disassemble": "\nbinary-leb128.83.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n"
    },
    "binary-leb128.84.wasm": {
      "header": "\nbinary-leb128.84.wasm:\tfile format wasm 0x1\n\nSections:\n\n   Memory start=0x0000000a end=0x0000000d (size=0x00000003) count: 1\n     Data start=0x0000000f end=0x00000017 (size=0x00000008) count: 1\n",
      "details": "\nbinary-leb128.84.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nMemory[1]:\n - memory[0] pages: initial=0\nData[1]:\n - segment[0] memory=0 size=0 - init i32=0\n",
      "disassemble": "\nbinary-leb128.84.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n"
    },
    "binary-leb128.85.wasm": {
      "header": "\nbinary-leb128.85.wasm:\tfile format wasm 0x1\n\nSections:\n\n   Memory start=0x0000000a end=0x0000000d (size=0x00000003) count: 1\n     Data start=0x0000000f end=0x00000018 (size=0x00000009) count: 1\n",
      "details": "\nbinary-leb128.85.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nMemory[1]:\n - memory[0] pages: initial=0\nData[1]:\n - segment[0] memory=0 size=0 - init i32=0\n",
      "disassemble": "\nbinary-leb128.85.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n"
    },
    "binary-leb128.86.wasm": {
      "header": "\nbinary-leb128.86.wasm:\tfile format wasm 0x1\n\nSections:\n\n    Table start=0x0000000a end=0x0000000e (size=0x00000004) count: 1\n     Elem start=0x00000010 end=0x00000017 (size=0x00000007) count: 1\n",
      "details": "\nbinary-leb128.86.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nTable[1]:\n - table[0] type=funcref initial=0\nElem[1]:\n - segment[0] flags=0 table=0 count=0 - init i32=0\n",
      "disassemble": "\nbinary-leb128.86.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n"
    },
    "binary-leb128.87.wasm": {
      "header": "\nbinary-leb128.87.wasm:\tfile format wasm 0x1\n\nSections:\n\n    Table start=0x0000000a end=0x0000000e (size=0x00000004) count: 1\n     Elem start=0x00000010 end=0x00000019 (size=0x00000009) count: 1\n",
      "details": "\nbinary-leb128.87.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nTable[1]:\n - table[0] type=funcref initial=0\nElem[1]:\n - segment[0] flags=2 table=0 count=0 - init i32=0\n",
      "disassemble": "\nbinary-leb128.87.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n"
    },
    "binary-leb128.88.wasm": {
      "header": "\nbinary-leb128.88.wasm:\tfile format wasm 0x1\n\nSections:\n\n    Table start=0x0000000a end=0x0000000e (size=0x00000004) count: 1\n     Elem start=0x00000010 end=0x00000019 (size=0x00000009) count: 1\n",
      "details": "\nbinary-leb128.88.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nTable[1]:\n - table[0] type=funcref initial=0\nElem[1]:\n - segment[0] flags=2 table=0 count=0 - init i32=0\n",
      "disassemble": "\nbinary-leb128.88.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n"
    },
    "binary-leb128.89.wasm": {
      "header": "\nbinary-leb128.89.wasm:\tfile format wasm 0x1\n\nSections:\n\n    Table start=0x0000000a end=0x0000000e (size=0x00000004) count: 1\n     Elem start=0x00000010 end=0x0000001a (size=0x0000000a) count: 1\n",
      "details": "\nbinary-leb128.89.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nTable[1]:\n - table[0] type=funcref initial=0\nElem[1]:\n - segment[0] flags=2 table=0 count=0 - init i32=0\n",
      "disassemble": "\nbinary-leb128.89.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n"
    }
  }
}
