{
  "bin": {
    "unreached-invalid.0.wasm": "AGFzbQEAAAABBAFgAAADAgEACggBBgAAIAAaCw==",
    "unreached-invalid.1.wasm": "AGFzbQEAAAABBAFgAAADAgEACggBBgAAIwAaCw==",
    "unreached-invalid.10.wasm": "AGFzbQEAAAABBAFgAAADAgEACgYBBAAAGws=",
    "unreached-invalid.100.wasm": "AGFzbQEAAAABBQFgAAF/AwIBAAoPAQ0AAn5CAAJAQQAPCwsL",
    "unreached-invalid.101.wasm": "AGFzbQEAAAABBQFgAAF/AwIBAAoTAREAAkBBAwJAQgFBAA8LC0EJCw==",
    "unreached-invalid.102.wasm": "AGFzbQEAAAABBAFgAAADAgEACg0BCwADQEEDAkAACwsL",
    "unreached-invalid.103.wasm": "AGFzbQEAAAABBQFgAAF/AwIBAAoLAQkAA0ACQAALCws=",
    "unreached-invalid.104.wasm": "AGFzbQEAAAABBQFgAAF/AwIBAAoNAQsAA35CAAJAAAsLCw==",
    "unreached-invalid.105.wasm": "AGFzbQEAAAABBQFgAAF/AwIBAAoKAQgAA0ABDAALCw==",
    "unreached-invalid.106.wasm": "AGFzbQEAAAABBQFgAAF/AwIBAAoLAQkAA0BBAAwACws=",
    "unreached-invalid.107.wasm": "AGFzbQEAAAABBAFgAAADAgEACgkBBwEBfwAiAAs=",
    "unreached-invalid.108.wasm": "AGFzbQEAAAABBQFgAAF/AwIBAAoRAQ8AAn8CQABBAA0BC0EACws=",
    "unreached-invalid.109.wasm": "AGFzbQEAAAABBQFgAAF+AwIBAAoIAQYAAA0ArQs=",
    "unreached-invalid.11.wasm": "AGFzbQEAAAABBAFgAAADAgEACggBBgAAQQAbCw==",
    "unreached-invalid.110.wasm": "AGFzbQEAAAABBAFgAAADAgEACg0BCwAAQQFCAUEBGxoL",
    "unreached-invalid.111.wasm": "AGFzbQEAAAABBAFgAAADAgEACg0BCwAAQgFBAUEBGxoL",
    "unreached-invalid.112.wasm": "AGFzbQEAAAABBAFgAAADAgEACg0BCwAAQQFBAUIBGxoL",
    "unreached-invalid.113.wasm": "AGFzbQEAAAABBAFgAAADAgEACgsBCQAAQQFCARsaCw==",
    "unreached-invalid.114.wasm": "AGFzbQEAAAABBAFgAAADAgEACgkBBwAAQgEbGgs=",
    "unreached-invalid.115.wasm": "AGFzbQEAAAABBQFgAAF/AwIBAAoKAQgAAEIBQQEbCw==",
    "unreached-invalid.116.wasm": "AGFzbQEAAAABBAFgAAADAgEACgYBBAAAGws=",
    "unreached-invalid.117.wasm": "AGFzbQEAAAABBgFgAX8BbwMCAQAKFgEUAAJvAn/QbyAADgIAAQALGtBvCws=",
    "unreached-invalid.12.wasm": "AGFzbQEAAAABBAFgAAADAgEACgoBCAAAQQBBABsL",
    "unreached-invalid.13.wasm": "AGFzbQEAAAABBAFgAAADAgEACg8BDQACQAwAAkABRRoLCws=",
    "unreached-invalid.14.wasm": "AGFzbQEAAAABBAFgAAADAgEAChABDgACQAwAQwAAgD9FGgsL",
    "unreached-invalid.15.wasm": "AGFzbQEAAAABBAFgAAADAgEAChABDgACQAwAAkBBAVsaCwsL",
    "unreached-invalid.16.wasm": "AGFzbQEAAAABBAFgAAADAgEAChIBEAACQAwAQQFDAAAAAFsaCws=",
    "unreached-invalid.17.wasm": "AGFzbQEAAAABBAFgAAADAgEACgsBCQACQAwAQQELCw==",
    "unreached-invalid.18.wasm": "AGFzbQEAAAABBQFgAAF/AwIBAAoQAQ4AAn9BAQwAQwAAAAALCw==",
    "unreached-invalid.19.wasm": "AGFzbQEAAAABBAFgAAADAgEACg4BDAACQANADAFBAQsLCw==",
    "unreached-invalid.2.wasm": "AGFzbQEAAAABBAFgAAADAgEACgcBBQAAEAEL",
    "unreached-invalid.20.wasm": "AGFzbQEAAAABBQFgAAF/AwIBAAoQAQ4AA39BAQwBQwAAAAALCw==",
    "unreached-invalid.21.wasm": "AGFzbQEAAAABBAFgAAADAgEACggBBgAMAEEBCw==",
    "unreached-invalid.22.wasm": "AGFzbQEAAAABBQFgAAF/AwIBAAoNAQsAQQEMAEMAAAAACw==",
    "unreached-invalid.23.wasm": "AGFzbQEAAAABBAFgAAADAgEACgsBCQAPAkABRRoLCw==",
    "unreached-invalid.24.wasm": "AGFzbQEAAAABBAFgAAADAgEACgwBCgAPQwAAgD9FGgs=",
    "unreached-invalid.25.wasm": "AGFzbQEAAAABBAFgAAADAgEACgwBCgAPAkBBAVsaCws=",
    "unreached-invalid.26.wasm": "AGFzbQEAAAABBAFgAAADAgEACg4BDAAPQQFDAAAAAFsaCw==",
    "unreached-invalid.27.wasm": "AGFzbQEAAAABBAFgAAADAgEACgoBCAACQA9BAQsL",
    "unreached-invalid.28.wasm": "AGFzbQEAAAABBQFgAAF/AwIBAAoRAQ8AAn9BAUEAD0MAAAAACws=",
    "unreached-invalid.29.wasm": "AGFzbQEAAAABBAFgAAADAgEACg0BCwACQANAD0EBCwsL",
    "unreached-invalid.3.wasm": "AGFzbQEAAAABBAFgAAADAgEACgcBBQAADAEL",
    "unreached-invalid.30.wasm": "AGFzbQEAAAABBQFgAAF/AwIBAAoPAQ0AA39BAQ9DAAAAAAsL",
    "unreached-invalid.31.wasm": "AGFzbQEAAAABBAFgAAADAgEACgcBBQAPQQEL",
    "unreached-invalid.32.wasm": "AGFzbQEAAAABBQFgAAF/AwIBAAoMAQoAQQEPQwAAAAAL",
    "unreached-invalid.33.wasm": "AGFzbQEAAAABBAFgAAADAgEACgsBCQAAAkABRRoLCw==",
    "unreached-invalid.34.wasm": "AGFzbQEAAAABBAFgAAADAgEACgsBCQAAA0ABRRoLCw==",
    "unreached-invalid.35.wasm": "AGFzbQEAAAABBAFgAAADAgEACgoBCAAAA38BRQsL",
    "unreached-invalid.36.wasm": "AGFzbQEAAAABBAFgAAADAgEACgwBCgAAQwAAgD9FGgs=",
    "unreached-invalid.37.wasm": "AGFzbQEAAAABBAFgAAADAgEACgwBCgAAAkBBAVsaCws=",
    "unreached-invalid.38.wasm": "AGFzbQEAAAABBAFgAAADAgEACg4BDAAAQQFDAAAAAFsaCw==",
    "unreached-invalid.39.wasm": "AGFzbQEAAAABBAFgAAADAgEACgoBCAACQABBAQsL",
    "unreached-invalid.4.wasm": "AGFzbQEAAAABBAFgAAADAgEACgkBBwAAQQBQGgs=",
    "unreached-invalid.40.wasm": "AGFzbQEAAAABBQFgAAF/AwIBAAoPAQ0AAn9BAQBDAAAAAAsL",
    "unreached-invalid.41.wasm": "AGFzbQEAAAABBAFgAAADAgEACg0BCwACQANAAEEBCwsL",
    "unreached-invalid.42.wasm": "AGFzbQEAAAABBQFgAAF/AwIBAAoNAQsAA38AQwAAAAALCw==",
    "unreached-invalid.43.wasm": "AGFzbQEAAAABBAFgAAADAgEACgcBBQAAQQEL",
    "unreached-invalid.44.wasm": "AGFzbQEAAAABBQFgAAF/AwIBAAoKAQgAAEMAAAAACw==",
    "unreached-invalid.45.wasm": "AGFzbQEAAAABBAFgAAADAgEACg0BCwAAQQAEQAFFGgsL",
    "unreached-invalid.46.wasm": "AGFzbQEAAAABBAFgAAADAgEACg8BDQAAQQAEQAEFAUUaCws=",
    "unreached-invalid.47.wasm": "AGFzbQEAAAABBAFgAAADAgEACg4BDABBAARAAAUBRRoLCw==",
    "unreached-invalid.48.wasm": "AGFzbQEAAAABBAFgAAADAgEACg4BDAACQAALAkABRRoLCw==",
    "unreached-invalid.49.wasm": "AGFzbQEAAAABBAFgAAADAgEACg8BDQACQAALQwAAgD9FGgs=",
    "unreached-invalid.5.wasm": "AGFzbQEAAAABBQFgAAF/AwIBAAoKAQgAAEIAQQAbCw==",
    "unreached-invalid.50.wasm": "AGFzbQEAAAABBAFgAAADAgEACg8BDQACQAALAkBBAVsaCws=",
    "unreached-invalid.51.wasm": "AGFzbQEAAAABBAFgAAADAgEAChEBDwACQAALQQFDAAAAAFsaCw==",
    "unreached-invalid.52.wasm": "AGFzbQEAAAABBAFgAAADAgEACg0BCwACQAJAAAtBAQsL",
    "unreached-invalid.53.wasm": "AGFzbQEAAAABBQFgAAF/AwIBAAoSARAAAn9BAQJAAAtDAAAAAAsL",
    "unreached-invalid.54.wasm": "AGFzbQEAAAABBAFgAAADAgEAChABDgACQANAAkAAC0EBCwsL",
    "unreached-invalid.55.wasm": "AGFzbQEAAAABBQFgAAF/AwIBAAoQAQ4AA38CQAALQwAAAAALCw==",
    "unreached-invalid.56.wasm": "AGFzbQEAAAABBAFgAAADAgEACgoBCAACQAALQQEL",
    "unreached-invalid.57.wasm": "AGFzbQEAAAABBQFgAAF/AwIBAAoNAQsAAkAAC0MAAAAACw==",
    "unreached-invalid.58.wasm": "AGFzbQEAAAABBAFgAAADAgEACg8BDQADQAwACwJAAUUaCws=",
    "unreached-invalid.59.wasm": "AGFzbQEAAAABBAFgAAADAgEAChABDgADQAwAC0MAAIA/RRoL",
    "unreached-invalid.6.wasm": "AGFzbQEAAAABBQFgAAF/AwIBAAoPAQ0AAEIAQQAbQQBBABsL",
    "unreached-invalid.60.wasm": "AGFzbQEAAAABBAFgAAADAgEAChABDgADQAwACwJAQQFbGgsL",
    "unreached-invalid.61.wasm": "AGFzbQEAAAABBAFgAAADAgEAChIBEAADQAwAC0EBQwAAAABbGgs=",
    "unreached-invalid.62.wasm": "AGFzbQEAAAABBAFgAAADAgEACg4BDAACQANADAALQQELCw==",
    "unreached-invalid.63.wasm": "AGFzbQEAAAABBQFgAAF/AwIBAAoTAREAAn9BAQNADAALQwAAAAALCw==",
    "unreached-invalid.64.wasm": "AGFzbQEAAAABBAFgAAADAgEAChEBDwACQANAA0AMAAtBAQsLCw==",
    "unreached-invalid.65.wasm": "AGFzbQEAAAABBQFgAAF/AwIBAAoRAQ8AA38DQAwAC0MAAAAACws=",
    "unreached-invalid.66.wasm": "AGFzbQEAAAABBAFgAAADAgEACgsBCQADQAwAC0EBCw==",
    "unreached-invalid.67.wasm": "AGFzbQEAAAABBQFgAAF/AwIBAAoOAQwAA0AMAAtDAAAAAAs=",
    "unreached-invalid.68.wasm": "AGFzbQEAAAABBAFgAAADAgEACgwBCgBBAARAAUUaCws=",
    "unreached-invalid.69.wasm": "AGFzbQEAAAABBAFgAAADAgEAChABDgBBAARAQwAAgD9FGgsL",
    "unreached-invalid.7.wasm": "AGFzbQEAAAABBAFgAAADAgEACgcBBQAAQQAL",
    "unreached-invalid.70.wasm": "AGFzbQEAAAABBAFgAAADAgEACg0BCwBBAARAQQFbGgsL",
    "unreached-invalid.71.wasm": "AGFzbQEAAAABBAFgAAADAgEAChIBEABBAARAQQFDAAAAAFsaCws=",
    "unreached-invalid.72.wasm": "AGFzbQEAAAABBAFgAAADAgEACgsBCQBBAARAQQELCw==",
    "unreached-invalid.73.wasm": "AGFzbQEAAAABBQFgAAF/AwIBAAoOAQwAQQAEf0MAAAAACws=",
    "unreached-invalid.74.wasm": "AGFzbQEAAAABBAFgAAADAgEACg4BDABBAARAAkBBAQsLCw==",
    "unreached-invalid.75.wasm": "AGFzbQEAAAABBQFgAAF/AwIBAAoRAQ8AQQAEfwJ/QwAAAAALCws=",
    "unreached-invalid.76.wasm": "AGFzbQEAAAABBAFgAAADAgEACg4BDABBAARAA0BBAQsLCw==",
    "unreached-invalid.77.wasm": "AGFzbQEAAAABBQFgAAF/AwIBAAoRAQ8AQQAEfwN/QwAAAAALCws=",
    "unreached-invalid.78.wasm": "AGFzbQEAAAABBQFgAAF/AwIBAAoRAQ8AQQEPRAAAAAAAAPA/Dws=",
    "unreached-invalid.79.wasm": "AGFzbQEAAAABBQFgAAF/AwIBAAoWARQAAn9BAQwARAAAAAAAAPA/DAALCw==",
    "unreached-invalid.8.wasm": "AGFzbQEAAAABBAFgAAADAgEACgYBBAAARQs=",
    "unreached-invalid.80.wasm": "AGFzbQEAAAABBAFgAAADAgEACg8BDQACQABDAAAAAA0ACws=",
    "unreached-invalid.81.wasm": "AGFzbQEAAAABBQFgAAF/AwIBAAoRAQ8AAn8CQABBAEEADQELCws=",
    "unreached-invalid.82.wasm": "AGFzbQEAAAABBQFgAAF/AwIBAAoUARIAAn8CfQBBAEEADQELGkEACws=",
    "unreached-invalid.83.wasm": "AGFzbQEAAAABBQFgAAF/AwIBAAoQAQ4AAn8AQQBBAA0AQQALCw==",
    "unreached-invalid.84.wasm": "AGFzbQEAAAABBAFgAAADAgEAChABDgACQABDAACAPw4AAAsL",
    "unreached-invalid.85.wasm": "AGFzbQEAAAABBQFgAAF/AwIBAAoSARAAAn8AQwAAAABBAQ4AAAsL",
    "unreached-invalid.86.wasm": "AGFzbQEAAAABBAFgAAADAgEAChMBEQACQAJ9AEEBDgIAAQALGgsL",
    "unreached-invalid.87.wasm": "AGFzbQEAAAABBAFgAAADAgEACg0BCwACQEEDAkAACwsL",
    "unreached-invalid.88.wasm": "AGFzbQEAAAABBQFgAAF/AwIBAAoLAQkAAkACQAALCws=",
    "unreached-invalid.89.wasm": "AGFzbQEAAAABBQFgAAF/AwIBAAoNAQsAAn5CAAJAAAsLCw==",
    "unreached-invalid.9.wasm": "AGFzbQEAAAABBAFgAAADAgEACggBBgAAQQBqCw==",
    "unreached-invalid.90.wasm": "AGFzbQEAAAABBQFgAAF/AwIBAAoRAQ8AAkBBAwJAQgEACwtBCQs=",
    "unreached-invalid.91.wasm": "AGFzbQEAAAABBAFgAAADAgEACg4BDAACQEEDAkAMAQsLCw==",
    "unreached-invalid.92.wasm": "AGFzbQEAAAABBQFgAAF/AwIBAAoOAQwAAn8CQEEADAELCws=",
    "unreached-invalid.93.wasm": "AGFzbQEAAAABBQFgAAF/AwIBAAoQAQ4AAn9CAAJAQQAMAQsLCw==",
    "unreached-invalid.94.wasm": "AGFzbQEAAAABBAFgAAADAgEAChEBDwACQAJAQQMCQAwCCwsLCw==",
    "unreached-invalid.95.wasm": "AGFzbQEAAAABBQFgAAF/AwIBAAoRAQ8AAn8CQAJAQQAMAgsLCws=",
    "unreached-invalid.96.wasm": "AGFzbQEAAAABBQFgAAF/AwIBAAoTAREAAn8CfkIAAkBBAAwCCwsLCw==",
    "unreached-invalid.97.wasm": "AGFzbQEAAAABBQFgAAF/AwIBAAoSARAAAkBBAwJAQgEMAQsLQQkL",
    "unreached-invalid.98.wasm": "AGFzbQEAAAABBAFgAAADAgEACg0BCwACQEEDAkAPCwsL",
    "unreached-invalid.99.wasm": "AGFzbQEAAAABBQFgAAF/AwIBAAoNAQsAAkACQEEADwsLCw=="
  },
  "spec": {"source_filename": "/workspace/wasm-spec/test/core/unreached-invalid.wast",
 "commands": [
  {"type": "assert_invalid", "line": 4, "filename": "unreached-invalid.0.wasm", "text": "unknown local", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 8, "filename": "unreached-invalid.1.wasm", "text": "unknown global", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 12, "filename": "unreached-invalid.2.wasm", "text": "unknown function", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 16, "filename": "unreached-invalid.3.wasm", "text": "unknown label", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 21, "filename": "unreached-invalid.4.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 27, "filename": "unreached-invalid.5.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 33, "filename": "unreached-invalid.6.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 42, "filename": "unreached-invalid.7.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 46, "filename": "unreached-invalid.8.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 50, "filename": "unreached-invalid.9.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 56, "filename": "unreached-invalid.10.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 60, "filename": "unreached-invalid.11.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 64, "filename": "unreached-invalid.12.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 71, "filename": "unreached-invalid.13.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 77, "filename": "unreached-invalid.14.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 83, "filename": "unreached-invalid.15.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 89, "filename": "unreached-invalid.16.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 95, "filename": "unreached-invalid.17.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 101, "filename": "unreached-invalid.18.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 107, "filename": "unreached-invalid.19.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 113, "filename": "unreached-invalid.20.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 119, "filename": "unreached-invalid.21.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 125, "filename": "unreached-invalid.22.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 132, "filename": "unreached-invalid.23.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 138, "filename": "unreached-invalid.24.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 144, "filename": "unreached-invalid.25.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 150, "filename": "unreached-invalid.26.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 156, "filename": "unreached-invalid.27.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 162, "filename": "unreached-invalid.28.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 168, "filename": "unreached-invalid.29.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 174, "filename": "unreached-invalid.30.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 180, "filename": "unreached-invalid.31.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 186, "filename": "unreached-invalid.32.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 193, "filename": "unreached-invalid.33.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 199, "filename": "unreached-invalid.34.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 205, "filename": "unreached-invalid.35.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 211, "filename": "unreached-invalid.36.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 217, "filename": "unreached-invalid.37.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 223, "filename": "unreached-invalid.38.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 229, "filename": "unreached-invalid.39.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 235, "filename": "unreached-invalid.40.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 241, "filename": "unreached-invalid.41.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 247, "filename": "unreached-invalid.42.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 253, "filename": "unreached-invalid.43.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 259, "filename": "unreached-invalid.44.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 265, "filename": "unreached-invalid.45.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 271, "filename": "unreached-invalid.46.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 277, "filename": "unreached-invalid.47.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 284, "filename": "unreached-invalid.48.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 290, "filename": "unreached-invalid.49.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 296, "filename": "unreached-invalid.50.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 302, "filename": "unreached-invalid.51.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 308, "filename": "unreached-invalid.52.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 314, "filename": "unreached-invalid.53.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 321, "filename": "unreached-invalid.54.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 327, "filename": "unreached-invalid.55.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 334, "filename": "unreached-invalid.56.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 340, "filename": "unreached-invalid.57.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 348, "filename": "unreached-invalid.58.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 354, "filename": "unreached-invalid.59.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 360, "filename": "unreached-invalid.60.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 366, "filename": "unreached-invalid.61.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 372, "filename": "unreached-invalid.62.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 378, "filename": "unreached-invalid.63.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 384, "filename": "unreached-invalid.64.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 390, "filename": "unreached-invalid.65.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 396, "filename": "unreached-invalid.66.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 402, "filename": "unreached-invalid.67.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 409, "filename": "unreached-invalid.68.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 415, "filename": "unreached-invalid.69.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 421, "filename": "unreached-invalid.70.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 427, "filename": "unreached-invalid.71.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 433, "filename": "unreached-invalid.72.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 439, "filename": "unreached-invalid.73.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 445, "filename": "unreached-invalid.74.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 451, "filename": "unreached-invalid.75.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 457, "filename": "unreached-invalid.76.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 463, "filename": "unreached-invalid.77.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 470, "filename": "unreached-invalid.78.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 477, "filename": "unreached-invalid.79.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 484, "filename": "unreached-invalid.80.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 490, "filename": "unreached-invalid.81.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 498, "filename": "unreached-invalid.82.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 507, "filename": "unreached-invalid.83.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 515, "filename": "unreached-invalid.84.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 521, "filename": "unreached-invalid.85.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 527, "filename": "unreached-invalid.86.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 540, "filename": "unreached-invalid.87.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 546, "filename": "unreached-invalid.88.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 552, "filename": "unreached-invalid.89.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 558, "filename": "unreached-invalid.90.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 565, "filename": "unreached-invalid.91.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 571, "filename": "unreached-invalid.92.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 577, "filename": "unreached-invalid.93.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 584, "filename": "unreached-invalid.94.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 590, "filename": "unreached-invalid.95.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 596, "filename": "unreached-invalid.96.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 604, "filename": "unreached-invalid.97.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 611, "filename": "unreached-invalid.98.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 617, "filename": "unreached-invalid.99.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 623, "filename": "unreached-invalid.100.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 629, "filename": "unreached-invalid.101.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 637, "filename": "unreached-invalid.102.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 643, "filename": "unreached-invalid.103.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 649, "filename": "unreached-invalid.104.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 656, "filename": "unreached-invalid.105.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 662, "filename": "unreached-invalid.106.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 669, "filename": "unreached-invalid.107.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 676, "filename": "unreached-invalid.108.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 687, "filename": "unreached-invalid.109.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 699, "filename": "unreached-invalid.110.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 704, "filename": "unreached-invalid.111.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 710, "filename": "unreached-invalid.112.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 715, "filename": "unreached-invalid.113.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 720, "filename": "unreached-invalid.114.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 726, "filename": "unreached-invalid.115.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 733, "filename": "unreached-invalid.116.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 738, "filename": "unreached-invalid.117.wasm", "text": "type mismatch", "module_type": "binary"}]},
  "code": [
    "(assert_invalid (module (func $local-index (unreachable) (drop (local.get 0)))) \"unknown local\")",
    "(assert_invalid (module (func $global-index (unreachable) (drop (global.get 0)))) \"unknown global\")",
    "(assert_invalid (module (func $func-index (unreachable) (call 1))) \"unknown function\")",
    "(assert_invalid (module (func $label-index (unreachable) (br 1))) \"unknown label\")",
    "(assert_invalid (module (func $type-num-vs-num (unreachable) (drop (i64.eqz (i32.const 0)))) ) \"type mismatch\")",
    "(assert_invalid (module (func $type-poly-num-vs-num (result i32) (unreachable) (i64.const 0) (i32.const 0) (select) )) \"type mismatch\")",
    "(assert_invalid (module (func $type-poly-transitive-num-vs-num (result i32) (unreachable) (i64.const 0) (i32.const 0) (select) (i32.const 0) (i32.const 0) (select) )) \"type mismatch\")",
    "(assert_invalid (module (func $type-unconsumed-const (unreachable) (i32.const 0))) \"type mismatch\")",
    "(assert_invalid (module (func $type-unconsumed-result (unreachable) (i32.eqz))) \"type mismatch\")",
    "(assert_invalid (module (func $type-unconsumed-result2 (unreachable) (i32.const 0) (i32.add) )) \"type mismatch\")",
    "(assert_invalid (module (func $type-unconsumed-poly0 (unreachable) (select))) \"type mismatch\")",
    "(assert_invalid (module (func $type-unconsumed-poly1 (unreachable) (i32.const 0) (select))) \"type mismatch\")",
    "(assert_invalid (module (func $type-unconsumed-poly2 (unreachable) (i32.const 0) (i32.const 0) (select) )) \"type mismatch\")",
    "(assert_invalid (module (func $type-unary-num-vs-void-after-break (block (br 0) (block (drop (i32.eqz (nop))))) )) \"type mismatch\")",
    "(assert_invalid (module (func $type-unary-num-vs-num-after-break (block (br 0) (drop (i32.eqz (f32.const 1)))) )) \"type mismatch\")",
    "(assert_invalid (module (func $type-binary-num-vs-void-after-break (block (br 0) (block (drop (f32.eq (i32.const 1))))) )) \"type mismatch\")",
    "(assert_invalid (module (func $type-binary-num-vs-num-after-break (block (br 0) (drop (f32.eq (i32.const 1) (f32.const 0)))) )) \"type mismatch\")",
    "(assert_invalid (module (func $type-block-value-num-vs-void-after-break (block (br 0) (i32.const 1)) )) \"type mismatch\")",
    "(assert_invalid (module (func $type-block-value-num-vs-num-after-break (result i32) (block (result i32) (i32.const 1) (br 0) (f32.const 0)) )) \"type mismatch\")",
    "(assert_invalid (module (func $type-loop-value-num-vs-void-after-break (block (loop (br 1) (i32.const 1))) )) \"type mismatch\")",
    "(assert_invalid (module (func $type-loop-value-num-vs-num-after-break (result i32) (loop (result i32) (br 1 (i32.const 1)) (f32.const 0)) )) \"type mismatch\")",
    "(assert_invalid (module (func $type-func-value-num-vs-void-after-break (br 0) (i32.const 1) )) \"type mismatch\")",
    "(assert_invalid (module (func $type-func-value-num-vs-num-after-break (result i32) (br 0 (i32.const 1)) (f32.const 0) )) \"type mismatch\")",
    "(assert_invalid (module (func $type-unary-num-vs-void-after-return (return) (block (drop (i32.eqz (nop)))) )) \"type mismatch\")",
    "(assert_invalid (module (func $type-unary-num-vs-num-after-return (return) (drop (i32.eqz (f32.const 1))) )) \"type mismatch\")",
    "(assert_invalid (module (func $type-binary-num-vs-void-after-return (return) (block (drop (f32.eq (i32.const 1)))) )) \"type mismatch\")",
    "(assert_invalid (module (func $type-binary-num-vs-num-after-return (return) (drop (f32.eq (i32.const 1) (f32.const 0))) )) \"type mismatch\")",
    "(assert_invalid (module (func $type-block-value-num-vs-void-after-return (block (return) (i32.const 1)) )) \"type mismatch\")",
    "(assert_invalid (module (func $type-block-value-num-vs-num-after-return (result i32) (block (result i32) (i32.const 1) (return (i32.const 0)) (f32.const 0)) )) \"type mismatch\")",
    "(assert_invalid (module (func $type-loop-value-num-vs-void-after-return (block (loop (return) (i32.const 1))) )) \"type mismatch\")",
    "(assert_invalid (module (func $type-loop-value-num-vs-num-after-return (result i32) (loop (result i32) (return (i32.const 1)) (f32.const 0)) )) \"type mismatch\")",
    "(assert_invalid (module (func $type-func-value-num-vs-void-after-return (return) (i32.const 1) )) \"type mismatch\")",
    "(assert_invalid (module (func $type-func-value-num-vs-num-after-return (result i32) (return (i32.const 1)) (f32.const 0) )) \"type mismatch\")",
    "(assert_invalid (module (func $type-unary-num-vs-void-after-unreachable (unreachable) (block (drop (i32.eqz (nop)))) )) \"type mismatch\")",
    "(assert_invalid (module (func $type-unary-num-vs-void-in-loop-after-unreachable (unreachable) (loop (drop (i32.eqz (nop)))) )) \"type mismatch\")",
    "(assert_invalid (module (func $type-unary-num-vs-void-in-i32-loop-after-unreachable (unreachable) (loop (result i32) (i32.eqz (nop))) )) \"type mismatch\")",
    "(assert_invalid (module (func $type-unary-num-vs-num-after-unreachable (unreachable) (drop (i32.eqz (f32.const 1))) )) \"type mismatch\")",
    "(assert_invalid (module (func $type-binary-num-vs-void-after-unreachable (unreachable) (block (drop (f32.eq (i32.const 1)))) )) \"type mismatch\")",
    "(assert_invalid (module (func $type-binary-num-vs-num-after-unreachable (unreachable) (drop (f32.eq (i32.const 1) (f32.const 0))) )) \"type mismatch\")",
    "(assert_invalid (module (func $type-block-value-num-vs-void-after-unreachable (block (unreachable) (i32.const 1)) )) \"type mismatch\")",
    "(assert_invalid (module (func $type-block-value-num-vs-num-after-unreachable (result i32) (block (result i32) (i32.const 1) (unreachable) (f32.const 0)) )) \"type mismatch\")",
    "(assert_invalid (module (func $type-loop-value-num-vs-void-after-unreachable (block (loop (unreachable) (i32.const 1))) )) \"type mismatch\")",
    "(assert_invalid (module (func $type-loop-value-num-vs-num-after-unreachable (result i32) (loop (result i32) (unreachable) (f32.const 0)) )) \"type mismatch\")",
    "(assert_invalid (module (func $type-func-value-num-vs-void-after-unreachable (unreachable) (i32.const 1) )) \"type mismatch\")",
    "(assert_invalid (module (func $type-func-value-num-vs-num-after-unreachable (result i32) (unreachable) (f32.const 0) )) \"type mismatch\")",
    "(assert_invalid (module (func $type-unary-num-vs-void-in-if-after-unreachable (unreachable) (if (i32.const 0) (then (drop (i32.eqz (nop))))) )) \"type mismatch\")",
    "(assert_invalid (module (func $type-unary-num-vs-void-in-else-after-unreachable (unreachable) (if (i32.const 0) (then (nop)) (else (drop (i32.eqz (nop))))) )) \"type mismatch\")",
    "(assert_invalid (module (func $type-unary-num-vs-void-in-else-after-unreachable-if (if (i32.const 0) (then (unreachable)) (else (drop (i32.eqz (nop))))) )) \"type mismatch\")",
    "(assert_invalid (module (func $type-unary-num-vs-void-after-nested-unreachable (block (unreachable)) (block (drop (i32.eqz (nop)))) )) \"type mismatch\")",
    "(assert_invalid (module (func $type-unary-num-vs-num-after-nested-unreachable (block (unreachable)) (drop (i32.eqz (f32.const 1))) )) \"type mismatch\")",
    "(assert_invalid (module (func $type-binary-num-vs-void-after-nested-unreachable (block (unreachable)) (block (drop (f32.eq (i32.const 1)))) )) \"type mismatch\")",
    "(assert_invalid (module (func $type-binary-num-vs-num-after-nested-unreachable (block (unreachable)) (drop (f32.eq (i32.const 1) (f32.const 0))) )) \"type mismatch\")",
    "(assert_invalid (module (func $type-block-value-num-vs-void-after-nested-unreachable (block (block (unreachable)) (i32.const 1)) )) \"type mismatch\")",
    "(assert_invalid (module (func $type-block-value-num-vs-num-after-nested-unreachable (result i32) (block (result i32) (i32.const 1) (block (unreachable)) (f32.const 0)) )) \"type mismatch\")",
    "(assert_invalid (module (func $type-loop-value-num-vs-void-after-nested-unreachable (block (loop (block (unreachable)) (i32.const 1))) )) \"type mismatch\")",
    "(assert_invalid (module (func $type-loop-value-num-vs-num-after-nested-unreachable (result i32) (loop (result i32) (block (unreachable)) (f32.const 0)) )) \"type mismatch\")",
    "(assert_invalid (module (func $type-func-value-num-vs-void-after-nested-unreachable (block (unreachable)) (i32.const 1) )) \"type mismatch\")",
    "(assert_invalid (module (func $type-func-value-num-vs-num-after-nested-unreachable (result i32) (block (unreachable)) (f32.const 0) )) \"type mismatch\")",
    "(assert_invalid (module (func $type-unary-num-vs-void-after-infinite-loop (loop (br 0)) (block (drop (i32.eqz (nop)))) )) \"type mismatch\")",
    "(assert_invalid (module (func $type-unary-num-vs-num-after-infinite-loop (loop (br 0)) (drop (i32.eqz (f32.const 1))) )) \"type mismatch\")",
    "(assert_invalid (module (func $type-binary-num-vs-void-after-infinite-loop (loop (br 0)) (block (drop (f32.eq (i32.const 1)))) )) \"type mismatch\")",
    "(assert_invalid (module (func $type-binary-num-vs-num-after-infinite-loop (loop (br 0)) (drop (f32.eq (i32.const 1) (f32.const 0))) )) \"type mismatch\")",
    "(assert_invalid (module (func $type-block-value-num-vs-void-after-infinite-loop (block (loop (br 0)) (i32.const 1)) )) \"type mismatch\")",
    "(assert_invalid (module (func $type-block-value-num-vs-num-after-infinite-loop (result i32) (block (result i32) (i32.const 1) (loop (br 0)) (f32.const 0)) )) \"type mismatch\")",
    "(assert_invalid (module (func $type-loop-value-num-vs-void-after-infinite-loop (block (loop (loop (br 0)) (i32.const 1))) )) \"type mismatch\")",
    "(assert_invalid (module (func $type-loop-value-num-vs-num-after-infinite-loop (result i32) (loop (result i32) (loop (br 0)) (f32.const 0)) )) \"type mismatch\")",
    "(assert_invalid (module (func $type-func-value-num-vs-void-after-infinite-loop (loop (br 0)) (i32.const 1) )) \"type mismatch\")",
    "(assert_invalid (module (func $type-func-value-num-vs-num-after-infinite-loop (result i32) (loop (br 0)) (f32.const 0) )) \"type mismatch\")",
    "(assert_invalid (module (func $type-unary-num-vs-void-in-dead-body (if (i32.const 0) (then (drop (i32.eqz (nop))))) )) \"type mismatch\")",
    "(assert_invalid (module (func $type-unary-num-vs-num-in-dead-body (if (i32.const 0) (then (drop (i32.eqz (f32.const 1))))) )) \"type mismatch\")",
    "(assert_invalid (module (func $type-binary-num-vs-void-in-dead-body (if (i32.const 0) (then (drop (f32.eq (i32.const 1))))) )) \"type mismatch\")",
    "(assert_invalid (module (func $type-binary-num-vs-num-in-dead-body (if (i32.const 0) (then (drop (f32.eq (i32.const 1) (f32.const 0))))) )) \"type mismatch\")",
    "(assert_invalid (module (func $type-if-value-num-vs-void-in-dead-body (if (i32.const 0) (then (i32.const 1))) )) \"type mismatch\")",
    "(assert_invalid (module (func $type-if-value-num-vs-num-in-dead-body (result i32) (if (result i32) (i32.const 0) (then (f32.const 0))) )) \"type mismatch\")",
    "(assert_invalid (module (func $type-block-value-num-vs-void-in-dead-body (if (i32.const 0) (then (block (i32.const 1)))) )) \"type mismatch\")",
    "(assert_invalid (module (func $type-block-value-num-vs-num-in-dead-body (result i32) (if (result i32) (i32.const 0) (then (block (result i32) (f32.const 0)))) )) \"type mismatch\")",
    "(assert_invalid (module (func $type-block-value-num-vs-void-in-dead-body (if (i32.const 0) (then (loop (i32.const 1)))) )) \"type mismatch\")",
    "(assert_invalid (module (func $type-block-value-num-vs-num-in-dead-body (result i32) (if (result i32) (i32.const 0) (then (loop (result i32) (f32.const 0)))) )) \"type mismatch\")",
    "(assert_invalid (module (func $type-return-second-num-vs-num (result i32) (return (i32.const 1)) (return (f64.const 1)) )) \"type mismatch\")",
    "(assert_invalid (module (func $type-br-second-num-vs-num (result i32) (block (result i32) (br 0 (i32.const 1)) (br 0 (f64.const 1))) )) \"type mismatch\")",
    "(assert_invalid (module (func $type-br_if-cond-num-vs-num-after-unreachable (block (br_if 0 (unreachable) (f32.const 0))) )) \"type mismatch\")",
    "(assert_invalid (module (func $type-br_if-num-vs-void-after-unreachable (result i32) (block (result i32) (block (unreachable) (br_if 1 (i32.const 0) (i32.const 0))) ) )) \"type mismatch\")",
    "(assert_invalid (module (func $type-br_if-num-vs-num-after-unreachable (result i32) (block (result i32) (block (result f32) (unreachable) (br_if 1 (i32.const 0) (i32.const 0))) (drop) (i32.const 0) ) )) \"type mismatch\")",
    "(assert_invalid (module (func $type-br_if-num2-vs-num-after-unreachable (result i32) (block (result i32) (unreachable) (br_if 0 (i32.const 0) (i32.const 0)) (i32.const 0) ) )) \"type mismatch\")",
    "(assert_invalid (module (func $type-br_table-num-vs-num-after-unreachable (block (br_table 0 (unreachable) (f32.const 1))) )) \"type mismatch\")",
    "(assert_invalid (module (func $type-br_table-label-num-vs-num-after-unreachable (result i32) (block (result i32) (unreachable) (br_table 0 (f32.const 0) (i32.const 1))) )) \"type mismatch\")",
    "(assert_invalid (module (func $type-br_table-label-num-vs-label-void-after-unreachable (block (block (result f32) (unreachable) (br_table 0 1 0 (i32.const 1)) ) (drop) ) )) \"type mismatch\")",
    "(assert_invalid (module (func $type-block-value-nested-unreachable-num-vs-void (block (i32.const 3) (block (unreachable))) )) \"type mismatch\")",
    "(assert_invalid (module (func $type-block-value-nested-unreachable-void-vs-num (result i32) (block (block (unreachable))) )) \"type mismatch\")",
    "(assert_invalid (module (func $type-block-value-nested-unreachable-num-vs-num (result i32) (block (result i64) (i64.const 0) (block (unreachable))) )) \"type mismatch\")",
    "(assert_invalid (module (func $type-block-value-nested-unreachable-num2-vs-void (result i32) (block (i32.const 3) (block (i64.const 1) (unreachable))) (i32.const 9) )) \"type mismatch\")",
    "(assert_invalid (module (func $type-block-value-nested-br-num-vs-void (block (i32.const 3) (block (br 1))) )) \"type mismatch\")",
    "(assert_invalid (module (func $type-block-value-nested-br-void-vs-num (result i32) (block (result i32) (block (br 1 (i32.const 0)))) )) \"type mismatch\")",
    "(assert_invalid (module (func $type-block-value-nested-br-num-vs-num (result i32) (block (result i32) (i64.const 0) (block (br 1 (i32.const 0)))) )) \"type mismatch\")",
    "(assert_invalid (module (func $type-block-value-nested2-br-num-vs-void (block (block (i32.const 3) (block (br 2)))) )) \"type mismatch\")",
    "(assert_invalid (module (func $type-block-value-nested2-br-void-vs-num (result i32) (block (result i32) (block (block (br 2 (i32.const 0))))) )) \"type mismatch\")",
    "(assert_invalid (module (func $type-block-value-nested2-br-num-vs-num (result i32) (block (result i32) (block (result i64) (i64.const 0) (block (br 2 (i32.const 0)))) ) )) \"type mismatch\")",
    "(assert_invalid (module (func $type-block-value-nested2-br-num2-vs-void (result i32) (block (i32.const 3) (block (i64.const 1) (br 1))) (i32.const 9) )) \"type mismatch\")",
    "(assert_invalid (module (func $type-block-value-nested-return-num-vs-void (block (i32.const 3) (block (return))) )) \"type mismatch\")",
    "(assert_invalid (module (func $type-block-value-nested-return-void-vs-num (result i32) (block (block (return (i32.const 0)))) )) \"type mismatch\")",
    "(assert_invalid (module (func $type-block-value-nested-return-num-vs-num (result i32) (block (result i64) (i64.const 0) (block (return (i32.const 0)))) )) \"type mismatch\")",
    "(assert_invalid (module (func $type-block-value-nested-return-num2-vs-void (result i32) (block (i32.const 3) (block (i64.const 1) (return (i32.const 0)))) (i32.const 9) )) \"type mismatch\")",
    "(assert_invalid (module (func $type-loop-value-nested-unreachable-num-vs-void (loop (i32.const 3) (block (unreachable))) )) \"type mismatch\")",
    "(assert_invalid (module (func $type-loop-value-nested-unreachable-void-vs-num (result i32) (loop (block (unreachable))) )) \"type mismatch\")",
    "(assert_invalid (module (func $type-loop-value-nested-unreachable-num-vs-num (result i32) (loop (result i64) (i64.const 0) (block (unreachable))) )) \"type mismatch\")",
    "(assert_invalid (module (func $type-cont-last-void-vs-empty (result i32) (loop (br 0 (nop))) )) \"type mismatch\")",
    "(assert_invalid (module (func $type-cont-last-num-vs-empty (result i32) (loop (br 0 (i32.const 0))) )) \"type mismatch\")",
    "(assert_invalid (module (func $tee-local-unreachable-value (local i32) (local.tee 0 (unreachable)) )) \"type mismatch\")",
    "(assert_invalid (module (func $br_if-unreachable (result i32) (block (result i32) (block (br_if 1 (unreachable) (i32.const 0)) ) (i32.const 0) ) )) \"type mismatch\")",
    "(assert_invalid (module (func $type-br_if-after-unreachable (result i64) unreachable br_if 0 i64.extend_i32_u ) ) \"type mismatch\")",
    "(assert_invalid (module (func (unreachable) (select (i32.const 1) (i64.const 1) (i32.const 1)) (drop))) \"type mismatch\")",
    "(assert_invalid (module (func (unreachable) (select (i64.const 1) (i32.const 1) (i32.const 1)) (drop))) \"type mismatch\")",
    "(assert_invalid (module (func (unreachable) (select (i32.const 1) (i32.const 1) (i64.const 1)) (drop))) \"type mismatch\")",
    "(assert_invalid (module (func (unreachable) (select (i32.const 1) (i64.const 1)) (drop))) \"type mismatch\")",
    "(assert_invalid (module (func (unreachable) (select (i64.const 1)) (drop))) \"type mismatch\")",
    "(assert_invalid (module (func (result i32) (unreachable) (select (i64.const 1) (i32.const 1)))) \"type mismatch\")",
    "(assert_invalid (module (func (unreachable) (select))) \"type mismatch\")",
    "(assert_invalid (module (func $meet-bottom (param i32) (result externref) (block $l1 (result externref) (drop (block $l2 (result i32) (br_table $l2 $l1 $l2 (ref.null extern) (local.get 0)) ) ) (ref.null extern) ) )) \"type mismatch\")"
  ]
}
