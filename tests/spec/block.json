{
  "bin": {
    "block.0.wasm": "AGFzbQEAAAABPQtgAn9/AX9gAABgAAF/YAF/AGADf3x/A398f2AAA39+f2ABfwF/YAACf39gAAJ9fWAAA39/fmACf38Cf38DODcBAQICAgICAgICAgIBAgICAgICAAICAgEBAgYCAgECAgICAgICAgICAgICAgkCAgICAgICAgIBBAUBcAEBAQUDAQABBgYBfwFBCgsH0AY0BWVtcHR5AAEIc2luZ3VsYXIAAgVtdWx0aQADBm5lc3RlZAAEBGRlZXAABQ9hcy1zZWxlY3QtZmlyc3QABg1hcy1zZWxlY3QtbWlkAAcOYXMtc2VsZWN0LWxhc3QACA1hcy1sb29wLWZpcnN0AAkLYXMtbG9vcC1taWQACgxhcy1sb29wLWxhc3QACw9hcy1pZi1jb25kaXRpb24ADAphcy1pZi10aGVuAA0KYXMtaWYtZWxzZQAODmFzLWJyX2lmLWZpcnN0AA8NYXMtYnJfaWYtbGFzdAAQEWFzLWJyX3RhYmxlLWZpcnN0ABEQYXMtYnJfdGFibGUtbGFzdAASFmFzLWNhbGxfaW5kaXJlY3QtZmlyc3QAFBRhcy1jYWxsX2luZGlyZWN0LW1pZAAVFWFzLWNhbGxfaW5kaXJlY3QtbGFzdAAWDmFzLXN0b3JlLWZpcnN0ABcNYXMtc3RvcmUtbGFzdAAYFGFzLW1lbW9yeS5ncm93LXZhbHVlABkNYXMtY2FsbC12YWx1ZQAbD2FzLXJldHVybi12YWx1ZQAcD2FzLWRyb3Atb3BlcmFuZAAdC2FzLWJyLXZhbHVlAB4SYXMtbG9jYWwuc2V0LXZhbHVlAB8SYXMtbG9jYWwudGVlLXZhbHVlACATYXMtZ2xvYmFsLnNldC12YWx1ZQAhD2FzLWxvYWQtb3BlcmFuZAAiEGFzLXVuYXJ5LW9wZXJhbmQAIxFhcy1iaW5hcnktb3BlcmFuZAAkD2FzLXRlc3Qtb3BlcmFuZAAlEmFzLWNvbXBhcmUtb3BlcmFuZAAmEmFzLWJpbmFyeS1vcGVyYW5kcwAnE2FzLWNvbXBhcmUtb3BlcmFuZHMAKBFhcy1taXhlZC1vcGVyYW5kcwApCmJyZWFrLWJhcmUAKgticmVhay12YWx1ZQArEWJyZWFrLW11bHRpLXZhbHVlACwOYnJlYWstcmVwZWF0ZWQALQticmVhay1pbm5lcgAuBXBhcmFtAC8GcGFyYW1zADAJcGFyYW1zLWlkADELcGFyYW0tYnJlYWsAMgxwYXJhbXMtYnJlYWsAMw9wYXJhbXMtaWQtYnJlYWsANAdlZmZlY3RzADUIdHlwZS11c2UANgkHAQBBAAsBEwrSCDcCAAsIAAJACwJACwsLAAJAAQsCf0EHCws+AAJAEAAQABAAEAALAn8QABAAEABBBxAACxoCBRAAEAAQAEEIEAAQABAAEABCBxAAEAAQABAAQQkQAAsaGgsVAAJ/AkAQAAJACwELAn8QAEEJCwsLeQACfwJ/An8CfwJ/An8CfwJ/An8CfwJ/An8CfwJ/An8CfwJ/An8CfwJ/An8CfwJ/An8CfwJ/An8CfwJ/An8CfwJ/An8CfwJ/An8CfwJ/EABBlgELCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsMAAJ/QQELQQJBAxsLDABBAgJ/QQELQQMbCwwAQQJBAwJ/QQELGwsOAAN/An9BAQsQABAACwsOAAN/EAACf0EBCxAACwsOAAN/EAAQAAJ/QQELCwsMAAJ/QQELBEAQAAsLDwBBAQR/An9BAQsFQQILCw8AQQEEf0ECBQJ/QQELCwsOAAJ/An9BAQtBAg0ACwsOAAJ/QQICf0EBCw0ACwsQAAJ/An9BAQtBAg4BAAALCxAAAn9BAgJ/QQELDgEAAAsLBAAgAAsRAAJ/An9BAQtBAkEAEQAACwsRAAJ/QQICf0EBC0EAEQAACwsRAAJ/QQFBAgJ/QQALEQAACwsMAAJ/QQELQQE2AgALDABBCgJ/QQELNgIACwkAAn9BAQtAAAsEACAACwkAAn9BAQsQGgsIAAJ/QQELDwsIAAJ/QQELGgsMAAJ/An9BAQsMAAsLDQEBfwJ/QQELIQAgAAsLAQF/An9BAQsiAAsLAAJ/QQELJAAjAAsKAAJ/QQELKAIACwoAAn8QAEENC2gLEQACfxAAQQMLAn8QAEEEC2wLCgACfxAAQQ0LRQsXAAJ9EABDAABAQAsCfRAAQwAAQEALXgsOAAIHEABBAxAAQQQLbAsUAAIIEABDAABAQBAAQwAAQEALXgsRAAIHEABBAxAAQQQLQQVqbAsmAAJADAAACwJAQQENAAALAkBBAA4AAAALAkBBAQ4CAAAAAAtBEwsLAAJ/QRIMAEETCwsTAAIJQRJBbkISDABBE0FtQhMLCzEAAn9BEgwAQRMMAEEUQQANABpBFEEBDQAaQRUMAEEWQQQOAABBF0EBDgIAAABBFQsLRQEBf0EAIQAgAAJ/An9BAQwBCwtqIQAgAAJ/AkAMAAtBAgtqIQAgAAJ/QQQMAGgLaiEAIAACfwJ/QQgMAQtoC2ohACAACwoAQQECBkECagsLCgBBAUECAgBqCwsKAEEBQQICCgtqCwwAQQECBkECagwACwsMAEEBQQICAGoMAAsLDABBAUECAgoMAAtqCy8BAX8CQEEBIQAgAEEDbCEAIABBBWshACAAQQdsIQAMACAAQeQAbCEACyAAQXJGCz0AAkALAn9BAAsCAxoLQQBEAAAAAAAAAABBAAIECxoaGgJ/QQALAgMaC0EARAAAAAAAAAAAQQACBAsaGhoL",
    "block.1.wat": "KHR5cGUgJHNpZyAoZnVuYyAocGFyYW0gaTMyKSAocmVzdWx0IGkzMikpKShmdW5jIChpMzIuY29uc3QgMCkgKGJsb2NrICh0eXBlICRzaWcpIChyZXN1bHQgaTMyKSAocGFyYW0gaTMyKSkp",
    "block.10.wat": "KHR5cGUgJHNpZyAoZnVuYyAocGFyYW0gaTMyKSAocmVzdWx0IGkzMikpKShmdW5jIChpMzIuY29uc3QgMCkgKGJsb2NrICh0eXBlICRzaWcpIChwYXJhbSBpMzIpIChkcm9wKSkgKHVucmVhY2hhYmxlKSk=",
    "block.100.wasm": "AGFzbQEAAAABBQFgAAF+AwIBAAoWARQAAn5EAAAAAAAA8D8MAEIBDAALCw==",
    "block.101.wasm": "AGFzbQEAAAABBQFgAAF9AwIBAAoSARAAAn1BAQwAQwAAgD8MAAsL",
    "block.102.wasm": "AGFzbQEAAAABBQFgAAF9AwIBAAoSARAAAn1CAQwAQwAAgD8MAAsL",
    "block.103.wasm": "AGFzbQEAAAABBQFgAAF9AwIBAAoZARcAAn1EAAAAAAAA8D8MAEMAAIA/DAALCw==",
    "block.104.wasm": "AGFzbQEAAAABBQFgAAF8AwIBAAoWARQAAnxBAQwARAAAAAAAAPA/DAALCw==",
    "block.105.wasm": "AGFzbQEAAAABBQFgAAF8AwIBAAoWARQAAnxCAQwARAAAAAAAAPA/DAALCw==",
    "block.106.wasm": "AGFzbQEAAAABBQFgAAF8AwIBAAoZARcAAnxDAACAPwwARAAAAAAAAPA/DAALCw==",
    "block.107.wasm": "AGFzbQEAAAABBgFgAAJ/fwMCAQAKEQEPAAIAQQAMAEEBQQIMAAsL",
    "block.108.wasm": "AGFzbQEAAAABBAFgAAADAgEAChABDgACfwJ/QQEMAQsMAAsL",
    "block.109.wasm": "AGFzbQEAAAABBAFgAAADAgEAChABDgACfgJ+QgEMAQsMAAsL",
    "block.11.wat": "KHR5cGUgJHNpZyAoZnVuYyAocGFyYW0gaTMyIGkzMikgKHJlc3VsdCBpMzIpKSkoZnVuYyAoaTMyLmNvbnN0IDApIChibG9jayAodHlwZSAkc2lnKSAocGFyYW0gaTMyKSAocmVzdWx0IGkzMikpICh1bnJlYWNoYWJsZSkp",
    "block.110.wasm": "AGFzbQEAAAABBAFgAAADAgEAChMBEQACfQJ9QwAAgD8MAQsMAAsL",
    "block.111.wasm": "AGFzbQEAAAABBAFgAAADAgEAChcBFQACfAJ8RAAAAAAAAPA/DAELDAALCw==",
    "block.112.wasm": "AGFzbQEAAAABCQJgAABgAAJ/fwMCAQAKEgEQAAIBAgFBAUECDAELDAALCw==",
    "block.113.wasm": "AGFzbQEAAAABBQFgAAF/AwIBAAoQAQ4AAn8CQAwBC0EBDAALCw==",
    "block.114.wasm": "AGFzbQEAAAABBQFgAAF+AwIBAAoQAQ4AAn4CQAwBC0IBDAALCw==",
    "block.115.wasm": "AGFzbQEAAAABBQFgAAF9AwIBAAoTAREAAn0CQAwBC0MAAIA/DAALCw==",
    "block.116.wasm": "AGFzbQEAAAABBQFgAAF8AwIBAAoXARUAAnwCQAwBC0QAAAAAAADwPwwACws=",
    "block.117.wasm": "AGFzbQEAAAABBgFgAAJ/fwMCAQAKEgEQAAIAAkAMAQtBAUECDAALCw==",
    "block.118.wasm": "AGFzbQEAAAABBQFgAAF/AwIBAAoRAQ8AAn8CfwEMAQtBAQwACws=",
    "block.119.wasm": "AGFzbQEAAAABBQFgAAF+AwIBAAoRAQ8AAn4CfgEMAQtCAQwACws=",
    "block.12.wasm": "AGFzbQEAAAABBAFgAAADAgEACgkBBwACQEEACws=",
    "block.120.wasm": "AGFzbQEAAAABBQFgAAF9AwIBAAoUARIAAn0CfQEMAQtDAACAPwwACws=",
    "block.121.wasm": "AGFzbQEAAAABBQFgAAF8AwIBAAoYARYAAnwCfAEMAQtEAAAAAAAA8D8MAAsL",
    "block.122.wasm": "AGFzbQEAAAABBgFgAAJ/fwMCAQAKEwERAAIAAgABDAELQQFBAgwACws=",
    "block.123.wasm": "AGFzbQEAAAABBQFgAAF/AwIBAAoSARAAAn8Cf0IBDAELQQEMAAsL",
    "block.124.wasm": "AGFzbQEAAAABBQFgAAF/AwIBAAoVARMAAn8Cf0MAAIA/DAELQQEMAAsL",
    "block.125.wasm": "AGFzbQEAAAABBQFgAAF/AwIBAAoZARcAAn8Cf0QAAAAAAADwPwwBC0EBDAALCw==",
    "block.126.wasm": "AGFzbQEAAAABBQFgAAF+AwIBAAoSARAAAn4CfkEBDAELQgEMAAsL",
    "block.127.wasm": "AGFzbQEAAAABBQFgAAF+AwIBAAoVARMAAn4CfkMAAIA/DAELQgEMAAsL",
    "block.128.wasm": "AGFzbQEAAAABBQFgAAF+AwIBAAoZARcAAn4CfkQAAAAAAADwPwwBC0IBDAALCw==",
    "block.129.wasm": "AGFzbQEAAAABBQFgAAF9AwIBAAoVARMAAn0CfUEBDAELQwAAgD8MAAsL",
    "block.13.wasm": "AGFzbQEAAAABBQFgAAF/AwIBAAoHAQUAAkALCw==",
    "block.130.wasm": "AGFzbQEAAAABBQFgAAF9AwIBAAoVARMAAn0CfUIBDAELQwAAgD8MAAsL",
    "block.131.wasm": "AGFzbQEAAAABBQFgAAF9AwIBAAocARoAAn0CfUQAAAAAAADwPwwBC0MAAIA/DAALCw==",
    "block.132.wasm": "AGFzbQEAAAABBQFgAAF8AwIBAAoZARcAAnwCfEEBDAELRAAAAAAAAPA/DAALCw==",
    "block.133.wasm": "AGFzbQEAAAABBQFgAAF8AwIBAAoZARcAAnwCfEIBDAELRAAAAAAAAPA/DAALCw==",
    "block.134.wasm": "AGFzbQEAAAABBQFgAAF8AwIBAAocARoAAnwCfEMAAIA/DAELRAAAAAAAAPA/DAALCw==",
    "block.135.wasm": "AGFzbQEAAAABBgFgAAJ/fwMCAQAKFAESAAIAAgBBAAwBC0EBQQIMAAsL",
    "block.136.wasm": "AGFzbQEAAAABBQFgAAF/AwIBAAoKAQgAAkAMAAtoCw==",
    "block.137.wasm": "AGFzbQEAAAABBQFgAAF+AwIBAAoKAQgAAkAMAAt6Cw==",
    "block.138.wasm": "AGFzbQEAAAABBQFgAAF9AwIBAAoKAQgAAkAMAAuOCw==",
    "block.139.wasm": "AGFzbQEAAAABBQFgAAF8AwIBAAoKAQgAAkAMAAucCw==",
    "block.14.wasm": "AGFzbQEAAAABBQFgAAF+AwIBAAoHAQUAAkALCw==",
    "block.140.wasm": "AGFzbQEAAAABBQFgAAF/AwIBAAoKAQgAAkAMAAtqCw==",
    "block.141.wasm": "AGFzbQEAAAABBQFgAAF/AwIBAAoLAQkAAkABDAALaAs=",
    "block.142.wasm": "AGFzbQEAAAABBQFgAAF+AwIBAAoLAQkAAkABDAALegs=",
    "block.143.wasm": "AGFzbQEAAAABBQFgAAF9AwIBAAoLAQkAAkABDAALjgs=",
    "block.144.wasm": "AGFzbQEAAAABBQFgAAF8AwIBAAoLAQkAAkABDAALnAs=",
    "block.145.wasm": "AGFzbQEAAAABBQFgAAF/AwIBAAoLAQkAAkABDAALags=",
    "block.146.wasm": "AGFzbQEAAAABBQFgAAF/AwIBAAoMAQoAAkBCCQwAC3oL",
    "block.147.wasm": "AGFzbQEAAAABBQFgAAF/AwIBAAoPAQ0AAkBDAAAQQQwAC44L",
    "block.148.wasm": "AGFzbQEAAAABBQFgAAF/AwIBAAoTAREAAkBEAAAAAAAAIkAMAAucCw==",
    "block.149.wasm": "AGFzbQEAAAABBQFgAAF+AwIBAAoMAQoAAkBBCQwAC2gL",
    "block.15.wasm": "AGFzbQEAAAABBQFgAAF9AwIBAAoHAQUAAkALCw==",
    "block.150.wasm": "AGFzbQEAAAABBQFgAAF+AwIBAAoPAQ0AAkBDAAAQQQwAC44L",
    "block.151.wasm": "AGFzbQEAAAABBQFgAAF+AwIBAAoTAREAAkBEAAAAAAAAIkAMAAucCw==",
    "block.152.wasm": "AGFzbQEAAAABBQFgAAF9AwIBAAoMAQoAAkBBCQwAC2gL",
    "block.153.wasm": "AGFzbQEAAAABBQFgAAF9AwIBAAoMAQoAAkBCCQwAC3oL",
    "block.154.wasm": "AGFzbQEAAAABBQFgAAF9AwIBAAoTAREAAkBEAAAAAAAAIkAMAAucCw==",
    "block.155.wasm": "AGFzbQEAAAABBQFgAAF8AwIBAAoMAQoAAkBBCQwAC2gL",
    "block.156.wasm": "AGFzbQEAAAABBQFgAAF8AwIBAAoMAQoAAkBCCQwAC3oL",
    "block.157.wasm": "AGFzbQEAAAABBQFgAAF8AwIBAAoPAQ0AAkBDAAAQQQwAC44L",
    "block.158.wasm": "AGFzbQEAAAABBQFgAAF/AwIBAAoOAQwAAkBCCUEKDAALags=",
    "block.159.wasm": "AGFzbQEAAAABCAJgAABgAX8AAwIBAAoIAQYAAgEaCws=",
    "block.16.wasm": "AGFzbQEAAAABBQFgAAF8AwIBAAoHAQUAAkALCw==",
    "block.160.wasm": "AGFzbQEAAAABCQJgAABgAn98AAMCAQAKCQEHAAIBGhoLCw==",
    "block.161.wasm": "AGFzbQEAAAABCAJgAABgAX8AAwIBAAoNAQsAQwAAAAACARoLCw==",
    "block.162.wasm": "AGFzbQEAAAABCQJgAABgAn1/AAMCAQAKDgEMAEMAAAAAAgEaGgsL",
    "block.163.wasm": "AGFzbQEAAAABCAJgAABgAX8AAwIBAAoLAQkAAkACARoLCws=",
    "block.164.wasm": "AGFzbQEAAAABCQJgAABgAn98AAMCAQAKDAEKAAJAAgEaGgsLCw==",
    "block.165.wasm": "AGFzbQEAAAABCAJgAABgAX8AAwIBAAoQAQ4AAkBDAAAAAAIBGgsLCw==",
    "block.166.wasm": "AGFzbQEAAAABCQJgAABgAn1/AAMCAQAKEQEPAAJAQwAAAAACARoaCwsL",
    "block.167.wat": "KGZ1bmMgKHBhcmFtIGkzMikgKHJlc3VsdCBpMzIpIGJsb2NrIChwYXJhbSAkeCBpMzIpIGVuZCk=",
    "block.168.wat": "KGZ1bmMgKHBhcmFtIGkzMikgKHJlc3VsdCBpMzIpIChibG9jayAocGFyYW0gJHggaTMyKSkp",
    "block.169.wat": "KGZ1bmMgYmxvY2sgZW5kICRsKQ==",
    "block.17.wasm": "AGFzbQEAAAABBAFgAAADAgEACgkBBwACQEEBCws=",
    "block.170.wat": "KGZ1bmMgYmxvY2sgJGEgZW5kICRsKQ==",
    "block.18.wasm": "AGFzbQEAAAABBAFgAAADAgEACgkBBwACQEIBCws=",
    "block.19.wasm": "AGFzbQEAAAABBAFgAAADAgEACgwBCgACQEMAAIA/Cws=",
    "block.2.wat": "KHR5cGUgJHNpZyAoZnVuYyAocGFyYW0gaTMyKSAocmVzdWx0IGkzMikpKShmdW5jIChpMzIuY29uc3QgMCkgKGJsb2NrIChwYXJhbSBpMzIpICh0eXBlICRzaWcpIChyZXN1bHQgaTMyKSkp",
    "block.20.wasm": "AGFzbQEAAAABBAFgAAADAgEAChABDgACQEQAAAAAAADwPwsL",
    "block.21.wasm": "AGFzbQEAAAABBAFgAAADAgEACgsBCQACQEEBQQILCw==",
    "block.22.wasm": "AGFzbQEAAAABBQFgAAF/AwIBAAoHAQUAAn8LCw==",
    "block.23.wasm": "AGFzbQEAAAABBQFgAAF+AwIBAAoHAQUAAn4LCw==",
    "block.24.wasm": "AGFzbQEAAAABBQFgAAF9AwIBAAoHAQUAAn0LCw==",
    "block.25.wasm": "AGFzbQEAAAABBQFgAAF8AwIBAAoHAQUAAnwLCw==",
    "block.26.wasm": "AGFzbQEAAAABBgFgAAJ/fwMCAQAKBwEFAAIACws=",
    "block.27.wasm": "AGFzbQEAAAABBAFgAAADAgEACg0BCwBBAAJAAn8LGgsL",
    "block.28.wasm": "AGFzbQEAAAABBAFgAAADAgEACg0BCwBBAANAAn8LGgsL",
    "block.29.wasm": "AGFzbQEAAAABBAFgAAADAgEACg8BDQBBAEEABEACfwsaCws=",
    "block.3.wat": "KHR5cGUgJHNpZyAoZnVuYyAocGFyYW0gaTMyKSAocmVzdWx0IGkzMikpKShmdW5jIChpMzIuY29uc3QgMCkgKGJsb2NrIChwYXJhbSBpMzIpIChyZXN1bHQgaTMyKSAodHlwZSAkc2lnKSkp",
    "block.30.wasm": "AGFzbQEAAAABBQFgAAF/AwIBAAoIAQYAAn8BCws=",
    "block.31.wasm": "AGFzbQEAAAABBQFgAAF+AwIBAAoIAQYAAn4BCws=",
    "block.32.wasm": "AGFzbQEAAAABBQFgAAF9AwIBAAoIAQYAAn0BCws=",
    "block.33.wasm": "AGFzbQEAAAABBQFgAAF8AwIBAAoIAQYAAnwBCws=",
    "block.34.wasm": "AGFzbQEAAAABBgFgAAJ/fwMCAQAKCAEGAAIAAQsL",
    "block.35.wasm": "AGFzbQEAAAABBQFgAAF/AwIBAAoJAQcAAn9CAAsL",
    "block.36.wasm": "AGFzbQEAAAABBQFgAAF/AwIBAAoMAQoAAn9DAAAAAAsL",
    "block.37.wasm": "AGFzbQEAAAABBQFgAAF/AwIBAAoQAQ4AAn9EAAAAAAAAAAALCw==",
    "block.38.wasm": "AGFzbQEAAAABBQFgAAF+AwIBAAoJAQcAAn5BAAsL",
    "block.39.wasm": "AGFzbQEAAAABBQFgAAF+AwIBAAoMAQoAAn5DAAAAAAsL",
    "block.4.wat": "KHR5cGUgJHNpZyAoZnVuYyAocGFyYW0gaTMyKSAocmVzdWx0IGkzMikpKShmdW5jIChpMzIuY29uc3QgMCkgKGJsb2NrIChyZXN1bHQgaTMyKSAodHlwZSAkc2lnKSAocGFyYW0gaTMyKSkp",
    "block.40.wasm": "AGFzbQEAAAABBQFgAAF+AwIBAAoQAQ4AAn5EAAAAAAAAAAALCw==",
    "block.41.wasm": "AGFzbQEAAAABBQFgAAF9AwIBAAoJAQcAAn1BAAsL",
    "block.42.wasm": "AGFzbQEAAAABBQFgAAF9AwIBAAoJAQcAAn1CAAsL",
    "block.43.wasm": "AGFzbQEAAAABBQFgAAF9AwIBAAoQAQ4AAn1EAAAAAAAAAAALCw==",
    "block.44.wasm": "AGFzbQEAAAABBQFgAAF8AwIBAAoJAQcAAnxBAAsL",
    "block.45.wasm": "AGFzbQEAAAABBQFgAAF8AwIBAAoJAQcAAnxCAAsL",
    "block.46.wasm": "AGFzbQEAAAABBQFgAAF9AwIBAAoMAQoAAnxDAAAAAAsL",
    "block.47.wasm": "AGFzbQEAAAABBgFgAAJ/fwMCAQAKCQEHAAIAQQALCw==",
    "block.48.wasm": "AGFzbQEAAAABBgFgAAJ/fwMCAQAKCwEJAEEBAgBBAgsL",
    "block.49.wasm": "AGFzbQEAAAABBQFgAAF/AwIBAAoLAQkAAn9BAUECCws=",
    "block.5.wat": "KHR5cGUgJHNpZyAoZnVuYyAocGFyYW0gaTMyKSAocmVzdWx0IGkzMikpKShmdW5jIChpMzIuY29uc3QgMCkgKGJsb2NrIChyZXN1bHQgaTMyKSAocGFyYW0gaTMyKSAodHlwZSAkc2lnKSkp",
    "block.50.wasm": "AGFzbQEAAAABBQFgAAF/AwIBAAoLAQkAAn4AAAAbCws=",
    "block.51.wasm": "AGFzbQEAAAABBQFgAAF/AwIBAAoLAQkAAn0AAAAbCws=",
    "block.52.wasm": "AGFzbQEAAAABBQFgAAF/AwIBAAoLAQkAAnwAAAAbCws=",
    "block.53.wasm": "AGFzbQEAAAABBQFgAAF+AwIBAAoLAQkAAn8AAAAbCws=",
    "block.54.wasm": "AGFzbQEAAAABBQFgAAF+AwIBAAoLAQkAAn0AAAAbCws=",
    "block.55.wasm": "AGFzbQEAAAABBQFgAAF+AwIBAAoLAQkAAnwAAAAbCws=",
    "block.56.wasm": "AGFzbQEAAAABBQFgAAF9AwIBAAoLAQkAAn8AAAAbCws=",
    "block.57.wasm": "AGFzbQEAAAABBQFgAAF9AwIBAAoLAQkAAn4AAAAbCws=",
    "block.58.wasm": "AGFzbQEAAAABBQFgAAF9AwIBAAoLAQkAAnwAAAAbCws=",
    "block.59.wasm": "AGFzbQEAAAABBQFgAAF8AwIBAAoLAQkAAn8AAAAbCws=",
    "block.6.wat": "KGZ1bmMgKGkzMi5jb25zdCAwKSAoYmxvY2sgKHJlc3VsdCBpMzIpIChwYXJhbSBpMzIpKSk=",
    "block.60.wasm": "AGFzbQEAAAABBQFgAAF8AwIBAAoLAQkAAn4AAAAbCws=",
    "block.61.wasm": "AGFzbQEAAAABBQFgAAF8AwIBAAoLAQkAAn0AAAAbCws=",
    "block.62.wasm": "AGFzbQEAAAABBQFgAAF/AwIBAAoJAQcAAn8MAAsL",
    "block.63.wasm": "AGFzbQEAAAABBQFgAAF+AwIBAAoJAQcAAn4MAAsL",
    "block.64.wasm": "AGFzbQEAAAABBQFgAAF9AwIBAAoJAQcAAn0MAAsL",
    "block.65.wasm": "AGFzbQEAAAABBQFgAAF8AwIBAAoJAQcAAnwMAAsL",
    "block.66.wasm": "AGFzbQEAAAABBgFgAAJ/fwMCAQAKCQEHAAIADAALCw==",
    "block.67.wasm": "AGFzbQEAAAABBQFgAAF/AwIBAAoLAQkAAn8MAEEBCws=",
    "block.68.wasm": "AGFzbQEAAAABBQFgAAF+AwIBAAoLAQkAAn4MAEIBCws=",
    "block.69.wasm": "AGFzbQEAAAABBQFgAAF9AwIBAAoOAQwAAn0MAEMAAIA/Cws=",
    "block.7.wat": "KGZ1bmMgKGkzMi5jb25zdCAwKSAoYmxvY2sgKHBhcmFtICR4IGkzMikgKGRyb3ApKSk=",
    "block.70.wasm": "AGFzbQEAAAABBQFgAAF8AwIBAAoSARAAAnwMAEQAAAAAAADwPwsL",
    "block.71.wasm": "AGFzbQEAAAABBgFgAAJ/fwMCAQAKDQELAAIADABBAUECCws=",
    "block.72.wasm": "AGFzbQEAAAABBQFgAAF/AwIBAAoMAQoAAn8BDABBAQsL",
    "block.73.wasm": "AGFzbQEAAAABBQFgAAF+AwIBAAoMAQoAAn4BDABCAQsL",
    "block.74.wasm": "AGFzbQEAAAABBQFgAAF9AwIBAAoPAQ0AAn0BDABDAACAPwsL",
    "block.75.wasm": "AGFzbQEAAAABBQFgAAF8AwIBAAoTAREAAnwBDABEAAAAAAAA8D8LCw==",
    "block.76.wasm": "AGFzbQEAAAABBQFgAAF/AwIBAAoNAQsAAn9CAQwAQQELCw==",
    "block.77.wasm": "AGFzbQEAAAABBQFgAAF/AwIBAAoQAQ4AAn9DAACAPwwAQQELCw==",
    "block.78.wasm": "AGFzbQEAAAABBQFgAAF/AwIBAAoUARIAAn9EAAAAAAAA8D8MAEEBCws=",
    "block.79.wasm": "AGFzbQEAAAABBQFgAAF+AwIBAAoNAQsAAn5BAQwAQgELCw==",
    "block.8.wat": "KHR5cGUgJHNpZyAoZnVuYykpKGZ1bmMgKGJsb2NrICh0eXBlICRzaWcpIChyZXN1bHQgaTMyKSAoaTMyLmNvbnN0IDApKSAodW5yZWFjaGFibGUpKQ==",
    "block.80.wasm": "AGFzbQEAAAABBQFgAAF+AwIBAAoQAQ4AAn5DAACAPwwAQgELCw==",
    "block.81.wasm": "AGFzbQEAAAABBQFgAAF+AwIBAAoUARIAAn5EAAAAAAAA8D8MAEIBCws=",
    "block.82.wasm": "AGFzbQEAAAABBQFgAAF9AwIBAAoQAQ4AAn1BAQwAQwAAgD8LCw==",
    "block.83.wasm": "AGFzbQEAAAABBQFgAAF9AwIBAAoQAQ4AAn1CAQwAQwAAgD8LCw==",
    "block.84.wasm": "AGFzbQEAAAABBQFgAAF9AwIBAAoXARUAAn1EAAAAAAAA8D8MAEMAAIA/Cws=",
    "block.85.wasm": "AGFzbQEAAAABBQFgAAF8AwIBAAoUARIAAn5BAQwARAAAAAAAAPA/Cws=",
    "block.86.wasm": "AGFzbQEAAAABBQFgAAF8AwIBAAoUARIAAnxCAQwARAAAAAAAAPA/Cws=",
    "block.87.wasm": "AGFzbQEAAAABBQFgAAF8AwIBAAoXARUAAnxDAACAPwwARAAAAAAAAPA/Cws=",
    "block.88.wasm": "AGFzbQEAAAABBgFgAAJ/fwMCAQAKDwENAAIAQQAMAEEBQQILCw==",
    "block.89.wasm": "AGFzbQEAAAABBgFgAAJ/fwMCAQAKDwENAEEBAgBBAAwAQQILCw==",
    "block.9.wat": "KHR5cGUgJHNpZyAoZnVuYyAocGFyYW0gaTMyKSAocmVzdWx0IGkzMikpKShmdW5jIChibG9jayAodHlwZSAkc2lnKSAocmVzdWx0IGkzMikgKGkzMi5jb25zdCAwKSkgKHVucmVhY2hhYmxlKSk=",
    "block.90.wasm": "AGFzbQEAAAABBQFgAAF/AwIBAAoOAQwAAn8BDABBAQwACws=",
    "block.91.wasm": "AGFzbQEAAAABBQFgAAF+AwIBAAoOAQwAAn4BDABCAQwACws=",
    "block.92.wasm": "AGFzbQEAAAABBQFgAAF9AwIBAAoRAQ8AAn0BDABDAACAPwwACws=",
    "block.93.wasm": "AGFzbQEAAAABBQFgAAF8AwIBAAoVARMAAnwBDABEAAAAAAAA8D8MAAsL",
    "block.94.wasm": "AGFzbQEAAAABBgFgAAJ/fwMCAQAKEAEOAAIAAQwAQQFBAgwACws=",
    "block.95.wasm": "AGFzbQEAAAABBQFgAAF/AwIBAAoPAQ0AAn9CAQwAQQEMAAsL",
    "block.96.wasm": "AGFzbQEAAAABBQFgAAF/AwIBAAoSARAAAn9DAACAPwwAQQEMAAsL",
    "block.97.wasm": "AGFzbQEAAAABBQFgAAF/AwIBAAoWARQAAn9EAAAAAAAA8D8MAEEBDAALCw==",
    "block.98.wasm": "AGFzbQEAAAABBQFgAAF+AwIBAAoPAQ0AAn5BAQwAQgEMAAsL",
    "block.99.wasm": "AGFzbQEAAAABBQFgAAF+AwIBAAoSARAAAn5DAACAPwwAQgEMAAsL"
  },
  "spec": {"source_filename": "/home/rvagg/git/webassembly/spec/test/core/block.wast",
 "commands": [
  {"type": "module", "line": 3, "filename": "block.0.wasm"}, 
  {"type": "assert_return", "line": 353, "action": {"type": "invoke", "field": "empty", "args": []}, "expected": []}, 
  {"type": "assert_return", "line": 354, "action": {"type": "invoke", "field": "singular", "args": []}, "expected": [{"type": "i32", "value": "7"}]}, 
  {"type": "assert_return", "line": 355, "action": {"type": "invoke", "field": "multi", "args": []}, "expected": [{"type": "i32", "value": "8"}]}, 
  {"type": "assert_return", "line": 356, "action": {"type": "invoke", "field": "nested", "args": []}, "expected": [{"type": "i32", "value": "9"}]}, 
  {"type": "assert_return", "line": 357, "action": {"type": "invoke", "field": "deep", "args": []}, "expected": [{"type": "i32", "value": "150"}]}, 
  {"type": "assert_return", "line": 359, "action": {"type": "invoke", "field": "as-select-first", "args": []}, "expected": [{"type": "i32", "value": "1"}]}, 
  {"type": "assert_return", "line": 360, "action": {"type": "invoke", "field": "as-select-mid", "args": []}, "expected": [{"type": "i32", "value": "2"}]}, 
  {"type": "assert_return", "line": 361, "action": {"type": "invoke", "field": "as-select-last", "args": []}, "expected": [{"type": "i32", "value": "2"}]}, 
  {"type": "assert_return", "line": 363, "action": {"type": "invoke", "field": "as-loop-first", "args": []}, "expected": [{"type": "i32", "value": "1"}]}, 
  {"type": "assert_return", "line": 364, "action": {"type": "invoke", "field": "as-loop-mid", "args": []}, "expected": [{"type": "i32", "value": "1"}]}, 
  {"type": "assert_return", "line": 365, "action": {"type": "invoke", "field": "as-loop-last", "args": []}, "expected": [{"type": "i32", "value": "1"}]}, 
  {"type": "assert_return", "line": 367, "action": {"type": "invoke", "field": "as-if-condition", "args": []}, "expected": []}, 
  {"type": "assert_return", "line": 368, "action": {"type": "invoke", "field": "as-if-then", "args": []}, "expected": [{"type": "i32", "value": "1"}]}, 
  {"type": "assert_return", "line": 369, "action": {"type": "invoke", "field": "as-if-else", "args": []}, "expected": [{"type": "i32", "value": "2"}]}, 
  {"type": "assert_return", "line": 371, "action": {"type": "invoke", "field": "as-br_if-first", "args": []}, "expected": [{"type": "i32", "value": "1"}]}, 
  {"type": "assert_return", "line": 372, "action": {"type": "invoke", "field": "as-br_if-last", "args": []}, "expected": [{"type": "i32", "value": "2"}]}, 
  {"type": "assert_return", "line": 374, "action": {"type": "invoke", "field": "as-br_table-first", "args": []}, "expected": [{"type": "i32", "value": "1"}]}, 
  {"type": "assert_return", "line": 375, "action": {"type": "invoke", "field": "as-br_table-last", "args": []}, "expected": [{"type": "i32", "value": "2"}]}, 
  {"type": "assert_return", "line": 377, "action": {"type": "invoke", "field": "as-call_indirect-first", "args": []}, "expected": [{"type": "i32", "value": "1"}]}, 
  {"type": "assert_return", "line": 378, "action": {"type": "invoke", "field": "as-call_indirect-mid", "args": []}, "expected": [{"type": "i32", "value": "2"}]}, 
  {"type": "assert_return", "line": 379, "action": {"type": "invoke", "field": "as-call_indirect-last", "args": []}, "expected": [{"type": "i32", "value": "1"}]}, 
  {"type": "assert_return", "line": 381, "action": {"type": "invoke", "field": "as-store-first", "args": []}, "expected": []}, 
  {"type": "assert_return", "line": 382, "action": {"type": "invoke", "field": "as-store-last", "args": []}, "expected": []}, 
  {"type": "assert_return", "line": 384, "action": {"type": "invoke", "field": "as-memory.grow-value", "args": []}, "expected": [{"type": "i32", "value": "1"}]}, 
  {"type": "assert_return", "line": 385, "action": {"type": "invoke", "field": "as-call-value", "args": []}, "expected": [{"type": "i32", "value": "1"}]}, 
  {"type": "assert_return", "line": 386, "action": {"type": "invoke", "field": "as-return-value", "args": []}, "expected": [{"type": "i32", "value": "1"}]}, 
  {"type": "assert_return", "line": 387, "action": {"type": "invoke", "field": "as-drop-operand", "args": []}, "expected": []}, 
  {"type": "assert_return", "line": 388, "action": {"type": "invoke", "field": "as-br-value", "args": []}, "expected": [{"type": "i32", "value": "1"}]}, 
  {"type": "assert_return", "line": 389, "action": {"type": "invoke", "field": "as-local.set-value", "args": []}, "expected": [{"type": "i32", "value": "1"}]}, 
  {"type": "assert_return", "line": 390, "action": {"type": "invoke", "field": "as-local.tee-value", "args": []}, "expected": [{"type": "i32", "value": "1"}]}, 
  {"type": "assert_return", "line": 391, "action": {"type": "invoke", "field": "as-global.set-value", "args": []}, "expected": [{"type": "i32", "value": "1"}]}, 
  {"type": "assert_return", "line": 392, "action": {"type": "invoke", "field": "as-load-operand", "args": []}, "expected": [{"type": "i32", "value": "1"}]}, 
  {"type": "assert_return", "line": 394, "action": {"type": "invoke", "field": "as-unary-operand", "args": []}, "expected": [{"type": "i32", "value": "0"}]}, 
  {"type": "assert_return", "line": 395, "action": {"type": "invoke", "field": "as-binary-operand", "args": []}, "expected": [{"type": "i32", "value": "12"}]}, 
  {"type": "assert_return", "line": 396, "action": {"type": "invoke", "field": "as-test-operand", "args": []}, "expected": [{"type": "i32", "value": "0"}]}, 
  {"type": "assert_return", "line": 397, "action": {"type": "invoke", "field": "as-compare-operand", "args": []}, "expected": [{"type": "i32", "value": "0"}]}, 
  {"type": "assert_return", "line": 398, "action": {"type": "invoke", "field": "as-binary-operands", "args": []}, "expected": [{"type": "i32", "value": "12"}]}, 
  {"type": "assert_return", "line": 399, "action": {"type": "invoke", "field": "as-compare-operands", "args": []}, "expected": [{"type": "i32", "value": "0"}]}, 
  {"type": "assert_return", "line": 400, "action": {"type": "invoke", "field": "as-mixed-operands", "args": []}, "expected": [{"type": "i32", "value": "27"}]}, 
  {"type": "assert_return", "line": 402, "action": {"type": "invoke", "field": "break-bare", "args": []}, "expected": [{"type": "i32", "value": "19"}]}, 
  {"type": "assert_return", "line": 403, "action": {"type": "invoke", "field": "break-value", "args": []}, "expected": [{"type": "i32", "value": "18"}]}, 
  {"type": "assert_return", "line": 404, "action": {"type": "invoke", "field": "break-multi-value", "args": []}, "expected": [{"type": "i32", "value": "18"}, {"type": "i32", "value": "4294967278"}, {"type": "i64", "value": "18"}]}, 
  {"type": "assert_return", "line": 407, "action": {"type": "invoke", "field": "break-repeated", "args": []}, "expected": [{"type": "i32", "value": "18"}]}, 
  {"type": "assert_return", "line": 408, "action": {"type": "invoke", "field": "break-inner", "args": []}, "expected": [{"type": "i32", "value": "15"}]}, 
  {"type": "assert_return", "line": 410, "action": {"type": "invoke", "field": "param", "args": []}, "expected": [{"type": "i32", "value": "3"}]}, 
  {"type": "assert_return", "line": 411, "action": {"type": "invoke", "field": "params", "args": []}, "expected": [{"type": "i32", "value": "3"}]}, 
  {"type": "assert_return", "line": 412, "action": {"type": "invoke", "field": "params-id", "args": []}, "expected": [{"type": "i32", "value": "3"}]}, 
  {"type": "assert_return", "line": 413, "action": {"type": "invoke", "field": "param-break", "args": []}, "expected": [{"type": "i32", "value": "3"}]}, 
  {"type": "assert_return", "line": 414, "action": {"type": "invoke", "field": "params-break", "args": []}, "expected": [{"type": "i32", "value": "3"}]}, 
  {"type": "assert_return", "line": 415, "action": {"type": "invoke", "field": "params-id-break", "args": []}, "expected": [{"type": "i32", "value": "3"}]}, 
  {"type": "assert_return", "line": 417, "action": {"type": "invoke", "field": "effects", "args": []}, "expected": [{"type": "i32", "value": "1"}]}, 
  {"type": "assert_return", "line": 419, "action": {"type": "invoke", "field": "type-use", "args": []}, "expected": []}, 
  {"type": "assert_malformed", "line": 422, "filename": "block.1.wat", "text": "unexpected token", "module_type": "text"}, 
  {"type": "assert_malformed", "line": 429, "filename": "block.2.wat", "text": "unexpected token", "module_type": "text"}, 
  {"type": "assert_malformed", "line": 436, "filename": "block.3.wat", "text": "unexpected token", "module_type": "text"}, 
  {"type": "assert_malformed", "line": 443, "filename": "block.4.wat", "text": "unexpected token", "module_type": "text"}, 
  {"type": "assert_malformed", "line": 450, "filename": "block.5.wat", "text": "unexpected token", "module_type": "text"}, 
  {"type": "assert_malformed", "line": 457, "filename": "block.6.wat", "text": "unexpected token", "module_type": "text"}, 
  {"type": "assert_malformed", "line": 464, "filename": "block.7.wat", "text": "unexpected token", "module_type": "text"}, 
  {"type": "assert_malformed", "line": 468, "filename": "block.8.wat", "text": "inline function type", "module_type": "text"}, 
  {"type": "assert_malformed", "line": 475, "filename": "block.9.wat", "text": "inline function type", "module_type": "text"}, 
  {"type": "assert_malformed", "line": 482, "filename": "block.10.wat", "text": "inline function type", "module_type": "text"}, 
  {"type": "assert_malformed", "line": 489, "filename": "block.11.wat", "text": "inline function type", "module_type": "text"}, 
  {"type": "assert_invalid", "line": 497, "filename": "block.12.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 505, "filename": "block.13.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 509, "filename": "block.14.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 513, "filename": "block.15.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 517, "filename": "block.16.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 522, "filename": "block.17.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 528, "filename": "block.18.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 534, "filename": "block.19.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 540, "filename": "block.20.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 546, "filename": "block.21.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 552, "filename": "block.22.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 558, "filename": "block.23.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 564, "filename": "block.24.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 570, "filename": "block.25.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 576, "filename": "block.26.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 583, "filename": "block.27.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 592, "filename": "block.28.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 601, "filename": "block.29.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 611, "filename": "block.30.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 617, "filename": "block.31.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 623, "filename": "block.32.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 629, "filename": "block.33.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 635, "filename": "block.34.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 641, "filename": "block.35.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 647, "filename": "block.36.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 653, "filename": "block.37.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 659, "filename": "block.38.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 665, "filename": "block.39.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 671, "filename": "block.40.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 677, "filename": "block.41.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 683, "filename": "block.42.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 689, "filename": "block.43.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 695, "filename": "block.44.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 701, "filename": "block.45.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 707, "filename": "block.46.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 713, "filename": "block.47.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 719, "filename": "block.48.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 725, "filename": "block.49.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 732, "filename": "block.50.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 738, "filename": "block.51.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 744, "filename": "block.52.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 750, "filename": "block.53.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 756, "filename": "block.54.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 762, "filename": "block.55.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 768, "filename": "block.56.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 774, "filename": "block.57.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 780, "filename": "block.58.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 786, "filename": "block.59.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 792, "filename": "block.60.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 798, "filename": "block.61.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 805, "filename": "block.62.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 811, "filename": "block.63.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 817, "filename": "block.64.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 823, "filename": "block.65.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 829, "filename": "block.66.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 836, "filename": "block.67.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 842, "filename": "block.68.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 848, "filename": "block.69.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 854, "filename": "block.70.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 860, "filename": "block.71.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 867, "filename": "block.72.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 873, "filename": "block.73.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 879, "filename": "block.74.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 885, "filename": "block.75.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 892, "filename": "block.76.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 898, "filename": "block.77.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 904, "filename": "block.78.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 910, "filename": "block.79.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 916, "filename": "block.80.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 922, "filename": "block.81.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 928, "filename": "block.82.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 934, "filename": "block.83.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 940, "filename": "block.84.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 946, "filename": "block.85.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 952, "filename": "block.86.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 958, "filename": "block.87.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 964, "filename": "block.88.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 970, "filename": "block.89.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 977, "filename": "block.90.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 983, "filename": "block.91.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 989, "filename": "block.92.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 995, "filename": "block.93.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 1001, "filename": "block.94.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 1008, "filename": "block.95.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 1014, "filename": "block.96.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 1020, "filename": "block.97.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 1026, "filename": "block.98.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 1032, "filename": "block.99.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 1038, "filename": "block.100.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 1044, "filename": "block.101.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 1050, "filename": "block.102.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 1056, "filename": "block.103.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 1062, "filename": "block.104.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 1068, "filename": "block.105.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 1074, "filename": "block.106.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 1080, "filename": "block.107.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 1087, "filename": "block.108.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 1093, "filename": "block.109.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 1099, "filename": "block.110.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 1105, "filename": "block.111.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 1111, "filename": "block.112.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 1118, "filename": "block.113.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 1124, "filename": "block.114.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 1130, "filename": "block.115.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 1136, "filename": "block.116.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 1142, "filename": "block.117.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 1149, "filename": "block.118.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 1155, "filename": "block.119.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 1161, "filename": "block.120.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 1167, "filename": "block.121.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 1173, "filename": "block.122.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 1180, "filename": "block.123.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 1188, "filename": "block.124.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 1196, "filename": "block.125.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 1204, "filename": "block.126.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 1212, "filename": "block.127.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 1220, "filename": "block.128.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 1228, "filename": "block.129.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 1236, "filename": "block.130.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 1244, "filename": "block.131.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 1252, "filename": "block.132.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 1260, "filename": "block.133.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 1268, "filename": "block.134.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 1276, "filename": "block.135.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 1285, "filename": "block.136.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 1291, "filename": "block.137.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 1297, "filename": "block.138.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 1303, "filename": "block.139.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 1309, "filename": "block.140.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 1316, "filename": "block.141.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 1322, "filename": "block.142.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 1328, "filename": "block.143.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 1334, "filename": "block.144.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 1340, "filename": "block.145.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 1347, "filename": "block.146.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 1353, "filename": "block.147.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 1359, "filename": "block.148.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 1365, "filename": "block.149.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 1371, "filename": "block.150.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 1377, "filename": "block.151.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 1383, "filename": "block.152.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 1389, "filename": "block.153.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 1395, "filename": "block.154.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 1401, "filename": "block.155.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 1407, "filename": "block.156.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 1413, "filename": "block.157.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 1419, "filename": "block.158.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 1426, "filename": "block.159.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 1432, "filename": "block.160.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 1438, "filename": "block.161.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 1444, "filename": "block.162.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 1450, "filename": "block.163.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 1456, "filename": "block.164.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 1462, "filename": "block.165.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 1468, "filename": "block.166.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_malformed", "line": 1475, "filename": "block.167.wat", "text": "unexpected token", "module_type": "text"}, 
  {"type": "assert_malformed", "line": 1479, "filename": "block.168.wat", "text": "unexpected token", "module_type": "text"}, 
  {"type": "assert_malformed", "line": 1485, "filename": "block.169.wat", "text": "mismatching label", "module_type": "text"}, 
  {"type": "assert_malformed", "line": 1489, "filename": "block.170.wat", "text": "mismatching label", "module_type": "text"}]},
  "code": [
    "(module (memory 1)\n  (func $dummy)\n  (func (export \"empty\") (block) (block $l) )\n  (func (export \"singular\") (result i32) (block (nop)) (block (result i32) (i32.const 7)) )\n  (func (export \"multi\") (result i32) (block (call $dummy) (call $dummy) (call $dummy) (call $dummy)) (block (result i32) (call $dummy) (call $dummy) (call $dummy) (i32.const 7) (call $dummy) ) (drop) (block (result i32 i64 i32) (call $dummy) (call $dummy) (call $dummy) (i32.const 8) (call $dummy) (call $dummy) (call $dummy) (call $dummy) (i64.const 7) (call $dummy) (call $dummy) (call $dummy) (call $dummy) (i32.const 9) (call $dummy) ) (drop) (drop) )\n  (func (export \"nested\") (result i32) (block (result i32) (block (call $dummy) (block) (nop)) (block (result i32) (call $dummy) (i32.const 9)) ) )\n  (func (export \"deep\") (result i32) (block (result i32) (block (result i32) (block (result i32) (block (result i32) (block (result i32) (block (result i32) (block (result i32) (block (result i32) (block (result i32) (block (result i32) (block (result i32) (block (result i32) (block (result i32) (block (result i32) (block (result i32) (block (result i32) (block (result i32) (block (result i32) (block (result i32) (block (result i32) (block (result i32) (block (result i32) (block (result i32) (block (result i32) (block (result i32) (block (result i32) (block (result i32) (block (result i32) (block (result i32) (block (result i32) (block (result i32) (block (result i32) (block (result i32) (block (result i32) (block (result i32) (block (result i32) (block (result i32) (block (result i32) (call $dummy) (i32.const 150) )) )) )) )) )) )) )) )) )) )) )) )) )) )) )) )) )) )) )) )\n  (func (export \"as-select-first\") (result i32) (select (block (result i32) (i32.const 1)) (i32.const 2) (i32.const 3)) )\n  (func (export \"as-select-mid\") (result i32) (select (i32.const 2) (block (result i32) (i32.const 1)) (i32.const 3)) )\n  (func (export \"as-select-last\") (result i32) (select (i32.const 2) (i32.const 3) (block (result i32) (i32.const 1))) )\n  (func (export \"as-loop-first\") (result i32) (loop (result i32) (block (result i32) (i32.const 1)) (call $dummy) (call $dummy)) )\n  (func (export \"as-loop-mid\") (result i32) (loop (result i32) (call $dummy) (block (result i32) (i32.const 1)) (call $dummy)) )\n  (func (export \"as-loop-last\") (result i32) (loop (result i32) (call $dummy) (call $dummy) (block (result i32) (i32.const 1))) )\n  (func (export \"as-if-condition\") (block (result i32) (i32.const 1)) (if (then (call $dummy))) )\n  (func (export \"as-if-then\") (result i32) (if (result i32) (i32.const 1) (then (block (result i32) (i32.const 1))) (else (i32.const 2))) )\n  (func (export \"as-if-else\") (result i32) (if (result i32) (i32.const 1) (then (i32.const 2)) (else (block (result i32) (i32.const 1)))) )\n  (func (export \"as-br_if-first\") (result i32) (block (result i32) (br_if 0 (block (result i32) (i32.const 1)) (i32.const 2))) )\n  (func (export \"as-br_if-last\") (result i32) (block (result i32) (br_if 0 (i32.const 2) (block (result i32) (i32.const 1)))) )\n  (func (export \"as-br_table-first\") (result i32) (block (result i32) (block (result i32) (i32.const 1)) (i32.const 2) (br_table 0 0)) )\n  (func (export \"as-br_table-last\") (result i32) (block (result i32) (i32.const 2) (block (result i32) (i32.const 1)) (br_table 0 0)) )\n  (func $ (param i32 i32) (result i32) (local.get 0)) (type $check (func (param i32 i32) (result i32))) (table funcref (elem $func))\n  (func (export \"as-call_indirect-first\") (result i32) (block (result i32) (call_indirect (type $check) (block (result i32) (i32.const 1)) (i32.const 2) (i32.const 0) ) ) )\n  (func (export \"as-call_indirect-mid\") (result i32) (block (result i32) (call_indirect (type $check) (i32.const 2) (block (result i32) (i32.const 1)) (i32.const 0) ) ) )\n  (func (export \"as-call_indirect-last\") (result i32) (block (result i32) (call_indirect (type $check) (i32.const 1) (i32.const 2) (block (result i32) (i32.const 0)) ) ) )\n  (func (export \"as-store-first\") (block (result i32) (i32.const 1)) (i32.const 1) (i32.store) )\n  (func (export \"as-store-last\") (i32.const 10) (block (result i32) (i32.const 1)) (i32.store) )\n  (func (export \"as-memory.grow-value\") (result i32) (memory.grow (block (result i32) (i32.const 1))) )\n  (func $f (param i32) (result i32) (local.get 0))\n  (func (export \"as-call-value\") (result i32) (call $f (block (result i32) (i32.const 1))) )\n  (func (export \"as-return-value\") (result i32) (block (result i32) (i32.const 1)) (return) )\n  (func (export \"as-drop-operand\") (drop (block (result i32) (i32.const 1))) )\n  (func (export \"as-br-value\") (result i32) (block (result i32) (br 0 (block (result i32) (i32.const 1)))) )\n  (func (export \"as-local.set-value\") (result i32) (local i32) (local.set 0 (block (result i32) (i32.const 1))) (local.get 0) )\n  (func (export \"as-local.tee-value\") (result i32) (local i32) (local.tee 0 (block (result i32) (i32.const 1))) ) (global $a (mut i32) (i32.const 10))\n  (func (export \"as-global.set-value\") (result i32) (global.set $a (block (result i32) (i32.const 1))) (global.get $a) )\n  (func (export \"as-load-operand\") (result i32) (i32.load (block (result i32) (i32.const 1))) )\n  (func (export \"as-unary-operand\") (result i32) (i32.ctz (block (result i32) (call $dummy) (i32.const 13))) )\n  (func (export \"as-binary-operand\") (result i32) (i32.mul (block (result i32) (call $dummy) (i32.const 3)) (block (result i32) (call $dummy) (i32.const 4)) ) )\n  (func (export \"as-test-operand\") (result i32) (i32.eqz (block (result i32) (call $dummy) (i32.const 13))) )\n  (func (export \"as-compare-operand\") (result i32) (f32.gt (block (result f32) (call $dummy) (f32.const 3)) (block (result f32) (call $dummy) (f32.const 3)) ) )\n  (func (export \"as-binary-operands\") (result i32) (i32.mul (block (result i32 i32) (call $dummy) (i32.const 3) (call $dummy) (i32.const 4) ) ) )\n  (func (export \"as-compare-operands\") (result i32) (f32.gt (block (result f32 f32) (call $dummy) (f32.const 3) (call $dummy) (f32.const 3) ) ) )\n  (func (export \"as-mixed-operands\") (result i32) (block (result i32 i32) (call $dummy) (i32.const 3) (call $dummy) (i32.const 4) ) (i32.const 5) (i32.add) (i32.mul) )\n  (func (export \"break-bare\") (result i32) (block (br 0) (unreachable)) (block (br_if 0 (i32.const 1)) (unreachable)) (block (br_table 0 (i32.const 0)) (unreachable)) (block (br_table 0 0 0 (i32.const 1)) (unreachable)) (i32.const 19) )\n  (func (export \"break-value\") (result i32) (block (result i32) (br 0 (i32.const 18)) (i32.const 19)) )\n  (func (export \"break-multi-value\") (result i32 i32 i64) (block (result i32 i32 i64) (br 0 (i32.const 18) (i32.const -18) (i64.const 18)) (i32.const 19) (i32.const -19) (i64.const 19) ) )\n  (func (export \"break-repeated\") (result i32) (block (result i32) (br 0 (i32.const 18)) (br 0 (i32.const 19)) (drop (br_if 0 (i32.const 20) (i32.const 0))) (drop (br_if 0 (i32.const 20) (i32.const 1))) (br 0 (i32.const 21)) (br_table 0 (i32.const 22) (i32.const 4)) (br_table 0 0 0 (i32.const 23) (i32.const 1)) (i32.const 21) ) )\n  (func (export \"break-inner\") (result i32) (local i32) (local.set 0 (i32.const 0)) (local.set 0 (i32.add (local.get 0) (block (result i32) (block (result i32) (br 1 (i32.const 0x1)))))) (local.set 0 (i32.add (local.get 0) (block (result i32) (block (br 0)) (i32.const 0x2)))) (local.set 0 (i32.add (local.get 0) (block (result i32) (i32.ctz (br 0 (i32.const 0x4))))) ) (local.set 0 (i32.add (local.get 0) (block (result i32) (i32.ctz (block (result i32) (br 1 (i32.const 0x8)))))) ) (local.get 0) )\n  (func (export \"param\") (result i32) (i32.const 1) (block (param i32) (result i32) (i32.const 2) (i32.add) ) )\n  (func (export \"params\") (result i32) (i32.const 1) (i32.const 2) (block (param i32 i32) (result i32) (i32.add) ) )\n  (func (export \"params-id\") (result i32) (i32.const 1) (i32.const 2) (block (param i32 i32) (result i32 i32)) (i32.add) )\n  (func (export \"param-break\") (result i32) (i32.const 1) (block (param i32) (result i32) (i32.const 2) (i32.add) (br 0) ) )\n  (func (export \"params-break\") (result i32) (i32.const 1) (i32.const 2) (block (param i32 i32) (result i32) (i32.add) (br 0) ) )\n  (func (export \"params-id-break\") (result i32) (i32.const 1) (i32.const 2) (block (param i32 i32) (result i32 i32) (br 0)) (i32.add) )\n  (func (export \"effects\") (result i32) (local i32) (block (local.set 0 (i32.const 1)) (local.set 0 (i32.mul (local.get 0) (i32.const 3))) (local.set 0 (i32.sub (local.get 0) (i32.const 5))) (local.set 0 (i32.mul (local.get 0) (i32.const 7))) (br 0) (local.set 0 (i32.mul (local.get 0) (i32.const 100))) ) (i32.eq (local.get 0) (i32.const -14)) ) (type $block-sig-1 (func)) (type $block-sig-2 (func (result i32))) (type $block-sig-3 (func (param $x i32))) (type $block-sig-4 (func (param i32 f64 i32) (result i32 f64 i32)))\n  (func (export \"type-use\") (block (type $block-sig-1)) (block (type $block-sig-2) (i32.const 0)) (block (type $block-sig-3) (drop)) (i32.const 0) (f64.const 0) (i32.const 0) (block (type $block-sig-4)) (drop) (drop) (drop) (block (type $block-sig-2) (result i32) (i32.const 0)) (block (type $block-sig-3) (param i32) (drop)) (i32.const 0) (f64.const 0) (i32.const 0) (block (type $block-sig-4) (param i32) (param f64 i32) (result i32 f64) (result i32) ) (drop) (drop) (drop) ))",
    "(assert_return (invoke \"empty\"))",
    "(assert_return (invoke \"singular\") (i32.const 7))",
    "(assert_return (invoke \"multi\") (i32.const 8))",
    "(assert_return (invoke \"nested\") (i32.const 9))",
    "(assert_return (invoke \"deep\") (i32.const 150))",
    "(assert_return (invoke \"as-select-first\") (i32.const 1))",
    "(assert_return (invoke \"as-select-mid\") (i32.const 2))",
    "(assert_return (invoke \"as-select-last\") (i32.const 2))",
    "(assert_return (invoke \"as-loop-first\") (i32.const 1))",
    "(assert_return (invoke \"as-loop-mid\") (i32.const 1))",
    "(assert_return (invoke \"as-loop-last\") (i32.const 1))",
    "(assert_return (invoke \"as-if-condition\"))",
    "(assert_return (invoke \"as-if-then\") (i32.const 1))",
    "(assert_return (invoke \"as-if-else\") (i32.const 2))",
    "(assert_return (invoke \"as-br_if-first\") (i32.const 1))",
    "(assert_return (invoke \"as-br_if-last\") (i32.const 2))",
    "(assert_return (invoke \"as-br_table-first\") (i32.const 1))",
    "(assert_return (invoke \"as-br_table-last\") (i32.const 2))",
    "(assert_return (invoke \"as-call_indirect-first\") (i32.const 1))",
    "(assert_return (invoke \"as-call_indirect-mid\") (i32.const 2))",
    "(assert_return (invoke \"as-call_indirect-last\") (i32.const 1))",
    "(assert_return (invoke \"as-store-first\"))",
    "(assert_return (invoke \"as-store-last\"))",
    "(assert_return (invoke \"as-memory.grow-value\") (i32.const 1))",
    "(assert_return (invoke \"as-call-value\") (i32.const 1))",
    "(assert_return (invoke \"as-return-value\") (i32.const 1))",
    "(assert_return (invoke \"as-drop-operand\"))",
    "(assert_return (invoke \"as-br-value\") (i32.const 1))",
    "(assert_return (invoke \"as-local.set-value\") (i32.const 1))",
    "(assert_return (invoke \"as-local.tee-value\") (i32.const 1))",
    "(assert_return (invoke \"as-global.set-value\") (i32.const 1))",
    "(assert_return (invoke \"as-load-operand\") (i32.const 1))",
    "(assert_return (invoke \"as-unary-operand\") (i32.const 0))",
    "(assert_return (invoke \"as-binary-operand\") (i32.const 12))",
    "(assert_return (invoke \"as-test-operand\") (i32.const 0))",
    "(assert_return (invoke \"as-compare-operand\") (i32.const 0))",
    "(assert_return (invoke \"as-binary-operands\") (i32.const 12))",
    "(assert_return (invoke \"as-compare-operands\") (i32.const 0))",
    "(assert_return (invoke \"as-mixed-operands\") (i32.const 27))",
    "(assert_return (invoke \"break-bare\") (i32.const 19))",
    "(assert_return (invoke \"break-value\") (i32.const 18))",
    "(assert_return (invoke \"break-multi-value\") (i32.const 18) (i32.const -18) (i64.const 18))",
    "(assert_return (invoke \"break-repeated\") (i32.const 18))",
    "(assert_return (invoke \"break-inner\") (i32.const 0xf))",
    "(assert_return (invoke \"param\") (i32.const 3))",
    "(assert_return (invoke \"params\") (i32.const 3))",
    "(assert_return (invoke \"params-id\") (i32.const 3))",
    "(assert_return (invoke \"param-break\") (i32.const 3))",
    "(assert_return (invoke \"params-break\") (i32.const 3))",
    "(assert_return (invoke \"params-id-break\") (i32.const 3))",
    "(assert_return (invoke \"effects\") (i32.const 1))",
    "(assert_return (invoke \"type-use\"))",
    "(assert_malformed (module quote \"(type $sig (func (param i32) (result i32)))\" \"(func (i32.const 0) (block (type $sig) (result i32) (param i32)))\" ) \"unexpected token\")",
    "(assert_malformed (module quote \"(type $sig (func (param i32) (result i32)))\" \"(func (i32.const 0) (block (param i32) (type $sig) (result i32)))\" ) \"unexpected token\")",
    "(assert_malformed (module quote \"(type $sig (func (param i32) (result i32)))\" \"(func (i32.const 0) (block (param i32) (result i32) (type $sig)))\" ) \"unexpected token\")",
    "(assert_malformed (module quote \"(type $sig (func (param i32) (result i32)))\" \"(func (i32.const 0) (block (result i32) (type $sig) (param i32)))\" ) \"unexpected token\")",
    "(assert_malformed (module quote \"(type $sig (func (param i32) (result i32)))\" \"(func (i32.const 0) (block (result i32) (param i32) (type $sig)))\" ) \"unexpected token\")",
    "(assert_malformed (module quote \"(func (i32.const 0) (block (result i32) (param i32)))\" ) \"unexpected token\")",
    "(assert_malformed (module quote \"(func (i32.const 0) (block (param $x i32) (drop)))\") \"unexpected token\")",
    "(assert_malformed (module quote \"(type $sig (func))\" \"(func (block (type $sig) (result i32) (i32.const 0)) (unreachable))\" ) \"inline function type\")",
    "(assert_malformed (module quote \"(type $sig (func (param i32) (result i32)))\" \"(func (block (type $sig) (result i32) (i32.const 0)) (unreachable))\" ) \"inline function type\")",
    "(assert_malformed (module quote \"(type $sig (func (param i32) (result i32)))\" \"(func (i32.const 0) (block (type $sig) (param i32) (drop)) (unreachable))\" ) \"inline function type\")",
    "(assert_malformed (module quote \"(type $sig (func (param i32 i32) (result i32)))\" \"(func (i32.const 0) (block (type $sig) (param i32) (result i32)) (unreachable))\" ) \"inline function type\")",
    "(assert_invalid (module (type $sig (func)) (func (block (type $sig) (i32.const 0))) ) \"type mismatch\")",
    "(assert_invalid (module (func $type-empty-i32 (result i32) (block))) \"type mismatch\")",
    "(assert_invalid (module (func $type-empty-i64 (result i64) (block))) \"type mismatch\")",
    "(assert_invalid (module (func $type-empty-f32 (result f32) (block))) \"type mismatch\")",
    "(assert_invalid (module (func $type-empty-f64 (result f64) (block))) \"type mismatch\")",
    "(assert_invalid (module (func $type-value-i32-vs-void (block (i32.const 1)) )) \"type mismatch\")",
    "(assert_invalid (module (func $type-value-i64-vs-void (block (i64.const 1)) )) \"type mismatch\")",
    "(assert_invalid (module (func $type-value-f32-vs-void (block (f32.const 1.0)) )) \"type mismatch\")",
    "(assert_invalid (module (func $type-value-f64-vs-void (block (f64.const 1.0)) )) \"type mismatch\")",
    "(assert_invalid (module (func $type-value-nums-vs-void (block (i32.const 1) (i32.const 2)) )) \"type mismatch\")",
    "(assert_invalid (module (func $type-value-empty-vs-i32 (result i32) (block (result i32)) )) \"type mismatch\")",
    "(assert_invalid (module (func $type-value-empty-vs-i64 (result i64) (block (result i64)) )) \"type mismatch\")",
    "(assert_invalid (module (func $type-value-empty-vs-f32 (result f32) (block (result f32)) )) \"type mismatch\")",
    "(assert_invalid (module (func $type-value-empty-vs-f64 (result f64) (block (result f64)) )) \"type mismatch\")",
    "(assert_invalid (module (func $type-value-empty-vs-nums (result i32 i32) (block (result i32 i32)) )) \"type mismatch\")",
    "(assert_invalid (module (func $type-value-empty-in-block (i32.const 0) (block (block (result i32)) (drop)) ) ) \"type mismatch\")",
    "(assert_invalid (module (func $type-value-empty-in-loop (i32.const 0) (loop (block (result i32)) (drop)) ) ) \"type mismatch\")",
    "(assert_invalid (module (func $type-value-empty-in-then (i32.const 0) (i32.const 0) (if (then (block (result i32)) (drop))) ) ) \"type mismatch\")",
    "(assert_invalid (module (func $type-value-void-vs-i32 (result i32) (block (result i32) (nop)) )) \"type mismatch\")",
    "(assert_invalid (module (func $type-value-void-vs-i64 (result i64) (block (result i64) (nop)) )) \"type mismatch\")",
    "(assert_invalid (module (func $type-value-void-vs-f32 (result f32) (block (result f32) (nop)) )) \"type mismatch\")",
    "(assert_invalid (module (func $type-value-void-vs-f64 (result f64) (block (result f64) (nop)) )) \"type mismatch\")",
    "(assert_invalid (module (func $type-value-void-vs-nums (result i32 i32) (block (result i32 i32) (nop)) )) \"type mismatch\")",
    "(assert_invalid (module (func $type-value-i32-vs-i64 (result i32) (block (result i32) (i64.const 0)) )) \"type mismatch\")",
    "(assert_invalid (module (func $type-value-i32-vs-f32 (result i32) (block (result i32) (f32.const 0.0)) )) \"type mismatch\")",
    "(assert_invalid (module (func $type-value-i32-vs-f64 (result i32) (block (result i32) (f64.const 0.0)) )) \"type mismatch\")",
    "(assert_invalid (module (func $type-value-i64-vs-i32 (result i64) (block (result i64) (i32.const 0)) )) \"type mismatch\")",
    "(assert_invalid (module (func $type-value-i64-vs-f32 (result i64) (block (result i64) (f32.const 0.0)) )) \"type mismatch\")",
    "(assert_invalid (module (func $type-value-i64-vs-f64 (result i64) (block (result i64) (f64.const 0.0)) )) \"type mismatch\")",
    "(assert_invalid (module (func $type-value-f32-vs-i32 (result f32) (block (result f32) (i32.const 0)) )) \"type mismatch\")",
    "(assert_invalid (module (func $type-value-f32-vs-i64 (result f32) (block (result f32) (i64.const 0)) )) \"type mismatch\")",
    "(assert_invalid (module (func $type-value-f32-vs-f64 (result f32) (block (result f32) (f64.const 0.0)) )) \"type mismatch\")",
    "(assert_invalid (module (func $type-value-f64-vs-i32 (result f64) (block (result f64) (i32.const 0)) )) \"type mismatch\")",
    "(assert_invalid (module (func $type-value-f64-vs-i64 (result f64) (block (result f64) (i64.const 0)) )) \"type mismatch\")",
    "(assert_invalid (module (func $type-value-f64-vs-f32 (result f32) (block (result f64) (f32.const 0.0)) )) \"type mismatch\")",
    "(assert_invalid (module (func $type-value-num-vs-nums (result i32 i32) (block (result i32 i32) (i32.const 0)) )) \"type mismatch\")",
    "(assert_invalid (module (func $type-value-partial-vs-nums (result i32 i32) (i32.const 1) (block (result i32 i32) (i32.const 2)) )) \"type mismatch\")",
    "(assert_invalid (module (func $type-value-nums-vs-num (result i32) (block (result i32) (i32.const 1) (i32.const 2)) )) \"type mismatch\")",
    "(assert_invalid (module (func $type-value-unreached-select-i32-i64 (result i32) (block (result i64) (select (unreachable) (unreachable) (unreachable))) )) \"type mismatch\")",
    "(assert_invalid (module (func $type-value-unreached-select-i32-f32 (result i32) (block (result f32) (select (unreachable) (unreachable) (unreachable))) )) \"type mismatch\")",
    "(assert_invalid (module (func $type-value-unreached-select-i32-f64 (result i32) (block (result f64) (select (unreachable) (unreachable) (unreachable))) )) \"type mismatch\")",
    "(assert_invalid (module (func $type-value-unreached-select-i64-i32 (result i64) (block (result i32) (select (unreachable) (unreachable) (unreachable))) )) \"type mismatch\")",
    "(assert_invalid (module (func $type-value-unreached-select-i64-f32 (result i64) (block (result f32) (select (unreachable) (unreachable) (unreachable))) )) \"type mismatch\")",
    "(assert_invalid (module (func $type-value-unreached-select-i64-f64 (result i64) (block (result f64) (select (unreachable) (unreachable) (unreachable))) )) \"type mismatch\")",
    "(assert_invalid (module (func $type-value-unreached-select-f32-i32 (result f32) (block (result i32) (select (unreachable) (unreachable) (unreachable))) )) \"type mismatch\")",
    "(assert_invalid (module (func $type-value-unreached-select-f32-i64 (result f32) (block (result i64) (select (unreachable) (unreachable) (unreachable))) )) \"type mismatch\")",
    "(assert_invalid (module (func $type-value-unreached-select-f32-f64 (result f32) (block (result f64) (select (unreachable) (unreachable) (unreachable))) )) \"type mismatch\")",
    "(assert_invalid (module (func $type-value-unreached-select-f64-i32 (result f64) (block (result i32) (select (unreachable) (unreachable) (unreachable))) )) \"type mismatch\")",
    "(assert_invalid (module (func $type-value-unreached-select-f64-i64 (result f64) (block (result i64) (select (unreachable) (unreachable) (unreachable))) )) \"type mismatch\")",
    "(assert_invalid (module (func $type-value-unreached-select-f64-f32 (result f64) (block (result f32) (select (unreachable) (unreachable) (unreachable))) )) \"type mismatch\")",
    "(assert_invalid (module (func $type-break-last-void-vs-i32 (result i32) (block (result i32) (br 0)) )) \"type mismatch\")",
    "(assert_invalid (module (func $type-break-last-void-vs-i64 (result i64) (block (result i64) (br 0)) )) \"type mismatch\")",
    "(assert_invalid (module (func $type-break-last-void-vs-f32 (result f32) (block (result f32) (br 0)) )) \"type mismatch\")",
    "(assert_invalid (module (func $type-break-last-void-vs-f64 (result f64) (block (result f64) (br 0)) )) \"type mismatch\")",
    "(assert_invalid (module (func $type-break-last-void-vs-nums (result i32 i32) (block (result i32 i32) (br 0)) )) \"type mismatch\")",
    "(assert_invalid (module (func $type-break-empty-vs-i32 (result i32) (block (result i32) (br 0) (i32.const 1)) )) \"type mismatch\")",
    "(assert_invalid (module (func $type-break-empty-vs-i64 (result i64) (block (result i64) (br 0) (i64.const 1)) )) \"type mismatch\")",
    "(assert_invalid (module (func $type-break-empty-vs-f32 (result f32) (block (result f32) (br 0) (f32.const 1.0)) )) \"type mismatch\")",
    "(assert_invalid (module (func $type-break-empty-vs-f64 (result f64) (block (result f64) (br 0) (f64.const 1.0)) )) \"type mismatch\")",
    "(assert_invalid (module (func $type-break-empty-vs-nums (result i32 i32) (block (result i32 i32) (br 0) (i32.const 1) (i32.const 2)) )) \"type mismatch\")",
    "(assert_invalid (module (func $type-break-void-vs-i32 (result i32) (block (result i32) (br 0 (nop)) (i32.const 1)) )) \"type mismatch\")",
    "(assert_invalid (module (func $type-break-void-vs-i64 (result i64) (block (result i64) (br 0 (nop)) (i64.const 1)) )) \"type mismatch\")",
    "(assert_invalid (module (func $type-break-void-vs-f32 (result f32) (block (result f32) (br 0 (nop)) (f32.const 1.0)) )) \"type mismatch\")",
    "(assert_invalid (module (func $type-break-void-vs-f64 (result f64) (block (result f64) (br 0 (nop)) (f64.const 1.0)) )) \"type mismatch\")",
    "(assert_invalid (module (func $type-break-i32-vs-i64 (result i32) (block (result i32) (br 0 (i64.const 1)) (i32.const 1)) )) \"type mismatch\")",
    "(assert_invalid (module (func $type-break-i32-vs-f32 (result i32) (block (result i32) (br 0 (f32.const 1.0)) (i32.const 1)) )) \"type mismatch\")",
    "(assert_invalid (module (func $type-break-i32-vs-f64 (result i32) (block (result i32) (br 0 (f64.const 1.0)) (i32.const 1)) )) \"type mismatch\")",
    "(assert_invalid (module (func $type-break-i64-vs-i32 (result i64) (block (result i64) (br 0 (i32.const 1)) (i64.const 1)) )) \"type mismatch\")",
    "(assert_invalid (module (func $type-break-i64-vs-f32 (result i64) (block (result i64) (br 0 (f32.const 1.0)) (i64.const 1)) )) \"type mismatch\")",
    "(assert_invalid (module (func $type-break-i64-vs-f64 (result i64) (block (result i64) (br 0 (f64.const 1.0)) (i64.const 1)) )) \"type mismatch\")",
    "(assert_invalid (module (func $type-break-f32-vs-i32 (result f32) (block (result f32) (br 0 (i32.const 1)) (f32.const 1.0)) )) \"type mismatch\")",
    "(assert_invalid (module (func $type-break-f32-vs-i64 (result f32) (block (result f32) (br 0 (i64.const 1)) (f32.const 1.0)) )) \"type mismatch\")",
    "(assert_invalid (module (func $type-break-f32-vs-f64 (result f32) (block (result f32) (br 0 (f64.const 1.0)) (f32.const 1.0)) )) \"type mismatch\")",
    "(assert_invalid (module (func $type-break-f64-vs-i32 (result f64) (block (result i64) (br 0 (i32.const 1)) (f64.const 1.0)) )) \"type mismatch\")",
    "(assert_invalid (module (func $type-break-f64-vs-i64 (result f64) (block (result f64) (br 0 (i64.const 1)) (f64.const 1.0)) )) \"type mismatch\")",
    "(assert_invalid (module (func $type-break-f64-vs-f32 (result f64) (block (result f64) (br 0 (f32.const 1.0)) (f64.const 1)) )) \"type mismatch\")",
    "(assert_invalid (module (func $type-break-num-vs-nums (result i32 i32) (block (result i32 i32) (br 0 (i32.const 0)) (i32.const 1) (i32.const 2)) )) \"type mismatch\")",
    "(assert_invalid (module (func $type-break-partial-vs-nums (result i32 i32) (i32.const 1) (block (result i32 i32) (br 0 (i32.const 0)) (i32.const 2)) )) \"type mismatch\")",
    "(assert_invalid (module (func $type-break-first-void-vs-i32 (result i32) (block (result i32) (br 0 (nop)) (br 0 (i32.const 1))) )) \"type mismatch\")",
    "(assert_invalid (module (func $type-break-first-void-vs-i64 (result i64) (block (result i64) (br 0 (nop)) (br 0 (i64.const 1))) )) \"type mismatch\")",
    "(assert_invalid (module (func $type-break-first-void-vs-f32 (result f32) (block (result f32) (br 0 (nop)) (br 0 (f32.const 1.0))) )) \"type mismatch\")",
    "(assert_invalid (module (func $type-break-first-void-vs-f64 (result f64) (block (result f64) (br 0 (nop)) (br 0 (f64.const 1.0))) )) \"type mismatch\")",
    "(assert_invalid (module (func $type-break-first-void-vs-nums (result i32 i32) (block (result i32 i32) (br 0 (nop)) (br 0 (i32.const 1) (i32.const 2))) )) \"type mismatch\")",
    "(assert_invalid (module (func $type-break-first-i32-vs-i64 (result i32) (block (result i32) (br 0 (i64.const 1)) (br 0 (i32.const 1))) )) \"type mismatch\")",
    "(assert_invalid (module (func $type-break-first-i32-vs-f32 (result i32) (block (result i32) (br 0 (f32.const 1.0)) (br 0 (i32.const 1))) )) \"type mismatch\")",
    "(assert_invalid (module (func $type-break-first-i32-vs-f64 (result i32) (block (result i32) (br 0 (f64.const 1.0)) (br 0 (i32.const 1))) )) \"type mismatch\")",
    "(assert_invalid (module (func $type-break-first-i64-vs-i32 (result i64) (block (result i64) (br 0 (i32.const 1)) (br 0 (i64.const 1))) )) \"type mismatch\")",
    "(assert_invalid (module (func $type-break-first-i64-vs-f32 (result i64) (block (result i64) (br 0 (f32.const 1.0)) (br 0 (i64.const 1))) )) \"type mismatch\")",
    "(assert_invalid (module (func $type-break-first-i64-vs-f64 (result i64) (block (result i64) (br 0 (f64.const 1.0)) (br 0 (i64.const 1))) )) \"type mismatch\")",
    "(assert_invalid (module (func $type-break-first-f32-vs-i32 (result f32) (block (result f32) (br 0 (i32.const 1)) (br 0 (f32.const 1.0))) )) \"type mismatch\")",
    "(assert_invalid (module (func $type-break-first-f32-vs-i64 (result f32) (block (result f32) (br 0 (i64.const 1)) (br 0 (f32.const 1.0))) )) \"type mismatch\")",
    "(assert_invalid (module (func $type-break-first-f32-vs-f64 (result f32) (block (result f32) (br 0 (f64.const 1.0)) (br 0 (f32.const 1.0))) )) \"type mismatch\")",
    "(assert_invalid (module (func $type-break-first-f64-vs-i32 (result f64) (block (result f64) (br 0 (i32.const 1)) (br 0 (f64.const 1.0))) )) \"type mismatch\")",
    "(assert_invalid (module (func $type-break-first-f64-vs-i64 (result f64) (block (result f64) (br 0 (i64.const 1)) (br 0 (f64.const 1.0))) )) \"type mismatch\")",
    "(assert_invalid (module (func $type-break-first-f64-vs-f32 (result f64) (block (result f64) (br 0 (f32.const 1.0)) (br 0 (f64.const 1.0))) )) \"type mismatch\")",
    "(assert_invalid (module (func $type-break-first-num-vs-nums (result i32 i32) (block (result i32 i32) (br 0 (i32.const 0)) (br 0 (i32.const 1) (i32.const 2))) )) \"type mismatch\")",
    "(assert_invalid (module (func $type-break-nested-i32-vs-void (block (result i32) (block (result i32) (br 1 (i32.const 1))) (br 0)) )) \"type mismatch\")",
    "(assert_invalid (module (func $type-break-nested-i64-vs-void (block (result i64) (block (result i64) (br 1 (i64.const 1))) (br 0)) )) \"type mismatch\")",
    "(assert_invalid (module (func $type-break-nested-f32-vs-void (block (result f32) (block (result f32) (br 1 (f32.const 1.0))) (br 0)) )) \"type mismatch\")",
    "(assert_invalid (module (func $type-break-nested-f64-vs-void (block (result f64) (block (result f64) (br 1 (f64.const 1.0))) (br 0)) )) \"type mismatch\")",
    "(assert_invalid (module (func $type-break-nested-nums-vs-void (block (result i32 i32) (block (result i32 i32) (br 1 (i32.const 1) (i32.const 2))) (br 0)) )) \"type mismatch\")",
    "(assert_invalid (module (func $type-break-nested-empty-vs-i32 (result i32) (block (result i32) (block (br 1)) (br 0 (i32.const 1))) )) \"type mismatch\")",
    "(assert_invalid (module (func $type-break-nested-empty-vs-i64 (result i64) (block (result i64) (block (br 1)) (br 0 (i64.const 1))) )) \"type mismatch\")",
    "(assert_invalid (module (func $type-break-nested-empty-vs-f32 (result f32) (block (result f32) (block (br 1)) (br 0 (f32.const 1.0))) )) \"type mismatch\")",
    "(assert_invalid (module (func $type-break-nested-empty-vs-f64 (result f64) (block (result f64) (block (br 1)) (br 0 (f64.const 1))) )) \"type mismatch\")",
    "(assert_invalid (module (func $type-break-nested-empty-vs-nums (result i32 i32) (block (result i32 i32) (block (br 1)) (br 0 (i32.const 1) (i32.const 2))) )) \"type mismatch\")",
    "(assert_invalid (module (func $type-break-nested-void-vs-i32 (result i32) (block (result i32) (block (result i32) (br 1 (nop))) (br 0 (i32.const 1))) )) \"type mismatch\")",
    "(assert_invalid (module (func $type-break-nested-void-vs-i64 (result i64) (block (result i64) (block (result i64) (br 1 (nop))) (br 0 (i64.const 1))) )) \"type mismatch\")",
    "(assert_invalid (module (func $type-break-nested-void-vs-f32 (result f32) (block (result f32) (block (result f32) (br 1 (nop))) (br 0 (f32.const 1.0))) )) \"type mismatch\")",
    "(assert_invalid (module (func $type-break-nested-void-vs-f64 (result f64) (block (result f64) (block (result f64) (br 1 (nop))) (br 0 (f64.const 1.0))) )) \"type mismatch\")",
    "(assert_invalid (module (func $type-break-nested-void-vs-nums (result i32 i32) (block (result i32 i32) (block (result i32 i32) (br 1 (nop))) (br 0 (i32.const 1) (i32.const 2))) )) \"type mismatch\")",
    "(assert_invalid (module (func $type-break-nested-i32-vs-i64 (result i32) (block (result i32) (block (result i32) (br 1 (i64.const 1))) (br 0 (i32.const 1)) ) )) \"type mismatch\")",
    "(assert_invalid (module (func $type-break-nested-i32-vs-f32 (result i32) (block (result i32) (block (result i32) (br 1 (f32.const 1.0))) (br 0 (i32.const 1)) ) )) \"type mismatch\")",
    "(assert_invalid (module (func $type-break-nested-i32-vs-f64 (result i32) (block (result i32) (block (result i32) (br 1 (f64.const 1.0))) (br 0 (i32.const 1)) ) )) \"type mismatch\")",
    "(assert_invalid (module (func $type-break-nested-i64-vs-i32 (result i64) (block (result i64) (block (result i64) (br 1 (i32.const 1))) (br 0 (i64.const 1)) ) )) \"type mismatch\")",
    "(assert_invalid (module (func $type-break-nested-i64-vs-f32 (result i64) (block (result i64) (block (result i64) (br 1 (f32.const 1.0))) (br 0 (i64.const 1)) ) )) \"type mismatch\")",
    "(assert_invalid (module (func $type-break-nested-i64-vs-f64 (result i64) (block (result i64) (block (result i64) (br 1 (f64.const 1.0))) (br 0 (i64.const 1)) ) )) \"type mismatch\")",
    "(assert_invalid (module (func $type-break-nested-f32-vs-i32 (result f32) (block (result f32) (block (result f32) (br 1 (i32.const 1))) (br 0 (f32.const 1.0)) ) )) \"type mismatch\")",
    "(assert_invalid (module (func $type-break-nested-f32-vs-i64 (result f32) (block (result f32) (block (result f32) (br 1 (i64.const 1))) (br 0 (f32.const 1.0)) ) )) \"type mismatch\")",
    "(assert_invalid (module (func $type-break-nested-f32-vs-f64 (result f32) (block (result f32) (block (result f32) (br 1 (f64.const 1.0))) (br 0 (f32.const 1.0)) ) )) \"type mismatch\")",
    "(assert_invalid (module (func $type-break-nested-f64-vs-i32 (result f64) (block (result f64) (block (result f64) (br 1 (i32.const 1))) (br 0 (f64.const 1.0)) ) )) \"type mismatch\")",
    "(assert_invalid (module (func $type-break-nested-f64-vs-i64 (result f64) (block (result f64) (block (result f64) (br 1 (i64.const 1))) (br 0 (f64.const 1.0)) ) )) \"type mismatch\")",
    "(assert_invalid (module (func $type-break-nested-f64-vs-f32 (result f64) (block (result f64) (block (result f64) (br 1 (f32.const 1.0))) (br 0 (f64.const 1.0)) ) )) \"type mismatch\")",
    "(assert_invalid (module (func $type-break-nested-num-vs-nums (result i32 i32) (block (result i32 i32) (block (result i32 i32) (br 1 (i32.const 0))) (br 0 (i32.const 1) (i32.const 2)) ) )) \"type mismatch\")",
    "(assert_invalid (module (func $type-break-operand-empty-vs-i32 (result i32) (i32.ctz (block (br 0))) )) \"type mismatch\")",
    "(assert_invalid (module (func $type-break-operand-empty-vs-i64 (result i64) (i64.ctz (block (br 0))) )) \"type mismatch\")",
    "(assert_invalid (module (func $type-break-operand-empty-vs-f32 (result f32) (f32.floor (block (br 0))) )) \"type mismatch\")",
    "(assert_invalid (module (func $type-break-operand-empty-vs-f64 (result f64) (f64.floor (block (br 0))) )) \"type mismatch\")",
    "(assert_invalid (module (func $type-break-operand-empty-vs-nums (result i32) (i32.add (block (br 0))) )) \"type mismatch\")",
    "(assert_invalid (module (func $type-break-operand-void-vs-i32 (result i32) (i32.ctz (block (br 0 (nop)))) )) \"type mismatch\")",
    "(assert_invalid (module (func $type-break-operand-void-vs-i64 (result i64) (i64.ctz (block (br 0 (nop)))) )) \"type mismatch\")",
    "(assert_invalid (module (func $type-break-operand-void-vs-f32 (result f32) (f32.floor (block (br 0 (nop)))) )) \"type mismatch\")",
    "(assert_invalid (module (func $type-break-operand-void-vs-f64 (result f64) (f64.floor (block (br 0 (nop)))) )) \"type mismatch\")",
    "(assert_invalid (module (func $type-break-operand-void-vs-nums (result i32) (i32.add (block (br 0 (nop)))) )) \"type mismatch\")",
    "(assert_invalid (module (func $type-break-operand-i32-vs-i64 (result i32) (i64.ctz (block (br 0 (i64.const 9)))) )) \"type mismatch\")",
    "(assert_invalid (module (func $type-break-operand-i32-vs-f32 (result i32) (f32.floor (block (br 0 (f32.const 9.0)))) )) \"type mismatch\")",
    "(assert_invalid (module (func $type-break-operand-i32-vs-f64 (result i32) (f64.floor (block (br 0 (f64.const 9.0)))) )) \"type mismatch\")",
    "(assert_invalid (module (func $type-break-operand-i64-vs-i32 (result i64) (i32.ctz (block (br 0 (i32.const 9)))) )) \"type mismatch\")",
    "(assert_invalid (module (func $type-break-operand-i64-vs-f32 (result i64) (f32.floor (block (br 0 (f32.const 9.0)))) )) \"type mismatch\")",
    "(assert_invalid (module (func $type-break-operand-i64-vs-f64 (result i64) (f64.floor (block (br 0 (f64.const 9.0)))) )) \"type mismatch\")",
    "(assert_invalid (module (func $type-break-operand-f32-vs-i32 (result f32) (i32.ctz (block (br 0 (i32.const 9)))) )) \"type mismatch\")",
    "(assert_invalid (module (func $type-break-operand-f32-vs-i64 (result f32) (i64.ctz (block (br 0 (i64.const 9)))) )) \"type mismatch\")",
    "(assert_invalid (module (func $type-break-operand-f32-vs-f64 (result f32) (f64.floor (block (br 0 (f64.const 9.0)))) )) \"type mismatch\")",
    "(assert_invalid (module (func $type-break-operand-f64-vs-i32 (result f64) (i32.ctz (block (br 0 (i32.const 9)))) )) \"type mismatch\")",
    "(assert_invalid (module (func $type-break-operand-f64-vs-i64 (result f64) (i64.ctz (block (br 0 (i64.const 9)))) )) \"type mismatch\")",
    "(assert_invalid (module (func $type-break-operand-f64-vs-f32 (result f64) (f32.floor (block (br 0 (f32.const 9.0)))) )) \"type mismatch\")",
    "(assert_invalid (module (func $type-break-operand-num-vs-nums (result i32) (i32.add (block (br 0 (i64.const 9) (i32.const 10)))) )) \"type mismatch\")",
    "(assert_invalid (module (func $type-param-void-vs-num (block (param i32) (drop)) )) \"type mismatch\")",
    "(assert_invalid (module (func $type-param-void-vs-nums (block (param i32 f64) (drop) (drop)) )) \"type mismatch\")",
    "(assert_invalid (module (func $type-param-num-vs-num (f32.const 0) (block (param i32) (drop)) )) \"type mismatch\")",
    "(assert_invalid (module (func $type-param-num-vs-nums (f32.const 0) (block (param f32 i32) (drop) (drop)) )) \"type mismatch\")",
    "(assert_invalid (module (func $type-param-nested-void-vs-num (block (block (param i32) (drop))) )) \"type mismatch\")",
    "(assert_invalid (module (func $type-param-void-vs-nums (block (block (param i32 f64) (drop) (drop))) )) \"type mismatch\")",
    "(assert_invalid (module (func $type-param-num-vs-num (block (f32.const 0) (block (param i32) (drop))) )) \"type mismatch\")",
    "(assert_invalid (module (func $type-param-num-vs-nums (block (f32.const 0) (block (param f32 i32) (drop) (drop))) )) \"type mismatch\")",
    "(assert_malformed (module quote \"(func (param i32) (result i32) block (param $x i32) end)\") \"unexpected token\")",
    "(assert_malformed (module quote \"(func (param i32) (result i32) (block (param $x i32)))\") \"unexpected token\")",
    "(assert_malformed (module quote \"(func block end $l)\") \"mismatching label\")",
    "(assert_malformed (module quote \"(func block $a end $l)\") \"mismatching label\")"
  ],
  "dump": {
    "block.0.wasm": {
      "header": "\nblock.0.wasm:\tfile format wasm 0x1\n\nSections:\n\n     Type start=0x0000000a end=0x00000047 (size=0x0000003d) count: 11\n Function start=0x00000049 end=0x00000081 (size=0x00000038) count: 55\n    Table start=0x00000083 end=0x00000088 (size=0x00000005) count: 1\n   Memory start=0x0000008a end=0x0000008d (size=0x00000003) count: 1\n   Global start=0x0000008f end=0x00000095 (size=0x00000006) count: 1\n   Export start=0x00000098 end=0x000003e8 (size=0x00000350) count: 52\n     Elem start=0x000003ea end=0x000003f1 (size=0x00000007) count: 1\n     Code start=0x000003f4 end=0x00000846 (size=0x00000452) count: 55\n",
      "details": "\nblock.0.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nType[11]:\n - type[0] (i32, i32) -> i32\n - type[1] () -> nil\n - type[2] () -> i32\n - type[3] (i32) -> nil\n - type[4] (i32, f64, i32) -> (i32, f64, i32)\n - type[5] () -> (i32, i64, i32)\n - type[6] (i32) -> i32\n - type[7] () -> (i32, i32)\n - type[8] () -> (f32, f32)\n - type[9] () -> (i32, i32, i64)\n - type[10] (i32, i32) -> (i32, i32)\nFunction[55]:\n - func[0] sig=1\n - func[1] sig=1 <empty>\n - func[2] sig=2 <singular>\n - func[3] sig=2 <multi>\n - func[4] sig=2 <nested>\n - func[5] sig=2 <deep>\n - func[6] sig=2 <as-select-first>\n - func[7] sig=2 <as-select-mid>\n - func[8] sig=2 <as-select-last>\n - func[9] sig=2 <as-loop-first>\n - func[10] sig=2 <as-loop-mid>\n - func[11] sig=2 <as-loop-last>\n - func[12] sig=1 <as-if-condition>\n - func[13] sig=2 <as-if-then>\n - func[14] sig=2 <as-if-else>\n - func[15] sig=2 <as-br_if-first>\n - func[16] sig=2 <as-br_if-last>\n - func[17] sig=2 <as-br_table-first>\n - func[18] sig=2 <as-br_table-last>\n - func[19] sig=0\n - func[20] sig=2 <as-call_indirect-first>\n - func[21] sig=2 <as-call_indirect-mid>\n - func[22] sig=2 <as-call_indirect-last>\n - func[23] sig=1 <as-store-first>\n - func[24] sig=1 <as-store-last>\n - func[25] sig=2 <as-memory.grow-value>\n - func[26] sig=6\n - func[27] sig=2 <as-call-value>\n - func[28] sig=2 <as-return-value>\n - func[29] sig=1 <as-drop-operand>\n - func[30] sig=2 <as-br-value>\n - func[31] sig=2 <as-local.set-value>\n - func[32] sig=2 <as-local.tee-value>\n - func[33] sig=2 <as-global.set-value>\n - func[34] sig=2 <as-load-operand>\n - func[35] sig=2 <as-unary-operand>\n - func[36] sig=2 <as-binary-operand>\n - func[37] sig=2 <as-test-operand>\n - func[38] sig=2 <as-compare-operand>\n - func[39] sig=2 <as-binary-operands>\n - func[40] sig=2 <as-compare-operands>\n - func[41] sig=2 <as-mixed-operands>\n - func[42] sig=2 <break-bare>\n - func[43] sig=2 <break-value>\n - func[44] sig=9 <break-multi-value>\n - func[45] sig=2 <break-repeated>\n - func[46] sig=2 <break-inner>\n - func[47] sig=2 <param>\n - func[48] sig=2 <params>\n - func[49] sig=2 <params-id>\n - func[50] sig=2 <param-break>\n - func[51] sig=2 <params-break>\n - func[52] sig=2 <params-id-break>\n - func[53] sig=2 <effects>\n - func[54] sig=1 <type-use>\nTable[1]:\n - table[0] type=funcref initial=1 max=1\nMemory[1]:\n - memory[0] pages: initial=1\nGlobal[1]:\n - global[0] i32 mutable=1 - init i32=10\nExport[52]:\n - func[1] <empty> -> \"empty\"\n - func[2] <singular> -> \"singular\"\n - func[3] <multi> -> \"multi\"\n - func[4] <nested> -> \"nested\"\n - func[5] <deep> -> \"deep\"\n - func[6] <as-select-first> -> \"as-select-first\"\n - func[7] <as-select-mid> -> \"as-select-mid\"\n - func[8] <as-select-last> -> \"as-select-last\"\n - func[9] <as-loop-first> -> \"as-loop-first\"\n - func[10] <as-loop-mid> -> \"as-loop-mid\"\n - func[11] <as-loop-last> -> \"as-loop-last\"\n - func[12] <as-if-condition> -> \"as-if-condition\"\n - func[13] <as-if-then> -> \"as-if-then\"\n - func[14] <as-if-else> -> \"as-if-else\"\n - func[15] <as-br_if-first> -> \"as-br_if-first\"\n - func[16] <as-br_if-last> -> \"as-br_if-last\"\n - func[17] <as-br_table-first> -> \"as-br_table-first\"\n - func[18] <as-br_table-last> -> \"as-br_table-last\"\n - func[20] <as-call_indirect-first> -> \"as-call_indirect-first\"\n - func[21] <as-call_indirect-mid> -> \"as-call_indirect-mid\"\n - func[22] <as-call_indirect-last> -> \"as-call_indirect-last\"\n - func[23] <as-store-first> -> \"as-store-first\"\n - func[24] <as-store-last> -> \"as-store-last\"\n - func[25] <as-memory.grow-value> -> \"as-memory.grow-value\"\n - func[27] <as-call-value> -> \"as-call-value\"\n - func[28] <as-return-value> -> \"as-return-value\"\n - func[29] <as-drop-operand> -> \"as-drop-operand\"\n - func[30] <as-br-value> -> \"as-br-value\"\n - func[31] <as-local.set-value> -> \"as-local.set-value\"\n - func[32] <as-local.tee-value> -> \"as-local.tee-value\"\n - func[33] <as-global.set-value> -> \"as-global.set-value\"\n - func[34] <as-load-operand> -> \"as-load-operand\"\n - func[35] <as-unary-operand> -> \"as-unary-operand\"\n - func[36] <as-binary-operand> -> \"as-binary-operand\"\n - func[37] <as-test-operand> -> \"as-test-operand\"\n - func[38] <as-compare-operand> -> \"as-compare-operand\"\n - func[39] <as-binary-operands> -> \"as-binary-operands\"\n - func[40] <as-compare-operands> -> \"as-compare-operands\"\n - func[41] <as-mixed-operands> -> \"as-mixed-operands\"\n - func[42] <break-bare> -> \"break-bare\"\n - func[43] <break-value> -> \"break-value\"\n - func[44] <break-multi-value> -> \"break-multi-value\"\n - func[45] <break-repeated> -> \"break-repeated\"\n - func[46] <break-inner> -> \"break-inner\"\n - func[47] <param> -> \"param\"\n - func[48] <params> -> \"params\"\n - func[49] <params-id> -> \"params-id\"\n - func[50] <param-break> -> \"param-break\"\n - func[51] <params-break> -> \"params-break\"\n - func[52] <params-id-break> -> \"params-id-break\"\n - func[53] <effects> -> \"effects\"\n - func[54] <type-use> -> \"type-use\"\nElem[1]:\n - segment[0] flags=0 table=0 count=1 - init i32=0\n  - elem[0] = ref.func:19\nCode[55]:\n - func[0] size=2\n - func[1] size=8 <empty>\n - func[2] size=11 <singular>\n - func[3] size=62 <multi>\n - func[4] size=21 <nested>\n - func[5] size=121 <deep>\n - func[6] size=12 <as-select-first>\n - func[7] size=12 <as-select-mid>\n - func[8] size=12 <as-select-last>\n - func[9] size=14 <as-loop-first>\n - func[10] size=14 <as-loop-mid>\n - func[11] size=14 <as-loop-last>\n - func[12] size=12 <as-if-condition>\n - func[13] size=15 <as-if-then>\n - func[14] size=15 <as-if-else>\n - func[15] size=14 <as-br_if-first>\n - func[16] size=14 <as-br_if-last>\n - func[17] size=16 <as-br_table-first>\n - func[18] size=16 <as-br_table-last>\n - func[19] size=4\n - func[20] size=17 <as-call_indirect-first>\n - func[21] size=17 <as-call_indirect-mid>\n - func[22] size=17 <as-call_indirect-last>\n - func[23] size=12 <as-store-first>\n - func[24] size=12 <as-store-last>\n - func[25] size=9 <as-memory.grow-value>\n - func[26] size=4\n - func[27] size=9 <as-call-value>\n - func[28] size=8 <as-return-value>\n - func[29] size=8 <as-drop-operand>\n - func[30] size=12 <as-br-value>\n - func[31] size=13 <as-local.set-value>\n - func[32] size=11 <as-local.tee-value>\n - func[33] size=11 <as-global.set-value>\n - func[34] size=10 <as-load-operand>\n - func[35] size=10 <as-unary-operand>\n - func[36] size=17 <as-binary-operand>\n - func[37] size=10 <as-test-operand>\n - func[38] size=23 <as-compare-operand>\n - func[39] size=14 <as-binary-operands>\n - func[40] size=20 <as-compare-operands>\n - func[41] size=17 <as-mixed-operands>\n - func[42] size=38 <break-bare>\n - func[43] size=11 <break-value>\n - func[44] size=19 <break-multi-value>\n - func[45] size=49 <break-repeated>\n - func[46] size=69 <break-inner>\n - func[47] size=10 <param>\n - func[48] size=10 <params>\n - func[49] size=10 <params-id>\n - func[50] size=12 <param-break>\n - func[51] size=12 <params-break>\n - func[52] size=12 <params-id-break>\n - func[53] size=47 <effects>\n - func[54] size=61 <type-use>\n",
      "disassemble": "\nblock.0.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n0003f6 func[0]:\n 0003f7: 0b                         | end\n0003f9 func[1] <empty>:\n 0003fa: 02 40                      | block\n 0003fc: 0b                         | end\n 0003fd: 02 40                      | block\n 0003ff: 0b                         | end\n 000400: 0b                         | end\n000402 func[2] <singular>:\n 000403: 02 40                      | block\n 000405: 01                         |   nop\n 000406: 0b                         | end\n 000407: 02 7f                      | block i32\n 000409: 41 07                      |   i32.const 7\n 00040b: 0b                         | end\n 00040c: 0b                         | end\n00040e func[3] <multi>:\n 00040f: 02 40                      | block\n 000411: 10 00                      |   call 0\n 000413: 10 00                      |   call 0\n 000415: 10 00                      |   call 0\n 000417: 10 00                      |   call 0\n 000419: 0b                         | end\n 00041a: 02 7f                      | block i32\n 00041c: 10 00                      |   call 0\n 00041e: 10 00                      |   call 0\n 000420: 10 00                      |   call 0\n 000422: 41 07                      |   i32.const 7\n 000424: 10 00                      |   call 0\n 000426: 0b                         | end\n 000427: 1a                         | drop\n 000428: 02 05                      | block type[5]\n 00042a: 10 00                      |   call 0\n 00042c: 10 00                      |   call 0\n 00042e: 10 00                      |   call 0\n 000430: 41 08                      |   i32.const 8\n 000432: 10 00                      |   call 0\n 000434: 10 00                      |   call 0\n 000436: 10 00                      |   call 0\n 000438: 10 00                      |   call 0\n 00043a: 42 07                      |   i64.const 7\n 00043c: 10 00                      |   call 0\n 00043e: 10 00                      |   call 0\n 000440: 10 00                      |   call 0\n 000442: 10 00                      |   call 0\n 000444: 41 09                      |   i32.const 9\n 000446: 10 00                      |   call 0\n 000448: 0b                         | end\n 000449: 1a                         | drop\n 00044a: 1a                         | drop\n 00044b: 0b                         | end\n00044d func[4] <nested>:\n 00044e: 02 7f                      | block i32\n 000450: 02 40                      |   block\n 000452: 10 00                      |     call 0\n 000454: 02 40                      |     block\n 000456: 0b                         |     end\n 000457: 01                         |     nop\n 000458: 0b                         |   end\n 000459: 02 7f                      |   block i32\n 00045b: 10 00                      |     call 0\n 00045d: 41 09                      |     i32.const 9\n 00045f: 0b                         |   end\n 000460: 0b                         | end\n 000461: 0b                         | end\n000463 func[5] <deep>:\n 000464: 02 7f                      | block i32\n 000466: 02 7f                      |   block i32\n 000468: 02 7f                      |     block i32\n 00046a: 02 7f                      |       block i32\n 00046c: 02 7f                      |         block i32\n 00046e: 02 7f                      |           block i32\n 000470: 02 7f                      |             block i32\n 000472: 02 7f                      |               block i32\n 000474: 02 7f                      |                 block i32\n 000476: 02 7f                      |                   block i32\n 000478: 02 7f                      |                     block i32\n 00047a: 02 7f                      |                       block i32\n 00047c: 02 7f                      |                         block i32\n 00047e: 02 7f                      |                           block i32\n 000480: 02 7f                      |                             block i32\n 000482: 02 7f                      |                               block i32\n 000484: 02 7f                      |                                 block i32\n 000486: 02 7f                      |                                   block i32\n 000488: 02 7f                      |                                     block i32\n 00048a: 02 7f                      |                                       block i32\n 00048c: 02 7f                      |                                         block i32\n 00048e: 02 7f                      |                                           block i32\n 000490: 02 7f                      |                                             block i32\n 000492: 02 7f                      |                                               block i32\n 000494: 02 7f                      |                                                 block i32\n 000496: 02 7f                      |                                                   block i32\n 000498: 02 7f                      |                                                     block i32\n 00049a: 02 7f                      |                                                       block i32\n 00049c: 02 7f                      |                                                         block i32\n 00049e: 02 7f                      |                                                           block i32\n 0004a0: 02 7f                      |                                                             block i32\n 0004a2: 02 7f                      |                                                               block i32\n 0004a4: 02 7f                      |                                                                 block i32\n 0004a6: 02 7f                      |                                                                   block i32\n 0004a8: 02 7f                      |                                                                     block i32\n 0004aa: 02 7f                      |                                                                       block i32\n 0004ac: 02 7f                      |                                                                         block i32\n 0004ae: 02 7f                      |                                                                           block i32\n 0004b0: 10 00                      |                                                                             call 0\n 0004b2: 41 96 01                   |                                                                             i32.const 150\n 0004b5: 0b                         |                                                                           end\n 0004b6: 0b                         |                                                                         end\n 0004b7: 0b                         |                                                                       end\n 0004b8: 0b                         |                                                                     end\n 0004b9: 0b                         |                                                                   end\n 0004ba: 0b                         |                                                                 end\n 0004bb: 0b                         |                                                               end\n 0004bc: 0b                         |                                                             end\n 0004bd: 0b                         |                                                           end\n 0004be: 0b                         |                                                         end\n 0004bf: 0b                         |                                                       end\n 0004c0: 0b                         |                                                     end\n 0004c1: 0b                         |                                                   end\n 0004c2: 0b                         |                                                 end\n 0004c3: 0b                         |                                               end\n 0004c4: 0b                         |                                             end\n 0004c5: 0b                         |                                           end\n 0004c6: 0b                         |                                         end\n 0004c7: 0b                         |                                       end\n 0004c8: 0b                         |                                     end\n 0004c9: 0b                         |                                   end\n 0004ca: 0b                         |                                 end\n 0004cb: 0b                         |                               end\n 0004cc: 0b                         |                             end\n 0004cd: 0b                         |                           end\n 0004ce: 0b                         |                         end\n 0004cf: 0b                         |                       end\n 0004d0: 0b                         |                     end\n 0004d1: 0b                         |                   end\n 0004d2: 0b                         |                 end\n 0004d3: 0b                         |               end\n 0004d4: 0b                         |             end\n 0004d5: 0b                         |           end\n 0004d6: 0b                         |         end\n 0004d7: 0b                         |       end\n 0004d8: 0b                         |     end\n 0004d9: 0b                         |   end\n 0004da: 0b                         | end\n 0004db: 0b                         | end\n0004dd func[6] <as-select-first>:\n 0004de: 02 7f                      | block i32\n 0004e0: 41 01                      |   i32.const 1\n 0004e2: 0b                         | end\n 0004e3: 41 02                      | i32.const 2\n 0004e5: 41 03                      | i32.const 3\n 0004e7: 1b                         | select\n 0004e8: 0b                         | end\n0004ea func[7] <as-select-mid>:\n 0004eb: 41 02                      | i32.const 2\n 0004ed: 02 7f                      | block i32\n 0004ef: 41 01                      |   i32.const 1\n 0004f1: 0b                         | end\n 0004f2: 41 03                      | i32.const 3\n 0004f4: 1b                         | select\n 0004f5: 0b                         | end\n0004f7 func[8] <as-select-last>:\n 0004f8: 41 02                      | i32.const 2\n 0004fa: 41 03                      | i32.const 3\n 0004fc: 02 7f                      | block i32\n 0004fe: 41 01                      |   i32.const 1\n 000500: 0b                         | end\n 000501: 1b                         | select\n 000502: 0b                         | end\n000504 func[9] <as-loop-first>:\n 000505: 03 7f                      | loop i32\n 000507: 02 7f                      |   block i32\n 000509: 41 01                      |     i32.const 1\n 00050b: 0b                         |   end\n 00050c: 10 00                      |   call 0\n 00050e: 10 00                      |   call 0\n 000510: 0b                         | end\n 000511: 0b                         | end\n000513 func[10] <as-loop-mid>:\n 000514: 03 7f                      | loop i32\n 000516: 10 00                      |   call 0\n 000518: 02 7f                      |   block i32\n 00051a: 41 01                      |     i32.const 1\n 00051c: 0b                         |   end\n 00051d: 10 00                      |   call 0\n 00051f: 0b                         | end\n 000520: 0b                         | end\n000522 func[11] <as-loop-last>:\n 000523: 03 7f                      | loop i32\n 000525: 10 00                      |   call 0\n 000527: 10 00                      |   call 0\n 000529: 02 7f                      |   block i32\n 00052b: 41 01                      |     i32.const 1\n 00052d: 0b                         |   end\n 00052e: 0b                         | end\n 00052f: 0b                         | end\n000531 func[12] <as-if-condition>:\n 000532: 02 7f                      | block i32\n 000534: 41 01                      |   i32.const 1\n 000536: 0b                         | end\n 000537: 04 40                      | if\n 000539: 10 00                      |   call 0\n 00053b: 0b                         | end\n 00053c: 0b                         | end\n00053e func[13] <as-if-then>:\n 00053f: 41 01                      | i32.const 1\n 000541: 04 7f                      | if i32\n 000543: 02 7f                      |   block i32\n 000545: 41 01                      |     i32.const 1\n 000547: 0b                         |   end\n 000548: 05                         | else\n 000549: 41 02                      |   i32.const 2\n 00054b: 0b                         | end\n 00054c: 0b                         | end\n00054e func[14] <as-if-else>:\n 00054f: 41 01                      | i32.const 1\n 000551: 04 7f                      | if i32\n 000553: 41 02                      |   i32.const 2\n 000555: 05                         | else\n 000556: 02 7f                      |   block i32\n 000558: 41 01                      |     i32.const 1\n 00055a: 0b                         |   end\n 00055b: 0b                         | end\n 00055c: 0b                         | end\n00055e func[15] <as-br_if-first>:\n 00055f: 02 7f                      | block i32\n 000561: 02 7f                      |   block i32\n 000563: 41 01                      |     i32.const 1\n 000565: 0b                         |   end\n 000566: 41 02                      |   i32.const 2\n 000568: 0d 00                      |   br_if 0\n 00056a: 0b                         | end\n 00056b: 0b                         | end\n00056d func[16] <as-br_if-last>:\n 00056e: 02 7f                      | block i32\n 000570: 41 02                      |   i32.const 2\n 000572: 02 7f                      |   block i32\n 000574: 41 01                      |     i32.const 1\n 000576: 0b                         |   end\n 000577: 0d 00                      |   br_if 0\n 000579: 0b                         | end\n 00057a: 0b                         | end\n00057c func[17] <as-br_table-first>:\n 00057d: 02 7f                      | block i32\n 00057f: 02 7f                      |   block i32\n 000581: 41 01                      |     i32.const 1\n 000583: 0b                         |   end\n 000584: 41 02                      |   i32.const 2\n 000586: 0e 01 00 00                |   br_table 0 0\n 00058a: 0b                         | end\n 00058b: 0b                         | end\n00058d func[18] <as-br_table-last>:\n 00058e: 02 7f                      | block i32\n 000590: 41 02                      |   i32.const 2\n 000592: 02 7f                      |   block i32\n 000594: 41 01                      |     i32.const 1\n 000596: 0b                         |   end\n 000597: 0e 01 00 00                |   br_table 0 0\n 00059b: 0b                         | end\n 00059c: 0b                         | end\n00059e func[19]:\n 00059f: 20 00                      | local.get 0\n 0005a1: 0b                         | end\n0005a3 func[20] <as-call_indirect-first>:\n 0005a4: 02 7f                      | block i32\n 0005a6: 02 7f                      |   block i32\n 0005a8: 41 01                      |     i32.const 1\n 0005aa: 0b                         |   end\n 0005ab: 41 02                      |   i32.const 2\n 0005ad: 41 00                      |   i32.const 0\n 0005af: 11 00 00                   |   call_indirect 0 (type 0)\n 0005b2: 0b                         | end\n 0005b3: 0b                         | end\n0005b5 func[21] <as-call_indirect-mid>:\n 0005b6: 02 7f                      | block i32\n 0005b8: 41 02                      |   i32.const 2\n 0005ba: 02 7f                      |   block i32\n 0005bc: 41 01                      |     i32.const 1\n 0005be: 0b                         |   end\n 0005bf: 41 00                      |   i32.const 0\n 0005c1: 11 00 00                   |   call_indirect 0 (type 0)\n 0005c4: 0b                         | end\n 0005c5: 0b                         | end\n0005c7 func[22] <as-call_indirect-last>:\n 0005c8: 02 7f                      | block i32\n 0005ca: 41 01                      |   i32.const 1\n 0005cc: 41 02                      |   i32.const 2\n 0005ce: 02 7f                      |   block i32\n 0005d0: 41 00                      |     i32.const 0\n 0005d2: 0b                         |   end\n 0005d3: 11 00 00                   |   call_indirect 0 (type 0)\n 0005d6: 0b                         | end\n 0005d7: 0b                         | end\n0005d9 func[23] <as-store-first>:\n 0005da: 02 7f                      | block i32\n 0005dc: 41 01                      |   i32.const 1\n 0005de: 0b                         | end\n 0005df: 41 01                      | i32.const 1\n 0005e1: 36 02 00                   | i32.store 2 0\n 0005e4: 0b                         | end\n0005e6 func[24] <as-store-last>:\n 0005e7: 41 0a                      | i32.const 10\n 0005e9: 02 7f                      | block i32\n 0005eb: 41 01                      |   i32.const 1\n 0005ed: 0b                         | end\n 0005ee: 36 02 00                   | i32.store 2 0\n 0005f1: 0b                         | end\n0005f3 func[25] <as-memory.grow-value>:\n 0005f4: 02 7f                      | block i32\n 0005f6: 41 01                      |   i32.const 1\n 0005f8: 0b                         | end\n 0005f9: 40 00                      | memory.grow 0\n 0005fb: 0b                         | end\n0005fd func[26]:\n 0005fe: 20 00                      | local.get 0\n 000600: 0b                         | end\n000602 func[27] <as-call-value>:\n 000603: 02 7f                      | block i32\n 000605: 41 01                      |   i32.const 1\n 000607: 0b                         | end\n 000608: 10 1a                      | call 26\n 00060a: 0b                         | end\n00060c func[28] <as-return-value>:\n 00060d: 02 7f                      | block i32\n 00060f: 41 01                      |   i32.const 1\n 000611: 0b                         | end\n 000612: 0f                         | return\n 000613: 0b                         | end\n000615 func[29] <as-drop-operand>:\n 000616: 02 7f                      | block i32\n 000618: 41 01                      |   i32.const 1\n 00061a: 0b                         | end\n 00061b: 1a                         | drop\n 00061c: 0b                         | end\n00061e func[30] <as-br-value>:\n 00061f: 02 7f                      | block i32\n 000621: 02 7f                      |   block i32\n 000623: 41 01                      |     i32.const 1\n 000625: 0b                         |   end\n 000626: 0c 00                      |   br 0\n 000628: 0b                         | end\n 000629: 0b                         | end\n00062b func[31] <as-local.set-value>:\n 00062c: 01 7f                      | local[0] type=i32\n 00062e: 02 7f                      | block i32\n 000630: 41 01                      |   i32.const 1\n 000632: 0b                         | end\n 000633: 21 00                      | local.set 0\n 000635: 20 00                      | local.get 0\n 000637: 0b                         | end\n000639 func[32] <as-local.tee-value>:\n 00063a: 01 7f                      | local[0] type=i32\n 00063c: 02 7f                      | block i32\n 00063e: 41 01                      |   i32.const 1\n 000640: 0b                         | end\n 000641: 22 00                      | local.tee 0\n 000643: 0b                         | end\n000645 func[33] <as-global.set-value>:\n 000646: 02 7f                      | block i32\n 000648: 41 01                      |   i32.const 1\n 00064a: 0b                         | end\n 00064b: 24 00                      | global.set 0\n 00064d: 23 00                      | global.get 0\n 00064f: 0b                         | end\n000651 func[34] <as-load-operand>:\n 000652: 02 7f                      | block i32\n 000654: 41 01                      |   i32.const 1\n 000656: 0b                         | end\n 000657: 28 02 00                   | i32.load 2 0\n 00065a: 0b                         | end\n00065c func[35] <as-unary-operand>:\n 00065d: 02 7f                      | block i32\n 00065f: 10 00                      |   call 0\n 000661: 41 0d                      |   i32.const 13\n 000663: 0b                         | end\n 000664: 68                         | i32.ctz\n 000665: 0b                         | end\n000667 func[36] <as-binary-operand>:\n 000668: 02 7f                      | block i32\n 00066a: 10 00                      |   call 0\n 00066c: 41 03                      |   i32.const 3\n 00066e: 0b                         | end\n 00066f: 02 7f                      | block i32\n 000671: 10 00                      |   call 0\n 000673: 41 04                      |   i32.const 4\n 000675: 0b                         | end\n 000676: 6c                         | i32.mul\n 000677: 0b                         | end\n000679 func[37] <as-test-operand>:\n 00067a: 02 7f                      | block i32\n 00067c: 10 00                      |   call 0\n 00067e: 41 0d                      |   i32.const 13\n 000680: 0b                         | end\n 000681: 45                         | i32.eqz\n 000682: 0b                         | end\n000684 func[38] <as-compare-operand>:\n 000685: 02 7d                      | block f32\n 000687: 10 00                      |   call 0\n 000689: 43 00 00 40 40             |   f32.const 0x1.8p+1\n 00068e: 0b                         | end\n 00068f: 02 7d                      | block f32\n 000691: 10 00                      |   call 0\n 000693: 43 00 00 40 40             |   f32.const 0x1.8p+1\n 000698: 0b                         | end\n 000699: 5e                         | f32.gt\n 00069a: 0b                         | end\n00069c func[39] <as-binary-operands>:\n 00069d: 02 07                      | block type[7]\n 00069f: 10 00                      |   call 0\n 0006a1: 41 03                      |   i32.const 3\n 0006a3: 10 00                      |   call 0\n 0006a5: 41 04                      |   i32.const 4\n 0006a7: 0b                         | end\n 0006a8: 6c                         | i32.mul\n 0006a9: 0b                         | end\n0006ab func[40] <as-compare-operands>:\n 0006ac: 02 08                      | block type[8]\n 0006ae: 10 00                      |   call 0\n 0006b0: 43 00 00 40 40             |   f32.const 0x1.8p+1\n 0006b5: 10 00                      |   call 0\n 0006b7: 43 00 00 40 40             |   f32.const 0x1.8p+1\n 0006bc: 0b                         | end\n 0006bd: 5e                         | f32.gt\n 0006be: 0b                         | end\n0006c0 func[41] <as-mixed-operands>:\n 0006c1: 02 07                      | block type[7]\n 0006c3: 10 00                      |   call 0\n 0006c5: 41 03                      |   i32.const 3\n 0006c7: 10 00                      |   call 0\n 0006c9: 41 04                      |   i32.const 4\n 0006cb: 0b                         | end\n 0006cc: 41 05                      | i32.const 5\n 0006ce: 6a                         | i32.add\n 0006cf: 6c                         | i32.mul\n 0006d0: 0b                         | end\n0006d2 func[42] <break-bare>:\n 0006d3: 02 40                      | block\n 0006d5: 0c 00                      |   br 0\n 0006d7: 00                         |   unreachable\n 0006d8: 0b                         | end\n 0006d9: 02 40                      | block\n 0006db: 41 01                      |   i32.const 1\n 0006dd: 0d 00                      |   br_if 0\n 0006df: 00                         |   unreachable\n 0006e0: 0b                         | end\n 0006e1: 02 40                      | block\n 0006e3: 41 00                      |   i32.const 0\n 0006e5: 0e 00 00                   |   br_table 0\n 0006e8: 00                         |   unreachable\n 0006e9: 0b                         | end\n 0006ea: 02 40                      | block\n 0006ec: 41 01                      |   i32.const 1\n 0006ee: 0e 02 00 00 00             |   br_table 0 0 0\n 0006f3: 00                         |   unreachable\n 0006f4: 0b                         | end\n 0006f5: 41 13                      | i32.const 19\n 0006f7: 0b                         | end\n0006f9 func[43] <break-value>:\n 0006fa: 02 7f                      | block i32\n 0006fc: 41 12                      |   i32.const 18\n 0006fe: 0c 00                      |   br 0\n 000700: 41 13                      |   i32.const 19\n 000702: 0b                         | end\n 000703: 0b                         | end\n000705 func[44] <break-multi-value>:\n 000706: 02 09                      | block type[9]\n 000708: 41 12                      |   i32.const 18\n 00070a: 41 6e                      |   i32.const 4294967278\n 00070c: 42 12                      |   i64.const 18\n 00070e: 0c 00                      |   br 0\n 000710: 41 13                      |   i32.const 19\n 000712: 41 6d                      |   i32.const 4294967277\n 000714: 42 13                      |   i64.const 19\n 000716: 0b                         | end\n 000717: 0b                         | end\n000719 func[45] <break-repeated>:\n 00071a: 02 7f                      | block i32\n 00071c: 41 12                      |   i32.const 18\n 00071e: 0c 00                      |   br 0\n 000720: 41 13                      |   i32.const 19\n 000722: 0c 00                      |   br 0\n 000724: 41 14                      |   i32.const 20\n 000726: 41 00                      |   i32.const 0\n 000728: 0d 00                      |   br_if 0\n 00072a: 1a                         |   drop\n 00072b: 41 14                      |   i32.const 20\n 00072d: 41 01                      |   i32.const 1\n 00072f: 0d 00                      |   br_if 0\n 000731: 1a                         |   drop\n 000732: 41 15                      |   i32.const 21\n 000734: 0c 00                      |   br 0\n 000736: 41 16                      |   i32.const 22\n 000738: 41 04                      |   i32.const 4\n 00073a: 0e 00 00                   |   br_table 0\n 00073d: 41 17                      |   i32.const 23\n 00073f: 41 01                      |   i32.const 1\n 000741: 0e 02 00 00 00             |   br_table 0 0 0\n 000746: 41 15                      |   i32.const 21\n 000748: 0b                         | end\n 000749: 0b                         | end\n00074b func[46] <break-inner>:\n 00074c: 01 7f                      | local[0] type=i32\n 00074e: 41 00                      | i32.const 0\n 000750: 21 00                      | local.set 0\n 000752: 20 00                      | local.get 0\n 000754: 02 7f                      | block i32\n 000756: 02 7f                      |   block i32\n 000758: 41 01                      |     i32.const 1\n 00075a: 0c 01                      |     br 1\n 00075c: 0b                         |   end\n 00075d: 0b                         | end\n 00075e: 6a                         | i32.add\n 00075f: 21 00                      | local.set 0\n 000761: 20 00                      | local.get 0\n 000763: 02 7f                      | block i32\n 000765: 02 40                      |   block\n 000767: 0c 00                      |     br 0\n 000769: 0b                         |   end\n 00076a: 41 02                      |   i32.const 2\n 00076c: 0b                         | end\n 00076d: 6a                         | i32.add\n 00076e: 21 00                      | local.set 0\n 000770: 20 00                      | local.get 0\n 000772: 02 7f                      | block i32\n 000774: 41 04                      |   i32.const 4\n 000776: 0c 00                      |   br 0\n 000778: 68                         |   i32.ctz\n 000779: 0b                         | end\n 00077a: 6a                         | i32.add\n 00077b: 21 00                      | local.set 0\n 00077d: 20 00                      | local.get 0\n 00077f: 02 7f                      | block i32\n 000781: 02 7f                      |   block i32\n 000783: 41 08                      |     i32.const 8\n 000785: 0c 01                      |     br 1\n 000787: 0b                         |   end\n 000788: 68                         |   i32.ctz\n 000789: 0b                         | end\n 00078a: 6a                         | i32.add\n 00078b: 21 00                      | local.set 0\n 00078d: 20 00                      | local.get 0\n 00078f: 0b                         | end\n000791 func[47] <param>:\n 000792: 41 01                      | i32.const 1\n 000794: 02 06                      | block type[6]\n 000796: 41 02                      |   i32.const 2\n 000798: 6a                         |   i32.add\n 000799: 0b                         | end\n 00079a: 0b                         | end\n00079c func[48] <params>:\n 00079d: 41 01                      | i32.const 1\n 00079f: 41 02                      | i32.const 2\n 0007a1: 02 00                      | block type[0]\n 0007a3: 6a                         |   i32.add\n 0007a4: 0b                         | end\n 0007a5: 0b                         | end\n0007a7 func[49] <params-id>:\n 0007a8: 41 01                      | i32.const 1\n 0007aa: 41 02                      | i32.const 2\n 0007ac: 02 0a                      | block type[10]\n 0007ae: 0b                         | end\n 0007af: 6a                         | i32.add\n 0007b0: 0b                         | end\n0007b2 func[50] <param-break>:\n 0007b3: 41 01                      | i32.const 1\n 0007b5: 02 06                      | block type[6]\n 0007b7: 41 02                      |   i32.const 2\n 0007b9: 6a                         |   i32.add\n 0007ba: 0c 00                      |   br 0\n 0007bc: 0b                         | end\n 0007bd: 0b                         | end\n0007bf func[51] <params-break>:\n 0007c0: 41 01                      | i32.const 1\n 0007c2: 41 02                      | i32.const 2\n 0007c4: 02 00                      | block type[0]\n 0007c6: 6a                         |   i32.add\n 0007c7: 0c 00                      |   br 0\n 0007c9: 0b                         | end\n 0007ca: 0b                         | end\n0007cc func[52] <params-id-break>:\n 0007cd: 41 01                      | i32.const 1\n 0007cf: 41 02                      | i32.const 2\n 0007d1: 02 0a                      | block type[10]\n 0007d3: 0c 00                      |   br 0\n 0007d5: 0b                         | end\n 0007d6: 6a                         | i32.add\n 0007d7: 0b                         | end\n0007d9 func[53] <effects>:\n 0007da: 01 7f                      | local[0] type=i32\n 0007dc: 02 40                      | block\n 0007de: 41 01                      |   i32.const 1\n 0007e0: 21 00                      |   local.set 0\n 0007e2: 20 00                      |   local.get 0\n 0007e4: 41 03                      |   i32.const 3\n 0007e6: 6c                         |   i32.mul\n 0007e7: 21 00                      |   local.set 0\n 0007e9: 20 00                      |   local.get 0\n 0007eb: 41 05                      |   i32.const 5\n 0007ed: 6b                         |   i32.sub\n 0007ee: 21 00                      |   local.set 0\n 0007f0: 20 00                      |   local.get 0\n 0007f2: 41 07                      |   i32.const 7\n 0007f4: 6c                         |   i32.mul\n 0007f5: 21 00                      |   local.set 0\n 0007f7: 0c 00                      |   br 0\n 0007f9: 20 00                      |   local.get 0\n 0007fb: 41 e4 00                   |   i32.const 100\n 0007fe: 6c                         |   i32.mul\n 0007ff: 21 00                      |   local.set 0\n 000801: 0b                         | end\n 000802: 20 00                      | local.get 0\n 000804: 41 72                      | i32.const 4294967282\n 000806: 46                         | i32.eq\n 000807: 0b                         | end\n000809 func[54] <type-use>:\n 00080a: 02 40                      | block\n 00080c: 0b                         | end\n 00080d: 02 7f                      | block i32\n 00080f: 41 00                      |   i32.const 0\n 000811: 0b                         | end\n 000812: 02 03                      | block type[3]\n 000814: 1a                         |   drop\n 000815: 0b                         | end\n 000816: 41 00                      | i32.const 0\n 000818: 44 00 00 00 00 00 00 00 00 | f64.const 0x0p+0\n 000821: 41 00                      | i32.const 0\n 000823: 02 04                      | block type[4]\n 000825: 0b                         | end\n 000826: 1a                         | drop\n 000827: 1a                         | drop\n 000828: 1a                         | drop\n 000829: 02 7f                      | block i32\n 00082b: 41 00                      |   i32.const 0\n 00082d: 0b                         | end\n 00082e: 02 03                      | block type[3]\n 000830: 1a                         |   drop\n 000831: 0b                         | end\n 000832: 41 00                      | i32.const 0\n 000834: 44 00 00 00 00 00 00 00 00 | f64.const 0x0p+0\n 00083d: 41 00                      | i32.const 0\n 00083f: 02 04                      | block type[4]\n 000841: 0b                         | end\n 000842: 1a                         | drop\n 000843: 1a                         | drop\n 000844: 1a                         | drop\n 000845: 0b                         | end\n"
    }
  }
}
