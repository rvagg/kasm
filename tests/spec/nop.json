{
  "bin": {
    "nop.0.wasm": "AGFzbQEAAAABIwdgAn9/AX9gAABgA39/fwF/YAABf2ABfwBgAX8Bf2ACf38AA1RTAQIDAwMDBAQEBQUFBQUDAwMDAwMDAwQEBAUFBQUFBQUFBQUFBQUFAgICAgIFBQUFBQUFBQUFBQUFBQUFBQADAwMDAwUFBQUFBQMDAwUFBQYGBgYEBQFwAQEBBQMBAAEGBgF/AUEACwfqC1ANYXMtZnVuYy1maXJzdAACC2FzLWZ1bmMtbWlkAAMMYXMtZnVuYy1sYXN0AAQSYXMtZnVuYy1ldmVyeXdoZXJlAAUNYXMtZHJvcC1maXJzdAAGDGFzLWRyb3AtbGFzdAAHEmFzLWRyb3AtZXZlcnl3aGVyZQAID2FzLXNlbGVjdC1maXJzdAAJDmFzLXNlbGVjdC1taWQxAAoOYXMtc2VsZWN0LW1pZDIACw5hcy1zZWxlY3QtbGFzdAAMFGFzLXNlbGVjdC1ldmVyeXdoZXJlAA0OYXMtYmxvY2stZmlyc3QADgxhcy1ibG9jay1taWQADw1hcy1ibG9jay1sYXN0ABATYXMtYmxvY2stZXZlcnl3aGVyZQARDWFzLWxvb3AtZmlyc3QAEgthcy1sb29wLW1pZAATDGFzLWxvb3AtbGFzdAAUEmFzLWxvb3AtZXZlcnl3aGVyZQAVD2FzLWlmLWNvbmRpdGlvbgAWCmFzLWlmLXRoZW4AFwphcy1pZi1lbHNlABgLYXMtYnItZmlyc3QAGQphcy1ici1sYXN0ABoQYXMtYnItZXZlcnl3aGVyZQAbDmFzLWJyX2lmLWZpcnN0ABwMYXMtYnJfaWYtbWlkAB0NYXMtYnJfaWYtbGFzdAAeE2FzLWJyX2lmLWV2ZXJ5d2hlcmUAHxFhcy1icl90YWJsZS1maXJzdAAgD2FzLWJyX3RhYmxlLW1pZAAhEGFzLWJyX3RhYmxlLWxhc3QAIhZhcy1icl90YWJsZS1ldmVyeXdoZXJlACMPYXMtcmV0dXJuLWZpcnN0ACQOYXMtcmV0dXJuLWxhc3QAJRRhcy1yZXR1cm4tZXZlcnl3aGVyZQAmDWFzLWNhbGwtZmlyc3QAJwxhcy1jYWxsLW1pZDEAKAxhcy1jYWxsLW1pZDIAKQxhcy1jYWxsLWxhc3QAKhJhcy1jYWxsLWV2ZXJ5d2hlcmUAKw5hcy11bmFyeS1maXJzdAAsDWFzLXVuYXJ5LWxhc3QALRNhcy11bmFyeS1ldmVyeXdoZXJlAC4PYXMtYmluYXJ5LWZpcnN0AC8NYXMtYmluYXJ5LW1pZAAwDmFzLWJpbmFyeS1sYXN0ADEUYXMtYmluYXJ5LWV2ZXJ5d2hlcmUAMg1hcy10ZXN0LWZpcnN0ADMMYXMtdGVzdC1sYXN0ADQSYXMtdGVzdC1ldmVyeXdoZXJlADUQYXMtY29tcGFyZS1maXJzdAA2DmFzLWNvbXBhcmUtbWlkADcPYXMtY29tcGFyZS1sYXN0ADgVYXMtY29tcGFyZS1ldmVyeXdoZXJlADkUYXMtbWVtb3J5Lmdyb3ctZmlyc3QAOhNhcy1tZW1vcnkuZ3Jvdy1sYXN0ADsZYXMtbWVtb3J5Lmdyb3ctZXZlcnl3aGVyZQA8FmFzLWNhbGxfaW5kaXJlY3QtZmlyc3QAPhVhcy1jYWxsX2luZGlyZWN0LW1pZDEAPxVhcy1jYWxsX2luZGlyZWN0LW1pZDIAQBVhcy1jYWxsX2luZGlyZWN0LWxhc3QAQRthcy1jYWxsX2luZGlyZWN0LWV2ZXJ5d2hlcmUAQhJhcy1sb2NhbC5zZXQtZmlyc3QAQxFhcy1sb2NhbC5zZXQtbGFzdABEF2FzLWxvY2FsLnNldC1ldmVyeXdoZXJlAEUSYXMtbG9jYWwudGVlLWZpcnN0AEYRYXMtbG9jYWwudGVlLWxhc3QARxdhcy1sb2NhbC50ZWUtZXZlcnl3aGVyZQBIE2FzLWdsb2JhbC5zZXQtZmlyc3QASRJhcy1nbG9iYWwuc2V0LWxhc3QAShhhcy1nbG9iYWwuc2V0LWV2ZXJ5d2hlcmUASw1hcy1sb2FkLWZpcnN0AEwMYXMtbG9hZC1sYXN0AE0SYXMtbG9hZC1ldmVyeXdoZXJlAE4OYXMtc3RvcmUtZmlyc3QATwxhcy1zdG9yZS1taWQAUA1hcy1zdG9yZS1sYXN0AFETYXMtc3RvcmUtZXZlcnl3aGVyZQBSCQcBAEEACwE9CqIHUwIACwoAIAAgASACa2oLBQABQQELBwAQAAFBAgsHABAAQQMBCwsAAQEQAAFBBAEBCwYAASAAGgsGACAAARoLCQABASAAAQEaCwoAASAAIAAgABsLCgAgAAEgACAAGwsKACAAIAABIAAbCwoAIAAgACAAARsLEAABIAABASAAAQEgAAEBGwsIAAJ/AUECCwsKAAJ/EAABQQILCwsAAn8BEABBAwELCw4AAn8BARAAAUEEAQELCwgAA38BQQILCwoAA38QAAFBAgsLCgADfxAAQQMBCwsOAAN/AQEQAAFBBAEBCwsKACAAAQRAEAALCwsAIAAEQAEFEAALCwsAIAAEQBAABQELCwoAAn8BIAAMAAsLCgACfyAAAQwACwsNAAJ/AQEgAAEBDAALCwwAAn8BIAAgAA0ACwsMAAJ/IAABIAANAAsLDAACfyAAIAABDQALCxEAAn8BASAAAQEgAAEBDQALCw4AAn8BIAAgAA4BAAALCw4AAn8gAAEgAA4BAAALCw4AAn8gACAAAQ4BAAALCxMAAn8BASAAAQEgAAEBDgEAAAsLBgABIAAPCwYAIAABDwsJAAEBIAABAQ8LCwABIAAgASACEAELCwAgAAEgASACEAELCwAgACABASACEAELCwAgACABIAIBEAELEgABASAAAQEgAQEBIAIBARABCwYAASAAaAsGACAAAWgLCQABASAAAQFoCwgAASAAIABqCwgAIAABIABqCwgAIAAgAAFqCwwAASAAAQEgAAEBagsGAAEgAEULBgAgAAFFCwkAAQEgAAEBRQsIAAEgACAARwsIACAAASAARwsIACAAIAABSQsMAAEgAAEBIAABAUwLBwABIABAAAsHACAAAUAACwoAAQEgAAEBQAALBAAgAAsPAAJ/AUEBQQJBABEAAAsLDwACf0EBAUECQQARAAALCw8AAn9BAUECAUEAEQAACwsPAAJ/QQFBAkEAAREAAAsLFgACfwEBQQEBAUECAQFBAAEBEQAACwsJAAFBAiEAIAALCQBBAgEhACAACwwAAQFBAgEBIQAgAAsHAAFBAiIACwcAQQIBIgALCgABAUECAQEiAAsJAAFBAiQAIwALCQBBAgEkACMACwwAAQFBAgEBJAAjAAsIAAEgACgCAAsIACAAASgCAAsLAAEBIAABASgCAAsKAAEgACABNgIACwoAIAABIAE2AgALCgAgACABATYCAAsPAAEBIAABASABAQE2AgAL",
    "nop.1.wasm": "AGFzbQEAAAABBQFgAAF/AwIBAAoFAQMAAQs=",
    "nop.2.wasm": "AGFzbQEAAAABBQFgAAF+AwIBAAoFAQMAAQs=",
    "nop.3.wasm": "AGFzbQEAAAABBQFgAAF9AwIBAAoFAQMAAQs=",
    "nop.4.wasm": "AGFzbQEAAAABBQFgAAF8AwIBAAoFAQMAAQs="
  },
  "spec": {"source_filename": "/workspace/wasm-spec/test/core/nop.wast",
 "commands": [
  {"type": "module", "line": 3, "filename": "nop.0.wasm"}, 
  {"type": "assert_return", "line": 306, "action": {"type": "invoke", "field": "as-func-first", "args": []}, "expected": [{"type": "i32", "value": "1"}]}, 
  {"type": "assert_return", "line": 307, "action": {"type": "invoke", "field": "as-func-mid", "args": []}, "expected": [{"type": "i32", "value": "2"}]}, 
  {"type": "assert_return", "line": 308, "action": {"type": "invoke", "field": "as-func-last", "args": []}, "expected": [{"type": "i32", "value": "3"}]}, 
  {"type": "assert_return", "line": 309, "action": {"type": "invoke", "field": "as-func-everywhere", "args": []}, "expected": [{"type": "i32", "value": "4"}]}, 
  {"type": "assert_return", "line": 311, "action": {"type": "invoke", "field": "as-drop-first", "args": [{"type": "i32", "value": "0"}]}, "expected": []}, 
  {"type": "assert_return", "line": 312, "action": {"type": "invoke", "field": "as-drop-last", "args": [{"type": "i32", "value": "0"}]}, "expected": []}, 
  {"type": "assert_return", "line": 313, "action": {"type": "invoke", "field": "as-drop-everywhere", "args": [{"type": "i32", "value": "0"}]}, "expected": []}, 
  {"type": "assert_return", "line": 315, "action": {"type": "invoke", "field": "as-select-first", "args": [{"type": "i32", "value": "3"}]}, "expected": [{"type": "i32", "value": "3"}]}, 
  {"type": "assert_return", "line": 316, "action": {"type": "invoke", "field": "as-select-mid1", "args": [{"type": "i32", "value": "3"}]}, "expected": [{"type": "i32", "value": "3"}]}, 
  {"type": "assert_return", "line": 317, "action": {"type": "invoke", "field": "as-select-mid2", "args": [{"type": "i32", "value": "3"}]}, "expected": [{"type": "i32", "value": "3"}]}, 
  {"type": "assert_return", "line": 318, "action": {"type": "invoke", "field": "as-select-last", "args": [{"type": "i32", "value": "3"}]}, "expected": [{"type": "i32", "value": "3"}]}, 
  {"type": "assert_return", "line": 319, "action": {"type": "invoke", "field": "as-select-everywhere", "args": [{"type": "i32", "value": "3"}]}, "expected": [{"type": "i32", "value": "3"}]}, 
  {"type": "assert_return", "line": 321, "action": {"type": "invoke", "field": "as-block-first", "args": []}, "expected": [{"type": "i32", "value": "2"}]}, 
  {"type": "assert_return", "line": 322, "action": {"type": "invoke", "field": "as-block-mid", "args": []}, "expected": [{"type": "i32", "value": "2"}]}, 
  {"type": "assert_return", "line": 323, "action": {"type": "invoke", "field": "as-block-last", "args": []}, "expected": [{"type": "i32", "value": "3"}]}, 
  {"type": "assert_return", "line": 324, "action": {"type": "invoke", "field": "as-block-everywhere", "args": []}, "expected": [{"type": "i32", "value": "4"}]}, 
  {"type": "assert_return", "line": 326, "action": {"type": "invoke", "field": "as-loop-first", "args": []}, "expected": [{"type": "i32", "value": "2"}]}, 
  {"type": "assert_return", "line": 327, "action": {"type": "invoke", "field": "as-loop-mid", "args": []}, "expected": [{"type": "i32", "value": "2"}]}, 
  {"type": "assert_return", "line": 328, "action": {"type": "invoke", "field": "as-loop-last", "args": []}, "expected": [{"type": "i32", "value": "3"}]}, 
  {"type": "assert_return", "line": 329, "action": {"type": "invoke", "field": "as-loop-everywhere", "args": []}, "expected": [{"type": "i32", "value": "4"}]}, 
  {"type": "assert_return", "line": 331, "action": {"type": "invoke", "field": "as-if-condition", "args": [{"type": "i32", "value": "0"}]}, "expected": []}, 
  {"type": "assert_return", "line": 332, "action": {"type": "invoke", "field": "as-if-condition", "args": [{"type": "i32", "value": "4294967295"}]}, "expected": []}, 
  {"type": "assert_return", "line": 333, "action": {"type": "invoke", "field": "as-if-then", "args": [{"type": "i32", "value": "0"}]}, "expected": []}, 
  {"type": "assert_return", "line": 334, "action": {"type": "invoke", "field": "as-if-then", "args": [{"type": "i32", "value": "4"}]}, "expected": []}, 
  {"type": "assert_return", "line": 335, "action": {"type": "invoke", "field": "as-if-else", "args": [{"type": "i32", "value": "0"}]}, "expected": []}, 
  {"type": "assert_return", "line": 336, "action": {"type": "invoke", "field": "as-if-else", "args": [{"type": "i32", "value": "3"}]}, "expected": []}, 
  {"type": "assert_return", "line": 338, "action": {"type": "invoke", "field": "as-br-first", "args": [{"type": "i32", "value": "5"}]}, "expected": [{"type": "i32", "value": "5"}]}, 
  {"type": "assert_return", "line": 339, "action": {"type": "invoke", "field": "as-br-last", "args": [{"type": "i32", "value": "6"}]}, "expected": [{"type": "i32", "value": "6"}]}, 
  {"type": "assert_return", "line": 340, "action": {"type": "invoke", "field": "as-br-everywhere", "args": [{"type": "i32", "value": "7"}]}, "expected": [{"type": "i32", "value": "7"}]}, 
  {"type": "assert_return", "line": 342, "action": {"type": "invoke", "field": "as-br_if-first", "args": [{"type": "i32", "value": "4"}]}, "expected": [{"type": "i32", "value": "4"}]}, 
  {"type": "assert_return", "line": 343, "action": {"type": "invoke", "field": "as-br_if-mid", "args": [{"type": "i32", "value": "5"}]}, "expected": [{"type": "i32", "value": "5"}]}, 
  {"type": "assert_return", "line": 344, "action": {"type": "invoke", "field": "as-br_if-last", "args": [{"type": "i32", "value": "6"}]}, "expected": [{"type": "i32", "value": "6"}]}, 
  {"type": "assert_return", "line": 345, "action": {"type": "invoke", "field": "as-br_if-everywhere", "args": [{"type": "i32", "value": "7"}]}, "expected": [{"type": "i32", "value": "7"}]}, 
  {"type": "assert_return", "line": 347, "action": {"type": "invoke", "field": "as-br_table-first", "args": [{"type": "i32", "value": "4"}]}, "expected": [{"type": "i32", "value": "4"}]}, 
  {"type": "assert_return", "line": 348, "action": {"type": "invoke", "field": "as-br_table-mid", "args": [{"type": "i32", "value": "5"}]}, "expected": [{"type": "i32", "value": "5"}]}, 
  {"type": "assert_return", "line": 349, "action": {"type": "invoke", "field": "as-br_table-last", "args": [{"type": "i32", "value": "6"}]}, "expected": [{"type": "i32", "value": "6"}]}, 
  {"type": "assert_return", "line": 350, "action": {"type": "invoke", "field": "as-br_table-everywhere", "args": [{"type": "i32", "value": "7"}]}, "expected": [{"type": "i32", "value": "7"}]}, 
  {"type": "assert_return", "line": 352, "action": {"type": "invoke", "field": "as-return-first", "args": [{"type": "i32", "value": "5"}]}, "expected": [{"type": "i32", "value": "5"}]}, 
  {"type": "assert_return", "line": 353, "action": {"type": "invoke", "field": "as-return-last", "args": [{"type": "i32", "value": "6"}]}, "expected": [{"type": "i32", "value": "6"}]}, 
  {"type": "assert_return", "line": 354, "action": {"type": "invoke", "field": "as-return-everywhere", "args": [{"type": "i32", "value": "7"}]}, "expected": [{"type": "i32", "value": "7"}]}, 
  {"type": "assert_return", "line": 356, "action": {"type": "invoke", "field": "as-call-first", "args": [{"type": "i32", "value": "3"}, {"type": "i32", "value": "1"}, {"type": "i32", "value": "2"}]}, "expected": [{"type": "i32", "value": "2"}]}, 
  {"type": "assert_return", "line": 357, "action": {"type": "invoke", "field": "as-call-mid1", "args": [{"type": "i32", "value": "3"}, {"type": "i32", "value": "1"}, {"type": "i32", "value": "2"}]}, "expected": [{"type": "i32", "value": "2"}]}, 
  {"type": "assert_return", "line": 358, "action": {"type": "invoke", "field": "as-call-mid2", "args": [{"type": "i32", "value": "0"}, {"type": "i32", "value": "3"}, {"type": "i32", "value": "1"}]}, "expected": [{"type": "i32", "value": "2"}]}, 
  {"type": "assert_return", "line": 359, "action": {"type": "invoke", "field": "as-call-last", "args": [{"type": "i32", "value": "10"}, {"type": "i32", "value": "9"}, {"type": "i32", "value": "4294967295"}]}, "expected": [{"type": "i32", "value": "20"}]}, 
  {"type": "assert_return", "line": 360, "action": {"type": "invoke", "field": "as-call-everywhere", "args": [{"type": "i32", "value": "2"}, {"type": "i32", "value": "1"}, {"type": "i32", "value": "5"}]}, "expected": [{"type": "i32", "value": "4294967294"}]}, 
  {"type": "assert_return", "line": 362, "action": {"type": "invoke", "field": "as-unary-first", "args": [{"type": "i32", "value": "30"}]}, "expected": [{"type": "i32", "value": "1"}]}, 
  {"type": "assert_return", "line": 363, "action": {"type": "invoke", "field": "as-unary-last", "args": [{"type": "i32", "value": "30"}]}, "expected": [{"type": "i32", "value": "1"}]}, 
  {"type": "assert_return", "line": 364, "action": {"type": "invoke", "field": "as-unary-everywhere", "args": [{"type": "i32", "value": "12"}]}, "expected": [{"type": "i32", "value": "2"}]}, 
  {"type": "assert_return", "line": 366, "action": {"type": "invoke", "field": "as-binary-first", "args": [{"type": "i32", "value": "3"}]}, "expected": [{"type": "i32", "value": "6"}]}, 
  {"type": "assert_return", "line": 367, "action": {"type": "invoke", "field": "as-binary-mid", "args": [{"type": "i32", "value": "3"}]}, "expected": [{"type": "i32", "value": "6"}]}, 
  {"type": "assert_return", "line": 368, "action": {"type": "invoke", "field": "as-binary-last", "args": [{"type": "i32", "value": "3"}]}, "expected": [{"type": "i32", "value": "6"}]}, 
  {"type": "assert_return", "line": 369, "action": {"type": "invoke", "field": "as-binary-everywhere", "args": [{"type": "i32", "value": "3"}]}, "expected": [{"type": "i32", "value": "6"}]}, 
  {"type": "assert_return", "line": 371, "action": {"type": "invoke", "field": "as-test-first", "args": [{"type": "i32", "value": "0"}]}, "expected": [{"type": "i32", "value": "1"}]}, 
  {"type": "assert_return", "line": 372, "action": {"type": "invoke", "field": "as-test-last", "args": [{"type": "i32", "value": "0"}]}, "expected": [{"type": "i32", "value": "1"}]}, 
  {"type": "assert_return", "line": 373, "action": {"type": "invoke", "field": "as-test-everywhere", "args": [{"type": "i32", "value": "0"}]}, "expected": [{"type": "i32", "value": "1"}]}, 
  {"type": "assert_return", "line": 375, "action": {"type": "invoke", "field": "as-compare-first", "args": [{"type": "i32", "value": "3"}]}, "expected": [{"type": "i32", "value": "0"}]}, 
  {"type": "assert_return", "line": 376, "action": {"type": "invoke", "field": "as-compare-mid", "args": [{"type": "i32", "value": "3"}]}, "expected": [{"type": "i32", "value": "0"}]}, 
  {"type": "assert_return", "line": 377, "action": {"type": "invoke", "field": "as-compare-last", "args": [{"type": "i32", "value": "3"}]}, "expected": [{"type": "i32", "value": "0"}]}, 
  {"type": "assert_return", "line": 378, "action": {"type": "invoke", "field": "as-compare-everywhere", "args": [{"type": "i32", "value": "3"}]}, "expected": [{"type": "i32", "value": "1"}]}, 
  {"type": "assert_return", "line": 380, "action": {"type": "invoke", "field": "as-memory.grow-first", "args": [{"type": "i32", "value": "0"}]}, "expected": [{"type": "i32", "value": "1"}]}, 
  {"type": "assert_return", "line": 381, "action": {"type": "invoke", "field": "as-memory.grow-last", "args": [{"type": "i32", "value": "2"}]}, "expected": [{"type": "i32", "value": "1"}]}, 
  {"type": "assert_return", "line": 382, "action": {"type": "invoke", "field": "as-memory.grow-everywhere", "args": [{"type": "i32", "value": "12"}]}, "expected": [{"type": "i32", "value": "3"}]}, 
  {"type": "assert_return", "line": 384, "action": {"type": "invoke", "field": "as-call_indirect-first", "args": []}, "expected": [{"type": "i32", "value": "1"}]}, 
  {"type": "assert_return", "line": 385, "action": {"type": "invoke", "field": "as-call_indirect-mid1", "args": []}, "expected": [{"type": "i32", "value": "1"}]}, 
  {"type": "assert_return", "line": 386, "action": {"type": "invoke", "field": "as-call_indirect-mid2", "args": []}, "expected": [{"type": "i32", "value": "1"}]}, 
  {"type": "assert_return", "line": 387, "action": {"type": "invoke", "field": "as-call_indirect-last", "args": []}, "expected": [{"type": "i32", "value": "1"}]}, 
  {"type": "assert_return", "line": 388, "action": {"type": "invoke", "field": "as-call_indirect-everywhere", "args": []}, "expected": [{"type": "i32", "value": "1"}]}, 
  {"type": "assert_return", "line": 390, "action": {"type": "invoke", "field": "as-local.set-first", "args": [{"type": "i32", "value": "1"}]}, "expected": [{"type": "i32", "value": "2"}]}, 
  {"type": "assert_return", "line": 391, "action": {"type": "invoke", "field": "as-local.set-last", "args": [{"type": "i32", "value": "1"}]}, "expected": [{"type": "i32", "value": "2"}]}, 
  {"type": "assert_return", "line": 392, "action": {"type": "invoke", "field": "as-local.set-everywhere", "args": [{"type": "i32", "value": "1"}]}, "expected": [{"type": "i32", "value": "2"}]}, 
  {"type": "assert_return", "line": 394, "action": {"type": "invoke", "field": "as-local.tee-first", "args": [{"type": "i32", "value": "1"}]}, "expected": [{"type": "i32", "value": "2"}]}, 
  {"type": "assert_return", "line": 395, "action": {"type": "invoke", "field": "as-local.tee-last", "args": [{"type": "i32", "value": "1"}]}, "expected": [{"type": "i32", "value": "2"}]}, 
  {"type": "assert_return", "line": 396, "action": {"type": "invoke", "field": "as-local.tee-everywhere", "args": [{"type": "i32", "value": "1"}]}, "expected": [{"type": "i32", "value": "2"}]}, 
  {"type": "assert_return", "line": 398, "action": {"type": "invoke", "field": "as-global.set-first", "args": []}, "expected": [{"type": "i32", "value": "2"}]}, 
  {"type": "assert_return", "line": 399, "action": {"type": "invoke", "field": "as-global.set-last", "args": []}, "expected": [{"type": "i32", "value": "2"}]}, 
  {"type": "assert_return", "line": 400, "action": {"type": "invoke", "field": "as-global.set-everywhere", "args": []}, "expected": [{"type": "i32", "value": "2"}]}, 
  {"type": "assert_return", "line": 402, "action": {"type": "invoke", "field": "as-load-first", "args": [{"type": "i32", "value": "100"}]}, "expected": [{"type": "i32", "value": "0"}]}, 
  {"type": "assert_return", "line": 403, "action": {"type": "invoke", "field": "as-load-last", "args": [{"type": "i32", "value": "100"}]}, "expected": [{"type": "i32", "value": "0"}]}, 
  {"type": "assert_return", "line": 404, "action": {"type": "invoke", "field": "as-load-everywhere", "args": [{"type": "i32", "value": "100"}]}, "expected": [{"type": "i32", "value": "0"}]}, 
  {"type": "assert_return", "line": 406, "action": {"type": "invoke", "field": "as-store-first", "args": [{"type": "i32", "value": "0"}, {"type": "i32", "value": "1"}]}, "expected": []}, 
  {"type": "assert_return", "line": 407, "action": {"type": "invoke", "field": "as-store-mid", "args": [{"type": "i32", "value": "0"}, {"type": "i32", "value": "2"}]}, "expected": []}, 
  {"type": "assert_return", "line": 408, "action": {"type": "invoke", "field": "as-store-last", "args": [{"type": "i32", "value": "0"}, {"type": "i32", "value": "3"}]}, "expected": []}, 
  {"type": "assert_return", "line": 409, "action": {"type": "invoke", "field": "as-store-everywhere", "args": [{"type": "i32", "value": "0"}, {"type": "i32", "value": "4"}]}, "expected": []}, 
  {"type": "assert_invalid", "line": 412, "filename": "nop.1.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 416, "filename": "nop.2.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 420, "filename": "nop.3.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 424, "filename": "nop.4.wasm", "text": "type mismatch", "module_type": "binary"}]},
  "code": [
    "(module \n  (func $dummy)\n  (func $3-ary (param i32 i32 i32) (result i32) local.get 0 local.get 1 local.get 2 i32.sub i32.add ) (memory 1)\n  (func (export \"as-func-first\") (result i32) (nop) (i32.const 1) )\n  (func (export \"as-func-mid\") (result i32) (call $dummy) (nop) (i32.const 2) )\n  (func (export \"as-func-last\") (result i32) (call $dummy) (i32.const 3) (nop) )\n  (func (export \"as-func-everywhere\") (result i32) (nop) (nop) (call $dummy) (nop) (i32.const 4) (nop) (nop) )\n  (func (export \"as-drop-first\") (param i32) (nop) (local.get 0) (drop) )\n  (func (export \"as-drop-last\") (param i32) (local.get 0) (nop) (drop) )\n  (func (export \"as-drop-everywhere\") (param i32) (nop) (nop) (local.get 0) (nop) (nop) (drop) )\n  (func (export \"as-select-first\") (param i32) (result i32) (nop) (local.get 0) (local.get 0) (local.get 0) (select) )\n  (func (export \"as-select-mid1\") (param i32) (result i32) (local.get 0) (nop) (local.get 0) (local.get 0) (select) )\n  (func (export \"as-select-mid2\") (param i32) (result i32) (local.get 0) (local.get 0) (nop) (local.get 0) (select) )\n  (func (export \"as-select-last\") (param i32) (result i32) (local.get 0) (local.get 0) (local.get 0) (nop) (select) )\n  (func (export \"as-select-everywhere\") (param i32) (result i32) (nop) (local.get 0) (nop) (nop) (local.get 0) (nop) (nop) (local.get 0) (nop) (nop) (select) )\n  (func (export \"as-block-first\") (result i32) (block (result i32) (nop) (i32.const 2)) )\n  (func (export \"as-block-mid\") (result i32) (block (result i32) (call $dummy) (nop) (i32.const 2)) )\n  (func (export \"as-block-last\") (result i32) (block (result i32) (nop) (call $dummy) (i32.const 3) (nop)) )\n  (func (export \"as-block-everywhere\") (result i32) (block (result i32) (nop) (nop) (call $dummy) (nop) (i32.const 4) (nop) (nop) ) )\n  (func (export \"as-loop-first\") (result i32) (loop (result i32) (nop) (i32.const 2)) )\n  (func (export \"as-loop-mid\") (result i32) (loop (result i32) (call $dummy) (nop) (i32.const 2)) )\n  (func (export \"as-loop-last\") (result i32) (loop (result i32) (call $dummy) (i32.const 3) (nop)) )\n  (func (export \"as-loop-everywhere\") (result i32) (loop (result i32) (nop) (nop) (call $dummy) (nop) (i32.const 4) (nop) (nop) ) )\n  (func (export \"as-if-condition\") (param i32) (local.get 0) (nop) (if (then (call $dummy))) )\n  (func (export \"as-if-then\") (param i32) (if (local.get 0) (then (nop)) (else (call $dummy))) )\n  (func (export \"as-if-else\") (param i32) (if (local.get 0) (then (call $dummy)) (else (nop))) )\n  (func (export \"as-br-first\") (param i32) (result i32) (block (result i32) (nop) (local.get 0) (br 0)) )\n  (func (export \"as-br-last\") (param i32) (result i32) (block (result i32) (local.get 0) (nop) (br 0)) )\n  (func (export \"as-br-everywhere\") (param i32) (result i32) (block (result i32) (nop) (nop) (local.get 0) (nop) (nop) (br 0)) )\n  (func (export \"as-br_if-first\") (param i32) (result i32) (block (result i32) (nop) (local.get 0) (local.get 0) (br_if 0)) )\n  (func (export \"as-br_if-mid\") (param i32) (result i32) (block (result i32) (local.get 0) (nop) (local.get 0) (br_if 0)) )\n  (func (export \"as-br_if-last\") (param i32) (result i32) (block (result i32) (local.get 0) (local.get 0) (nop) (br_if 0)) )\n  (func (export \"as-br_if-everywhere\") (param i32) (result i32) (block (result i32) (nop) (nop) (local.get 0) (nop) (nop) (local.get 0) (nop) (nop) (br_if 0) ) )\n  (func (export \"as-br_table-first\") (param i32) (result i32) (block (result i32) (nop) (local.get 0) (local.get 0) (br_table 0 0)) )\n  (func (export \"as-br_table-mid\") (param i32) (result i32) (block (result i32) (local.get 0) (nop) (local.get 0) (br_table 0 0)) )\n  (func (export \"as-br_table-last\") (param i32) (result i32) (block (result i32) (local.get 0) (local.get 0) (nop) (br_table 0 0)) )\n  (func (export \"as-br_table-everywhere\") (param i32) (result i32) (block (result i32) (nop) (nop) (local.get 0) (nop) (nop) (local.get 0) (nop) (nop) (br_table 0 0) ) )\n  (func (export \"as-return-first\") (param i32) (result i32) (nop) (local.get 0) (return) )\n  (func (export \"as-return-last\") (param i32) (result i32) (local.get 0) (nop) (return) )\n  (func (export \"as-return-everywhere\") (param i32) (result i32) (nop) (nop) (local.get 0) (nop) (nop) (return) )\n  (func (export \"as-call-first\") (param i32 i32 i32) (result i32) (nop) (local.get 0) (local.get 1) (local.get 2) (call $3-ary) )\n  (func (export \"as-call-mid1\") (param i32 i32 i32) (result i32) (local.get 0) (nop) (local.get 1) (local.get 2) (call $3-ary) )\n  (func (export \"as-call-mid2\") (param i32 i32 i32) (result i32) (local.get 0) (local.get 1) (nop) (local.get 2) (call $3-ary) )\n  (func (export \"as-call-last\") (param i32 i32 i32) (result i32) (local.get 0) (local.get 1) (local.get 2) (nop) (call $3-ary) )\n  (func (export \"as-call-everywhere\") (param i32 i32 i32) (result i32) (nop) (nop) (local.get 0) (nop) (nop) (local.get 1) (nop) (nop) (local.get 2) (nop) (nop) (call $3-ary) )\n  (func (export \"as-unary-first\") (param i32) (result i32) (nop) (local.get 0) (i32.ctz) )\n  (func (export \"as-unary-last\") (param i32) (result i32) (local.get 0) (nop) (i32.ctz) )\n  (func (export \"as-unary-everywhere\") (param i32) (result i32) (nop) (nop) (local.get 0) (nop) (nop) (i32.ctz) )\n  (func (export \"as-binary-first\") (param i32) (result i32) (nop) (local.get 0) (local.get 0) (i32.add) )\n  (func (export \"as-binary-mid\") (param i32) (result i32) (local.get 0) (nop) (local.get 0) (i32.add) )\n  (func (export \"as-binary-last\") (param i32) (result i32) (local.get 0) (local.get 0) (nop) (i32.add) )\n  (func (export \"as-binary-everywhere\") (param i32) (result i32) (nop) (local.get 0) (nop) (nop) (local.get 0) (nop) (nop) (i32.add) )\n  (func (export \"as-test-first\") (param i32) (result i32) (nop) (local.get 0) (i32.eqz) )\n  (func (export \"as-test-last\") (param i32) (result i32) (local.get 0) (nop) (i32.eqz) )\n  (func (export \"as-test-everywhere\") (param i32) (result i32) (nop) (nop) (local.get 0) (nop) (nop) i32.eqz )\n  (func (export \"as-compare-first\") (param i32) (result i32) (nop) (local.get 0) (local.get 0) (i32.ne) )\n  (func (export \"as-compare-mid\") (param i32) (result i32) (local.get 0) (nop) (local.get 0) (i32.ne) )\n  (func (export \"as-compare-last\") (param i32) (result i32) (local.get 0) (local.get 0) (nop) (i32.lt_u) )\n  (func (export \"as-compare-everywhere\") (param i32) (result i32) (nop) (local.get 0) (nop) (nop) (local.get 0) (nop) (nop) (i32.le_s) )\n  (func (export \"as-memory.grow-first\") (param i32) (result i32) (nop) (local.get 0) (memory.grow) )\n  (func (export \"as-memory.grow-last\") (param i32) (result i32) (local.get 0) (nop) (memory.grow) )\n  (func (export \"as-memory.grow-everywhere\") (param i32) (result i32) (nop) (nop) (local.get 0) (nop) (nop) (memory.grow) )\n  (func $ (param i32 i32) (result i32) (local.get 0)) (type $check (func (param i32 i32) (result i32))) (table funcref (elem $func))\n  (func (export \"as-call_indirect-first\") (result i32) (block (result i32) (nop) (i32.const 1) (i32.const 2) (i32.const 0) (call_indirect (type $check)) ) )\n  (func (export \"as-call_indirect-mid1\") (result i32) (block (result i32) (i32.const 1) (nop) (i32.const 2) (i32.const 0) (call_indirect (type $check)) ) )\n  (func (export \"as-call_indirect-mid2\") (result i32) (block (result i32) (i32.const 1) (i32.const 2) (nop) (i32.const 0) (call_indirect (type $check)) ) )\n  (func (export \"as-call_indirect-last\") (result i32) (block (result i32) (i32.const 1) (i32.const 2) (i32.const 0) (nop) (call_indirect (type $check)) ) )\n  (func (export \"as-call_indirect-everywhere\") (result i32) (block (result i32) (nop) (nop) (i32.const 1) (nop) (nop) (i32.const 2) (nop) (nop) (i32.const 0) (nop) (nop) (call_indirect (type $check)) ) )\n  (func (export \"as-local.set-first\") (param i32) (result i32) (nop) (i32.const 2) (local.set 0) (local.get 0) )\n  (func (export \"as-local.set-last\") (param i32) (result i32) (i32.const 2) (nop) (local.set 0) (local.get 0) )\n  (func (export \"as-local.set-everywhere\") (param i32) (result i32) (nop) (nop) (i32.const 2) (nop) (nop) (local.set 0) (local.get 0) )\n  (func (export \"as-local.tee-first\") (param i32) (result i32) (nop) (i32.const 2) (local.tee 0) )\n  (func (export \"as-local.tee-last\") (param i32) (result i32) (i32.const 2) (nop) (local.tee 0) )\n  (func (export \"as-local.tee-everywhere\") (param i32) (result i32) (nop) (nop) (i32.const 2) (nop) (nop) (local.tee 0) ) (global $a (mut i32) (i32.const 0))\n  (func (export \"as-global.set-first\") (result i32) (nop) (i32.const 2) (global.set $a) (global.get $a) )\n  (func (export \"as-global.set-last\") (result i32) (i32.const 2) (nop) (global.set $a) (global.get $a) )\n  (func (export \"as-global.set-everywhere\") (result i32) (nop) (nop) (i32.const 2) (nop) (nop) (global.set 0) (global.get $a) )\n  (func (export \"as-load-first\") (param i32) (result i32) (nop) (local.get 0) (i32.load) )\n  (func (export \"as-load-last\") (param i32) (result i32) (local.get 0) (nop) (i32.load) )\n  (func (export \"as-load-everywhere\") (param i32) (result i32) (nop) (nop) (local.get 0) (nop) (nop) (i32.load) )\n  (func (export \"as-store-first\") (param i32 i32) (nop) (local.get 0) (local.get 1) (i32.store) )\n  (func (export \"as-store-mid\") (param i32 i32) (local.get 0) (nop) (local.get 1) (i32.store) )\n  (func (export \"as-store-last\") (param i32 i32) (local.get 0) (local.get 1) (nop) (i32.store) )\n  (func (export \"as-store-everywhere\") (param i32 i32) (nop) (nop) (local.get 0) (nop) (nop) (local.get 1) (nop) (nop) (i32.store) ))",
    "(assert_return (invoke \"as-func-first\") (i32.const 1))",
    "(assert_return (invoke \"as-func-mid\") (i32.const 2))",
    "(assert_return (invoke \"as-func-last\") (i32.const 3))",
    "(assert_return (invoke \"as-func-everywhere\") (i32.const 4))",
    "(assert_return (invoke \"as-drop-first\" (i32.const 0)))",
    "(assert_return (invoke \"as-drop-last\" (i32.const 0)))",
    "(assert_return (invoke \"as-drop-everywhere\" (i32.const 0)))",
    "(assert_return (invoke \"as-select-first\" (i32.const 3)) (i32.const 3))",
    "(assert_return (invoke \"as-select-mid1\" (i32.const 3)) (i32.const 3))",
    "(assert_return (invoke \"as-select-mid2\" (i32.const 3)) (i32.const 3))",
    "(assert_return (invoke \"as-select-last\" (i32.const 3)) (i32.const 3))",
    "(assert_return (invoke \"as-select-everywhere\" (i32.const 3)) (i32.const 3))",
    "(assert_return (invoke \"as-block-first\") (i32.const 2))",
    "(assert_return (invoke \"as-block-mid\") (i32.const 2))",
    "(assert_return (invoke \"as-block-last\") (i32.const 3))",
    "(assert_return (invoke \"as-block-everywhere\") (i32.const 4))",
    "(assert_return (invoke \"as-loop-first\") (i32.const 2))",
    "(assert_return (invoke \"as-loop-mid\") (i32.const 2))",
    "(assert_return (invoke \"as-loop-last\") (i32.const 3))",
    "(assert_return (invoke \"as-loop-everywhere\") (i32.const 4))",
    "(assert_return (invoke \"as-if-condition\" (i32.const 0)))",
    "(assert_return (invoke \"as-if-condition\" (i32.const -1)))",
    "(assert_return (invoke \"as-if-then\" (i32.const 0)))",
    "(assert_return (invoke \"as-if-then\" (i32.const 4)))",
    "(assert_return (invoke \"as-if-else\" (i32.const 0)))",
    "(assert_return (invoke \"as-if-else\" (i32.const 3)))",
    "(assert_return (invoke \"as-br-first\" (i32.const 5)) (i32.const 5))",
    "(assert_return (invoke \"as-br-last\" (i32.const 6)) (i32.const 6))",
    "(assert_return (invoke \"as-br-everywhere\" (i32.const 7)) (i32.const 7))",
    "(assert_return (invoke \"as-br_if-first\" (i32.const 4)) (i32.const 4))",
    "(assert_return (invoke \"as-br_if-mid\" (i32.const 5)) (i32.const 5))",
    "(assert_return (invoke \"as-br_if-last\" (i32.const 6)) (i32.const 6))",
    "(assert_return (invoke \"as-br_if-everywhere\" (i32.const 7)) (i32.const 7))",
    "(assert_return (invoke \"as-br_table-first\" (i32.const 4)) (i32.const 4))",
    "(assert_return (invoke \"as-br_table-mid\" (i32.const 5)) (i32.const 5))",
    "(assert_return (invoke \"as-br_table-last\" (i32.const 6)) (i32.const 6))",
    "(assert_return (invoke \"as-br_table-everywhere\" (i32.const 7)) (i32.const 7))",
    "(assert_return (invoke \"as-return-first\" (i32.const 5)) (i32.const 5))",
    "(assert_return (invoke \"as-return-last\" (i32.const 6)) (i32.const 6))",
    "(assert_return (invoke \"as-return-everywhere\" (i32.const 7)) (i32.const 7))",
    "(assert_return (invoke \"as-call-first\" (i32.const 3) (i32.const 1) (i32.const 2)) (i32.const 2))",
    "(assert_return (invoke \"as-call-mid1\" (i32.const 3) (i32.const 1) (i32.const 2)) (i32.const 2))",
    "(assert_return (invoke \"as-call-mid2\" (i32.const 0) (i32.const 3) (i32.const 1)) (i32.const 2))",
    "(assert_return (invoke \"as-call-last\" (i32.const 10) (i32.const 9) (i32.const -1)) (i32.const 20))",
    "(assert_return (invoke \"as-call-everywhere\" (i32.const 2) (i32.const 1) (i32.const 5)) (i32.const -2))",
    "(assert_return (invoke \"as-unary-first\" (i32.const 30)) (i32.const 1))",
    "(assert_return (invoke \"as-unary-last\" (i32.const 30)) (i32.const 1))",
    "(assert_return (invoke \"as-unary-everywhere\" (i32.const 12)) (i32.const 2))",
    "(assert_return (invoke \"as-binary-first\" (i32.const 3)) (i32.const 6))",
    "(assert_return (invoke \"as-binary-mid\" (i32.const 3)) (i32.const 6))",
    "(assert_return (invoke \"as-binary-last\" (i32.const 3)) (i32.const 6))",
    "(assert_return (invoke \"as-binary-everywhere\" (i32.const 3)) (i32.const 6))",
    "(assert_return (invoke \"as-test-first\" (i32.const 0)) (i32.const 1))",
    "(assert_return (invoke \"as-test-last\" (i32.const 0)) (i32.const 1))",
    "(assert_return (invoke \"as-test-everywhere\" (i32.const 0)) (i32.const 1))",
    "(assert_return (invoke \"as-compare-first\" (i32.const 3)) (i32.const 0))",
    "(assert_return (invoke \"as-compare-mid\" (i32.const 3)) (i32.const 0))",
    "(assert_return (invoke \"as-compare-last\" (i32.const 3)) (i32.const 0))",
    "(assert_return (invoke \"as-compare-everywhere\" (i32.const 3)) (i32.const 1))",
    "(assert_return (invoke \"as-memory.grow-first\" (i32.const 0)) (i32.const 1))",
    "(assert_return (invoke \"as-memory.grow-last\" (i32.const 2)) (i32.const 1))",
    "(assert_return (invoke \"as-memory.grow-everywhere\" (i32.const 12)) (i32.const 3))",
    "(assert_return (invoke \"as-call_indirect-first\") (i32.const 1))",
    "(assert_return (invoke \"as-call_indirect-mid1\") (i32.const 1))",
    "(assert_return (invoke \"as-call_indirect-mid2\") (i32.const 1))",
    "(assert_return (invoke \"as-call_indirect-last\") (i32.const 1))",
    "(assert_return (invoke \"as-call_indirect-everywhere\") (i32.const 1))",
    "(assert_return (invoke \"as-local.set-first\" (i32.const 1)) (i32.const 2))",
    "(assert_return (invoke \"as-local.set-last\" (i32.const 1)) (i32.const 2))",
    "(assert_return (invoke \"as-local.set-everywhere\" (i32.const 1)) (i32.const 2))",
    "(assert_return (invoke \"as-local.tee-first\" (i32.const 1)) (i32.const 2))",
    "(assert_return (invoke \"as-local.tee-last\" (i32.const 1)) (i32.const 2))",
    "(assert_return (invoke \"as-local.tee-everywhere\" (i32.const 1)) (i32.const 2))",
    "(assert_return (invoke \"as-global.set-first\") (i32.const 2))",
    "(assert_return (invoke \"as-global.set-last\") (i32.const 2))",
    "(assert_return (invoke \"as-global.set-everywhere\") (i32.const 2))",
    "(assert_return (invoke \"as-load-first\" (i32.const 100)) (i32.const 0))",
    "(assert_return (invoke \"as-load-last\" (i32.const 100)) (i32.const 0))",
    "(assert_return (invoke \"as-load-everywhere\" (i32.const 100)) (i32.const 0))",
    "(assert_return (invoke \"as-store-first\" (i32.const 0) (i32.const 1)))",
    "(assert_return (invoke \"as-store-mid\" (i32.const 0) (i32.const 2)))",
    "(assert_return (invoke \"as-store-last\" (i32.const 0) (i32.const 3)))",
    "(assert_return (invoke \"as-store-everywhere\" (i32.const 0) (i32.const 4)))",
    "(assert_invalid (module (func $type-i32 (result i32) (nop))) \"type mismatch\")",
    "(assert_invalid (module (func $type-i64 (result i64) (nop))) \"type mismatch\")",
    "(assert_invalid (module (func $type-f32 (result f32) (nop))) \"type mismatch\")",
    "(assert_invalid (module (func $type-f64 (result f64) (nop))) \"type mismatch\")"
  ],
  "dump": {
    "nop.0.wasm": {
      "header": "\nnop.0.wasm:\tfile format wasm 0x1\n\nSections:\n\n     Type start=0x0000000a end=0x0000002d (size=0x00000023) count: 7\n Function start=0x0000002f end=0x00000083 (size=0x00000054) count: 83\n    Table start=0x00000085 end=0x0000008a (size=0x00000005) count: 1\n   Memory start=0x0000008c end=0x0000008f (size=0x00000003) count: 1\n   Global start=0x00000091 end=0x00000097 (size=0x00000006) count: 1\n   Export start=0x0000009a end=0x00000684 (size=0x000005ea) count: 80\n     Elem start=0x00000686 end=0x0000068d (size=0x00000007) count: 1\n     Code start=0x00000690 end=0x00000a32 (size=0x000003a2) count: 83\n",
      "details": "\nnop.0.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nType[7]:\n - type[0] (i32, i32) -> i32\n - type[1] () -> nil\n - type[2] (i32, i32, i32) -> i32\n - type[3] () -> i32\n - type[4] (i32) -> nil\n - type[5] (i32) -> i32\n - type[6] (i32, i32) -> nil\nFunction[83]:\n - func[0] sig=1\n - func[1] sig=2\n - func[2] sig=3 <as-func-first>\n - func[3] sig=3 <as-func-mid>\n - func[4] sig=3 <as-func-last>\n - func[5] sig=3 <as-func-everywhere>\n - func[6] sig=4 <as-drop-first>\n - func[7] sig=4 <as-drop-last>\n - func[8] sig=4 <as-drop-everywhere>\n - func[9] sig=5 <as-select-first>\n - func[10] sig=5 <as-select-mid1>\n - func[11] sig=5 <as-select-mid2>\n - func[12] sig=5 <as-select-last>\n - func[13] sig=5 <as-select-everywhere>\n - func[14] sig=3 <as-block-first>\n - func[15] sig=3 <as-block-mid>\n - func[16] sig=3 <as-block-last>\n - func[17] sig=3 <as-block-everywhere>\n - func[18] sig=3 <as-loop-first>\n - func[19] sig=3 <as-loop-mid>\n - func[20] sig=3 <as-loop-last>\n - func[21] sig=3 <as-loop-everywhere>\n - func[22] sig=4 <as-if-condition>\n - func[23] sig=4 <as-if-then>\n - func[24] sig=4 <as-if-else>\n - func[25] sig=5 <as-br-first>\n - func[26] sig=5 <as-br-last>\n - func[27] sig=5 <as-br-everywhere>\n - func[28] sig=5 <as-br_if-first>\n - func[29] sig=5 <as-br_if-mid>\n - func[30] sig=5 <as-br_if-last>\n - func[31] sig=5 <as-br_if-everywhere>\n - func[32] sig=5 <as-br_table-first>\n - func[33] sig=5 <as-br_table-mid>\n - func[34] sig=5 <as-br_table-last>\n - func[35] sig=5 <as-br_table-everywhere>\n - func[36] sig=5 <as-return-first>\n - func[37] sig=5 <as-return-last>\n - func[38] sig=5 <as-return-everywhere>\n - func[39] sig=2 <as-call-first>\n - func[40] sig=2 <as-call-mid1>\n - func[41] sig=2 <as-call-mid2>\n - func[42] sig=2 <as-call-last>\n - func[43] sig=2 <as-call-everywhere>\n - func[44] sig=5 <as-unary-first>\n - func[45] sig=5 <as-unary-last>\n - func[46] sig=5 <as-unary-everywhere>\n - func[47] sig=5 <as-binary-first>\n - func[48] sig=5 <as-binary-mid>\n - func[49] sig=5 <as-binary-last>\n - func[50] sig=5 <as-binary-everywhere>\n - func[51] sig=5 <as-test-first>\n - func[52] sig=5 <as-test-last>\n - func[53] sig=5 <as-test-everywhere>\n - func[54] sig=5 <as-compare-first>\n - func[55] sig=5 <as-compare-mid>\n - func[56] sig=5 <as-compare-last>\n - func[57] sig=5 <as-compare-everywhere>\n - func[58] sig=5 <as-memory.grow-first>\n - func[59] sig=5 <as-memory.grow-last>\n - func[60] sig=5 <as-memory.grow-everywhere>\n - func[61] sig=0\n - func[62] sig=3 <as-call_indirect-first>\n - func[63] sig=3 <as-call_indirect-mid1>\n - func[64] sig=3 <as-call_indirect-mid2>\n - func[65] sig=3 <as-call_indirect-last>\n - func[66] sig=3 <as-call_indirect-everywhere>\n - func[67] sig=5 <as-local.set-first>\n - func[68] sig=5 <as-local.set-last>\n - func[69] sig=5 <as-local.set-everywhere>\n - func[70] sig=5 <as-local.tee-first>\n - func[71] sig=5 <as-local.tee-last>\n - func[72] sig=5 <as-local.tee-everywhere>\n - func[73] sig=3 <as-global.set-first>\n - func[74] sig=3 <as-global.set-last>\n - func[75] sig=3 <as-global.set-everywhere>\n - func[76] sig=5 <as-load-first>\n - func[77] sig=5 <as-load-last>\n - func[78] sig=5 <as-load-everywhere>\n - func[79] sig=6 <as-store-first>\n - func[80] sig=6 <as-store-mid>\n - func[81] sig=6 <as-store-last>\n - func[82] sig=6 <as-store-everywhere>\nTable[1]:\n - table[0] type=funcref initial=1 max=1\nMemory[1]:\n - memory[0] pages: initial=1\nGlobal[1]:\n - global[0] i32 mutable=1 - init i32=0\nExport[80]:\n - func[2] <as-func-first> -> \"as-func-first\"\n - func[3] <as-func-mid> -> \"as-func-mid\"\n - func[4] <as-func-last> -> \"as-func-last\"\n - func[5] <as-func-everywhere> -> \"as-func-everywhere\"\n - func[6] <as-drop-first> -> \"as-drop-first\"\n - func[7] <as-drop-last> -> \"as-drop-last\"\n - func[8] <as-drop-everywhere> -> \"as-drop-everywhere\"\n - func[9] <as-select-first> -> \"as-select-first\"\n - func[10] <as-select-mid1> -> \"as-select-mid1\"\n - func[11] <as-select-mid2> -> \"as-select-mid2\"\n - func[12] <as-select-last> -> \"as-select-last\"\n - func[13] <as-select-everywhere> -> \"as-select-everywhere\"\n - func[14] <as-block-first> -> \"as-block-first\"\n - func[15] <as-block-mid> -> \"as-block-mid\"\n - func[16] <as-block-last> -> \"as-block-last\"\n - func[17] <as-block-everywhere> -> \"as-block-everywhere\"\n - func[18] <as-loop-first> -> \"as-loop-first\"\n - func[19] <as-loop-mid> -> \"as-loop-mid\"\n - func[20] <as-loop-last> -> \"as-loop-last\"\n - func[21] <as-loop-everywhere> -> \"as-loop-everywhere\"\n - func[22] <as-if-condition> -> \"as-if-condition\"\n - func[23] <as-if-then> -> \"as-if-then\"\n - func[24] <as-if-else> -> \"as-if-else\"\n - func[25] <as-br-first> -> \"as-br-first\"\n - func[26] <as-br-last> -> \"as-br-last\"\n - func[27] <as-br-everywhere> -> \"as-br-everywhere\"\n - func[28] <as-br_if-first> -> \"as-br_if-first\"\n - func[29] <as-br_if-mid> -> \"as-br_if-mid\"\n - func[30] <as-br_if-last> -> \"as-br_if-last\"\n - func[31] <as-br_if-everywhere> -> \"as-br_if-everywhere\"\n - func[32] <as-br_table-first> -> \"as-br_table-first\"\n - func[33] <as-br_table-mid> -> \"as-br_table-mid\"\n - func[34] <as-br_table-last> -> \"as-br_table-last\"\n - func[35] <as-br_table-everywhere> -> \"as-br_table-everywhere\"\n - func[36] <as-return-first> -> \"as-return-first\"\n - func[37] <as-return-last> -> \"as-return-last\"\n - func[38] <as-return-everywhere> -> \"as-return-everywhere\"\n - func[39] <as-call-first> -> \"as-call-first\"\n - func[40] <as-call-mid1> -> \"as-call-mid1\"\n - func[41] <as-call-mid2> -> \"as-call-mid2\"\n - func[42] <as-call-last> -> \"as-call-last\"\n - func[43] <as-call-everywhere> -> \"as-call-everywhere\"\n - func[44] <as-unary-first> -> \"as-unary-first\"\n - func[45] <as-unary-last> -> \"as-unary-last\"\n - func[46] <as-unary-everywhere> -> \"as-unary-everywhere\"\n - func[47] <as-binary-first> -> \"as-binary-first\"\n - func[48] <as-binary-mid> -> \"as-binary-mid\"\n - func[49] <as-binary-last> -> \"as-binary-last\"\n - func[50] <as-binary-everywhere> -> \"as-binary-everywhere\"\n - func[51] <as-test-first> -> \"as-test-first\"\n - func[52] <as-test-last> -> \"as-test-last\"\n - func[53] <as-test-everywhere> -> \"as-test-everywhere\"\n - func[54] <as-compare-first> -> \"as-compare-first\"\n - func[55] <as-compare-mid> -> \"as-compare-mid\"\n - func[56] <as-compare-last> -> \"as-compare-last\"\n - func[57] <as-compare-everywhere> -> \"as-compare-everywhere\"\n - func[58] <as-memory.grow-first> -> \"as-memory.grow-first\"\n - func[59] <as-memory.grow-last> -> \"as-memory.grow-last\"\n - func[60] <as-memory.grow-everywhere> -> \"as-memory.grow-everywhere\"\n - func[62] <as-call_indirect-first> -> \"as-call_indirect-first\"\n - func[63] <as-call_indirect-mid1> -> \"as-call_indirect-mid1\"\n - func[64] <as-call_indirect-mid2> -> \"as-call_indirect-mid2\"\n - func[65] <as-call_indirect-last> -> \"as-call_indirect-last\"\n - func[66] <as-call_indirect-everywhere> -> \"as-call_indirect-everywhere\"\n - func[67] <as-local.set-first> -> \"as-local.set-first\"\n - func[68] <as-local.set-last> -> \"as-local.set-last\"\n - func[69] <as-local.set-everywhere> -> \"as-local.set-everywhere\"\n - func[70] <as-local.tee-first> -> \"as-local.tee-first\"\n - func[71] <as-local.tee-last> -> \"as-local.tee-last\"\n - func[72] <as-local.tee-everywhere> -> \"as-local.tee-everywhere\"\n - func[73] <as-global.set-first> -> \"as-global.set-first\"\n - func[74] <as-global.set-last> -> \"as-global.set-last\"\n - func[75] <as-global.set-everywhere> -> \"as-global.set-everywhere\"\n - func[76] <as-load-first> -> \"as-load-first\"\n - func[77] <as-load-last> -> \"as-load-last\"\n - func[78] <as-load-everywhere> -> \"as-load-everywhere\"\n - func[79] <as-store-first> -> \"as-store-first\"\n - func[80] <as-store-mid> -> \"as-store-mid\"\n - func[81] <as-store-last> -> \"as-store-last\"\n - func[82] <as-store-everywhere> -> \"as-store-everywhere\"\nElem[1]:\n - segment[0] flags=0 table=0 count=1 - init i32=0\n  - elem[0] = ref.func:61\nCode[83]:\n - func[0] size=2\n - func[1] size=10\n - func[2] size=5 <as-func-first>\n - func[3] size=7 <as-func-mid>\n - func[4] size=7 <as-func-last>\n - func[5] size=11 <as-func-everywhere>\n - func[6] size=6 <as-drop-first>\n - func[7] size=6 <as-drop-last>\n - func[8] size=9 <as-drop-everywhere>\n - func[9] size=10 <as-select-first>\n - func[10] size=10 <as-select-mid1>\n - func[11] size=10 <as-select-mid2>\n - func[12] size=10 <as-select-last>\n - func[13] size=16 <as-select-everywhere>\n - func[14] size=8 <as-block-first>\n - func[15] size=10 <as-block-mid>\n - func[16] size=11 <as-block-last>\n - func[17] size=14 <as-block-everywhere>\n - func[18] size=8 <as-loop-first>\n - func[19] size=10 <as-loop-mid>\n - func[20] size=10 <as-loop-last>\n - func[21] size=14 <as-loop-everywhere>\n - func[22] size=10 <as-if-condition>\n - func[23] size=11 <as-if-then>\n - func[24] size=11 <as-if-else>\n - func[25] size=10 <as-br-first>\n - func[26] size=10 <as-br-last>\n - func[27] size=13 <as-br-everywhere>\n - func[28] size=12 <as-br_if-first>\n - func[29] size=12 <as-br_if-mid>\n - func[30] size=12 <as-br_if-last>\n - func[31] size=17 <as-br_if-everywhere>\n - func[32] size=14 <as-br_table-first>\n - func[33] size=14 <as-br_table-mid>\n - func[34] size=14 <as-br_table-last>\n - func[35] size=19 <as-br_table-everywhere>\n - func[36] size=6 <as-return-first>\n - func[37] size=6 <as-return-last>\n - func[38] size=9 <as-return-everywhere>\n - func[39] size=11 <as-call-first>\n - func[40] size=11 <as-call-mid1>\n - func[41] size=11 <as-call-mid2>\n - func[42] size=11 <as-call-last>\n - func[43] size=18 <as-call-everywhere>\n - func[44] size=6 <as-unary-first>\n - func[45] size=6 <as-unary-last>\n - func[46] size=9 <as-unary-everywhere>\n - func[47] size=8 <as-binary-first>\n - func[48] size=8 <as-binary-mid>\n - func[49] size=8 <as-binary-last>\n - func[50] size=12 <as-binary-everywhere>\n - func[51] size=6 <as-test-first>\n - func[52] size=6 <as-test-last>\n - func[53] size=9 <as-test-everywhere>\n - func[54] size=8 <as-compare-first>\n - func[55] size=8 <as-compare-mid>\n - func[56] size=8 <as-compare-last>\n - func[57] size=12 <as-compare-everywhere>\n - func[58] size=7 <as-memory.grow-first>\n - func[59] size=7 <as-memory.grow-last>\n - func[60] size=10 <as-memory.grow-everywhere>\n - func[61] size=4\n - func[62] size=15 <as-call_indirect-first>\n - func[63] size=15 <as-call_indirect-mid1>\n - func[64] size=15 <as-call_indirect-mid2>\n - func[65] size=15 <as-call_indirect-last>\n - func[66] size=22 <as-call_indirect-everywhere>\n - func[67] size=9 <as-local.set-first>\n - func[68] size=9 <as-local.set-last>\n - func[69] size=12 <as-local.set-everywhere>\n - func[70] size=7 <as-local.tee-first>\n - func[71] size=7 <as-local.tee-last>\n - func[72] size=10 <as-local.tee-everywhere>\n - func[73] size=9 <as-global.set-first>\n - func[74] size=9 <as-global.set-last>\n - func[75] size=12 <as-global.set-everywhere>\n - func[76] size=8 <as-load-first>\n - func[77] size=8 <as-load-last>\n - func[78] size=11 <as-load-everywhere>\n - func[79] size=10 <as-store-first>\n - func[80] size=10 <as-store-mid>\n - func[81] size=10 <as-store-last>\n - func[82] size=15 <as-store-everywhere>\n",
      "disassemble": "\nnop.0.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n000692 func[0]:\n 000693: 0b                         | end\n000695 func[1]:\n 000696: 20 00                      | local.get 0\n 000698: 20 01                      | local.get 1\n 00069a: 20 02                      | local.get 2\n 00069c: 6b                         | i32.sub\n 00069d: 6a                         | i32.add\n 00069e: 0b                         | end\n0006a0 func[2] <as-func-first>:\n 0006a1: 01                         | nop\n 0006a2: 41 01                      | i32.const 1\n 0006a4: 0b                         | end\n0006a6 func[3] <as-func-mid>:\n 0006a7: 10 00                      | call 0\n 0006a9: 01                         | nop\n 0006aa: 41 02                      | i32.const 2\n 0006ac: 0b                         | end\n0006ae func[4] <as-func-last>:\n 0006af: 10 00                      | call 0\n 0006b1: 41 03                      | i32.const 3\n 0006b3: 01                         | nop\n 0006b4: 0b                         | end\n0006b6 func[5] <as-func-everywhere>:\n 0006b7: 01                         | nop\n 0006b8: 01                         | nop\n 0006b9: 10 00                      | call 0\n 0006bb: 01                         | nop\n 0006bc: 41 04                      | i32.const 4\n 0006be: 01                         | nop\n 0006bf: 01                         | nop\n 0006c0: 0b                         | end\n0006c2 func[6] <as-drop-first>:\n 0006c3: 01                         | nop\n 0006c4: 20 00                      | local.get 0\n 0006c6: 1a                         | drop\n 0006c7: 0b                         | end\n0006c9 func[7] <as-drop-last>:\n 0006ca: 20 00                      | local.get 0\n 0006cc: 01                         | nop\n 0006cd: 1a                         | drop\n 0006ce: 0b                         | end\n0006d0 func[8] <as-drop-everywhere>:\n 0006d1: 01                         | nop\n 0006d2: 01                         | nop\n 0006d3: 20 00                      | local.get 0\n 0006d5: 01                         | nop\n 0006d6: 01                         | nop\n 0006d7: 1a                         | drop\n 0006d8: 0b                         | end\n0006da func[9] <as-select-first>:\n 0006db: 01                         | nop\n 0006dc: 20 00                      | local.get 0\n 0006de: 20 00                      | local.get 0\n 0006e0: 20 00                      | local.get 0\n 0006e2: 1b                         | select\n 0006e3: 0b                         | end\n0006e5 func[10] <as-select-mid1>:\n 0006e6: 20 00                      | local.get 0\n 0006e8: 01                         | nop\n 0006e9: 20 00                      | local.get 0\n 0006eb: 20 00                      | local.get 0\n 0006ed: 1b                         | select\n 0006ee: 0b                         | end\n0006f0 func[11] <as-select-mid2>:\n 0006f1: 20 00                      | local.get 0\n 0006f3: 20 00                      | local.get 0\n 0006f5: 01                         | nop\n 0006f6: 20 00                      | local.get 0\n 0006f8: 1b                         | select\n 0006f9: 0b                         | end\n0006fb func[12] <as-select-last>:\n 0006fc: 20 00                      | local.get 0\n 0006fe: 20 00                      | local.get 0\n 000700: 20 00                      | local.get 0\n 000702: 01                         | nop\n 000703: 1b                         | select\n 000704: 0b                         | end\n000706 func[13] <as-select-everywhere>:\n 000707: 01                         | nop\n 000708: 20 00                      | local.get 0\n 00070a: 01                         | nop\n 00070b: 01                         | nop\n 00070c: 20 00                      | local.get 0\n 00070e: 01                         | nop\n 00070f: 01                         | nop\n 000710: 20 00                      | local.get 0\n 000712: 01                         | nop\n 000713: 01                         | nop\n 000714: 1b                         | select\n 000715: 0b                         | end\n000717 func[14] <as-block-first>:\n 000718: 02 7f                      | block i32\n 00071a: 01                         |   nop\n 00071b: 41 02                      |   i32.const 2\n 00071d: 0b                         | end\n 00071e: 0b                         | end\n000720 func[15] <as-block-mid>:\n 000721: 02 7f                      | block i32\n 000723: 10 00                      |   call 0\n 000725: 01                         |   nop\n 000726: 41 02                      |   i32.const 2\n 000728: 0b                         | end\n 000729: 0b                         | end\n00072b func[16] <as-block-last>:\n 00072c: 02 7f                      | block i32\n 00072e: 01                         |   nop\n 00072f: 10 00                      |   call 0\n 000731: 41 03                      |   i32.const 3\n 000733: 01                         |   nop\n 000734: 0b                         | end\n 000735: 0b                         | end\n000737 func[17] <as-block-everywhere>:\n 000738: 02 7f                      | block i32\n 00073a: 01                         |   nop\n 00073b: 01                         |   nop\n 00073c: 10 00                      |   call 0\n 00073e: 01                         |   nop\n 00073f: 41 04                      |   i32.const 4\n 000741: 01                         |   nop\n 000742: 01                         |   nop\n 000743: 0b                         | end\n 000744: 0b                         | end\n000746 func[18] <as-loop-first>:\n 000747: 03 7f                      | loop i32\n 000749: 01                         |   nop\n 00074a: 41 02                      |   i32.const 2\n 00074c: 0b                         | end\n 00074d: 0b                         | end\n00074f func[19] <as-loop-mid>:\n 000750: 03 7f                      | loop i32\n 000752: 10 00                      |   call 0\n 000754: 01                         |   nop\n 000755: 41 02                      |   i32.const 2\n 000757: 0b                         | end\n 000758: 0b                         | end\n00075a func[20] <as-loop-last>:\n 00075b: 03 7f                      | loop i32\n 00075d: 10 00                      |   call 0\n 00075f: 41 03                      |   i32.const 3\n 000761: 01                         |   nop\n 000762: 0b                         | end\n 000763: 0b                         | end\n000765 func[21] <as-loop-everywhere>:\n 000766: 03 7f                      | loop i32\n 000768: 01                         |   nop\n 000769: 01                         |   nop\n 00076a: 10 00                      |   call 0\n 00076c: 01                         |   nop\n 00076d: 41 04                      |   i32.const 4\n 00076f: 01                         |   nop\n 000770: 01                         |   nop\n 000771: 0b                         | end\n 000772: 0b                         | end\n000774 func[22] <as-if-condition>:\n 000775: 20 00                      | local.get 0\n 000777: 01                         | nop\n 000778: 04 40                      | if\n 00077a: 10 00                      |   call 0\n 00077c: 0b                         | end\n 00077d: 0b                         | end\n00077f func[23] <as-if-then>:\n 000780: 20 00                      | local.get 0\n 000782: 04 40                      | if\n 000784: 01                         |   nop\n 000785: 05                         | else\n 000786: 10 00                      |   call 0\n 000788: 0b                         | end\n 000789: 0b                         | end\n00078b func[24] <as-if-else>:\n 00078c: 20 00                      | local.get 0\n 00078e: 04 40                      | if\n 000790: 10 00                      |   call 0\n 000792: 05                         | else\n 000793: 01                         |   nop\n 000794: 0b                         | end\n 000795: 0b                         | end\n000797 func[25] <as-br-first>:\n 000798: 02 7f                      | block i32\n 00079a: 01                         |   nop\n 00079b: 20 00                      |   local.get 0\n 00079d: 0c 00                      |   br 0\n 00079f: 0b                         | end\n 0007a0: 0b                         | end\n0007a2 func[26] <as-br-last>:\n 0007a3: 02 7f                      | block i32\n 0007a5: 20 00                      |   local.get 0\n 0007a7: 01                         |   nop\n 0007a8: 0c 00                      |   br 0\n 0007aa: 0b                         | end\n 0007ab: 0b                         | end\n0007ad func[27] <as-br-everywhere>:\n 0007ae: 02 7f                      | block i32\n 0007b0: 01                         |   nop\n 0007b1: 01                         |   nop\n 0007b2: 20 00                      |   local.get 0\n 0007b4: 01                         |   nop\n 0007b5: 01                         |   nop\n 0007b6: 0c 00                      |   br 0\n 0007b8: 0b                         | end\n 0007b9: 0b                         | end\n0007bb func[28] <as-br_if-first>:\n 0007bc: 02 7f                      | block i32\n 0007be: 01                         |   nop\n 0007bf: 20 00                      |   local.get 0\n 0007c1: 20 00                      |   local.get 0\n 0007c3: 0d 00                      |   br_if 0\n 0007c5: 0b                         | end\n 0007c6: 0b                         | end\n0007c8 func[29] <as-br_if-mid>:\n 0007c9: 02 7f                      | block i32\n 0007cb: 20 00                      |   local.get 0\n 0007cd: 01                         |   nop\n 0007ce: 20 00                      |   local.get 0\n 0007d0: 0d 00                      |   br_if 0\n 0007d2: 0b                         | end\n 0007d3: 0b                         | end\n0007d5 func[30] <as-br_if-last>:\n 0007d6: 02 7f                      | block i32\n 0007d8: 20 00                      |   local.get 0\n 0007da: 20 00                      |   local.get 0\n 0007dc: 01                         |   nop\n 0007dd: 0d 00                      |   br_if 0\n 0007df: 0b                         | end\n 0007e0: 0b                         | end\n0007e2 func[31] <as-br_if-everywhere>:\n 0007e3: 02 7f                      | block i32\n 0007e5: 01                         |   nop\n 0007e6: 01                         |   nop\n 0007e7: 20 00                      |   local.get 0\n 0007e9: 01                         |   nop\n 0007ea: 01                         |   nop\n 0007eb: 20 00                      |   local.get 0\n 0007ed: 01                         |   nop\n 0007ee: 01                         |   nop\n 0007ef: 0d 00                      |   br_if 0\n 0007f1: 0b                         | end\n 0007f2: 0b                         | end\n0007f4 func[32] <as-br_table-first>:\n 0007f5: 02 7f                      | block i32\n 0007f7: 01                         |   nop\n 0007f8: 20 00                      |   local.get 0\n 0007fa: 20 00                      |   local.get 0\n 0007fc: 0e 01 00 00                |   br_table 0 0\n 000800: 0b                         | end\n 000801: 0b                         | end\n000803 func[33] <as-br_table-mid>:\n 000804: 02 7f                      | block i32\n 000806: 20 00                      |   local.get 0\n 000808: 01                         |   nop\n 000809: 20 00                      |   local.get 0\n 00080b: 0e 01 00 00                |   br_table 0 0\n 00080f: 0b                         | end\n 000810: 0b                         | end\n000812 func[34] <as-br_table-last>:\n 000813: 02 7f                      | block i32\n 000815: 20 00                      |   local.get 0\n 000817: 20 00                      |   local.get 0\n 000819: 01                         |   nop\n 00081a: 0e 01 00 00                |   br_table 0 0\n 00081e: 0b                         | end\n 00081f: 0b                         | end\n000821 func[35] <as-br_table-everywhere>:\n 000822: 02 7f                      | block i32\n 000824: 01                         |   nop\n 000825: 01                         |   nop\n 000826: 20 00                      |   local.get 0\n 000828: 01                         |   nop\n 000829: 01                         |   nop\n 00082a: 20 00                      |   local.get 0\n 00082c: 01                         |   nop\n 00082d: 01                         |   nop\n 00082e: 0e 01 00 00                |   br_table 0 0\n 000832: 0b                         | end\n 000833: 0b                         | end\n000835 func[36] <as-return-first>:\n 000836: 01                         | nop\n 000837: 20 00                      | local.get 0\n 000839: 0f                         | return\n 00083a: 0b                         | end\n00083c func[37] <as-return-last>:\n 00083d: 20 00                      | local.get 0\n 00083f: 01                         | nop\n 000840: 0f                         | return\n 000841: 0b                         | end\n000843 func[38] <as-return-everywhere>:\n 000844: 01                         | nop\n 000845: 01                         | nop\n 000846: 20 00                      | local.get 0\n 000848: 01                         | nop\n 000849: 01                         | nop\n 00084a: 0f                         | return\n 00084b: 0b                         | end\n00084d func[39] <as-call-first>:\n 00084e: 01                         | nop\n 00084f: 20 00                      | local.get 0\n 000851: 20 01                      | local.get 1\n 000853: 20 02                      | local.get 2\n 000855: 10 01                      | call 1\n 000857: 0b                         | end\n000859 func[40] <as-call-mid1>:\n 00085a: 20 00                      | local.get 0\n 00085c: 01                         | nop\n 00085d: 20 01                      | local.get 1\n 00085f: 20 02                      | local.get 2\n 000861: 10 01                      | call 1\n 000863: 0b                         | end\n000865 func[41] <as-call-mid2>:\n 000866: 20 00                      | local.get 0\n 000868: 20 01                      | local.get 1\n 00086a: 01                         | nop\n 00086b: 20 02                      | local.get 2\n 00086d: 10 01                      | call 1\n 00086f: 0b                         | end\n000871 func[42] <as-call-last>:\n 000872: 20 00                      | local.get 0\n 000874: 20 01                      | local.get 1\n 000876: 20 02                      | local.get 2\n 000878: 01                         | nop\n 000879: 10 01                      | call 1\n 00087b: 0b                         | end\n00087d func[43] <as-call-everywhere>:\n 00087e: 01                         | nop\n 00087f: 01                         | nop\n 000880: 20 00                      | local.get 0\n 000882: 01                         | nop\n 000883: 01                         | nop\n 000884: 20 01                      | local.get 1\n 000886: 01                         | nop\n 000887: 01                         | nop\n 000888: 20 02                      | local.get 2\n 00088a: 01                         | nop\n 00088b: 01                         | nop\n 00088c: 10 01                      | call 1\n 00088e: 0b                         | end\n000890 func[44] <as-unary-first>:\n 000891: 01                         | nop\n 000892: 20 00                      | local.get 0\n 000894: 68                         | i32.ctz\n 000895: 0b                         | end\n000897 func[45] <as-unary-last>:\n 000898: 20 00                      | local.get 0\n 00089a: 01                         | nop\n 00089b: 68                         | i32.ctz\n 00089c: 0b                         | end\n00089e func[46] <as-unary-everywhere>:\n 00089f: 01                         | nop\n 0008a0: 01                         | nop\n 0008a1: 20 00                      | local.get 0\n 0008a3: 01                         | nop\n 0008a4: 01                         | nop\n 0008a5: 68                         | i32.ctz\n 0008a6: 0b                         | end\n0008a8 func[47] <as-binary-first>:\n 0008a9: 01                         | nop\n 0008aa: 20 00                      | local.get 0\n 0008ac: 20 00                      | local.get 0\n 0008ae: 6a                         | i32.add\n 0008af: 0b                         | end\n0008b1 func[48] <as-binary-mid>:\n 0008b2: 20 00                      | local.get 0\n 0008b4: 01                         | nop\n 0008b5: 20 00                      | local.get 0\n 0008b7: 6a                         | i32.add\n 0008b8: 0b                         | end\n0008ba func[49] <as-binary-last>:\n 0008bb: 20 00                      | local.get 0\n 0008bd: 20 00                      | local.get 0\n 0008bf: 01                         | nop\n 0008c0: 6a                         | i32.add\n 0008c1: 0b                         | end\n0008c3 func[50] <as-binary-everywhere>:\n 0008c4: 01                         | nop\n 0008c5: 20 00                      | local.get 0\n 0008c7: 01                         | nop\n 0008c8: 01                         | nop\n 0008c9: 20 00                      | local.get 0\n 0008cb: 01                         | nop\n 0008cc: 01                         | nop\n 0008cd: 6a                         | i32.add\n 0008ce: 0b                         | end\n0008d0 func[51] <as-test-first>:\n 0008d1: 01                         | nop\n 0008d2: 20 00                      | local.get 0\n 0008d4: 45                         | i32.eqz\n 0008d5: 0b                         | end\n0008d7 func[52] <as-test-last>:\n 0008d8: 20 00                      | local.get 0\n 0008da: 01                         | nop\n 0008db: 45                         | i32.eqz\n 0008dc: 0b                         | end\n0008de func[53] <as-test-everywhere>:\n 0008df: 01                         | nop\n 0008e0: 01                         | nop\n 0008e1: 20 00                      | local.get 0\n 0008e3: 01                         | nop\n 0008e4: 01                         | nop\n 0008e5: 45                         | i32.eqz\n 0008e6: 0b                         | end\n0008e8 func[54] <as-compare-first>:\n 0008e9: 01                         | nop\n 0008ea: 20 00                      | local.get 0\n 0008ec: 20 00                      | local.get 0\n 0008ee: 47                         | i32.ne\n 0008ef: 0b                         | end\n0008f1 func[55] <as-compare-mid>:\n 0008f2: 20 00                      | local.get 0\n 0008f4: 01                         | nop\n 0008f5: 20 00                      | local.get 0\n 0008f7: 47                         | i32.ne\n 0008f8: 0b                         | end\n0008fa func[56] <as-compare-last>:\n 0008fb: 20 00                      | local.get 0\n 0008fd: 20 00                      | local.get 0\n 0008ff: 01                         | nop\n 000900: 49                         | i32.lt_u\n 000901: 0b                         | end\n000903 func[57] <as-compare-everywhere>:\n 000904: 01                         | nop\n 000905: 20 00                      | local.get 0\n 000907: 01                         | nop\n 000908: 01                         | nop\n 000909: 20 00                      | local.get 0\n 00090b: 01                         | nop\n 00090c: 01                         | nop\n 00090d: 4c                         | i32.le_s\n 00090e: 0b                         | end\n000910 func[58] <as-memory.grow-first>:\n 000911: 01                         | nop\n 000912: 20 00                      | local.get 0\n 000914: 40 00                      | memory.grow 0\n 000916: 0b                         | end\n000918 func[59] <as-memory.grow-last>:\n 000919: 20 00                      | local.get 0\n 00091b: 01                         | nop\n 00091c: 40 00                      | memory.grow 0\n 00091e: 0b                         | end\n000920 func[60] <as-memory.grow-everywhere>:\n 000921: 01                         | nop\n 000922: 01                         | nop\n 000923: 20 00                      | local.get 0\n 000925: 01                         | nop\n 000926: 01                         | nop\n 000927: 40 00                      | memory.grow 0\n 000929: 0b                         | end\n00092b func[61]:\n 00092c: 20 00                      | local.get 0\n 00092e: 0b                         | end\n000930 func[62] <as-call_indirect-first>:\n 000931: 02 7f                      | block i32\n 000933: 01                         |   nop\n 000934: 41 01                      |   i32.const 1\n 000936: 41 02                      |   i32.const 2\n 000938: 41 00                      |   i32.const 0\n 00093a: 11 00 00                   |   call_indirect 0 (type 0)\n 00093d: 0b                         | end\n 00093e: 0b                         | end\n000940 func[63] <as-call_indirect-mid1>:\n 000941: 02 7f                      | block i32\n 000943: 41 01                      |   i32.const 1\n 000945: 01                         |   nop\n 000946: 41 02                      |   i32.const 2\n 000948: 41 00                      |   i32.const 0\n 00094a: 11 00 00                   |   call_indirect 0 (type 0)\n 00094d: 0b                         | end\n 00094e: 0b                         | end\n000950 func[64] <as-call_indirect-mid2>:\n 000951: 02 7f                      | block i32\n 000953: 41 01                      |   i32.const 1\n 000955: 41 02                      |   i32.const 2\n 000957: 01                         |   nop\n 000958: 41 00                      |   i32.const 0\n 00095a: 11 00 00                   |   call_indirect 0 (type 0)\n 00095d: 0b                         | end\n 00095e: 0b                         | end\n000960 func[65] <as-call_indirect-last>:\n 000961: 02 7f                      | block i32\n 000963: 41 01                      |   i32.const 1\n 000965: 41 02                      |   i32.const 2\n 000967: 41 00                      |   i32.const 0\n 000969: 01                         |   nop\n 00096a: 11 00 00                   |   call_indirect 0 (type 0)\n 00096d: 0b                         | end\n 00096e: 0b                         | end\n000970 func[66] <as-call_indirect-everywhere>:\n 000971: 02 7f                      | block i32\n 000973: 01                         |   nop\n 000974: 01                         |   nop\n 000975: 41 01                      |   i32.const 1\n 000977: 01                         |   nop\n 000978: 01                         |   nop\n 000979: 41 02                      |   i32.const 2\n 00097b: 01                         |   nop\n 00097c: 01                         |   nop\n 00097d: 41 00                      |   i32.const 0\n 00097f: 01                         |   nop\n 000980: 01                         |   nop\n 000981: 11 00 00                   |   call_indirect 0 (type 0)\n 000984: 0b                         | end\n 000985: 0b                         | end\n000987 func[67] <as-local.set-first>:\n 000988: 01                         | nop\n 000989: 41 02                      | i32.const 2\n 00098b: 21 00                      | local.set 0\n 00098d: 20 00                      | local.get 0\n 00098f: 0b                         | end\n000991 func[68] <as-local.set-last>:\n 000992: 41 02                      | i32.const 2\n 000994: 01                         | nop\n 000995: 21 00                      | local.set 0\n 000997: 20 00                      | local.get 0\n 000999: 0b                         | end\n00099b func[69] <as-local.set-everywhere>:\n 00099c: 01                         | nop\n 00099d: 01                         | nop\n 00099e: 41 02                      | i32.const 2\n 0009a0: 01                         | nop\n 0009a1: 01                         | nop\n 0009a2: 21 00                      | local.set 0\n 0009a4: 20 00                      | local.get 0\n 0009a6: 0b                         | end\n0009a8 func[70] <as-local.tee-first>:\n 0009a9: 01                         | nop\n 0009aa: 41 02                      | i32.const 2\n 0009ac: 22 00                      | local.tee 0\n 0009ae: 0b                         | end\n0009b0 func[71] <as-local.tee-last>:\n 0009b1: 41 02                      | i32.const 2\n 0009b3: 01                         | nop\n 0009b4: 22 00                      | local.tee 0\n 0009b6: 0b                         | end\n0009b8 func[72] <as-local.tee-everywhere>:\n 0009b9: 01                         | nop\n 0009ba: 01                         | nop\n 0009bb: 41 02                      | i32.const 2\n 0009bd: 01                         | nop\n 0009be: 01                         | nop\n 0009bf: 22 00                      | local.tee 0\n 0009c1: 0b                         | end\n0009c3 func[73] <as-global.set-first>:\n 0009c4: 01                         | nop\n 0009c5: 41 02                      | i32.const 2\n 0009c7: 24 00                      | global.set 0\n 0009c9: 23 00                      | global.get 0\n 0009cb: 0b                         | end\n0009cd func[74] <as-global.set-last>:\n 0009ce: 41 02                      | i32.const 2\n 0009d0: 01                         | nop\n 0009d1: 24 00                      | global.set 0\n 0009d3: 23 00                      | global.get 0\n 0009d5: 0b                         | end\n0009d7 func[75] <as-global.set-everywhere>:\n 0009d8: 01                         | nop\n 0009d9: 01                         | nop\n 0009da: 41 02                      | i32.const 2\n 0009dc: 01                         | nop\n 0009dd: 01                         | nop\n 0009de: 24 00                      | global.set 0\n 0009e0: 23 00                      | global.get 0\n 0009e2: 0b                         | end\n0009e4 func[76] <as-load-first>:\n 0009e5: 01                         | nop\n 0009e6: 20 00                      | local.get 0\n 0009e8: 28 02 00                   | i32.load 2 0\n 0009eb: 0b                         | end\n0009ed func[77] <as-load-last>:\n 0009ee: 20 00                      | local.get 0\n 0009f0: 01                         | nop\n 0009f1: 28 02 00                   | i32.load 2 0\n 0009f4: 0b                         | end\n0009f6 func[78] <as-load-everywhere>:\n 0009f7: 01                         | nop\n 0009f8: 01                         | nop\n 0009f9: 20 00                      | local.get 0\n 0009fb: 01                         | nop\n 0009fc: 01                         | nop\n 0009fd: 28 02 00                   | i32.load 2 0\n 000a00: 0b                         | end\n000a02 func[79] <as-store-first>:\n 000a03: 01                         | nop\n 000a04: 20 00                      | local.get 0\n 000a06: 20 01                      | local.get 1\n 000a08: 36 02 00                   | i32.store 2 0\n 000a0b: 0b                         | end\n000a0d func[80] <as-store-mid>:\n 000a0e: 20 00                      | local.get 0\n 000a10: 01                         | nop\n 000a11: 20 01                      | local.get 1\n 000a13: 36 02 00                   | i32.store 2 0\n 000a16: 0b                         | end\n000a18 func[81] <as-store-last>:\n 000a19: 20 00                      | local.get 0\n 000a1b: 20 01                      | local.get 1\n 000a1d: 01                         | nop\n 000a1e: 36 02 00                   | i32.store 2 0\n 000a21: 0b                         | end\n000a23 func[82] <as-store-everywhere>:\n 000a24: 01                         | nop\n 000a25: 01                         | nop\n 000a26: 20 00                      | local.get 0\n 000a28: 01                         | nop\n 000a29: 01                         | nop\n 000a2a: 20 01                      | local.get 1\n 000a2c: 01                         | nop\n 000a2d: 01                         | nop\n 000a2e: 36 02 00                   | i32.store 2 0\n 000a31: 0b                         | end\n"
    }
  }
}
