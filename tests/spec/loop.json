{
  "bin": {
    "loop.0.wasm": "AGFzbQEAAAABTg5gAn9/AX9gAABgAAF/YAF/AGADf3x/A398f2AAA39+f2ABfwF/YAACf39gAAJ9fWAAA39/fmADf39+AGACf38Cf39gAX4BfmACfX0BfQM5OAEBAgICAgICAgECAgICAgIAAgICAQECBgICAQICAgICAgICAgICAgICCQICAgICAgICAgIMDA0BBAUBcAEBAQUDAQABBgYBfwFBAAsHyAY1BWVtcHR5AAEIc2luZ3VsYXIAAgVtdWx0aQADBm5lc3RlZAAEBGRlZXAABQ9hcy1zZWxlY3QtZmlyc3QABg1hcy1zZWxlY3QtbWlkAAcOYXMtc2VsZWN0LWxhc3QACA9hcy1pZi1jb25kaXRpb24ACQphcy1pZi10aGVuAAoKYXMtaWYtZWxzZQALDmFzLWJyX2lmLWZpcnN0AAwNYXMtYnJfaWYtbGFzdAANEWFzLWJyX3RhYmxlLWZpcnN0AA4QYXMtYnJfdGFibGUtbGFzdAAPFmFzLWNhbGxfaW5kaXJlY3QtZmlyc3QAERRhcy1jYWxsX2luZGlyZWN0LW1pZAASFWFzLWNhbGxfaW5kaXJlY3QtbGFzdAATDmFzLXN0b3JlLWZpcnN0ABQNYXMtc3RvcmUtbGFzdAAVFGFzLW1lbW9yeS5ncm93LXZhbHVlABYNYXMtY2FsbC12YWx1ZQAYD2FzLXJldHVybi12YWx1ZQAZD2FzLWRyb3Atb3BlcmFuZAAaC2FzLWJyLXZhbHVlABsSYXMtbG9jYWwuc2V0LXZhbHVlABwSYXMtbG9jYWwudGVlLXZhbHVlAB0TYXMtZ2xvYmFsLnNldC12YWx1ZQAeD2FzLWxvYWQtb3BlcmFuZAAfEGFzLXVuYXJ5LW9wZXJhbmQAIBFhcy1iaW5hcnktb3BlcmFuZAAhD2FzLXRlc3Qtb3BlcmFuZAAiEmFzLWNvbXBhcmUtb3BlcmFuZAAjEmFzLWJpbmFyeS1vcGVyYW5kcwAkE2FzLWNvbXBhcmUtb3BlcmFuZHMAJRFhcy1taXhlZC1vcGVyYW5kcwAmCmJyZWFrLWJhcmUAJwticmVhay12YWx1ZQAoEWJyZWFrLW11bHRpLXZhbHVlACkOYnJlYWstcmVwZWF0ZWQAKgticmVhay1pbm5lcgArCmNvbnQtaW5uZXIALAVwYXJhbQAtBnBhcmFtcwAuCXBhcmFtcy1pZAAvC3BhcmFtLWJyZWFrADAMcGFyYW1zLWJyZWFrADEPcGFyYW1zLWlkLWJyZWFrADIHZWZmZWN0cwAzBXdoaWxlADQDZm9yADUHbmVzdGluZwA2CHR5cGUtdXNlADcJBwEAQQALARAKgws4AgALCAADQAsDQAsLCwADQAELA39BBwsLPAADQBAAEAAQABAACwN/EAAQAEEIEAALGgMFEAAQABAAQQgQABAAEAAQAEIHEAAQABAAEABBCRAACxoaCxUAA38DQBAAAkALAQsDfxAAQQkLCwt/AAN/An8DfwJ/A38CfwN/An8DfwJ/A38CfwN/An8DfwJ/A38CfwN/An8DfwJ/A38CfwN/An8DfwJ/A38CfwN/An8DfwJ/A38CfwN/An8DfwJ/EABBlgELCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwwAA39BAQtBAkEDGwsMAEECA39BAQtBAxsLDABBAkEDA39BAQsbCwwAA39BAQsEQBAACwsPAEEBBH8Df0EBCwVBAgsLDwBBAQR/QQIFA39BAQsLCw4AAn8Df0EBC0ECDQALCw4AAn9BAgN/QQELDQALCxAAAn8Df0EBC0ECDgEAAAsLEAACf0ECA39BAQsOAQAACwsEACAACxEAAn8Df0EBC0ECQQARAAALCxEAAn9BAgN/QQELQQARAAALCxEAAn9BAUECA39BAAsRAAALCwwAA39BAQtBATYCAAsMAEEKA39BAQs2AgALCQADf0EBC0AACwQAIAALCQADf0EBCxAXCwgAA39BAQsPCwgAA39BAQsaCwwAAn8Df0EBCwwACwsNAQF/A39BAQshACAACwsBAX8Df0EBCyIACwsAA39BAQskACMACwoAA39BAQsoAgALCgADfxAAQQ0LaAsRAAN/EABBAwsDfxAAQQQLbAsKAAN/EABBDQtFCxcAA30QAEMAAEBACwN9EABDAABAQAteCw4AAwcQAEEDEABBBAtsCxQAAwgQAEMAAEBAEABDAABAQAteCxEAAwcQAEEDEABBBAtBBWpsCzQAAkADQAwBDAAACwsCQANAQQENAQALCwJAA0BBAA4AAQALCwJAA0BBAQ4CAQEBAAsLQRMLFwACf0EAAwMCQEESDAILQRQMAAtBEwsLJwACCUEAQQBCAAMKAkBBEkFuQhIMAgtBFEFsQhQMAAtBE0FtQhMLCzQAAn8Df0ESDAFBEwwBQRRBAA0BGkEUQQENARpBFQwBQRZBAA4AAUEXQQEOAgEBAUEVCwsLZgEBf0EAIQAgAAJ/A38Cf0EBDAILCwtqIQAgAAJ/A38Df0ECDAILCwtqIQAgAAJ/A38CfwN/QQQMAQsLCwtqIQAgAAJ/A39BCAwBaAsLaiEAIAACfwN/A39BEAwCC2gLC2ohACAACzABAX9BACEAIAADfwN/DAELC2ohACAAA38MAGgLaiEAIAADfwN/DAELaAtqIQAgAAsKAEEBAwZBAmoLCwoAQQFBAgMAagsLCgBBAUECAwsLagsVAQF/QQEDBkEEaiIAIABBCkkNAAsLGAEBf0EBQQIDAGoiAEEDIABBCkkNABoLCx4BAX9BACEAQQFBAgMLIABBAWohACAAQQpJDQALagsyAQF/AkADQEEBIQAgAEEDbCEAIABBBWshACAAQQdsIQAMASAAQeQAbCEACwsgAEFyRgslAQF+QgEhAQJAA0AgAFANASAAIAF+IQEgAEIBfSEADAALCyABCysBAn5CASEBQgIhAgJAA0AgAiAAVg0BIAEgAn4hASACQgF8IQIMAAsLIAELWgECfQJAA0AgAEMAAAAAWw0BIAEhAgJAA0AgAkMAAAAAWw0BIAJDAAAAAF0NAyADIAKSIQMgAkMAAABAkyECDAALCyADIACVIQMgAEMAAIA/kyEADAALCyADCz0AA0ALA39BAAsDAxoLQQBEAAAAAAAAAABBAAMECxoaGgN/QQALAwMaC0EARAAAAAAAAAAAQQADBAsaGhoL",
    "loop.1.wat": "KHR5cGUgJHNpZyAoZnVuYyAocGFyYW0gaTMyKSAocmVzdWx0IGkzMikpKShmdW5jIChpMzIuY29uc3QgMCkgKGxvb3AgKHR5cGUgJHNpZykgKHJlc3VsdCBpMzIpIChwYXJhbSBpMzIpKSk=",
    "loop.10.wat": "KHR5cGUgJHNpZyAoZnVuYyAocGFyYW0gaTMyKSAocmVzdWx0IGkzMikpKShmdW5jIChpMzIuY29uc3QgMCkgKGxvb3AgKHR5cGUgJHNpZykgKHBhcmFtIGkzMikgKGRyb3ApKSAodW5yZWFjaGFibGUpKQ==",
    "loop.11.wat": "KHR5cGUgJHNpZyAoZnVuYyAocGFyYW0gaTMyIGkzMikgKHJlc3VsdCBpMzIpKSkoZnVuYyAoaTMyLmNvbnN0IDApIChsb29wICh0eXBlICRzaWcpIChwYXJhbSBpMzIpIChyZXN1bHQgaTMyKSkgKHVucmVhY2hhYmxlKSk=",
    "loop.12.wasm": "AGFzbQEAAAABBAFgAAADAgEACgkBBwADQEEACws=",
    "loop.13.wasm": "AGFzbQEAAAABBQFgAAF/AwIBAAoHAQUAA0ALCw==",
    "loop.14.wasm": "AGFzbQEAAAABBQFgAAF+AwIBAAoHAQUAA0ALCw==",
    "loop.15.wasm": "AGFzbQEAAAABBQFgAAF9AwIBAAoHAQUAA0ALCw==",
    "loop.16.wasm": "AGFzbQEAAAABBQFgAAF8AwIBAAoHAQUAA0ALCw==",
    "loop.17.wasm": "AGFzbQEAAAABBAFgAAADAgEACgkBBwADQEEBCws=",
    "loop.18.wasm": "AGFzbQEAAAABBAFgAAADAgEACgsBCQADQEEBQQILCw==",
    "loop.19.wasm": "AGFzbQEAAAABBQFgAAF/AwIBAAoHAQUAA38LCw==",
    "loop.2.wat": "KHR5cGUgJHNpZyAoZnVuYyAocGFyYW0gaTMyKSAocmVzdWx0IGkzMikpKShmdW5jIChpMzIuY29uc3QgMCkgKGxvb3AgKHBhcmFtIGkzMikgKHR5cGUgJHNpZykgKHJlc3VsdCBpMzIpKSk=",
    "loop.20.wasm": "AGFzbQEAAAABBgFgAAJ/fwMCAQAKBwEFAAMACws=",
    "loop.21.wasm": "AGFzbQEAAAABBQFgAAF/AwIBAAoIAQYAA38BCws=",
    "loop.22.wasm": "AGFzbQEAAAABBgFgAAJ/fwMCAQAKCAEGAAMAAQsL",
    "loop.23.wasm": "AGFzbQEAAAABBQFgAAF/AwIBAAoMAQoAA39DAAAAAAsL",
    "loop.24.wasm": "AGFzbQEAAAABBgFgAAJ/fwMCAQAKCQEHAAMAQQALCw==",
    "loop.25.wasm": "AGFzbQEAAAABBgFgAAJ/fwMCAQAKCwEJAEEBAwBBAgsL",
    "loop.26.wasm": "AGFzbQEAAAABBQFgAAF/AwIBAAoLAQkAA39BAUECCws=",
    "loop.27.wasm": "AGFzbQEAAAABBQFgAAF/AwIBAAoLAQkAA34AAAAbCws=",
    "loop.28.wasm": "AGFzbQEAAAABBAFgAAADAgEACg0BCwBBAAJAA38LGgsL",
    "loop.29.wasm": "AGFzbQEAAAABBAFgAAADAgEACg0BCwBBAANAA38LGgsL",
    "loop.3.wat": "KHR5cGUgJHNpZyAoZnVuYyAocGFyYW0gaTMyKSAocmVzdWx0IGkzMikpKShmdW5jIChpMzIuY29uc3QgMCkgKGxvb3AgKHBhcmFtIGkzMikgKHJlc3VsdCBpMzIpICh0eXBlICRzaWcpKSk=",
    "loop.30.wasm": "AGFzbQEAAAABBAFgAAADAgEACg8BDQBBAEEABEADfwsaCws=",
    "loop.31.wasm": "AGFzbQEAAAABCAJgAABgAX8AAwIBAAoIAQYAAwEaCws=",
    "loop.32.wasm": "AGFzbQEAAAABCQJgAABgAn98AAMCAQAKCQEHAAMBGhoLCw==",
    "loop.33.wasm": "AGFzbQEAAAABCAJgAABgAX8AAwIBAAoNAQsAQwAAAAADARoLCw==",
    "loop.34.wasm": "AGFzbQEAAAABCQJgAABgAn1/AAMCAQAKDgEMAEMAAAAAAwEaGgsL",
    "loop.35.wasm": "AGFzbQEAAAABCAJgAABgAX8AAwIBAAoLAQkAAkADARoLCws=",
    "loop.36.wasm": "AGFzbQEAAAABCQJgAABgAn98AAMCAQAKDAEKAAJAAwEaGgsLCw==",
    "loop.37.wasm": "AGFzbQEAAAABCAJgAABgAX8AAwIBAAoQAQ4AAkBDAAAAAAMBGgsLCw==",
    "loop.38.wasm": "AGFzbQEAAAABCQJgAABgAn1/AAMCAQAKEQEPAAJAQwAAAAADARoaCwsL",
    "loop.39.wat": "KGZ1bmMgKHBhcmFtIGkzMikgKHJlc3VsdCBpMzIpIGxvb3AgKHBhcmFtICR4IGkzMikgZW5kKQ==",
    "loop.4.wat": "KHR5cGUgJHNpZyAoZnVuYyAocGFyYW0gaTMyKSAocmVzdWx0IGkzMikpKShmdW5jIChpMzIuY29uc3QgMCkgKGxvb3AgKHJlc3VsdCBpMzIpICh0eXBlICRzaWcpIChwYXJhbSBpMzIpKSk=",
    "loop.40.wat": "KGZ1bmMgKHBhcmFtIGkzMikgKHJlc3VsdCBpMzIpIChsb29wIChwYXJhbSAkeCBpMzIpKSk=",
    "loop.41.wat": "KGZ1bmMgbG9vcCBlbmQgJGwp",
    "loop.42.wat": "KGZ1bmMgbG9vcCAkYSBlbmQgJGwp",
    "loop.5.wat": "KHR5cGUgJHNpZyAoZnVuYyAocGFyYW0gaTMyKSAocmVzdWx0IGkzMikpKShmdW5jIChpMzIuY29uc3QgMCkgKGxvb3AgKHJlc3VsdCBpMzIpIChwYXJhbSBpMzIpICh0eXBlICRzaWcpKSk=",
    "loop.6.wat": "KGZ1bmMgKGkzMi5jb25zdCAwKSAobG9vcCAocmVzdWx0IGkzMikgKHBhcmFtIGkzMikpKQ==",
    "loop.7.wat": "KGZ1bmMgKGkzMi5jb25zdCAwKSAobG9vcCAocGFyYW0gJHggaTMyKSAoZHJvcCkpKQ==",
    "loop.8.wat": "KHR5cGUgJHNpZyAoZnVuYykpKGZ1bmMgKGxvb3AgKHR5cGUgJHNpZykgKHJlc3VsdCBpMzIpIChpMzIuY29uc3QgMCkpICh1bnJlYWNoYWJsZSkp",
    "loop.9.wat": "KHR5cGUgJHNpZyAoZnVuYyAocGFyYW0gaTMyKSAocmVzdWx0IGkzMikpKShmdW5jIChsb29wICh0eXBlICRzaWcpIChyZXN1bHQgaTMyKSAoaTMyLmNvbnN0IDApKSAodW5yZWFjaGFibGUpKQ=="
  },
  "spec": {"source_filename": "/home/rvagg/git/webassembly/spec/test/core/loop.wast",
 "commands": [
  {"type": "module", "line": 3, "filename": "loop.0.wasm"}, 
  {"type": "assert_return", "line": 430, "action": {"type": "invoke", "field": "empty", "args": []}, "expected": []}, 
  {"type": "assert_return", "line": 431, "action": {"type": "invoke", "field": "singular", "args": []}, "expected": [{"type": "i32", "value": "7"}]}, 
  {"type": "assert_return", "line": 432, "action": {"type": "invoke", "field": "multi", "args": []}, "expected": [{"type": "i32", "value": "8"}]}, 
  {"type": "assert_return", "line": 433, "action": {"type": "invoke", "field": "nested", "args": []}, "expected": [{"type": "i32", "value": "9"}]}, 
  {"type": "assert_return", "line": 434, "action": {"type": "invoke", "field": "deep", "args": []}, "expected": [{"type": "i32", "value": "150"}]}, 
  {"type": "assert_return", "line": 436, "action": {"type": "invoke", "field": "as-select-first", "args": []}, "expected": [{"type": "i32", "value": "1"}]}, 
  {"type": "assert_return", "line": 437, "action": {"type": "invoke", "field": "as-select-mid", "args": []}, "expected": [{"type": "i32", "value": "2"}]}, 
  {"type": "assert_return", "line": 438, "action": {"type": "invoke", "field": "as-select-last", "args": []}, "expected": [{"type": "i32", "value": "2"}]}, 
  {"type": "assert_return", "line": 440, "action": {"type": "invoke", "field": "as-if-condition", "args": []}, "expected": []}, 
  {"type": "assert_return", "line": 441, "action": {"type": "invoke", "field": "as-if-then", "args": []}, "expected": [{"type": "i32", "value": "1"}]}, 
  {"type": "assert_return", "line": 442, "action": {"type": "invoke", "field": "as-if-else", "args": []}, "expected": [{"type": "i32", "value": "2"}]}, 
  {"type": "assert_return", "line": 444, "action": {"type": "invoke", "field": "as-br_if-first", "args": []}, "expected": [{"type": "i32", "value": "1"}]}, 
  {"type": "assert_return", "line": 445, "action": {"type": "invoke", "field": "as-br_if-last", "args": []}, "expected": [{"type": "i32", "value": "2"}]}, 
  {"type": "assert_return", "line": 447, "action": {"type": "invoke", "field": "as-br_table-first", "args": []}, "expected": [{"type": "i32", "value": "1"}]}, 
  {"type": "assert_return", "line": 448, "action": {"type": "invoke", "field": "as-br_table-last", "args": []}, "expected": [{"type": "i32", "value": "2"}]}, 
  {"type": "assert_return", "line": 450, "action": {"type": "invoke", "field": "as-call_indirect-first", "args": []}, "expected": [{"type": "i32", "value": "1"}]}, 
  {"type": "assert_return", "line": 451, "action": {"type": "invoke", "field": "as-call_indirect-mid", "args": []}, "expected": [{"type": "i32", "value": "2"}]}, 
  {"type": "assert_return", "line": 452, "action": {"type": "invoke", "field": "as-call_indirect-last", "args": []}, "expected": [{"type": "i32", "value": "1"}]}, 
  {"type": "assert_return", "line": 454, "action": {"type": "invoke", "field": "as-store-first", "args": []}, "expected": []}, 
  {"type": "assert_return", "line": 455, "action": {"type": "invoke", "field": "as-store-last", "args": []}, "expected": []}, 
  {"type": "assert_return", "line": 457, "action": {"type": "invoke", "field": "as-memory.grow-value", "args": []}, "expected": [{"type": "i32", "value": "1"}]}, 
  {"type": "assert_return", "line": 458, "action": {"type": "invoke", "field": "as-call-value", "args": []}, "expected": [{"type": "i32", "value": "1"}]}, 
  {"type": "assert_return", "line": 459, "action": {"type": "invoke", "field": "as-return-value", "args": []}, "expected": [{"type": "i32", "value": "1"}]}, 
  {"type": "assert_return", "line": 460, "action": {"type": "invoke", "field": "as-drop-operand", "args": []}, "expected": []}, 
  {"type": "assert_return", "line": 461, "action": {"type": "invoke", "field": "as-br-value", "args": []}, "expected": [{"type": "i32", "value": "1"}]}, 
  {"type": "assert_return", "line": 462, "action": {"type": "invoke", "field": "as-local.set-value", "args": []}, "expected": [{"type": "i32", "value": "1"}]}, 
  {"type": "assert_return", "line": 463, "action": {"type": "invoke", "field": "as-local.tee-value", "args": []}, "expected": [{"type": "i32", "value": "1"}]}, 
  {"type": "assert_return", "line": 464, "action": {"type": "invoke", "field": "as-global.set-value", "args": []}, "expected": [{"type": "i32", "value": "1"}]}, 
  {"type": "assert_return", "line": 465, "action": {"type": "invoke", "field": "as-load-operand", "args": []}, "expected": [{"type": "i32", "value": "1"}]}, 
  {"type": "assert_return", "line": 467, "action": {"type": "invoke", "field": "as-unary-operand", "args": []}, "expected": [{"type": "i32", "value": "0"}]}, 
  {"type": "assert_return", "line": 468, "action": {"type": "invoke", "field": "as-binary-operand", "args": []}, "expected": [{"type": "i32", "value": "12"}]}, 
  {"type": "assert_return", "line": 469, "action": {"type": "invoke", "field": "as-test-operand", "args": []}, "expected": [{"type": "i32", "value": "0"}]}, 
  {"type": "assert_return", "line": 470, "action": {"type": "invoke", "field": "as-compare-operand", "args": []}, "expected": [{"type": "i32", "value": "0"}]}, 
  {"type": "assert_return", "line": 471, "action": {"type": "invoke", "field": "as-binary-operands", "args": []}, "expected": [{"type": "i32", "value": "12"}]}, 
  {"type": "assert_return", "line": 472, "action": {"type": "invoke", "field": "as-compare-operands", "args": []}, "expected": [{"type": "i32", "value": "0"}]}, 
  {"type": "assert_return", "line": 473, "action": {"type": "invoke", "field": "as-mixed-operands", "args": []}, "expected": [{"type": "i32", "value": "27"}]}, 
  {"type": "assert_return", "line": 475, "action": {"type": "invoke", "field": "break-bare", "args": []}, "expected": [{"type": "i32", "value": "19"}]}, 
  {"type": "assert_return", "line": 476, "action": {"type": "invoke", "field": "break-value", "args": []}, "expected": [{"type": "i32", "value": "18"}]}, 
  {"type": "assert_return", "line": 477, "action": {"type": "invoke", "field": "break-multi-value", "args": []}, "expected": [{"type": "i32", "value": "18"}, {"type": "i32", "value": "4294967278"}, {"type": "i64", "value": "18"}]}, 
  {"type": "assert_return", "line": 480, "action": {"type": "invoke", "field": "break-repeated", "args": []}, "expected": [{"type": "i32", "value": "18"}]}, 
  {"type": "assert_return", "line": 481, "action": {"type": "invoke", "field": "break-inner", "args": []}, "expected": [{"type": "i32", "value": "31"}]}, 
  {"type": "assert_return", "line": 483, "action": {"type": "invoke", "field": "param", "args": []}, "expected": [{"type": "i32", "value": "3"}]}, 
  {"type": "assert_return", "line": 484, "action": {"type": "invoke", "field": "params", "args": []}, "expected": [{"type": "i32", "value": "3"}]}, 
  {"type": "assert_return", "line": 485, "action": {"type": "invoke", "field": "params-id", "args": []}, "expected": [{"type": "i32", "value": "3"}]}, 
  {"type": "assert_return", "line": 486, "action": {"type": "invoke", "field": "param-break", "args": []}, "expected": [{"type": "i32", "value": "13"}]}, 
  {"type": "assert_return", "line": 487, "action": {"type": "invoke", "field": "params-break", "args": []}, "expected": [{"type": "i32", "value": "12"}]}, 
  {"type": "assert_return", "line": 488, "action": {"type": "invoke", "field": "params-id-break", "args": []}, "expected": [{"type": "i32", "value": "3"}]}, 
  {"type": "assert_return", "line": 490, "action": {"type": "invoke", "field": "effects", "args": []}, "expected": [{"type": "i32", "value": "1"}]}, 
  {"type": "assert_return", "line": 492, "action": {"type": "invoke", "field": "while", "args": [{"type": "i64", "value": "0"}]}, "expected": [{"type": "i64", "value": "1"}]}, 
  {"type": "assert_return", "line": 493, "action": {"type": "invoke", "field": "while", "args": [{"type": "i64", "value": "1"}]}, "expected": [{"type": "i64", "value": "1"}]}, 
  {"type": "assert_return", "line": 494, "action": {"type": "invoke", "field": "while", "args": [{"type": "i64", "value": "2"}]}, "expected": [{"type": "i64", "value": "2"}]}, 
  {"type": "assert_return", "line": 495, "action": {"type": "invoke", "field": "while", "args": [{"type": "i64", "value": "3"}]}, "expected": [{"type": "i64", "value": "6"}]}, 
  {"type": "assert_return", "line": 496, "action": {"type": "invoke", "field": "while", "args": [{"type": "i64", "value": "5"}]}, "expected": [{"type": "i64", "value": "120"}]}, 
  {"type": "assert_return", "line": 497, "action": {"type": "invoke", "field": "while", "args": [{"type": "i64", "value": "20"}]}, "expected": [{"type": "i64", "value": "2432902008176640000"}]}, 
  {"type": "assert_return", "line": 499, "action": {"type": "invoke", "field": "for", "args": [{"type": "i64", "value": "0"}]}, "expected": [{"type": "i64", "value": "1"}]}, 
  {"type": "assert_return", "line": 500, "action": {"type": "invoke", "field": "for", "args": [{"type": "i64", "value": "1"}]}, "expected": [{"type": "i64", "value": "1"}]}, 
  {"type": "assert_return", "line": 501, "action": {"type": "invoke", "field": "for", "args": [{"type": "i64", "value": "2"}]}, "expected": [{"type": "i64", "value": "2"}]}, 
  {"type": "assert_return", "line": 502, "action": {"type": "invoke", "field": "for", "args": [{"type": "i64", "value": "3"}]}, "expected": [{"type": "i64", "value": "6"}]}, 
  {"type": "assert_return", "line": 503, "action": {"type": "invoke", "field": "for", "args": [{"type": "i64", "value": "5"}]}, "expected": [{"type": "i64", "value": "120"}]}, 
  {"type": "assert_return", "line": 504, "action": {"type": "invoke", "field": "for", "args": [{"type": "i64", "value": "20"}]}, "expected": [{"type": "i64", "value": "2432902008176640000"}]}, 
  {"type": "assert_return", "line": 506, "action": {"type": "invoke", "field": "nesting", "args": [{"type": "f32", "value": "0"}, {"type": "f32", "value": "1088421888"}]}, "expected": [{"type": "f32", "value": "0"}]}, 
  {"type": "assert_return", "line": 507, "action": {"type": "invoke", "field": "nesting", "args": [{"type": "f32", "value": "1088421888"}, {"type": "f32", "value": "0"}]}, "expected": [{"type": "f32", "value": "0"}]}, 
  {"type": "assert_return", "line": 508, "action": {"type": "invoke", "field": "nesting", "args": [{"type": "f32", "value": "1065353216"}, {"type": "f32", "value": "1065353216"}]}, "expected": [{"type": "f32", "value": "1065353216"}]}, 
  {"type": "assert_return", "line": 509, "action": {"type": "invoke", "field": "nesting", "args": [{"type": "f32", "value": "1065353216"}, {"type": "f32", "value": "1073741824"}]}, "expected": [{"type": "f32", "value": "1073741824"}]}, 
  {"type": "assert_return", "line": 510, "action": {"type": "invoke", "field": "nesting", "args": [{"type": "f32", "value": "1065353216"}, {"type": "f32", "value": "1077936128"}]}, "expected": [{"type": "f32", "value": "1082130432"}]}, 
  {"type": "assert_return", "line": 511, "action": {"type": "invoke", "field": "nesting", "args": [{"type": "f32", "value": "1065353216"}, {"type": "f32", "value": "1082130432"}]}, "expected": [{"type": "f32", "value": "1086324736"}]}, 
  {"type": "assert_return", "line": 512, "action": {"type": "invoke", "field": "nesting", "args": [{"type": "f32", "value": "1065353216"}, {"type": "f32", "value": "1120403456"}]}, "expected": [{"type": "f32", "value": "1159684096"}]}, 
  {"type": "assert_return", "line": 513, "action": {"type": "invoke", "field": "nesting", "args": [{"type": "f32", "value": "1065353216"}, {"type": "f32", "value": "1120534528"}]}, "expected": [{"type": "f32", "value": "1159892992"}]}, 
  {"type": "assert_return", "line": 514, "action": {"type": "invoke", "field": "nesting", "args": [{"type": "f32", "value": "1073741824"}, {"type": "f32", "value": "1065353216"}]}, "expected": [{"type": "f32", "value": "1065353216"}]}, 
  {"type": "assert_return", "line": 515, "action": {"type": "invoke", "field": "nesting", "args": [{"type": "f32", "value": "1077936128"}, {"type": "f32", "value": "1065353216"}]}, "expected": [{"type": "f32", "value": "1065353216"}]}, 
  {"type": "assert_return", "line": 516, "action": {"type": "invoke", "field": "nesting", "args": [{"type": "f32", "value": "1092616192"}, {"type": "f32", "value": "1065353216"}]}, "expected": [{"type": "f32", "value": "1065353216"}]}, 
  {"type": "assert_return", "line": 517, "action": {"type": "invoke", "field": "nesting", "args": [{"type": "f32", "value": "1073741824"}, {"type": "f32", "value": "1073741824"}]}, "expected": [{"type": "f32", "value": "1077936128"}]}, 
  {"type": "assert_return", "line": 518, "action": {"type": "invoke", "field": "nesting", "args": [{"type": "f32", "value": "1073741824"}, {"type": "f32", "value": "1077936128"}]}, "expected": [{"type": "f32", "value": "1082130432"}]}, 
  {"type": "assert_return", "line": 519, "action": {"type": "invoke", "field": "nesting", "args": [{"type": "f32", "value": "1088421888"}, {"type": "f32", "value": "1082130432"}]}, "expected": [{"type": "f32", "value": "1092940751"}]}, 
  {"type": "assert_return", "line": 520, "action": {"type": "invoke", "field": "nesting", "args": [{"type": "f32", "value": "1088421888"}, {"type": "f32", "value": "1120403456"}]}, "expected": [{"type": "f32", "value": "1166601314"}]}, 
  {"type": "assert_return", "line": 521, "action": {"type": "invoke", "field": "nesting", "args": [{"type": "f32", "value": "1088421888"}, {"type": "f32", "value": "1120534528"}]}, "expected": [{"type": "f32", "value": "1159892992"}]}, 
  {"type": "assert_return", "line": 523, "action": {"type": "invoke", "field": "type-use", "args": []}, "expected": []}, 
  {"type": "assert_malformed", "line": 526, "filename": "loop.1.wat", "text": "unexpected token", "module_type": "text"}, 
  {"type": "assert_malformed", "line": 533, "filename": "loop.2.wat", "text": "unexpected token", "module_type": "text"}, 
  {"type": "assert_malformed", "line": 540, "filename": "loop.3.wat", "text": "unexpected token", "module_type": "text"}, 
  {"type": "assert_malformed", "line": 547, "filename": "loop.4.wat", "text": "unexpected token", "module_type": "text"}, 
  {"type": "assert_malformed", "line": 554, "filename": "loop.5.wat", "text": "unexpected token", "module_type": "text"}, 
  {"type": "assert_malformed", "line": 561, "filename": "loop.6.wat", "text": "unexpected token", "module_type": "text"}, 
  {"type": "assert_malformed", "line": 568, "filename": "loop.7.wat", "text": "unexpected token", "module_type": "text"}, 
  {"type": "assert_malformed", "line": 572, "filename": "loop.8.wat", "text": "inline function type", "module_type": "text"}, 
  {"type": "assert_malformed", "line": 579, "filename": "loop.9.wat", "text": "inline function type", "module_type": "text"}, 
  {"type": "assert_malformed", "line": 586, "filename": "loop.10.wat", "text": "inline function type", "module_type": "text"}, 
  {"type": "assert_malformed", "line": 593, "filename": "loop.11.wat", "text": "inline function type", "module_type": "text"}, 
  {"type": "assert_invalid", "line": 601, "filename": "loop.12.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 609, "filename": "loop.13.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 613, "filename": "loop.14.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 617, "filename": "loop.15.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 621, "filename": "loop.16.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 626, "filename": "loop.17.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 632, "filename": "loop.18.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 638, "filename": "loop.19.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 644, "filename": "loop.20.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 650, "filename": "loop.21.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 656, "filename": "loop.22.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 662, "filename": "loop.23.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 668, "filename": "loop.24.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 674, "filename": "loop.25.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 680, "filename": "loop.26.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 686, "filename": "loop.27.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 693, "filename": "loop.28.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 702, "filename": "loop.29.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 711, "filename": "loop.30.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 721, "filename": "loop.31.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 727, "filename": "loop.32.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 733, "filename": "loop.33.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 739, "filename": "loop.34.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 745, "filename": "loop.35.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 751, "filename": "loop.36.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 757, "filename": "loop.37.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 763, "filename": "loop.38.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_malformed", "line": 770, "filename": "loop.39.wat", "text": "unexpected token", "module_type": "text"}, 
  {"type": "assert_malformed", "line": 774, "filename": "loop.40.wat", "text": "unexpected token", "module_type": "text"}, 
  {"type": "assert_malformed", "line": 779, "filename": "loop.41.wat", "text": "mismatching label", "module_type": "text"}, 
  {"type": "assert_malformed", "line": 783, "filename": "loop.42.wat", "text": "mismatching label", "module_type": "text"}]},
  "code": [
    "(module (memory 1)\n  (func $dummy)\n  (func (export \"empty\") (loop) (loop $l) )\n  (func (export \"singular\") (result i32) (loop (nop)) (loop (result i32) (i32.const 7)) )\n  (func (export \"multi\") (result i32) (loop (call $dummy) (call $dummy) (call $dummy) (call $dummy)) (loop (result i32) (call $dummy) (call $dummy) (i32.const 8) (call $dummy)) (drop) (loop (result i32 i64 i32) (call $dummy) (call $dummy) (call $dummy) (i32.const 8) (call $dummy) (call $dummy) (call $dummy) (call $dummy) (i64.const 7) (call $dummy) (call $dummy) (call $dummy) (call $dummy) (i32.const 9) (call $dummy) ) (drop) (drop) )\n  (func (export \"nested\") (result i32) (loop (result i32) (loop (call $dummy) (block) (nop)) (loop (result i32) (call $dummy) (i32.const 9)) ) )\n  (func (export \"deep\") (result i32) (loop (result i32) (block (result i32) (loop (result i32) (block (result i32) (loop (result i32) (block (result i32) (loop (result i32) (block (result i32) (loop (result i32) (block (result i32) (loop (result i32) (block (result i32) (loop (result i32) (block (result i32) (loop (result i32) (block (result i32) (loop (result i32) (block (result i32) (loop (result i32) (block (result i32) (loop (result i32) (block (result i32) (loop (result i32) (block (result i32) (loop (result i32) (block (result i32) (loop (result i32) (block (result i32) (loop (result i32) (block (result i32) (loop (result i32) (block (result i32) (loop (result i32) (block (result i32) (loop (result i32) (block (result i32) (loop (result i32) (block (result i32) (loop (result i32) (block (result i32) (call $dummy) (i32.const 150) )) )) )) )) )) )) )) )) )) )) )) )) )) )) )) )) )) )) )) )) )\n  (func (export \"as-select-first\") (result i32) (select (loop (result i32) (i32.const 1)) (i32.const 2) (i32.const 3)) )\n  (func (export \"as-select-mid\") (result i32) (select (i32.const 2) (loop (result i32) (i32.const 1)) (i32.const 3)) )\n  (func (export \"as-select-last\") (result i32) (select (i32.const 2) (i32.const 3) (loop (result i32) (i32.const 1))) )\n  (func (export \"as-if-condition\") (loop (result i32) (i32.const 1)) (if (then (call $dummy))) )\n  (func (export \"as-if-then\") (result i32) (if (result i32) (i32.const 1) (then (loop (result i32) (i32.const 1))) (else (i32.const 2))) )\n  (func (export \"as-if-else\") (result i32) (if (result i32) (i32.const 1) (then (i32.const 2)) (else (loop (result i32) (i32.const 1)))) )\n  (func (export \"as-br_if-first\") (result i32) (block (result i32) (br_if 0 (loop (result i32) (i32.const 1)) (i32.const 2))) )\n  (func (export \"as-br_if-last\") (result i32) (block (result i32) (br_if 0 (i32.const 2) (loop (result i32) (i32.const 1)))) )\n  (func (export \"as-br_table-first\") (result i32) (block (result i32) (loop (result i32) (i32.const 1)) (i32.const 2) (br_table 0 0)) )\n  (func (export \"as-br_table-last\") (result i32) (block (result i32) (i32.const 2) (loop (result i32) (i32.const 1)) (br_table 0 0)) )\n  (func $ (param i32 i32) (result i32) (local.get 0)) (type $check (func (param i32 i32) (result i32))) (table funcref (elem $func))\n  (func (export \"as-call_indirect-first\") (result i32) (block (result i32) (call_indirect (type $check) (loop (result i32) (i32.const 1)) (i32.const 2) (i32.const 0) ) ) )\n  (func (export \"as-call_indirect-mid\") (result i32) (block (result i32) (call_indirect (type $check) (i32.const 2) (loop (result i32) (i32.const 1)) (i32.const 0) ) ) )\n  (func (export \"as-call_indirect-last\") (result i32) (block (result i32) (call_indirect (type $check) (i32.const 1) (i32.const 2) (loop (result i32) (i32.const 0)) ) ) )\n  (func (export \"as-store-first\") (loop (result i32) (i32.const 1)) (i32.const 1) (i32.store) )\n  (func (export \"as-store-last\") (i32.const 10) (loop (result i32) (i32.const 1)) (i32.store) )\n  (func (export \"as-memory.grow-value\") (result i32) (memory.grow (loop (result i32) (i32.const 1))) )\n  (func $f (param i32) (result i32) (local.get 0))\n  (func (export \"as-call-value\") (result i32) (call $f (loop (result i32) (i32.const 1))) )\n  (func (export \"as-return-value\") (result i32) (loop (result i32) (i32.const 1)) (return) )\n  (func (export \"as-drop-operand\") (drop (loop (result i32) (i32.const 1))) )\n  (func (export \"as-br-value\") (result i32) (block (result i32) (br 0 (loop (result i32) (i32.const 1)))) )\n  (func (export \"as-local.set-value\") (result i32) (local i32) (local.set 0 (loop (result i32) (i32.const 1))) (local.get 0) )\n  (func (export \"as-local.tee-value\") (result i32) (local i32) (local.tee 0 (loop (result i32) (i32.const 1))) ) (global $a (mut i32) (i32.const 0))\n  (func (export \"as-global.set-value\") (result i32) (global.set $a (loop (result i32) (i32.const 1))) (global.get $a) )\n  (func (export \"as-load-operand\") (result i32) (i32.load (loop (result i32) (i32.const 1))) )\n  (func (export \"as-unary-operand\") (result i32) (i32.ctz (loop (result i32) (call $dummy) (i32.const 13))) )\n  (func (export \"as-binary-operand\") (result i32) (i32.mul (loop (result i32) (call $dummy) (i32.const 3)) (loop (result i32) (call $dummy) (i32.const 4)) ) )\n  (func (export \"as-test-operand\") (result i32) (i32.eqz (loop (result i32) (call $dummy) (i32.const 13))) )\n  (func (export \"as-compare-operand\") (result i32) (f32.gt (loop (result f32) (call $dummy) (f32.const 3)) (loop (result f32) (call $dummy) (f32.const 3)) ) )\n  (func (export \"as-binary-operands\") (result i32) (i32.mul (loop (result i32 i32) (call $dummy) (i32.const 3) (call $dummy) (i32.const 4) ) ) )\n  (func (export \"as-compare-operands\") (result i32) (f32.gt (loop (result f32 f32) (call $dummy) (f32.const 3) (call $dummy) (f32.const 3) ) ) )\n  (func (export \"as-mixed-operands\") (result i32) (loop (result i32 i32) (call $dummy) (i32.const 3) (call $dummy) (i32.const 4) ) (i32.const 5) (i32.add) (i32.mul) )\n  (func (export \"break-bare\") (result i32) (block (loop (br 1) (br 0) (unreachable))) (block (loop (br_if 1 (i32.const 1)) (unreachable))) (block (loop (br_table 1 (i32.const 0)) (unreachable))) (block (loop (br_table 1 1 1 (i32.const 1)) (unreachable))) (i32.const 19) )\n  (func (export \"break-value\") (result i32) (block (result i32) (i32.const 0) (loop (param i32) (block (br 2 (i32.const 18))) (br 0 (i32.const 20)) ) (i32.const 19) ) )\n  (func (export \"break-multi-value\") (result i32 i32 i64) (block (result i32 i32 i64) (i32.const 0) (i32.const 0) (i64.const 0) (loop (param i32 i32 i64) (block (br 2 (i32.const 18) (i32.const -18) (i64.const 18))) (br 0 (i32.const 20) (i32.const -20) (i64.const 20)) ) (i32.const 19) (i32.const -19) (i64.const 19) ) )\n  (func (export \"break-repeated\") (result i32) (block (result i32) (loop (result i32) (br 1 (i32.const 18)) (br 1 (i32.const 19)) (drop (br_if 1 (i32.const 20) (i32.const 0))) (drop (br_if 1 (i32.const 20) (i32.const 1))) (br 1 (i32.const 21)) (br_table 1 (i32.const 22) (i32.const 0)) (br_table 1 1 1 (i32.const 23) (i32.const 1)) (i32.const 21) ) ) )\n  (func (export \"break-inner\") (result i32) (local i32) (local.set 0 (i32.const 0)) (local.set 0 (i32.add (local.get 0) (block (result i32) (loop (result i32) (block (result i32) (br 2 (i32.const 0x1))))))) (local.set 0 (i32.add (local.get 0) (block (result i32) (loop (result i32) (loop (result i32) (br 2 (i32.const 0x2))))))) (local.set 0 (i32.add (local.get 0) (block (result i32) (loop (result i32) (block (result i32) (loop (result i32) (br 1 (i32.const 0x4)))))))) (local.set 0 (i32.add (local.get 0) (block (result i32) (loop (result i32) (i32.ctz (br 1 (i32.const 0x8))))))) (local.set 0 (i32.add (local.get 0) (block (result i32) (loop (result i32) (i32.ctz (loop (result i32) (br 2 (i32.const 0x10)))))))) (local.get 0) )\n  (func (export \"cont-inner\") (result i32) (local i32) (local.set 0 (i32.const 0)) (local.set 0 (i32.add (local.get 0) (loop (result i32) (loop (result i32) (br 1))))) (local.set 0 (i32.add (local.get 0) (loop (result i32) (i32.ctz (br 0))))) (local.set 0 (i32.add (local.get 0) (loop (result i32) (i32.ctz (loop (result i32) (br 1)))))) (local.get 0) )\n  (func (export \"param\") (result i32) (i32.const 1) (loop (param i32) (result i32) (i32.const 2) (i32.add) ) )\n  (func (export \"params\") (result i32) (i32.const 1) (i32.const 2) (loop (param i32 i32) (result i32) (i32.add) ) )\n  (func (export \"params-id\") (result i32) (i32.const 1) (i32.const 2) (loop (param i32 i32) (result i32 i32)) (i32.add) )\n  (func (export \"param-break\") (result i32) (local $x i32) (i32.const 1) (loop (param i32) (result i32) (i32.const 4) (i32.add) (local.tee $x) (local.get $x) (i32.const 10) (i32.lt_u) (br_if 0) ) )\n  (func (export \"params-break\") (result i32) (local $x i32) (i32.const 1) (i32.const 2) (loop (param i32 i32) (result i32) (i32.add) (local.tee $x) (i32.const 3) (local.get $x) (i32.const 10) (i32.lt_u) (br_if 0) (drop) ) )\n  (func (export \"params-id-break\") (result i32) (local $x i32) (local.set $x (i32.const 0)) (i32.const 1) (i32.const 2) (loop (param i32 i32) (result i32 i32) (local.set $x (i32.add (local.get $x) (i32.const 1))) (br_if 0 (i32.lt_u (local.get $x) (i32.const 10))) ) (i32.add) )\n  (func $fx (export \"effects\") (result i32) (local i32) (block (loop (local.set 0 (i32.const 1)) (local.set 0 (i32.mul (local.get 0) (i32.const 3))) (local.set 0 (i32.sub (local.get 0) (i32.const 5))) (local.set 0 (i32.mul (local.get 0) (i32.const 7))) (br 1) (local.set 0 (i32.mul (local.get 0) (i32.const 100))) ) ) (i32.eq (local.get 0) (i32.const -14)) )\n  (func (export \"while\") (param i64) (result i64) (local i64) (local.set 1 (i64.const 1)) (block (loop (br_if 1 (i64.eqz (local.get 0))) (local.set 1 (i64.mul (local.get 0) (local.get 1))) (local.set 0 (i64.sub (local.get 0) (i64.const 1))) (br 0) ) ) (local.get 1) )\n  (func (export \"for\") (param i64) (result i64) (local i64 i64) (local.set 1 (i64.const 1)) (local.set 2 (i64.const 2)) (block (loop (br_if 1 (i64.gt_u (local.get 2) (local.get 0))) (local.set 1 (i64.mul (local.get 1) (local.get 2))) (local.set 2 (i64.add (local.get 2) (i64.const 1))) (br 0) ) ) (local.get 1) )\n  (func (export \"nesting\") (param f32 f32) (result f32) (local f32 f32) (block (loop (br_if 1 (f32.eq (local.get 0) (f32.const 0))) (local.set 2 (local.get 1)) (block (loop (br_if 1 (f32.eq (local.get 2) (f32.const 0))) (br_if 3 (f32.lt (local.get 2) (f32.const 0))) (local.set 3 (f32.add (local.get 3) (local.get 2))) (local.set 2 (f32.sub (local.get 2) (f32.const 2))) (br 0) ) ) (local.set 3 (f32.div (local.get 3) (local.get 0))) (local.set 0 (f32.sub (local.get 0) (f32.const 1))) (br 0) ) ) (local.get 3) ) (type $block-sig-1 (func)) (type $block-sig-2 (func (result i32))) (type $block-sig-3 (func (param $x i32))) (type $block-sig-4 (func (param i32 f64 i32) (result i32 f64 i32)))\n  (func (export \"type-use\") (loop (type $block-sig-1)) (loop (type $block-sig-2) (i32.const 0)) (loop (type $block-sig-3) (drop)) (i32.const 0) (f64.const 0) (i32.const 0) (loop (type $block-sig-4)) (drop) (drop) (drop) (loop (type $block-sig-2) (result i32) (i32.const 0)) (loop (type $block-sig-3) (param i32) (drop)) (i32.const 0) (f64.const 0) (i32.const 0) (loop (type $block-sig-4) (param i32) (param f64 i32) (result i32 f64) (result i32) ) (drop) (drop) (drop) ))",
    "(assert_return (invoke \"empty\"))",
    "(assert_return (invoke \"singular\") (i32.const 7))",
    "(assert_return (invoke \"multi\") (i32.const 8))",
    "(assert_return (invoke \"nested\") (i32.const 9))",
    "(assert_return (invoke \"deep\") (i32.const 150))",
    "(assert_return (invoke \"as-select-first\") (i32.const 1))",
    "(assert_return (invoke \"as-select-mid\") (i32.const 2))",
    "(assert_return (invoke \"as-select-last\") (i32.const 2))",
    "(assert_return (invoke \"as-if-condition\"))",
    "(assert_return (invoke \"as-if-then\") (i32.const 1))",
    "(assert_return (invoke \"as-if-else\") (i32.const 2))",
    "(assert_return (invoke \"as-br_if-first\") (i32.const 1))",
    "(assert_return (invoke \"as-br_if-last\") (i32.const 2))",
    "(assert_return (invoke \"as-br_table-first\") (i32.const 1))",
    "(assert_return (invoke \"as-br_table-last\") (i32.const 2))",
    "(assert_return (invoke \"as-call_indirect-first\") (i32.const 1))",
    "(assert_return (invoke \"as-call_indirect-mid\") (i32.const 2))",
    "(assert_return (invoke \"as-call_indirect-last\") (i32.const 1))",
    "(assert_return (invoke \"as-store-first\"))",
    "(assert_return (invoke \"as-store-last\"))",
    "(assert_return (invoke \"as-memory.grow-value\") (i32.const 1))",
    "(assert_return (invoke \"as-call-value\") (i32.const 1))",
    "(assert_return (invoke \"as-return-value\") (i32.const 1))",
    "(assert_return (invoke \"as-drop-operand\"))",
    "(assert_return (invoke \"as-br-value\") (i32.const 1))",
    "(assert_return (invoke \"as-local.set-value\") (i32.const 1))",
    "(assert_return (invoke \"as-local.tee-value\") (i32.const 1))",
    "(assert_return (invoke \"as-global.set-value\") (i32.const 1))",
    "(assert_return (invoke \"as-load-operand\") (i32.const 1))",
    "(assert_return (invoke \"as-unary-operand\") (i32.const 0))",
    "(assert_return (invoke \"as-binary-operand\") (i32.const 12))",
    "(assert_return (invoke \"as-test-operand\") (i32.const 0))",
    "(assert_return (invoke \"as-compare-operand\") (i32.const 0))",
    "(assert_return (invoke \"as-binary-operands\") (i32.const 12))",
    "(assert_return (invoke \"as-compare-operands\") (i32.const 0))",
    "(assert_return (invoke \"as-mixed-operands\") (i32.const 27))",
    "(assert_return (invoke \"break-bare\") (i32.const 19))",
    "(assert_return (invoke \"break-value\") (i32.const 18))",
    "(assert_return (invoke \"break-multi-value\") (i32.const 18) (i32.const -18) (i64.const 18))",
    "(assert_return (invoke \"break-repeated\") (i32.const 18))",
    "(assert_return (invoke \"break-inner\") (i32.const 0x1f))",
    "(assert_return (invoke \"param\") (i32.const 3))",
    "(assert_return (invoke \"params\") (i32.const 3))",
    "(assert_return (invoke \"params-id\") (i32.const 3))",
    "(assert_return (invoke \"param-break\") (i32.const 13))",
    "(assert_return (invoke \"params-break\") (i32.const 12))",
    "(assert_return (invoke \"params-id-break\") (i32.const 3))",
    "(assert_return (invoke \"effects\") (i32.const 1))",
    "(assert_return (invoke \"while\" (i64.const 0)) (i64.const 1))",
    "(assert_return (invoke \"while\" (i64.const 1)) (i64.const 1))",
    "(assert_return (invoke \"while\" (i64.const 2)) (i64.const 2))",
    "(assert_return (invoke \"while\" (i64.const 3)) (i64.const 6))",
    "(assert_return (invoke \"while\" (i64.const 5)) (i64.const 120))",
    "(assert_return (invoke \"while\" (i64.const 20)) (i64.const 2432902008176640000))",
    "(assert_return (invoke \"for\" (i64.const 0)) (i64.const 1))",
    "(assert_return (invoke \"for\" (i64.const 1)) (i64.const 1))",
    "(assert_return (invoke \"for\" (i64.const 2)) (i64.const 2))",
    "(assert_return (invoke \"for\" (i64.const 3)) (i64.const 6))",
    "(assert_return (invoke \"for\" (i64.const 5)) (i64.const 120))",
    "(assert_return (invoke \"for\" (i64.const 20)) (i64.const 2432902008176640000))",
    "(assert_return (invoke \"nesting\" (f32.const 0) (f32.const 7)) (f32.const 0))",
    "(assert_return (invoke \"nesting\" (f32.const 7) (f32.const 0)) (f32.const 0))",
    "(assert_return (invoke \"nesting\" (f32.const 1) (f32.const 1)) (f32.const 1))",
    "(assert_return (invoke \"nesting\" (f32.const 1) (f32.const 2)) (f32.const 2))",
    "(assert_return (invoke \"nesting\" (f32.const 1) (f32.const 3)) (f32.const 4))",
    "(assert_return (invoke \"nesting\" (f32.const 1) (f32.const 4)) (f32.const 6))",
    "(assert_return (invoke \"nesting\" (f32.const 1) (f32.const 100)) (f32.const 2550))",
    "(assert_return (invoke \"nesting\" (f32.const 1) (f32.const 101)) (f32.const 2601))",
    "(assert_return (invoke \"nesting\" (f32.const 2) (f32.const 1)) (f32.const 1))",
    "(assert_return (invoke \"nesting\" (f32.const 3) (f32.const 1)) (f32.const 1))",
    "(assert_return (invoke \"nesting\" (f32.const 10) (f32.const 1)) (f32.const 1))",
    "(assert_return (invoke \"nesting\" (f32.const 2) (f32.const 2)) (f32.const 3))",
    "(assert_return (invoke \"nesting\" (f32.const 2) (f32.const 3)) (f32.const 4))",
    "(assert_return (invoke \"nesting\" (f32.const 7) (f32.const 4)) (f32.const 10.3095235825))",
    "(assert_return (invoke \"nesting\" (f32.const 7) (f32.const 100)) (f32.const 4381.54785156))",
    "(assert_return (invoke \"nesting\" (f32.const 7) (f32.const 101)) (f32.const 2601))",
    "(assert_return (invoke \"type-use\"))",
    "(assert_malformed (module quote \"(type $sig (func (param i32) (result i32)))\" \"(func (i32.const 0) (loop (type $sig) (result i32) (param i32)))\" ) \"unexpected token\")",
    "(assert_malformed (module quote \"(type $sig (func (param i32) (result i32)))\" \"(func (i32.const 0) (loop (param i32) (type $sig) (result i32)))\" ) \"unexpected token\")",
    "(assert_malformed (module quote \"(type $sig (func (param i32) (result i32)))\" \"(func (i32.const 0) (loop (param i32) (result i32) (type $sig)))\" ) \"unexpected token\")",
    "(assert_malformed (module quote \"(type $sig (func (param i32) (result i32)))\" \"(func (i32.const 0) (loop (result i32) (type $sig) (param i32)))\" ) \"unexpected token\")",
    "(assert_malformed (module quote \"(type $sig (func (param i32) (result i32)))\" \"(func (i32.const 0) (loop (result i32) (param i32) (type $sig)))\" ) \"unexpected token\")",
    "(assert_malformed (module quote \"(func (i32.const 0) (loop (result i32) (param i32)))\" ) \"unexpected token\")",
    "(assert_malformed (module quote \"(func (i32.const 0) (loop (param $x i32) (drop)))\") \"unexpected token\")",
    "(assert_malformed (module quote \"(type $sig (func))\" \"(func (loop (type $sig) (result i32) (i32.const 0)) (unreachable))\" ) \"inline function type\")",
    "(assert_malformed (module quote \"(type $sig (func (param i32) (result i32)))\" \"(func (loop (type $sig) (result i32) (i32.const 0)) (unreachable))\" ) \"inline function type\")",
    "(assert_malformed (module quote \"(type $sig (func (param i32) (result i32)))\" \"(func (i32.const 0) (loop (type $sig) (param i32) (drop)) (unreachable))\" ) \"inline function type\")",
    "(assert_malformed (module quote \"(type $sig (func (param i32 i32) (result i32)))\" \"(func (i32.const 0) (loop (type $sig) (param i32) (result i32)) (unreachable))\" ) \"inline function type\")",
    "(assert_invalid (module (type $sig (func)) (func (loop (type $sig) (i32.const 0))) ) \"type mismatch\")",
    "(assert_invalid (module (func $type-empty-i32 (result i32) (loop))) \"type mismatch\")",
    "(assert_invalid (module (func $type-empty-i64 (result i64) (loop))) \"type mismatch\")",
    "(assert_invalid (module (func $type-empty-f32 (result f32) (loop))) \"type mismatch\")",
    "(assert_invalid (module (func $type-empty-f64 (result f64) (loop))) \"type mismatch\")",
    "(assert_invalid (module (func $type-value-num-vs-void (loop (i32.const 1)) )) \"type mismatch\")",
    "(assert_invalid (module (func $type-value-nums-vs-void (loop (i32.const 1) (i32.const 2)) )) \"type mismatch\")",
    "(assert_invalid (module (func $type-value-empty-vs-num (result i32) (loop (result i32)) )) \"type mismatch\")",
    "(assert_invalid (module (func $type-value-empty-vs-nums (result i32 i32) (loop (result i32 i32)) )) \"type mismatch\")",
    "(assert_invalid (module (func $type-value-void-vs-num (result i32) (loop (result i32) (nop)) )) \"type mismatch\")",
    "(assert_invalid (module (func $type-value-void-vs-nums (result i32 i32) (loop (result i32 i32) (nop)) )) \"type mismatch\")",
    "(assert_invalid (module (func $type-value-num-vs-num (result i32) (loop (result i32) (f32.const 0)) )) \"type mismatch\")",
    "(assert_invalid (module (func $type-value-num-vs-nums (result i32 i32) (loop (result i32 i32) (i32.const 0)) )) \"type mismatch\")",
    "(assert_invalid (module (func $type-value-partial-vs-nums (result i32 i32) (i32.const 1) (loop (result i32 i32) (i32.const 2)) )) \"type mismatch\")",
    "(assert_invalid (module (func $type-value-nums-vs-num (result i32) (loop (result i32) (i32.const 1) (i32.const 2)) )) \"type mismatch\")",
    "(assert_invalid (module (func $type-value-unreached-select (result i32) (loop (result i64) (select (unreachable) (unreachable) (unreachable))) )) \"type mismatch\")",
    "(assert_invalid (module (func $type-value-empty-in-block (i32.const 0) (block (loop (result i32)) (drop)) ) ) \"type mismatch\")",
    "(assert_invalid (module (func $type-value-empty-in-loop (i32.const 0) (loop (loop (result i32)) (drop)) ) ) \"type mismatch\")",
    "(assert_invalid (module (func $type-value-empty-in-then (i32.const 0) (i32.const 0) (if (then (loop (result i32)) (drop))) ) ) \"type mismatch\")",
    "(assert_invalid (module (func $type-param-void-vs-num (loop (param i32) (drop)) )) \"type mismatch\")",
    "(assert_invalid (module (func $type-param-void-vs-nums (loop (param i32 f64) (drop) (drop)) )) \"type mismatch\")",
    "(assert_invalid (module (func $type-param-num-vs-num (f32.const 0) (loop (param i32) (drop)) )) \"type mismatch\")",
    "(assert_invalid (module (func $type-param-num-vs-nums (f32.const 0) (loop (param f32 i32) (drop) (drop)) )) \"type mismatch\")",
    "(assert_invalid (module (func $type-param-nested-void-vs-num (block (loop (param i32) (drop))) )) \"type mismatch\")",
    "(assert_invalid (module (func $type-param-void-vs-nums (block (loop (param i32 f64) (drop) (drop))) )) \"type mismatch\")",
    "(assert_invalid (module (func $type-param-num-vs-num (block (f32.const 0) (loop (param i32) (drop))) )) \"type mismatch\")",
    "(assert_invalid (module (func $type-param-num-vs-nums (block (f32.const 0) (loop (param f32 i32) (drop) (drop))) )) \"type mismatch\")",
    "(assert_malformed (module quote \"(func (param i32) (result i32) loop (param $x i32) end)\") \"unexpected token\")",
    "(assert_malformed (module quote \"(func (param i32) (result i32) (loop (param $x i32)))\") \"unexpected token\")",
    "(assert_malformed (module quote \"(func loop end $l)\") \"mismatching label\")",
    "(assert_malformed (module quote \"(func loop $a end $l)\") \"mismatching label\")"
  ],
  "dump": {
    "loop.0.wasm": {
      "header": "\nloop.0.wasm:\tfile format wasm 0x1\n\nSections:\n\n     Type start=0x0000000a end=0x00000058 (size=0x0000004e) count: 14\n Function start=0x0000005a end=0x00000093 (size=0x00000039) count: 56\n    Table start=0x00000095 end=0x0000009a (size=0x00000005) count: 1\n   Memory start=0x0000009c end=0x0000009f (size=0x00000003) count: 1\n   Global start=0x000000a1 end=0x000000a7 (size=0x00000006) count: 1\n   Export start=0x000000aa end=0x000003f2 (size=0x00000348) count: 53\n     Elem start=0x000003f4 end=0x000003fb (size=0x00000007) count: 1\n     Code start=0x000003fe end=0x00000981 (size=0x00000583) count: 56\n",
      "details": "\nloop.0.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nType[14]:\n - type[0] (i32, i32) -> i32\n - type[1] () -> nil\n - type[2] () -> i32\n - type[3] (i32) -> nil\n - type[4] (i32, f64, i32) -> (i32, f64, i32)\n - type[5] () -> (i32, i64, i32)\n - type[6] (i32) -> i32\n - type[7] () -> (i32, i32)\n - type[8] () -> (f32, f32)\n - type[9] () -> (i32, i32, i64)\n - type[10] (i32, i32, i64) -> nil\n - type[11] (i32, i32) -> (i32, i32)\n - type[12] (i64) -> i64\n - type[13] (f32, f32) -> f32\nFunction[56]:\n - func[0] sig=1\n - func[1] sig=1 <empty>\n - func[2] sig=2 <singular>\n - func[3] sig=2 <multi>\n - func[4] sig=2 <nested>\n - func[5] sig=2 <deep>\n - func[6] sig=2 <as-select-first>\n - func[7] sig=2 <as-select-mid>\n - func[8] sig=2 <as-select-last>\n - func[9] sig=1 <as-if-condition>\n - func[10] sig=2 <as-if-then>\n - func[11] sig=2 <as-if-else>\n - func[12] sig=2 <as-br_if-first>\n - func[13] sig=2 <as-br_if-last>\n - func[14] sig=2 <as-br_table-first>\n - func[15] sig=2 <as-br_table-last>\n - func[16] sig=0\n - func[17] sig=2 <as-call_indirect-first>\n - func[18] sig=2 <as-call_indirect-mid>\n - func[19] sig=2 <as-call_indirect-last>\n - func[20] sig=1 <as-store-first>\n - func[21] sig=1 <as-store-last>\n - func[22] sig=2 <as-memory.grow-value>\n - func[23] sig=6\n - func[24] sig=2 <as-call-value>\n - func[25] sig=2 <as-return-value>\n - func[26] sig=1 <as-drop-operand>\n - func[27] sig=2 <as-br-value>\n - func[28] sig=2 <as-local.set-value>\n - func[29] sig=2 <as-local.tee-value>\n - func[30] sig=2 <as-global.set-value>\n - func[31] sig=2 <as-load-operand>\n - func[32] sig=2 <as-unary-operand>\n - func[33] sig=2 <as-binary-operand>\n - func[34] sig=2 <as-test-operand>\n - func[35] sig=2 <as-compare-operand>\n - func[36] sig=2 <as-binary-operands>\n - func[37] sig=2 <as-compare-operands>\n - func[38] sig=2 <as-mixed-operands>\n - func[39] sig=2 <break-bare>\n - func[40] sig=2 <break-value>\n - func[41] sig=9 <break-multi-value>\n - func[42] sig=2 <break-repeated>\n - func[43] sig=2 <break-inner>\n - func[44] sig=2 <cont-inner>\n - func[45] sig=2 <param>\n - func[46] sig=2 <params>\n - func[47] sig=2 <params-id>\n - func[48] sig=2 <param-break>\n - func[49] sig=2 <params-break>\n - func[50] sig=2 <params-id-break>\n - func[51] sig=2 <effects>\n - func[52] sig=12 <while>\n - func[53] sig=12 <for>\n - func[54] sig=13 <nesting>\n - func[55] sig=1 <type-use>\nTable[1]:\n - table[0] type=funcref initial=1 max=1\nMemory[1]:\n - memory[0] pages: initial=1\nGlobal[1]:\n - global[0] i32 mutable=1 - init i32=0\nExport[53]:\n - func[1] <empty> -> \"empty\"\n - func[2] <singular> -> \"singular\"\n - func[3] <multi> -> \"multi\"\n - func[4] <nested> -> \"nested\"\n - func[5] <deep> -> \"deep\"\n - func[6] <as-select-first> -> \"as-select-first\"\n - func[7] <as-select-mid> -> \"as-select-mid\"\n - func[8] <as-select-last> -> \"as-select-last\"\n - func[9] <as-if-condition> -> \"as-if-condition\"\n - func[10] <as-if-then> -> \"as-if-then\"\n - func[11] <as-if-else> -> \"as-if-else\"\n - func[12] <as-br_if-first> -> \"as-br_if-first\"\n - func[13] <as-br_if-last> -> \"as-br_if-last\"\n - func[14] <as-br_table-first> -> \"as-br_table-first\"\n - func[15] <as-br_table-last> -> \"as-br_table-last\"\n - func[17] <as-call_indirect-first> -> \"as-call_indirect-first\"\n - func[18] <as-call_indirect-mid> -> \"as-call_indirect-mid\"\n - func[19] <as-call_indirect-last> -> \"as-call_indirect-last\"\n - func[20] <as-store-first> -> \"as-store-first\"\n - func[21] <as-store-last> -> \"as-store-last\"\n - func[22] <as-memory.grow-value> -> \"as-memory.grow-value\"\n - func[24] <as-call-value> -> \"as-call-value\"\n - func[25] <as-return-value> -> \"as-return-value\"\n - func[26] <as-drop-operand> -> \"as-drop-operand\"\n - func[27] <as-br-value> -> \"as-br-value\"\n - func[28] <as-local.set-value> -> \"as-local.set-value\"\n - func[29] <as-local.tee-value> -> \"as-local.tee-value\"\n - func[30] <as-global.set-value> -> \"as-global.set-value\"\n - func[31] <as-load-operand> -> \"as-load-operand\"\n - func[32] <as-unary-operand> -> \"as-unary-operand\"\n - func[33] <as-binary-operand> -> \"as-binary-operand\"\n - func[34] <as-test-operand> -> \"as-test-operand\"\n - func[35] <as-compare-operand> -> \"as-compare-operand\"\n - func[36] <as-binary-operands> -> \"as-binary-operands\"\n - func[37] <as-compare-operands> -> \"as-compare-operands\"\n - func[38] <as-mixed-operands> -> \"as-mixed-operands\"\n - func[39] <break-bare> -> \"break-bare\"\n - func[40] <break-value> -> \"break-value\"\n - func[41] <break-multi-value> -> \"break-multi-value\"\n - func[42] <break-repeated> -> \"break-repeated\"\n - func[43] <break-inner> -> \"break-inner\"\n - func[44] <cont-inner> -> \"cont-inner\"\n - func[45] <param> -> \"param\"\n - func[46] <params> -> \"params\"\n - func[47] <params-id> -> \"params-id\"\n - func[48] <param-break> -> \"param-break\"\n - func[49] <params-break> -> \"params-break\"\n - func[50] <params-id-break> -> \"params-id-break\"\n - func[51] <effects> -> \"effects\"\n - func[52] <while> -> \"while\"\n - func[53] <for> -> \"for\"\n - func[54] <nesting> -> \"nesting\"\n - func[55] <type-use> -> \"type-use\"\nElem[1]:\n - segment[0] flags=0 table=0 count=1 - init i32=0\n  - elem[0] = ref.func:16\nCode[56]:\n - func[0] size=2\n - func[1] size=8 <empty>\n - func[2] size=11 <singular>\n - func[3] size=60 <multi>\n - func[4] size=21 <nested>\n - func[5] size=127 <deep>\n - func[6] size=12 <as-select-first>\n - func[7] size=12 <as-select-mid>\n - func[8] size=12 <as-select-last>\n - func[9] size=12 <as-if-condition>\n - func[10] size=15 <as-if-then>\n - func[11] size=15 <as-if-else>\n - func[12] size=14 <as-br_if-first>\n - func[13] size=14 <as-br_if-last>\n - func[14] size=16 <as-br_table-first>\n - func[15] size=16 <as-br_table-last>\n - func[16] size=4\n - func[17] size=17 <as-call_indirect-first>\n - func[18] size=17 <as-call_indirect-mid>\n - func[19] size=17 <as-call_indirect-last>\n - func[20] size=12 <as-store-first>\n - func[21] size=12 <as-store-last>\n - func[22] size=9 <as-memory.grow-value>\n - func[23] size=4\n - func[24] size=9 <as-call-value>\n - func[25] size=8 <as-return-value>\n - func[26] size=8 <as-drop-operand>\n - func[27] size=12 <as-br-value>\n - func[28] size=13 <as-local.set-value>\n - func[29] size=11 <as-local.tee-value>\n - func[30] size=11 <as-global.set-value>\n - func[31] size=10 <as-load-operand>\n - func[32] size=10 <as-unary-operand>\n - func[33] size=17 <as-binary-operand>\n - func[34] size=10 <as-test-operand>\n - func[35] size=23 <as-compare-operand>\n - func[36] size=14 <as-binary-operands>\n - func[37] size=20 <as-compare-operands>\n - func[38] size=17 <as-mixed-operands>\n - func[39] size=52 <break-bare>\n - func[40] size=23 <break-value>\n - func[41] size=39 <break-multi-value>\n - func[42] size=52 <break-repeated>\n - func[43] size=102 <break-inner>\n - func[44] size=48 <cont-inner>\n - func[45] size=10 <param>\n - func[46] size=10 <params>\n - func[47] size=10 <params-id>\n - func[48] size=21 <param-break>\n - func[49] size=24 <params-break>\n - func[50] size=30 <params-id-break>\n - func[51] size=50 <effects>\n - func[52] size=37 <while>\n - func[53] size=43 <for>\n - func[54] size=90 <nesting>\n - func[55] size=61 <type-use>\n",
      "disassemble": "\nloop.0.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n000400 func[0]:\n 000401: 0b                         | end\n000403 func[1] <empty>:\n 000404: 03 40                      | loop\n 000406: 0b                         | end\n 000407: 03 40                      | loop\n 000409: 0b                         | end\n 00040a: 0b                         | end\n00040c func[2] <singular>:\n 00040d: 03 40                      | loop\n 00040f: 01                         |   nop\n 000410: 0b                         | end\n 000411: 03 7f                      | loop i32\n 000413: 41 07                      |   i32.const 7\n 000415: 0b                         | end\n 000416: 0b                         | end\n000418 func[3] <multi>:\n 000419: 03 40                      | loop\n 00041b: 10 00                      |   call 0\n 00041d: 10 00                      |   call 0\n 00041f: 10 00                      |   call 0\n 000421: 10 00                      |   call 0\n 000423: 0b                         | end\n 000424: 03 7f                      | loop i32\n 000426: 10 00                      |   call 0\n 000428: 10 00                      |   call 0\n 00042a: 41 08                      |   i32.const 8\n 00042c: 10 00                      |   call 0\n 00042e: 0b                         | end\n 00042f: 1a                         | drop\n 000430: 03 05                      | loop type[5]\n 000432: 10 00                      |   call 0\n 000434: 10 00                      |   call 0\n 000436: 10 00                      |   call 0\n 000438: 41 08                      |   i32.const 8\n 00043a: 10 00                      |   call 0\n 00043c: 10 00                      |   call 0\n 00043e: 10 00                      |   call 0\n 000440: 10 00                      |   call 0\n 000442: 42 07                      |   i64.const 7\n 000444: 10 00                      |   call 0\n 000446: 10 00                      |   call 0\n 000448: 10 00                      |   call 0\n 00044a: 10 00                      |   call 0\n 00044c: 41 09                      |   i32.const 9\n 00044e: 10 00                      |   call 0\n 000450: 0b                         | end\n 000451: 1a                         | drop\n 000452: 1a                         | drop\n 000453: 0b                         | end\n000455 func[4] <nested>:\n 000456: 03 7f                      | loop i32\n 000458: 03 40                      |   loop\n 00045a: 10 00                      |     call 0\n 00045c: 02 40                      |     block\n 00045e: 0b                         |     end\n 00045f: 01                         |     nop\n 000460: 0b                         |   end\n 000461: 03 7f                      |   loop i32\n 000463: 10 00                      |     call 0\n 000465: 41 09                      |     i32.const 9\n 000467: 0b                         |   end\n 000468: 0b                         | end\n 000469: 0b                         | end\n00046b func[5] <deep>:\n 00046c: 03 7f                      | loop i32\n 00046e: 02 7f                      |   block i32\n 000470: 03 7f                      |     loop i32\n 000472: 02 7f                      |       block i32\n 000474: 03 7f                      |         loop i32\n 000476: 02 7f                      |           block i32\n 000478: 03 7f                      |             loop i32\n 00047a: 02 7f                      |               block i32\n 00047c: 03 7f                      |                 loop i32\n 00047e: 02 7f                      |                   block i32\n 000480: 03 7f                      |                     loop i32\n 000482: 02 7f                      |                       block i32\n 000484: 03 7f                      |                         loop i32\n 000486: 02 7f                      |                           block i32\n 000488: 03 7f                      |                             loop i32\n 00048a: 02 7f                      |                               block i32\n 00048c: 03 7f                      |                                 loop i32\n 00048e: 02 7f                      |                                   block i32\n 000490: 03 7f                      |                                     loop i32\n 000492: 02 7f                      |                                       block i32\n 000494: 03 7f                      |                                         loop i32\n 000496: 02 7f                      |                                           block i32\n 000498: 03 7f                      |                                             loop i32\n 00049a: 02 7f                      |                                               block i32\n 00049c: 03 7f                      |                                                 loop i32\n 00049e: 02 7f                      |                                                   block i32\n 0004a0: 03 7f                      |                                                     loop i32\n 0004a2: 02 7f                      |                                                       block i32\n 0004a4: 03 7f                      |                                                         loop i32\n 0004a6: 02 7f                      |                                                           block i32\n 0004a8: 03 7f                      |                                                             loop i32\n 0004aa: 02 7f                      |                                                               block i32\n 0004ac: 03 7f                      |                                                                 loop i32\n 0004ae: 02 7f                      |                                                                   block i32\n 0004b0: 03 7f                      |                                                                     loop i32\n 0004b2: 02 7f                      |                                                                       block i32\n 0004b4: 03 7f                      |                                                                         loop i32\n 0004b6: 02 7f                      |                                                                           block i32\n 0004b8: 03 7f                      |                                                                             loop i32\n 0004ba: 02 7f                      |                                                                               block i32\n 0004bc: 10 00                      |                                                                                 call 0\n 0004be: 41 96 01                   |                                                                                 i32.const 150\n 0004c1: 0b                         |                                                                               end\n 0004c2: 0b                         |                                                                             end\n 0004c3: 0b                         |                                                                           end\n 0004c4: 0b                         |                                                                         end\n 0004c5: 0b                         |                                                                       end\n 0004c6: 0b                         |                                                                     end\n 0004c7: 0b                         |                                                                   end\n 0004c8: 0b                         |                                                                 end\n 0004c9: 0b                         |                                                               end\n 0004ca: 0b                         |                                                             end\n 0004cb: 0b                         |                                                           end\n 0004cc: 0b                         |                                                         end\n 0004cd: 0b                         |                                                       end\n 0004ce: 0b                         |                                                     end\n 0004cf: 0b                         |                                                   end\n 0004d0: 0b                         |                                                 end\n 0004d1: 0b                         |                                               end\n 0004d2: 0b                         |                                             end\n 0004d3: 0b                         |                                           end\n 0004d4: 0b                         |                                         end\n 0004d5: 0b                         |                                       end\n 0004d6: 0b                         |                                     end\n 0004d7: 0b                         |                                   end\n 0004d8: 0b                         |                                 end\n 0004d9: 0b                         |                               end\n 0004da: 0b                         |                             end\n 0004db: 0b                         |                           end\n 0004dc: 0b                         |                         end\n 0004dd: 0b                         |                       end\n 0004de: 0b                         |                     end\n 0004df: 0b                         |                   end\n 0004e0: 0b                         |                 end\n 0004e1: 0b                         |               end\n 0004e2: 0b                         |             end\n 0004e3: 0b                         |           end\n 0004e4: 0b                         |         end\n 0004e5: 0b                         |       end\n 0004e6: 0b                         |     end\n 0004e7: 0b                         |   end\n 0004e8: 0b                         | end\n 0004e9: 0b                         | end\n0004eb func[6] <as-select-first>:\n 0004ec: 03 7f                      | loop i32\n 0004ee: 41 01                      |   i32.const 1\n 0004f0: 0b                         | end\n 0004f1: 41 02                      | i32.const 2\n 0004f3: 41 03                      | i32.const 3\n 0004f5: 1b                         | select\n 0004f6: 0b                         | end\n0004f8 func[7] <as-select-mid>:\n 0004f9: 41 02                      | i32.const 2\n 0004fb: 03 7f                      | loop i32\n 0004fd: 41 01                      |   i32.const 1\n 0004ff: 0b                         | end\n 000500: 41 03                      | i32.const 3\n 000502: 1b                         | select\n 000503: 0b                         | end\n000505 func[8] <as-select-last>:\n 000506: 41 02                      | i32.const 2\n 000508: 41 03                      | i32.const 3\n 00050a: 03 7f                      | loop i32\n 00050c: 41 01                      |   i32.const 1\n 00050e: 0b                         | end\n 00050f: 1b                         | select\n 000510: 0b                         | end\n000512 func[9] <as-if-condition>:\n 000513: 03 7f                      | loop i32\n 000515: 41 01                      |   i32.const 1\n 000517: 0b                         | end\n 000518: 04 40                      | if\n 00051a: 10 00                      |   call 0\n 00051c: 0b                         | end\n 00051d: 0b                         | end\n00051f func[10] <as-if-then>:\n 000520: 41 01                      | i32.const 1\n 000522: 04 7f                      | if i32\n 000524: 03 7f                      |   loop i32\n 000526: 41 01                      |     i32.const 1\n 000528: 0b                         |   end\n 000529: 05                         | else\n 00052a: 41 02                      |   i32.const 2\n 00052c: 0b                         | end\n 00052d: 0b                         | end\n00052f func[11] <as-if-else>:\n 000530: 41 01                      | i32.const 1\n 000532: 04 7f                      | if i32\n 000534: 41 02                      |   i32.const 2\n 000536: 05                         | else\n 000537: 03 7f                      |   loop i32\n 000539: 41 01                      |     i32.const 1\n 00053b: 0b                         |   end\n 00053c: 0b                         | end\n 00053d: 0b                         | end\n00053f func[12] <as-br_if-first>:\n 000540: 02 7f                      | block i32\n 000542: 03 7f                      |   loop i32\n 000544: 41 01                      |     i32.const 1\n 000546: 0b                         |   end\n 000547: 41 02                      |   i32.const 2\n 000549: 0d 00                      |   br_if 0\n 00054b: 0b                         | end\n 00054c: 0b                         | end\n00054e func[13] <as-br_if-last>:\n 00054f: 02 7f                      | block i32\n 000551: 41 02                      |   i32.const 2\n 000553: 03 7f                      |   loop i32\n 000555: 41 01                      |     i32.const 1\n 000557: 0b                         |   end\n 000558: 0d 00                      |   br_if 0\n 00055a: 0b                         | end\n 00055b: 0b                         | end\n00055d func[14] <as-br_table-first>:\n 00055e: 02 7f                      | block i32\n 000560: 03 7f                      |   loop i32\n 000562: 41 01                      |     i32.const 1\n 000564: 0b                         |   end\n 000565: 41 02                      |   i32.const 2\n 000567: 0e 01 00 00                |   br_table 0 0\n 00056b: 0b                         | end\n 00056c: 0b                         | end\n00056e func[15] <as-br_table-last>:\n 00056f: 02 7f                      | block i32\n 000571: 41 02                      |   i32.const 2\n 000573: 03 7f                      |   loop i32\n 000575: 41 01                      |     i32.const 1\n 000577: 0b                         |   end\n 000578: 0e 01 00 00                |   br_table 0 0\n 00057c: 0b                         | end\n 00057d: 0b                         | end\n00057f func[16]:\n 000580: 20 00                      | local.get 0\n 000582: 0b                         | end\n000584 func[17] <as-call_indirect-first>:\n 000585: 02 7f                      | block i32\n 000587: 03 7f                      |   loop i32\n 000589: 41 01                      |     i32.const 1\n 00058b: 0b                         |   end\n 00058c: 41 02                      |   i32.const 2\n 00058e: 41 00                      |   i32.const 0\n 000590: 11 00 00                   |   call_indirect 0 (type 0)\n 000593: 0b                         | end\n 000594: 0b                         | end\n000596 func[18] <as-call_indirect-mid>:\n 000597: 02 7f                      | block i32\n 000599: 41 02                      |   i32.const 2\n 00059b: 03 7f                      |   loop i32\n 00059d: 41 01                      |     i32.const 1\n 00059f: 0b                         |   end\n 0005a0: 41 00                      |   i32.const 0\n 0005a2: 11 00 00                   |   call_indirect 0 (type 0)\n 0005a5: 0b                         | end\n 0005a6: 0b                         | end\n0005a8 func[19] <as-call_indirect-last>:\n 0005a9: 02 7f                      | block i32\n 0005ab: 41 01                      |   i32.const 1\n 0005ad: 41 02                      |   i32.const 2\n 0005af: 03 7f                      |   loop i32\n 0005b1: 41 00                      |     i32.const 0\n 0005b3: 0b                         |   end\n 0005b4: 11 00 00                   |   call_indirect 0 (type 0)\n 0005b7: 0b                         | end\n 0005b8: 0b                         | end\n0005ba func[20] <as-store-first>:\n 0005bb: 03 7f                      | loop i32\n 0005bd: 41 01                      |   i32.const 1\n 0005bf: 0b                         | end\n 0005c0: 41 01                      | i32.const 1\n 0005c2: 36 02 00                   | i32.store 2 0\n 0005c5: 0b                         | end\n0005c7 func[21] <as-store-last>:\n 0005c8: 41 0a                      | i32.const 10\n 0005ca: 03 7f                      | loop i32\n 0005cc: 41 01                      |   i32.const 1\n 0005ce: 0b                         | end\n 0005cf: 36 02 00                   | i32.store 2 0\n 0005d2: 0b                         | end\n0005d4 func[22] <as-memory.grow-value>:\n 0005d5: 03 7f                      | loop i32\n 0005d7: 41 01                      |   i32.const 1\n 0005d9: 0b                         | end\n 0005da: 40 00                      | memory.grow 0\n 0005dc: 0b                         | end\n0005de func[23]:\n 0005df: 20 00                      | local.get 0\n 0005e1: 0b                         | end\n0005e3 func[24] <as-call-value>:\n 0005e4: 03 7f                      | loop i32\n 0005e6: 41 01                      |   i32.const 1\n 0005e8: 0b                         | end\n 0005e9: 10 17                      | call 23\n 0005eb: 0b                         | end\n0005ed func[25] <as-return-value>:\n 0005ee: 03 7f                      | loop i32\n 0005f0: 41 01                      |   i32.const 1\n 0005f2: 0b                         | end\n 0005f3: 0f                         | return\n 0005f4: 0b                         | end\n0005f6 func[26] <as-drop-operand>:\n 0005f7: 03 7f                      | loop i32\n 0005f9: 41 01                      |   i32.const 1\n 0005fb: 0b                         | end\n 0005fc: 1a                         | drop\n 0005fd: 0b                         | end\n0005ff func[27] <as-br-value>:\n 000600: 02 7f                      | block i32\n 000602: 03 7f                      |   loop i32\n 000604: 41 01                      |     i32.const 1\n 000606: 0b                         |   end\n 000607: 0c 00                      |   br 0\n 000609: 0b                         | end\n 00060a: 0b                         | end\n00060c func[28] <as-local.set-value>:\n 00060d: 01 7f                      | local[0] type=i32\n 00060f: 03 7f                      | loop i32\n 000611: 41 01                      |   i32.const 1\n 000613: 0b                         | end\n 000614: 21 00                      | local.set 0\n 000616: 20 00                      | local.get 0\n 000618: 0b                         | end\n00061a func[29] <as-local.tee-value>:\n 00061b: 01 7f                      | local[0] type=i32\n 00061d: 03 7f                      | loop i32\n 00061f: 41 01                      |   i32.const 1\n 000621: 0b                         | end\n 000622: 22 00                      | local.tee 0\n 000624: 0b                         | end\n000626 func[30] <as-global.set-value>:\n 000627: 03 7f                      | loop i32\n 000629: 41 01                      |   i32.const 1\n 00062b: 0b                         | end\n 00062c: 24 00                      | global.set 0\n 00062e: 23 00                      | global.get 0\n 000630: 0b                         | end\n000632 func[31] <as-load-operand>:\n 000633: 03 7f                      | loop i32\n 000635: 41 01                      |   i32.const 1\n 000637: 0b                         | end\n 000638: 28 02 00                   | i32.load 2 0\n 00063b: 0b                         | end\n00063d func[32] <as-unary-operand>:\n 00063e: 03 7f                      | loop i32\n 000640: 10 00                      |   call 0\n 000642: 41 0d                      |   i32.const 13\n 000644: 0b                         | end\n 000645: 68                         | i32.ctz\n 000646: 0b                         | end\n000648 func[33] <as-binary-operand>:\n 000649: 03 7f                      | loop i32\n 00064b: 10 00                      |   call 0\n 00064d: 41 03                      |   i32.const 3\n 00064f: 0b                         | end\n 000650: 03 7f                      | loop i32\n 000652: 10 00                      |   call 0\n 000654: 41 04                      |   i32.const 4\n 000656: 0b                         | end\n 000657: 6c                         | i32.mul\n 000658: 0b                         | end\n00065a func[34] <as-test-operand>:\n 00065b: 03 7f                      | loop i32\n 00065d: 10 00                      |   call 0\n 00065f: 41 0d                      |   i32.const 13\n 000661: 0b                         | end\n 000662: 45                         | i32.eqz\n 000663: 0b                         | end\n000665 func[35] <as-compare-operand>:\n 000666: 03 7d                      | loop f32\n 000668: 10 00                      |   call 0\n 00066a: 43 00 00 40 40             |   f32.const 0x1.8p+1\n 00066f: 0b                         | end\n 000670: 03 7d                      | loop f32\n 000672: 10 00                      |   call 0\n 000674: 43 00 00 40 40             |   f32.const 0x1.8p+1\n 000679: 0b                         | end\n 00067a: 5e                         | f32.gt\n 00067b: 0b                         | end\n00067d func[36] <as-binary-operands>:\n 00067e: 03 07                      | loop type[7]\n 000680: 10 00                      |   call 0\n 000682: 41 03                      |   i32.const 3\n 000684: 10 00                      |   call 0\n 000686: 41 04                      |   i32.const 4\n 000688: 0b                         | end\n 000689: 6c                         | i32.mul\n 00068a: 0b                         | end\n00068c func[37] <as-compare-operands>:\n 00068d: 03 08                      | loop type[8]\n 00068f: 10 00                      |   call 0\n 000691: 43 00 00 40 40             |   f32.const 0x1.8p+1\n 000696: 10 00                      |   call 0\n 000698: 43 00 00 40 40             |   f32.const 0x1.8p+1\n 00069d: 0b                         | end\n 00069e: 5e                         | f32.gt\n 00069f: 0b                         | end\n0006a1 func[38] <as-mixed-operands>:\n 0006a2: 03 07                      | loop type[7]\n 0006a4: 10 00                      |   call 0\n 0006a6: 41 03                      |   i32.const 3\n 0006a8: 10 00                      |   call 0\n 0006aa: 41 04                      |   i32.const 4\n 0006ac: 0b                         | end\n 0006ad: 41 05                      | i32.const 5\n 0006af: 6a                         | i32.add\n 0006b0: 6c                         | i32.mul\n 0006b1: 0b                         | end\n0006b3 func[39] <break-bare>:\n 0006b4: 02 40                      | block\n 0006b6: 03 40                      |   loop\n 0006b8: 0c 01                      |     br 1\n 0006ba: 0c 00                      |     br 0\n 0006bc: 00                         |     unreachable\n 0006bd: 0b                         |   end\n 0006be: 0b                         | end\n 0006bf: 02 40                      | block\n 0006c1: 03 40                      |   loop\n 0006c3: 41 01                      |     i32.const 1\n 0006c5: 0d 01                      |     br_if 1\n 0006c7: 00                         |     unreachable\n 0006c8: 0b                         |   end\n 0006c9: 0b                         | end\n 0006ca: 02 40                      | block\n 0006cc: 03 40                      |   loop\n 0006ce: 41 00                      |     i32.const 0\n 0006d0: 0e 00 01                   |     br_table 1\n 0006d3: 00                         |     unreachable\n 0006d4: 0b                         |   end\n 0006d5: 0b                         | end\n 0006d6: 02 40                      | block\n 0006d8: 03 40                      |   loop\n 0006da: 41 01                      |     i32.const 1\n 0006dc: 0e 02 01 01 01             |     br_table 1 1 1\n 0006e1: 00                         |     unreachable\n 0006e2: 0b                         |   end\n 0006e3: 0b                         | end\n 0006e4: 41 13                      | i32.const 19\n 0006e6: 0b                         | end\n0006e8 func[40] <break-value>:\n 0006e9: 02 7f                      | block i32\n 0006eb: 41 00                      |   i32.const 0\n 0006ed: 03 03                      |   loop type[3]\n 0006ef: 02 40                      |     block\n 0006f1: 41 12                      |       i32.const 18\n 0006f3: 0c 02                      |       br 2\n 0006f5: 0b                         |     end\n 0006f6: 41 14                      |     i32.const 20\n 0006f8: 0c 00                      |     br 0\n 0006fa: 0b                         |   end\n 0006fb: 41 13                      |   i32.const 19\n 0006fd: 0b                         | end\n 0006fe: 0b                         | end\n000700 func[41] <break-multi-value>:\n 000701: 02 09                      | block type[9]\n 000703: 41 00                      |   i32.const 0\n 000705: 41 00                      |   i32.const 0\n 000707: 42 00                      |   i64.const 0\n 000709: 03 0a                      |   loop type[10]\n 00070b: 02 40                      |     block\n 00070d: 41 12                      |       i32.const 18\n 00070f: 41 6e                      |       i32.const 4294967278\n 000711: 42 12                      |       i64.const 18\n 000713: 0c 02                      |       br 2\n 000715: 0b                         |     end\n 000716: 41 14                      |     i32.const 20\n 000718: 41 6c                      |     i32.const 4294967276\n 00071a: 42 14                      |     i64.const 20\n 00071c: 0c 00                      |     br 0\n 00071e: 0b                         |   end\n 00071f: 41 13                      |   i32.const 19\n 000721: 41 6d                      |   i32.const 4294967277\n 000723: 42 13                      |   i64.const 19\n 000725: 0b                         | end\n 000726: 0b                         | end\n000728 func[42] <break-repeated>:\n 000729: 02 7f                      | block i32\n 00072b: 03 7f                      |   loop i32\n 00072d: 41 12                      |     i32.const 18\n 00072f: 0c 01                      |     br 1\n 000731: 41 13                      |     i32.const 19\n 000733: 0c 01                      |     br 1\n 000735: 41 14                      |     i32.const 20\n 000737: 41 00                      |     i32.const 0\n 000739: 0d 01                      |     br_if 1\n 00073b: 1a                         |     drop\n 00073c: 41 14                      |     i32.const 20\n 00073e: 41 01                      |     i32.const 1\n 000740: 0d 01                      |     br_if 1\n 000742: 1a                         |     drop\n 000743: 41 15                      |     i32.const 21\n 000745: 0c 01                      |     br 1\n 000747: 41 16                      |     i32.const 22\n 000749: 41 00                      |     i32.const 0\n 00074b: 0e 00 01                   |     br_table 1\n 00074e: 41 17                      |     i32.const 23\n 000750: 41 01                      |     i32.const 1\n 000752: 0e 02 01 01 01             |     br_table 1 1 1\n 000757: 41 15                      |     i32.const 21\n 000759: 0b                         |   end\n 00075a: 0b                         | end\n 00075b: 0b                         | end\n00075d func[43] <break-inner>:\n 00075e: 01 7f                      | local[0] type=i32\n 000760: 41 00                      | i32.const 0\n 000762: 21 00                      | local.set 0\n 000764: 20 00                      | local.get 0\n 000766: 02 7f                      | block i32\n 000768: 03 7f                      |   loop i32\n 00076a: 02 7f                      |     block i32\n 00076c: 41 01                      |       i32.const 1\n 00076e: 0c 02                      |       br 2\n 000770: 0b                         |     end\n 000771: 0b                         |   end\n 000772: 0b                         | end\n 000773: 6a                         | i32.add\n 000774: 21 00                      | local.set 0\n 000776: 20 00                      | local.get 0\n 000778: 02 7f                      | block i32\n 00077a: 03 7f                      |   loop i32\n 00077c: 03 7f                      |     loop i32\n 00077e: 41 02                      |       i32.const 2\n 000780: 0c 02                      |       br 2\n 000782: 0b                         |     end\n 000783: 0b                         |   end\n 000784: 0b                         | end\n 000785: 6a                         | i32.add\n 000786: 21 00                      | local.set 0\n 000788: 20 00                      | local.get 0\n 00078a: 02 7f                      | block i32\n 00078c: 03 7f                      |   loop i32\n 00078e: 02 7f                      |     block i32\n 000790: 03 7f                      |       loop i32\n 000792: 41 04                      |         i32.const 4\n 000794: 0c 01                      |         br 1\n 000796: 0b                         |       end\n 000797: 0b                         |     end\n 000798: 0b                         |   end\n 000799: 0b                         | end\n 00079a: 6a                         | i32.add\n 00079b: 21 00                      | local.set 0\n 00079d: 20 00                      | local.get 0\n 00079f: 02 7f                      | block i32\n 0007a1: 03 7f                      |   loop i32\n 0007a3: 41 08                      |     i32.const 8\n 0007a5: 0c 01                      |     br 1\n 0007a7: 68                         |     i32.ctz\n 0007a8: 0b                         |   end\n 0007a9: 0b                         | end\n 0007aa: 6a                         | i32.add\n 0007ab: 21 00                      | local.set 0\n 0007ad: 20 00                      | local.get 0\n 0007af: 02 7f                      | block i32\n 0007b1: 03 7f                      |   loop i32\n 0007b3: 03 7f                      |     loop i32\n 0007b5: 41 10                      |       i32.const 16\n 0007b7: 0c 02                      |       br 2\n 0007b9: 0b                         |     end\n 0007ba: 68                         |     i32.ctz\n 0007bb: 0b                         |   end\n 0007bc: 0b                         | end\n 0007bd: 6a                         | i32.add\n 0007be: 21 00                      | local.set 0\n 0007c0: 20 00                      | local.get 0\n 0007c2: 0b                         | end\n0007c4 func[44] <cont-inner>:\n 0007c5: 01 7f                      | local[0] type=i32\n 0007c7: 41 00                      | i32.const 0\n 0007c9: 21 00                      | local.set 0\n 0007cb: 20 00                      | local.get 0\n 0007cd: 03 7f                      | loop i32\n 0007cf: 03 7f                      |   loop i32\n 0007d1: 0c 01                      |     br 1\n 0007d3: 0b                         |   end\n 0007d4: 0b                         | end\n 0007d5: 6a                         | i32.add\n 0007d6: 21 00                      | local.set 0\n 0007d8: 20 00                      | local.get 0\n 0007da: 03 7f                      | loop i32\n 0007dc: 0c 00                      |   br 0\n 0007de: 68                         |   i32.ctz\n 0007df: 0b                         | end\n 0007e0: 6a                         | i32.add\n 0007e1: 21 00                      | local.set 0\n 0007e3: 20 00                      | local.get 0\n 0007e5: 03 7f                      | loop i32\n 0007e7: 03 7f                      |   loop i32\n 0007e9: 0c 01                      |     br 1\n 0007eb: 0b                         |   end\n 0007ec: 68                         |   i32.ctz\n 0007ed: 0b                         | end\n 0007ee: 6a                         | i32.add\n 0007ef: 21 00                      | local.set 0\n 0007f1: 20 00                      | local.get 0\n 0007f3: 0b                         | end\n0007f5 func[45] <param>:\n 0007f6: 41 01                      | i32.const 1\n 0007f8: 03 06                      | loop type[6]\n 0007fa: 41 02                      |   i32.const 2\n 0007fc: 6a                         |   i32.add\n 0007fd: 0b                         | end\n 0007fe: 0b                         | end\n000800 func[46] <params>:\n 000801: 41 01                      | i32.const 1\n 000803: 41 02                      | i32.const 2\n 000805: 03 00                      | loop type[0]\n 000807: 6a                         |   i32.add\n 000808: 0b                         | end\n 000809: 0b                         | end\n00080b func[47] <params-id>:\n 00080c: 41 01                      | i32.const 1\n 00080e: 41 02                      | i32.const 2\n 000810: 03 0b                      | loop type[11]\n 000812: 0b                         | end\n 000813: 6a                         | i32.add\n 000814: 0b                         | end\n000816 func[48] <param-break>:\n 000817: 01 7f                      | local[0] type=i32\n 000819: 41 01                      | i32.const 1\n 00081b: 03 06                      | loop type[6]\n 00081d: 41 04                      |   i32.const 4\n 00081f: 6a                         |   i32.add\n 000820: 22 00                      |   local.tee 0\n 000822: 20 00                      |   local.get 0\n 000824: 41 0a                      |   i32.const 10\n 000826: 49                         |   i32.lt_u\n 000827: 0d 00                      |   br_if 0\n 000829: 0b                         | end\n 00082a: 0b                         | end\n00082c func[49] <params-break>:\n 00082d: 01 7f                      | local[0] type=i32\n 00082f: 41 01                      | i32.const 1\n 000831: 41 02                      | i32.const 2\n 000833: 03 00                      | loop type[0]\n 000835: 6a                         |   i32.add\n 000836: 22 00                      |   local.tee 0\n 000838: 41 03                      |   i32.const 3\n 00083a: 20 00                      |   local.get 0\n 00083c: 41 0a                      |   i32.const 10\n 00083e: 49                         |   i32.lt_u\n 00083f: 0d 00                      |   br_if 0\n 000841: 1a                         |   drop\n 000842: 0b                         | end\n 000843: 0b                         | end\n000845 func[50] <params-id-break>:\n 000846: 01 7f                      | local[0] type=i32\n 000848: 41 00                      | i32.const 0\n 00084a: 21 00                      | local.set 0\n 00084c: 41 01                      | i32.const 1\n 00084e: 41 02                      | i32.const 2\n 000850: 03 0b                      | loop type[11]\n 000852: 20 00                      |   local.get 0\n 000854: 41 01                      |   i32.const 1\n 000856: 6a                         |   i32.add\n 000857: 21 00                      |   local.set 0\n 000859: 20 00                      |   local.get 0\n 00085b: 41 0a                      |   i32.const 10\n 00085d: 49                         |   i32.lt_u\n 00085e: 0d 00                      |   br_if 0\n 000860: 0b                         | end\n 000861: 6a                         | i32.add\n 000862: 0b                         | end\n000864 func[51] <effects>:\n 000865: 01 7f                      | local[0] type=i32\n 000867: 02 40                      | block\n 000869: 03 40                      |   loop\n 00086b: 41 01                      |     i32.const 1\n 00086d: 21 00                      |     local.set 0\n 00086f: 20 00                      |     local.get 0\n 000871: 41 03                      |     i32.const 3\n 000873: 6c                         |     i32.mul\n 000874: 21 00                      |     local.set 0\n 000876: 20 00                      |     local.get 0\n 000878: 41 05                      |     i32.const 5\n 00087a: 6b                         |     i32.sub\n 00087b: 21 00                      |     local.set 0\n 00087d: 20 00                      |     local.get 0\n 00087f: 41 07                      |     i32.const 7\n 000881: 6c                         |     i32.mul\n 000882: 21 00                      |     local.set 0\n 000884: 0c 01                      |     br 1\n 000886: 20 00                      |     local.get 0\n 000888: 41 e4 00                   |     i32.const 100\n 00088b: 6c                         |     i32.mul\n 00088c: 21 00                      |     local.set 0\n 00088e: 0b                         |   end\n 00088f: 0b                         | end\n 000890: 20 00                      | local.get 0\n 000892: 41 72                      | i32.const 4294967282\n 000894: 46                         | i32.eq\n 000895: 0b                         | end\n000897 func[52] <while>:\n 000898: 01 7e                      | local[1] type=i64\n 00089a: 42 01                      | i64.const 1\n 00089c: 21 01                      | local.set 1\n 00089e: 02 40                      | block\n 0008a0: 03 40                      |   loop\n 0008a2: 20 00                      |     local.get 0\n 0008a4: 50                         |     i64.eqz\n 0008a5: 0d 01                      |     br_if 1\n 0008a7: 20 00                      |     local.get 0\n 0008a9: 20 01                      |     local.get 1\n 0008ab: 7e                         |     i64.mul\n 0008ac: 21 01                      |     local.set 1\n 0008ae: 20 00                      |     local.get 0\n 0008b0: 42 01                      |     i64.const 1\n 0008b2: 7d                         |     i64.sub\n 0008b3: 21 00                      |     local.set 0\n 0008b5: 0c 00                      |     br 0\n 0008b7: 0b                         |   end\n 0008b8: 0b                         | end\n 0008b9: 20 01                      | local.get 1\n 0008bb: 0b                         | end\n0008bd func[53] <for>:\n 0008be: 02 7e                      | local[1..2] type=i64\n 0008c0: 42 01                      | i64.const 1\n 0008c2: 21 01                      | local.set 1\n 0008c4: 42 02                      | i64.const 2\n 0008c6: 21 02                      | local.set 2\n 0008c8: 02 40                      | block\n 0008ca: 03 40                      |   loop\n 0008cc: 20 02                      |     local.get 2\n 0008ce: 20 00                      |     local.get 0\n 0008d0: 56                         |     i64.gt_u\n 0008d1: 0d 01                      |     br_if 1\n 0008d3: 20 01                      |     local.get 1\n 0008d5: 20 02                      |     local.get 2\n 0008d7: 7e                         |     i64.mul\n 0008d8: 21 01                      |     local.set 1\n 0008da: 20 02                      |     local.get 2\n 0008dc: 42 01                      |     i64.const 1\n 0008de: 7c                         |     i64.add\n 0008df: 21 02                      |     local.set 2\n 0008e1: 0c 00                      |     br 0\n 0008e3: 0b                         |   end\n 0008e4: 0b                         | end\n 0008e5: 20 01                      | local.get 1\n 0008e7: 0b                         | end\n0008e9 func[54] <nesting>:\n 0008ea: 02 7d                      | local[2..3] type=f32\n 0008ec: 02 40                      | block\n 0008ee: 03 40                      |   loop\n 0008f0: 20 00                      |     local.get 0\n 0008f2: 43 00 00 00 00             |     f32.const 0x0p+0\n 0008f7: 5b                         |     f32.eq\n 0008f8: 0d 01                      |     br_if 1\n 0008fa: 20 01                      |     local.get 1\n 0008fc: 21 02                      |     local.set 2\n 0008fe: 02 40                      |     block\n 000900: 03 40                      |       loop\n 000902: 20 02                      |         local.get 2\n 000904: 43 00 00 00 00             |         f32.const 0x0p+0\n 000909: 5b                         |         f32.eq\n 00090a: 0d 01                      |         br_if 1\n 00090c: 20 02                      |         local.get 2\n 00090e: 43 00 00 00 00             |         f32.const 0x0p+0\n 000913: 5d                         |         f32.lt\n 000914: 0d 03                      |         br_if 3\n 000916: 20 03                      |         local.get 3\n 000918: 20 02                      |         local.get 2\n 00091a: 92                         |         f32.add\n 00091b: 21 03                      |         local.set 3\n 00091d: 20 02                      |         local.get 2\n 00091f: 43 00 00 00 40             |         f32.const 0x1p+1\n 000924: 93                         |         f32.sub\n 000925: 21 02                      |         local.set 2\n 000927: 0c 00                      |         br 0\n 000929: 0b                         |       end\n 00092a: 0b                         |     end\n 00092b: 20 03                      |     local.get 3\n 00092d: 20 00                      |     local.get 0\n 00092f: 95                         |     f32.div\n 000930: 21 03                      |     local.set 3\n 000932: 20 00                      |     local.get 0\n 000934: 43 00 00 80 3f             |     f32.const 0x1p+0\n 000939: 93                         |     f32.sub\n 00093a: 21 00                      |     local.set 0\n 00093c: 0c 00                      |     br 0\n 00093e: 0b                         |   end\n 00093f: 0b                         | end\n 000940: 20 03                      | local.get 3\n 000942: 0b                         | end\n000944 func[55] <type-use>:\n 000945: 03 40                      | loop\n 000947: 0b                         | end\n 000948: 03 7f                      | loop i32\n 00094a: 41 00                      |   i32.const 0\n 00094c: 0b                         | end\n 00094d: 03 03                      | loop type[3]\n 00094f: 1a                         |   drop\n 000950: 0b                         | end\n 000951: 41 00                      | i32.const 0\n 000953: 44 00 00 00 00 00 00 00 00 | f64.const 0x0p+0\n 00095c: 41 00                      | i32.const 0\n 00095e: 03 04                      | loop type[4]\n 000960: 0b                         | end\n 000961: 1a                         | drop\n 000962: 1a                         | drop\n 000963: 1a                         | drop\n 000964: 03 7f                      | loop i32\n 000966: 41 00                      |   i32.const 0\n 000968: 0b                         | end\n 000969: 03 03                      | loop type[3]\n 00096b: 1a                         |   drop\n 00096c: 0b                         | end\n 00096d: 41 00                      | i32.const 0\n 00096f: 44 00 00 00 00 00 00 00 00 | f64.const 0x0p+0\n 000978: 41 00                      | i32.const 0\n 00097a: 03 04                      | loop type[4]\n 00097c: 0b                         | end\n 00097d: 1a                         | drop\n 00097e: 1a                         | drop\n 00097f: 1a                         | drop\n 000980: 0b                         | end\n"
    }
  }
}
