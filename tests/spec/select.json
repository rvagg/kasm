{
  "bin": {
    "select.0.wasm": "AGFzbQEAAAABPQpgAn9/AX9gAABgA39/fwF/YAN+fn8BfmADfX1/AX1gA3x8fwF8YANwcH8BcGADb29/AW9gAX8Bf2ABfwADLy4BAgMEBQIDBAUGBwgICAgICAkICAgICAgACAgICQkICAgICQgICAgICAgICAgIBAkCcAEBAXABAQEFAwEAAQYGAX8BQQoLB/AFKwpzZWxlY3QtaTMyAAEKc2VsZWN0LWk2NAACCnNlbGVjdC1mMzIAAwpzZWxlY3QtZjY0AAQMc2VsZWN0LWkzMi10AAUMc2VsZWN0LWk2NC10AAYMc2VsZWN0LWYzMi10AAcMc2VsZWN0LWY2NC10AAgOc2VsZWN0LWZ1bmNyZWYACRBzZWxlY3QtZXh0ZXJucmVmAAoPYXMtc2VsZWN0LWZpcnN0AAsNYXMtc2VsZWN0LW1pZAAMDmFzLXNlbGVjdC1sYXN0AA0NYXMtbG9vcC1maXJzdAAOC2FzLWxvb3AtbWlkAA8MYXMtbG9vcC1sYXN0ABAPYXMtaWYtY29uZGl0aW9uABEKYXMtaWYtdGhlbgASCmFzLWlmLWVsc2UAEw5hcy1icl9pZi1maXJzdAAUDWFzLWJyX2lmLWxhc3QAFRFhcy1icl90YWJsZS1maXJzdAAWEGFzLWJyX3RhYmxlLWxhc3QAFxZhcy1jYWxsX2luZGlyZWN0LWZpcnN0ABkUYXMtY2FsbF9pbmRpcmVjdC1taWQAGhVhcy1jYWxsX2luZGlyZWN0LWxhc3QAGw5hcy1zdG9yZS1maXJzdAAcDWFzLXN0b3JlLWxhc3QAHRRhcy1tZW1vcnkuZ3Jvdy12YWx1ZQAeDWFzLWNhbGwtdmFsdWUAIA9hcy1yZXR1cm4tdmFsdWUAIQ9hcy1kcm9wLW9wZXJhbmQAIgthcy1ici12YWx1ZQAjEmFzLWxvY2FsLnNldC12YWx1ZQAkEmFzLWxvY2FsLnRlZS12YWx1ZQAlE2FzLWdsb2JhbC5zZXQtdmFsdWUAJg9hcy1sb2FkLW9wZXJhbmQAJxBhcy11bmFyeS1vcGVyYW5kACgRYXMtYmluYXJ5LW9wZXJhbmQAKQ9hcy10ZXN0LW9wZXJhbmQAKg9hcy1jb21wYXJlLWxlZnQAKxBhcy1jb21wYXJlLXJpZ2h0ACwSYXMtY29udmVydC1vcGVyYW5kAC0JDwIAQQALAQACAUEACwABGAqABS4CAAsJACAAIAEgAhsLCQAgACABIAIbCwkAIAAgASACGwsJACAAIAEgAhsLCwAgACABIAIcAX8LCwAgACABIAIcAX4LCwAgACABIAIcAX0LCwAgACABIAIcAXwLCwAgACABIAIcAXALCwAgACABIAIcAW8LDgBBAEEBIAAbQQJBAxsLDgBBAkEAQQEgABtBAxsLDgBBAkEDQQBBASAAGxsLEAADf0ECQQMgABsQABAACwsQAAN/EABBAkEDIAAbEAALCxAAA38QABAAQQJBAyAAGwsLDgBBAkEDIAAbBEAQAAsLEQBBAQR/QQJBAyAAGwVBBAsLEQBBAAR/QQIFQQJBAyAAGwsLEAACf0ECQQMgABtBBA0ACwsQAAJ/QQJBAkEDIAAbDQALCxIAAn9BAkEDIAAbQQIOAQAACwsSAAJ/QQJBAkEDIAAbDgEAAAsLBAAgAAsTAAJ/QQJBAyAAG0EBQQARAAELCxMAAn9BAUECQQMgABtBABEAAQsLEwACf0EBQQRBAkEDIAAbEQABCwsOAEEAQQQgABtBATYCAAsOAEEIQQFBAiAAGzYCAAsLAEEBQQIgABtAAAsEACAACwsAQQFBAiAAGxAfCwoAQQFBAiAAGw8LCgBBAUECIAAbGgsOAAJ/QQFBAiAAGwwACwsPAQF/QQFBAiAAGyEAIAALCwBBAUECIAAbIgALDQBBAUECIAAbJAAjAAsMAEEAQQQgABsoAgALCgBBAEEBIAAbRQsRAEEBQQIgABtBAUECIAAbbAsNAAJ/QQBBASAAG0ULCw8AAn9BAUECIAAbQQFMCwsPAAJ/QQFBAEEBIAAbRwsLDQACf0IBQgAgABunCws=",
    "select.1.wasm": "AGFzbQEAAAABBAFgAAADAgEACgkBBwABAUEBGws=",
    "select.10.wasm": "AGFzbQEAAAABBAFgAAADAgEACgwBCgBBAUIBQQEbGgs=",
    "select.11.wasm": "AGFzbQEAAAABBAFgAAADAgEACg8BDQBBAUMAAIA/QQEbGgs=",
    "select.12.wasm": "AGFzbQEAAAABBAFgAAADAgEAChMBEQBBAUQAAAAAAADwP0EBGxoL",
    "select.13.wasm": "AGFzbQEAAAABBAFgAAADAgEACgYBBAAbGgs=",
    "select.14.wasm": "AGFzbQEAAAABBAFgAAADAgEACggBBgBBABsaCw==",
    "select.15.wasm": "AGFzbQEAAAABBAFgAAADAgEACgoBCABBAEEAGxoL",
    "select.16.wasm": "AGFzbQEAAAABBAFgAAADAgEACg8BDQBBAEEAQQACQBsaCws=",
    "select.17.wasm": "AGFzbQEAAAABBAFgAAADAgEACg8BDQBBAEEAAkBBABsaCws=",
    "select.18.wasm": "AGFzbQEAAAABBAFgAAADAgEACg8BDQBBAAJAQQBBABsaCws=",
    "select.19.wasm": "AGFzbQEAAAABBAFgAAADAgEACg8BDQBBAEEAQQADQBsaCws=",
    "select.2.wasm": "AGFzbQEAAAABBAFgAAADAgEACgkBBwABAUEBGws=",
    "select.20.wasm": "AGFzbQEAAAABBAFgAAADAgEACg8BDQBBAEEAA0BBABsaCws=",
    "select.21.wasm": "AGFzbQEAAAABBAFgAAADAgEACg8BDQBBAANAQQBBABsaCws=",
    "select.22.wasm": "AGFzbQEAAAABBAFgAAADAgEACg8BDQBBAEEAQQAEQBsaCws=",
    "select.23.wasm": "AGFzbQEAAAABBAFgAAADAgEACg8BDQBBAEEABEBBABsaCws=",
    "select.24.wasm": "AGFzbQEAAAABBAFgAAADAgEACg8BDQBBAARAQQBBABsaCws=",
    "select.25.wasm": "AGFzbQEAAAABBAFgAAADAgEACgwBCgBBAUEBQgEbGgs=",
    "select.26.wasm": "AGFzbQEAAAABBAFgAAADAgEACg8BDQBBAUEBQwAAgD8bGgs=",
    "select.27.wasm": "AGFzbQEAAAABBAFgAAADAgEAChMBEQBBAUEBRAAAAAAAAPA/GxoL",
    "select.28.wasm": "AGFzbQEAAAABBQFgAAF/AwIBAAoLAQkAQgFCAUEBGws=",
    "select.29.wasm": "AGFzbQEAAAABCAJgAAF/YAAAAwwLAAAAAAAAAAAAAAAEBAFwAAEKUAsEAAAbCwUAABsBCwUAABsbCwUAABsbCwYAABsbGwsGAAAcAX8LBgAAHAF/CwcAABwBfxsLCQAAHAF/HAF/CwcAABsRAQALCAAAGxEBABsL",
    "select.3.wasm": "AGFzbQEAAAABBgFgAAJ/fwMCAQAKEgEQAEEAQQBBAEEAQQEcAn9/Cw==",
    "select.4.wasm": "AGFzbQEAAAABBQFgAW8AAwIBAAoMAQoAIAAgAEEBGxoL",
    "select.5.wasm": "AGFzbQEAAAABBAFgAAADAgEACgwBCgBBAUIBQQEbGgs=",
    "select.6.wasm": "AGFzbQEAAAABBAFgAAADAgEACg8BDQBBAUMAAIA/QQEbGgs=",
    "select.7.wasm": "AGFzbQEAAAABBAFgAAADAgEAChMBEQBBAUQAAAAAAADwP0EBGxoL",
    "select.8.wasm": "AGFzbQEAAAABBAFgAAADAgEACgwBCgBBAUIBQQEbGgs=",
    "select.9.wasm": "AGFzbQEAAAABBAFgAAADAgEACg8BDQBBAUMAAIA/QQEbGgs="
  },
  "spec": {"source_filename": "/workspace/wasm-spec/test/core/select.wast",
 "commands": [
  {"type": "module", "line": 1, "filename": "select.0.wasm"}, 
  {"type": "assert_return", "line": 183, "action": {"type": "invoke", "field": "select-i32", "args": [{"type": "i32", "value": "1"}, {"type": "i32", "value": "2"}, {"type": "i32", "value": "1"}]}, "expected": [{"type": "i32", "value": "1"}]}, 
  {"type": "assert_return", "line": 184, "action": {"type": "invoke", "field": "select-i64", "args": [{"type": "i64", "value": "2"}, {"type": "i64", "value": "1"}, {"type": "i32", "value": "1"}]}, "expected": [{"type": "i64", "value": "2"}]}, 
  {"type": "assert_return", "line": 185, "action": {"type": "invoke", "field": "select-f32", "args": [{"type": "f32", "value": "1065353216"}, {"type": "f32", "value": "1073741824"}, {"type": "i32", "value": "1"}]}, "expected": [{"type": "f32", "value": "1065353216"}]}, 
  {"type": "assert_return", "line": 186, "action": {"type": "invoke", "field": "select-f64", "args": [{"type": "f64", "value": "4607182418800017408"}, {"type": "f64", "value": "4611686018427387904"}, {"type": "i32", "value": "1"}]}, "expected": [{"type": "f64", "value": "4607182418800017408"}]}, 
  {"type": "assert_return", "line": 188, "action": {"type": "invoke", "field": "select-i32", "args": [{"type": "i32", "value": "1"}, {"type": "i32", "value": "2"}, {"type": "i32", "value": "0"}]}, "expected": [{"type": "i32", "value": "2"}]}, 
  {"type": "assert_return", "line": 189, "action": {"type": "invoke", "field": "select-i32", "args": [{"type": "i32", "value": "2"}, {"type": "i32", "value": "1"}, {"type": "i32", "value": "0"}]}, "expected": [{"type": "i32", "value": "1"}]}, 
  {"type": "assert_return", "line": 190, "action": {"type": "invoke", "field": "select-i64", "args": [{"type": "i64", "value": "2"}, {"type": "i64", "value": "1"}, {"type": "i32", "value": "4294967295"}]}, "expected": [{"type": "i64", "value": "2"}]}, 
  {"type": "assert_return", "line": 191, "action": {"type": "invoke", "field": "select-i64", "args": [{"type": "i64", "value": "2"}, {"type": "i64", "value": "1"}, {"type": "i32", "value": "4042322160"}]}, "expected": [{"type": "i64", "value": "2"}]}, 
  {"type": "assert_return", "line": 193, "action": {"type": "invoke", "field": "select-f32", "args": [{"type": "f32", "value": "2143289344"}, {"type": "f32", "value": "1065353216"}, {"type": "i32", "value": "1"}]}, "expected": [{"type": "f32", "value": "2143289344"}]}, 
  {"type": "assert_return", "line": 194, "action": {"type": "invoke", "field": "select-f32", "args": [{"type": "f32", "value": "2139226884"}, {"type": "f32", "value": "1065353216"}, {"type": "i32", "value": "1"}]}, "expected": [{"type": "f32", "value": "2139226884"}]}, 
  {"type": "assert_return", "line": 195, "action": {"type": "invoke", "field": "select-f32", "args": [{"type": "f32", "value": "2143289344"}, {"type": "f32", "value": "1065353216"}, {"type": "i32", "value": "0"}]}, "expected": [{"type": "f32", "value": "1065353216"}]}, 
  {"type": "assert_return", "line": 196, "action": {"type": "invoke", "field": "select-f32", "args": [{"type": "f32", "value": "2139226884"}, {"type": "f32", "value": "1065353216"}, {"type": "i32", "value": "0"}]}, "expected": [{"type": "f32", "value": "1065353216"}]}, 
  {"type": "assert_return", "line": 197, "action": {"type": "invoke", "field": "select-f32", "args": [{"type": "f32", "value": "1073741824"}, {"type": "f32", "value": "2143289344"}, {"type": "i32", "value": "1"}]}, "expected": [{"type": "f32", "value": "1073741824"}]}, 
  {"type": "assert_return", "line": 198, "action": {"type": "invoke", "field": "select-f32", "args": [{"type": "f32", "value": "1073741824"}, {"type": "f32", "value": "2139226884"}, {"type": "i32", "value": "1"}]}, "expected": [{"type": "f32", "value": "1073741824"}]}, 
  {"type": "assert_return", "line": 199, "action": {"type": "invoke", "field": "select-f32", "args": [{"type": "f32", "value": "1073741824"}, {"type": "f32", "value": "2143289344"}, {"type": "i32", "value": "0"}]}, "expected": [{"type": "f32", "value": "2143289344"}]}, 
  {"type": "assert_return", "line": 200, "action": {"type": "invoke", "field": "select-f32", "args": [{"type": "f32", "value": "1073741824"}, {"type": "f32", "value": "2139226884"}, {"type": "i32", "value": "0"}]}, "expected": [{"type": "f32", "value": "2139226884"}]}, 
  {"type": "assert_return", "line": 202, "action": {"type": "invoke", "field": "select-f64", "args": [{"type": "f64", "value": "9221120237041090560"}, {"type": "f64", "value": "4607182418800017408"}, {"type": "i32", "value": "1"}]}, "expected": [{"type": "f64", "value": "9221120237041090560"}]}, 
  {"type": "assert_return", "line": 203, "action": {"type": "invoke", "field": "select-f64", "args": [{"type": "f64", "value": "9218868437227537156"}, {"type": "f64", "value": "4607182418800017408"}, {"type": "i32", "value": "1"}]}, "expected": [{"type": "f64", "value": "9218868437227537156"}]}, 
  {"type": "assert_return", "line": 204, "action": {"type": "invoke", "field": "select-f64", "args": [{"type": "f64", "value": "9221120237041090560"}, {"type": "f64", "value": "4607182418800017408"}, {"type": "i32", "value": "0"}]}, "expected": [{"type": "f64", "value": "4607182418800017408"}]}, 
  {"type": "assert_return", "line": 205, "action": {"type": "invoke", "field": "select-f64", "args": [{"type": "f64", "value": "9218868437227537156"}, {"type": "f64", "value": "4607182418800017408"}, {"type": "i32", "value": "0"}]}, "expected": [{"type": "f64", "value": "4607182418800017408"}]}, 
  {"type": "assert_return", "line": 206, "action": {"type": "invoke", "field": "select-f64", "args": [{"type": "f64", "value": "4611686018427387904"}, {"type": "f64", "value": "9221120237041090560"}, {"type": "i32", "value": "1"}]}, "expected": [{"type": "f64", "value": "4611686018427387904"}]}, 
  {"type": "assert_return", "line": 207, "action": {"type": "invoke", "field": "select-f64", "args": [{"type": "f64", "value": "4611686018427387904"}, {"type": "f64", "value": "9218868437227537156"}, {"type": "i32", "value": "1"}]}, "expected": [{"type": "f64", "value": "4611686018427387904"}]}, 
  {"type": "assert_return", "line": 208, "action": {"type": "invoke", "field": "select-f64", "args": [{"type": "f64", "value": "4611686018427387904"}, {"type": "f64", "value": "9221120237041090560"}, {"type": "i32", "value": "0"}]}, "expected": [{"type": "f64", "value": "9221120237041090560"}]}, 
  {"type": "assert_return", "line": 209, "action": {"type": "invoke", "field": "select-f64", "args": [{"type": "f64", "value": "4611686018427387904"}, {"type": "f64", "value": "9218868437227537156"}, {"type": "i32", "value": "0"}]}, "expected": [{"type": "f64", "value": "9218868437227537156"}]}, 
  {"type": "assert_return", "line": 211, "action": {"type": "invoke", "field": "select-i32-t", "args": [{"type": "i32", "value": "1"}, {"type": "i32", "value": "2"}, {"type": "i32", "value": "1"}]}, "expected": [{"type": "i32", "value": "1"}]}, 
  {"type": "assert_return", "line": 212, "action": {"type": "invoke", "field": "select-i64-t", "args": [{"type": "i64", "value": "2"}, {"type": "i64", "value": "1"}, {"type": "i32", "value": "1"}]}, "expected": [{"type": "i64", "value": "2"}]}, 
  {"type": "assert_return", "line": 213, "action": {"type": "invoke", "field": "select-f32-t", "args": [{"type": "f32", "value": "1065353216"}, {"type": "f32", "value": "1073741824"}, {"type": "i32", "value": "1"}]}, "expected": [{"type": "f32", "value": "1065353216"}]}, 
  {"type": "assert_return", "line": 214, "action": {"type": "invoke", "field": "select-f64-t", "args": [{"type": "f64", "value": "4607182418800017408"}, {"type": "f64", "value": "4611686018427387904"}, {"type": "i32", "value": "1"}]}, "expected": [{"type": "f64", "value": "4607182418800017408"}]}, 
  {"type": "assert_return", "line": 215, "action": {"type": "invoke", "field": "select-funcref", "args": [{"type": "funcref", "value": "null"}, {"type": "funcref", "value": "null"}, {"type": "i32", "value": "1"}]}, "expected": [{"type": "funcref", "value": "null"}]}, 
  {"type": "assert_return", "line": 216, "action": {"type": "invoke", "field": "select-externref", "args": [{"type": "externref", "value": "1"}, {"type": "externref", "value": "2"}, {"type": "i32", "value": "1"}]}, "expected": [{"type": "externref", "value": "1"}]}, 
  {"type": "assert_return", "line": 218, "action": {"type": "invoke", "field": "select-i32-t", "args": [{"type": "i32", "value": "1"}, {"type": "i32", "value": "2"}, {"type": "i32", "value": "0"}]}, "expected": [{"type": "i32", "value": "2"}]}, 
  {"type": "assert_return", "line": 219, "action": {"type": "invoke", "field": "select-i32-t", "args": [{"type": "i32", "value": "2"}, {"type": "i32", "value": "1"}, {"type": "i32", "value": "0"}]}, "expected": [{"type": "i32", "value": "1"}]}, 
  {"type": "assert_return", "line": 220, "action": {"type": "invoke", "field": "select-i64-t", "args": [{"type": "i64", "value": "2"}, {"type": "i64", "value": "1"}, {"type": "i32", "value": "4294967295"}]}, "expected": [{"type": "i64", "value": "2"}]}, 
  {"type": "assert_return", "line": 221, "action": {"type": "invoke", "field": "select-i64-t", "args": [{"type": "i64", "value": "2"}, {"type": "i64", "value": "1"}, {"type": "i32", "value": "4042322160"}]}, "expected": [{"type": "i64", "value": "2"}]}, 
  {"type": "assert_return", "line": 222, "action": {"type": "invoke", "field": "select-externref", "args": [{"type": "externref", "value": "1"}, {"type": "externref", "value": "2"}, {"type": "i32", "value": "0"}]}, "expected": [{"type": "externref", "value": "2"}]}, 
  {"type": "assert_return", "line": 223, "action": {"type": "invoke", "field": "select-externref", "args": [{"type": "externref", "value": "2"}, {"type": "externref", "value": "1"}, {"type": "i32", "value": "0"}]}, "expected": [{"type": "externref", "value": "1"}]}, 
  {"type": "assert_return", "line": 225, "action": {"type": "invoke", "field": "select-f32-t", "args": [{"type": "f32", "value": "2143289344"}, {"type": "f32", "value": "1065353216"}, {"type": "i32", "value": "1"}]}, "expected": [{"type": "f32", "value": "2143289344"}]}, 
  {"type": "assert_return", "line": 226, "action": {"type": "invoke", "field": "select-f32-t", "args": [{"type": "f32", "value": "2139226884"}, {"type": "f32", "value": "1065353216"}, {"type": "i32", "value": "1"}]}, "expected": [{"type": "f32", "value": "2139226884"}]}, 
  {"type": "assert_return", "line": 227, "action": {"type": "invoke", "field": "select-f32-t", "args": [{"type": "f32", "value": "2143289344"}, {"type": "f32", "value": "1065353216"}, {"type": "i32", "value": "0"}]}, "expected": [{"type": "f32", "value": "1065353216"}]}, 
  {"type": "assert_return", "line": 228, "action": {"type": "invoke", "field": "select-f32-t", "args": [{"type": "f32", "value": "2139226884"}, {"type": "f32", "value": "1065353216"}, {"type": "i32", "value": "0"}]}, "expected": [{"type": "f32", "value": "1065353216"}]}, 
  {"type": "assert_return", "line": 229, "action": {"type": "invoke", "field": "select-f32-t", "args": [{"type": "f32", "value": "1073741824"}, {"type": "f32", "value": "2143289344"}, {"type": "i32", "value": "1"}]}, "expected": [{"type": "f32", "value": "1073741824"}]}, 
  {"type": "assert_return", "line": 230, "action": {"type": "invoke", "field": "select-f32-t", "args": [{"type": "f32", "value": "1073741824"}, {"type": "f32", "value": "2139226884"}, {"type": "i32", "value": "1"}]}, "expected": [{"type": "f32", "value": "1073741824"}]}, 
  {"type": "assert_return", "line": 231, "action": {"type": "invoke", "field": "select-f32-t", "args": [{"type": "f32", "value": "1073741824"}, {"type": "f32", "value": "2143289344"}, {"type": "i32", "value": "0"}]}, "expected": [{"type": "f32", "value": "2143289344"}]}, 
  {"type": "assert_return", "line": 232, "action": {"type": "invoke", "field": "select-f32-t", "args": [{"type": "f32", "value": "1073741824"}, {"type": "f32", "value": "2139226884"}, {"type": "i32", "value": "0"}]}, "expected": [{"type": "f32", "value": "2139226884"}]}, 
  {"type": "assert_return", "line": 234, "action": {"type": "invoke", "field": "select-f64-t", "args": [{"type": "f64", "value": "9221120237041090560"}, {"type": "f64", "value": "4607182418800017408"}, {"type": "i32", "value": "1"}]}, "expected": [{"type": "f64", "value": "9221120237041090560"}]}, 
  {"type": "assert_return", "line": 235, "action": {"type": "invoke", "field": "select-f64-t", "args": [{"type": "f64", "value": "9218868437227537156"}, {"type": "f64", "value": "4607182418800017408"}, {"type": "i32", "value": "1"}]}, "expected": [{"type": "f64", "value": "9218868437227537156"}]}, 
  {"type": "assert_return", "line": 236, "action": {"type": "invoke", "field": "select-f64-t", "args": [{"type": "f64", "value": "9221120237041090560"}, {"type": "f64", "value": "4607182418800017408"}, {"type": "i32", "value": "0"}]}, "expected": [{"type": "f64", "value": "4607182418800017408"}]}, 
  {"type": "assert_return", "line": 237, "action": {"type": "invoke", "field": "select-f64-t", "args": [{"type": "f64", "value": "9218868437227537156"}, {"type": "f64", "value": "4607182418800017408"}, {"type": "i32", "value": "0"}]}, "expected": [{"type": "f64", "value": "4607182418800017408"}]}, 
  {"type": "assert_return", "line": 238, "action": {"type": "invoke", "field": "select-f64-t", "args": [{"type": "f64", "value": "4611686018427387904"}, {"type": "f64", "value": "9221120237041090560"}, {"type": "i32", "value": "1"}]}, "expected": [{"type": "f64", "value": "4611686018427387904"}]}, 
  {"type": "assert_return", "line": 239, "action": {"type": "invoke", "field": "select-f64-t", "args": [{"type": "f64", "value": "4611686018427387904"}, {"type": "f64", "value": "9218868437227537156"}, {"type": "i32", "value": "1"}]}, "expected": [{"type": "f64", "value": "4611686018427387904"}]}, 
  {"type": "assert_return", "line": 240, "action": {"type": "invoke", "field": "select-f64-t", "args": [{"type": "f64", "value": "4611686018427387904"}, {"type": "f64", "value": "9221120237041090560"}, {"type": "i32", "value": "0"}]}, "expected": [{"type": "f64", "value": "9221120237041090560"}]}, 
  {"type": "assert_return", "line": 241, "action": {"type": "invoke", "field": "select-f64-t", "args": [{"type": "f64", "value": "4611686018427387904"}, {"type": "f64", "value": "9218868437227537156"}, {"type": "i32", "value": "0"}]}, "expected": [{"type": "f64", "value": "9218868437227537156"}]}, 
  {"type": "assert_return", "line": 243, "action": {"type": "invoke", "field": "as-select-first", "args": [{"type": "i32", "value": "0"}]}, "expected": [{"type": "i32", "value": "1"}]}, 
  {"type": "assert_return", "line": 244, "action": {"type": "invoke", "field": "as-select-first", "args": [{"type": "i32", "value": "1"}]}, "expected": [{"type": "i32", "value": "0"}]}, 
  {"type": "assert_return", "line": 245, "action": {"type": "invoke", "field": "as-select-mid", "args": [{"type": "i32", "value": "0"}]}, "expected": [{"type": "i32", "value": "2"}]}, 
  {"type": "assert_return", "line": 246, "action": {"type": "invoke", "field": "as-select-mid", "args": [{"type": "i32", "value": "1"}]}, "expected": [{"type": "i32", "value": "2"}]}, 
  {"type": "assert_return", "line": 247, "action": {"type": "invoke", "field": "as-select-last", "args": [{"type": "i32", "value": "0"}]}, "expected": [{"type": "i32", "value": "2"}]}, 
  {"type": "assert_return", "line": 248, "action": {"type": "invoke", "field": "as-select-last", "args": [{"type": "i32", "value": "1"}]}, "expected": [{"type": "i32", "value": "3"}]}, 
  {"type": "assert_return", "line": 250, "action": {"type": "invoke", "field": "as-loop-first", "args": [{"type": "i32", "value": "0"}]}, "expected": [{"type": "i32", "value": "3"}]}, 
  {"type": "assert_return", "line": 251, "action": {"type": "invoke", "field": "as-loop-first", "args": [{"type": "i32", "value": "1"}]}, "expected": [{"type": "i32", "value": "2"}]}, 
  {"type": "assert_return", "line": 252, "action": {"type": "invoke", "field": "as-loop-mid", "args": [{"type": "i32", "value": "0"}]}, "expected": [{"type": "i32", "value": "3"}]}, 
  {"type": "assert_return", "line": 253, "action": {"type": "invoke", "field": "as-loop-mid", "args": [{"type": "i32", "value": "1"}]}, "expected": [{"type": "i32", "value": "2"}]}, 
  {"type": "assert_return", "line": 254, "action": {"type": "invoke", "field": "as-loop-last", "args": [{"type": "i32", "value": "0"}]}, "expected": [{"type": "i32", "value": "3"}]}, 
  {"type": "assert_return", "line": 255, "action": {"type": "invoke", "field": "as-loop-last", "args": [{"type": "i32", "value": "1"}]}, "expected": [{"type": "i32", "value": "2"}]}, 
  {"type": "assert_return", "line": 257, "action": {"type": "invoke", "field": "as-if-condition", "args": [{"type": "i32", "value": "0"}]}, "expected": []}, 
  {"type": "assert_return", "line": 258, "action": {"type": "invoke", "field": "as-if-condition", "args": [{"type": "i32", "value": "1"}]}, "expected": []}, 
  {"type": "assert_return", "line": 259, "action": {"type": "invoke", "field": "as-if-then", "args": [{"type": "i32", "value": "0"}]}, "expected": [{"type": "i32", "value": "3"}]}, 
  {"type": "assert_return", "line": 260, "action": {"type": "invoke", "field": "as-if-then", "args": [{"type": "i32", "value": "1"}]}, "expected": [{"type": "i32", "value": "2"}]}, 
  {"type": "assert_return", "line": 261, "action": {"type": "invoke", "field": "as-if-else", "args": [{"type": "i32", "value": "0"}]}, "expected": [{"type": "i32", "value": "3"}]}, 
  {"type": "assert_return", "line": 262, "action": {"type": "invoke", "field": "as-if-else", "args": [{"type": "i32", "value": "1"}]}, "expected": [{"type": "i32", "value": "2"}]}, 
  {"type": "assert_return", "line": 264, "action": {"type": "invoke", "field": "as-br_if-first", "args": [{"type": "i32", "value": "0"}]}, "expected": [{"type": "i32", "value": "3"}]}, 
  {"type": "assert_return", "line": 265, "action": {"type": "invoke", "field": "as-br_if-first", "args": [{"type": "i32", "value": "1"}]}, "expected": [{"type": "i32", "value": "2"}]}, 
  {"type": "assert_return", "line": 266, "action": {"type": "invoke", "field": "as-br_if-last", "args": [{"type": "i32", "value": "0"}]}, "expected": [{"type": "i32", "value": "2"}]}, 
  {"type": "assert_return", "line": 267, "action": {"type": "invoke", "field": "as-br_if-last", "args": [{"type": "i32", "value": "1"}]}, "expected": [{"type": "i32", "value": "2"}]}, 
  {"type": "assert_return", "line": 269, "action": {"type": "invoke", "field": "as-br_table-first", "args": [{"type": "i32", "value": "0"}]}, "expected": [{"type": "i32", "value": "3"}]}, 
  {"type": "assert_return", "line": 270, "action": {"type": "invoke", "field": "as-br_table-first", "args": [{"type": "i32", "value": "1"}]}, "expected": [{"type": "i32", "value": "2"}]}, 
  {"type": "assert_return", "line": 271, "action": {"type": "invoke", "field": "as-br_table-last", "args": [{"type": "i32", "value": "0"}]}, "expected": [{"type": "i32", "value": "2"}]}, 
  {"type": "assert_return", "line": 272, "action": {"type": "invoke", "field": "as-br_table-last", "args": [{"type": "i32", "value": "1"}]}, "expected": [{"type": "i32", "value": "2"}]}, 
  {"type": "assert_return", "line": 274, "action": {"type": "invoke", "field": "as-call_indirect-first", "args": [{"type": "i32", "value": "0"}]}, "expected": [{"type": "i32", "value": "3"}]}, 
  {"type": "assert_return", "line": 275, "action": {"type": "invoke", "field": "as-call_indirect-first", "args": [{"type": "i32", "value": "1"}]}, "expected": [{"type": "i32", "value": "2"}]}, 
  {"type": "assert_return", "line": 276, "action": {"type": "invoke", "field": "as-call_indirect-mid", "args": [{"type": "i32", "value": "0"}]}, "expected": [{"type": "i32", "value": "1"}]}, 
  {"type": "assert_return", "line": 277, "action": {"type": "invoke", "field": "as-call_indirect-mid", "args": [{"type": "i32", "value": "1"}]}, "expected": [{"type": "i32", "value": "1"}]}, 
  {"type": "assert_trap", "line": 278, "action": {"type": "invoke", "field": "as-call_indirect-last", "args": [{"type": "i32", "value": "0"}]}, "text": "undefined element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_trap", "line": 279, "action": {"type": "invoke", "field": "as-call_indirect-last", "args": [{"type": "i32", "value": "1"}]}, "text": "undefined element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_return", "line": 281, "action": {"type": "invoke", "field": "as-store-first", "args": [{"type": "i32", "value": "0"}]}, "expected": []}, 
  {"type": "assert_return", "line": 282, "action": {"type": "invoke", "field": "as-store-first", "args": [{"type": "i32", "value": "1"}]}, "expected": []}, 
  {"type": "assert_return", "line": 283, "action": {"type": "invoke", "field": "as-store-last", "args": [{"type": "i32", "value": "0"}]}, "expected": []}, 
  {"type": "assert_return", "line": 284, "action": {"type": "invoke", "field": "as-store-last", "args": [{"type": "i32", "value": "1"}]}, "expected": []}, 
  {"type": "assert_return", "line": 286, "action": {"type": "invoke", "field": "as-memory.grow-value", "args": [{"type": "i32", "value": "0"}]}, "expected": [{"type": "i32", "value": "1"}]}, 
  {"type": "assert_return", "line": 287, "action": {"type": "invoke", "field": "as-memory.grow-value", "args": [{"type": "i32", "value": "1"}]}, "expected": [{"type": "i32", "value": "3"}]}, 
  {"type": "assert_return", "line": 289, "action": {"type": "invoke", "field": "as-call-value", "args": [{"type": "i32", "value": "0"}]}, "expected": [{"type": "i32", "value": "2"}]}, 
  {"type": "assert_return", "line": 290, "action": {"type": "invoke", "field": "as-call-value", "args": [{"type": "i32", "value": "1"}]}, "expected": [{"type": "i32", "value": "1"}]}, 
  {"type": "assert_return", "line": 291, "action": {"type": "invoke", "field": "as-return-value", "args": [{"type": "i32", "value": "0"}]}, "expected": [{"type": "i32", "value": "2"}]}, 
  {"type": "assert_return", "line": 292, "action": {"type": "invoke", "field": "as-return-value", "args": [{"type": "i32", "value": "1"}]}, "expected": [{"type": "i32", "value": "1"}]}, 
  {"type": "assert_return", "line": 293, "action": {"type": "invoke", "field": "as-drop-operand", "args": [{"type": "i32", "value": "0"}]}, "expected": []}, 
  {"type": "assert_return", "line": 294, "action": {"type": "invoke", "field": "as-drop-operand", "args": [{"type": "i32", "value": "1"}]}, "expected": []}, 
  {"type": "assert_return", "line": 295, "action": {"type": "invoke", "field": "as-br-value", "args": [{"type": "i32", "value": "0"}]}, "expected": [{"type": "i32", "value": "2"}]}, 
  {"type": "assert_return", "line": 296, "action": {"type": "invoke", "field": "as-br-value", "args": [{"type": "i32", "value": "1"}]}, "expected": [{"type": "i32", "value": "1"}]}, 
  {"type": "assert_return", "line": 297, "action": {"type": "invoke", "field": "as-local.set-value", "args": [{"type": "i32", "value": "0"}]}, "expected": [{"type": "i32", "value": "2"}]}, 
  {"type": "assert_return", "line": 298, "action": {"type": "invoke", "field": "as-local.set-value", "args": [{"type": "i32", "value": "1"}]}, "expected": [{"type": "i32", "value": "1"}]}, 
  {"type": "assert_return", "line": 299, "action": {"type": "invoke", "field": "as-local.tee-value", "args": [{"type": "i32", "value": "0"}]}, "expected": [{"type": "i32", "value": "2"}]}, 
  {"type": "assert_return", "line": 300, "action": {"type": "invoke", "field": "as-local.tee-value", "args": [{"type": "i32", "value": "1"}]}, "expected": [{"type": "i32", "value": "1"}]}, 
  {"type": "assert_return", "line": 301, "action": {"type": "invoke", "field": "as-global.set-value", "args": [{"type": "i32", "value": "0"}]}, "expected": [{"type": "i32", "value": "2"}]}, 
  {"type": "assert_return", "line": 302, "action": {"type": "invoke", "field": "as-global.set-value", "args": [{"type": "i32", "value": "1"}]}, "expected": [{"type": "i32", "value": "1"}]}, 
  {"type": "assert_return", "line": 303, "action": {"type": "invoke", "field": "as-load-operand", "args": [{"type": "i32", "value": "0"}]}, "expected": [{"type": "i32", "value": "1"}]}, 
  {"type": "assert_return", "line": 304, "action": {"type": "invoke", "field": "as-load-operand", "args": [{"type": "i32", "value": "1"}]}, "expected": [{"type": "i32", "value": "1"}]}, 
  {"type": "assert_return", "line": 306, "action": {"type": "invoke", "field": "as-unary-operand", "args": [{"type": "i32", "value": "0"}]}, "expected": [{"type": "i32", "value": "0"}]}, 
  {"type": "assert_return", "line": 307, "action": {"type": "invoke", "field": "as-unary-operand", "args": [{"type": "i32", "value": "1"}]}, "expected": [{"type": "i32", "value": "1"}]}, 
  {"type": "assert_return", "line": 308, "action": {"type": "invoke", "field": "as-binary-operand", "args": [{"type": "i32", "value": "0"}]}, "expected": [{"type": "i32", "value": "4"}]}, 
  {"type": "assert_return", "line": 309, "action": {"type": "invoke", "field": "as-binary-operand", "args": [{"type": "i32", "value": "1"}]}, "expected": [{"type": "i32", "value": "1"}]}, 
  {"type": "assert_return", "line": 310, "action": {"type": "invoke", "field": "as-test-operand", "args": [{"type": "i32", "value": "0"}]}, "expected": [{"type": "i32", "value": "0"}]}, 
  {"type": "assert_return", "line": 311, "action": {"type": "invoke", "field": "as-test-operand", "args": [{"type": "i32", "value": "1"}]}, "expected": [{"type": "i32", "value": "1"}]}, 
  {"type": "assert_return", "line": 312, "action": {"type": "invoke", "field": "as-compare-left", "args": [{"type": "i32", "value": "0"}]}, "expected": [{"type": "i32", "value": "0"}]}, 
  {"type": "assert_return", "line": 313, "action": {"type": "invoke", "field": "as-compare-left", "args": [{"type": "i32", "value": "1"}]}, "expected": [{"type": "i32", "value": "1"}]}, 
  {"type": "assert_return", "line": 314, "action": {"type": "invoke", "field": "as-compare-right", "args": [{"type": "i32", "value": "0"}]}, "expected": [{"type": "i32", "value": "0"}]}, 
  {"type": "assert_return", "line": 315, "action": {"type": "invoke", "field": "as-compare-right", "args": [{"type": "i32", "value": "1"}]}, "expected": [{"type": "i32", "value": "1"}]}, 
  {"type": "assert_return", "line": 316, "action": {"type": "invoke", "field": "as-convert-operand", "args": [{"type": "i32", "value": "0"}]}, "expected": [{"type": "i32", "value": "0"}]}, 
  {"type": "assert_return", "line": 317, "action": {"type": "invoke", "field": "as-convert-operand", "args": [{"type": "i32", "value": "1"}]}, "expected": [{"type": "i32", "value": "1"}]}, 
  {"type": "assert_invalid", "line": 320, "filename": "select.1.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 324, "filename": "select.2.wasm", "text": "invalid result arity", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 328, "filename": "select.3.wasm", "text": "invalid result arity", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 340, "filename": "select.4.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 347, "filename": "select.5.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 353, "filename": "select.6.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 359, "filename": "select.7.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 366, "filename": "select.8.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 370, "filename": "select.9.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 374, "filename": "select.10.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 378, "filename": "select.11.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 382, "filename": "select.12.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 388, "filename": "select.13.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 396, "filename": "select.14.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 404, "filename": "select.15.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 412, "filename": "select.16.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 421, "filename": "select.17.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 430, "filename": "select.18.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 439, "filename": "select.19.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 448, "filename": "select.20.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 457, "filename": "select.21.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 466, "filename": "select.22.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 475, "filename": "select.23.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 484, "filename": "select.24.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 496, "filename": "select.25.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 500, "filename": "select.26.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 504, "filename": "select.27.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 511, "filename": "select.28.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "module", "line": 518, "filename": "select.29.wasm"}]},
  "code": [
    "(module \n  (func $dummy) (table $tab funcref (elem $dummy)) (memory 1)\n  (func (export \"select-i32\") (param i32 i32 i32) (result i32) (select (local.get 0) (local.get 1) (local.get 2)) )\n  (func (export \"select-i64\") (param i64 i64 i32) (result i64) (select (local.get 0) (local.get 1) (local.get 2)) )\n  (func (export \"select-f32\") (param f32 f32 i32) (result f32) (select (local.get 0) (local.get 1) (local.get 2)) )\n  (func (export \"select-f64\") (param f64 f64 i32) (result f64) (select (local.get 0) (local.get 1) (local.get 2)) )\n  (func (export \"select-i32-t\") (param i32 i32 i32) (result i32) (select (result i32) (local.get 0) (local.get 1) (local.get 2)) )\n  (func (export \"select-i64-t\") (param i64 i64 i32) (result i64) (select (result i64) (local.get 0) (local.get 1) (local.get 2)) )\n  (func (export \"select-f32-t\") (param f32 f32 i32) (result f32) (select (result f32) (local.get 0) (local.get 1) (local.get 2)) )\n  (func (export \"select-f64-t\") (param f64 f64 i32) (result f64) (select (result f64) (local.get 0) (local.get 1) (local.get 2)) )\n  (func (export \"select-funcref\") (param funcref funcref i32) (result funcref) (select (result funcref) (local.get 0) (local.get 1) (local.get 2)) )\n  (func (export \"select-externref\") (param externref externref i32) (result externref) (select (result externref) (local.get 0) (local.get 1) (local.get 2)) )\n  (func (export \"as-select-first\") (param i32) (result i32) (select (select (i32.const 0) (i32.const 1) (local.get 0)) (i32.const 2) (i32.const 3)) )\n  (func (export \"as-select-mid\") (param i32) (result i32) (select (i32.const 2) (select (i32.const 0) (i32.const 1) (local.get 0)) (i32.const 3)) )\n  (func (export \"as-select-last\") (param i32) (result i32) (select (i32.const 2) (i32.const 3) (select (i32.const 0) (i32.const 1) (local.get 0))) )\n  (func (export \"as-loop-first\") (param i32) (result i32) (loop (result i32) (select (i32.const 2) (i32.const 3) (local.get 0)) (call $dummy) (call $dummy)) )\n  (func (export \"as-loop-mid\") (param i32) (result i32) (loop (result i32) (call $dummy) (select (i32.const 2) (i32.const 3) (local.get 0)) (call $dummy)) )\n  (func (export \"as-loop-last\") (param i32) (result i32) (loop (result i32) (call $dummy) (call $dummy) (select (i32.const 2) (i32.const 3) (local.get 0))) )\n  (func (export \"as-if-condition\") (param i32) (select (i32.const 2) (i32.const 3) (local.get 0)) (if (then (call $dummy))) )\n  (func (export \"as-if-then\") (param i32) (result i32) (if (result i32) (i32.const 1) (then (select (i32.const 2) (i32.const 3) (local.get 0))) (else (i32.const 4))) )\n  (func (export \"as-if-else\") (param i32) (result i32) (if (result i32) (i32.const 0) (then (i32.const 2)) (else (select (i32.const 2) (i32.const 3) (local.get 0)))) )\n  (func (export \"as-br_if-first\") (param i32) (result i32) (block (result i32) (br_if 0 (select (i32.const 2) (i32.const 3) (local.get 0)) (i32.const 4))) )\n  (func (export \"as-br_if-last\") (param i32) (result i32) (block (result i32) (br_if 0 (i32.const 2) (select (i32.const 2) (i32.const 3) (local.get 0)))) )\n  (func (export \"as-br_table-first\") (param i32) (result i32) (block (result i32) (select (i32.const 2) (i32.const 3) (local.get 0)) (i32.const 2) (br_table 0 0)) )\n  (func (export \"as-br_table-last\") (param i32) (result i32) (block (result i32) (i32.const 2) (select (i32.const 2) (i32.const 3) (local.get 0)) (br_table 0 0)) )\n  (func $ (param i32 i32) (result i32) (local.get 0)) (type $check (func (param i32 i32) (result i32))) (table $t funcref (elem $func))\n  (func (export \"as-call_indirect-first\") (param i32) (result i32) (block (result i32) (call_indirect $t (type $check) (select (i32.const 2) (i32.const 3) (local.get 0)) (i32.const 1) (i32.const 0) ) ) )\n  (func (export \"as-call_indirect-mid\") (param i32) (result i32) (block (result i32) (call_indirect $t (type $check) (i32.const 1) (select (i32.const 2) (i32.const 3) (local.get 0)) (i32.const 0) ) ) )\n  (func (export \"as-call_indirect-last\") (param i32) (result i32) (block (result i32) (call_indirect $t (type $check) (i32.const 1) (i32.const 4) (select (i32.const 2) (i32.const 3) (local.get 0)) ) ) )\n  (func (export \"as-store-first\") (param i32) (select (i32.const 0) (i32.const 4) (local.get 0)) (i32.const 1) (i32.store) )\n  (func (export \"as-store-last\") (param i32) (i32.const 8) (select (i32.const 1) (i32.const 2) (local.get 0)) (i32.store) )\n  (func (export \"as-memory.grow-value\") (param i32) (result i32) (memory.grow (select (i32.const 1) (i32.const 2) (local.get 0))) )\n  (func $f (param i32) (result i32) (local.get 0))\n  (func (export \"as-call-value\") (param i32) (result i32) (call $f (select (i32.const 1) (i32.const 2) (local.get 0))) )\n  (func (export \"as-return-value\") (param i32) (result i32) (select (i32.const 1) (i32.const 2) (local.get 0)) (return) )\n  (func (export \"as-drop-operand\") (param i32) (drop (select (i32.const 1) (i32.const 2) (local.get 0))) )\n  (func (export \"as-br-value\") (param i32) (result i32) (block (result i32) (br 0 (select (i32.const 1) (i32.const 2) (local.get 0)))) )\n  (func (export \"as-local.set-value\") (param i32) (result i32) (local i32) (local.set 0 (select (i32.const 1) (i32.const 2) (local.get 0))) (local.get 0) )\n  (func (export \"as-local.tee-value\") (param i32) (result i32) (local.tee 0 (select (i32.const 1) (i32.const 2) (local.get 0))) ) (global $a (mut i32) (i32.const 10))\n  (func (export \"as-global.set-value\") (param i32) (result i32) (global.set $a (select (i32.const 1) (i32.const 2) (local.get 0))) (global.get $a) )\n  (func (export \"as-load-operand\") (param i32) (result i32) (i32.load (select (i32.const 0) (i32.const 4) (local.get 0))) )\n  (func (export \"as-unary-operand\") (param i32) (result i32) (i32.eqz (select (i32.const 0) (i32.const 1) (local.get 0))) )\n  (func (export \"as-binary-operand\") (param i32) (result i32) (i32.mul (select (i32.const 1) (i32.const 2) (local.get 0)) (select (i32.const 1) (i32.const 2) (local.get 0)) ) )\n  (func (export \"as-test-operand\") (param i32) (result i32) (block (result i32) (i32.eqz (select (i32.const 0) (i32.const 1) (local.get 0))) ) )\n  (func (export \"as-compare-left\") (param i32) (result i32) (block (result i32) (i32.le_s (select (i32.const 1) (i32.const 2) (local.get 0)) (i32.const 1)) ) )\n  (func (export \"as-compare-right\") (param i32) (result i32) (block (result i32) (i32.ne (i32.const 1) (select (i32.const 0) (i32.const 1) (local.get 0))) ) )\n  (func (export \"as-convert-operand\") (param i32) (result i32) (block (result i32) (i32.wrap_i64 (select (i64.const 1) (i64.const 0) (local.get 0))) ) ))",
    "(assert_return (invoke \"select-i32\" (i32.const 1) (i32.const 2) (i32.const 1)) (i32.const 1))",
    "(assert_return (invoke \"select-i64\" (i64.const 2) (i64.const 1) (i32.const 1)) (i64.const 2))",
    "(assert_return (invoke \"select-f32\" (f32.const 1) (f32.const 2) (i32.const 1)) (f32.const 1))",
    "(assert_return (invoke \"select-f64\" (f64.const 1) (f64.const 2) (i32.const 1)) (f64.const 1))",
    "(assert_return (invoke \"select-i32\" (i32.const 1) (i32.const 2) (i32.const 0)) (i32.const 2))",
    "(assert_return (invoke \"select-i32\" (i32.const 2) (i32.const 1) (i32.const 0)) (i32.const 1))",
    "(assert_return (invoke \"select-i64\" (i64.const 2) (i64.const 1) (i32.const -1)) (i64.const 2))",
    "(assert_return (invoke \"select-i64\" (i64.const 2) (i64.const 1) (i32.const 0xf0f0f0f0)) (i64.const 2))",
    "(assert_return (invoke \"select-f32\" (f32.const nan) (f32.const 1) (i32.const 1)) (f32.const nan))",
    "(assert_return (invoke \"select-f32\" (f32.const nan:0x20304) (f32.const 1) (i32.const 1)) (f32.const nan:0x20304))",
    "(assert_return (invoke \"select-f32\" (f32.const nan) (f32.const 1) (i32.const 0)) (f32.const 1))",
    "(assert_return (invoke \"select-f32\" (f32.const nan:0x20304) (f32.const 1) (i32.const 0)) (f32.const 1))",
    "(assert_return (invoke \"select-f32\" (f32.const 2) (f32.const nan) (i32.const 1)) (f32.const 2))",
    "(assert_return (invoke \"select-f32\" (f32.const 2) (f32.const nan:0x20304) (i32.const 1)) (f32.const 2))",
    "(assert_return (invoke \"select-f32\" (f32.const 2) (f32.const nan) (i32.const 0)) (f32.const nan))",
    "(assert_return (invoke \"select-f32\" (f32.const 2) (f32.const nan:0x20304) (i32.const 0)) (f32.const nan:0x20304))",
    "(assert_return (invoke \"select-f64\" (f64.const nan) (f64.const 1) (i32.const 1)) (f64.const nan))",
    "(assert_return (invoke \"select-f64\" (f64.const nan:0x20304) (f64.const 1) (i32.const 1)) (f64.const nan:0x20304))",
    "(assert_return (invoke \"select-f64\" (f64.const nan) (f64.const 1) (i32.const 0)) (f64.const 1))",
    "(assert_return (invoke \"select-f64\" (f64.const nan:0x20304) (f64.const 1) (i32.const 0)) (f64.const 1))",
    "(assert_return (invoke \"select-f64\" (f64.const 2) (f64.const nan) (i32.const 1)) (f64.const 2))",
    "(assert_return (invoke \"select-f64\" (f64.const 2) (f64.const nan:0x20304) (i32.const 1)) (f64.const 2))",
    "(assert_return (invoke \"select-f64\" (f64.const 2) (f64.const nan) (i32.const 0)) (f64.const nan))",
    "(assert_return (invoke \"select-f64\" (f64.const 2) (f64.const nan:0x20304) (i32.const 0)) (f64.const nan:0x20304))",
    "(assert_return (invoke \"select-i32-t\" (i32.const 1) (i32.const 2) (i32.const 1)) (i32.const 1))",
    "(assert_return (invoke \"select-i64-t\" (i64.const 2) (i64.const 1) (i32.const 1)) (i64.const 2))",
    "(assert_return (invoke \"select-f32-t\" (f32.const 1) (f32.const 2) (i32.const 1)) (f32.const 1))",
    "(assert_return (invoke \"select-f64-t\" (f64.const 1) (f64.const 2) (i32.const 1)) (f64.const 1))",
    "(assert_return (invoke \"select-funcref\" (ref.null func) (ref.null func) (i32.const 1)) (ref.null func))",
    "(assert_return (invoke \"select-externref\" (ref.extern 1) (ref.extern 2) (i32.const 1)) (ref.extern 1))",
    "(assert_return (invoke \"select-i32-t\" (i32.const 1) (i32.const 2) (i32.const 0)) (i32.const 2))",
    "(assert_return (invoke \"select-i32-t\" (i32.const 2) (i32.const 1) (i32.const 0)) (i32.const 1))",
    "(assert_return (invoke \"select-i64-t\" (i64.const 2) (i64.const 1) (i32.const -1)) (i64.const 2))",
    "(assert_return (invoke \"select-i64-t\" (i64.const 2) (i64.const 1) (i32.const 0xf0f0f0f0)) (i64.const 2))",
    "(assert_return (invoke \"select-externref\" (ref.extern 1) (ref.extern 2) (i32.const 0)) (ref.extern 2))",
    "(assert_return (invoke \"select-externref\" (ref.extern 2) (ref.extern 1) (i32.const 0)) (ref.extern 1))",
    "(assert_return (invoke \"select-f32-t\" (f32.const nan) (f32.const 1) (i32.const 1)) (f32.const nan))",
    "(assert_return (invoke \"select-f32-t\" (f32.const nan:0x20304) (f32.const 1) (i32.const 1)) (f32.const nan:0x20304))",
    "(assert_return (invoke \"select-f32-t\" (f32.const nan) (f32.const 1) (i32.const 0)) (f32.const 1))",
    "(assert_return (invoke \"select-f32-t\" (f32.const nan:0x20304) (f32.const 1) (i32.const 0)) (f32.const 1))",
    "(assert_return (invoke \"select-f32-t\" (f32.const 2) (f32.const nan) (i32.const 1)) (f32.const 2))",
    "(assert_return (invoke \"select-f32-t\" (f32.const 2) (f32.const nan:0x20304) (i32.const 1)) (f32.const 2))",
    "(assert_return (invoke \"select-f32-t\" (f32.const 2) (f32.const nan) (i32.const 0)) (f32.const nan))",
    "(assert_return (invoke \"select-f32-t\" (f32.const 2) (f32.const nan:0x20304) (i32.const 0)) (f32.const nan:0x20304))",
    "(assert_return (invoke \"select-f64-t\" (f64.const nan) (f64.const 1) (i32.const 1)) (f64.const nan))",
    "(assert_return (invoke \"select-f64-t\" (f64.const nan:0x20304) (f64.const 1) (i32.const 1)) (f64.const nan:0x20304))",
    "(assert_return (invoke \"select-f64-t\" (f64.const nan) (f64.const 1) (i32.const 0)) (f64.const 1))",
    "(assert_return (invoke \"select-f64-t\" (f64.const nan:0x20304) (f64.const 1) (i32.const 0)) (f64.const 1))",
    "(assert_return (invoke \"select-f64-t\" (f64.const 2) (f64.const nan) (i32.const 1)) (f64.const 2))",
    "(assert_return (invoke \"select-f64-t\" (f64.const 2) (f64.const nan:0x20304) (i32.const 1)) (f64.const 2))",
    "(assert_return (invoke \"select-f64-t\" (f64.const 2) (f64.const nan) (i32.const 0)) (f64.const nan))",
    "(assert_return (invoke \"select-f64-t\" (f64.const 2) (f64.const nan:0x20304) (i32.const 0)) (f64.const nan:0x20304))",
    "(assert_return (invoke \"as-select-first\" (i32.const 0)) (i32.const 1))",
    "(assert_return (invoke \"as-select-first\" (i32.const 1)) (i32.const 0))",
    "(assert_return (invoke \"as-select-mid\" (i32.const 0)) (i32.const 2))",
    "(assert_return (invoke \"as-select-mid\" (i32.const 1)) (i32.const 2))",
    "(assert_return (invoke \"as-select-last\" (i32.const 0)) (i32.const 2))",
    "(assert_return (invoke \"as-select-last\" (i32.const 1)) (i32.const 3))",
    "(assert_return (invoke \"as-loop-first\" (i32.const 0)) (i32.const 3))",
    "(assert_return (invoke \"as-loop-first\" (i32.const 1)) (i32.const 2))",
    "(assert_return (invoke \"as-loop-mid\" (i32.const 0)) (i32.const 3))",
    "(assert_return (invoke \"as-loop-mid\" (i32.const 1)) (i32.const 2))",
    "(assert_return (invoke \"as-loop-last\" (i32.const 0)) (i32.const 3))",
    "(assert_return (invoke \"as-loop-last\" (i32.const 1)) (i32.const 2))",
    "(assert_return (invoke \"as-if-condition\" (i32.const 0)))",
    "(assert_return (invoke \"as-if-condition\" (i32.const 1)))",
    "(assert_return (invoke \"as-if-then\" (i32.const 0)) (i32.const 3))",
    "(assert_return (invoke \"as-if-then\" (i32.const 1)) (i32.const 2))",
    "(assert_return (invoke \"as-if-else\" (i32.const 0)) (i32.const 3))",
    "(assert_return (invoke \"as-if-else\" (i32.const 1)) (i32.const 2))",
    "(assert_return (invoke \"as-br_if-first\" (i32.const 0)) (i32.const 3))",
    "(assert_return (invoke \"as-br_if-first\" (i32.const 1)) (i32.const 2))",
    "(assert_return (invoke \"as-br_if-last\" (i32.const 0)) (i32.const 2))",
    "(assert_return (invoke \"as-br_if-last\" (i32.const 1)) (i32.const 2))",
    "(assert_return (invoke \"as-br_table-first\" (i32.const 0)) (i32.const 3))",
    "(assert_return (invoke \"as-br_table-first\" (i32.const 1)) (i32.const 2))",
    "(assert_return (invoke \"as-br_table-last\" (i32.const 0)) (i32.const 2))",
    "(assert_return (invoke \"as-br_table-last\" (i32.const 1)) (i32.const 2))",
    "(assert_return (invoke \"as-call_indirect-first\" (i32.const 0)) (i32.const 3))",
    "(assert_return (invoke \"as-call_indirect-first\" (i32.const 1)) (i32.const 2))",
    "(assert_return (invoke \"as-call_indirect-mid\" (i32.const 0)) (i32.const 1))",
    "(assert_return (invoke \"as-call_indirect-mid\" (i32.const 1)) (i32.const 1))",
    "(assert_trap (invoke \"as-call_indirect-last\" (i32.const 0)) \"undefined element\")",
    "(assert_trap (invoke \"as-call_indirect-last\" (i32.const 1)) \"undefined element\")",
    "(assert_return (invoke \"as-store-first\" (i32.const 0)))",
    "(assert_return (invoke \"as-store-first\" (i32.const 1)))",
    "(assert_return (invoke \"as-store-last\" (i32.const 0)))",
    "(assert_return (invoke \"as-store-last\" (i32.const 1)))",
    "(assert_return (invoke \"as-memory.grow-value\" (i32.const 0)) (i32.const 1))",
    "(assert_return (invoke \"as-memory.grow-value\" (i32.const 1)) (i32.const 3))",
    "(assert_return (invoke \"as-call-value\" (i32.const 0)) (i32.const 2))",
    "(assert_return (invoke \"as-call-value\" (i32.const 1)) (i32.const 1))",
    "(assert_return (invoke \"as-return-value\" (i32.const 0)) (i32.const 2))",
    "(assert_return (invoke \"as-return-value\" (i32.const 1)) (i32.const 1))",
    "(assert_return (invoke \"as-drop-operand\" (i32.const 0)))",
    "(assert_return (invoke \"as-drop-operand\" (i32.const 1)))",
    "(assert_return (invoke \"as-br-value\" (i32.const 0)) (i32.const 2))",
    "(assert_return (invoke \"as-br-value\" (i32.const 1)) (i32.const 1))",
    "(assert_return (invoke \"as-local.set-value\" (i32.const 0)) (i32.const 2))",
    "(assert_return (invoke \"as-local.set-value\" (i32.const 1)) (i32.const 1))",
    "(assert_return (invoke \"as-local.tee-value\" (i32.const 0)) (i32.const 2))",
    "(assert_return (invoke \"as-local.tee-value\" (i32.const 1)) (i32.const 1))",
    "(assert_return (invoke \"as-global.set-value\" (i32.const 0)) (i32.const 2))",
    "(assert_return (invoke \"as-global.set-value\" (i32.const 1)) (i32.const 1))",
    "(assert_return (invoke \"as-load-operand\" (i32.const 0)) (i32.const 1))",
    "(assert_return (invoke \"as-load-operand\" (i32.const 1)) (i32.const 1))",
    "(assert_return (invoke \"as-unary-operand\" (i32.const 0)) (i32.const 0))",
    "(assert_return (invoke \"as-unary-operand\" (i32.const 1)) (i32.const 1))",
    "(assert_return (invoke \"as-binary-operand\" (i32.const 0)) (i32.const 4))",
    "(assert_return (invoke \"as-binary-operand\" (i32.const 1)) (i32.const 1))",
    "(assert_return (invoke \"as-test-operand\" (i32.const 0)) (i32.const 0))",
    "(assert_return (invoke \"as-test-operand\" (i32.const 1)) (i32.const 1))",
    "(assert_return (invoke \"as-compare-left\" (i32.const 0)) (i32.const 0))",
    "(assert_return (invoke \"as-compare-left\" (i32.const 1)) (i32.const 1))",
    "(assert_return (invoke \"as-compare-right\" (i32.const 0)) (i32.const 0))",
    "(assert_return (invoke \"as-compare-right\" (i32.const 1)) (i32.const 1))",
    "(assert_return (invoke \"as-convert-operand\" (i32.const 0)) (i32.const 0))",
    "(assert_return (invoke \"as-convert-operand\" (i32.const 1)) (i32.const 1))",
    "(assert_invalid (module (func $arity-0-implicit (select (nop) (nop) (i32.const 1)))) \"type mismatch\")",
    "(assert_invalid (module (func $arity-0 (select (result) (nop) (nop) (i32.const 1)))) \"invalid result arity\")",
    "(assert_invalid (module (func $arity-2 (result i32 i32) (select (result i32 i32) (i32.const 0) (i32.const 0) (i32.const 0) (i32.const 0) (i32.const 1) ) )) \"invalid result arity\")",
    "(assert_invalid (module (func $type-externref-implicit (param $r externref) (drop (select (local.get $r) (local.get $r) (i32.const 1))) )) \"type mismatch\")",
    "(assert_invalid (module (func $type-num-vs-num (drop (select (i32.const 1) (i64.const 1) (i32.const 1))) )) \"type mismatch\")",
    "(assert_invalid (module (func $type-num-vs-num (drop (select (i32.const 1) (f32.const 1.0) (i32.const 1))) )) \"type mismatch\")",
    "(assert_invalid (module (func $type-num-vs-num (drop (select (i32.const 1) (f64.const 1.0) (i32.const 1))) )) \"type mismatch\")",
    "(assert_invalid (module (func $type-num-vs-num (select (i32.const 1) (i64.const 1) (i32.const 1)) (drop))) \"type mismatch\")",
    "(assert_invalid (module (func $type-num-vs-num (select (i32.const 1) (f32.const 1.0) (i32.const 1)) (drop))) \"type mismatch\")",
    "(assert_invalid (module (func $type-num-vs-num (select (i32.const 1) (i64.const 1) (i32.const 1)) (drop))) \"type mismatch\")",
    "(assert_invalid (module (func $type-num-vs-num (select (i32.const 1) (f32.const 1.0) (i32.const 1)) (drop))) \"type mismatch\")",
    "(assert_invalid (module (func $type-num-vs-num (select (i32.const 1) (f64.const 1.0) (i32.const 1)) (drop))) \"type mismatch\")",
    "(assert_invalid (module (func $type-1st-operand-empty (select) (drop) ) ) \"type mismatch\")",
    "(assert_invalid (module (func $type-2nd-operand-empty (i32.const 0) (select) (drop) ) ) \"type mismatch\")",
    "(assert_invalid (module (func $type-3rd-operand-empty (i32.const 0) (i32.const 0) (select) (drop) ) ) \"type mismatch\")",
    "(assert_invalid (module (func $type-1st-operand-empty-in-block (i32.const 0) (i32.const 0) (i32.const 0) (block (select) (drop)) ) ) \"type mismatch\")",
    "(assert_invalid (module (func $type-2nd-operand-empty-in-block (i32.const 0) (i32.const 0) (block (i32.const 0) (select) (drop)) ) ) \"type mismatch\")",
    "(assert_invalid (module (func $type-3rd-operand-empty-in-block (i32.const 0) (block (i32.const 0) (i32.const 0) (select) (drop)) ) ) \"type mismatch\")",
    "(assert_invalid (module (func $type-1st-operand-empty-in-loop (i32.const 0) (i32.const 0) (i32.const 0) (loop (select) (drop)) ) ) \"type mismatch\")",
    "(assert_invalid (module (func $type-2nd-operand-empty-in-loop (i32.const 0) (i32.const 0) (loop (i32.const 0) (select) (drop)) ) ) \"type mismatch\")",
    "(assert_invalid (module (func $type-3rd-operand-empty-in-loop (i32.const 0) (loop (i32.const 0) (i32.const 0) (select) (drop)) ) ) \"type mismatch\")",
    "(assert_invalid (module (func $type-1st-operand-empty-in-then (i32.const 0) (i32.const 0) (i32.const 0) (if (then (select) (drop))) ) ) \"type mismatch\")",
    "(assert_invalid (module (func $type-2nd-operand-empty-in-then (i32.const 0) (i32.const 0) (if (then (i32.const 0) (select) (drop))) ) ) \"type mismatch\")",
    "(assert_invalid (module (func $type-3rd-operand-empty-in-then (i32.const 0) (if (then (i32.const 0) (i32.const 0) (select) (drop))) ) ) \"type mismatch\")",
    "(assert_invalid (module (func (select (i32.const 1) (i32.const 1) (i64.const 1)) (drop))) \"type mismatch\")",
    "(assert_invalid (module (func (select (i32.const 1) (i32.const 1) (f32.const 1)) (drop))) \"type mismatch\")",
    "(assert_invalid (module (func (select (i32.const 1) (i32.const 1) (f64.const 1)) (drop))) \"type mismatch\")",
    "(assert_invalid (module (func (result i32) (select (i64.const 1) (i64.const 1) (i32.const 1)))) \"type mismatch\")",
    "(module (table 1 funcref)\n  (func (result i32) unreachable select)\n  (func (result i32) unreachable select nop)\n  (func (result i32) unreachable select (select))\n  (func (result i32) unreachable select select)\n  (func (result i32) unreachable select select select)\n  (func (result i32) unreachable select (result i32))\n  (func (result i32) unreachable select (result i32) (result))\n  (func (result i32) unreachable select (result i32) (result) select)\n  (func (result i32) unreachable select (result) (result i32) select (result i32))\n  (func (result i32) unreachable select call_indirect)\n  (func (result i32) unreachable select call_indirect select))"
  ],
  "dump": {
    "select.0.wasm": {
      "header": "\nselect.0.wasm:\tfile format wasm 0x1\n\nSections:\n\n     Type start=0x0000000a end=0x00000047 (size=0x0000003d) count: 10\n Function start=0x00000049 end=0x00000078 (size=0x0000002f) count: 46\n    Table start=0x0000007a end=0x00000083 (size=0x00000009) count: 2\n   Memory start=0x00000085 end=0x00000088 (size=0x00000003) count: 1\n   Global start=0x0000008a end=0x00000090 (size=0x00000006) count: 1\n   Export start=0x00000093 end=0x00000383 (size=0x000002f0) count: 43\n     Elem start=0x00000385 end=0x00000394 (size=0x0000000f) count: 2\n     Code start=0x00000397 end=0x00000617 (size=0x00000280) count: 46\n",
      "details": "\nselect.0.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nType[10]:\n - type[0] (i32, i32) -> i32\n - type[1] () -> nil\n - type[2] (i32, i32, i32) -> i32\n - type[3] (i64, i64, i32) -> i64\n - type[4] (f32, f32, i32) -> f32\n - type[5] (f64, f64, i32) -> f64\n - type[6] (funcref, funcref, i32) -> funcref\n - type[7] (externref, externref, i32) -> externref\n - type[8] (i32) -> i32\n - type[9] (i32) -> nil\nFunction[46]:\n - func[0] sig=1\n - func[1] sig=2 <select-i32>\n - func[2] sig=3 <select-i64>\n - func[3] sig=4 <select-f32>\n - func[4] sig=5 <select-f64>\n - func[5] sig=2 <select-i32-t>\n - func[6] sig=3 <select-i64-t>\n - func[7] sig=4 <select-f32-t>\n - func[8] sig=5 <select-f64-t>\n - func[9] sig=6 <select-funcref>\n - func[10] sig=7 <select-externref>\n - func[11] sig=8 <as-select-first>\n - func[12] sig=8 <as-select-mid>\n - func[13] sig=8 <as-select-last>\n - func[14] sig=8 <as-loop-first>\n - func[15] sig=8 <as-loop-mid>\n - func[16] sig=8 <as-loop-last>\n - func[17] sig=9 <as-if-condition>\n - func[18] sig=8 <as-if-then>\n - func[19] sig=8 <as-if-else>\n - func[20] sig=8 <as-br_if-first>\n - func[21] sig=8 <as-br_if-last>\n - func[22] sig=8 <as-br_table-first>\n - func[23] sig=8 <as-br_table-last>\n - func[24] sig=0\n - func[25] sig=8 <as-call_indirect-first>\n - func[26] sig=8 <as-call_indirect-mid>\n - func[27] sig=8 <as-call_indirect-last>\n - func[28] sig=9 <as-store-first>\n - func[29] sig=9 <as-store-last>\n - func[30] sig=8 <as-memory.grow-value>\n - func[31] sig=8\n - func[32] sig=8 <as-call-value>\n - func[33] sig=8 <as-return-value>\n - func[34] sig=9 <as-drop-operand>\n - func[35] sig=8 <as-br-value>\n - func[36] sig=8 <as-local.set-value>\n - func[37] sig=8 <as-local.tee-value>\n - func[38] sig=8 <as-global.set-value>\n - func[39] sig=8 <as-load-operand>\n - func[40] sig=8 <as-unary-operand>\n - func[41] sig=8 <as-binary-operand>\n - func[42] sig=8 <as-test-operand>\n - func[43] sig=8 <as-compare-left>\n - func[44] sig=8 <as-compare-right>\n - func[45] sig=8 <as-convert-operand>\nTable[2]:\n - table[0] type=funcref initial=1 max=1\n - table[1] type=funcref initial=1 max=1\nMemory[1]:\n - memory[0] pages: initial=1\nGlobal[1]:\n - global[0] i32 mutable=1 - init i32=10\nExport[43]:\n - func[1] <select-i32> -> \"select-i32\"\n - func[2] <select-i64> -> \"select-i64\"\n - func[3] <select-f32> -> \"select-f32\"\n - func[4] <select-f64> -> \"select-f64\"\n - func[5] <select-i32-t> -> \"select-i32-t\"\n - func[6] <select-i64-t> -> \"select-i64-t\"\n - func[7] <select-f32-t> -> \"select-f32-t\"\n - func[8] <select-f64-t> -> \"select-f64-t\"\n - func[9] <select-funcref> -> \"select-funcref\"\n - func[10] <select-externref> -> \"select-externref\"\n - func[11] <as-select-first> -> \"as-select-first\"\n - func[12] <as-select-mid> -> \"as-select-mid\"\n - func[13] <as-select-last> -> \"as-select-last\"\n - func[14] <as-loop-first> -> \"as-loop-first\"\n - func[15] <as-loop-mid> -> \"as-loop-mid\"\n - func[16] <as-loop-last> -> \"as-loop-last\"\n - func[17] <as-if-condition> -> \"as-if-condition\"\n - func[18] <as-if-then> -> \"as-if-then\"\n - func[19] <as-if-else> -> \"as-if-else\"\n - func[20] <as-br_if-first> -> \"as-br_if-first\"\n - func[21] <as-br_if-last> -> \"as-br_if-last\"\n - func[22] <as-br_table-first> -> \"as-br_table-first\"\n - func[23] <as-br_table-last> -> \"as-br_table-last\"\n - func[25] <as-call_indirect-first> -> \"as-call_indirect-first\"\n - func[26] <as-call_indirect-mid> -> \"as-call_indirect-mid\"\n - func[27] <as-call_indirect-last> -> \"as-call_indirect-last\"\n - func[28] <as-store-first> -> \"as-store-first\"\n - func[29] <as-store-last> -> \"as-store-last\"\n - func[30] <as-memory.grow-value> -> \"as-memory.grow-value\"\n - func[32] <as-call-value> -> \"as-call-value\"\n - func[33] <as-return-value> -> \"as-return-value\"\n - func[34] <as-drop-operand> -> \"as-drop-operand\"\n - func[35] <as-br-value> -> \"as-br-value\"\n - func[36] <as-local.set-value> -> \"as-local.set-value\"\n - func[37] <as-local.tee-value> -> \"as-local.tee-value\"\n - func[38] <as-global.set-value> -> \"as-global.set-value\"\n - func[39] <as-load-operand> -> \"as-load-operand\"\n - func[40] <as-unary-operand> -> \"as-unary-operand\"\n - func[41] <as-binary-operand> -> \"as-binary-operand\"\n - func[42] <as-test-operand> -> \"as-test-operand\"\n - func[43] <as-compare-left> -> \"as-compare-left\"\n - func[44] <as-compare-right> -> \"as-compare-right\"\n - func[45] <as-convert-operand> -> \"as-convert-operand\"\nElem[2]:\n - segment[0] flags=0 table=0 count=1 - init i32=0\n  - elem[0] = ref.func:0\n - segment[1] flags=2 table=1 count=1 - init i32=0\n  - elem[0] = ref.func:24\nCode[46]:\n - func[0] size=2\n - func[1] size=9 <select-i32>\n - func[2] size=9 <select-i64>\n - func[3] size=9 <select-f32>\n - func[4] size=9 <select-f64>\n - func[5] size=11 <select-i32-t>\n - func[6] size=11 <select-i64-t>\n - func[7] size=11 <select-f32-t>\n - func[8] size=11 <select-f64-t>\n - func[9] size=11 <select-funcref>\n - func[10] size=11 <select-externref>\n - func[11] size=14 <as-select-first>\n - func[12] size=14 <as-select-mid>\n - func[13] size=14 <as-select-last>\n - func[14] size=16 <as-loop-first>\n - func[15] size=16 <as-loop-mid>\n - func[16] size=16 <as-loop-last>\n - func[17] size=14 <as-if-condition>\n - func[18] size=17 <as-if-then>\n - func[19] size=17 <as-if-else>\n - func[20] size=16 <as-br_if-first>\n - func[21] size=16 <as-br_if-last>\n - func[22] size=18 <as-br_table-first>\n - func[23] size=18 <as-br_table-last>\n - func[24] size=4\n - func[25] size=19 <as-call_indirect-first>\n - func[26] size=19 <as-call_indirect-mid>\n - func[27] size=19 <as-call_indirect-last>\n - func[28] size=14 <as-store-first>\n - func[29] size=14 <as-store-last>\n - func[30] size=11 <as-memory.grow-value>\n - func[31] size=4\n - func[32] size=11 <as-call-value>\n - func[33] size=10 <as-return-value>\n - func[34] size=10 <as-drop-operand>\n - func[35] size=14 <as-br-value>\n - func[36] size=15 <as-local.set-value>\n - func[37] size=11 <as-local.tee-value>\n - func[38] size=13 <as-global.set-value>\n - func[39] size=12 <as-load-operand>\n - func[40] size=10 <as-unary-operand>\n - func[41] size=17 <as-binary-operand>\n - func[42] size=13 <as-test-operand>\n - func[43] size=15 <as-compare-left>\n - func[44] size=15 <as-compare-right>\n - func[45] size=13 <as-convert-operand>\n",
      "disassemble": "\nselect.0.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n000399 func[0]:\n 00039a: 0b                         | end\n00039c func[1] <select-i32>:\n 00039d: 20 00                      | local.get 0\n 00039f: 20 01                      | local.get 1\n 0003a1: 20 02                      | local.get 2\n 0003a3: 1b                         | select\n 0003a4: 0b                         | end\n0003a6 func[2] <select-i64>:\n 0003a7: 20 00                      | local.get 0\n 0003a9: 20 01                      | local.get 1\n 0003ab: 20 02                      | local.get 2\n 0003ad: 1b                         | select\n 0003ae: 0b                         | end\n0003b0 func[3] <select-f32>:\n 0003b1: 20 00                      | local.get 0\n 0003b3: 20 01                      | local.get 1\n 0003b5: 20 02                      | local.get 2\n 0003b7: 1b                         | select\n 0003b8: 0b                         | end\n0003ba func[4] <select-f64>:\n 0003bb: 20 00                      | local.get 0\n 0003bd: 20 01                      | local.get 1\n 0003bf: 20 02                      | local.get 2\n 0003c1: 1b                         | select\n 0003c2: 0b                         | end\n0003c4 func[5] <select-i32-t>:\n 0003c5: 20 00                      | local.get 0\n 0003c7: 20 01                      | local.get 1\n 0003c9: 20 02                      | local.get 2\n 0003cb: 1c 01 7f                   | select i32\n 0003ce: 0b                         | end\n0003d0 func[6] <select-i64-t>:\n 0003d1: 20 00                      | local.get 0\n 0003d3: 20 01                      | local.get 1\n 0003d5: 20 02                      | local.get 2\n 0003d7: 1c 01 7e                   | select i64\n 0003da: 0b                         | end\n0003dc func[7] <select-f32-t>:\n 0003dd: 20 00                      | local.get 0\n 0003df: 20 01                      | local.get 1\n 0003e1: 20 02                      | local.get 2\n 0003e3: 1c 01 7d                   | select f32\n 0003e6: 0b                         | end\n0003e8 func[8] <select-f64-t>:\n 0003e9: 20 00                      | local.get 0\n 0003eb: 20 01                      | local.get 1\n 0003ed: 20 02                      | local.get 2\n 0003ef: 1c 01 7c                   | select f64\n 0003f2: 0b                         | end\n0003f4 func[9] <select-funcref>:\n 0003f5: 20 00                      | local.get 0\n 0003f7: 20 01                      | local.get 1\n 0003f9: 20 02                      | local.get 2\n 0003fb: 1c 01 70                   | select funcref\n 0003fe: 0b                         | end\n000400 func[10] <select-externref>:\n 000401: 20 00                      | local.get 0\n 000403: 20 01                      | local.get 1\n 000405: 20 02                      | local.get 2\n 000407: 1c 01 6f                   | select externref\n 00040a: 0b                         | end\n00040c func[11] <as-select-first>:\n 00040d: 41 00                      | i32.const 0\n 00040f: 41 01                      | i32.const 1\n 000411: 20 00                      | local.get 0\n 000413: 1b                         | select\n 000414: 41 02                      | i32.const 2\n 000416: 41 03                      | i32.const 3\n 000418: 1b                         | select\n 000419: 0b                         | end\n00041b func[12] <as-select-mid>:\n 00041c: 41 02                      | i32.const 2\n 00041e: 41 00                      | i32.const 0\n 000420: 41 01                      | i32.const 1\n 000422: 20 00                      | local.get 0\n 000424: 1b                         | select\n 000425: 41 03                      | i32.const 3\n 000427: 1b                         | select\n 000428: 0b                         | end\n00042a func[13] <as-select-last>:\n 00042b: 41 02                      | i32.const 2\n 00042d: 41 03                      | i32.const 3\n 00042f: 41 00                      | i32.const 0\n 000431: 41 01                      | i32.const 1\n 000433: 20 00                      | local.get 0\n 000435: 1b                         | select\n 000436: 1b                         | select\n 000437: 0b                         | end\n000439 func[14] <as-loop-first>:\n 00043a: 03 7f                      | loop i32\n 00043c: 41 02                      |   i32.const 2\n 00043e: 41 03                      |   i32.const 3\n 000440: 20 00                      |   local.get 0\n 000442: 1b                         |   select\n 000443: 10 00                      |   call 0\n 000445: 10 00                      |   call 0\n 000447: 0b                         | end\n 000448: 0b                         | end\n00044a func[15] <as-loop-mid>:\n 00044b: 03 7f                      | loop i32\n 00044d: 10 00                      |   call 0\n 00044f: 41 02                      |   i32.const 2\n 000451: 41 03                      |   i32.const 3\n 000453: 20 00                      |   local.get 0\n 000455: 1b                         |   select\n 000456: 10 00                      |   call 0\n 000458: 0b                         | end\n 000459: 0b                         | end\n00045b func[16] <as-loop-last>:\n 00045c: 03 7f                      | loop i32\n 00045e: 10 00                      |   call 0\n 000460: 10 00                      |   call 0\n 000462: 41 02                      |   i32.const 2\n 000464: 41 03                      |   i32.const 3\n 000466: 20 00                      |   local.get 0\n 000468: 1b                         |   select\n 000469: 0b                         | end\n 00046a: 0b                         | end\n00046c func[17] <as-if-condition>:\n 00046d: 41 02                      | i32.const 2\n 00046f: 41 03                      | i32.const 3\n 000471: 20 00                      | local.get 0\n 000473: 1b                         | select\n 000474: 04 40                      | if\n 000476: 10 00                      |   call 0\n 000478: 0b                         | end\n 000479: 0b                         | end\n00047b func[18] <as-if-then>:\n 00047c: 41 01                      | i32.const 1\n 00047e: 04 7f                      | if i32\n 000480: 41 02                      |   i32.const 2\n 000482: 41 03                      |   i32.const 3\n 000484: 20 00                      |   local.get 0\n 000486: 1b                         |   select\n 000487: 05                         | else\n 000488: 41 04                      |   i32.const 4\n 00048a: 0b                         | end\n 00048b: 0b                         | end\n00048d func[19] <as-if-else>:\n 00048e: 41 00                      | i32.const 0\n 000490: 04 7f                      | if i32\n 000492: 41 02                      |   i32.const 2\n 000494: 05                         | else\n 000495: 41 02                      |   i32.const 2\n 000497: 41 03                      |   i32.const 3\n 000499: 20 00                      |   local.get 0\n 00049b: 1b                         |   select\n 00049c: 0b                         | end\n 00049d: 0b                         | end\n00049f func[20] <as-br_if-first>:\n 0004a0: 02 7f                      | block i32\n 0004a2: 41 02                      |   i32.const 2\n 0004a4: 41 03                      |   i32.const 3\n 0004a6: 20 00                      |   local.get 0\n 0004a8: 1b                         |   select\n 0004a9: 41 04                      |   i32.const 4\n 0004ab: 0d 00                      |   br_if 0\n 0004ad: 0b                         | end\n 0004ae: 0b                         | end\n0004b0 func[21] <as-br_if-last>:\n 0004b1: 02 7f                      | block i32\n 0004b3: 41 02                      |   i32.const 2\n 0004b5: 41 02                      |   i32.const 2\n 0004b7: 41 03                      |   i32.const 3\n 0004b9: 20 00                      |   local.get 0\n 0004bb: 1b                         |   select\n 0004bc: 0d 00                      |   br_if 0\n 0004be: 0b                         | end\n 0004bf: 0b                         | end\n0004c1 func[22] <as-br_table-first>:\n 0004c2: 02 7f                      | block i32\n 0004c4: 41 02                      |   i32.const 2\n 0004c6: 41 03                      |   i32.const 3\n 0004c8: 20 00                      |   local.get 0\n 0004ca: 1b                         |   select\n 0004cb: 41 02                      |   i32.const 2\n 0004cd: 0e 01 00 00                |   br_table 0 0\n 0004d1: 0b                         | end\n 0004d2: 0b                         | end\n0004d4 func[23] <as-br_table-last>:\n 0004d5: 02 7f                      | block i32\n 0004d7: 41 02                      |   i32.const 2\n 0004d9: 41 02                      |   i32.const 2\n 0004db: 41 03                      |   i32.const 3\n 0004dd: 20 00                      |   local.get 0\n 0004df: 1b                         |   select\n 0004e0: 0e 01 00 00                |   br_table 0 0\n 0004e4: 0b                         | end\n 0004e5: 0b                         | end\n0004e7 func[24]:\n 0004e8: 20 00                      | local.get 0\n 0004ea: 0b                         | end\n0004ec func[25] <as-call_indirect-first>:\n 0004ed: 02 7f                      | block i32\n 0004ef: 41 02                      |   i32.const 2\n 0004f1: 41 03                      |   i32.const 3\n 0004f3: 20 00                      |   local.get 0\n 0004f5: 1b                         |   select\n 0004f6: 41 01                      |   i32.const 1\n 0004f8: 41 00                      |   i32.const 0\n 0004fa: 11 00 01                   |   call_indirect 1 (type 0)\n 0004fd: 0b                         | end\n 0004fe: 0b                         | end\n000500 func[26] <as-call_indirect-mid>:\n 000501: 02 7f                      | block i32\n 000503: 41 01                      |   i32.const 1\n 000505: 41 02                      |   i32.const 2\n 000507: 41 03                      |   i32.const 3\n 000509: 20 00                      |   local.get 0\n 00050b: 1b                         |   select\n 00050c: 41 00                      |   i32.const 0\n 00050e: 11 00 01                   |   call_indirect 1 (type 0)\n 000511: 0b                         | end\n 000512: 0b                         | end\n000514 func[27] <as-call_indirect-last>:\n 000515: 02 7f                      | block i32\n 000517: 41 01                      |   i32.const 1\n 000519: 41 04                      |   i32.const 4\n 00051b: 41 02                      |   i32.const 2\n 00051d: 41 03                      |   i32.const 3\n 00051f: 20 00                      |   local.get 0\n 000521: 1b                         |   select\n 000522: 11 00 01                   |   call_indirect 1 (type 0)\n 000525: 0b                         | end\n 000526: 0b                         | end\n000528 func[28] <as-store-first>:\n 000529: 41 00                      | i32.const 0\n 00052b: 41 04                      | i32.const 4\n 00052d: 20 00                      | local.get 0\n 00052f: 1b                         | select\n 000530: 41 01                      | i32.const 1\n 000532: 36 02 00                   | i32.store 2 0\n 000535: 0b                         | end\n000537 func[29] <as-store-last>:\n 000538: 41 08                      | i32.const 8\n 00053a: 41 01                      | i32.const 1\n 00053c: 41 02                      | i32.const 2\n 00053e: 20 00                      | local.get 0\n 000540: 1b                         | select\n 000541: 36 02 00                   | i32.store 2 0\n 000544: 0b                         | end\n000546 func[30] <as-memory.grow-value>:\n 000547: 41 01                      | i32.const 1\n 000549: 41 02                      | i32.const 2\n 00054b: 20 00                      | local.get 0\n 00054d: 1b                         | select\n 00054e: 40 00                      | memory.grow 0\n 000550: 0b                         | end\n000552 func[31]:\n 000553: 20 00                      | local.get 0\n 000555: 0b                         | end\n000557 func[32] <as-call-value>:\n 000558: 41 01                      | i32.const 1\n 00055a: 41 02                      | i32.const 2\n 00055c: 20 00                      | local.get 0\n 00055e: 1b                         | select\n 00055f: 10 1f                      | call 31\n 000561: 0b                         | end\n000563 func[33] <as-return-value>:\n 000564: 41 01                      | i32.const 1\n 000566: 41 02                      | i32.const 2\n 000568: 20 00                      | local.get 0\n 00056a: 1b                         | select\n 00056b: 0f                         | return\n 00056c: 0b                         | end\n00056e func[34] <as-drop-operand>:\n 00056f: 41 01                      | i32.const 1\n 000571: 41 02                      | i32.const 2\n 000573: 20 00                      | local.get 0\n 000575: 1b                         | select\n 000576: 1a                         | drop\n 000577: 0b                         | end\n000579 func[35] <as-br-value>:\n 00057a: 02 7f                      | block i32\n 00057c: 41 01                      |   i32.const 1\n 00057e: 41 02                      |   i32.const 2\n 000580: 20 00                      |   local.get 0\n 000582: 1b                         |   select\n 000583: 0c 00                      |   br 0\n 000585: 0b                         | end\n 000586: 0b                         | end\n000588 func[36] <as-local.set-value>:\n 000589: 01 7f                      | local[1] type=i32\n 00058b: 41 01                      | i32.const 1\n 00058d: 41 02                      | i32.const 2\n 00058f: 20 00                      | local.get 0\n 000591: 1b                         | select\n 000592: 21 00                      | local.set 0\n 000594: 20 00                      | local.get 0\n 000596: 0b                         | end\n000598 func[37] <as-local.tee-value>:\n 000599: 41 01                      | i32.const 1\n 00059b: 41 02                      | i32.const 2\n 00059d: 20 00                      | local.get 0\n 00059f: 1b                         | select\n 0005a0: 22 00                      | local.tee 0\n 0005a2: 0b                         | end\n0005a4 func[38] <as-global.set-value>:\n 0005a5: 41 01                      | i32.const 1\n 0005a7: 41 02                      | i32.const 2\n 0005a9: 20 00                      | local.get 0\n 0005ab: 1b                         | select\n 0005ac: 24 00                      | global.set 0\n 0005ae: 23 00                      | global.get 0\n 0005b0: 0b                         | end\n0005b2 func[39] <as-load-operand>:\n 0005b3: 41 00                      | i32.const 0\n 0005b5: 41 04                      | i32.const 4\n 0005b7: 20 00                      | local.get 0\n 0005b9: 1b                         | select\n 0005ba: 28 02 00                   | i32.load 2 0\n 0005bd: 0b                         | end\n0005bf func[40] <as-unary-operand>:\n 0005c0: 41 00                      | i32.const 0\n 0005c2: 41 01                      | i32.const 1\n 0005c4: 20 00                      | local.get 0\n 0005c6: 1b                         | select\n 0005c7: 45                         | i32.eqz\n 0005c8: 0b                         | end\n0005ca func[41] <as-binary-operand>:\n 0005cb: 41 01                      | i32.const 1\n 0005cd: 41 02                      | i32.const 2\n 0005cf: 20 00                      | local.get 0\n 0005d1: 1b                         | select\n 0005d2: 41 01                      | i32.const 1\n 0005d4: 41 02                      | i32.const 2\n 0005d6: 20 00                      | local.get 0\n 0005d8: 1b                         | select\n 0005d9: 6c                         | i32.mul\n 0005da: 0b                         | end\n0005dc func[42] <as-test-operand>:\n 0005dd: 02 7f                      | block i32\n 0005df: 41 00                      |   i32.const 0\n 0005e1: 41 01                      |   i32.const 1\n 0005e3: 20 00                      |   local.get 0\n 0005e5: 1b                         |   select\n 0005e6: 45                         |   i32.eqz\n 0005e7: 0b                         | end\n 0005e8: 0b                         | end\n0005ea func[43] <as-compare-left>:\n 0005eb: 02 7f                      | block i32\n 0005ed: 41 01                      |   i32.const 1\n 0005ef: 41 02                      |   i32.const 2\n 0005f1: 20 00                      |   local.get 0\n 0005f3: 1b                         |   select\n 0005f4: 41 01                      |   i32.const 1\n 0005f6: 4c                         |   i32.le_s\n 0005f7: 0b                         | end\n 0005f8: 0b                         | end\n0005fa func[44] <as-compare-right>:\n 0005fb: 02 7f                      | block i32\n 0005fd: 41 01                      |   i32.const 1\n 0005ff: 41 00                      |   i32.const 0\n 000601: 41 01                      |   i32.const 1\n 000603: 20 00                      |   local.get 0\n 000605: 1b                         |   select\n 000606: 47                         |   i32.ne\n 000607: 0b                         | end\n 000608: 0b                         | end\n00060a func[45] <as-convert-operand>:\n 00060b: 02 7f                      | block i32\n 00060d: 42 01                      |   i64.const 1\n 00060f: 42 00                      |   i64.const 0\n 000611: 20 00                      |   local.get 0\n 000613: 1b                         |   select\n 000614: a7                         |   i32.wrap_i64\n 000615: 0b                         | end\n 000616: 0b                         | end\n"
    },
    "select.29.wasm": {
      "header": "\nselect.29.wasm:\tfile format wasm 0x1\n\nSections:\n\n     Type start=0x0000000a end=0x00000012 (size=0x00000008) count: 2\n Function start=0x00000014 end=0x00000020 (size=0x0000000c) count: 11\n    Table start=0x00000022 end=0x00000026 (size=0x00000004) count: 1\n     Code start=0x00000028 end=0x00000078 (size=0x00000050) count: 11\n",
      "details": "\nselect.29.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nType[2]:\n - type[0] () -> i32\n - type[1] () -> nil\nFunction[11]:\n - func[0] sig=0\n - func[1] sig=0\n - func[2] sig=0\n - func[3] sig=0\n - func[4] sig=0\n - func[5] sig=0\n - func[6] sig=0\n - func[7] sig=0\n - func[8] sig=0\n - func[9] sig=0\n - func[10] sig=0\nTable[1]:\n - table[0] type=funcref initial=1\nCode[11]:\n - func[0] size=4\n - func[1] size=5\n - func[2] size=5\n - func[3] size=5\n - func[4] size=6\n - func[5] size=6\n - func[6] size=6\n - func[7] size=7\n - func[8] size=9\n - func[9] size=7\n - func[10] size=8\n",
      "disassemble": "\nselect.29.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n00002a func[0]:\n 00002b: 00                         | unreachable\n 00002c: 1b                         | select\n 00002d: 0b                         | end\n00002f func[1]:\n 000030: 00                         | unreachable\n 000031: 1b                         | select\n 000032: 01                         | nop\n 000033: 0b                         | end\n000035 func[2]:\n 000036: 00                         | unreachable\n 000037: 1b                         | select\n 000038: 1b                         | select\n 000039: 0b                         | end\n00003b func[3]:\n 00003c: 00                         | unreachable\n 00003d: 1b                         | select\n 00003e: 1b                         | select\n 00003f: 0b                         | end\n000041 func[4]:\n 000042: 00                         | unreachable\n 000043: 1b                         | select\n 000044: 1b                         | select\n 000045: 1b                         | select\n 000046: 0b                         | end\n000048 func[5]:\n 000049: 00                         | unreachable\n 00004a: 1c 01 7f                   | select i32\n 00004d: 0b                         | end\n00004f func[6]:\n 000050: 00                         | unreachable\n 000051: 1c 01 7f                   | select i32\n 000054: 0b                         | end\n000056 func[7]:\n 000057: 00                         | unreachable\n 000058: 1c 01 7f                   | select i32\n 00005b: 1b                         | select\n 00005c: 0b                         | end\n00005e func[8]:\n 00005f: 00                         | unreachable\n 000060: 1c 01 7f                   | select i32\n 000063: 1c 01 7f                   | select i32\n 000066: 0b                         | end\n000068 func[9]:\n 000069: 00                         | unreachable\n 00006a: 1b                         | select\n 00006b: 11 01 00                   | call_indirect 0 (type 1)\n 00006e: 0b                         | end\n000070 func[10]:\n 000071: 00                         | unreachable\n 000072: 1b                         | select\n 000073: 11 01 00                   | call_indirect 0 (type 1)\n 000076: 1b                         | select\n 000077: 0b                         | end\n"
    }
  }
}
