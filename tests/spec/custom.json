{
  "bin": {
    "custom.0.wasm": "AGFzbQEAAAAAJBBhIGN1c3RvbSBzZWN0aW9udGhpcyBpcyB0aGUgcGF5bG9hZAAgEGEgY3VzdG9tIHNlY3Rpb250aGlzIGlzIHBheWxvYWQAERBhIGN1c3RvbSBzZWN0aW9uABAAdGhpcyBpcyBwYXlsb2FkAAEAACQQAABjdXN0b20gc2VjdGlvAHRoaXMgaXMgdGhlIHBheWxvYWQAJBDvu79hIGN1c3RvbSBzZWN0dGhpcyBpcyB0aGUgcGF5bG9hZAAkEGEgY3VzdG9tIHNlY3TijKN0aGlzIGlzIHRoZSBwYXlsb2FkAB8WbW9kdWxlIHdpdGhpbiBhIG1vZHVsZQBhc20BAAAA",
    "custom.1.wasm": "AGFzbQEAAAAADgZjdXN0b21wYXlsb2FkAA4GY3VzdG9tcGF5bG9hZAEBAAAOBmN1c3RvbXBheWxvYWQADgZjdXN0b21wYXlsb2FkAgEAAA4GY3VzdG9tcGF5bG9hZAAOBmN1c3RvbXBheWxvYWQDAQAADgZjdXN0b21wYXlsb2FkAA4GY3VzdG9tcGF5bG9hZAQBAAAOBmN1c3RvbXBheWxvYWQADgZjdXN0b21wYXlsb2FkBQEAAA4GY3VzdG9tcGF5bG9hZAAOBmN1c3RvbXBheWxvYWQGAQAADgZjdXN0b21wYXlsb2FkAA4GY3VzdG9tcGF5bG9hZAcBAAAOBmN1c3RvbXBheWxvYWQADgZjdXN0b21wYXlsb2FkCQEAAA4GY3VzdG9tcGF5bG9hZAAOBmN1c3RvbXBheWxvYWQKAQAADgZjdXN0b21wYXlsb2FkAA4GY3VzdG9tcGF5bG9hZAsBAAAOBmN1c3RvbXBheWxvYWQADgZjdXN0b21wYXlsb2Fk",
    "custom.10.wasm": "AGFzbQEAAAAFAwEAAQwBAgsGAQBBAAsA",
    "custom.2.wasm": "AGFzbQEAAAABBwFgAn9/AX8AGgZjdXN0b210aGlzIGlzIHRoZSBwYXlsb2FkAwIBAAcKAQZhZGRUd28AAAoJAQcAIAAgAWoLABsHY3VzdG9tMnRoaXMgaXMgdGhlIHBheWxvYWQ=",
    "custom.3.wasm": "AGFzbQEAAAAA",
    "custom.4.wasm": "AGFzbQEAAAAAAA==",
    "custom.5.wasm": "AGFzbQEAAAAAAAAFAQAHAAA=",
    "custom.6.wasm": "AGFzbQEAAAAAJhBhIGN1c3RvbSBzZWN0aW9udGhpcyBpcyB0aGUgcGF5bG9hZA==",
    "custom.7.wasm": "AGFzbQEAAAAAJRBhIGN1c3RvbSBzZWN0aW9udGhpcyBpcyB0aGUgcGF5bG9hZAAkEGEgY3VzdG9tIHNlY3Rpb250aGlzIGlzIHRoZSBwYXlsb2Fk",
    "custom.8.wasm": "AGFzbQEAAAABBwFgAn9/AX8AJRBhIGN1c3RvbSBzZWN0aW9udGhpcyBpcyB0aGUgcGF5bG9hZAMCAQAKCQEHACAAIAFqCwAbB2N1c3RvbTJ0aGlzIGlzIHRoZSBwYXlsb2Fk",
    "custom.9.wasm": "AGFzbQEAAAAAYXNtAQAAAA=="
  },
  "spec": {"source_filename": "/home/rvagg/git/webassembly/spec/test/core/custom.wast",
 "commands": [
  {"type": "module", "line": 1, "filename": "custom.0.wasm"}, 
  {"type": "module", "line": 14, "filename": "custom.1.wasm"}, 
  {"type": "module", "line": 50, "filename": "custom.2.wasm"}, 
  {"type": "assert_malformed", "line": 61, "filename": "custom.3.wasm", "text": "unexpected end", "module_type": "binary"}, 
  {"type": "assert_malformed", "line": 69, "filename": "custom.4.wasm", "text": "unexpected end", "module_type": "binary"}, 
  {"type": "assert_malformed", "line": 77, "filename": "custom.5.wasm", "text": "unexpected end", "module_type": "binary"}, 
  {"type": "assert_malformed", "line": 85, "filename": "custom.6.wasm", "text": "length out of bounds", "module_type": "binary"}, 
  {"type": "assert_malformed", "line": 93, "filename": "custom.7.wasm", "text": "malformed section id", "module_type": "binary"}, 
  {"type": "assert_malformed", "line": 102, "filename": "custom.8.wasm", "text": "function and code section have inconsistent lengths", "module_type": "binary"}, 
  {"type": "assert_malformed", "line": 115, "filename": "custom.9.wasm", "text": "length out of bounds", "module_type": "binary"}, 
  {"type": "assert_malformed", "line": 123, "filename": "custom.10.wasm", "text": "data count and data section have inconsistent lengths", "module_type": "binary"}]},
  "code": [
    "(module binary \"\\00asm\" \"\\01\\00\\00\\00\" \"\\00\\24\\10\" \"a custom section\" \"this is the payload\" \"\\00\\20\\10\" \"a custom section\" \"this is payload\" \"\\00\\11\\10\" \"a custom section\" \"\" \"\\00\\10\\00\" \"\" \"this is payload\" \"\\00\\01\\00\" \"\" \"\" \"\\00\\24\\10\" \"\\00\\00custom sectio\\00\" \"this is the payload\" \"\\00\\24\\10\" \"\\ef\\bb\\bfa custom sect\" \"this is the payload\" \"\\00\\24\\10\" \"a custom sect\\e2\\8c\\a3\" \"this is the payload\" \"\\00\\1f\\16\" \"module within a module\" \"\\00asm\" \"\\01\\00\\00\\00\")",
    "(module binary \"\\00asm\" \"\\01\\00\\00\\00\" \"\\00\\0e\\06\" \"custom\" \"payload\" \"\\00\\0e\\06\" \"custom\" \"payload\" \"\\01\\01\\00\" \"\\00\\0e\\06\" \"custom\" \"payload\" \"\\00\\0e\\06\" \"custom\" \"payload\" \"\\02\\01\\00\" \"\\00\\0e\\06\" \"custom\" \"payload\" \"\\00\\0e\\06\" \"custom\" \"payload\" \"\\03\\01\\00\" \"\\00\\0e\\06\" \"custom\" \"payload\" \"\\00\\0e\\06\" \"custom\" \"payload\" \"\\04\\01\\00\" \"\\00\\0e\\06\" \"custom\" \"payload\" \"\\00\\0e\\06\" \"custom\" \"payload\" \"\\05\\01\\00\" \"\\00\\0e\\06\" \"custom\" \"payload\" \"\\00\\0e\\06\" \"custom\" \"payload\" \"\\06\\01\\00\" \"\\00\\0e\\06\" \"custom\" \"payload\" \"\\00\\0e\\06\" \"custom\" \"payload\" \"\\07\\01\\00\" \"\\00\\0e\\06\" \"custom\" \"payload\" \"\\00\\0e\\06\" \"custom\" \"payload\" \"\\09\\01\\00\" \"\\00\\0e\\06\" \"custom\" \"payload\" \"\\00\\0e\\06\" \"custom\" \"payload\" \"\\0a\\01\\00\" \"\\00\\0e\\06\" \"custom\" \"payload\" \"\\00\\0e\\06\" \"custom\" \"payload\" \"\\0b\\01\\00\" \"\\00\\0e\\06\" \"custom\" \"payload\" \"\\00\\0e\\06\" \"custom\" \"payload\")",
    "(module binary \"\\00asm\" \"\\01\\00\\00\\00\" \"\\01\\07\\01\\60\\02\\7f\\7f\\01\\7f\" \"\\00\\1a\\06\" \"custom\" \"this is the payload\" \"\\03\\02\\01\\00\" \"\\07\\0a\\01\\06\\61\\64\\64\\54\\77\\6f\\00\\00\" \"\\0a\\09\\01\\07\\00\\20\\00\\20\\01\\6a\\0b\" \"\\00\\1b\\07\" \"custom2\" \"this is the payload\" )",
    "(assert_malformed (module binary \"\\00asm\" \"\\01\\00\\00\\00\" \"\\00\" ) \"unexpected end\")",
    "(assert_malformed (module binary \"\\00asm\" \"\\01\\00\\00\\00\" \"\\00\\00\" ) \"unexpected end\")",
    "(assert_malformed (module binary \"\\00asm\" \"\\01\\00\\00\\00\" \"\\00\\00\\00\\05\\01\\00\\07\\00\\00\" ) \"unexpected end\")",
    "(assert_malformed (module binary \"\\00asm\" \"\\01\\00\\00\\00\" \"\\00\\26\\10\" \"a custom section\" \"this is the payload\" ) \"length out of bounds\")",
    "(assert_malformed (module binary \"\\00asm\" \"\\01\\00\\00\\00\" \"\\00\\25\\10\" \"a custom section\" \"this is the payload\" \"\\00\\24\\10\" \"a custom section\" \"this is the payload\" ) \"malformed section id\")",
    "(assert_malformed (module binary \"\\00asm\" \"\\01\\00\\00\\00\" \"\\01\\07\\01\\60\\02\\7f\\7f\\01\\7f\" \"\\00\\25\\10\" \"a custom section\" \"this is the payload\" \"\\03\\02\\01\\00\" \"\\0a\\09\\01\\07\\00\\20\\00\\20\\01\\6a\\0b\" \"\\00\\1b\\07\" \"custom2\" \"this is the payload\" ) \"function and code section have inconsistent lengths\")",
    "(assert_malformed (module binary \"\\00asm\\01\\00\\00\\00\" \"\\00asm\\01\\00\\00\\00\" ) \"length out of bounds\")",
    "(assert_malformed (module binary \"\\00asm\" \"\\01\\00\\00\\00\" \"\\05\\03\\01\\00\\01\" \"\\0c\\01\\02\" \"\\0b\\06\\01\\00\\41\\00\\0b\\00\" ) \"data count and data section have inconsistent lengths\")"
  ],
  "dump": {
    "custom.0.wasm": {
      "header": "\ncustom.0.wasm:\tfile format wasm 0x1\n\nSections:\n\n   Custom start=0x0000000a end=0x0000002e (size=0x00000024) \"a custom section\"\n   Custom start=0x00000030 end=0x00000050 (size=0x00000020) \"a custom section\"\n   Custom start=0x00000052 end=0x00000063 (size=0x00000011) \"a custom section\"\n   Custom start=0x00000065 end=0x00000075 (size=0x00000010) \"\"\n   Custom start=0x00000077 end=0x00000078 (size=0x00000001) \"\"\n   Custom start=0x0000007a end=0x0000009e (size=0x00000024) \"\"\n   Custom start=0x000000a0 end=0x000000c4 (size=0x00000024) \"﻿a custom sect\"\n   Custom start=0x000000c6 end=0x000000ea (size=0x00000024) \"a custom sect⌣\"\n   Custom start=0x000000ec end=0x0000010b (size=0x0000001f) \"module within a module\"\n",
      "details": "\ncustom.0.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nCustom:\n - name: \"a custom section\"\nCustom:\n - name: \"a custom section\"\nCustom:\n - name: \"a custom section\"\nCustom:\n - name: \"\"\nCustom:\n - name: \"\"\nCustom:\n - name: \"\"\nCustom:\n - name: \"﻿a custom sect\"\nCustom:\n - name: \"a custom sect⌣\"\nCustom:\n - name: \"module within a module\"\n",
      "disassemble": "\ncustom.0.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n"
    },
    "custom.1.wasm": {
      "header": "\ncustom.1.wasm:\tfile format wasm 0x1\n\nSections:\n\n   Custom start=0x0000000a end=0x00000018 (size=0x0000000e) \"custom\"\n   Custom start=0x0000001a end=0x00000028 (size=0x0000000e) \"custom\"\n     Type start=0x0000002a end=0x0000002b (size=0x00000001) count: 0\n   Custom start=0x0000002d end=0x0000003b (size=0x0000000e) \"custom\"\n   Custom start=0x0000003d end=0x0000004b (size=0x0000000e) \"custom\"\n   Import start=0x0000004d end=0x0000004e (size=0x00000001) count: 0\n   Custom start=0x00000050 end=0x0000005e (size=0x0000000e) \"custom\"\n   Custom start=0x00000060 end=0x0000006e (size=0x0000000e) \"custom\"\n Function start=0x00000070 end=0x00000071 (size=0x00000001) count: 0\n   Custom start=0x00000073 end=0x00000081 (size=0x0000000e) \"custom\"\n   Custom start=0x00000083 end=0x00000091 (size=0x0000000e) \"custom\"\n    Table start=0x00000093 end=0x00000094 (size=0x00000001) count: 0\n   Custom start=0x00000096 end=0x000000a4 (size=0x0000000e) \"custom\"\n   Custom start=0x000000a6 end=0x000000b4 (size=0x0000000e) \"custom\"\n   Memory start=0x000000b6 end=0x000000b7 (size=0x00000001) count: 0\n   Custom start=0x000000b9 end=0x000000c7 (size=0x0000000e) \"custom\"\n   Custom start=0x000000c9 end=0x000000d7 (size=0x0000000e) \"custom\"\n   Global start=0x000000d9 end=0x000000da (size=0x00000001) count: 0\n   Custom start=0x000000dc end=0x000000ea (size=0x0000000e) \"custom\"\n   Custom start=0x000000ec end=0x000000fa (size=0x0000000e) \"custom\"\n   Export start=0x000000fc end=0x000000fd (size=0x00000001) count: 0\n   Custom start=0x000000ff end=0x0000010d (size=0x0000000e) \"custom\"\n   Custom start=0x0000010f end=0x0000011d (size=0x0000000e) \"custom\"\n     Elem start=0x0000011f end=0x00000120 (size=0x00000001) count: 0\n   Custom start=0x00000122 end=0x00000130 (size=0x0000000e) \"custom\"\n   Custom start=0x00000132 end=0x00000140 (size=0x0000000e) \"custom\"\n     Code start=0x00000142 end=0x00000143 (size=0x00000001) count: 0\n   Custom start=0x00000145 end=0x00000153 (size=0x0000000e) \"custom\"\n   Custom start=0x00000155 end=0x00000163 (size=0x0000000e) \"custom\"\n     Data start=0x00000165 end=0x00000166 (size=0x00000001) count: 0\n   Custom start=0x00000168 end=0x00000176 (size=0x0000000e) \"custom\"\n   Custom start=0x00000178 end=0x00000186 (size=0x0000000e) \"custom\"\n",
      "details": "\ncustom.1.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nCustom:\n - name: \"custom\"\nCustom:\n - name: \"custom\"\nType[0]:\nCustom:\n - name: \"custom\"\nCustom:\n - name: \"custom\"\nImport[0]:\nCustom:\n - name: \"custom\"\nCustom:\n - name: \"custom\"\nFunction[0]:\nCustom:\n - name: \"custom\"\nCustom:\n - name: \"custom\"\nTable[0]:\nCustom:\n - name: \"custom\"\nCustom:\n - name: \"custom\"\nMemory[0]:\nCustom:\n - name: \"custom\"\nCustom:\n - name: \"custom\"\nGlobal[0]:\nCustom:\n - name: \"custom\"\nCustom:\n - name: \"custom\"\nExport[0]:\nCustom:\n - name: \"custom\"\nCustom:\n - name: \"custom\"\nElem[0]:\nCustom:\n - name: \"custom\"\nCustom:\n - name: \"custom\"\nCode[0]:\nCustom:\n - name: \"custom\"\nCustom:\n - name: \"custom\"\nData[0]:\nCustom:\n - name: \"custom\"\nCustom:\n - name: \"custom\"\n",
      "disassemble": "\ncustom.1.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n"
    },
    "custom.2.wasm": {
      "header": "\ncustom.2.wasm:\tfile format wasm 0x1\n\nSections:\n\n     Type start=0x0000000a end=0x00000011 (size=0x00000007) count: 1\n   Custom start=0x00000013 end=0x0000002d (size=0x0000001a) \"custom\"\n Function start=0x0000002f end=0x00000031 (size=0x00000002) count: 1\n   Export start=0x00000033 end=0x0000003d (size=0x0000000a) count: 1\n     Code start=0x0000003f end=0x00000048 (size=0x00000009) count: 1\n   Custom start=0x0000004a end=0x00000065 (size=0x0000001b) \"custom2\"\n",
      "details": "\ncustom.2.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nType[1]:\n - type[0] (i32, i32) -> i32\nCustom:\n - name: \"custom\"\nFunction[1]:\n - func[0] sig=0 <addTwo>\nExport[1]:\n - func[0] <addTwo> -> \"addTwo\"\nCode[1]:\n - func[0] size=7 <addTwo>\nCustom:\n - name: \"custom2\"\n",
      "disassemble": "\ncustom.2.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n000041 func[0] <addTwo>:\n 000042: 20 00                      | local.get 0\n 000044: 20 01                      | local.get 1\n 000046: 6a                         | i32.add\n 000047: 0b                         | end\n"
    }
  }
}
