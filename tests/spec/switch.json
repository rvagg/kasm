{
  "bin": {
    "switch.0.wasm": "AGFzbQEAAAABDwNgAX8Bf2ABfgF+YAABfwMFBAABAAIHHgQEc3RtdAAABGV4cHIAAQNhcmcAAgZjb3JuZXIAAwreAQRXAQF/QeQAIQECQAJAAkACQAJAAkACQAJAAkACQCAADggAAQIDBAUGCAcLIAAPCwELC0EAIABrIQEMBQsMBAtB5QAhAQwDC0HlACEBC0HmACEBCwsgAQ8LTAEBfkLkACEBAn4CQAJAAkACQAJAAkACQAJAAkAgAKcOCAABAgMGBQQIBwsgAA8LAQsLQgAgAH0MBQtC5QAhAQsLCyABDAELQnsLDwsqAAJ/QQoCf0HkAAJ/QegHAn9BAiAAbEEDIABxDgMBAgMAC2oLagtqCw8LDAACQEEADgAAC0EBCw==",
    "switch.1.wasm": "AGFzbQEAAAABBAFgAAADAgEACgkBBwBBAA4AAws="
  },
  "spec": {"source_filename": "/workspace/wasm-spec/test/core/switch.wast",
 "commands": [
  {"type": "module", "line": 1, "filename": "switch.0.wasm"}, 
  {"type": "assert_return", "line": 120, "action": {"type": "invoke", "field": "stmt", "args": [{"type": "i32", "value": "0"}]}, "expected": [{"type": "i32", "value": "0"}]}, 
  {"type": "assert_return", "line": 121, "action": {"type": "invoke", "field": "stmt", "args": [{"type": "i32", "value": "1"}]}, "expected": [{"type": "i32", "value": "4294967295"}]}, 
  {"type": "assert_return", "line": 122, "action": {"type": "invoke", "field": "stmt", "args": [{"type": "i32", "value": "2"}]}, "expected": [{"type": "i32", "value": "4294967294"}]}, 
  {"type": "assert_return", "line": 123, "action": {"type": "invoke", "field": "stmt", "args": [{"type": "i32", "value": "3"}]}, "expected": [{"type": "i32", "value": "4294967293"}]}, 
  {"type": "assert_return", "line": 124, "action": {"type": "invoke", "field": "stmt", "args": [{"type": "i32", "value": "4"}]}, "expected": [{"type": "i32", "value": "100"}]}, 
  {"type": "assert_return", "line": 125, "action": {"type": "invoke", "field": "stmt", "args": [{"type": "i32", "value": "5"}]}, "expected": [{"type": "i32", "value": "101"}]}, 
  {"type": "assert_return", "line": 126, "action": {"type": "invoke", "field": "stmt", "args": [{"type": "i32", "value": "6"}]}, "expected": [{"type": "i32", "value": "102"}]}, 
  {"type": "assert_return", "line": 127, "action": {"type": "invoke", "field": "stmt", "args": [{"type": "i32", "value": "7"}]}, "expected": [{"type": "i32", "value": "100"}]}, 
  {"type": "assert_return", "line": 128, "action": {"type": "invoke", "field": "stmt", "args": [{"type": "i32", "value": "4294967286"}]}, "expected": [{"type": "i32", "value": "102"}]}, 
  {"type": "assert_return", "line": 130, "action": {"type": "invoke", "field": "expr", "args": [{"type": "i64", "value": "0"}]}, "expected": [{"type": "i64", "value": "0"}]}, 
  {"type": "assert_return", "line": 131, "action": {"type": "invoke", "field": "expr", "args": [{"type": "i64", "value": "1"}]}, "expected": [{"type": "i64", "value": "18446744073709551615"}]}, 
  {"type": "assert_return", "line": 132, "action": {"type": "invoke", "field": "expr", "args": [{"type": "i64", "value": "2"}]}, "expected": [{"type": "i64", "value": "18446744073709551614"}]}, 
  {"type": "assert_return", "line": 133, "action": {"type": "invoke", "field": "expr", "args": [{"type": "i64", "value": "3"}]}, "expected": [{"type": "i64", "value": "18446744073709551613"}]}, 
  {"type": "assert_return", "line": 134, "action": {"type": "invoke", "field": "expr", "args": [{"type": "i64", "value": "6"}]}, "expected": [{"type": "i64", "value": "101"}]}, 
  {"type": "assert_return", "line": 135, "action": {"type": "invoke", "field": "expr", "args": [{"type": "i64", "value": "7"}]}, "expected": [{"type": "i64", "value": "18446744073709551611"}]}, 
  {"type": "assert_return", "line": 136, "action": {"type": "invoke", "field": "expr", "args": [{"type": "i64", "value": "18446744073709551606"}]}, "expected": [{"type": "i64", "value": "100"}]}, 
  {"type": "assert_return", "line": 138, "action": {"type": "invoke", "field": "arg", "args": [{"type": "i32", "value": "0"}]}, "expected": [{"type": "i32", "value": "110"}]}, 
  {"type": "assert_return", "line": 139, "action": {"type": "invoke", "field": "arg", "args": [{"type": "i32", "value": "1"}]}, "expected": [{"type": "i32", "value": "12"}]}, 
  {"type": "assert_return", "line": 140, "action": {"type": "invoke", "field": "arg", "args": [{"type": "i32", "value": "2"}]}, "expected": [{"type": "i32", "value": "4"}]}, 
  {"type": "assert_return", "line": 141, "action": {"type": "invoke", "field": "arg", "args": [{"type": "i32", "value": "3"}]}, "expected": [{"type": "i32", "value": "1116"}]}, 
  {"type": "assert_return", "line": 142, "action": {"type": "invoke", "field": "arg", "args": [{"type": "i32", "value": "4"}]}, "expected": [{"type": "i32", "value": "118"}]}, 
  {"type": "assert_return", "line": 143, "action": {"type": "invoke", "field": "arg", "args": [{"type": "i32", "value": "5"}]}, "expected": [{"type": "i32", "value": "20"}]}, 
  {"type": "assert_return", "line": 144, "action": {"type": "invoke", "field": "arg", "args": [{"type": "i32", "value": "6"}]}, "expected": [{"type": "i32", "value": "12"}]}, 
  {"type": "assert_return", "line": 145, "action": {"type": "invoke", "field": "arg", "args": [{"type": "i32", "value": "7"}]}, "expected": [{"type": "i32", "value": "1124"}]}, 
  {"type": "assert_return", "line": 146, "action": {"type": "invoke", "field": "arg", "args": [{"type": "i32", "value": "8"}]}, "expected": [{"type": "i32", "value": "126"}]}, 
  {"type": "assert_return", "line": 148, "action": {"type": "invoke", "field": "corner", "args": []}, "expected": [{"type": "i32", "value": "1"}]}, 
  {"type": "assert_invalid", "line": 150, "filename": "switch.1.wasm", "text": "unknown label", "module_type": "binary"}]},
  "code": [
    "(module \n  (func (export \"stmt\") (param $i i32) (result i32) (local $j i32) (local.set $j (i32.const 100)) (block $switch (block $7 (block $default (block $6 (block $5 (block $4 (block $3 (block $2 (block $1 (block $0 (br_table $0 $1 $2 $3 $4 $5 $6 $7 $default (local.get $i) ) ) (return (local.get $i)) ) (nop) ) ) (local.set $j (i32.sub (i32.const 0) (local.get $i))) (br $switch) ) (br $switch) ) (local.set $j (i32.const 101)) (br $switch) ) (local.set $j (i32.const 101)) ) (local.set $j (i32.const 102)) ) ) (return (local.get $j)) )\n  (func (export \"expr\") (param $i i64) (result i64) (local $j i64) (local.set $j (i64.const 100)) (return (block $switch (result i64) (block $7 (block $default (block $4 (block $5 (block $6 (block $3 (block $2 (block $1 (block $0 (br_table $0 $1 $2 $3 $4 $5 $6 $7 $default (i32.wrap_i64 (local.get $i)) ) ) (return (local.get $i)) ) (nop) ) ) (br $switch (i64.sub (i64.const 0) (local.get $i))) ) (local.set $j (i64.const 101)) ) ) ) (br $switch (local.get $j)) ) (i64.const -5) ) ) )\n  (func (export \"arg\") (param $i i32) (result i32) (return (block $2 (result i32) (i32.add (i32.const 10) (block $1 (result i32) (i32.add (i32.const 100) (block $0 (result i32) (i32.add (i32.const 1000) (block $default (result i32) (br_table $0 $1 $2 $default (i32.mul (i32.const 2) (local.get $i)) (i32.and (i32.const 3) (local.get $i)) ) ) ) ) ) ) ) ) ) )\n  (func (export \"corner\") (result i32) (block (br_table 0 (i32.const 0)) ) (i32.const 1) ))",
    "(assert_return (invoke \"stmt\" (i32.const 0)) (i32.const 0))",
    "(assert_return (invoke \"stmt\" (i32.const 1)) (i32.const -1))",
    "(assert_return (invoke \"stmt\" (i32.const 2)) (i32.const -2))",
    "(assert_return (invoke \"stmt\" (i32.const 3)) (i32.const -3))",
    "(assert_return (invoke \"stmt\" (i32.const 4)) (i32.const 100))",
    "(assert_return (invoke \"stmt\" (i32.const 5)) (i32.const 101))",
    "(assert_return (invoke \"stmt\" (i32.const 6)) (i32.const 102))",
    "(assert_return (invoke \"stmt\" (i32.const 7)) (i32.const 100))",
    "(assert_return (invoke \"stmt\" (i32.const -10)) (i32.const 102))",
    "(assert_return (invoke \"expr\" (i64.const 0)) (i64.const 0))",
    "(assert_return (invoke \"expr\" (i64.const 1)) (i64.const -1))",
    "(assert_return (invoke \"expr\" (i64.const 2)) (i64.const -2))",
    "(assert_return (invoke \"expr\" (i64.const 3)) (i64.const -3))",
    "(assert_return (invoke \"expr\" (i64.const 6)) (i64.const 101))",
    "(assert_return (invoke \"expr\" (i64.const 7)) (i64.const -5))",
    "(assert_return (invoke \"expr\" (i64.const -10)) (i64.const 100))",
    "(assert_return (invoke \"arg\" (i32.const 0)) (i32.const 110))",
    "(assert_return (invoke \"arg\" (i32.const 1)) (i32.const 12))",
    "(assert_return (invoke \"arg\" (i32.const 2)) (i32.const 4))",
    "(assert_return (invoke \"arg\" (i32.const 3)) (i32.const 1116))",
    "(assert_return (invoke \"arg\" (i32.const 4)) (i32.const 118))",
    "(assert_return (invoke \"arg\" (i32.const 5)) (i32.const 20))",
    "(assert_return (invoke \"arg\" (i32.const 6)) (i32.const 12))",
    "(assert_return (invoke \"arg\" (i32.const 7)) (i32.const 1124))",
    "(assert_return (invoke \"arg\" (i32.const 8)) (i32.const 126))",
    "(assert_return (invoke \"corner\") (i32.const 1))",
    "(assert_invalid (module (func (br_table 3 (i32.const 0)))) \"unknown label\")"
  ],
  "dump": {
    "switch.0.wasm": {
      "header": "\nswitch.0.wasm:\tfile format wasm 0x1\n\nSections:\n\n     Type start=0x0000000a end=0x00000019 (size=0x0000000f) count: 3\n Function start=0x0000001b end=0x00000020 (size=0x00000005) count: 4\n   Export start=0x00000022 end=0x00000040 (size=0x0000001e) count: 4\n     Code start=0x00000043 end=0x00000121 (size=0x000000de) count: 4\n",
      "details": "\nswitch.0.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nType[3]:\n - type[0] (i32) -> i32\n - type[1] (i64) -> i64\n - type[2] () -> i32\nFunction[4]:\n - func[0] sig=0 <stmt>\n - func[1] sig=1 <expr>\n - func[2] sig=0 <arg>\n - func[3] sig=2 <corner>\nExport[4]:\n - func[0] <stmt> -> \"stmt\"\n - func[1] <expr> -> \"expr\"\n - func[2] <arg> -> \"arg\"\n - func[3] <corner> -> \"corner\"\nCode[4]:\n - func[0] size=87 <stmt>\n - func[1] size=76 <expr>\n - func[2] size=42 <arg>\n - func[3] size=12 <corner>\n",
      "disassemble": "\nswitch.0.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n000045 func[0] <stmt>:\n 000046: 01 7f                      | local[1] type=i32\n 000048: 41 e4 00                   | i32.const 100\n 00004b: 21 01                      | local.set 1\n 00004d: 02 40                      | block\n 00004f: 02 40                      |   block\n 000051: 02 40                      |     block\n 000053: 02 40                      |       block\n 000055: 02 40                      |         block\n 000057: 02 40                      |           block\n 000059: 02 40                      |             block\n 00005b: 02 40                      |               block\n 00005d: 02 40                      |                 block\n 00005f: 02 40                      |                   block\n 000061: 20 00                      |                     local.get 0\n 000063: 0e 08 00 01 02 03 04 05 06 |                     br_table 0 1 2 3 4 5 6 8 7\n 00006c: 08 07                      | \n 00006e: 0b                         |                   end\n 00006f: 20 00                      |                   local.get 0\n 000071: 0f                         |                   return\n 000072: 0b                         |                 end\n 000073: 01                         |                 nop\n 000074: 0b                         |               end\n 000075: 0b                         |             end\n 000076: 41 00                      |             i32.const 0\n 000078: 20 00                      |             local.get 0\n 00007a: 6b                         |             i32.sub\n 00007b: 21 01                      |             local.set 1\n 00007d: 0c 05                      |             br 5\n 00007f: 0b                         |           end\n 000080: 0c 04                      |           br 4\n 000082: 0b                         |         end\n 000083: 41 e5 00                   |         i32.const 101\n 000086: 21 01                      |         local.set 1\n 000088: 0c 03                      |         br 3\n 00008a: 0b                         |       end\n 00008b: 41 e5 00                   |       i32.const 101\n 00008e: 21 01                      |       local.set 1\n 000090: 0b                         |     end\n 000091: 41 e6 00                   |     i32.const 102\n 000094: 21 01                      |     local.set 1\n 000096: 0b                         |   end\n 000097: 0b                         | end\n 000098: 20 01                      | local.get 1\n 00009a: 0f                         | return\n 00009b: 0b                         | end\n00009d func[1] <expr>:\n 00009e: 01 7e                      | local[1] type=i64\n 0000a0: 42 e4 00                   | i64.const 100\n 0000a3: 21 01                      | local.set 1\n 0000a5: 02 7e                      | block i64\n 0000a7: 02 40                      |   block\n 0000a9: 02 40                      |     block\n 0000ab: 02 40                      |       block\n 0000ad: 02 40                      |         block\n 0000af: 02 40                      |           block\n 0000b1: 02 40                      |             block\n 0000b3: 02 40                      |               block\n 0000b5: 02 40                      |                 block\n 0000b7: 02 40                      |                   block\n 0000b9: 20 00                      |                     local.get 0\n 0000bb: a7                         |                     i32.wrap_i64\n 0000bc: 0e 08 00 01 02 03 06 05 04 |                     br_table 0 1 2 3 6 5 4 8 7\n 0000c5: 08 07                      | \n 0000c7: 0b                         |                   end\n 0000c8: 20 00                      |                   local.get 0\n 0000ca: 0f                         |                   return\n 0000cb: 0b                         |                 end\n 0000cc: 01                         |                 nop\n 0000cd: 0b                         |               end\n 0000ce: 0b                         |             end\n 0000cf: 42 00                      |             i64.const 0\n 0000d1: 20 00                      |             local.get 0\n 0000d3: 7d                         |             i64.sub\n 0000d4: 0c 05                      |             br 5\n 0000d6: 0b                         |           end\n 0000d7: 42 e5 00                   |           i64.const 101\n 0000da: 21 01                      |           local.set 1\n 0000dc: 0b                         |         end\n 0000dd: 0b                         |       end\n 0000de: 0b                         |     end\n 0000df: 20 01                      |     local.get 1\n 0000e1: 0c 01                      |     br 1\n 0000e3: 0b                         |   end\n 0000e4: 42 7b                      |   i64.const 18446744073709551611\n 0000e6: 0b                         | end\n 0000e7: 0f                         | return\n 0000e8: 0b                         | end\n0000ea func[2] <arg>:\n 0000eb: 02 7f                      | block i32\n 0000ed: 41 0a                      |   i32.const 10\n 0000ef: 02 7f                      |   block i32\n 0000f1: 41 e4 00                   |     i32.const 100\n 0000f4: 02 7f                      |     block i32\n 0000f6: 41 e8 07                   |       i32.const 1000\n 0000f9: 02 7f                      |       block i32\n 0000fb: 41 02                      |         i32.const 2\n 0000fd: 20 00                      |         local.get 0\n 0000ff: 6c                         |         i32.mul\n 000100: 41 03                      |         i32.const 3\n 000102: 20 00                      |         local.get 0\n 000104: 71                         |         i32.and\n 000105: 0e 03 01 02 03 00          |         br_table 1 2 3 0\n 00010b: 0b                         |       end\n 00010c: 6a                         |       i32.add\n 00010d: 0b                         |     end\n 00010e: 6a                         |     i32.add\n 00010f: 0b                         |   end\n 000110: 6a                         |   i32.add\n 000111: 0b                         | end\n 000112: 0f                         | return\n 000113: 0b                         | end\n000115 func[3] <corner>:\n 000116: 02 40                      | block\n 000118: 41 00                      |   i32.const 0\n 00011a: 0e 00 00                   |   br_table 0\n 00011d: 0b                         | end\n 00011e: 41 01                      | i32.const 1\n 000120: 0b                         | end\n"
    }
  }
}
