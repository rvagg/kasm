{
  "bin": {
    "bulk.0.wasm": "AGFzbQEAAAAFAwEAAQsGAQEDZm9v",
    "bulk.1.wasm": "AGFzbQEAAAABBAFgAAADAwIAAAQEAXAAAwkNAQVwA9IAC9BwC9IBCwoHAgIACwIACw==",
    "bulk.10.wasm": "AGFzbQEAAAABBAFgAAADAgEACcQBQQEAAAEAAAEAAAEAAAEAAAEAAAEAAAEAAAEAAAEAAAEAAAEAAAEAAAEAAAEAAAEAAAEAAAEAAAEAAAEAAAEAAAEAAAEAAAEAAAEAAAEAAAEAAAEAAAEAAAEAAAEAAAEAAAEAAAEAAAEAAAEAAAEAAAEAAAEAAAEAAAEAAAEAAAEAAAEAAAEAAAEAAAEAAAEAAAEAAAEAAAEAAAEAAAEAAAEAAAEAAAEAAAEAAAEAAAEAAAEAAAEAAAEAAAEAAAEAAAEAAAoHAQUA/A1ACw==",
    "bulk.11.wasm": "AGFzbQEAAAABBAFgAAADAgEACQUBAQABAAoHAQUA/A0ACw==",
    "bulk.12.wasm": "AGFzbQEAAAABEANgAAF/YAN/f38AYAF/AX8DBgUAAAABAgQEAXAACgcPAgRjb3B5AAMEY2FsbAAECQkBAEEACwMAAQIKJQUEAEEACwQAQQELBABBAgsMACAAIAEgAvwOAAALBwAgABEAAAs=",
    "bulk.2.wasm": "AGFzbQEAAAABDAJgA39/fwBgAX8BfwMDAgABBQMBAAEHEgIEZmlsbAAAB2xvYWQ4X3UAAQoVAgsAIAAgASAC/AsACwcAIAAtAAAL",
    "bulk.3.wasm": "AGFzbQEAAAABDAJgA39/fwBgAX8BfwMDAgABBQQBAQEBBxICBGNvcHkAAAdsb2FkOF91AAEKFgIMACAAIAEgAvwKAAALBwAgAC0AAAsLCgEAQQALBKq7zN0=",
    "bulk.4.wasm": "AGFzbQEAAAABDAJgA39/fwBgAX8BfwMDAgABBQMBAAEHEgIEaW5pdAAAB2xvYWQ4X3UAAQwBAQoWAgwAIAAgASAC/AgAAAsHACAALQAACwsHAQEEqrvM3Q==",
    "bulk.5.wasm": "AGFzbQEAAAABCAJgAABgAX8AAwUEAAEAAQUDAQABBzsEDGRyb3BfcGFzc2l2ZQAADGluaXRfcGFzc2l2ZQABC2Ryb3BfYWN0aXZlAAILaW5pdF9hY3RpdmUAAwwBAgonBAUA/AkACwwAQQBBACAA/AgAAAsFAPwJAQsMAEEAQQAgAPwIAQALCwoCAQF4AEEACwF4",
    "bulk.6.wasm": "AGFzbQEAAAABBAFgAAADAgEADAFBCgcBBQD8CUALC4MBQQEAAQABAAEAAQABAAEAAQABAAEAAQABAAEAAQABAAEAAQABAAEAAQABAAEAAQABAAEAAQABAAEAAQABAAEAAQABAAEAAQABAAEAAQABAAEAAQABAAEAAQABAAEAAQABAAEAAQABAAEAAQABAAEAAQABAAEAAQABAAEAAQABAAEAAQA=",
    "bulk.7.wasm": "AGFzbQEAAAABBAFgAAADAgEADAEBCgcBBQD8CQALCwoBAQdnb29kYnll",
    "bulk.8.wasm": "AGFzbQEAAAABEANgAAF/YAN/f38AYAF/AX8DBQQAAAECBAQBcAADBw8CBGluaXQAAgRjYWxsAAMJCAEBAAQAAQABCiAEBABBAAsEAEEBCwwAIAAgASAC/AwAAAsHACAAEQAACw==",
    "bulk.9.wasm": "AGFzbQEAAAABCAJgAABgAX8AAwYFAAABAAEEBAFwAAEHOwQMZHJvcF9wYXNzaXZlAAEMaW5pdF9wYXNzaXZlAAILZHJvcF9hY3RpdmUAAwtpbml0X2FjdGl2ZQAECQsCAQABAABBAAsBAAoqBQIACwUA/A0ACwwAQQBBACAA/AwAAAsFAPwNAQsMAEEAQQAgAPwMAQAL"
  },
  "spec": {"source_filename": "/Users/rvagg/git/webassembly/spec/test/core/bulk.wast",
 "commands": [
  {"type": "module", "line": 2, "filename": "bulk.0.wasm"}, 
  {"type": "module", "line": 6, "filename": "bulk.1.wasm"}, 
  {"type": "module", "line": 13, "filename": "bulk.2.wasm"}, 
  {"type": "action", "line": 27, "action": {"type": "invoke", "field": "fill", "args": [{"type": "i32", "value": "1"}, {"type": "i32", "value": "255"}, {"type": "i32", "value": "3"}]}, "expected": []}, 
  {"type": "assert_return", "line": 28, "action": {"type": "invoke", "field": "load8_u", "args": [{"type": "i32", "value": "0"}]}, "expected": [{"type": "i32", "value": "0"}]}, 
  {"type": "assert_return", "line": 29, "action": {"type": "invoke", "field": "load8_u", "args": [{"type": "i32", "value": "1"}]}, "expected": [{"type": "i32", "value": "255"}]}, 
  {"type": "assert_return", "line": 30, "action": {"type": "invoke", "field": "load8_u", "args": [{"type": "i32", "value": "2"}]}, "expected": [{"type": "i32", "value": "255"}]}, 
  {"type": "assert_return", "line": 31, "action": {"type": "invoke", "field": "load8_u", "args": [{"type": "i32", "value": "3"}]}, "expected": [{"type": "i32", "value": "255"}]}, 
  {"type": "assert_return", "line": 32, "action": {"type": "invoke", "field": "load8_u", "args": [{"type": "i32", "value": "4"}]}, "expected": [{"type": "i32", "value": "0"}]}, 
  {"type": "action", "line": 35, "action": {"type": "invoke", "field": "fill", "args": [{"type": "i32", "value": "0"}, {"type": "i32", "value": "48042"}, {"type": "i32", "value": "2"}]}, "expected": []}, 
  {"type": "assert_return", "line": 36, "action": {"type": "invoke", "field": "load8_u", "args": [{"type": "i32", "value": "0"}]}, "expected": [{"type": "i32", "value": "170"}]}, 
  {"type": "assert_return", "line": 37, "action": {"type": "invoke", "field": "load8_u", "args": [{"type": "i32", "value": "1"}]}, "expected": [{"type": "i32", "value": "170"}]}, 
  {"type": "action", "line": 40, "action": {"type": "invoke", "field": "fill", "args": [{"type": "i32", "value": "0"}, {"type": "i32", "value": "0"}, {"type": "i32", "value": "65536"}]}, "expected": []}, 
  {"type": "assert_trap", "line": 43, "action": {"type": "invoke", "field": "fill", "args": [{"type": "i32", "value": "65280"}, {"type": "i32", "value": "1"}, {"type": "i32", "value": "257"}]}, "text": "out of bounds memory access", "expected": []}, 
  {"type": "assert_return", "line": 45, "action": {"type": "invoke", "field": "load8_u", "args": [{"type": "i32", "value": "65280"}]}, "expected": [{"type": "i32", "value": "0"}]}, 
  {"type": "assert_return", "line": 46, "action": {"type": "invoke", "field": "load8_u", "args": [{"type": "i32", "value": "65535"}]}, "expected": [{"type": "i32", "value": "0"}]}, 
  {"type": "action", "line": 49, "action": {"type": "invoke", "field": "fill", "args": [{"type": "i32", "value": "65536"}, {"type": "i32", "value": "0"}, {"type": "i32", "value": "0"}]}, "expected": []}, 
  {"type": "assert_trap", "line": 52, "action": {"type": "invoke", "field": "fill", "args": [{"type": "i32", "value": "65537"}, {"type": "i32", "value": "0"}, {"type": "i32", "value": "0"}]}, "text": "out of bounds memory access", "expected": []}, 
  {"type": "module", "line": 57, "filename": "bulk.3.wasm"}, 
  {"type": "action", "line": 71, "action": {"type": "invoke", "field": "copy", "args": [{"type": "i32", "value": "10"}, {"type": "i32", "value": "0"}, {"type": "i32", "value": "4"}]}, "expected": []}, 
  {"type": "assert_return", "line": 73, "action": {"type": "invoke", "field": "load8_u", "args": [{"type": "i32", "value": "9"}]}, "expected": [{"type": "i32", "value": "0"}]}, 
  {"type": "assert_return", "line": 74, "action": {"type": "invoke", "field": "load8_u", "args": [{"type": "i32", "value": "10"}]}, "expected": [{"type": "i32", "value": "170"}]}, 
  {"type": "assert_return", "line": 75, "action": {"type": "invoke", "field": "load8_u", "args": [{"type": "i32", "value": "11"}]}, "expected": [{"type": "i32", "value": "187"}]}, 
  {"type": "assert_return", "line": 76, "action": {"type": "invoke", "field": "load8_u", "args": [{"type": "i32", "value": "12"}]}, "expected": [{"type": "i32", "value": "204"}]}, 
  {"type": "assert_return", "line": 77, "action": {"type": "invoke", "field": "load8_u", "args": [{"type": "i32", "value": "13"}]}, "expected": [{"type": "i32", "value": "221"}]}, 
  {"type": "assert_return", "line": 78, "action": {"type": "invoke", "field": "load8_u", "args": [{"type": "i32", "value": "14"}]}, "expected": [{"type": "i32", "value": "0"}]}, 
  {"type": "action", "line": 81, "action": {"type": "invoke", "field": "copy", "args": [{"type": "i32", "value": "8"}, {"type": "i32", "value": "10"}, {"type": "i32", "value": "4"}]}, "expected": []}, 
  {"type": "assert_return", "line": 82, "action": {"type": "invoke", "field": "load8_u", "args": [{"type": "i32", "value": "8"}]}, "expected": [{"type": "i32", "value": "170"}]}, 
  {"type": "assert_return", "line": 83, "action": {"type": "invoke", "field": "load8_u", "args": [{"type": "i32", "value": "9"}]}, "expected": [{"type": "i32", "value": "187"}]}, 
  {"type": "assert_return", "line": 84, "action": {"type": "invoke", "field": "load8_u", "args": [{"type": "i32", "value": "10"}]}, "expected": [{"type": "i32", "value": "204"}]}, 
  {"type": "assert_return", "line": 85, "action": {"type": "invoke", "field": "load8_u", "args": [{"type": "i32", "value": "11"}]}, "expected": [{"type": "i32", "value": "221"}]}, 
  {"type": "assert_return", "line": 86, "action": {"type": "invoke", "field": "load8_u", "args": [{"type": "i32", "value": "12"}]}, "expected": [{"type": "i32", "value": "204"}]}, 
  {"type": "assert_return", "line": 87, "action": {"type": "invoke", "field": "load8_u", "args": [{"type": "i32", "value": "13"}]}, "expected": [{"type": "i32", "value": "221"}]}, 
  {"type": "action", "line": 90, "action": {"type": "invoke", "field": "copy", "args": [{"type": "i32", "value": "10"}, {"type": "i32", "value": "7"}, {"type": "i32", "value": "6"}]}, "expected": []}, 
  {"type": "assert_return", "line": 91, "action": {"type": "invoke", "field": "load8_u", "args": [{"type": "i32", "value": "10"}]}, "expected": [{"type": "i32", "value": "0"}]}, 
  {"type": "assert_return", "line": 92, "action": {"type": "invoke", "field": "load8_u", "args": [{"type": "i32", "value": "11"}]}, "expected": [{"type": "i32", "value": "170"}]}, 
  {"type": "assert_return", "line": 93, "action": {"type": "invoke", "field": "load8_u", "args": [{"type": "i32", "value": "12"}]}, "expected": [{"type": "i32", "value": "187"}]}, 
  {"type": "assert_return", "line": 94, "action": {"type": "invoke", "field": "load8_u", "args": [{"type": "i32", "value": "13"}]}, "expected": [{"type": "i32", "value": "204"}]}, 
  {"type": "assert_return", "line": 95, "action": {"type": "invoke", "field": "load8_u", "args": [{"type": "i32", "value": "14"}]}, "expected": [{"type": "i32", "value": "221"}]}, 
  {"type": "assert_return", "line": 96, "action": {"type": "invoke", "field": "load8_u", "args": [{"type": "i32", "value": "15"}]}, "expected": [{"type": "i32", "value": "204"}]}, 
  {"type": "assert_return", "line": 97, "action": {"type": "invoke", "field": "load8_u", "args": [{"type": "i32", "value": "16"}]}, "expected": [{"type": "i32", "value": "0"}]}, 
  {"type": "action", "line": 100, "action": {"type": "invoke", "field": "copy", "args": [{"type": "i32", "value": "65280"}, {"type": "i32", "value": "0"}, {"type": "i32", "value": "256"}]}, "expected": []}, 
  {"type": "action", "line": 101, "action": {"type": "invoke", "field": "copy", "args": [{"type": "i32", "value": "65024"}, {"type": "i32", "value": "65280"}, {"type": "i32", "value": "256"}]}, "expected": []}, 
  {"type": "action", "line": 104, "action": {"type": "invoke", "field": "copy", "args": [{"type": "i32", "value": "65536"}, {"type": "i32", "value": "0"}, {"type": "i32", "value": "0"}]}, "expected": []}, 
  {"type": "action", "line": 105, "action": {"type": "invoke", "field": "copy", "args": [{"type": "i32", "value": "0"}, {"type": "i32", "value": "65536"}, {"type": "i32", "value": "0"}]}, "expected": []}, 
  {"type": "assert_trap", "line": 108, "action": {"type": "invoke", "field": "copy", "args": [{"type": "i32", "value": "65537"}, {"type": "i32", "value": "0"}, {"type": "i32", "value": "0"}]}, "text": "out of bounds memory access", "expected": []}, 
  {"type": "assert_trap", "line": 110, "action": {"type": "invoke", "field": "copy", "args": [{"type": "i32", "value": "0"}, {"type": "i32", "value": "65537"}, {"type": "i32", "value": "0"}]}, "text": "out of bounds memory access", "expected": []}, 
  {"type": "module", "line": 115, "filename": "bulk.4.wasm"}, 
  {"type": "action", "line": 129, "action": {"type": "invoke", "field": "init", "args": [{"type": "i32", "value": "0"}, {"type": "i32", "value": "1"}, {"type": "i32", "value": "2"}]}, "expected": []}, 
  {"type": "assert_return", "line": 130, "action": {"type": "invoke", "field": "load8_u", "args": [{"type": "i32", "value": "0"}]}, "expected": [{"type": "i32", "value": "187"}]}, 
  {"type": "assert_return", "line": 131, "action": {"type": "invoke", "field": "load8_u", "args": [{"type": "i32", "value": "1"}]}, "expected": [{"type": "i32", "value": "204"}]}, 
  {"type": "assert_return", "line": 132, "action": {"type": "invoke", "field": "load8_u", "args": [{"type": "i32", "value": "2"}]}, "expected": [{"type": "i32", "value": "0"}]}, 
  {"type": "action", "line": 135, "action": {"type": "invoke", "field": "init", "args": [{"type": "i32", "value": "65532"}, {"type": "i32", "value": "0"}, {"type": "i32", "value": "4"}]}, "expected": []}, 
  {"type": "assert_trap", "line": 138, "action": {"type": "invoke", "field": "init", "args": [{"type": "i32", "value": "65534"}, {"type": "i32", "value": "0"}, {"type": "i32", "value": "3"}]}, "text": "out of bounds memory access", "expected": []}, 
  {"type": "assert_return", "line": 140, "action": {"type": "invoke", "field": "load8_u", "args": [{"type": "i32", "value": "65534"}]}, "expected": [{"type": "i32", "value": "204"}]}, 
  {"type": "assert_return", "line": 141, "action": {"type": "invoke", "field": "load8_u", "args": [{"type": "i32", "value": "65535"}]}, "expected": [{"type": "i32", "value": "221"}]}, 
  {"type": "action", "line": 144, "action": {"type": "invoke", "field": "init", "args": [{"type": "i32", "value": "65536"}, {"type": "i32", "value": "0"}, {"type": "i32", "value": "0"}]}, "expected": []}, 
  {"type": "action", "line": 145, "action": {"type": "invoke", "field": "init", "args": [{"type": "i32", "value": "0"}, {"type": "i32", "value": "4"}, {"type": "i32", "value": "0"}]}, "expected": []}, 
  {"type": "assert_trap", "line": 148, "action": {"type": "invoke", "field": "init", "args": [{"type": "i32", "value": "65537"}, {"type": "i32", "value": "0"}, {"type": "i32", "value": "0"}]}, "text": "out of bounds memory access", "expected": []}, 
  {"type": "assert_trap", "line": 150, "action": {"type": "invoke", "field": "init", "args": [{"type": "i32", "value": "0"}, {"type": "i32", "value": "5"}, {"type": "i32", "value": "0"}]}, "text": "out of bounds memory access", "expected": []}, 
  {"type": "module", "line": 154, "filename": "bulk.5.wasm"}, 
  {"type": "action", "line": 168, "action": {"type": "invoke", "field": "init_passive", "args": [{"type": "i32", "value": "1"}]}, "expected": []}, 
  {"type": "action", "line": 169, "action": {"type": "invoke", "field": "drop_passive", "args": []}, "expected": []}, 
  {"type": "action", "line": 170, "action": {"type": "invoke", "field": "drop_passive", "args": []}, "expected": []}, 
  {"type": "assert_return", "line": 171, "action": {"type": "invoke", "field": "init_passive", "args": [{"type": "i32", "value": "0"}]}, "expected": []}, 
  {"type": "assert_trap", "line": 172, "action": {"type": "invoke", "field": "init_passive", "args": [{"type": "i32", "value": "1"}]}, "text": "out of bounds memory access", "expected": []}, 
  {"type": "action", "line": 173, "action": {"type": "invoke", "field": "init_passive", "args": [{"type": "i32", "value": "0"}]}, "expected": []}, 
  {"type": "action", "line": 174, "action": {"type": "invoke", "field": "drop_active", "args": []}, "expected": []}, 
  {"type": "assert_return", "line": 175, "action": {"type": "invoke", "field": "init_active", "args": [{"type": "i32", "value": "0"}]}, "expected": []}, 
  {"type": "assert_trap", "line": 176, "action": {"type": "invoke", "field": "init_active", "args": [{"type": "i32", "value": "1"}]}, "text": "out of bounds memory access", "expected": []}, 
  {"type": "action", "line": 177, "action": {"type": "invoke", "field": "init_active", "args": [{"type": "i32", "value": "0"}]}, "expected": []}, 
  {"type": "module", "line": 181, "filename": "bulk.6.wasm"}, 
  {"type": "module", "line": 196, "filename": "bulk.7.wasm"}, 
  {"type": "module", "line": 199, "filename": "bulk.8.wasm"}, 
  {"type": "assert_trap", "line": 219, "action": {"type": "invoke", "field": "init", "args": [{"type": "i32", "value": "2"}, {"type": "i32", "value": "0"}, {"type": "i32", "value": "2"}]}, "text": "out of bounds table access", "expected": []}, 
  {"type": "assert_trap", "line": 221, "action": {"type": "invoke", "field": "call", "args": [{"type": "i32", "value": "2"}]}, "text": "uninitialized element 2", "expected": [{"type": "i32"}]}, 
  {"type": "action", "line": 224, "action": {"type": "invoke", "field": "init", "args": [{"type": "i32", "value": "0"}, {"type": "i32", "value": "1"}, {"type": "i32", "value": "2"}]}, "expected": []}, 
  {"type": "assert_return", "line": 225, "action": {"type": "invoke", "field": "call", "args": [{"type": "i32", "value": "0"}]}, "expected": [{"type": "i32", "value": "1"}]}, 
  {"type": "assert_return", "line": 226, "action": {"type": "invoke", "field": "call", "args": [{"type": "i32", "value": "1"}]}, "expected": [{"type": "i32", "value": "0"}]}, 
  {"type": "assert_trap", "line": 227, "action": {"type": "invoke", "field": "call", "args": [{"type": "i32", "value": "2"}]}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "action", "line": 230, "action": {"type": "invoke", "field": "init", "args": [{"type": "i32", "value": "1"}, {"type": "i32", "value": "2"}, {"type": "i32", "value": "2"}]}, "expected": []}, 
  {"type": "action", "line": 233, "action": {"type": "invoke", "field": "init", "args": [{"type": "i32", "value": "3"}, {"type": "i32", "value": "0"}, {"type": "i32", "value": "0"}]}, "expected": []}, 
  {"type": "action", "line": 234, "action": {"type": "invoke", "field": "init", "args": [{"type": "i32", "value": "0"}, {"type": "i32", "value": "4"}, {"type": "i32", "value": "0"}]}, "expected": []}, 
  {"type": "assert_trap", "line": 237, "action": {"type": "invoke", "field": "init", "args": [{"type": "i32", "value": "4"}, {"type": "i32", "value": "0"}, {"type": "i32", "value": "0"}]}, "text": "out of bounds table access", "expected": []}, 
  {"type": "assert_trap", "line": 239, "action": {"type": "invoke", "field": "init", "args": [{"type": "i32", "value": "0"}, {"type": "i32", "value": "5"}, {"type": "i32", "value": "0"}]}, "text": "out of bounds table access", "expected": []}, 
  {"type": "module", "line": 244, "filename": "bulk.9.wasm"}, 
  {"type": "action", "line": 261, "action": {"type": "invoke", "field": "init_passive", "args": [{"type": "i32", "value": "1"}]}, "expected": []}, 
  {"type": "action", "line": 262, "action": {"type": "invoke", "field": "drop_passive", "args": []}, "expected": []}, 
  {"type": "action", "line": 263, "action": {"type": "invoke", "field": "drop_passive", "args": []}, "expected": []}, 
  {"type": "assert_return", "line": 264, "action": {"type": "invoke", "field": "init_passive", "args": [{"type": "i32", "value": "0"}]}, "expected": []}, 
  {"type": "assert_trap", "line": 265, "action": {"type": "invoke", "field": "init_passive", "args": [{"type": "i32", "value": "1"}]}, "text": "out of bounds table access", "expected": []}, 
  {"type": "action", "line": 266, "action": {"type": "invoke", "field": "init_passive", "args": [{"type": "i32", "value": "0"}]}, "expected": []}, 
  {"type": "action", "line": 267, "action": {"type": "invoke", "field": "drop_active", "args": []}, "expected": []}, 
  {"type": "assert_return", "line": 268, "action": {"type": "invoke", "field": "init_active", "args": [{"type": "i32", "value": "0"}]}, "expected": []}, 
  {"type": "assert_trap", "line": 269, "action": {"type": "invoke", "field": "init_active", "args": [{"type": "i32", "value": "1"}]}, "text": "out of bounds table access", "expected": []}, 
  {"type": "action", "line": 270, "action": {"type": "invoke", "field": "init_active", "args": [{"type": "i32", "value": "0"}]}, "expected": []}, 
  {"type": "module", "line": 274, "filename": "bulk.10.wasm"}, 
  {"type": "module", "line": 297, "filename": "bulk.11.wasm"}, 
  {"type": "module", "line": 300, "filename": "bulk.12.wasm"}, 
  {"type": "action", "line": 319, "action": {"type": "invoke", "field": "copy", "args": [{"type": "i32", "value": "3"}, {"type": "i32", "value": "0"}, {"type": "i32", "value": "3"}]}, "expected": []}, 
  {"type": "assert_return", "line": 321, "action": {"type": "invoke", "field": "call", "args": [{"type": "i32", "value": "3"}]}, "expected": [{"type": "i32", "value": "0"}]}, 
  {"type": "assert_return", "line": 322, "action": {"type": "invoke", "field": "call", "args": [{"type": "i32", "value": "4"}]}, "expected": [{"type": "i32", "value": "1"}]}, 
  {"type": "assert_return", "line": 323, "action": {"type": "invoke", "field": "call", "args": [{"type": "i32", "value": "5"}]}, "expected": [{"type": "i32", "value": "2"}]}, 
  {"type": "action", "line": 326, "action": {"type": "invoke", "field": "copy", "args": [{"type": "i32", "value": "0"}, {"type": "i32", "value": "1"}, {"type": "i32", "value": "3"}]}, "expected": []}, 
  {"type": "assert_return", "line": 328, "action": {"type": "invoke", "field": "call", "args": [{"type": "i32", "value": "0"}]}, "expected": [{"type": "i32", "value": "1"}]}, 
  {"type": "assert_return", "line": 329, "action": {"type": "invoke", "field": "call", "args": [{"type": "i32", "value": "1"}]}, "expected": [{"type": "i32", "value": "2"}]}, 
  {"type": "assert_return", "line": 330, "action": {"type": "invoke", "field": "call", "args": [{"type": "i32", "value": "2"}]}, "expected": [{"type": "i32", "value": "0"}]}, 
  {"type": "action", "line": 333, "action": {"type": "invoke", "field": "copy", "args": [{"type": "i32", "value": "2"}, {"type": "i32", "value": "0"}, {"type": "i32", "value": "3"}]}, "expected": []}, 
  {"type": "assert_return", "line": 335, "action": {"type": "invoke", "field": "call", "args": [{"type": "i32", "value": "2"}]}, "expected": [{"type": "i32", "value": "1"}]}, 
  {"type": "assert_return", "line": 336, "action": {"type": "invoke", "field": "call", "args": [{"type": "i32", "value": "3"}]}, "expected": [{"type": "i32", "value": "2"}]}, 
  {"type": "assert_return", "line": 337, "action": {"type": "invoke", "field": "call", "args": [{"type": "i32", "value": "4"}]}, "expected": [{"type": "i32", "value": "0"}]}, 
  {"type": "action", "line": 340, "action": {"type": "invoke", "field": "copy", "args": [{"type": "i32", "value": "6"}, {"type": "i32", "value": "8"}, {"type": "i32", "value": "2"}]}, "expected": []}, 
  {"type": "action", "line": 341, "action": {"type": "invoke", "field": "copy", "args": [{"type": "i32", "value": "8"}, {"type": "i32", "value": "6"}, {"type": "i32", "value": "2"}]}, "expected": []}, 
  {"type": "action", "line": 344, "action": {"type": "invoke", "field": "copy", "args": [{"type": "i32", "value": "10"}, {"type": "i32", "value": "0"}, {"type": "i32", "value": "0"}]}, "expected": []}, 
  {"type": "action", "line": 345, "action": {"type": "invoke", "field": "copy", "args": [{"type": "i32", "value": "0"}, {"type": "i32", "value": "10"}, {"type": "i32", "value": "0"}]}, "expected": []}, 
  {"type": "assert_trap", "line": 348, "action": {"type": "invoke", "field": "copy", "args": [{"type": "i32", "value": "11"}, {"type": "i32", "value": "0"}, {"type": "i32", "value": "0"}]}, "text": "out of bounds table access", "expected": []}, 
  {"type": "assert_trap", "line": 350, "action": {"type": "invoke", "field": "copy", "args": [{"type": "i32", "value": "0"}, {"type": "i32", "value": "11"}, {"type": "i32", "value": "0"}]}, "text": "out of bounds table access", "expected": []}]},
  "code": [
    "(module (memory 1) (data \"foo\"))",
    "(module (table 3 funcref) (elem funcref (ref.func 0) (ref.null func) (ref.func 1))\n  (func)\n  (func))",
    "(module (memory 1)\n  (func (export \"fill\") (param i32 i32 i32) (memory.fill (local.get 0) (local.get 1) (local.get 2)))\n  (func (export \"load8_u\") (param i32) (result i32) (i32.load8_u (local.get 0))))",
    "(invoke \"fill\" (i32.const 1) (i32.const 0xff) (i32.const 3))",
    "(assert_return (invoke \"load8_u\" (i32.const 0)) (i32.const 0))",
    "(assert_return (invoke \"load8_u\" (i32.const 1)) (i32.const 0xff))",
    "(assert_return (invoke \"load8_u\" (i32.const 2)) (i32.const 0xff))",
    "(assert_return (invoke \"load8_u\" (i32.const 3)) (i32.const 0xff))",
    "(assert_return (invoke \"load8_u\" (i32.const 4)) (i32.const 0))",
    "(invoke \"fill\" (i32.const 0) (i32.const 0xbbaa) (i32.const 2))",
    "(assert_return (invoke \"load8_u\" (i32.const 0)) (i32.const 0xaa))",
    "(assert_return (invoke \"load8_u\" (i32.const 1)) (i32.const 0xaa))",
    "(invoke \"fill\" (i32.const 0) (i32.const 0) (i32.const 0x10000))",
    "(assert_trap (invoke \"fill\" (i32.const 0xff00) (i32.const 1) (i32.const 0x101)) \"out of bounds memory access\")",
    "(assert_return (invoke \"load8_u\" (i32.const 0xff00)) (i32.const 0))",
    "(assert_return (invoke \"load8_u\" (i32.const 0xffff)) (i32.const 0))",
    "(invoke \"fill\" (i32.const 0x10000) (i32.const 0) (i32.const 0))",
    "(assert_trap (invoke \"fill\" (i32.const 0x10001) (i32.const 0) (i32.const 0)) \"out of bounds memory access\")",
    "(module (memory (data \"\\aa\\bb\\cc\\dd\"))\n  (func (export \"copy\") (param i32 i32 i32) (memory.copy (local.get 0) (local.get 1) (local.get 2)))\n  (func (export \"load8_u\") (param i32) (result i32) (i32.load8_u (local.get 0))))",
    "(invoke \"copy\" (i32.const 10) (i32.const 0) (i32.const 4))",
    "(assert_return (invoke \"load8_u\" (i32.const 9)) (i32.const 0))",
    "(assert_return (invoke \"load8_u\" (i32.const 10)) (i32.const 0xaa))",
    "(assert_return (invoke \"load8_u\" (i32.const 11)) (i32.const 0xbb))",
    "(assert_return (invoke \"load8_u\" (i32.const 12)) (i32.const 0xcc))",
    "(assert_return (invoke \"load8_u\" (i32.const 13)) (i32.const 0xdd))",
    "(assert_return (invoke \"load8_u\" (i32.const 14)) (i32.const 0))",
    "(invoke \"copy\" (i32.const 8) (i32.const 10) (i32.const 4))",
    "(assert_return (invoke \"load8_u\" (i32.const 8)) (i32.const 0xaa))",
    "(assert_return (invoke \"load8_u\" (i32.const 9)) (i32.const 0xbb))",
    "(assert_return (invoke \"load8_u\" (i32.const 10)) (i32.const 0xcc))",
    "(assert_return (invoke \"load8_u\" (i32.const 11)) (i32.const 0xdd))",
    "(assert_return (invoke \"load8_u\" (i32.const 12)) (i32.const 0xcc))",
    "(assert_return (invoke \"load8_u\" (i32.const 13)) (i32.const 0xdd))",
    "(invoke \"copy\" (i32.const 10) (i32.const 7) (i32.const 6))",
    "(assert_return (invoke \"load8_u\" (i32.const 10)) (i32.const 0))",
    "(assert_return (invoke \"load8_u\" (i32.const 11)) (i32.const 0xaa))",
    "(assert_return (invoke \"load8_u\" (i32.const 12)) (i32.const 0xbb))",
    "(assert_return (invoke \"load8_u\" (i32.const 13)) (i32.const 0xcc))",
    "(assert_return (invoke \"load8_u\" (i32.const 14)) (i32.const 0xdd))",
    "(assert_return (invoke \"load8_u\" (i32.const 15)) (i32.const 0xcc))",
    "(assert_return (invoke \"load8_u\" (i32.const 16)) (i32.const 0))",
    "(invoke \"copy\" (i32.const 0xff00) (i32.const 0) (i32.const 0x100))",
    "(invoke \"copy\" (i32.const 0xfe00) (i32.const 0xff00) (i32.const 0x100))",
    "(invoke \"copy\" (i32.const 0x10000) (i32.const 0) (i32.const 0))",
    "(invoke \"copy\" (i32.const 0) (i32.const 0x10000) (i32.const 0))",
    "(assert_trap (invoke \"copy\" (i32.const 0x10001) (i32.const 0) (i32.const 0)) \"out of bounds memory access\")",
    "(assert_trap (invoke \"copy\" (i32.const 0) (i32.const 0x10001) (i32.const 0)) \"out of bounds memory access\")",
    "(module (memory 1) (data \"\\aa\\bb\\cc\\dd\")\n  (func (export \"init\") (param i32 i32 i32) (memory.init 0 (local.get 0) (local.get 1) (local.get 2)))\n  (func (export \"load8_u\") (param i32) (result i32) (i32.load8_u (local.get 0))))",
    "(invoke \"init\" (i32.const 0) (i32.const 1) (i32.const 2))",
    "(assert_return (invoke \"load8_u\" (i32.const 0)) (i32.const 0xbb))",
    "(assert_return (invoke \"load8_u\" (i32.const 1)) (i32.const 0xcc))",
    "(assert_return (invoke \"load8_u\" (i32.const 2)) (i32.const 0))",
    "(invoke \"init\" (i32.const 0xfffc) (i32.const 0) (i32.const 4))",
    "(assert_trap (invoke \"init\" (i32.const 0xfffe) (i32.const 0) (i32.const 3)) \"out of bounds memory access\")",
    "(assert_return (invoke \"load8_u\" (i32.const 0xfffe)) (i32.const 0xcc))",
    "(assert_return (invoke \"load8_u\" (i32.const 0xffff)) (i32.const 0xdd))",
    "(invoke \"init\" (i32.const 0x10000) (i32.const 0) (i32.const 0))",
    "(invoke \"init\" (i32.const 0) (i32.const 4) (i32.const 0))",
    "(assert_trap (invoke \"init\" (i32.const 0x10001) (i32.const 0) (i32.const 0)) \"out of bounds memory access\")",
    "(assert_trap (invoke \"init\" (i32.const 0) (i32.const 5) (i32.const 0)) \"out of bounds memory access\")",
    "(module (memory 1) (data $p \"x\") (data $a (memory 0) (i32.const 0) \"x\")\n  (func (export \"drop_passive\") (data.drop $p))\n  (func (export \"init_passive\") (param $len i32) (memory.init $p (i32.const 0) (i32.const 0) (local.get $len)))\n  (func (export \"drop_active\") (data.drop $a))\n  (func (export \"init_active\") (param $len i32) (memory.init $a (i32.const 0) (i32.const 0) (local.get $len))))",
    "(invoke \"init_passive\" (i32.const 1))",
    "(invoke \"drop_passive\")",
    "(invoke \"drop_passive\")",
    "(assert_return (invoke \"init_passive\" (i32.const 0)))",
    "(assert_trap (invoke \"init_passive\" (i32.const 1)) \"out of bounds memory access\")",
    "(invoke \"init_passive\" (i32.const 0))",
    "(invoke \"drop_active\")",
    "(assert_return (invoke \"init_active\" (i32.const 0)))",
    "(assert_trap (invoke \"init_active\" (i32.const 1)) \"out of bounds memory access\")",
    "(invoke \"init_active\" (i32.const 0))",
    "(module (data \"\") (data \"\") (data \"\") (data \"\") (data \"\") (data \"\") (data \"\") (data \"\") (data \"\") (data \"\") (data \"\") (data \"\") (data \"\") (data \"\") (data \"\") (data \"\") (data \"\") (data \"\") (data \"\") (data \"\") (data \"\") (data \"\") (data \"\") (data \"\") (data \"\") (data \"\") (data \"\") (data \"\") (data \"\") (data \"\") (data \"\") (data \"\") (data \"\") (data \"\") (data \"\") (data \"\") (data \"\") (data \"\") (data \"\") (data \"\") (data \"\") (data \"\") (data \"\") (data \"\") (data \"\") (data \"\") (data \"\") (data \"\") (data \"\") (data \"\") (data \"\") (data \"\") (data \"\") (data \"\") (data \"\") (data \"\") (data \"\") (data \"\") (data \"\") (data \"\") (data \"\") (data \"\") (data \"\") (data \"\") (data \"\")\n  (func (data.drop 64)))",
    "(module (data \"goodbye\")\n  (func (data.drop 0)))",
    "(module (table 3 funcref) (elem funcref (ref.func $zero) (ref.func $one) (ref.func $zero) (ref.func $one))\n  (func $zero (result i32) (i32.const 0))\n  (func $one (result i32) (i32.const 1))\n  (func (export \"init\") (param i32 i32 i32) (table.init 0 (local.get 0) (local.get 1) (local.get 2)))\n  (func (export \"call\") (param i32) (result i32) (call_indirect (result i32) (local.get 0))))",
    "(assert_trap (invoke \"init\" (i32.const 2) (i32.const 0) (i32.const 2)) \"out of bounds table access\")",
    "(assert_trap (invoke \"call\" (i32.const 2)) \"uninitialized element 2\")",
    "(invoke \"init\" (i32.const 0) (i32.const 1) (i32.const 2))",
    "(assert_return (invoke \"call\" (i32.const 0)) (i32.const 1))",
    "(assert_return (invoke \"call\" (i32.const 1)) (i32.const 0))",
    "(assert_trap (invoke \"call\" (i32.const 2)) \"uninitialized element\")",
    "(invoke \"init\" (i32.const 1) (i32.const 2) (i32.const 2))",
    "(invoke \"init\" (i32.const 3) (i32.const 0) (i32.const 0))",
    "(invoke \"init\" (i32.const 0) (i32.const 4) (i32.const 0))",
    "(assert_trap (invoke \"init\" (i32.const 4) (i32.const 0) (i32.const 0)) \"out of bounds table access\")",
    "(assert_trap (invoke \"init\" (i32.const 0) (i32.const 5) (i32.const 0)) \"out of bounds table access\")",
    "(module (table 1 funcref)\n  (func $f) (elem $p funcref (ref.func $f)) (elem $a (table 0) (i32.const 0) $f)\n  (func (export \"drop_passive\") (elem.drop $p))\n  (func (export \"init_passive\") (param $len i32) (table.init $p (i32.const 0) (i32.const 0) (local.get $len)) )\n  (func (export \"drop_active\") (elem.drop $a))\n  (func (export \"init_active\") (param $len i32) (table.init $a (i32.const 0) (i32.const 0) (local.get $len)) ))",
    "(invoke \"init_passive\" (i32.const 1))",
    "(invoke \"drop_passive\")",
    "(invoke \"drop_passive\")",
    "(assert_return (invoke \"init_passive\" (i32.const 0)))",
    "(assert_trap (invoke \"init_passive\" (i32.const 1)) \"out of bounds table access\")",
    "(invoke \"init_passive\" (i32.const 0))",
    "(invoke \"drop_active\")",
    "(assert_return (invoke \"init_active\" (i32.const 0)))",
    "(assert_trap (invoke \"init_active\" (i32.const 1)) \"out of bounds table access\")",
    "(invoke \"init_active\" (i32.const 0))",
    "(module (elem funcref) (elem funcref) (elem funcref) (elem funcref) (elem funcref) (elem funcref) (elem funcref) (elem funcref) (elem funcref) (elem funcref) (elem funcref) (elem funcref) (elem funcref) (elem funcref) (elem funcref) (elem funcref) (elem funcref) (elem funcref) (elem funcref) (elem funcref) (elem funcref) (elem funcref) (elem funcref) (elem funcref) (elem funcref) (elem funcref) (elem funcref) (elem funcref) (elem funcref) (elem funcref) (elem funcref) (elem funcref) (elem funcref) (elem funcref) (elem funcref) (elem funcref) (elem funcref) (elem funcref) (elem funcref) (elem funcref) (elem funcref) (elem funcref) (elem funcref) (elem funcref) (elem funcref) (elem funcref) (elem funcref) (elem funcref) (elem funcref) (elem funcref) (elem funcref) (elem funcref) (elem funcref) (elem funcref) (elem funcref) (elem funcref) (elem funcref) (elem funcref) (elem funcref) (elem funcref) (elem funcref) (elem funcref) (elem funcref) (elem funcref) (elem funcref)\n  (func (elem.drop 64)))",
    "(module (elem funcref (ref.func 0))\n  (func (elem.drop 0)))",
    "(module (table 10 funcref) (elem (i32.const 0) $zero $one $two)\n  (func $zero (result i32) (i32.const 0))\n  (func $one (result i32) (i32.const 1))\n  (func $two (result i32) (i32.const 2))\n  (func (export \"copy\") (param i32 i32 i32) (table.copy (local.get 0) (local.get 1) (local.get 2)))\n  (func (export \"call\") (param i32) (result i32) (call_indirect (result i32) (local.get 0))))",
    "(invoke \"copy\" (i32.const 3) (i32.const 0) (i32.const 3))",
    "(assert_return (invoke \"call\" (i32.const 3)) (i32.const 0))",
    "(assert_return (invoke \"call\" (i32.const 4)) (i32.const 1))",
    "(assert_return (invoke \"call\" (i32.const 5)) (i32.const 2))",
    "(invoke \"copy\" (i32.const 0) (i32.const 1) (i32.const 3))",
    "(assert_return (invoke \"call\" (i32.const 0)) (i32.const 1))",
    "(assert_return (invoke \"call\" (i32.const 1)) (i32.const 2))",
    "(assert_return (invoke \"call\" (i32.const 2)) (i32.const 0))",
    "(invoke \"copy\" (i32.const 2) (i32.const 0) (i32.const 3))",
    "(assert_return (invoke \"call\" (i32.const 2)) (i32.const 1))",
    "(assert_return (invoke \"call\" (i32.const 3)) (i32.const 2))",
    "(assert_return (invoke \"call\" (i32.const 4)) (i32.const 0))",
    "(invoke \"copy\" (i32.const 6) (i32.const 8) (i32.const 2))",
    "(invoke \"copy\" (i32.const 8) (i32.const 6) (i32.const 2))",
    "(invoke \"copy\" (i32.const 10) (i32.const 0) (i32.const 0))",
    "(invoke \"copy\" (i32.const 0) (i32.const 10) (i32.const 0))",
    "(assert_trap (invoke \"copy\" (i32.const 11) (i32.const 0) (i32.const 0)) \"out of bounds table access\")",
    "(assert_trap (invoke \"copy\" (i32.const 0) (i32.const 11) (i32.const 0)) \"out of bounds table access\")"
  ],
  "dump": {
    "bulk.0.wasm": {
      "header": "\nbulk.0.wasm:\tfile format wasm 0x1\n\nSections:\n\n   Memory start=0x0000000a end=0x0000000d (size=0x00000003) count: 1\n     Data start=0x0000000f end=0x00000015 (size=0x00000006) count: 1\n",
      "details": "\nbulk.0.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nMemory[1]:\n - memory[0] pages: initial=1\nData[1]:\n - segment[0] passive size=3\n  - 0000000: 666f 6f                                  foo\n",
      "disassemble": "\nbulk.0.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n"
    },
    "bulk.1.wasm": {
      "header": "\nbulk.1.wasm:\tfile format wasm 0x1\n\nSections:\n\n     Type start=0x0000000a end=0x0000000e (size=0x00000004) count: 1\n Function start=0x00000010 end=0x00000013 (size=0x00000003) count: 2\n    Table start=0x00000015 end=0x00000019 (size=0x00000004) count: 1\n     Elem start=0x0000001b end=0x00000028 (size=0x0000000d) count: 1\n     Code start=0x0000002a end=0x00000031 (size=0x00000007) count: 2\n",
      "details": "\nbulk.1.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nType[1]:\n - type[0] () -> nil\nFunction[2]:\n - func[0] sig=0\n - func[1] sig=0\nTable[1]:\n - table[0] type=funcref initial=3\nElem[1]:\n - segment[0] flags=5 table=0 count=3\n  - elem[0] = ref.func:0\n  - elem[1] = ref.null funcref\n  - elem[2] = ref.func:1\nCode[2]:\n - func[0] size=2\n - func[1] size=2\n",
      "disassemble": "\nbulk.1.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n00002c func[0]:\n 00002d: 0b                         | end\n00002f func[1]:\n 000030: 0b                         | end\n"
    },
    "bulk.2.wasm": {
      "header": "\nbulk.2.wasm:\tfile format wasm 0x1\n\nSections:\n\n     Type start=0x0000000a end=0x00000016 (size=0x0000000c) count: 2\n Function start=0x00000018 end=0x0000001b (size=0x00000003) count: 2\n   Memory start=0x0000001d end=0x00000020 (size=0x00000003) count: 1\n   Export start=0x00000022 end=0x00000034 (size=0x00000012) count: 2\n     Code start=0x00000036 end=0x0000004b (size=0x00000015) count: 2\n",
      "details": "\nbulk.2.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nType[2]:\n - type[0] (i32, i32, i32) -> nil\n - type[1] (i32) -> i32\nFunction[2]:\n - func[0] sig=0 <fill>\n - func[1] sig=1 <load8_u>\nMemory[1]:\n - memory[0] pages: initial=1\nExport[2]:\n - func[0] <fill> -> \"fill\"\n - func[1] <load8_u> -> \"load8_u\"\nCode[2]:\n - func[0] size=11 <fill>\n - func[1] size=7 <load8_u>\n",
      "disassemble": "\nbulk.2.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n000038 func[0] <fill>:\n 000039: 20 00                      | local.get 0\n 00003b: 20 01                      | local.get 1\n 00003d: 20 02                      | local.get 2\n 00003f: fc 0b 00                   | memory.fill 0\n 000042: 0b                         | end\n000044 func[1] <load8_u>:\n 000045: 20 00                      | local.get 0\n 000047: 2d 00 00                   | i32.load8_u 0 0\n 00004a: 0b                         | end\n"
    },
    "bulk.3.wasm": {
      "header": "\nbulk.3.wasm:\tfile format wasm 0x1\n\nSections:\n\n     Type start=0x0000000a end=0x00000016 (size=0x0000000c) count: 2\n Function start=0x00000018 end=0x0000001b (size=0x00000003) count: 2\n   Memory start=0x0000001d end=0x00000021 (size=0x00000004) count: 1\n   Export start=0x00000023 end=0x00000035 (size=0x00000012) count: 2\n     Code start=0x00000037 end=0x0000004d (size=0x00000016) count: 2\n     Data start=0x0000004f end=0x00000059 (size=0x0000000a) count: 1\n",
      "details": "\nbulk.3.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nType[2]:\n - type[0] (i32, i32, i32) -> nil\n - type[1] (i32) -> i32\nFunction[2]:\n - func[0] sig=0 <copy>\n - func[1] sig=1 <load8_u>\nMemory[1]:\n - memory[0] pages: initial=1 max=1\nExport[2]:\n - func[0] <copy> -> \"copy\"\n - func[1] <load8_u> -> \"load8_u\"\nCode[2]:\n - func[0] size=12 <copy>\n - func[1] size=7 <load8_u>\nData[1]:\n - segment[0] memory=0 size=4 - init i32=0\n  - 0000000: aabb ccdd                                ....\n",
      "disassemble": "\nbulk.3.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n000039 func[0] <copy>:\n 00003a: 20 00                      | local.get 0\n 00003c: 20 01                      | local.get 1\n 00003e: 20 02                      | local.get 2\n 000040: fc 0a 00 00                | memory.copy 0 0\n 000044: 0b                         | end\n000046 func[1] <load8_u>:\n 000047: 20 00                      | local.get 0\n 000049: 2d 00 00                   | i32.load8_u 0 0\n 00004c: 0b                         | end\n"
    },
    "bulk.4.wasm": {
      "header": "\nbulk.4.wasm:\tfile format wasm 0x1\n\nSections:\n\n     Type start=0x0000000a end=0x00000016 (size=0x0000000c) count: 2\n Function start=0x00000018 end=0x0000001b (size=0x00000003) count: 2\n   Memory start=0x0000001d end=0x00000020 (size=0x00000003) count: 1\n   Export start=0x00000022 end=0x00000034 (size=0x00000012) count: 2\nDataCount start=0x00000036 end=0x00000037 (size=0x00000001) count: 1\n     Code start=0x00000039 end=0x0000004f (size=0x00000016) count: 2\n     Data start=0x00000051 end=0x00000058 (size=0x00000007) count: 1\n",
      "details": "\nbulk.4.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nType[2]:\n - type[0] (i32, i32, i32) -> nil\n - type[1] (i32) -> i32\nFunction[2]:\n - func[0] sig=0 <init>\n - func[1] sig=1 <load8_u>\nMemory[1]:\n - memory[0] pages: initial=1\nExport[2]:\n - func[0] <init> -> \"init\"\n - func[1] <load8_u> -> \"load8_u\"\nDataCount:\n - data count: 1\nCode[2]:\n - func[0] size=12 <init>\n - func[1] size=7 <load8_u>\nData[1]:\n - segment[0] passive size=4\n  - 0000000: aabb ccdd                                ....\n",
      "disassemble": "\nbulk.4.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n00003b func[0] <init>:\n 00003c: 20 00                      | local.get 0\n 00003e: 20 01                      | local.get 1\n 000040: 20 02                      | local.get 2\n 000042: fc 08 00 00                | memory.init 0 0\n 000046: 0b                         | end\n000048 func[1] <load8_u>:\n 000049: 20 00                      | local.get 0\n 00004b: 2d 00 00                   | i32.load8_u 0 0\n 00004e: 0b                         | end\n"
    },
    "bulk.5.wasm": {
      "header": "\nbulk.5.wasm:\tfile format wasm 0x1\n\nSections:\n\n     Type start=0x0000000a end=0x00000012 (size=0x00000008) count: 2\n Function start=0x00000014 end=0x00000019 (size=0x00000005) count: 4\n   Memory start=0x0000001b end=0x0000001e (size=0x00000003) count: 1\n   Export start=0x00000020 end=0x0000005b (size=0x0000003b) count: 4\nDataCount start=0x0000005d end=0x0000005e (size=0x00000001) count: 2\n     Code start=0x00000060 end=0x00000087 (size=0x00000027) count: 4\n     Data start=0x00000089 end=0x00000093 (size=0x0000000a) count: 2\n",
      "details": "\nbulk.5.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nType[2]:\n - type[0] () -> nil\n - type[1] (i32) -> nil\nFunction[4]:\n - func[0] sig=0 <drop_passive>\n - func[1] sig=1 <init_passive>\n - func[2] sig=0 <drop_active>\n - func[3] sig=1 <init_active>\nMemory[1]:\n - memory[0] pages: initial=1\nExport[4]:\n - func[0] <drop_passive> -> \"drop_passive\"\n - func[1] <init_passive> -> \"init_passive\"\n - func[2] <drop_active> -> \"drop_active\"\n - func[3] <init_active> -> \"init_active\"\nDataCount:\n - data count: 2\nCode[4]:\n - func[0] size=5 <drop_passive>\n - func[1] size=12 <init_passive>\n - func[2] size=5 <drop_active>\n - func[3] size=12 <init_active>\nData[2]:\n - segment[0] passive size=1\n  - 0000000: 78                                       x\n - segment[1] memory=0 size=1 - init i32=0\n  - 0000000: 78                                       x\n",
      "disassemble": "\nbulk.5.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n000062 func[0] <drop_passive>:\n 000063: fc 09 00                   | data.drop 0\n 000066: 0b                         | end\n000068 func[1] <init_passive>:\n 000069: 41 00                      | i32.const 0\n 00006b: 41 00                      | i32.const 0\n 00006d: 20 00                      | local.get 0\n 00006f: fc 08 00 00                | memory.init 0 0\n 000073: 0b                         | end\n000075 func[2] <drop_active>:\n 000076: fc 09 01                   | data.drop 1\n 000079: 0b                         | end\n00007b func[3] <init_active>:\n 00007c: 41 00                      | i32.const 0\n 00007e: 41 00                      | i32.const 0\n 000080: 20 00                      | local.get 0\n 000082: fc 08 01 00                | memory.init 1 0\n 000086: 0b                         | end\n"
    },
    "bulk.6.wasm": {
      "header": "\nbulk.6.wasm:\tfile format wasm 0x1\n\nSections:\n\n     Type start=0x0000000a end=0x0000000e (size=0x00000004) count: 1\n Function start=0x00000010 end=0x00000012 (size=0x00000002) count: 1\nDataCount start=0x00000014 end=0x00000015 (size=0x00000001) count: 65\n     Code start=0x00000017 end=0x0000001e (size=0x00000007) count: 1\n     Data start=0x00000021 end=0x000000a4 (size=0x00000083) count: 65\n",
      "details": "\nbulk.6.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nType[1]:\n - type[0] () -> nil\nFunction[1]:\n - func[0] sig=0\nDataCount:\n - data count: 65\nCode[1]:\n - func[0] size=5\nData[65]:\n - segment[0] passive size=0\n - segment[1] passive size=0\n - segment[2] passive size=0\n - segment[3] passive size=0\n - segment[4] passive size=0\n - segment[5] passive size=0\n - segment[6] passive size=0\n - segment[7] passive size=0\n - segment[8] passive size=0\n - segment[9] passive size=0\n - segment[10] passive size=0\n - segment[11] passive size=0\n - segment[12] passive size=0\n - segment[13] passive size=0\n - segment[14] passive size=0\n - segment[15] passive size=0\n - segment[16] passive size=0\n - segment[17] passive size=0\n - segment[18] passive size=0\n - segment[19] passive size=0\n - segment[20] passive size=0\n - segment[21] passive size=0\n - segment[22] passive size=0\n - segment[23] passive size=0\n - segment[24] passive size=0\n - segment[25] passive size=0\n - segment[26] passive size=0\n - segment[27] passive size=0\n - segment[28] passive size=0\n - segment[29] passive size=0\n - segment[30] passive size=0\n - segment[31] passive size=0\n - segment[32] passive size=0\n - segment[33] passive size=0\n - segment[34] passive size=0\n - segment[35] passive size=0\n - segment[36] passive size=0\n - segment[37] passive size=0\n - segment[38] passive size=0\n - segment[39] passive size=0\n - segment[40] passive size=0\n - segment[41] passive size=0\n - segment[42] passive size=0\n - segment[43] passive size=0\n - segment[44] passive size=0\n - segment[45] passive size=0\n - segment[46] passive size=0\n - segment[47] passive size=0\n - segment[48] passive size=0\n - segment[49] passive size=0\n - segment[50] passive size=0\n - segment[51] passive size=0\n - segment[52] passive size=0\n - segment[53] passive size=0\n - segment[54] passive size=0\n - segment[55] passive size=0\n - segment[56] passive size=0\n - segment[57] passive size=0\n - segment[58] passive size=0\n - segment[59] passive size=0\n - segment[60] passive size=0\n - segment[61] passive size=0\n - segment[62] passive size=0\n - segment[63] passive size=0\n - segment[64] passive size=0\n",
      "disassemble": "\nbulk.6.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n000019 func[0]:\n 00001a: fc 09 40                   | data.drop 64\n 00001d: 0b                         | end\n"
    },
    "bulk.7.wasm": {
      "header": "\nbulk.7.wasm:\tfile format wasm 0x1\n\nSections:\n\n     Type start=0x0000000a end=0x0000000e (size=0x00000004) count: 1\n Function start=0x00000010 end=0x00000012 (size=0x00000002) count: 1\nDataCount start=0x00000014 end=0x00000015 (size=0x00000001) count: 1\n     Code start=0x00000017 end=0x0000001e (size=0x00000007) count: 1\n     Data start=0x00000020 end=0x0000002a (size=0x0000000a) count: 1\n",
      "details": "\nbulk.7.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nType[1]:\n - type[0] () -> nil\nFunction[1]:\n - func[0] sig=0\nDataCount:\n - data count: 1\nCode[1]:\n - func[0] size=5\nData[1]:\n - segment[0] passive size=7\n  - 0000000: 676f 6f64 6279 65                        goodbye\n",
      "disassemble": "\nbulk.7.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n000019 func[0]:\n 00001a: fc 09 00                   | data.drop 0\n 00001d: 0b                         | end\n"
    },
    "bulk.8.wasm": {
      "header": "\nbulk.8.wasm:\tfile format wasm 0x1\n\nSections:\n\n     Type start=0x0000000a end=0x0000001a (size=0x00000010) count: 3\n Function start=0x0000001c end=0x00000021 (size=0x00000005) count: 4\n    Table start=0x00000023 end=0x00000027 (size=0x00000004) count: 1\n   Export start=0x00000029 end=0x00000038 (size=0x0000000f) count: 2\n     Elem start=0x0000003a end=0x00000042 (size=0x00000008) count: 1\n     Code start=0x00000044 end=0x00000064 (size=0x00000020) count: 4\n",
      "details": "\nbulk.8.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nType[3]:\n - type[0] () -> i32\n - type[1] (i32, i32, i32) -> nil\n - type[2] (i32) -> i32\nFunction[4]:\n - func[0] sig=0\n - func[1] sig=0\n - func[2] sig=1 <init>\n - func[3] sig=2 <call>\nTable[1]:\n - table[0] type=funcref initial=3\nExport[2]:\n - func[2] <init> -> \"init\"\n - func[3] <call> -> \"call\"\nElem[1]:\n - segment[0] flags=1 table=0 count=4\n  - elem[0] = ref.func:0\n  - elem[1] = ref.func:1\n  - elem[2] = ref.func:0\n  - elem[3] = ref.func:1\nCode[4]:\n - func[0] size=4\n - func[1] size=4\n - func[2] size=12 <init>\n - func[3] size=7 <call>\n",
      "disassemble": "\nbulk.8.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n000046 func[0]:\n 000047: 41 00                      | i32.const 0\n 000049: 0b                         | end\n00004b func[1]:\n 00004c: 41 01                      | i32.const 1\n 00004e: 0b                         | end\n000050 func[2] <init>:\n 000051: 20 00                      | local.get 0\n 000053: 20 01                      | local.get 1\n 000055: 20 02                      | local.get 2\n 000057: fc 0c 00 00                | table.init 0 0\n 00005b: 0b                         | end\n00005d func[3] <call>:\n 00005e: 20 00                      | local.get 0\n 000060: 11 00 00                   | call_indirect 0 (type 0)\n 000063: 0b                         | end\n"
    },
    "bulk.9.wasm": {
      "header": "\nbulk.9.wasm:\tfile format wasm 0x1\n\nSections:\n\n     Type start=0x0000000a end=0x00000012 (size=0x00000008) count: 2\n Function start=0x00000014 end=0x0000001a (size=0x00000006) count: 5\n    Table start=0x0000001c end=0x00000020 (size=0x00000004) count: 1\n   Export start=0x00000022 end=0x0000005d (size=0x0000003b) count: 4\n     Elem start=0x0000005f end=0x0000006a (size=0x0000000b) count: 2\n     Code start=0x0000006c end=0x00000096 (size=0x0000002a) count: 5\n",
      "details": "\nbulk.9.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nType[2]:\n - type[0] () -> nil\n - type[1] (i32) -> nil\nFunction[5]:\n - func[0] sig=0\n - func[1] sig=0 <drop_passive>\n - func[2] sig=1 <init_passive>\n - func[3] sig=0 <drop_active>\n - func[4] sig=1 <init_active>\nTable[1]:\n - table[0] type=funcref initial=1\nExport[4]:\n - func[1] <drop_passive> -> \"drop_passive\"\n - func[2] <init_passive> -> \"init_passive\"\n - func[3] <drop_active> -> \"drop_active\"\n - func[4] <init_active> -> \"init_active\"\nElem[2]:\n - segment[0] flags=1 table=0 count=1\n  - elem[0] = ref.func:0\n - segment[1] flags=0 table=0 count=1 - init i32=0\n  - elem[0] = ref.func:0\nCode[5]:\n - func[0] size=2\n - func[1] size=5 <drop_passive>\n - func[2] size=12 <init_passive>\n - func[3] size=5 <drop_active>\n - func[4] size=12 <init_active>\n",
      "disassemble": "\nbulk.9.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n00006e func[0]:\n 00006f: 0b                         | end\n000071 func[1] <drop_passive>:\n 000072: fc 0d 00                   | elem.drop 0\n 000075: 0b                         | end\n000077 func[2] <init_passive>:\n 000078: 41 00                      | i32.const 0\n 00007a: 41 00                      | i32.const 0\n 00007c: 20 00                      | local.get 0\n 00007e: fc 0c 00 00                | table.init 0 0\n 000082: 0b                         | end\n000084 func[3] <drop_active>:\n 000085: fc 0d 01                   | elem.drop 1\n 000088: 0b                         | end\n00008a func[4] <init_active>:\n 00008b: 41 00                      | i32.const 0\n 00008d: 41 00                      | i32.const 0\n 00008f: 20 00                      | local.get 0\n 000091: fc 0c 01 00                | table.init 1 0\n 000095: 0b                         | end\n"
    },
    "bulk.10.wasm": {
      "header": "\nbulk.10.wasm:\tfile format wasm 0x1\n\nSections:\n\n     Type start=0x0000000a end=0x0000000e (size=0x00000004) count: 1\n Function start=0x00000010 end=0x00000012 (size=0x00000002) count: 1\n     Elem start=0x00000015 end=0x000000d9 (size=0x000000c4) count: 65\n     Code start=0x000000db end=0x000000e2 (size=0x00000007) count: 1\n",
      "details": "\nbulk.10.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nType[1]:\n - type[0] () -> nil\nFunction[1]:\n - func[0] sig=0\nElem[65]:\n - segment[0] flags=1 table=0 count=0\n - segment[1] flags=1 table=0 count=0\n - segment[2] flags=1 table=0 count=0\n - segment[3] flags=1 table=0 count=0\n - segment[4] flags=1 table=0 count=0\n - segment[5] flags=1 table=0 count=0\n - segment[6] flags=1 table=0 count=0\n - segment[7] flags=1 table=0 count=0\n - segment[8] flags=1 table=0 count=0\n - segment[9] flags=1 table=0 count=0\n - segment[10] flags=1 table=0 count=0\n - segment[11] flags=1 table=0 count=0\n - segment[12] flags=1 table=0 count=0\n - segment[13] flags=1 table=0 count=0\n - segment[14] flags=1 table=0 count=0\n - segment[15] flags=1 table=0 count=0\n - segment[16] flags=1 table=0 count=0\n - segment[17] flags=1 table=0 count=0\n - segment[18] flags=1 table=0 count=0\n - segment[19] flags=1 table=0 count=0\n - segment[20] flags=1 table=0 count=0\n - segment[21] flags=1 table=0 count=0\n - segment[22] flags=1 table=0 count=0\n - segment[23] flags=1 table=0 count=0\n - segment[24] flags=1 table=0 count=0\n - segment[25] flags=1 table=0 count=0\n - segment[26] flags=1 table=0 count=0\n - segment[27] flags=1 table=0 count=0\n - segment[28] flags=1 table=0 count=0\n - segment[29] flags=1 table=0 count=0\n - segment[30] flags=1 table=0 count=0\n - segment[31] flags=1 table=0 count=0\n - segment[32] flags=1 table=0 count=0\n - segment[33] flags=1 table=0 count=0\n - segment[34] flags=1 table=0 count=0\n - segment[35] flags=1 table=0 count=0\n - segment[36] flags=1 table=0 count=0\n - segment[37] flags=1 table=0 count=0\n - segment[38] flags=1 table=0 count=0\n - segment[39] flags=1 table=0 count=0\n - segment[40] flags=1 table=0 count=0\n - segment[41] flags=1 table=0 count=0\n - segment[42] flags=1 table=0 count=0\n - segment[43] flags=1 table=0 count=0\n - segment[44] flags=1 table=0 count=0\n - segment[45] flags=1 table=0 count=0\n - segment[46] flags=1 table=0 count=0\n - segment[47] flags=1 table=0 count=0\n - segment[48] flags=1 table=0 count=0\n - segment[49] flags=1 table=0 count=0\n - segment[50] flags=1 table=0 count=0\n - segment[51] flags=1 table=0 count=0\n - segment[52] flags=1 table=0 count=0\n - segment[53] flags=1 table=0 count=0\n - segment[54] flags=1 table=0 count=0\n - segment[55] flags=1 table=0 count=0\n - segment[56] flags=1 table=0 count=0\n - segment[57] flags=1 table=0 count=0\n - segment[58] flags=1 table=0 count=0\n - segment[59] flags=1 table=0 count=0\n - segment[60] flags=1 table=0 count=0\n - segment[61] flags=1 table=0 count=0\n - segment[62] flags=1 table=0 count=0\n - segment[63] flags=1 table=0 count=0\n - segment[64] flags=1 table=0 count=0\nCode[1]:\n - func[0] size=5\n",
      "disassemble": "\nbulk.10.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n0000dd func[0]:\n 0000de: fc 0d 40                   | elem.drop 64\n 0000e1: 0b                         | end\n"
    },
    "bulk.11.wasm": {
      "header": "\nbulk.11.wasm:\tfile format wasm 0x1\n\nSections:\n\n     Type start=0x0000000a end=0x0000000e (size=0x00000004) count: 1\n Function start=0x00000010 end=0x00000012 (size=0x00000002) count: 1\n     Elem start=0x00000014 end=0x00000019 (size=0x00000005) count: 1\n     Code start=0x0000001b end=0x00000022 (size=0x00000007) count: 1\n",
      "details": "\nbulk.11.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nType[1]:\n - type[0] () -> nil\nFunction[1]:\n - func[0] sig=0\nElem[1]:\n - segment[0] flags=1 table=0 count=1\n  - elem[0] = ref.func:0\nCode[1]:\n - func[0] size=5\n",
      "disassemble": "\nbulk.11.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n00001d func[0]:\n 00001e: fc 0d 00                   | elem.drop 0\n 000021: 0b                         | end\n"
    },
    "bulk.12.wasm": {
      "header": "\nbulk.12.wasm:\tfile format wasm 0x1\n\nSections:\n\n     Type start=0x0000000a end=0x0000001a (size=0x00000010) count: 3\n Function start=0x0000001c end=0x00000022 (size=0x00000006) count: 5\n    Table start=0x00000024 end=0x00000028 (size=0x00000004) count: 1\n   Export start=0x0000002a end=0x00000039 (size=0x0000000f) count: 2\n     Elem start=0x0000003b end=0x00000044 (size=0x00000009) count: 1\n     Code start=0x00000046 end=0x0000006b (size=0x00000025) count: 5\n",
      "details": "\nbulk.12.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nType[3]:\n - type[0] () -> i32\n - type[1] (i32, i32, i32) -> nil\n - type[2] (i32) -> i32\nFunction[5]:\n - func[0] sig=0\n - func[1] sig=0\n - func[2] sig=0\n - func[3] sig=1 <copy>\n - func[4] sig=2 <call>\nTable[1]:\n - table[0] type=funcref initial=10\nExport[2]:\n - func[3] <copy> -> \"copy\"\n - func[4] <call> -> \"call\"\nElem[1]:\n - segment[0] flags=0 table=0 count=3 - init i32=0\n  - elem[0] = ref.func:0\n  - elem[1] = ref.func:1\n  - elem[2] = ref.func:2\nCode[5]:\n - func[0] size=4\n - func[1] size=4\n - func[2] size=4\n - func[3] size=12 <copy>\n - func[4] size=7 <call>\n",
      "disassemble": "\nbulk.12.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n000048 func[0]:\n 000049: 41 00                      | i32.const 0\n 00004b: 0b                         | end\n00004d func[1]:\n 00004e: 41 01                      | i32.const 1\n 000050: 0b                         | end\n000052 func[2]:\n 000053: 41 02                      | i32.const 2\n 000055: 0b                         | end\n000057 func[3] <copy>:\n 000058: 20 00                      | local.get 0\n 00005a: 20 01                      | local.get 1\n 00005c: 20 02                      | local.get 2\n 00005e: fc 0e 00 00                | table.copy 0 0\n 000062: 0b                         | end\n000064 func[4] <call>:\n 000065: 20 00                      | local.get 0\n 000067: 11 00 00                   | call_indirect 0 (type 0)\n 00006a: 0b                         | end\n"
    }
  }
}
