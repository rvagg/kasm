{
  "bin": {
    "call.0.wasm": "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",
    "call.1.wasm": "AGFzbQEAAAABBAFgAAADAwIAAAoKAgUAEAFFCwIACw==",
    "call.10.wasm": "AGFzbQEAAAABCQJgAABgAnx/AAMDAgABChQCDwBBAUQAAAAAAADwPxABCwIACw==",
    "call.11.wasm": "AGFzbQEAAAABCAJgAABgAX8AAwMCAAEKDAIHAAJAEAELCwIACw==",
    "call.12.wasm": "AGFzbQEAAAABCQJgAABgAn9/AAMDAgABCg4CCQACQEEAEAELCwIACw==",
    "call.13.wasm": "AGFzbQEAAAABCAJgAABgAX8AAwMCAAEKDAIHAANAEAELCwIACw==",
    "call.14.wasm": "AGFzbQEAAAABCQJgAABgAn9/AAMDAgABCg4CCQADQEEAEAELCwIACw==",
    "call.15.wasm": "AGFzbQEAAAABCAJgAABgAX8AAwMCAAEKDgIJAEEABEAQAQsLAgAL",
    "call.16.wasm": "AGFzbQEAAAABCQJgAABgAn9/AAMDAgABChACCwBBAARAQQAQAQsLAgAL",
    "call.17.wasm": "AGFzbQEAAAABBAFgAAADAgEACgYBBAAQAQs=",
    "call.18.wasm": "AGFzbQEAAAABBAFgAAADAgEACgoBCAAQlJjb4gML",
    "call.2.wasm": "AGFzbQEAAAABCAJgAABgAAF+AwMCAAEKDAIFABABRQsEAEIBCw==",
    "call.3.wasm": "AGFzbQEAAAABCAJgAABgAX8AAwMCAAEKCQIEABABCwIACw==",
    "call.4.wasm": "AGFzbQEAAAABCQJgAABgAnx/AAMDAgABCgkCBAAQAQsCAAs=",
    "call.5.wasm": "AGFzbQEAAAABBAFgAAADAwIAAAoLAgYAQQEQAQsCAAs=",
    "call.6.wasm": "AGFzbQEAAAABBAFgAAADAwIAAAoUAg8ARAAAAAAAAABAQQEQAQsCAAs=",
    "call.7.wasm": "AGFzbQEAAAABCQJgAABgAn9/AAMDAgABCgwCBwABQQEQAQsCAAs=",
    "call.8.wasm": "AGFzbQEAAAABCQJgAABgAn9/AAMDAgABCgwCBwBBAQEQAQsCAAs=",
    "call.9.wasm": "AGFzbQEAAAABCQJgAABgAn98AAMDAgABChQCDwBEAAAAAAAA8D9BARABCwIACw=="
  },
  "spec": {"source_filename": "/home/rvagg/git/webassembly/spec/test/core/call.wast",
 "commands": [
  {"type": "module", "line": 3, "filename": "call.0.wasm"}, 
  {"type": "assert_return", "line": 285, "action": {"type": "invoke", "field": "type-i32", "args": []}, "expected": [{"type": "i32", "value": "306"}]}, 
  {"type": "assert_return", "line": 286, "action": {"type": "invoke", "field": "type-i64", "args": []}, "expected": [{"type": "i64", "value": "356"}]}, 
  {"type": "assert_return", "line": 287, "action": {"type": "invoke", "field": "type-f32", "args": []}, "expected": [{"type": "f32", "value": "1165172736"}]}, 
  {"type": "assert_return", "line": 288, "action": {"type": "invoke", "field": "type-f64", "args": []}, "expected": [{"type": "f64", "value": "4660882566700597248"}]}, 
  {"type": "assert_return", "line": 289, "action": {"type": "invoke", "field": "type-i32-i64", "args": []}, "expected": [{"type": "i32", "value": "306"}, {"type": "i64", "value": "356"}]}, 
  {"type": "assert_return", "line": 291, "action": {"type": "invoke", "field": "type-first-i32", "args": []}, "expected": [{"type": "i32", "value": "32"}]}, 
  {"type": "assert_return", "line": 292, "action": {"type": "invoke", "field": "type-first-i64", "args": []}, "expected": [{"type": "i64", "value": "64"}]}, 
  {"type": "assert_return", "line": 293, "action": {"type": "invoke", "field": "type-first-f32", "args": []}, "expected": [{"type": "f32", "value": "1068037571"}]}, 
  {"type": "assert_return", "line": 294, "action": {"type": "invoke", "field": "type-first-f64", "args": []}, "expected": [{"type": "f64", "value": "4610064722561534525"}]}, 
  {"type": "assert_return", "line": 296, "action": {"type": "invoke", "field": "type-second-i32", "args": []}, "expected": [{"type": "i32", "value": "32"}]}, 
  {"type": "assert_return", "line": 297, "action": {"type": "invoke", "field": "type-second-i64", "args": []}, "expected": [{"type": "i64", "value": "64"}]}, 
  {"type": "assert_return", "line": 298, "action": {"type": "invoke", "field": "type-second-f32", "args": []}, "expected": [{"type": "f32", "value": "1107296256"}]}, 
  {"type": "assert_return", "line": 299, "action": {"type": "invoke", "field": "type-second-f64", "args": []}, "expected": [{"type": "f64", "value": "4634211053438658150"}]}, 
  {"type": "assert_return", "line": 301, "action": {"type": "invoke", "field": "type-all-i32-f64", "args": []}, "expected": [{"type": "i32", "value": "32"}, {"type": "f64", "value": "4610064722561534525"}]}, 
  {"type": "assert_return", "line": 302, "action": {"type": "invoke", "field": "type-all-i32-i32", "args": []}, "expected": [{"type": "i32", "value": "2"}, {"type": "i32", "value": "1"}]}, 
  {"type": "assert_return", "line": 303, "action": {"type": "invoke", "field": "type-all-f32-f64", "args": []}, "expected": [{"type": "f64", "value": "4611686018427387904"}, {"type": "f32", "value": "1065353216"}]}, 
  {"type": "assert_return", "line": 304, "action": {"type": "invoke", "field": "type-all-f64-i32", "args": []}, "expected": [{"type": "i32", "value": "2"}, {"type": "f64", "value": "4607182418800017408"}]}, 
  {"type": "assert_return", "line": 306, "action": {"type": "invoke", "field": "as-binary-all-operands", "args": []}, "expected": [{"type": "i32", "value": "7"}]}, 
  {"type": "assert_return", "line": 307, "action": {"type": "invoke", "field": "as-mixed-operands", "args": []}, "expected": [{"type": "i32", "value": "32"}]}, 
  {"type": "assert_return", "line": 308, "action": {"type": "invoke", "field": "as-call-all-operands", "args": []}, "expected": [{"type": "i32", "value": "3"}, {"type": "i32", "value": "4"}]}, 
  {"type": "assert_return", "line": 310, "action": {"type": "invoke", "field": "fac", "args": [{"type": "i64", "value": "0"}]}, "expected": [{"type": "i64", "value": "1"}]}, 
  {"type": "assert_return", "line": 311, "action": {"type": "invoke", "field": "fac", "args": [{"type": "i64", "value": "1"}]}, "expected": [{"type": "i64", "value": "1"}]}, 
  {"type": "assert_return", "line": 312, "action": {"type": "invoke", "field": "fac", "args": [{"type": "i64", "value": "5"}]}, "expected": [{"type": "i64", "value": "120"}]}, 
  {"type": "assert_return", "line": 313, "action": {"type": "invoke", "field": "fac", "args": [{"type": "i64", "value": "25"}]}, "expected": [{"type": "i64", "value": "7034535277573963776"}]}, 
  {"type": "assert_return", "line": 314, "action": {"type": "invoke", "field": "fac-acc", "args": [{"type": "i64", "value": "0"}, {"type": "i64", "value": "1"}]}, "expected": [{"type": "i64", "value": "1"}]}, 
  {"type": "assert_return", "line": 315, "action": {"type": "invoke", "field": "fac-acc", "args": [{"type": "i64", "value": "1"}, {"type": "i64", "value": "1"}]}, "expected": [{"type": "i64", "value": "1"}]}, 
  {"type": "assert_return", "line": 316, "action": {"type": "invoke", "field": "fac-acc", "args": [{"type": "i64", "value": "5"}, {"type": "i64", "value": "1"}]}, "expected": [{"type": "i64", "value": "120"}]}, 
  {"type": "assert_return", "line": 318, "action": {"type": "invoke", "field": "fac-acc", "args": [{"type": "i64", "value": "25"}, {"type": "i64", "value": "1"}]}, "expected": [{"type": "i64", "value": "7034535277573963776"}]}, 
  {"type": "assert_return", "line": 322, "action": {"type": "invoke", "field": "fib", "args": [{"type": "i64", "value": "0"}]}, "expected": [{"type": "i64", "value": "1"}]}, 
  {"type": "assert_return", "line": 323, "action": {"type": "invoke", "field": "fib", "args": [{"type": "i64", "value": "1"}]}, "expected": [{"type": "i64", "value": "1"}]}, 
  {"type": "assert_return", "line": 324, "action": {"type": "invoke", "field": "fib", "args": [{"type": "i64", "value": "2"}]}, "expected": [{"type": "i64", "value": "2"}]}, 
  {"type": "assert_return", "line": 325, "action": {"type": "invoke", "field": "fib", "args": [{"type": "i64", "value": "5"}]}, "expected": [{"type": "i64", "value": "8"}]}, 
  {"type": "assert_return", "line": 326, "action": {"type": "invoke", "field": "fib", "args": [{"type": "i64", "value": "20"}]}, "expected": [{"type": "i64", "value": "10946"}]}, 
  {"type": "assert_return", "line": 328, "action": {"type": "invoke", "field": "even", "args": [{"type": "i64", "value": "0"}]}, "expected": [{"type": "i32", "value": "44"}]}, 
  {"type": "assert_return", "line": 329, "action": {"type": "invoke", "field": "even", "args": [{"type": "i64", "value": "1"}]}, "expected": [{"type": "i32", "value": "99"}]}, 
  {"type": "assert_return", "line": 330, "action": {"type": "invoke", "field": "even", "args": [{"type": "i64", "value": "100"}]}, "expected": [{"type": "i32", "value": "44"}]}, 
  {"type": "assert_return", "line": 331, "action": {"type": "invoke", "field": "even", "args": [{"type": "i64", "value": "77"}]}, "expected": [{"type": "i32", "value": "99"}]}, 
  {"type": "assert_return", "line": 332, "action": {"type": "invoke", "field": "odd", "args": [{"type": "i64", "value": "0"}]}, "expected": [{"type": "i32", "value": "99"}]}, 
  {"type": "assert_return", "line": 333, "action": {"type": "invoke", "field": "odd", "args": [{"type": "i64", "value": "1"}]}, "expected": [{"type": "i32", "value": "44"}]}, 
  {"type": "assert_return", "line": 334, "action": {"type": "invoke", "field": "odd", "args": [{"type": "i64", "value": "200"}]}, "expected": [{"type": "i32", "value": "99"}]}, 
  {"type": "assert_return", "line": 335, "action": {"type": "invoke", "field": "odd", "args": [{"type": "i64", "value": "77"}]}, "expected": [{"type": "i32", "value": "44"}]}, 
  {"type": "assert_exhaustion", "line": 337, "action": {"type": "invoke", "field": "runaway", "args": []}, "text": "call stack exhausted", "expected": []}, 
  {"type": "assert_exhaustion", "line": 338, "action": {"type": "invoke", "field": "mutual-runaway", "args": []}, "text": "call stack exhausted", "expected": []}, 
  {"type": "assert_return", "line": 340, "action": {"type": "invoke", "field": "as-select-first", "args": []}, "expected": [{"type": "i32", "value": "306"}]}, 
  {"type": "assert_return", "line": 341, "action": {"type": "invoke", "field": "as-select-mid", "args": []}, "expected": [{"type": "i32", "value": "2"}]}, 
  {"type": "assert_return", "line": 342, "action": {"type": "invoke", "field": "as-select-last", "args": []}, "expected": [{"type": "i32", "value": "2"}]}, 
  {"type": "assert_return", "line": 344, "action": {"type": "invoke", "field": "as-if-condition", "args": []}, "expected": [{"type": "i32", "value": "1"}]}, 
  {"type": "assert_return", "line": 346, "action": {"type": "invoke", "field": "as-br_if-first", "args": []}, "expected": [{"type": "i32", "value": "306"}]}, 
  {"type": "assert_return", "line": 347, "action": {"type": "invoke", "field": "as-br_if-last", "args": []}, "expected": [{"type": "i32", "value": "2"}]}, 
  {"type": "assert_return", "line": 349, "action": {"type": "invoke", "field": "as-br_table-first", "args": []}, "expected": [{"type": "i32", "value": "306"}]}, 
  {"type": "assert_return", "line": 350, "action": {"type": "invoke", "field": "as-br_table-last", "args": []}, "expected": [{"type": "i32", "value": "2"}]}, 
  {"type": "assert_return", "line": 352, "action": {"type": "invoke", "field": "as-call_indirect-first", "args": []}, "expected": [{"type": "i32", "value": "306"}]}, 
  {"type": "assert_return", "line": 353, "action": {"type": "invoke", "field": "as-call_indirect-mid", "args": []}, "expected": [{"type": "i32", "value": "2"}]}, 
  {"type": "assert_trap", "line": 354, "action": {"type": "invoke", "field": "as-call_indirect-last", "args": []}, "text": "undefined element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_return", "line": 356, "action": {"type": "invoke", "field": "as-store-first", "args": []}, "expected": []}, 
  {"type": "assert_return", "line": 357, "action": {"type": "invoke", "field": "as-store-last", "args": []}, "expected": []}, 
  {"type": "assert_return", "line": 359, "action": {"type": "invoke", "field": "as-memory.grow-value", "args": []}, "expected": [{"type": "i32", "value": "1"}]}, 
  {"type": "assert_return", "line": 360, "action": {"type": "invoke", "field": "as-return-value", "args": []}, "expected": [{"type": "i32", "value": "306"}]}, 
  {"type": "assert_return", "line": 361, "action": {"type": "invoke", "field": "as-drop-operand", "args": []}, "expected": []}, 
  {"type": "assert_return", "line": 362, "action": {"type": "invoke", "field": "as-br-value", "args": []}, "expected": [{"type": "i32", "value": "306"}]}, 
  {"type": "assert_return", "line": 363, "action": {"type": "invoke", "field": "as-local.set-value", "args": []}, "expected": [{"type": "i32", "value": "306"}]}, 
  {"type": "assert_return", "line": 364, "action": {"type": "invoke", "field": "as-local.tee-value", "args": []}, "expected": [{"type": "i32", "value": "306"}]}, 
  {"type": "assert_return", "line": 365, "action": {"type": "invoke", "field": "as-global.set-value", "args": []}, "expected": [{"type": "i32", "value": "306"}]}, 
  {"type": "assert_return", "line": 366, "action": {"type": "invoke", "field": "as-load-operand", "args": []}, "expected": [{"type": "i32", "value": "1"}]}, 
  {"type": "assert_return", "line": 368, "action": {"type": "invoke", "field": "as-unary-operand", "args": []}, "expected": [{"type": "f32", "value": "0"}]}, 
  {"type": "assert_return", "line": 369, "action": {"type": "invoke", "field": "as-binary-left", "args": []}, "expected": [{"type": "i32", "value": "11"}]}, 
  {"type": "assert_return", "line": 370, "action": {"type": "invoke", "field": "as-binary-right", "args": []}, "expected": [{"type": "i32", "value": "9"}]}, 
  {"type": "assert_return", "line": 371, "action": {"type": "invoke", "field": "as-test-operand", "args": []}, "expected": [{"type": "i32", "value": "0"}]}, 
  {"type": "assert_return", "line": 372, "action": {"type": "invoke", "field": "as-compare-left", "args": []}, "expected": [{"type": "i32", "value": "1"}]}, 
  {"type": "assert_return", "line": 373, "action": {"type": "invoke", "field": "as-compare-right", "args": []}, "expected": [{"type": "i32", "value": "1"}]}, 
  {"type": "assert_return", "line": 374, "action": {"type": "invoke", "field": "as-convert-operand", "args": []}, "expected": [{"type": "i64", "value": "1"}]}, 
  {"type": "assert_return", "line": 376, "action": {"type": "invoke", "field": "return-from-long-argument-list", "args": [{"type": "i32", "value": "42"}]}, "expected": [{"type": "i32", "value": "42"}]}, 
  {"type": "assert_invalid", "line": 381, "filename": "call.1.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 388, "filename": "call.2.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 396, "filename": "call.3.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 403, "filename": "call.4.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 410, "filename": "call.5.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 417, "filename": "call.6.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 425, "filename": "call.7.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 432, "filename": "call.8.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 439, "filename": "call.9.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 446, "filename": "call.10.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 454, "filename": "call.11.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 463, "filename": "call.12.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 472, "filename": "call.13.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 481, "filename": "call.14.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 490, "filename": "call.15.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 499, "filename": "call.16.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 512, "filename": "call.17.wasm", "text": "unknown function", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 516, "filename": "call.18.wasm", "text": "unknown function", "module_type": "binary"}]},
  "code": [
    "(module \n  (func $const-i32 (result i32) (i32.const 0x132))\n  (func $const-i64 (result i64) (i64.const 0x164))\n  (func $const-f32 (result f32) (f32.const 0xf32))\n  (func $const-f64 (result f64) (f64.const 0xf64))\n  (func $const-i32-i64 (result i32 i64) (i32.const 0x132) (i64.const 0x164))\n  (func $id-i32 (param i32) (result i32) (local.get 0))\n  (func $id-i64 (param i64) (result i64) (local.get 0))\n  (func $id-f32 (param f32) (result f32) (local.get 0))\n  (func $id-f64 (param f64) (result f64) (local.get 0))\n  (func $id-i32-f64 (param i32 f64) (result i32 f64) (local.get 0) (local.get 1) )\n  (func $swap-i32-i32 (param i32 i32) (result i32 i32) (local.get 1) (local.get 0) )\n  (func $swap-f32-f64 (param f32 f64) (result f64 f32) (local.get 1) (local.get 0) )\n  (func $swap-f64-i32 (param f64 i32) (result i32 f64) (local.get 1) (local.get 0) )\n  (func $f32-i32 (param f32 i32) (result i32) (local.get 1))\n  (func $i32-i64 (param i32 i64) (result i64) (local.get 1))\n  (func $f64-f32 (param f64 f32) (result f32) (local.get 1))\n  (func $i64-f64 (param i64 f64) (result f64) (local.get 1))\n  (func (export \"type-i32\") (result i32) (call $const-i32))\n  (func (export \"type-i64\") (result i64) (call $const-i64))\n  (func (export \"type-f32\") (result f32) (call $const-f32))\n  (func (export \"type-f64\") (result f64) (call $const-f64))\n  (func (export \"type-i32-i64\") (result i32 i64) (call $const-i32-i64))\n  (func (export \"type-first-i32\") (result i32) (call $id-i32 (i32.const 32)))\n  (func (export \"type-first-i64\") (result i64) (call $id-i64 (i64.const 64)))\n  (func (export \"type-first-f32\") (result f32) (call $id-f32 (f32.const 1.32)))\n  (func (export \"type-first-f64\") (result f64) (call $id-f64 (f64.const 1.64)))\n  (func (export \"type-second-i32\") (result i32) (call $f32-i32 (f32.const 32.1) (i32.const 32)) )\n  (func (export \"type-second-i64\") (result i64) (call $i32-i64 (i32.const 32) (i64.const 64)) )\n  (func (export \"type-second-f32\") (result f32) (call $f64-f32 (f64.const 64) (f32.const 32)) )\n  (func (export \"type-second-f64\") (result f64) (call $i64-f64 (i64.const 64) (f64.const 64.1)) )\n  (func (export \"type-all-i32-f64\") (result i32 f64) (call $id-i32-f64 (i32.const 32) (f64.const 1.64)) )\n  (func (export \"type-all-i32-i32\") (result i32 i32) (call $swap-i32-i32 (i32.const 1) (i32.const 2)) )\n  (func (export \"type-all-f32-f64\") (result f64 f32) (call $swap-f32-f64 (f32.const 1) (f64.const 2)) )\n  (func (export \"type-all-f64-i32\") (result i32 f64) (call $swap-f64-i32 (f64.const 1) (i32.const 2)) )\n  (func (export \"as-binary-all-operands\") (result i32) (i32.add (call $swap-i32-i32 (i32.const 3) (i32.const 4))) )\n  (func (export \"as-mixed-operands\") (result i32) (call $swap-i32-i32 (i32.const 3) (i32.const 4)) (i32.const 5) (i32.add) (i32.mul) )\n  (func (export \"as-call-all-operands\") (result i32 i32) (call $swap-i32-i32 (call $swap-i32-i32 (i32.const 3) (i32.const 4))) )\n  (func $fac (export \"fac\") (param i64) (result i64) (if (result i64) (i64.eqz (local.get 0)) (then (i64.const 1)) (else (i64.mul (local.get 0) (call $fac (i64.sub (local.get 0) (i64.const 1))) ) ) ) )\n  (func $fac-acc (export \"fac-acc\") (param i64 i64) (result i64) (if (result i64) (i64.eqz (local.get 0)) (then (local.get 1)) (else (call $fac-acc (i64.sub (local.get 0) (i64.const 1)) (i64.mul (local.get 0) (local.get 1)) ) ) ) )\n  (func $fib (export \"fib\") (param i64) (result i64) (if (result i64) (i64.le_u (local.get 0) (i64.const 1)) (then (i64.const 1)) (else (i64.add (call $fib (i64.sub (local.get 0) (i64.const 2))) (call $fib (i64.sub (local.get 0) (i64.const 1))) ) ) ) )\n  (func $even (export \"even\") (param i64) (result i32) (if (result i32) (i64.eqz (local.get 0)) (then (i32.const 44)) (else (call $odd (i64.sub (local.get 0) (i64.const 1)))) ) )\n  (func $odd (export \"odd\") (param i64) (result i32) (if (result i32) (i64.eqz (local.get 0)) (then (i32.const 99)) (else (call $even (i64.sub (local.get 0) (i64.const 1)))) ) )\n  (func $runaway (export \"runaway\") (call $runaway))\n  (func $mutual-runaway1 (export \"mutual-runaway\") (call $mutual-runaway2))\n  (func $mutual-runaway2 (call $mutual-runaway1)) (memory 1)\n  (func (export \"as-select-first\") (result i32) (select (call $const-i32) (i32.const 2) (i32.const 3)) )\n  (func (export \"as-select-mid\") (result i32) (select (i32.const 2) (call $const-i32) (i32.const 3)) )\n  (func (export \"as-select-last\") (result i32) (select (i32.const 2) (i32.const 3) (call $const-i32)) )\n  (func (export \"as-if-condition\") (result i32) (if (result i32) (call $const-i32) (then (i32.const 1)) (else (i32.const 2))) )\n  (func (export \"as-br_if-first\") (result i32) (block (result i32) (br_if 0 (call $const-i32) (i32.const 2))) )\n  (func (export \"as-br_if-last\") (result i32) (block (result i32) (br_if 0 (i32.const 2) (call $const-i32))) )\n  (func (export \"as-br_table-first\") (result i32) (block (result i32) (call $const-i32) (i32.const 2) (br_table 0 0)) )\n  (func (export \"as-br_table-last\") (result i32) (block (result i32) (i32.const 2) (call $const-i32) (br_table 0 0)) )\n  (func $ (param i32 i32) (result i32) (local.get 0)) (type $check (func (param i32 i32) (result i32))) (table funcref (elem $func))\n  (func (export \"as-call_indirect-first\") (result i32) (block (result i32) (call_indirect (type $check) (call $const-i32) (i32.const 2) (i32.const 0) ) ) )\n  (func (export \"as-call_indirect-mid\") (result i32) (block (result i32) (call_indirect (type $check) (i32.const 2) (call $const-i32) (i32.const 0) ) ) )\n  (func (export \"as-call_indirect-last\") (result i32) (block (result i32) (call_indirect (type $check) (i32.const 1) (i32.const 2) (call $const-i32) ) ) )\n  (func (export \"as-store-first\") (call $const-i32) (i32.const 1) (i32.store) )\n  (func (export \"as-store-last\") (i32.const 10) (call $const-i32) (i32.store) )\n  (func (export \"as-memory.grow-value\") (result i32) (memory.grow (call $const-i32)) )\n  (func (export \"as-return-value\") (result i32) (call $const-i32) (return) )\n  (func (export \"as-drop-operand\") (call $const-i32) (drop) )\n  (func (export \"as-br-value\") (result i32) (block (result i32) (br 0 (call $const-i32))) )\n  (func (export \"as-local.set-value\") (result i32) (local i32) (local.set 0 (call $const-i32)) (local.get 0) )\n  (func (export \"as-local.tee-value\") (result i32) (local i32) (local.tee 0 (call $const-i32)) ) (global $a (mut i32) (i32.const 10))\n  (func (export \"as-global.set-value\") (result i32) (global.set $a (call $const-i32)) (global.get $a) )\n  (func (export \"as-load-operand\") (result i32) (i32.load (call $const-i32)) )\n  (func $dummy (param i32) (result i32) (local.get 0))\n  (func $du (param f32) (result f32) (local.get 0))\n  (func (export \"as-unary-operand\") (result f32) (block (result f32) (f32.sqrt (call $du (f32.const 0x0p+0)))) )\n  (func (export \"as-binary-left\") (result i32) (block (result i32) (i32.add (call $dummy (i32.const 1)) (i32.const 10))) )\n  (func (export \"as-binary-right\") (result i32) (block (result i32) (i32.sub (i32.const 10) (call $dummy (i32.const 1)))) )\n  (func (export \"as-test-operand\") (result i32) (block (result i32) (i32.eqz (call $dummy (i32.const 1)))) )\n  (func (export \"as-compare-left\") (result i32) (block (result i32) (i32.le_u (call $dummy (i32.const 1)) (i32.const 10))) )\n  (func (export \"as-compare-right\") (result i32) (block (result i32) (i32.ne (i32.const 10) (call $dummy (i32.const 1)))) )\n  (func (export \"as-convert-operand\") (result i64) (block (result i64) (i64.extend_i32_s (call $dummy (i32.const 1)))) )\n  (func $return-from-long-argument-list-helper (param f32 i32 i32 f64 f32 f32 f32 f64 f32 i32 i32 f32 f64 i64 i64 i32 i64 i64 f32 i64 i64 i64 i32 f32 f32 f32 f64 f32 i32 i64 f32 f64 f64 f32 i32 f32 f32 f64 i64 f64 i32 i64 f32 f64 i32 i32 i32 i64 f64 i32 i64 i64 f64 f64 f64 f64 f64 f64 i32 f32 f64 f64 i32 i64 f32 f32 f32 i32 f64 f64 f64 f64 f64 f32 i64 i64 i32 i32 i32 f32 f64 i32 i64 f32 f32 f32 i32 i32 f32 f64 i64 f32 f64 f32 f32 f32 i32 f32 i64 i32) (result i32) (local.get 99) )\n  (func (export \"return-from-long-argument-list\") (param i32) (result i32) (call $return-from-long-argument-list-helper (f32.const 0) (i32.const 0) (i32.const 0) (f64.const 0) (f32.const 0) (f32.const 0) (f32.const 0) (f64.const 0) (f32.const 0) (i32.const 0) (i32.const 0) (f32.const 0) (f64.const 0) (i64.const 0) (i64.const 0) (i32.const 0) (i64.const 0) (i64.const 0) (f32.const 0) (i64.const 0) (i64.const 0) (i64.const 0) (i32.const 0) (f32.const 0) (f32.const 0) (f32.const 0) (f64.const 0) (f32.const 0) (i32.const 0) (i64.const 0) (f32.const 0) (f64.const 0) (f64.const 0) (f32.const 0) (i32.const 0) (f32.const 0) (f32.const 0) (f64.const 0) (i64.const 0) (f64.const 0) (i32.const 0) (i64.const 0) (f32.const 0) (f64.const 0) (i32.const 0) (i32.const 0) (i32.const 0) (i64.const 0) (f64.const 0) (i32.const 0) (i64.const 0) (i64.const 0) (f64.const 0) (f64.const 0) (f64.const 0) (f64.const 0) (f64.const 0) (f64.const 0) (i32.const 0) (f32.const 0) (f64.const 0) (f64.const 0) (i32.const 0) (i64.const 0) (f32.const 0) (f32.const 0) (f32.const 0) (i32.const 0) (f64.const 0) (f64.const 0) (f64.const 0) (f64.const 0) (f64.const 0) (f32.const 0) (i64.const 0) (i64.const 0) (i32.const 0) (i32.const 0) (i32.const 0) (f32.const 0) (f64.const 0) (i32.const 0) (i64.const 0) (f32.const 0) (f32.const 0) (f32.const 0) (i32.const 0) (i32.const 0) (f32.const 0) (f64.const 0) (i64.const 0) (f32.const 0) (f64.const 0) (f32.const 0) (f32.const 0) (f32.const 0) (i32.const 0) (f32.const 0) (i64.const 0) (local.get 0)) ))",
    "(assert_return (invoke \"type-i32\") (i32.const 0x132))",
    "(assert_return (invoke \"type-i64\") (i64.const 0x164))",
    "(assert_return (invoke \"type-f32\") (f32.const 0xf32))",
    "(assert_return (invoke \"type-f64\") (f64.const 0xf64))",
    "(assert_return (invoke \"type-i32-i64\") (i32.const 0x132) (i64.const 0x164))",
    "(assert_return (invoke \"type-first-i32\") (i32.const 32))",
    "(assert_return (invoke \"type-first-i64\") (i64.const 64))",
    "(assert_return (invoke \"type-first-f32\") (f32.const 1.32))",
    "(assert_return (invoke \"type-first-f64\") (f64.const 1.64))",
    "(assert_return (invoke \"type-second-i32\") (i32.const 32))",
    "(assert_return (invoke \"type-second-i64\") (i64.const 64))",
    "(assert_return (invoke \"type-second-f32\") (f32.const 32))",
    "(assert_return (invoke \"type-second-f64\") (f64.const 64.1))",
    "(assert_return (invoke \"type-all-i32-f64\") (i32.const 32) (f64.const 1.64))",
    "(assert_return (invoke \"type-all-i32-i32\") (i32.const 2) (i32.const 1))",
    "(assert_return (invoke \"type-all-f32-f64\") (f64.const 2) (f32.const 1))",
    "(assert_return (invoke \"type-all-f64-i32\") (i32.const 2) (f64.const 1))",
    "(assert_return (invoke \"as-binary-all-operands\") (i32.const 7))",
    "(assert_return (invoke \"as-mixed-operands\") (i32.const 32))",
    "(assert_return (invoke \"as-call-all-operands\") (i32.const 3) (i32.const 4))",
    "(assert_return (invoke \"fac\" (i64.const 0)) (i64.const 1))",
    "(assert_return (invoke \"fac\" (i64.const 1)) (i64.const 1))",
    "(assert_return (invoke \"fac\" (i64.const 5)) (i64.const 120))",
    "(assert_return (invoke \"fac\" (i64.const 25)) (i64.const 7034535277573963776))",
    "(assert_return (invoke \"fac-acc\" (i64.const 0) (i64.const 1)) (i64.const 1))",
    "(assert_return (invoke \"fac-acc\" (i64.const 1) (i64.const 1)) (i64.const 1))",
    "(assert_return (invoke \"fac-acc\" (i64.const 5) (i64.const 1)) (i64.const 120))",
    "(assert_return (invoke \"fac-acc\" (i64.const 25) (i64.const 1)) (i64.const 7034535277573963776))",
    "(assert_return (invoke \"fib\" (i64.const 0)) (i64.const 1))",
    "(assert_return (invoke \"fib\" (i64.const 1)) (i64.const 1))",
    "(assert_return (invoke \"fib\" (i64.const 2)) (i64.const 2))",
    "(assert_return (invoke \"fib\" (i64.const 5)) (i64.const 8))",
    "(assert_return (invoke \"fib\" (i64.const 20)) (i64.const 10946))",
    "(assert_return (invoke \"even\" (i64.const 0)) (i32.const 44))",
    "(assert_return (invoke \"even\" (i64.const 1)) (i32.const 99))",
    "(assert_return (invoke \"even\" (i64.const 100)) (i32.const 44))",
    "(assert_return (invoke \"even\" (i64.const 77)) (i32.const 99))",
    "(assert_return (invoke \"odd\" (i64.const 0)) (i32.const 99))",
    "(assert_return (invoke \"odd\" (i64.const 1)) (i32.const 44))",
    "(assert_return (invoke \"odd\" (i64.const 200)) (i32.const 99))",
    "(assert_return (invoke \"odd\" (i64.const 77)) (i32.const 44))",
    "(assert_exhaustion (invoke \"runaway\") \"call stack exhausted\")",
    "(assert_exhaustion (invoke \"mutual-runaway\") \"call stack exhausted\")",
    "(assert_return (invoke \"as-select-first\") (i32.const 0x132))",
    "(assert_return (invoke \"as-select-mid\") (i32.const 2))",
    "(assert_return (invoke \"as-select-last\") (i32.const 2))",
    "(assert_return (invoke \"as-if-condition\") (i32.const 1))",
    "(assert_return (invoke \"as-br_if-first\") (i32.const 0x132))",
    "(assert_return (invoke \"as-br_if-last\") (i32.const 2))",
    "(assert_return (invoke \"as-br_table-first\") (i32.const 0x132))",
    "(assert_return (invoke \"as-br_table-last\") (i32.const 2))",
    "(assert_return (invoke \"as-call_indirect-first\") (i32.const 0x132))",
    "(assert_return (invoke \"as-call_indirect-mid\") (i32.const 2))",
    "(assert_trap (invoke \"as-call_indirect-last\") \"undefined element\")",
    "(assert_return (invoke \"as-store-first\"))",
    "(assert_return (invoke \"as-store-last\"))",
    "(assert_return (invoke \"as-memory.grow-value\") (i32.const 1))",
    "(assert_return (invoke \"as-return-value\") (i32.const 0x132))",
    "(assert_return (invoke \"as-drop-operand\"))",
    "(assert_return (invoke \"as-br-value\") (i32.const 0x132))",
    "(assert_return (invoke \"as-local.set-value\") (i32.const 0x132))",
    "(assert_return (invoke \"as-local.tee-value\") (i32.const 0x132))",
    "(assert_return (invoke \"as-global.set-value\") (i32.const 0x132))",
    "(assert_return (invoke \"as-load-operand\") (i32.const 1))",
    "(assert_return (invoke \"as-unary-operand\") (f32.const 0x0p+0))",
    "(assert_return (invoke \"as-binary-left\") (i32.const 11))",
    "(assert_return (invoke \"as-binary-right\") (i32.const 9))",
    "(assert_return (invoke \"as-test-operand\") (i32.const 0))",
    "(assert_return (invoke \"as-compare-left\") (i32.const 1))",
    "(assert_return (invoke \"as-compare-right\") (i32.const 1))",
    "(assert_return (invoke \"as-convert-operand\") (i64.const 1))",
    "(assert_return (invoke \"return-from-long-argument-list\" (i32.const 42)) (i32.const 42))",
    "(assert_invalid (module (func $type-void-vs-num (i32.eqz (call 1))) (func) ) \"type mismatch\")",
    "(assert_invalid (module (func $type-num-vs-num (i32.eqz (call 1))) (func (result i64) (i64.const 1)) ) \"type mismatch\")",
    "(assert_invalid (module (func $arity-0-vs-1 (call 1)) (func (param i32)) ) \"type mismatch\")",
    "(assert_invalid (module (func $arity-0-vs-2 (call 1)) (func (param f64 i32)) ) \"type mismatch\")",
    "(assert_invalid (module (func $arity-1-vs-0 (call 1 (i32.const 1))) (func) ) \"type mismatch\")",
    "(assert_invalid (module (func $arity-2-vs-0 (call 1 (f64.const 2) (i32.const 1))) (func) ) \"type mismatch\")",
    "(assert_invalid (module (func $type-first-void-vs-num (call 1 (nop) (i32.const 1))) (func (param i32 i32)) ) \"type mismatch\")",
    "(assert_invalid (module (func $type-second-void-vs-num (call 1 (i32.const 1) (nop))) (func (param i32 i32)) ) \"type mismatch\")",
    "(assert_invalid (module (func $type-first-num-vs-num (call 1 (f64.const 1) (i32.const 1))) (func (param i32 f64)) ) \"type mismatch\")",
    "(assert_invalid (module (func $type-second-num-vs-num (call 1 (i32.const 1) (f64.const 1))) (func (param f64 i32)) ) \"type mismatch\")",
    "(assert_invalid (module (func $type-first-empty-in-block (block (call 1)) ) (func (param i32)) ) \"type mismatch\")",
    "(assert_invalid (module (func $type-second-empty-in-block (block (call 1 (i32.const 0))) ) (func (param i32 i32)) ) \"type mismatch\")",
    "(assert_invalid (module (func $type-first-empty-in-loop (loop (call 1)) ) (func (param i32)) ) \"type mismatch\")",
    "(assert_invalid (module (func $type-second-empty-in-loop (loop (call 1 (i32.const 0))) ) (func (param i32 i32)) ) \"type mismatch\")",
    "(assert_invalid (module (func $type-first-empty-in-then (if (i32.const 0) (then (call 1))) ) (func (param i32)) ) \"type mismatch\")",
    "(assert_invalid (module (func $type-second-empty-in-then (if (i32.const 0) (then (call 1 (i32.const 0)))) ) (func (param i32 i32)) ) \"type mismatch\")",
    "(assert_invalid (module (func $unbound-func (call 1))) \"unknown function\")",
    "(assert_invalid (module (func $large-func (call 1012321300))) \"unknown function\")"
  ],
  "dump": {
    "call.0.wasm": {
      "header": "\ncall.0.wasm:\tfile format wasm 0x1\n\nSections:\n\n     Type start=0x0000000b end=0x000000f4 (size=0x000000e9) count: 25\n Function start=0x000000f6 end=0x00000145 (size=0x0000004f) count: 78\n    Table start=0x00000147 end=0x0000014c (size=0x00000005) count: 1\n   Memory start=0x0000014e end=0x00000151 (size=0x00000003) count: 1\n   Global start=0x00000153 end=0x00000159 (size=0x00000006) count: 1\n   Export start=0x0000015c end=0x00000526 (size=0x000003ca) count: 56\n     Elem start=0x00000528 end=0x0000052f (size=0x00000007) count: 1\n     Code start=0x00000532 end=0x00000a28 (size=0x000004f6) count: 78\n",
      "details": "\ncall.0.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nType[25]:\n - type[0] (i32, i32) -> i32\n - type[1] () -> i32\n - type[2] () -> i64\n - type[3] () -> f32\n - type[4] () -> f64\n - type[5] () -> (i32, i64)\n - type[6] (i32) -> i32\n - type[7] (i64) -> i64\n - type[8] (f32) -> f32\n - type[9] (f64) -> f64\n - type[10] (i32, f64) -> (i32, f64)\n - type[11] (i32, i32) -> (i32, i32)\n - type[12] (f32, f64) -> (f64, f32)\n - type[13] (f64, i32) -> (i32, f64)\n - type[14] (f32, i32) -> i32\n - type[15] (i32, i64) -> i64\n - type[16] (f64, f32) -> f32\n - type[17] (i64, f64) -> f64\n - type[18] () -> (i32, f64)\n - type[19] () -> (i32, i32)\n - type[20] () -> (f64, f32)\n - type[21] (i64, i64) -> i64\n - type[22] (i64) -> i32\n - type[23] () -> nil\n - type[24] (f32, i32, i32, f64, f32, f32, f32, f64, f32, i32, i32, f32, f64, i64, i64, i32, i64, i64, f32, i64, i64, i64, i32, f32, f32, f32, f64, f32, i32, i64, f32, f64, f64, f32, i32, f32, f32, f64, i64, f64, i32, i64, f32, f64, i32, i32, i32, i64, f64, i32, i64, i64, f64, f64, f64, f64, f64, f64, i32, f32, f64, f64, i32, i64, f32, f32, f32, i32, f64, f64, f64, f64, f64, f32, i64, i64, i32, i32, i32, f32, f64, i32, i64, f32, f32, f32, i32, i32, f32, f64, i64, f32, f64, f32, f32, f32, i32, f32, i64, i32) -> i32\nFunction[78]:\n - func[0] sig=1\n - func[1] sig=2\n - func[2] sig=3\n - func[3] sig=4\n - func[4] sig=5\n - func[5] sig=6\n - func[6] sig=7\n - func[7] sig=8\n - func[8] sig=9\n - func[9] sig=10\n - func[10] sig=11\n - func[11] sig=12\n - func[12] sig=13\n - func[13] sig=14\n - func[14] sig=15\n - func[15] sig=16\n - func[16] sig=17\n - func[17] sig=1 <type-i32>\n - func[18] sig=2 <type-i64>\n - func[19] sig=3 <type-f32>\n - func[20] sig=4 <type-f64>\n - func[21] sig=5 <type-i32-i64>\n - func[22] sig=1 <type-first-i32>\n - func[23] sig=2 <type-first-i64>\n - func[24] sig=3 <type-first-f32>\n - func[25] sig=4 <type-first-f64>\n - func[26] sig=1 <type-second-i32>\n - func[27] sig=2 <type-second-i64>\n - func[28] sig=3 <type-second-f32>\n - func[29] sig=4 <type-second-f64>\n - func[30] sig=18 <type-all-i32-f64>\n - func[31] sig=19 <type-all-i32-i32>\n - func[32] sig=20 <type-all-f32-f64>\n - func[33] sig=18 <type-all-f64-i32>\n - func[34] sig=1 <as-binary-all-operands>\n - func[35] sig=1 <as-mixed-operands>\n - func[36] sig=19 <as-call-all-operands>\n - func[37] sig=7 <fac>\n - func[38] sig=21 <fac-acc>\n - func[39] sig=7 <fib>\n - func[40] sig=22 <even>\n - func[41] sig=22 <odd>\n - func[42] sig=23 <runaway>\n - func[43] sig=23 <mutual-runaway>\n - func[44] sig=23\n - func[45] sig=1 <as-select-first>\n - func[46] sig=1 <as-select-mid>\n - func[47] sig=1 <as-select-last>\n - func[48] sig=1 <as-if-condition>\n - func[49] sig=1 <as-br_if-first>\n - func[50] sig=1 <as-br_if-last>\n - func[51] sig=1 <as-br_table-first>\n - func[52] sig=1 <as-br_table-last>\n - func[53] sig=0\n - func[54] sig=1 <as-call_indirect-first>\n - func[55] sig=1 <as-call_indirect-mid>\n - func[56] sig=1 <as-call_indirect-last>\n - func[57] sig=23 <as-store-first>\n - func[58] sig=23 <as-store-last>\n - func[59] sig=1 <as-memory.grow-value>\n - func[60] sig=1 <as-return-value>\n - func[61] sig=23 <as-drop-operand>\n - func[62] sig=1 <as-br-value>\n - func[63] sig=1 <as-local.set-value>\n - func[64] sig=1 <as-local.tee-value>\n - func[65] sig=1 <as-global.set-value>\n - func[66] sig=1 <as-load-operand>\n - func[67] sig=6\n - func[68] sig=8\n - func[69] sig=3 <as-unary-operand>\n - func[70] sig=1 <as-binary-left>\n - func[71] sig=1 <as-binary-right>\n - func[72] sig=1 <as-test-operand>\n - func[73] sig=1 <as-compare-left>\n - func[74] sig=1 <as-compare-right>\n - func[75] sig=2 <as-convert-operand>\n - func[76] sig=24\n - func[77] sig=6 <return-from-long-argument-list>\nTable[1]:\n - table[0] type=funcref initial=1 max=1\nMemory[1]:\n - memory[0] pages: initial=1\nGlobal[1]:\n - global[0] i32 mutable=1 - init i32=10\nExport[56]:\n - func[17] <type-i32> -> \"type-i32\"\n - func[18] <type-i64> -> \"type-i64\"\n - func[19] <type-f32> -> \"type-f32\"\n - func[20] <type-f64> -> \"type-f64\"\n - func[21] <type-i32-i64> -> \"type-i32-i64\"\n - func[22] <type-first-i32> -> \"type-first-i32\"\n - func[23] <type-first-i64> -> \"type-first-i64\"\n - func[24] <type-first-f32> -> \"type-first-f32\"\n - func[25] <type-first-f64> -> \"type-first-f64\"\n - func[26] <type-second-i32> -> \"type-second-i32\"\n - func[27] <type-second-i64> -> \"type-second-i64\"\n - func[28] <type-second-f32> -> \"type-second-f32\"\n - func[29] <type-second-f64> -> \"type-second-f64\"\n - func[30] <type-all-i32-f64> -> \"type-all-i32-f64\"\n - func[31] <type-all-i32-i32> -> \"type-all-i32-i32\"\n - func[32] <type-all-f32-f64> -> \"type-all-f32-f64\"\n - func[33] <type-all-f64-i32> -> \"type-all-f64-i32\"\n - func[34] <as-binary-all-operands> -> \"as-binary-all-operands\"\n - func[35] <as-mixed-operands> -> \"as-mixed-operands\"\n - func[36] <as-call-all-operands> -> \"as-call-all-operands\"\n - func[37] <fac> -> \"fac\"\n - func[38] <fac-acc> -> \"fac-acc\"\n - func[39] <fib> -> \"fib\"\n - func[40] <even> -> \"even\"\n - func[41] <odd> -> \"odd\"\n - func[42] <runaway> -> \"runaway\"\n - func[43] <mutual-runaway> -> \"mutual-runaway\"\n - func[45] <as-select-first> -> \"as-select-first\"\n - func[46] <as-select-mid> -> \"as-select-mid\"\n - func[47] <as-select-last> -> \"as-select-last\"\n - func[48] <as-if-condition> -> \"as-if-condition\"\n - func[49] <as-br_if-first> -> \"as-br_if-first\"\n - func[50] <as-br_if-last> -> \"as-br_if-last\"\n - func[51] <as-br_table-first> -> \"as-br_table-first\"\n - func[52] <as-br_table-last> -> \"as-br_table-last\"\n - func[54] <as-call_indirect-first> -> \"as-call_indirect-first\"\n - func[55] <as-call_indirect-mid> -> \"as-call_indirect-mid\"\n - func[56] <as-call_indirect-last> -> \"as-call_indirect-last\"\n - func[57] <as-store-first> -> \"as-store-first\"\n - func[58] <as-store-last> -> \"as-store-last\"\n - func[59] <as-memory.grow-value> -> \"as-memory.grow-value\"\n - func[60] <as-return-value> -> \"as-return-value\"\n - func[61] <as-drop-operand> -> \"as-drop-operand\"\n - func[62] <as-br-value> -> \"as-br-value\"\n - func[63] <as-local.set-value> -> \"as-local.set-value\"\n - func[64] <as-local.tee-value> -> \"as-local.tee-value\"\n - func[65] <as-global.set-value> -> \"as-global.set-value\"\n - func[66] <as-load-operand> -> \"as-load-operand\"\n - func[69] <as-unary-operand> -> \"as-unary-operand\"\n - func[70] <as-binary-left> -> \"as-binary-left\"\n - func[71] <as-binary-right> -> \"as-binary-right\"\n - func[72] <as-test-operand> -> \"as-test-operand\"\n - func[73] <as-compare-left> -> \"as-compare-left\"\n - func[74] <as-compare-right> -> \"as-compare-right\"\n - func[75] <as-convert-operand> -> \"as-convert-operand\"\n - func[77] <return-from-long-argument-list> -> \"return-from-long-argument-list\"\nElem[1]:\n - segment[0] flags=0 table=0 count=1 - init i32=0\n  - elem[0] = ref.func:53\nCode[78]:\n - func[0] size=5\n - func[1] size=5\n - func[2] size=7\n - func[3] size=11\n - func[4] size=8\n - func[5] size=4\n - func[6] size=4\n - func[7] size=4\n - func[8] size=4\n - func[9] size=6\n - func[10] size=6\n - func[11] size=6\n - func[12] size=6\n - func[13] size=4\n - func[14] size=4\n - func[15] size=4\n - func[16] size=4\n - func[17] size=4 <type-i32>\n - func[18] size=4 <type-i64>\n - func[19] size=4 <type-f32>\n - func[20] size=4 <type-f64>\n - func[21] size=4 <type-i32-i64>\n - func[22] size=6 <type-first-i32>\n - func[23] size=7 <type-first-i64>\n - func[24] size=9 <type-first-f32>\n - func[25] size=13 <type-first-f64>\n - func[26] size=11 <type-second-i32>\n - func[27] size=9 <type-second-i64>\n - func[28] size=18 <type-second-f32>\n - func[29] size=16 <type-second-f64>\n - func[30] size=15 <type-all-i32-f64>\n - func[31] size=8 <type-all-i32-i32>\n - func[32] size=18 <type-all-f32-f64>\n - func[33] size=15 <type-all-f64-i32>\n - func[34] size=9 <as-binary-all-operands>\n - func[35] size=12 <as-mixed-operands>\n - func[36] size=10 <as-call-all-operands>\n - func[37] size=21 <fac>\n - func[38] size=23 <fac-acc>\n - func[39] size=28 <fib>\n - func[40] size=18 <even>\n - func[41] size=19 <odd>\n - func[42] size=4 <runaway>\n - func[43] size=4 <mutual-runaway>\n - func[44] size=4\n - func[45] size=9 <as-select-first>\n - func[46] size=9 <as-select-mid>\n - func[47] size=9 <as-select-last>\n - func[48] size=12 <as-if-condition>\n - func[49] size=11 <as-br_if-first>\n - func[50] size=11 <as-br_if-last>\n - func[51] size=13 <as-br_table-first>\n - func[52] size=13 <as-br_table-last>\n - func[53] size=4\n - func[54] size=14 <as-call_indirect-first>\n - func[55] size=14 <as-call_indirect-mid>\n - func[56] size=14 <as-call_indirect-last>\n - func[57] size=9 <as-store-first>\n - func[58] size=9 <as-store-last>\n - func[59] size=6 <as-memory.grow-value>\n - func[60] size=5 <as-return-value>\n - func[61] size=5 <as-drop-operand>\n - func[62] size=9 <as-br-value>\n - func[63] size=10 <as-local.set-value>\n - func[64] size=8 <as-local.tee-value>\n - func[65] size=8 <as-global.set-value>\n - func[66] size=7 <as-load-operand>\n - func[67] size=4\n - func[68] size=4\n - func[69] size=13 <as-unary-operand>\n - func[70] size=12 <as-binary-left>\n - func[71] size=12 <as-binary-right>\n - func[72] size=10 <as-test-operand>\n - func[73] size=12 <as-compare-left>\n - func[74] size=12 <as-compare-right>\n - func[75] size=10 <as-convert-operand>\n - func[76] size=4\n - func[77] size=479 <return-from-long-argument-list>\n",
      "disassemble": "\ncall.0.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n000534 func[0]:\n 000535: 41 b2 02                   | i32.const 306\n 000538: 0b                         | end\n00053a func[1]:\n 00053b: 42 e4 02                   | i64.const 356\n 00053e: 0b                         | end\n000540 func[2]:\n 000541: 43 00 20 73 45             | f32.const 0x1.e64p+11\n 000546: 0b                         | end\n000548 func[3]:\n 000549: 44 00 00 00 00 00 c8 ae 40 | f64.const 0x1.ec8p+11\n 000552: 0b                         | end\n000554 func[4]:\n 000555: 41 b2 02                   | i32.const 306\n 000558: 42 e4 02                   | i64.const 356\n 00055b: 0b                         | end\n00055d func[5]:\n 00055e: 20 00                      | local.get 0\n 000560: 0b                         | end\n000562 func[6]:\n 000563: 20 00                      | local.get 0\n 000565: 0b                         | end\n000567 func[7]:\n 000568: 20 00                      | local.get 0\n 00056a: 0b                         | end\n00056c func[8]:\n 00056d: 20 00                      | local.get 0\n 00056f: 0b                         | end\n000571 func[9]:\n 000572: 20 00                      | local.get 0\n 000574: 20 01                      | local.get 1\n 000576: 0b                         | end\n000578 func[10]:\n 000579: 20 01                      | local.get 1\n 00057b: 20 00                      | local.get 0\n 00057d: 0b                         | end\n00057f func[11]:\n 000580: 20 01                      | local.get 1\n 000582: 20 00                      | local.get 0\n 000584: 0b                         | end\n000586 func[12]:\n 000587: 20 01                      | local.get 1\n 000589: 20 00                      | local.get 0\n 00058b: 0b                         | end\n00058d func[13]:\n 00058e: 20 01                      | local.get 1\n 000590: 0b                         | end\n000592 func[14]:\n 000593: 20 01                      | local.get 1\n 000595: 0b                         | end\n000597 func[15]:\n 000598: 20 01                      | local.get 1\n 00059a: 0b                         | end\n00059c func[16]:\n 00059d: 20 01                      | local.get 1\n 00059f: 0b                         | end\n0005a1 func[17] <type-i32>:\n 0005a2: 10 00                      | call 0\n 0005a4: 0b                         | end\n0005a6 func[18] <type-i64>:\n 0005a7: 10 01                      | call 1\n 0005a9: 0b                         | end\n0005ab func[19] <type-f32>:\n 0005ac: 10 02                      | call 2\n 0005ae: 0b                         | end\n0005b0 func[20] <type-f64>:\n 0005b1: 10 03                      | call 3\n 0005b3: 0b                         | end\n0005b5 func[21] <type-i32-i64>:\n 0005b6: 10 04                      | call 4\n 0005b8: 0b                         | end\n0005ba func[22] <type-first-i32>:\n 0005bb: 41 20                      | i32.const 32\n 0005bd: 10 05                      | call 5\n 0005bf: 0b                         | end\n0005c1 func[23] <type-first-i64>:\n 0005c2: 42 c0 00                   | i64.const 64\n 0005c5: 10 06                      | call 6\n 0005c7: 0b                         | end\n0005c9 func[24] <type-first-f32>:\n 0005ca: 43 c3 f5 a8 3f             | f32.const 0x1.51eb86p+0\n 0005cf: 10 07                      | call 7\n 0005d1: 0b                         | end\n0005d3 func[25] <type-first-f64>:\n 0005d4: 44 3d 0a d7 a3 70 3d fa 3f | f64.const 0x1.a3d70a3d70a3dp+0\n 0005dd: 10 08                      | call 8\n 0005df: 0b                         | end\n0005e1 func[26] <type-second-i32>:\n 0005e2: 43 66 66 00 42             | f32.const 0x1.00ccccp+5\n 0005e7: 41 20                      | i32.const 32\n 0005e9: 10 0d                      | call 13\n 0005eb: 0b                         | end\n0005ed func[27] <type-second-i64>:\n 0005ee: 41 20                      | i32.const 32\n 0005f0: 42 c0 00                   | i64.const 64\n 0005f3: 10 0e                      | call 14\n 0005f5: 0b                         | end\n0005f7 func[28] <type-second-f32>:\n 0005f8: 44 00 00 00 00 00 00 50 40 | f64.const 0x1p+6\n 000601: 43 00 00 00 42             | f32.const 0x1p+5\n 000606: 10 0f                      | call 15\n 000608: 0b                         | end\n00060a func[29] <type-second-f64>:\n 00060b: 42 c0 00                   | i64.const 64\n 00060e: 44 66 66 66 66 66 06 50 40 | f64.const 0x1.0066666666666p+6\n 000617: 10 10                      | call 16\n 000619: 0b                         | end\n00061b func[30] <type-all-i32-f64>:\n 00061c: 41 20                      | i32.const 32\n 00061e: 44 3d 0a d7 a3 70 3d fa 3f | f64.const 0x1.a3d70a3d70a3dp+0\n 000627: 10 09                      | call 9\n 000629: 0b                         | end\n00062b func[31] <type-all-i32-i32>:\n 00062c: 41 01                      | i32.const 1\n 00062e: 41 02                      | i32.const 2\n 000630: 10 0a                      | call 10\n 000632: 0b                         | end\n000634 func[32] <type-all-f32-f64>:\n 000635: 43 00 00 80 3f             | f32.const 0x1p+0\n 00063a: 44 00 00 00 00 00 00 00 40 | f64.const 0x1p+1\n 000643: 10 0b                      | call 11\n 000645: 0b                         | end\n000647 func[33] <type-all-f64-i32>:\n 000648: 44 00 00 00 00 00 00 f0 3f | f64.const 0x1p+0\n 000651: 41 02                      | i32.const 2\n 000653: 10 0c                      | call 12\n 000655: 0b                         | end\n000657 func[34] <as-binary-all-operands>:\n 000658: 41 03                      | i32.const 3\n 00065a: 41 04                      | i32.const 4\n 00065c: 10 0a                      | call 10\n 00065e: 6a                         | i32.add\n 00065f: 0b                         | end\n000661 func[35] <as-mixed-operands>:\n 000662: 41 03                      | i32.const 3\n 000664: 41 04                      | i32.const 4\n 000666: 10 0a                      | call 10\n 000668: 41 05                      | i32.const 5\n 00066a: 6a                         | i32.add\n 00066b: 6c                         | i32.mul\n 00066c: 0b                         | end\n00066e func[36] <as-call-all-operands>:\n 00066f: 41 03                      | i32.const 3\n 000671: 41 04                      | i32.const 4\n 000673: 10 0a                      | call 10\n 000675: 10 0a                      | call 10\n 000677: 0b                         | end\n000679 func[37] <fac>:\n 00067a: 20 00                      | local.get 0\n 00067c: 50                         | i64.eqz\n 00067d: 04 7e                      | if i64\n 00067f: 42 01                      |   i64.const 1\n 000681: 05                         | else\n 000682: 20 00                      |   local.get 0\n 000684: 20 00                      |   local.get 0\n 000686: 42 01                      |   i64.const 1\n 000688: 7d                         |   i64.sub\n 000689: 10 25                      |   call 37 <fac>\n 00068b: 7e                         |   i64.mul\n 00068c: 0b                         | end\n 00068d: 0b                         | end\n00068f func[38] <fac-acc>:\n 000690: 20 00                      | local.get 0\n 000692: 50                         | i64.eqz\n 000693: 04 7e                      | if i64\n 000695: 20 01                      |   local.get 1\n 000697: 05                         | else\n 000698: 20 00                      |   local.get 0\n 00069a: 42 01                      |   i64.const 1\n 00069c: 7d                         |   i64.sub\n 00069d: 20 00                      |   local.get 0\n 00069f: 20 01                      |   local.get 1\n 0006a1: 7e                         |   i64.mul\n 0006a2: 10 26                      |   call 38 <fac-acc>\n 0006a4: 0b                         | end\n 0006a5: 0b                         | end\n0006a7 func[39] <fib>:\n 0006a8: 20 00                      | local.get 0\n 0006aa: 42 01                      | i64.const 1\n 0006ac: 58                         | i64.le_u\n 0006ad: 04 7e                      | if i64\n 0006af: 42 01                      |   i64.const 1\n 0006b1: 05                         | else\n 0006b2: 20 00                      |   local.get 0\n 0006b4: 42 02                      |   i64.const 2\n 0006b6: 7d                         |   i64.sub\n 0006b7: 10 27                      |   call 39 <fib>\n 0006b9: 20 00                      |   local.get 0\n 0006bb: 42 01                      |   i64.const 1\n 0006bd: 7d                         |   i64.sub\n 0006be: 10 27                      |   call 39 <fib>\n 0006c0: 7c                         |   i64.add\n 0006c1: 0b                         | end\n 0006c2: 0b                         | end\n0006c4 func[40] <even>:\n 0006c5: 20 00                      | local.get 0\n 0006c7: 50                         | i64.eqz\n 0006c8: 04 7f                      | if i32\n 0006ca: 41 2c                      |   i32.const 44\n 0006cc: 05                         | else\n 0006cd: 20 00                      |   local.get 0\n 0006cf: 42 01                      |   i64.const 1\n 0006d1: 7d                         |   i64.sub\n 0006d2: 10 29                      |   call 41 <odd>\n 0006d4: 0b                         | end\n 0006d5: 0b                         | end\n0006d7 func[41] <odd>:\n 0006d8: 20 00                      | local.get 0\n 0006da: 50                         | i64.eqz\n 0006db: 04 7f                      | if i32\n 0006dd: 41 e3 00                   |   i32.const 99\n 0006e0: 05                         | else\n 0006e1: 20 00                      |   local.get 0\n 0006e3: 42 01                      |   i64.const 1\n 0006e5: 7d                         |   i64.sub\n 0006e6: 10 28                      |   call 40 <even>\n 0006e8: 0b                         | end\n 0006e9: 0b                         | end\n0006eb func[42] <runaway>:\n 0006ec: 10 2a                      | call 42 <runaway>\n 0006ee: 0b                         | end\n0006f0 func[43] <mutual-runaway>:\n 0006f1: 10 2c                      | call 44\n 0006f3: 0b                         | end\n0006f5 func[44]:\n 0006f6: 10 2b                      | call 43 <mutual-runaway>\n 0006f8: 0b                         | end\n0006fa func[45] <as-select-first>:\n 0006fb: 10 00                      | call 0\n 0006fd: 41 02                      | i32.const 2\n 0006ff: 41 03                      | i32.const 3\n 000701: 1b                         | select\n 000702: 0b                         | end\n000704 func[46] <as-select-mid>:\n 000705: 41 02                      | i32.const 2\n 000707: 10 00                      | call 0\n 000709: 41 03                      | i32.const 3\n 00070b: 1b                         | select\n 00070c: 0b                         | end\n00070e func[47] <as-select-last>:\n 00070f: 41 02                      | i32.const 2\n 000711: 41 03                      | i32.const 3\n 000713: 10 00                      | call 0\n 000715: 1b                         | select\n 000716: 0b                         | end\n000718 func[48] <as-if-condition>:\n 000719: 10 00                      | call 0\n 00071b: 04 7f                      | if i32\n 00071d: 41 01                      |   i32.const 1\n 00071f: 05                         | else\n 000720: 41 02                      |   i32.const 2\n 000722: 0b                         | end\n 000723: 0b                         | end\n000725 func[49] <as-br_if-first>:\n 000726: 02 7f                      | block i32\n 000728: 10 00                      |   call 0\n 00072a: 41 02                      |   i32.const 2\n 00072c: 0d 00                      |   br_if 0\n 00072e: 0b                         | end\n 00072f: 0b                         | end\n000731 func[50] <as-br_if-last>:\n 000732: 02 7f                      | block i32\n 000734: 41 02                      |   i32.const 2\n 000736: 10 00                      |   call 0\n 000738: 0d 00                      |   br_if 0\n 00073a: 0b                         | end\n 00073b: 0b                         | end\n00073d func[51] <as-br_table-first>:\n 00073e: 02 7f                      | block i32\n 000740: 10 00                      |   call 0\n 000742: 41 02                      |   i32.const 2\n 000744: 0e 01 00 00                |   br_table 0 0\n 000748: 0b                         | end\n 000749: 0b                         | end\n00074b func[52] <as-br_table-last>:\n 00074c: 02 7f                      | block i32\n 00074e: 41 02                      |   i32.const 2\n 000750: 10 00                      |   call 0\n 000752: 0e 01 00 00                |   br_table 0 0\n 000756: 0b                         | end\n 000757: 0b                         | end\n000759 func[53]:\n 00075a: 20 00                      | local.get 0\n 00075c: 0b                         | end\n00075e func[54] <as-call_indirect-first>:\n 00075f: 02 7f                      | block i32\n 000761: 10 00                      |   call 0\n 000763: 41 02                      |   i32.const 2\n 000765: 41 00                      |   i32.const 0\n 000767: 11 00 00                   |   call_indirect 0 (type 0)\n 00076a: 0b                         | end\n 00076b: 0b                         | end\n00076d func[55] <as-call_indirect-mid>:\n 00076e: 02 7f                      | block i32\n 000770: 41 02                      |   i32.const 2\n 000772: 10 00                      |   call 0\n 000774: 41 00                      |   i32.const 0\n 000776: 11 00 00                   |   call_indirect 0 (type 0)\n 000779: 0b                         | end\n 00077a: 0b                         | end\n00077c func[56] <as-call_indirect-last>:\n 00077d: 02 7f                      | block i32\n 00077f: 41 01                      |   i32.const 1\n 000781: 41 02                      |   i32.const 2\n 000783: 10 00                      |   call 0\n 000785: 11 00 00                   |   call_indirect 0 (type 0)\n 000788: 0b                         | end\n 000789: 0b                         | end\n00078b func[57] <as-store-first>:\n 00078c: 10 00                      | call 0\n 00078e: 41 01                      | i32.const 1\n 000790: 36 02 00                   | i32.store 2 0\n 000793: 0b                         | end\n000795 func[58] <as-store-last>:\n 000796: 41 0a                      | i32.const 10\n 000798: 10 00                      | call 0\n 00079a: 36 02 00                   | i32.store 2 0\n 00079d: 0b                         | end\n00079f func[59] <as-memory.grow-value>:\n 0007a0: 10 00                      | call 0\n 0007a2: 40 00                      | memory.grow 0\n 0007a4: 0b                         | end\n0007a6 func[60] <as-return-value>:\n 0007a7: 10 00                      | call 0\n 0007a9: 0f                         | return\n 0007aa: 0b                         | end\n0007ac func[61] <as-drop-operand>:\n 0007ad: 10 00                      | call 0\n 0007af: 1a                         | drop\n 0007b0: 0b                         | end\n0007b2 func[62] <as-br-value>:\n 0007b3: 02 7f                      | block i32\n 0007b5: 10 00                      |   call 0\n 0007b7: 0c 00                      |   br 0\n 0007b9: 0b                         | end\n 0007ba: 0b                         | end\n0007bc func[63] <as-local.set-value>:\n 0007bd: 01 7f                      | local[0] type=i32\n 0007bf: 10 00                      | call 0\n 0007c1: 21 00                      | local.set 0\n 0007c3: 20 00                      | local.get 0\n 0007c5: 0b                         | end\n0007c7 func[64] <as-local.tee-value>:\n 0007c8: 01 7f                      | local[0] type=i32\n 0007ca: 10 00                      | call 0\n 0007cc: 22 00                      | local.tee 0\n 0007ce: 0b                         | end\n0007d0 func[65] <as-global.set-value>:\n 0007d1: 10 00                      | call 0\n 0007d3: 24 00                      | global.set 0\n 0007d5: 23 00                      | global.get 0\n 0007d7: 0b                         | end\n0007d9 func[66] <as-load-operand>:\n 0007da: 10 00                      | call 0\n 0007dc: 28 02 00                   | i32.load 2 0\n 0007df: 0b                         | end\n0007e1 func[67]:\n 0007e2: 20 00                      | local.get 0\n 0007e4: 0b                         | end\n0007e6 func[68]:\n 0007e7: 20 00                      | local.get 0\n 0007e9: 0b                         | end\n0007eb func[69] <as-unary-operand>:\n 0007ec: 02 7d                      | block f32\n 0007ee: 43 00 00 00 00             |   f32.const 0x0p+0\n 0007f3: 10 44                      |   call 68\n 0007f5: 91                         |   f32.sqrt\n 0007f6: 0b                         | end\n 0007f7: 0b                         | end\n0007f9 func[70] <as-binary-left>:\n 0007fa: 02 7f                      | block i32\n 0007fc: 41 01                      |   i32.const 1\n 0007fe: 10 43                      |   call 67\n 000800: 41 0a                      |   i32.const 10\n 000802: 6a                         |   i32.add\n 000803: 0b                         | end\n 000804: 0b                         | end\n000806 func[71] <as-binary-right>:\n 000807: 02 7f                      | block i32\n 000809: 41 0a                      |   i32.const 10\n 00080b: 41 01                      |   i32.const 1\n 00080d: 10 43                      |   call 67\n 00080f: 6b                         |   i32.sub\n 000810: 0b                         | end\n 000811: 0b                         | end\n000813 func[72] <as-test-operand>:\n 000814: 02 7f                      | block i32\n 000816: 41 01                      |   i32.const 1\n 000818: 10 43                      |   call 67\n 00081a: 45                         |   i32.eqz\n 00081b: 0b                         | end\n 00081c: 0b                         | end\n00081e func[73] <as-compare-left>:\n 00081f: 02 7f                      | block i32\n 000821: 41 01                      |   i32.const 1\n 000823: 10 43                      |   call 67\n 000825: 41 0a                      |   i32.const 10\n 000827: 4d                         |   i32.le_u\n 000828: 0b                         | end\n 000829: 0b                         | end\n00082b func[74] <as-compare-right>:\n 00082c: 02 7f                      | block i32\n 00082e: 41 0a                      |   i32.const 10\n 000830: 41 01                      |   i32.const 1\n 000832: 10 43                      |   call 67\n 000834: 47                         |   i32.ne\n 000835: 0b                         | end\n 000836: 0b                         | end\n000838 func[75] <as-convert-operand>:\n 000839: 02 7e                      | block i64\n 00083b: 41 01                      |   i32.const 1\n 00083d: 10 43                      |   call 67\n 00083f: ac                         |   i64.extend_i32_s\n 000840: 0b                         | end\n 000841: 0b                         | end\n000843 func[76]:\n 000844: 20 63                      | local.get 99\n 000846: 0b                         | end\n000849 func[77] <return-from-long-argument-list>:\n 00084a: 43 00 00 00 00             | f32.const 0x0p+0\n 00084f: 41 00                      | i32.const 0\n 000851: 41 00                      | i32.const 0\n 000853: 44 00 00 00 00 00 00 00 00 | f64.const 0x0p+0\n 00085c: 43 00 00 00 00             | f32.const 0x0p+0\n 000861: 43 00 00 00 00             | f32.const 0x0p+0\n 000866: 43 00 00 00 00             | f32.const 0x0p+0\n 00086b: 44 00 00 00 00 00 00 00 00 | f64.const 0x0p+0\n 000874: 43 00 00 00 00             | f32.const 0x0p+0\n 000879: 41 00                      | i32.const 0\n 00087b: 41 00                      | i32.const 0\n 00087d: 43 00 00 00 00             | f32.const 0x0p+0\n 000882: 44 00 00 00 00 00 00 00 00 | f64.const 0x0p+0\n 00088b: 42 00                      | i64.const 0\n 00088d: 42 00                      | i64.const 0\n 00088f: 41 00                      | i32.const 0\n 000891: 42 00                      | i64.const 0\n 000893: 42 00                      | i64.const 0\n 000895: 43 00 00 00 00             | f32.const 0x0p+0\n 00089a: 42 00                      | i64.const 0\n 00089c: 42 00                      | i64.const 0\n 00089e: 42 00                      | i64.const 0\n 0008a0: 41 00                      | i32.const 0\n 0008a2: 43 00 00 00 00             | f32.const 0x0p+0\n 0008a7: 43 00 00 00 00             | f32.const 0x0p+0\n 0008ac: 43 00 00 00 00             | f32.const 0x0p+0\n 0008b1: 44 00 00 00 00 00 00 00 00 | f64.const 0x0p+0\n 0008ba: 43 00 00 00 00             | f32.const 0x0p+0\n 0008bf: 41 00                      | i32.const 0\n 0008c1: 42 00                      | i64.const 0\n 0008c3: 43 00 00 00 00             | f32.const 0x0p+0\n 0008c8: 44 00 00 00 00 00 00 00 00 | f64.const 0x0p+0\n 0008d1: 44 00 00 00 00 00 00 00 00 | f64.const 0x0p+0\n 0008da: 43 00 00 00 00             | f32.const 0x0p+0\n 0008df: 41 00                      | i32.const 0\n 0008e1: 43 00 00 00 00             | f32.const 0x0p+0\n 0008e6: 43 00 00 00 00             | f32.const 0x0p+0\n 0008eb: 44 00 00 00 00 00 00 00 00 | f64.const 0x0p+0\n 0008f4: 42 00                      | i64.const 0\n 0008f6: 44 00 00 00 00 00 00 00 00 | f64.const 0x0p+0\n 0008ff: 41 00                      | i32.const 0\n 000901: 42 00                      | i64.const 0\n 000903: 43 00 00 00 00             | f32.const 0x0p+0\n 000908: 44 00 00 00 00 00 00 00 00 | f64.const 0x0p+0\n 000911: 41 00                      | i32.const 0\n 000913: 41 00                      | i32.const 0\n 000915: 41 00                      | i32.const 0\n 000917: 42 00                      | i64.const 0\n 000919: 44 00 00 00 00 00 00 00 00 | f64.const 0x0p+0\n 000922: 41 00                      | i32.const 0\n 000924: 42 00                      | i64.const 0\n 000926: 42 00                      | i64.const 0\n 000928: 44 00 00 00 00 00 00 00 00 | f64.const 0x0p+0\n 000931: 44 00 00 00 00 00 00 00 00 | f64.const 0x0p+0\n 00093a: 44 00 00 00 00 00 00 00 00 | f64.const 0x0p+0\n 000943: 44 00 00 00 00 00 00 00 00 | f64.const 0x0p+0\n 00094c: 44 00 00 00 00 00 00 00 00 | f64.const 0x0p+0\n 000955: 44 00 00 00 00 00 00 00 00 | f64.const 0x0p+0\n 00095e: 41 00                      | i32.const 0\n 000960: 43 00 00 00 00             | f32.const 0x0p+0\n 000965: 44 00 00 00 00 00 00 00 00 | f64.const 0x0p+0\n 00096e: 44 00 00 00 00 00 00 00 00 | f64.const 0x0p+0\n 000977: 41 00                      | i32.const 0\n 000979: 42 00                      | i64.const 0\n 00097b: 43 00 00 00 00             | f32.const 0x0p+0\n 000980: 43 00 00 00 00             | f32.const 0x0p+0\n 000985: 43 00 00 00 00             | f32.const 0x0p+0\n 00098a: 41 00                      | i32.const 0\n 00098c: 44 00 00 00 00 00 00 00 00 | f64.const 0x0p+0\n 000995: 44 00 00 00 00 00 00 00 00 | f64.const 0x0p+0\n 00099e: 44 00 00 00 00 00 00 00 00 | f64.const 0x0p+0\n 0009a7: 44 00 00 00 00 00 00 00 00 | f64.const 0x0p+0\n 0009b0: 44 00 00 00 00 00 00 00 00 | f64.const 0x0p+0\n 0009b9: 43 00 00 00 00             | f32.const 0x0p+0\n 0009be: 42 00                      | i64.const 0\n 0009c0: 42 00                      | i64.const 0\n 0009c2: 41 00                      | i32.const 0\n 0009c4: 41 00                      | i32.const 0\n 0009c6: 41 00                      | i32.const 0\n 0009c8: 43 00 00 00 00             | f32.const 0x0p+0\n 0009cd: 44 00 00 00 00 00 00 00 00 | f64.const 0x0p+0\n 0009d6: 41 00                      | i32.const 0\n 0009d8: 42 00                      | i64.const 0\n 0009da: 43 00 00 00 00             | f32.const 0x0p+0\n 0009df: 43 00 00 00 00             | f32.const 0x0p+0\n 0009e4: 43 00 00 00 00             | f32.const 0x0p+0\n 0009e9: 41 00                      | i32.const 0\n 0009eb: 41 00                      | i32.const 0\n 0009ed: 43 00 00 00 00             | f32.const 0x0p+0\n 0009f2: 44 00 00 00 00 00 00 00 00 | f64.const 0x0p+0\n 0009fb: 42 00                      | i64.const 0\n 0009fd: 43 00 00 00 00             | f32.const 0x0p+0\n 000a02: 44 00 00 00 00 00 00 00 00 | f64.const 0x0p+0\n 000a0b: 43 00 00 00 00             | f32.const 0x0p+0\n 000a10: 43 00 00 00 00             | f32.const 0x0p+0\n 000a15: 43 00 00 00 00             | f32.const 0x0p+0\n 000a1a: 41 00                      | i32.const 0\n 000a1c: 43 00 00 00 00             | f32.const 0x0p+0\n 000a21: 42 00                      | i64.const 0\n 000a23: 20 00                      | local.get 0\n 000a25: 10 4c                      | call 76\n 000a27: 0b                         | end\n"
    }
  }
}
