{
  "bin": {
    "memory_init.0.wasm": "AGFzbQEAAAABCQJgAABgAX8BfwMDAgABBQQBAQEBBxwDB21lbW9yeTACAAR0ZXN0AAAHbG9hZDhfdQABCg0CAwABCwcAIAAtAAALCyEEAEECCwQDAQQBAQQCBwEIAEEMCwUHBQIDBgEFBQkCBwY=",
    "memory_init.1.wasm": "AGFzbQEAAAABCQJgAABgAX8BfwMDAgABBQQBAQEBBxwDB21lbW9yeTACAAR0ZXN0AAAHbG9hZDhfdQABDAEEChYCDABBB0EAQQT8CAEACwcAIAAtAAALCyEEAEECCwQDAQQBAQQCBwEIAEEMCwUHBQIDBgEFBQkCBwY=",
    "memory_init.10.wasm": "AGFzbQEAAAABBAFgAAADAgEABQMBAAEHCAEEdGVzdAAADAEBCg8BDQBB0glBAUEB/AgBAAsLBAEBATc=",
    "memory_init.11.wasm": "AGFzbQEAAAABBAFgAAADAgEABQMBAAEHCAEEdGVzdAAADAEBChgBFgBBAUEAQQH8CAAAQQFBAEEB/AgAAAsLBAEBATc=",
    "memory_init.12.wasm": "AGFzbQEAAAABBAFgAAADAgEABQMBAAEHCAEEdGVzdAAADAEBCg8BDQBB0glBAEEF/AgAAAsLBAEBATc=",
    "memory_init.13.wasm": "AGFzbQEAAAABBAFgAAADAgEABQMBAAEHCAEEdGVzdAAADAEBCg8BDQBB0glBAkED/AgAAAsLBAEBATc=",
    "memory_init.14.wasm": "AGFzbQEAAAABBAFgAAADAgEABQMBAAEHCAEEdGVzdAAADAEBChABDgBB/v8DQQFBA/wIAAALCwQBAQE3",
    "memory_init.15.wasm": "AGFzbQEAAAABBAFgAAADAgEABQMBAAEHCAEEdGVzdAAADAEBCg8BDQBB0glBBEEA/AgAAAsLBAEBATc=",
    "memory_init.16.wasm": "AGFzbQEAAAABBAFgAAADAgEABQMBAAEHCAEEdGVzdAAADAEBCg8BDQBB0glBAUEA/AgAAAsLBAEBATc=",
    "memory_init.17.wasm": "AGFzbQEAAAABBAFgAAADAgEABQMBAAEHCAEEdGVzdAAADAEBChABDgBBgYAEQQBBAPwIAAALCwQBAQE3",
    "memory_init.18.wasm": "AGFzbQEAAAABBAFgAAADAgEABQMBAAEHCAEEdGVzdAAADAEBChABDgBBgIAEQQBBAPwIAAALCwQBAQE3",
    "memory_init.19.wasm": "AGFzbQEAAAABBAFgAAADAgEABQMBAAEHCAEEdGVzdAAADAEBChABDgBBgIAEQQFBAPwIAAALCwQBAQE3",
    "memory_init.2.wasm": "AGFzbQEAAAABCQJgAABgAX8BfwMDAgABBQQBAQEBBxwDB21lbW9yeTACAAR0ZXN0AAAHbG9hZDhfdQABDAEEChYCDABBD0EBQQP8CAMACwcAIAAtAAALCyEEAEECCwQDAQQBAQQCBwEIAEEMCwUHBQIDBgEFBQkCBwY=",
    "memory_init.20.wasm": "AGFzbQEAAAABBAFgAAADAgEABQMBAAEHCAEEdGVzdAAADAEBChABDgBBgYAEQQRBAPwIAAALCwQBAQE3",
    "memory_init.21.wasm": "AGFzbQEAAAABBAFgAAADAgEABQMBAAEHCAEEdGVzdAAADAEBChEBDwBBAUEBQwAAgD/8CAAACwsEAQEBNw==",
    "memory_init.22.wasm": "AGFzbQEAAAABBAFgAAADAgEABQMBAAEHCAEEdGVzdAAADAEBCg4BDABBAUEBQgH8CAAACwsEAQEBNw==",
    "memory_init.23.wasm": "AGFzbQEAAAABBAFgAAADAgEABQMBAAEHCAEEdGVzdAAADAEBChUBEwBBAUEBRAAAAAAAAPA//AgAAAsLBAEBATc=",
    "memory_init.24.wasm": "AGFzbQEAAAABBAFgAAADAgEABQMBAAEHCAEEdGVzdAAADAEBChEBDwBBAUMAAIA/QQH8CAAACwsEAQEBNw==",
    "memory_init.25.wasm": "AGFzbQEAAAABBAFgAAADAgEABQMBAAEHCAEEdGVzdAAADAEBChQBEgBBAUMAAIA/QwAAgD/8CAAACwsEAQEBNw==",
    "memory_init.26.wasm": "AGFzbQEAAAABBAFgAAADAgEABQMBAAEHCAEEdGVzdAAADAEBChEBDwBBAUMAAIA/QgH8CAAACwsEAQEBNw==",
    "memory_init.27.wasm": "AGFzbQEAAAABBAFgAAADAgEABQMBAAEHCAEEdGVzdAAADAEBChgBFgBBAUMAAIA/RAAAAAAAAPA//AgAAAsLBAEBATc=",
    "memory_init.28.wasm": "AGFzbQEAAAABBAFgAAADAgEABQMBAAEHCAEEdGVzdAAADAEBCg4BDABBAUIBQQH8CAAACwsEAQEBNw==",
    "memory_init.29.wasm": "AGFzbQEAAAABBAFgAAADAgEABQMBAAEHCAEEdGVzdAAADAEBChEBDwBBAUIBQwAAgD/8CAAACwsEAQEBNw==",
    "memory_init.3.wasm": "AGFzbQEAAAABCQJgAABgAX8BfwMDAgABBQQBAQEBBxwDB21lbW9yeTACAAR0ZXN0AAAHbG9hZDhfdQABDAEEClgCTgBBB0EAQQT8CAEA/AkBQQ9BAUED/AgDAPwJA0EUQQ9BBfwKAABBFUEdQQH8CgAAQRhBCkEB/AoAAEENQQtBBPwKAABBE0EUQQX8CgAACwcAIAAtAAALCyEEAEECCwQDAQQBAQQCBwEIAEEMCwUHBQIDBgEFBQkCBwY=",
    "memory_init.30.wasm": "AGFzbQEAAAABBAFgAAADAgEABQMBAAEHCAEEdGVzdAAADAEBCg4BDABBAUIBQgH8CAAACwsEAQEBNw==",
    "memory_init.31.wasm": "AGFzbQEAAAABBAFgAAADAgEABQMBAAEHCAEEdGVzdAAADAEBChUBEwBBAUIBRAAAAAAAAPA//AgAAAsLBAEBATc=",
    "memory_init.32.wasm": "AGFzbQEAAAABBAFgAAADAgEABQMBAAEHCAEEdGVzdAAADAEBChUBEwBBAUQAAAAAAADwP0EB/AgAAAsLBAEBATc=",
    "memory_init.33.wasm": "AGFzbQEAAAABBAFgAAADAgEABQMBAAEHCAEEdGVzdAAADAEBChgBFgBBAUQAAAAAAADwP0MAAIA//AgAAAsLBAEBATc=",
    "memory_init.34.wasm": "AGFzbQEAAAABBAFgAAADAgEABQMBAAEHCAEEdGVzdAAADAEBChUBEwBBAUQAAAAAAADwP0IB/AgAAAsLBAEBATc=",
    "memory_init.35.wasm": "AGFzbQEAAAABBAFgAAADAgEABQMBAAEHCAEEdGVzdAAADAEBChwBGgBBAUQAAAAAAADwP0QAAAAAAADwP/wIAAALCwQBAQE3",
    "memory_init.36.wasm": "AGFzbQEAAAABBAFgAAADAgEABQMBAAEHCAEEdGVzdAAADAEBChEBDwBDAACAP0EBQQH8CAAACwsEAQEBNw==",
    "memory_init.37.wasm": "AGFzbQEAAAABBAFgAAADAgEABQMBAAEHCAEEdGVzdAAADAEBChQBEgBDAACAP0EBQwAAgD/8CAAACwsEAQEBNw==",
    "memory_init.38.wasm": "AGFzbQEAAAABBAFgAAADAgEABQMBAAEHCAEEdGVzdAAADAEBChEBDwBDAACAP0EBQgH8CAAACwsEAQEBNw==",
    "memory_init.39.wasm": "AGFzbQEAAAABBAFgAAADAgEABQMBAAEHCAEEdGVzdAAADAEBChgBFgBDAACAP0EBRAAAAAAAAPA//AgAAAsLBAEBATc=",
    "memory_init.4.wasm": "AGFzbQEAAAABBAFgAAADAgEABwgBBHRlc3QAAAoHAQUA/AkACw==",
    "memory_init.40.wasm": "AGFzbQEAAAABBAFgAAADAgEABQMBAAEHCAEEdGVzdAAADAEBChQBEgBDAACAP0MAAIA/QQH8CAAACwsEAQEBNw==",
    "memory_init.41.wasm": "AGFzbQEAAAABBAFgAAADAgEABQMBAAEHCAEEdGVzdAAADAEBChcBFQBDAACAP0MAAIA/QwAAgD/8CAAACwsEAQEBNw==",
    "memory_init.42.wasm": "AGFzbQEAAAABBAFgAAADAgEABQMBAAEHCAEEdGVzdAAADAEBChQBEgBDAACAP0MAAIA/QgH8CAAACwsEAQEBNw==",
    "memory_init.43.wasm": "AGFzbQEAAAABBAFgAAADAgEABQMBAAEHCAEEdGVzdAAADAEBChsBGQBDAACAP0MAAIA/RAAAAAAAAPA//AgAAAsLBAEBATc=",
    "memory_init.44.wasm": "AGFzbQEAAAABBAFgAAADAgEABQMBAAEHCAEEdGVzdAAADAEBChEBDwBDAACAP0IBQQH8CAAACwsEAQEBNw==",
    "memory_init.45.wasm": "AGFzbQEAAAABBAFgAAADAgEABQMBAAEHCAEEdGVzdAAADAEBChQBEgBDAACAP0IBQwAAgD/8CAAACwsEAQEBNw==",
    "memory_init.46.wasm": "AGFzbQEAAAABBAFgAAADAgEABQMBAAEHCAEEdGVzdAAADAEBChEBDwBDAACAP0IBQgH8CAAACwsEAQEBNw==",
    "memory_init.47.wasm": "AGFzbQEAAAABBAFgAAADAgEABQMBAAEHCAEEdGVzdAAADAEBChgBFgBDAACAP0IBRAAAAAAAAPA//AgAAAsLBAEBATc=",
    "memory_init.48.wasm": "AGFzbQEAAAABBAFgAAADAgEABQMBAAEHCAEEdGVzdAAADAEBChgBFgBDAACAP0QAAAAAAADwP0EB/AgAAAsLBAEBATc=",
    "memory_init.49.wasm": "AGFzbQEAAAABBAFgAAADAgEABQMBAAEHCAEEdGVzdAAADAEBChsBGQBDAACAP0QAAAAAAADwP0MAAIA//AgAAAsLBAEBATc=",
    "memory_init.5.wasm": "AGFzbQEAAAABBAFgAAADAgEABQMBAAEHCAEEdGVzdAAADAEBCgcBBQD8CQQLCwQBAQE3",
    "memory_init.50.wasm": "AGFzbQEAAAABBAFgAAADAgEABQMBAAEHCAEEdGVzdAAADAEBChgBFgBDAACAP0QAAAAAAADwP0IB/AgAAAsLBAEBATc=",
    "memory_init.51.wasm": "AGFzbQEAAAABBAFgAAADAgEABQMBAAEHCAEEdGVzdAAADAEBCh8BHQBDAACAP0QAAAAAAADwP0QAAAAAAADwP/wIAAALCwQBAQE3",
    "memory_init.52.wasm": "AGFzbQEAAAABBAFgAAADAgEABQMBAAEHCAEEdGVzdAAADAEBCg4BDABCAUEBQQH8CAAACwsEAQEBNw==",
    "memory_init.53.wasm": "AGFzbQEAAAABBAFgAAADAgEABQMBAAEHCAEEdGVzdAAADAEBChEBDwBCAUEBQwAAgD/8CAAACwsEAQEBNw==",
    "memory_init.54.wasm": "AGFzbQEAAAABBAFgAAADAgEABQMBAAEHCAEEdGVzdAAADAEBCg4BDABCAUEBQgH8CAAACwsEAQEBNw==",
    "memory_init.55.wasm": "AGFzbQEAAAABBAFgAAADAgEABQMBAAEHCAEEdGVzdAAADAEBChUBEwBCAUEBRAAAAAAAAPA//AgAAAsLBAEBATc=",
    "memory_init.56.wasm": "AGFzbQEAAAABBAFgAAADAgEABQMBAAEHCAEEdGVzdAAADAEBChEBDwBCAUMAAIA/QQH8CAAACwsEAQEBNw==",
    "memory_init.57.wasm": "AGFzbQEAAAABBAFgAAADAgEABQMBAAEHCAEEdGVzdAAADAEBChQBEgBCAUMAAIA/QwAAgD/8CAAACwsEAQEBNw==",
    "memory_init.58.wasm": "AGFzbQEAAAABBAFgAAADAgEABQMBAAEHCAEEdGVzdAAADAEBChEBDwBCAUMAAIA/QgH8CAAACwsEAQEBNw==",
    "memory_init.59.wasm": "AGFzbQEAAAABBAFgAAADAgEABQMBAAEHCAEEdGVzdAAADAEBChgBFgBCAUMAAIA/RAAAAAAAAPA//AgAAAsLBAEBATc=",
    "memory_init.6.wasm": "AGFzbQEAAAABBAFgAAADAgEABQMBAAEHCAEEdGVzdAAADAEBCgoBCAD8CQD8CQALCwQBAQE3",
    "memory_init.60.wasm": "AGFzbQEAAAABBAFgAAADAgEABQMBAAEHCAEEdGVzdAAADAEBCg4BDABCAUIBQQH8CAAACwsEAQEBNw==",
    "memory_init.61.wasm": "AGFzbQEAAAABBAFgAAADAgEABQMBAAEHCAEEdGVzdAAADAEBChEBDwBCAUIBQwAAgD/8CAAACwsEAQEBNw==",
    "memory_init.62.wasm": "AGFzbQEAAAABBAFgAAADAgEABQMBAAEHCAEEdGVzdAAADAEBCg4BDABCAUIBQgH8CAAACwsEAQEBNw==",
    "memory_init.63.wasm": "AGFzbQEAAAABBAFgAAADAgEABQMBAAEHCAEEdGVzdAAADAEBChUBEwBCAUIBRAAAAAAAAPA//AgAAAsLBAEBATc=",
    "memory_init.64.wasm": "AGFzbQEAAAABBAFgAAADAgEABQMBAAEHCAEEdGVzdAAADAEBChUBEwBCAUQAAAAAAADwP0EB/AgAAAsLBAEBATc=",
    "memory_init.65.wasm": "AGFzbQEAAAABBAFgAAADAgEABQMBAAEHCAEEdGVzdAAADAEBChgBFgBCAUQAAAAAAADwP0MAAIA//AgAAAsLBAEBATc=",
    "memory_init.66.wasm": "AGFzbQEAAAABBAFgAAADAgEABQMBAAEHCAEEdGVzdAAADAEBChUBEwBCAUQAAAAAAADwP0IB/AgAAAsLBAEBATc=",
    "memory_init.67.wasm": "AGFzbQEAAAABBAFgAAADAgEABQMBAAEHCAEEdGVzdAAADAEBChwBGgBCAUQAAAAAAADwP0QAAAAAAADwP/wIAAALCwQBAQE3",
    "memory_init.68.wasm": "AGFzbQEAAAABBAFgAAADAgEABQMBAAEHCAEEdGVzdAAADAEBChUBEwBEAAAAAAAA8D9BAUEB/AgAAAsLBAEBATc=",
    "memory_init.69.wasm": "AGFzbQEAAAABBAFgAAADAgEABQMBAAEHCAEEdGVzdAAADAEBChgBFgBEAAAAAAAA8D9BAUMAAIA//AgAAAsLBAEBATc=",
    "memory_init.7.wasm": "AGFzbQEAAAABBAFgAAADAgEABQMBAAEHCAEEdGVzdAAADAEBChIBEAD8CQBB0glBAUEB/AgAAAsLBAEBATc=",
    "memory_init.70.wasm": "AGFzbQEAAAABBAFgAAADAgEABQMBAAEHCAEEdGVzdAAADAEBChUBEwBEAAAAAAAA8D9BAUIB/AgAAAsLBAEBATc=",
    "memory_init.71.wasm": "AGFzbQEAAAABBAFgAAADAgEABQMBAAEHCAEEdGVzdAAADAEBChwBGgBEAAAAAAAA8D9BAUQAAAAAAADwP/wIAAALCwQBAQE3",
    "memory_init.72.wasm": "AGFzbQEAAAABBAFgAAADAgEABQMBAAEHCAEEdGVzdAAADAEBChgBFgBEAAAAAAAA8D9DAACAP0EB/AgAAAsLBAEBATc=",
    "memory_init.73.wasm": "AGFzbQEAAAABBAFgAAADAgEABQMBAAEHCAEEdGVzdAAADAEBChsBGQBEAAAAAAAA8D9DAACAP0MAAIA//AgAAAsLBAEBATc=",
    "memory_init.74.wasm": "AGFzbQEAAAABBAFgAAADAgEABQMBAAEHCAEEdGVzdAAADAEBChgBFgBEAAAAAAAA8D9DAACAP0IB/AgAAAsLBAEBATc=",
    "memory_init.75.wasm": "AGFzbQEAAAABBAFgAAADAgEABQMBAAEHCAEEdGVzdAAADAEBCh8BHQBEAAAAAAAA8D9DAACAP0QAAAAAAADwP/wIAAALCwQBAQE3",
    "memory_init.76.wasm": "AGFzbQEAAAABBAFgAAADAgEABQMBAAEHCAEEdGVzdAAADAEBChUBEwBEAAAAAAAA8D9CAUEB/AgAAAsLBAEBATc=",
    "memory_init.77.wasm": "AGFzbQEAAAABBAFgAAADAgEABQMBAAEHCAEEdGVzdAAADAEBChgBFgBEAAAAAAAA8D9CAUMAAIA//AgAAAsLBAEBATc=",
    "memory_init.78.wasm": "AGFzbQEAAAABBAFgAAADAgEABQMBAAEHCAEEdGVzdAAADAEBChUBEwBEAAAAAAAA8D9CAUIB/AgAAAsLBAEBATc=",
    "memory_init.79.wasm": "AGFzbQEAAAABBAFgAAADAgEABQMBAAEHCAEEdGVzdAAADAEBChwBGgBEAAAAAAAA8D9CAUQAAAAAAADwP/wIAAALCwQBAQE3",
    "memory_init.8.wasm": "AGFzbQEAAAABBAFgAAADAgEABQMBAAEHCAEEdGVzdAAADAEBCg8BDQBB0glBAUEB/AgAAAsLBwEAQQALATc=",
    "memory_init.80.wasm": "AGFzbQEAAAABBAFgAAADAgEABQMBAAEHCAEEdGVzdAAADAEBChwBGgBEAAAAAAAA8D9EAAAAAAAA8D9BAfwIAAALCwQBAQE3",
    "memory_init.81.wasm": "AGFzbQEAAAABBAFgAAADAgEABQMBAAEHCAEEdGVzdAAADAEBCh8BHQBEAAAAAAAA8D9EAAAAAAAA8D9DAACAP/wIAAALCwQBAQE3",
    "memory_init.82.wasm": "AGFzbQEAAAABBAFgAAADAgEABQMBAAEHCAEEdGVzdAAADAEBChwBGgBEAAAAAAAA8D9EAAAAAAAA8D9CAfwIAAALCwQBAQE3",
    "memory_init.83.wasm": "AGFzbQEAAAABBAFgAAADAgEABQMBAAEHCAEEdGVzdAAADAEBCiMBIQBEAAAAAAAA8D9EAAAAAAAA8D9EAAAAAAAA8D/8CAAACwsEAQEBNw==",
    "memory_init.84.wasm": "AGFzbQEAAAABDQJgA39/fwF/YAJ/fwADAwIAAQUEAQEBAQcUAgpjaGVja1JhbmdlAAADcnVuAAEMAQEKNgInAANAIAAgAUYEQEF/DwsgAC0AACACRgRAIABBAWohAAwBCwsgAA8LDAAgAEEAIAH8CAAACwsTAQEQQkJCQkJCQkJCQkJCQkJCQg==",
    "memory_init.85.wasm": "AGFzbQEAAAABDQJgA39/fwF/YAJ/fwADAwIAAQUEAQEBAQcUAgpjaGVja1JhbmdlAAADcnVuAAEMAQEKNgInAANAIAAgAUYEQEF/DwsgAC0AACACRgRAIABBAWohAAwBCwsgAA8LDAAgAEEAIAH8CAAACwsTAQEQQkJCQkJCQkJCQkJCQkJCQg==",
    "memory_init.86.wasm": "AGFzbQEAAAABDQJgA39/fwF/YAJ/fwADAwIAAQUEAQEBAQcUAgpjaGVja1JhbmdlAAADcnVuAAEMAQEKNgInAANAIAAgAUYEQEF/DwsgAC0AACACRgRAIABBAWohAAwBCwsgAA8LDAAgAEEAIAH8CAAACwsTAQEQQkJCQkJCQkJCQkJCQkJCQg==",
    "memory_init.87.wasm": "AGFzbQEAAAABDQJgA39/fwF/YAJ/fwADAwIAAQUEAQEBAQcUAgpjaGVja1JhbmdlAAADcnVuAAEMAQEKNgInAANAIAAgAUYEQEF/DwsgAC0AACACRgRAIABBAWohAAwBCwsgAA8LDAAgAEEAIAH8CAAACwsTAQEQQkJCQkJCQkJCQkJCQkJCQg==",
    "memory_init.88.wasm": "AGFzbQEAAAABDQJgA39/fwF/YAJ/fwADAwIAAQUDAQABBxQCCmNoZWNrUmFuZ2UAAANydW4AAQwBAQo2AicAA0AgACABRgRAQX8PCyAALQAAIAJGBEAgAEEBaiEADAELCyAADwsMACAAQQAgAfwIAAALCxMBARBCQkJCQkJCQkJCQkJCQkJC",
    "memory_init.89.wasm": "AGFzbQEAAAABDQJgA39/fwF/YAJ/fwADAwIAAQUDAQABBxQCCmNoZWNrUmFuZ2UAAANydW4AAQwBAQo2AicAA0AgACABRgRAQX8PCyAALQAAIAJGBEAgAEEBaiEADAELCyAADwsMACAAQQAgAfwIAAALCxMBARBCQkJCQkJCQkJCQkJCQkJC",
    "memory_init.9.wasm": "AGFzbQEAAAABBAFgAAADAgEABwgBBHRlc3QAAAoPAQ0AQdIJQQFBAfwIAQAL",
    "memory_init.90.wasm": "AGFzbQEAAAABBAFgAAADAgEABQMBAAEMAUEKDgEMAEEAQQBBAPwIQAALC4MBQQEAAQABAAEAAQABAAEAAQABAAEAAQABAAEAAQABAAEAAQABAAEAAQABAAEAAQABAAEAAQABAAEAAQABAAEAAQABAAEAAQABAAEAAQABAAEAAQABAAEAAQABAAEAAQABAAEAAQABAAEAAQABAAEAAQABAAEAAQABAAEAAQABAAEAAQA="
  },
  "spec": {"source_filename": "/workspace/wasm-spec/test/core/memory_init.wast",
 "commands": [
  {"type": "module", "line": 6, "filename": "memory_init.0.wasm"}, 
  {"type": "action", "line": 17, "action": {"type": "invoke", "field": "test", "args": []}, "expected": []}, 
  {"type": "assert_return", "line": 19, "action": {"type": "invoke", "field": "load8_u", "args": [{"type": "i32", "value": "0"}]}, "expected": [{"type": "i32", "value": "0"}]}, 
  {"type": "assert_return", "line": 20, "action": {"type": "invoke", "field": "load8_u", "args": [{"type": "i32", "value": "1"}]}, "expected": [{"type": "i32", "value": "0"}]}, 
  {"type": "assert_return", "line": 21, "action": {"type": "invoke", "field": "load8_u", "args": [{"type": "i32", "value": "2"}]}, "expected": [{"type": "i32", "value": "3"}]}, 
  {"type": "assert_return", "line": 22, "action": {"type": "invoke", "field": "load8_u", "args": [{"type": "i32", "value": "3"}]}, "expected": [{"type": "i32", "value": "1"}]}, 
  {"type": "assert_return", "line": 23, "action": {"type": "invoke", "field": "load8_u", "args": [{"type": "i32", "value": "4"}]}, "expected": [{"type": "i32", "value": "4"}]}, 
  {"type": "assert_return", "line": 24, "action": {"type": "invoke", "field": "load8_u", "args": [{"type": "i32", "value": "5"}]}, "expected": [{"type": "i32", "value": "1"}]}, 
  {"type": "assert_return", "line": 25, "action": {"type": "invoke", "field": "load8_u", "args": [{"type": "i32", "value": "6"}]}, "expected": [{"type": "i32", "value": "0"}]}, 
  {"type": "assert_return", "line": 26, "action": {"type": "invoke", "field": "load8_u", "args": [{"type": "i32", "value": "7"}]}, "expected": [{"type": "i32", "value": "0"}]}, 
  {"type": "assert_return", "line": 27, "action": {"type": "invoke", "field": "load8_u", "args": [{"type": "i32", "value": "8"}]}, "expected": [{"type": "i32", "value": "0"}]}, 
  {"type": "assert_return", "line": 28, "action": {"type": "invoke", "field": "load8_u", "args": [{"type": "i32", "value": "9"}]}, "expected": [{"type": "i32", "value": "0"}]}, 
  {"type": "assert_return", "line": 29, "action": {"type": "invoke", "field": "load8_u", "args": [{"type": "i32", "value": "10"}]}, "expected": [{"type": "i32", "value": "0"}]}, 
  {"type": "assert_return", "line": 30, "action": {"type": "invoke", "field": "load8_u", "args": [{"type": "i32", "value": "11"}]}, "expected": [{"type": "i32", "value": "0"}]}, 
  {"type": "assert_return", "line": 31, "action": {"type": "invoke", "field": "load8_u", "args": [{"type": "i32", "value": "12"}]}, "expected": [{"type": "i32", "value": "7"}]}, 
  {"type": "assert_return", "line": 32, "action": {"type": "invoke", "field": "load8_u", "args": [{"type": "i32", "value": "13"}]}, "expected": [{"type": "i32", "value": "5"}]}, 
  {"type": "assert_return", "line": 33, "action": {"type": "invoke", "field": "load8_u", "args": [{"type": "i32", "value": "14"}]}, "expected": [{"type": "i32", "value": "2"}]}, 
  {"type": "assert_return", "line": 34, "action": {"type": "invoke", "field": "load8_u", "args": [{"type": "i32", "value": "15"}]}, "expected": [{"type": "i32", "value": "3"}]}, 
  {"type": "assert_return", "line": 35, "action": {"type": "invoke", "field": "load8_u", "args": [{"type": "i32", "value": "16"}]}, "expected": [{"type": "i32", "value": "6"}]}, 
  {"type": "assert_return", "line": 36, "action": {"type": "invoke", "field": "load8_u", "args": [{"type": "i32", "value": "17"}]}, "expected": [{"type": "i32", "value": "0"}]}, 
  {"type": "assert_return", "line": 37, "action": {"type": "invoke", "field": "load8_u", "args": [{"type": "i32", "value": "18"}]}, "expected": [{"type": "i32", "value": "0"}]}, 
  {"type": "assert_return", "line": 38, "action": {"type": "invoke", "field": "load8_u", "args": [{"type": "i32", "value": "19"}]}, "expected": [{"type": "i32", "value": "0"}]}, 
  {"type": "assert_return", "line": 39, "action": {"type": "invoke", "field": "load8_u", "args": [{"type": "i32", "value": "20"}]}, "expected": [{"type": "i32", "value": "0"}]}, 
  {"type": "assert_return", "line": 40, "action": {"type": "invoke", "field": "load8_u", "args": [{"type": "i32", "value": "21"}]}, "expected": [{"type": "i32", "value": "0"}]}, 
  {"type": "assert_return", "line": 41, "action": {"type": "invoke", "field": "load8_u", "args": [{"type": "i32", "value": "22"}]}, "expected": [{"type": "i32", "value": "0"}]}, 
  {"type": "assert_return", "line": 42, "action": {"type": "invoke", "field": "load8_u", "args": [{"type": "i32", "value": "23"}]}, "expected": [{"type": "i32", "value": "0"}]}, 
  {"type": "assert_return", "line": 43, "action": {"type": "invoke", "field": "load8_u", "args": [{"type": "i32", "value": "24"}]}, "expected": [{"type": "i32", "value": "0"}]}, 
  {"type": "assert_return", "line": 44, "action": {"type": "invoke", "field": "load8_u", "args": [{"type": "i32", "value": "25"}]}, "expected": [{"type": "i32", "value": "0"}]}, 
  {"type": "assert_return", "line": 45, "action": {"type": "invoke", "field": "load8_u", "args": [{"type": "i32", "value": "26"}]}, "expected": [{"type": "i32", "value": "0"}]}, 
  {"type": "assert_return", "line": 46, "action": {"type": "invoke", "field": "load8_u", "args": [{"type": "i32", "value": "27"}]}, "expected": [{"type": "i32", "value": "0"}]}, 
  {"type": "assert_return", "line": 47, "action": {"type": "invoke", "field": "load8_u", "args": [{"type": "i32", "value": "28"}]}, "expected": [{"type": "i32", "value": "0"}]}, 
  {"type": "assert_return", "line": 48, "action": {"type": "invoke", "field": "load8_u", "args": [{"type": "i32", "value": "29"}]}, "expected": [{"type": "i32", "value": "0"}]}, 
  {"type": "module", "line": 50, "filename": "memory_init.1.wasm"}, 
  {"type": "action", "line": 61, "action": {"type": "invoke", "field": "test", "args": []}, "expected": []}, 
  {"type": "assert_return", "line": 63, "action": {"type": "invoke", "field": "load8_u", "args": [{"type": "i32", "value": "0"}]}, "expected": [{"type": "i32", "value": "0"}]}, 
  {"type": "assert_return", "line": 64, "action": {"type": "invoke", "field": "load8_u", "args": [{"type": "i32", "value": "1"}]}, "expected": [{"type": "i32", "value": "0"}]}, 
  {"type": "assert_return", "line": 65, "action": {"type": "invoke", "field": "load8_u", "args": [{"type": "i32", "value": "2"}]}, "expected": [{"type": "i32", "value": "3"}]}, 
  {"type": "assert_return", "line": 66, "action": {"type": "invoke", "field": "load8_u", "args": [{"type": "i32", "value": "3"}]}, "expected": [{"type": "i32", "value": "1"}]}, 
  {"type": "assert_return", "line": 67, "action": {"type": "invoke", "field": "load8_u", "args": [{"type": "i32", "value": "4"}]}, "expected": [{"type": "i32", "value": "4"}]}, 
  {"type": "assert_return", "line": 68, "action": {"type": "invoke", "field": "load8_u", "args": [{"type": "i32", "value": "5"}]}, "expected": [{"type": "i32", "value": "1"}]}, 
  {"type": "assert_return", "line": 69, "action": {"type": "invoke", "field": "load8_u", "args": [{"type": "i32", "value": "6"}]}, "expected": [{"type": "i32", "value": "0"}]}, 
  {"type": "assert_return", "line": 70, "action": {"type": "invoke", "field": "load8_u", "args": [{"type": "i32", "value": "7"}]}, "expected": [{"type": "i32", "value": "2"}]}, 
  {"type": "assert_return", "line": 71, "action": {"type": "invoke", "field": "load8_u", "args": [{"type": "i32", "value": "8"}]}, "expected": [{"type": "i32", "value": "7"}]}, 
  {"type": "assert_return", "line": 72, "action": {"type": "invoke", "field": "load8_u", "args": [{"type": "i32", "value": "9"}]}, "expected": [{"type": "i32", "value": "1"}]}, 
  {"type": "assert_return", "line": 73, "action": {"type": "invoke", "field": "load8_u", "args": [{"type": "i32", "value": "10"}]}, "expected": [{"type": "i32", "value": "8"}]}, 
  {"type": "assert_return", "line": 74, "action": {"type": "invoke", "field": "load8_u", "args": [{"type": "i32", "value": "11"}]}, "expected": [{"type": "i32", "value": "0"}]}, 
  {"type": "assert_return", "line": 75, "action": {"type": "invoke", "field": "load8_u", "args": [{"type": "i32", "value": "12"}]}, "expected": [{"type": "i32", "value": "7"}]}, 
  {"type": "assert_return", "line": 76, "action": {"type": "invoke", "field": "load8_u", "args": [{"type": "i32", "value": "13"}]}, "expected": [{"type": "i32", "value": "5"}]}, 
  {"type": "assert_return", "line": 77, "action": {"type": "invoke", "field": "load8_u", "args": [{"type": "i32", "value": "14"}]}, "expected": [{"type": "i32", "value": "2"}]}, 
  {"type": "assert_return", "line": 78, "action": {"type": "invoke", "field": "load8_u", "args": [{"type": "i32", "value": "15"}]}, "expected": [{"type": "i32", "value": "3"}]}, 
  {"type": "assert_return", "line": 79, "action": {"type": "invoke", "field": "load8_u", "args": [{"type": "i32", "value": "16"}]}, "expected": [{"type": "i32", "value": "6"}]}, 
  {"type": "assert_return", "line": 80, "action": {"type": "invoke", "field": "load8_u", "args": [{"type": "i32", "value": "17"}]}, "expected": [{"type": "i32", "value": "0"}]}, 
  {"type": "assert_return", "line": 81, "action": {"type": "invoke", "field": "load8_u", "args": [{"type": "i32", "value": "18"}]}, "expected": [{"type": "i32", "value": "0"}]}, 
  {"type": "assert_return", "line": 82, "action": {"type": "invoke", "field": "load8_u", "args": [{"type": "i32", "value": "19"}]}, "expected": [{"type": "i32", "value": "0"}]}, 
  {"type": "assert_return", "line": 83, "action": {"type": "invoke", "field": "load8_u", "args": [{"type": "i32", "value": "20"}]}, "expected": [{"type": "i32", "value": "0"}]}, 
  {"type": "assert_return", "line": 84, "action": {"type": "invoke", "field": "load8_u", "args": [{"type": "i32", "value": "21"}]}, "expected": [{"type": "i32", "value": "0"}]}, 
  {"type": "assert_return", "line": 85, "action": {"type": "invoke", "field": "load8_u", "args": [{"type": "i32", "value": "22"}]}, "expected": [{"type": "i32", "value": "0"}]}, 
  {"type": "assert_return", "line": 86, "action": {"type": "invoke", "field": "load8_u", "args": [{"type": "i32", "value": "23"}]}, "expected": [{"type": "i32", "value": "0"}]}, 
  {"type": "assert_return", "line": 87, "action": {"type": "invoke", "field": "load8_u", "args": [{"type": "i32", "value": "24"}]}, "expected": [{"type": "i32", "value": "0"}]}, 
  {"type": "assert_return", "line": 88, "action": {"type": "invoke", "field": "load8_u", "args": [{"type": "i32", "value": "25"}]}, "expected": [{"type": "i32", "value": "0"}]}, 
  {"type": "assert_return", "line": 89, "action": {"type": "invoke", "field": "load8_u", "args": [{"type": "i32", "value": "26"}]}, "expected": [{"type": "i32", "value": "0"}]}, 
  {"type": "assert_return", "line": 90, "action": {"type": "invoke", "field": "load8_u", "args": [{"type": "i32", "value": "27"}]}, "expected": [{"type": "i32", "value": "0"}]}, 
  {"type": "assert_return", "line": 91, "action": {"type": "invoke", "field": "load8_u", "args": [{"type": "i32", "value": "28"}]}, "expected": [{"type": "i32", "value": "0"}]}, 
  {"type": "assert_return", "line": 92, "action": {"type": "invoke", "field": "load8_u", "args": [{"type": "i32", "value": "29"}]}, "expected": [{"type": "i32", "value": "0"}]}, 
  {"type": "module", "line": 94, "filename": "memory_init.2.wasm"}, 
  {"type": "action", "line": 105, "action": {"type": "invoke", "field": "test", "args": []}, "expected": []}, 
  {"type": "assert_return", "line": 107, "action": {"type": "invoke", "field": "load8_u", "args": [{"type": "i32", "value": "0"}]}, "expected": [{"type": "i32", "value": "0"}]}, 
  {"type": "assert_return", "line": 108, "action": {"type": "invoke", "field": "load8_u", "args": [{"type": "i32", "value": "1"}]}, "expected": [{"type": "i32", "value": "0"}]}, 
  {"type": "assert_return", "line": 109, "action": {"type": "invoke", "field": "load8_u", "args": [{"type": "i32", "value": "2"}]}, "expected": [{"type": "i32", "value": "3"}]}, 
  {"type": "assert_return", "line": 110, "action": {"type": "invoke", "field": "load8_u", "args": [{"type": "i32", "value": "3"}]}, "expected": [{"type": "i32", "value": "1"}]}, 
  {"type": "assert_return", "line": 111, "action": {"type": "invoke", "field": "load8_u", "args": [{"type": "i32", "value": "4"}]}, "expected": [{"type": "i32", "value": "4"}]}, 
  {"type": "assert_return", "line": 112, "action": {"type": "invoke", "field": "load8_u", "args": [{"type": "i32", "value": "5"}]}, "expected": [{"type": "i32", "value": "1"}]}, 
  {"type": "assert_return", "line": 113, "action": {"type": "invoke", "field": "load8_u", "args": [{"type": "i32", "value": "6"}]}, "expected": [{"type": "i32", "value": "0"}]}, 
  {"type": "assert_return", "line": 114, "action": {"type": "invoke", "field": "load8_u", "args": [{"type": "i32", "value": "7"}]}, "expected": [{"type": "i32", "value": "0"}]}, 
  {"type": "assert_return", "line": 115, "action": {"type": "invoke", "field": "load8_u", "args": [{"type": "i32", "value": "8"}]}, "expected": [{"type": "i32", "value": "0"}]}, 
  {"type": "assert_return", "line": 116, "action": {"type": "invoke", "field": "load8_u", "args": [{"type": "i32", "value": "9"}]}, "expected": [{"type": "i32", "value": "0"}]}, 
  {"type": "assert_return", "line": 117, "action": {"type": "invoke", "field": "load8_u", "args": [{"type": "i32", "value": "10"}]}, "expected": [{"type": "i32", "value": "0"}]}, 
  {"type": "assert_return", "line": 118, "action": {"type": "invoke", "field": "load8_u", "args": [{"type": "i32", "value": "11"}]}, "expected": [{"type": "i32", "value": "0"}]}, 
  {"type": "assert_return", "line": 119, "action": {"type": "invoke", "field": "load8_u", "args": [{"type": "i32", "value": "12"}]}, "expected": [{"type": "i32", "value": "7"}]}, 
  {"type": "assert_return", "line": 120, "action": {"type": "invoke", "field": "load8_u", "args": [{"type": "i32", "value": "13"}]}, "expected": [{"type": "i32", "value": "5"}]}, 
  {"type": "assert_return", "line": 121, "action": {"type": "invoke", "field": "load8_u", "args": [{"type": "i32", "value": "14"}]}, "expected": [{"type": "i32", "value": "2"}]}, 
  {"type": "assert_return", "line": 122, "action": {"type": "invoke", "field": "load8_u", "args": [{"type": "i32", "value": "15"}]}, "expected": [{"type": "i32", "value": "9"}]}, 
  {"type": "assert_return", "line": 123, "action": {"type": "invoke", "field": "load8_u", "args": [{"type": "i32", "value": "16"}]}, "expected": [{"type": "i32", "value": "2"}]}, 
  {"type": "assert_return", "line": 124, "action": {"type": "invoke", "field": "load8_u", "args": [{"type": "i32", "value": "17"}]}, "expected": [{"type": "i32", "value": "7"}]}, 
  {"type": "assert_return", "line": 125, "action": {"type": "invoke", "field": "load8_u", "args": [{"type": "i32", "value": "18"}]}, "expected": [{"type": "i32", "value": "0"}]}, 
  {"type": "assert_return", "line": 126, "action": {"type": "invoke", "field": "load8_u", "args": [{"type": "i32", "value": "19"}]}, "expected": [{"type": "i32", "value": "0"}]}, 
  {"type": "assert_return", "line": 127, "action": {"type": "invoke", "field": "load8_u", "args": [{"type": "i32", "value": "20"}]}, "expected": [{"type": "i32", "value": "0"}]}, 
  {"type": "assert_return", "line": 128, "action": {"type": "invoke", "field": "load8_u", "args": [{"type": "i32", "value": "21"}]}, "expected": [{"type": "i32", "value": "0"}]}, 
  {"type": "assert_return", "line": 129, "action": {"type": "invoke", "field": "load8_u", "args": [{"type": "i32", "value": "22"}]}, "expected": [{"type": "i32", "value": "0"}]}, 
  {"type": "assert_return", "line": 130, "action": {"type": "invoke", "field": "load8_u", "args": [{"type": "i32", "value": "23"}]}, "expected": [{"type": "i32", "value": "0"}]}, 
  {"type": "assert_return", "line": 131, "action": {"type": "invoke", "field": "load8_u", "args": [{"type": "i32", "value": "24"}]}, "expected": [{"type": "i32", "value": "0"}]}, 
  {"type": "assert_return", "line": 132, "action": {"type": "invoke", "field": "load8_u", "args": [{"type": "i32", "value": "25"}]}, "expected": [{"type": "i32", "value": "0"}]}, 
  {"type": "assert_return", "line": 133, "action": {"type": "invoke", "field": "load8_u", "args": [{"type": "i32", "value": "26"}]}, "expected": [{"type": "i32", "value": "0"}]}, 
  {"type": "assert_return", "line": 134, "action": {"type": "invoke", "field": "load8_u", "args": [{"type": "i32", "value": "27"}]}, "expected": [{"type": "i32", "value": "0"}]}, 
  {"type": "assert_return", "line": 135, "action": {"type": "invoke", "field": "load8_u", "args": [{"type": "i32", "value": "28"}]}, "expected": [{"type": "i32", "value": "0"}]}, 
  {"type": "assert_return", "line": 136, "action": {"type": "invoke", "field": "load8_u", "args": [{"type": "i32", "value": "29"}]}, "expected": [{"type": "i32", "value": "0"}]}, 
  {"type": "module", "line": 138, "filename": "memory_init.3.wasm"}, 
  {"type": "action", "line": 157, "action": {"type": "invoke", "field": "test", "args": []}, "expected": []}, 
  {"type": "assert_return", "line": 159, "action": {"type": "invoke", "field": "load8_u", "args": [{"type": "i32", "value": "0"}]}, "expected": [{"type": "i32", "value": "0"}]}, 
  {"type": "assert_return", "line": 160, "action": {"type": "invoke", "field": "load8_u", "args": [{"type": "i32", "value": "1"}]}, "expected": [{"type": "i32", "value": "0"}]}, 
  {"type": "assert_return", "line": 161, "action": {"type": "invoke", "field": "load8_u", "args": [{"type": "i32", "value": "2"}]}, "expected": [{"type": "i32", "value": "3"}]}, 
  {"type": "assert_return", "line": 162, "action": {"type": "invoke", "field": "load8_u", "args": [{"type": "i32", "value": "3"}]}, "expected": [{"type": "i32", "value": "1"}]}, 
  {"type": "assert_return", "line": 163, "action": {"type": "invoke", "field": "load8_u", "args": [{"type": "i32", "value": "4"}]}, "expected": [{"type": "i32", "value": "4"}]}, 
  {"type": "assert_return", "line": 164, "action": {"type": "invoke", "field": "load8_u", "args": [{"type": "i32", "value": "5"}]}, "expected": [{"type": "i32", "value": "1"}]}, 
  {"type": "assert_return", "line": 165, "action": {"type": "invoke", "field": "load8_u", "args": [{"type": "i32", "value": "6"}]}, "expected": [{"type": "i32", "value": "0"}]}, 
  {"type": "assert_return", "line": 166, "action": {"type": "invoke", "field": "load8_u", "args": [{"type": "i32", "value": "7"}]}, "expected": [{"type": "i32", "value": "2"}]}, 
  {"type": "assert_return", "line": 167, "action": {"type": "invoke", "field": "load8_u", "args": [{"type": "i32", "value": "8"}]}, "expected": [{"type": "i32", "value": "7"}]}, 
  {"type": "assert_return", "line": 168, "action": {"type": "invoke", "field": "load8_u", "args": [{"type": "i32", "value": "9"}]}, "expected": [{"type": "i32", "value": "1"}]}, 
  {"type": "assert_return", "line": 169, "action": {"type": "invoke", "field": "load8_u", "args": [{"type": "i32", "value": "10"}]}, "expected": [{"type": "i32", "value": "8"}]}, 
  {"type": "assert_return", "line": 170, "action": {"type": "invoke", "field": "load8_u", "args": [{"type": "i32", "value": "11"}]}, "expected": [{"type": "i32", "value": "0"}]}, 
  {"type": "assert_return", "line": 171, "action": {"type": "invoke", "field": "load8_u", "args": [{"type": "i32", "value": "12"}]}, "expected": [{"type": "i32", "value": "7"}]}, 
  {"type": "assert_return", "line": 172, "action": {"type": "invoke", "field": "load8_u", "args": [{"type": "i32", "value": "13"}]}, "expected": [{"type": "i32", "value": "0"}]}, 
  {"type": "assert_return", "line": 173, "action": {"type": "invoke", "field": "load8_u", "args": [{"type": "i32", "value": "14"}]}, "expected": [{"type": "i32", "value": "7"}]}, 
  {"type": "assert_return", "line": 174, "action": {"type": "invoke", "field": "load8_u", "args": [{"type": "i32", "value": "15"}]}, "expected": [{"type": "i32", "value": "5"}]}, 
  {"type": "assert_return", "line": 175, "action": {"type": "invoke", "field": "load8_u", "args": [{"type": "i32", "value": "16"}]}, "expected": [{"type": "i32", "value": "2"}]}, 
  {"type": "assert_return", "line": 176, "action": {"type": "invoke", "field": "load8_u", "args": [{"type": "i32", "value": "17"}]}, "expected": [{"type": "i32", "value": "7"}]}, 
  {"type": "assert_return", "line": 177, "action": {"type": "invoke", "field": "load8_u", "args": [{"type": "i32", "value": "18"}]}, "expected": [{"type": "i32", "value": "0"}]}, 
  {"type": "assert_return", "line": 178, "action": {"type": "invoke", "field": "load8_u", "args": [{"type": "i32", "value": "19"}]}, "expected": [{"type": "i32", "value": "9"}]}, 
  {"type": "assert_return", "line": 179, "action": {"type": "invoke", "field": "load8_u", "args": [{"type": "i32", "value": "20"}]}, "expected": [{"type": "i32", "value": "0"}]}, 
  {"type": "assert_return", "line": 180, "action": {"type": "invoke", "field": "load8_u", "args": [{"type": "i32", "value": "21"}]}, "expected": [{"type": "i32", "value": "7"}]}, 
  {"type": "assert_return", "line": 181, "action": {"type": "invoke", "field": "load8_u", "args": [{"type": "i32", "value": "22"}]}, "expected": [{"type": "i32", "value": "0"}]}, 
  {"type": "assert_return", "line": 182, "action": {"type": "invoke", "field": "load8_u", "args": [{"type": "i32", "value": "23"}]}, "expected": [{"type": "i32", "value": "8"}]}, 
  {"type": "assert_return", "line": 183, "action": {"type": "invoke", "field": "load8_u", "args": [{"type": "i32", "value": "24"}]}, "expected": [{"type": "i32", "value": "8"}]}, 
  {"type": "assert_return", "line": 184, "action": {"type": "invoke", "field": "load8_u", "args": [{"type": "i32", "value": "25"}]}, "expected": [{"type": "i32", "value": "0"}]}, 
  {"type": "assert_return", "line": 185, "action": {"type": "invoke", "field": "load8_u", "args": [{"type": "i32", "value": "26"}]}, "expected": [{"type": "i32", "value": "0"}]}, 
  {"type": "assert_return", "line": 186, "action": {"type": "invoke", "field": "load8_u", "args": [{"type": "i32", "value": "27"}]}, "expected": [{"type": "i32", "value": "0"}]}, 
  {"type": "assert_return", "line": 187, "action": {"type": "invoke", "field": "load8_u", "args": [{"type": "i32", "value": "28"}]}, "expected": [{"type": "i32", "value": "0"}]}, 
  {"type": "assert_return", "line": 188, "action": {"type": "invoke", "field": "load8_u", "args": [{"type": "i32", "value": "29"}]}, "expected": [{"type": "i32", "value": "0"}]}, 
  {"type": "assert_invalid", "line": 190, "filename": "memory_init.4.wasm", "text": "unknown data segment", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 196, "filename": "memory_init.5.wasm", "text": "unknown data segment", "module_type": "binary"}, 
  {"type": "module", "line": 203, "filename": "memory_init.6.wasm"}, 
  {"type": "action", "line": 209, "action": {"type": "invoke", "field": "test", "args": []}, "expected": []}, 
  {"type": "module", "line": 211, "filename": "memory_init.7.wasm"}, 
  {"type": "assert_trap", "line": 217, "action": {"type": "invoke", "field": "test", "args": []}, "text": "out of bounds memory access", "expected": []}, 
  {"type": "module", "line": 219, "filename": "memory_init.8.wasm"}, 
  {"type": "assert_trap", "line": 224, "action": {"type": "invoke", "field": "test", "args": []}, "text": "out of bounds memory access", "expected": []}, 
  {"type": "assert_invalid", "line": 227, "filename": "memory_init.9.wasm", "text": "unknown memory 0", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 233, "filename": "memory_init.10.wasm", "text": "unknown data segment 1", "module_type": "binary"}, 
  {"type": "module", "line": 240, "filename": "memory_init.11.wasm"}, 
  {"type": "action", "line": 246, "action": {"type": "invoke", "field": "test", "args": []}, "expected": []}, 
  {"type": "module", "line": 248, "filename": "memory_init.12.wasm"}, 
  {"type": "assert_trap", "line": 253, "action": {"type": "invoke", "field": "test", "args": []}, "text": "out of bounds memory access", "expected": []}, 
  {"type": "module", "line": 255, "filename": "memory_init.13.wasm"}, 
  {"type": "assert_trap", "line": 260, "action": {"type": "invoke", "field": "test", "args": []}, "text": "out of bounds memory access", "expected": []}, 
  {"type": "module", "line": 262, "filename": "memory_init.14.wasm"}, 
  {"type": "assert_trap", "line": 267, "action": {"type": "invoke", "field": "test", "args": []}, "text": "out of bounds memory access", "expected": []}, 
  {"type": "module", "line": 269, "filename": "memory_init.15.wasm"}, 
  {"type": "assert_trap", "line": 274, "action": {"type": "invoke", "field": "test", "args": []}, "text": "out of bounds memory access", "expected": []}, 
  {"type": "module", "line": 276, "filename": "memory_init.16.wasm"}, 
  {"type": "action", "line": 281, "action": {"type": "invoke", "field": "test", "args": []}, "expected": []}, 
  {"type": "module", "line": 283, "filename": "memory_init.17.wasm"}, 
  {"type": "assert_trap", "line": 288, "action": {"type": "invoke", "field": "test", "args": []}, "text": "out of bounds memory access", "expected": []}, 
  {"type": "module", "line": 290, "filename": "memory_init.18.wasm"}, 
  {"type": "action", "line": 295, "action": {"type": "invoke", "field": "test", "args": []}, "expected": []}, 
  {"type": "module", "line": 297, "filename": "memory_init.19.wasm"}, 
  {"type": "action", "line": 302, "action": {"type": "invoke", "field": "test", "args": []}, "expected": []}, 
  {"type": "module", "line": 304, "filename": "memory_init.20.wasm"}, 
  {"type": "assert_trap", "line": 309, "action": {"type": "invoke", "field": "test", "args": []}, "text": "out of bounds memory access", "expected": []}, 
  {"type": "assert_invalid", "line": 312, "filename": "memory_init.21.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 320, "filename": "memory_init.22.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 328, "filename": "memory_init.23.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 336, "filename": "memory_init.24.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 344, "filename": "memory_init.25.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 352, "filename": "memory_init.26.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 360, "filename": "memory_init.27.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 368, "filename": "memory_init.28.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 376, "filename": "memory_init.29.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 384, "filename": "memory_init.30.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 392, "filename": "memory_init.31.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 400, "filename": "memory_init.32.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 408, "filename": "memory_init.33.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 416, "filename": "memory_init.34.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 424, "filename": "memory_init.35.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 432, "filename": "memory_init.36.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 440, "filename": "memory_init.37.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 448, "filename": "memory_init.38.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 456, "filename": "memory_init.39.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 464, "filename": "memory_init.40.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 472, "filename": "memory_init.41.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 480, "filename": "memory_init.42.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 488, "filename": "memory_init.43.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 496, "filename": "memory_init.44.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 504, "filename": "memory_init.45.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 512, "filename": "memory_init.46.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 520, "filename": "memory_init.47.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 528, "filename": "memory_init.48.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 536, "filename": "memory_init.49.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 544, "filename": "memory_init.50.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 552, "filename": "memory_init.51.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 560, "filename": "memory_init.52.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 568, "filename": "memory_init.53.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 576, "filename": "memory_init.54.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 584, "filename": "memory_init.55.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 592, "filename": "memory_init.56.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 600, "filename": "memory_init.57.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 608, "filename": "memory_init.58.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 616, "filename": "memory_init.59.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 624, "filename": "memory_init.60.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 632, "filename": "memory_init.61.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 640, "filename": "memory_init.62.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 648, "filename": "memory_init.63.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 656, "filename": "memory_init.64.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 664, "filename": "memory_init.65.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 672, "filename": "memory_init.66.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 680, "filename": "memory_init.67.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 688, "filename": "memory_init.68.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 696, "filename": "memory_init.69.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 704, "filename": "memory_init.70.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 712, "filename": "memory_init.71.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 720, "filename": "memory_init.72.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 728, "filename": "memory_init.73.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 736, "filename": "memory_init.74.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 744, "filename": "memory_init.75.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 752, "filename": "memory_init.76.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 760, "filename": "memory_init.77.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 768, "filename": "memory_init.78.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 776, "filename": "memory_init.79.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 784, "filename": "memory_init.80.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 792, "filename": "memory_init.81.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 800, "filename": "memory_init.82.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 808, "filename": "memory_init.83.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "module", "line": 815, "filename": "memory_init.84.wasm"}, 
  {"type": "assert_trap", "line": 833, "action": {"type": "invoke", "field": "run", "args": [{"type": "i32", "value": "65528"}, {"type": "i32", "value": "16"}]}, "text": "out of bounds memory access", "expected": []}, 
  {"type": "assert_return", "line": 836, "action": {"type": "invoke", "field": "checkRange", "args": [{"type": "i32", "value": "0"}, {"type": "i32", "value": "1"}, {"type": "i32", "value": "0"}]}, "expected": [{"type": "i32", "value": "4294967295"}]}, 
  {"type": "module", "line": 838, "filename": "memory_init.85.wasm"}, 
  {"type": "assert_trap", "line": 856, "action": {"type": "invoke", "field": "run", "args": [{"type": "i32", "value": "65527"}, {"type": "i32", "value": "16"}]}, "text": "out of bounds memory access", "expected": []}, 
  {"type": "assert_return", "line": 859, "action": {"type": "invoke", "field": "checkRange", "args": [{"type": "i32", "value": "0"}, {"type": "i32", "value": "1"}, {"type": "i32", "value": "0"}]}, "expected": [{"type": "i32", "value": "4294967295"}]}, 
  {"type": "module", "line": 861, "filename": "memory_init.86.wasm"}, 
  {"type": "assert_trap", "line": 879, "action": {"type": "invoke", "field": "run", "args": [{"type": "i32", "value": "65472"}, {"type": "i32", "value": "30"}]}, "text": "out of bounds memory access", "expected": []}, 
  {"type": "assert_return", "line": 882, "action": {"type": "invoke", "field": "checkRange", "args": [{"type": "i32", "value": "0"}, {"type": "i32", "value": "1"}, {"type": "i32", "value": "0"}]}, "expected": [{"type": "i32", "value": "4294967295"}]}, 
  {"type": "module", "line": 884, "filename": "memory_init.87.wasm"}, 
  {"type": "assert_trap", "line": 902, "action": {"type": "invoke", "field": "run", "args": [{"type": "i32", "value": "65473"}, {"type": "i32", "value": "31"}]}, "text": "out of bounds memory access", "expected": []}, 
  {"type": "assert_return", "line": 905, "action": {"type": "invoke", "field": "checkRange", "args": [{"type": "i32", "value": "0"}, {"type": "i32", "value": "1"}, {"type": "i32", "value": "0"}]}, "expected": [{"type": "i32", "value": "4294967295"}]}, 
  {"type": "module", "line": 907, "filename": "memory_init.88.wasm"}, 
  {"type": "assert_trap", "line": 925, "action": {"type": "invoke", "field": "run", "args": [{"type": "i32", "value": "65528"}, {"type": "i32", "value": "4294967040"}]}, "text": "out of bounds memory access", "expected": []}, 
  {"type": "assert_return", "line": 928, "action": {"type": "invoke", "field": "checkRange", "args": [{"type": "i32", "value": "0"}, {"type": "i32", "value": "1"}, {"type": "i32", "value": "0"}]}, "expected": [{"type": "i32", "value": "4294967295"}]}, 
  {"type": "module", "line": 930, "filename": "memory_init.89.wasm"}, 
  {"type": "assert_trap", "line": 948, "action": {"type": "invoke", "field": "run", "args": [{"type": "i32", "value": "0"}, {"type": "i32", "value": "4294967292"}]}, "text": "out of bounds memory access", "expected": []}, 
  {"type": "assert_return", "line": 951, "action": {"type": "invoke", "field": "checkRange", "args": [{"type": "i32", "value": "0"}, {"type": "i32", "value": "1"}, {"type": "i32", "value": "0"}]}, "expected": [{"type": "i32", "value": "4294967295"}]}, 
  {"type": "module", "line": 954, "filename": "memory_init.90.wasm"}]},
  "code": [
    "(module (memory (export \"memory0\") 1 1) (data (i32.const 2) \"\\03\\01\\04\\01\") (data \"\\02\\07\\01\\08\") (data (i32.const 12) \"\\07\\05\\02\\03\\06\") (data \"\\05\\09\\02\\07\\06\")\n  (func (export \"test\") (nop))\n  (func (export \"load8_u\") (param i32) (result i32) (i32.load8_u (local.get 0))))",
    "(invoke \"test\")",
    "(assert_return (invoke \"load8_u\" (i32.const 0)) (i32.const 0))",
    "(assert_return (invoke \"load8_u\" (i32.const 1)) (i32.const 0))",
    "(assert_return (invoke \"load8_u\" (i32.const 2)) (i32.const 3))",
    "(assert_return (invoke \"load8_u\" (i32.const 3)) (i32.const 1))",
    "(assert_return (invoke \"load8_u\" (i32.const 4)) (i32.const 4))",
    "(assert_return (invoke \"load8_u\" (i32.const 5)) (i32.const 1))",
    "(assert_return (invoke \"load8_u\" (i32.const 6)) (i32.const 0))",
    "(assert_return (invoke \"load8_u\" (i32.const 7)) (i32.const 0))",
    "(assert_return (invoke \"load8_u\" (i32.const 8)) (i32.const 0))",
    "(assert_return (invoke \"load8_u\" (i32.const 9)) (i32.const 0))",
    "(assert_return (invoke \"load8_u\" (i32.const 10)) (i32.const 0))",
    "(assert_return (invoke \"load8_u\" (i32.const 11)) (i32.const 0))",
    "(assert_return (invoke \"load8_u\" (i32.const 12)) (i32.const 7))",
    "(assert_return (invoke \"load8_u\" (i32.const 13)) (i32.const 5))",
    "(assert_return (invoke \"load8_u\" (i32.const 14)) (i32.const 2))",
    "(assert_return (invoke \"load8_u\" (i32.const 15)) (i32.const 3))",
    "(assert_return (invoke \"load8_u\" (i32.const 16)) (i32.const 6))",
    "(assert_return (invoke \"load8_u\" (i32.const 17)) (i32.const 0))",
    "(assert_return (invoke \"load8_u\" (i32.const 18)) (i32.const 0))",
    "(assert_return (invoke \"load8_u\" (i32.const 19)) (i32.const 0))",
    "(assert_return (invoke \"load8_u\" (i32.const 20)) (i32.const 0))",
    "(assert_return (invoke \"load8_u\" (i32.const 21)) (i32.const 0))",
    "(assert_return (invoke \"load8_u\" (i32.const 22)) (i32.const 0))",
    "(assert_return (invoke \"load8_u\" (i32.const 23)) (i32.const 0))",
    "(assert_return (invoke \"load8_u\" (i32.const 24)) (i32.const 0))",
    "(assert_return (invoke \"load8_u\" (i32.const 25)) (i32.const 0))",
    "(assert_return (invoke \"load8_u\" (i32.const 26)) (i32.const 0))",
    "(assert_return (invoke \"load8_u\" (i32.const 27)) (i32.const 0))",
    "(assert_return (invoke \"load8_u\" (i32.const 28)) (i32.const 0))",
    "(assert_return (invoke \"load8_u\" (i32.const 29)) (i32.const 0))",
    "(module (memory (export \"memory0\") 1 1) (data (i32.const 2) \"\\03\\01\\04\\01\") (data \"\\02\\07\\01\\08\") (data (i32.const 12) \"\\07\\05\\02\\03\\06\") (data \"\\05\\09\\02\\07\\06\")\n  (func (export \"test\") (memory.init 1 (i32.const 7) (i32.const 0) (i32.const 4)))\n  (func (export \"load8_u\") (param i32) (result i32) (i32.load8_u (local.get 0))))",
    "(invoke \"test\")",
    "(assert_return (invoke \"load8_u\" (i32.const 0)) (i32.const 0))",
    "(assert_return (invoke \"load8_u\" (i32.const 1)) (i32.const 0))",
    "(assert_return (invoke \"load8_u\" (i32.const 2)) (i32.const 3))",
    "(assert_return (invoke \"load8_u\" (i32.const 3)) (i32.const 1))",
    "(assert_return (invoke \"load8_u\" (i32.const 4)) (i32.const 4))",
    "(assert_return (invoke \"load8_u\" (i32.const 5)) (i32.const 1))",
    "(assert_return (invoke \"load8_u\" (i32.const 6)) (i32.const 0))",
    "(assert_return (invoke \"load8_u\" (i32.const 7)) (i32.const 2))",
    "(assert_return (invoke \"load8_u\" (i32.const 8)) (i32.const 7))",
    "(assert_return (invoke \"load8_u\" (i32.const 9)) (i32.const 1))",
    "(assert_return (invoke \"load8_u\" (i32.const 10)) (i32.const 8))",
    "(assert_return (invoke \"load8_u\" (i32.const 11)) (i32.const 0))",
    "(assert_return (invoke \"load8_u\" (i32.const 12)) (i32.const 7))",
    "(assert_return (invoke \"load8_u\" (i32.const 13)) (i32.const 5))",
    "(assert_return (invoke \"load8_u\" (i32.const 14)) (i32.const 2))",
    "(assert_return (invoke \"load8_u\" (i32.const 15)) (i32.const 3))",
    "(assert_return (invoke \"load8_u\" (i32.const 16)) (i32.const 6))",
    "(assert_return (invoke \"load8_u\" (i32.const 17)) (i32.const 0))",
    "(assert_return (invoke \"load8_u\" (i32.const 18)) (i32.const 0))",
    "(assert_return (invoke \"load8_u\" (i32.const 19)) (i32.const 0))",
    "(assert_return (invoke \"load8_u\" (i32.const 20)) (i32.const 0))",
    "(assert_return (invoke \"load8_u\" (i32.const 21)) (i32.const 0))",
    "(assert_return (invoke \"load8_u\" (i32.const 22)) (i32.const 0))",
    "(assert_return (invoke \"load8_u\" (i32.const 23)) (i32.const 0))",
    "(assert_return (invoke \"load8_u\" (i32.const 24)) (i32.const 0))",
    "(assert_return (invoke \"load8_u\" (i32.const 25)) (i32.const 0))",
    "(assert_return (invoke \"load8_u\" (i32.const 26)) (i32.const 0))",
    "(assert_return (invoke \"load8_u\" (i32.const 27)) (i32.const 0))",
    "(assert_return (invoke \"load8_u\" (i32.const 28)) (i32.const 0))",
    "(assert_return (invoke \"load8_u\" (i32.const 29)) (i32.const 0))",
    "(module (memory (export \"memory0\") 1 1) (data (i32.const 2) \"\\03\\01\\04\\01\") (data \"\\02\\07\\01\\08\") (data (i32.const 12) \"\\07\\05\\02\\03\\06\") (data \"\\05\\09\\02\\07\\06\")\n  (func (export \"test\") (memory.init 3 (i32.const 15) (i32.const 1) (i32.const 3)))\n  (func (export \"load8_u\") (param i32) (result i32) (i32.load8_u (local.get 0))))",
    "(invoke \"test\")",
    "(assert_return (invoke \"load8_u\" (i32.const 0)) (i32.const 0))",
    "(assert_return (invoke \"load8_u\" (i32.const 1)) (i32.const 0))",
    "(assert_return (invoke \"load8_u\" (i32.const 2)) (i32.const 3))",
    "(assert_return (invoke \"load8_u\" (i32.const 3)) (i32.const 1))",
    "(assert_return (invoke \"load8_u\" (i32.const 4)) (i32.const 4))",
    "(assert_return (invoke \"load8_u\" (i32.const 5)) (i32.const 1))",
    "(assert_return (invoke \"load8_u\" (i32.const 6)) (i32.const 0))",
    "(assert_return (invoke \"load8_u\" (i32.const 7)) (i32.const 0))",
    "(assert_return (invoke \"load8_u\" (i32.const 8)) (i32.const 0))",
    "(assert_return (invoke \"load8_u\" (i32.const 9)) (i32.const 0))",
    "(assert_return (invoke \"load8_u\" (i32.const 10)) (i32.const 0))",
    "(assert_return (invoke \"load8_u\" (i32.const 11)) (i32.const 0))",
    "(assert_return (invoke \"load8_u\" (i32.const 12)) (i32.const 7))",
    "(assert_return (invoke \"load8_u\" (i32.const 13)) (i32.const 5))",
    "(assert_return (invoke \"load8_u\" (i32.const 14)) (i32.const 2))",
    "(assert_return (invoke \"load8_u\" (i32.const 15)) (i32.const 9))",
    "(assert_return (invoke \"load8_u\" (i32.const 16)) (i32.const 2))",
    "(assert_return (invoke \"load8_u\" (i32.const 17)) (i32.const 7))",
    "(assert_return (invoke \"load8_u\" (i32.const 18)) (i32.const 0))",
    "(assert_return (invoke \"load8_u\" (i32.const 19)) (i32.const 0))",
    "(assert_return (invoke \"load8_u\" (i32.const 20)) (i32.const 0))",
    "(assert_return (invoke \"load8_u\" (i32.const 21)) (i32.const 0))",
    "(assert_return (invoke \"load8_u\" (i32.const 22)) (i32.const 0))",
    "(assert_return (invoke \"load8_u\" (i32.const 23)) (i32.const 0))",
    "(assert_return (invoke \"load8_u\" (i32.const 24)) (i32.const 0))",
    "(assert_return (invoke \"load8_u\" (i32.const 25)) (i32.const 0))",
    "(assert_return (invoke \"load8_u\" (i32.const 26)) (i32.const 0))",
    "(assert_return (invoke \"load8_u\" (i32.const 27)) (i32.const 0))",
    "(assert_return (invoke \"load8_u\" (i32.const 28)) (i32.const 0))",
    "(assert_return (invoke \"load8_u\" (i32.const 29)) (i32.const 0))",
    "(module (memory (export \"memory0\") 1 1) (data (i32.const 2) \"\\03\\01\\04\\01\") (data \"\\02\\07\\01\\08\") (data (i32.const 12) \"\\07\\05\\02\\03\\06\") (data \"\\05\\09\\02\\07\\06\")\n  (func (export \"test\") (memory.init 1 (i32.const 7) (i32.const 0) (i32.const 4)) (data.drop 1) (memory.init 3 (i32.const 15) (i32.const 1) (i32.const 3)) (data.drop 3) (memory.copy (i32.const 20) (i32.const 15) (i32.const 5)) (memory.copy (i32.const 21) (i32.const 29) (i32.const 1)) (memory.copy (i32.const 24) (i32.const 10) (i32.const 1)) (memory.copy (i32.const 13) (i32.const 11) (i32.const 4)) (memory.copy (i32.const 19) (i32.const 20) (i32.const 5)))\n  (func (export \"load8_u\") (param i32) (result i32) (i32.load8_u (local.get 0))))",
    "(invoke \"test\")",
    "(assert_return (invoke \"load8_u\" (i32.const 0)) (i32.const 0))",
    "(assert_return (invoke \"load8_u\" (i32.const 1)) (i32.const 0))",
    "(assert_return (invoke \"load8_u\" (i32.const 2)) (i32.const 3))",
    "(assert_return (invoke \"load8_u\" (i32.const 3)) (i32.const 1))",
    "(assert_return (invoke \"load8_u\" (i32.const 4)) (i32.const 4))",
    "(assert_return (invoke \"load8_u\" (i32.const 5)) (i32.const 1))",
    "(assert_return (invoke \"load8_u\" (i32.const 6)) (i32.const 0))",
    "(assert_return (invoke \"load8_u\" (i32.const 7)) (i32.const 2))",
    "(assert_return (invoke \"load8_u\" (i32.const 8)) (i32.const 7))",
    "(assert_return (invoke \"load8_u\" (i32.const 9)) (i32.const 1))",
    "(assert_return (invoke \"load8_u\" (i32.const 10)) (i32.const 8))",
    "(assert_return (invoke \"load8_u\" (i32.const 11)) (i32.const 0))",
    "(assert_return (invoke \"load8_u\" (i32.const 12)) (i32.const 7))",
    "(assert_return (invoke \"load8_u\" (i32.const 13)) (i32.const 0))",
    "(assert_return (invoke \"load8_u\" (i32.const 14)) (i32.const 7))",
    "(assert_return (invoke \"load8_u\" (i32.const 15)) (i32.const 5))",
    "(assert_return (invoke \"load8_u\" (i32.const 16)) (i32.const 2))",
    "(assert_return (invoke \"load8_u\" (i32.const 17)) (i32.const 7))",
    "(assert_return (invoke \"load8_u\" (i32.const 18)) (i32.const 0))",
    "(assert_return (invoke \"load8_u\" (i32.const 19)) (i32.const 9))",
    "(assert_return (invoke \"load8_u\" (i32.const 20)) (i32.const 0))",
    "(assert_return (invoke \"load8_u\" (i32.const 21)) (i32.const 7))",
    "(assert_return (invoke \"load8_u\" (i32.const 22)) (i32.const 0))",
    "(assert_return (invoke \"load8_u\" (i32.const 23)) (i32.const 8))",
    "(assert_return (invoke \"load8_u\" (i32.const 24)) (i32.const 8))",
    "(assert_return (invoke \"load8_u\" (i32.const 25)) (i32.const 0))",
    "(assert_return (invoke \"load8_u\" (i32.const 26)) (i32.const 0))",
    "(assert_return (invoke \"load8_u\" (i32.const 27)) (i32.const 0))",
    "(assert_return (invoke \"load8_u\" (i32.const 28)) (i32.const 0))",
    "(assert_return (invoke \"load8_u\" (i32.const 29)) (i32.const 0))",
    "(assert_invalid (module (func (export \"test\") (data.drop 0))) \"unknown data segment\")",
    "(assert_invalid (module (memory 1) (data \"\\37\") (func (export \"test\") (data.drop 4))) \"unknown data segment\")",
    "(module (memory 1) (data \"\\37\")\n  (func (export \"test\") (data.drop 0) (data.drop 0)))",
    "(invoke \"test\")",
    "(module (memory 1) (data \"\\37\")\n  (func (export \"test\") (data.drop 0) (memory.init 0 (i32.const 1234) (i32.const 1) (i32.const 1))))",
    "(assert_trap (invoke \"test\") \"out of bounds memory access\")",
    "(module (memory 1) (data (i32.const 0) \"\\37\")\n  (func (export \"test\") (memory.init 0 (i32.const 1234) (i32.const 1) (i32.const 1))))",
    "(assert_trap (invoke \"test\") \"out of bounds memory access\")",
    "(assert_invalid (module (func (export \"test\") (memory.init 1 (i32.const 1234) (i32.const 1) (i32.const 1)))) \"unknown memory 0\")",
    "(assert_invalid (module (memory 1) (data \"\\37\") (func (export \"test\") (memory.init 1 (i32.const 1234) (i32.const 1) (i32.const 1)))) \"unknown data segment 1\")",
    "(module (memory 1) (data \"\\37\")\n  (func (export \"test\") (memory.init 0 (i32.const 1) (i32.const 0) (i32.const 1)) (memory.init 0 (i32.const 1) (i32.const 0) (i32.const 1))))",
    "(invoke \"test\")",
    "(module (memory 1) (data \"\\37\")\n  (func (export \"test\") (memory.init 0 (i32.const 1234) (i32.const 0) (i32.const 5))))",
    "(assert_trap (invoke \"test\") \"out of bounds memory access\")",
    "(module (memory 1) (data \"\\37\")\n  (func (export \"test\") (memory.init 0 (i32.const 1234) (i32.const 2) (i32.const 3))))",
    "(assert_trap (invoke \"test\") \"out of bounds memory access\")",
    "(module (memory 1) (data \"\\37\")\n  (func (export \"test\") (memory.init 0 (i32.const 0xFFFE) (i32.const 1) (i32.const 3))))",
    "(assert_trap (invoke \"test\") \"out of bounds memory access\")",
    "(module (memory 1) (data \"\\37\")\n  (func (export \"test\") (memory.init 0 (i32.const 1234) (i32.const 4) (i32.const 0))))",
    "(assert_trap (invoke \"test\") \"out of bounds memory access\")",
    "(module (memory 1) (data \"\\37\")\n  (func (export \"test\") (memory.init 0 (i32.const 1234) (i32.const 1) (i32.const 0))))",
    "(invoke \"test\")",
    "(module (memory 1) (data \"\\37\")\n  (func (export \"test\") (memory.init 0 (i32.const 0x10001) (i32.const 0) (i32.const 0))))",
    "(assert_trap (invoke \"test\") \"out of bounds memory access\")",
    "(module (memory 1) (data \"\\37\")\n  (func (export \"test\") (memory.init 0 (i32.const 0x10000) (i32.const 0) (i32.const 0))))",
    "(invoke \"test\")",
    "(module (memory 1) (data \"\\37\")\n  (func (export \"test\") (memory.init 0 (i32.const 0x10000) (i32.const 1) (i32.const 0))))",
    "(invoke \"test\")",
    "(module (memory 1) (data \"\\37\")\n  (func (export \"test\") (memory.init 0 (i32.const 0x10001) (i32.const 4) (i32.const 0))))",
    "(assert_trap (invoke \"test\") \"out of bounds memory access\")",
    "(assert_invalid (module (memory 1) (data \"\\37\") (func (export \"test\") (memory.init 0 (i32.const 1) (i32.const 1) (f32.const 1)))) \"type mismatch\")",
    "(assert_invalid (module (memory 1) (data \"\\37\") (func (export \"test\") (memory.init 0 (i32.const 1) (i32.const 1) (i64.const 1)))) \"type mismatch\")",
    "(assert_invalid (module (memory 1) (data \"\\37\") (func (export \"test\") (memory.init 0 (i32.const 1) (i32.const 1) (f64.const 1)))) \"type mismatch\")",
    "(assert_invalid (module (memory 1) (data \"\\37\") (func (export \"test\") (memory.init 0 (i32.const 1) (f32.const 1) (i32.const 1)))) \"type mismatch\")",
    "(assert_invalid (module (memory 1) (data \"\\37\") (func (export \"test\") (memory.init 0 (i32.const 1) (f32.const 1) (f32.const 1)))) \"type mismatch\")",
    "(assert_invalid (module (memory 1) (data \"\\37\") (func (export \"test\") (memory.init 0 (i32.const 1) (f32.const 1) (i64.const 1)))) \"type mismatch\")",
    "(assert_invalid (module (memory 1) (data \"\\37\") (func (export \"test\") (memory.init 0 (i32.const 1) (f32.const 1) (f64.const 1)))) \"type mismatch\")",
    "(assert_invalid (module (memory 1) (data \"\\37\") (func (export \"test\") (memory.init 0 (i32.const 1) (i64.const 1) (i32.const 1)))) \"type mismatch\")",
    "(assert_invalid (module (memory 1) (data \"\\37\") (func (export \"test\") (memory.init 0 (i32.const 1) (i64.const 1) (f32.const 1)))) \"type mismatch\")",
    "(assert_invalid (module (memory 1) (data \"\\37\") (func (export \"test\") (memory.init 0 (i32.const 1) (i64.const 1) (i64.const 1)))) \"type mismatch\")",
    "(assert_invalid (module (memory 1) (data \"\\37\") (func (export \"test\") (memory.init 0 (i32.const 1) (i64.const 1) (f64.const 1)))) \"type mismatch\")",
    "(assert_invalid (module (memory 1) (data \"\\37\") (func (export \"test\") (memory.init 0 (i32.const 1) (f64.const 1) (i32.const 1)))) \"type mismatch\")",
    "(assert_invalid (module (memory 1) (data \"\\37\") (func (export \"test\") (memory.init 0 (i32.const 1) (f64.const 1) (f32.const 1)))) \"type mismatch\")",
    "(assert_invalid (module (memory 1) (data \"\\37\") (func (export \"test\") (memory.init 0 (i32.const 1) (f64.const 1) (i64.const 1)))) \"type mismatch\")",
    "(assert_invalid (module (memory 1) (data \"\\37\") (func (export \"test\") (memory.init 0 (i32.const 1) (f64.const 1) (f64.const 1)))) \"type mismatch\")",
    "(assert_invalid (module (memory 1) (data \"\\37\") (func (export \"test\") (memory.init 0 (f32.const 1) (i32.const 1) (i32.const 1)))) \"type mismatch\")",
    "(assert_invalid (module (memory 1) (data \"\\37\") (func (export \"test\") (memory.init 0 (f32.const 1) (i32.const 1) (f32.const 1)))) \"type mismatch\")",
    "(assert_invalid (module (memory 1) (data \"\\37\") (func (export \"test\") (memory.init 0 (f32.const 1) (i32.const 1) (i64.const 1)))) \"type mismatch\")",
    "(assert_invalid (module (memory 1) (data \"\\37\") (func (export \"test\") (memory.init 0 (f32.const 1) (i32.const 1) (f64.const 1)))) \"type mismatch\")",
    "(assert_invalid (module (memory 1) (data \"\\37\") (func (export \"test\") (memory.init 0 (f32.const 1) (f32.const 1) (i32.const 1)))) \"type mismatch\")",
    "(assert_invalid (module (memory 1) (data \"\\37\") (func (export \"test\") (memory.init 0 (f32.const 1) (f32.const 1) (f32.const 1)))) \"type mismatch\")",
    "(assert_invalid (module (memory 1) (data \"\\37\") (func (export \"test\") (memory.init 0 (f32.const 1) (f32.const 1) (i64.const 1)))) \"type mismatch\")",
    "(assert_invalid (module (memory 1) (data \"\\37\") (func (export \"test\") (memory.init 0 (f32.const 1) (f32.const 1) (f64.const 1)))) \"type mismatch\")",
    "(assert_invalid (module (memory 1) (data \"\\37\") (func (export \"test\") (memory.init 0 (f32.const 1) (i64.const 1) (i32.const 1)))) \"type mismatch\")",
    "(assert_invalid (module (memory 1) (data \"\\37\") (func (export \"test\") (memory.init 0 (f32.const 1) (i64.const 1) (f32.const 1)))) \"type mismatch\")",
    "(assert_invalid (module (memory 1) (data \"\\37\") (func (export \"test\") (memory.init 0 (f32.const 1) (i64.const 1) (i64.const 1)))) \"type mismatch\")",
    "(assert_invalid (module (memory 1) (data \"\\37\") (func (export \"test\") (memory.init 0 (f32.const 1) (i64.const 1) (f64.const 1)))) \"type mismatch\")",
    "(assert_invalid (module (memory 1) (data \"\\37\") (func (export \"test\") (memory.init 0 (f32.const 1) (f64.const 1) (i32.const 1)))) \"type mismatch\")",
    "(assert_invalid (module (memory 1) (data \"\\37\") (func (export \"test\") (memory.init 0 (f32.const 1) (f64.const 1) (f32.const 1)))) \"type mismatch\")",
    "(assert_invalid (module (memory 1) (data \"\\37\") (func (export \"test\") (memory.init 0 (f32.const 1) (f64.const 1) (i64.const 1)))) \"type mismatch\")",
    "(assert_invalid (module (memory 1) (data \"\\37\") (func (export \"test\") (memory.init 0 (f32.const 1) (f64.const 1) (f64.const 1)))) \"type mismatch\")",
    "(assert_invalid (module (memory 1) (data \"\\37\") (func (export \"test\") (memory.init 0 (i64.const 1) (i32.const 1) (i32.const 1)))) \"type mismatch\")",
    "(assert_invalid (module (memory 1) (data \"\\37\") (func (export \"test\") (memory.init 0 (i64.const 1) (i32.const 1) (f32.const 1)))) \"type mismatch\")",
    "(assert_invalid (module (memory 1) (data \"\\37\") (func (export \"test\") (memory.init 0 (i64.const 1) (i32.const 1) (i64.const 1)))) \"type mismatch\")",
    "(assert_invalid (module (memory 1) (data \"\\37\") (func (export \"test\") (memory.init 0 (i64.const 1) (i32.const 1) (f64.const 1)))) \"type mismatch\")",
    "(assert_invalid (module (memory 1) (data \"\\37\") (func (export \"test\") (memory.init 0 (i64.const 1) (f32.const 1) (i32.const 1)))) \"type mismatch\")",
    "(assert_invalid (module (memory 1) (data \"\\37\") (func (export \"test\") (memory.init 0 (i64.const 1) (f32.const 1) (f32.const 1)))) \"type mismatch\")",
    "(assert_invalid (module (memory 1) (data \"\\37\") (func (export \"test\") (memory.init 0 (i64.const 1) (f32.const 1) (i64.const 1)))) \"type mismatch\")",
    "(assert_invalid (module (memory 1) (data \"\\37\") (func (export \"test\") (memory.init 0 (i64.const 1) (f32.const 1) (f64.const 1)))) \"type mismatch\")",
    "(assert_invalid (module (memory 1) (data \"\\37\") (func (export \"test\") (memory.init 0 (i64.const 1) (i64.const 1) (i32.const 1)))) \"type mismatch\")",
    "(assert_invalid (module (memory 1) (data \"\\37\") (func (export \"test\") (memory.init 0 (i64.const 1) (i64.const 1) (f32.const 1)))) \"type mismatch\")",
    "(assert_invalid (module (memory 1) (data \"\\37\") (func (export \"test\") (memory.init 0 (i64.const 1) (i64.const 1) (i64.const 1)))) \"type mismatch\")",
    "(assert_invalid (module (memory 1) (data \"\\37\") (func (export \"test\") (memory.init 0 (i64.const 1) (i64.const 1) (f64.const 1)))) \"type mismatch\")",
    "(assert_invalid (module (memory 1) (data \"\\37\") (func (export \"test\") (memory.init 0 (i64.const 1) (f64.const 1) (i32.const 1)))) \"type mismatch\")",
    "(assert_invalid (module (memory 1) (data \"\\37\") (func (export \"test\") (memory.init 0 (i64.const 1) (f64.const 1) (f32.const 1)))) \"type mismatch\")",
    "(assert_invalid (module (memory 1) (data \"\\37\") (func (export \"test\") (memory.init 0 (i64.const 1) (f64.const 1) (i64.const 1)))) \"type mismatch\")",
    "(assert_invalid (module (memory 1) (data \"\\37\") (func (export \"test\") (memory.init 0 (i64.const 1) (f64.const 1) (f64.const 1)))) \"type mismatch\")",
    "(assert_invalid (module (memory 1) (data \"\\37\") (func (export \"test\") (memory.init 0 (f64.const 1) (i32.const 1) (i32.const 1)))) \"type mismatch\")",
    "(assert_invalid (module (memory 1) (data \"\\37\") (func (export \"test\") (memory.init 0 (f64.const 1) (i32.const 1) (f32.const 1)))) \"type mismatch\")",
    "(assert_invalid (module (memory 1) (data \"\\37\") (func (export \"test\") (memory.init 0 (f64.const 1) (i32.const 1) (i64.const 1)))) \"type mismatch\")",
    "(assert_invalid (module (memory 1) (data \"\\37\") (func (export \"test\") (memory.init 0 (f64.const 1) (i32.const 1) (f64.const 1)))) \"type mismatch\")",
    "(assert_invalid (module (memory 1) (data \"\\37\") (func (export \"test\") (memory.init 0 (f64.const 1) (f32.const 1) (i32.const 1)))) \"type mismatch\")",
    "(assert_invalid (module (memory 1) (data \"\\37\") (func (export \"test\") (memory.init 0 (f64.const 1) (f32.const 1) (f32.const 1)))) \"type mismatch\")",
    "(assert_invalid (module (memory 1) (data \"\\37\") (func (export \"test\") (memory.init 0 (f64.const 1) (f32.const 1) (i64.const 1)))) \"type mismatch\")",
    "(assert_invalid (module (memory 1) (data \"\\37\") (func (export \"test\") (memory.init 0 (f64.const 1) (f32.const 1) (f64.const 1)))) \"type mismatch\")",
    "(assert_invalid (module (memory 1) (data \"\\37\") (func (export \"test\") (memory.init 0 (f64.const 1) (i64.const 1) (i32.const 1)))) \"type mismatch\")",
    "(assert_invalid (module (memory 1) (data \"\\37\") (func (export \"test\") (memory.init 0 (f64.const 1) (i64.const 1) (f32.const 1)))) \"type mismatch\")",
    "(assert_invalid (module (memory 1) (data \"\\37\") (func (export \"test\") (memory.init 0 (f64.const 1) (i64.const 1) (i64.const 1)))) \"type mismatch\")",
    "(assert_invalid (module (memory 1) (data \"\\37\") (func (export \"test\") (memory.init 0 (f64.const 1) (i64.const 1) (f64.const 1)))) \"type mismatch\")",
    "(assert_invalid (module (memory 1) (data \"\\37\") (func (export \"test\") (memory.init 0 (f64.const 1) (f64.const 1) (i32.const 1)))) \"type mismatch\")",
    "(assert_invalid (module (memory 1) (data \"\\37\") (func (export \"test\") (memory.init 0 (f64.const 1) (f64.const 1) (f32.const 1)))) \"type mismatch\")",
    "(assert_invalid (module (memory 1) (data \"\\37\") (func (export \"test\") (memory.init 0 (f64.const 1) (f64.const 1) (i64.const 1)))) \"type mismatch\")",
    "(assert_invalid (module (memory 1) (data \"\\37\") (func (export \"test\") (memory.init 0 (f64.const 1) (f64.const 1) (f64.const 1)))) \"type mismatch\")",
    "(module (memory 1 1 ) (data \"\\42\\42\\42\\42\\42\\42\\42\\42\\42\\42\\42\\42\\42\\42\\42\\42\")\n  (func (export \"checkRange\") (param $from i32) (param $to i32) (param $expected i32) (result i32) (loop $cont (if (i32.eq (local.get $from) (local.get $to)) (then (return (i32.const -1)))) (if (i32.eq (i32.load8_u (local.get $from)) (local.get $expected)) (then (local.set $from (i32.add (local.get $from) (i32.const 1))) (br $cont)))) (return (local.get $from)))\n  (func (export \"run\") (param $offs i32) (param $len i32) (memory.init 0 (local.get $offs) (i32.const 0) (local.get $len))))",
    "(assert_trap (invoke \"run\" (i32.const 65528) (i32.const 16)) \"out of bounds memory access\")",
    "(assert_return (invoke \"checkRange\" (i32.const 0) (i32.const 1) (i32.const 0)) (i32.const -1))",
    "(module (memory 1 1 ) (data \"\\42\\42\\42\\42\\42\\42\\42\\42\\42\\42\\42\\42\\42\\42\\42\\42\")\n  (func (export \"checkRange\") (param $from i32) (param $to i32) (param $expected i32) (result i32) (loop $cont (if (i32.eq (local.get $from) (local.get $to)) (then (return (i32.const -1)))) (if (i32.eq (i32.load8_u (local.get $from)) (local.get $expected)) (then (local.set $from (i32.add (local.get $from) (i32.const 1))) (br $cont)))) (return (local.get $from)))\n  (func (export \"run\") (param $offs i32) (param $len i32) (memory.init 0 (local.get $offs) (i32.const 0) (local.get $len))))",
    "(assert_trap (invoke \"run\" (i32.const 65527) (i32.const 16)) \"out of bounds memory access\")",
    "(assert_return (invoke \"checkRange\" (i32.const 0) (i32.const 1) (i32.const 0)) (i32.const -1))",
    "(module (memory 1 1 ) (data \"\\42\\42\\42\\42\\42\\42\\42\\42\\42\\42\\42\\42\\42\\42\\42\\42\")\n  (func (export \"checkRange\") (param $from i32) (param $to i32) (param $expected i32) (result i32) (loop $cont (if (i32.eq (local.get $from) (local.get $to)) (then (return (i32.const -1)))) (if (i32.eq (i32.load8_u (local.get $from)) (local.get $expected)) (then (local.set $from (i32.add (local.get $from) (i32.const 1))) (br $cont)))) (return (local.get $from)))\n  (func (export \"run\") (param $offs i32) (param $len i32) (memory.init 0 (local.get $offs) (i32.const 0) (local.get $len))))",
    "(assert_trap (invoke \"run\" (i32.const 65472) (i32.const 30)) \"out of bounds memory access\")",
    "(assert_return (invoke \"checkRange\" (i32.const 0) (i32.const 1) (i32.const 0)) (i32.const -1))",
    "(module (memory 1 1 ) (data \"\\42\\42\\42\\42\\42\\42\\42\\42\\42\\42\\42\\42\\42\\42\\42\\42\")\n  (func (export \"checkRange\") (param $from i32) (param $to i32) (param $expected i32) (result i32) (loop $cont (if (i32.eq (local.get $from) (local.get $to)) (then (return (i32.const -1)))) (if (i32.eq (i32.load8_u (local.get $from)) (local.get $expected)) (then (local.set $from (i32.add (local.get $from) (i32.const 1))) (br $cont)))) (return (local.get $from)))\n  (func (export \"run\") (param $offs i32) (param $len i32) (memory.init 0 (local.get $offs) (i32.const 0) (local.get $len))))",
    "(assert_trap (invoke \"run\" (i32.const 65473) (i32.const 31)) \"out of bounds memory access\")",
    "(assert_return (invoke \"checkRange\" (i32.const 0) (i32.const 1) (i32.const 0)) (i32.const -1))",
    "(module (memory 1 ) (data \"\\42\\42\\42\\42\\42\\42\\42\\42\\42\\42\\42\\42\\42\\42\\42\\42\")\n  (func (export \"checkRange\") (param $from i32) (param $to i32) (param $expected i32) (result i32) (loop $cont (if (i32.eq (local.get $from) (local.get $to)) (then (return (i32.const -1)))) (if (i32.eq (i32.load8_u (local.get $from)) (local.get $expected)) (then (local.set $from (i32.add (local.get $from) (i32.const 1))) (br $cont)))) (return (local.get $from)))\n  (func (export \"run\") (param $offs i32) (param $len i32) (memory.init 0 (local.get $offs) (i32.const 0) (local.get $len))))",
    "(assert_trap (invoke \"run\" (i32.const 65528) (i32.const 4294967040)) \"out of bounds memory access\")",
    "(assert_return (invoke \"checkRange\" (i32.const 0) (i32.const 1) (i32.const 0)) (i32.const -1))",
    "(module (memory 1 ) (data \"\\42\\42\\42\\42\\42\\42\\42\\42\\42\\42\\42\\42\\42\\42\\42\\42\")\n  (func (export \"checkRange\") (param $from i32) (param $to i32) (param $expected i32) (result i32) (loop $cont (if (i32.eq (local.get $from) (local.get $to)) (then (return (i32.const -1)))) (if (i32.eq (i32.load8_u (local.get $from)) (local.get $expected)) (then (local.set $from (i32.add (local.get $from) (i32.const 1))) (br $cont)))) (return (local.get $from)))\n  (func (export \"run\") (param $offs i32) (param $len i32) (memory.init 0 (local.get $offs) (i32.const 0) (local.get $len))))",
    "(assert_trap (invoke \"run\" (i32.const 0) (i32.const 4294967292)) \"out of bounds memory access\")",
    "(assert_return (invoke \"checkRange\" (i32.const 0) (i32.const 1) (i32.const 0)) (i32.const -1))",
    "(module (memory 1) (data \"\") (data \"\") (data \"\") (data \"\") (data \"\") (data \"\") (data \"\") (data \"\") (data \"\") (data \"\") (data \"\") (data \"\") (data \"\") (data \"\") (data \"\") (data \"\") (data \"\") (data \"\") (data \"\") (data \"\") (data \"\") (data \"\") (data \"\") (data \"\") (data \"\") (data \"\") (data \"\") (data \"\") (data \"\") (data \"\") (data \"\") (data \"\") (data \"\") (data \"\") (data \"\") (data \"\") (data \"\") (data \"\") (data \"\") (data \"\") (data \"\") (data \"\") (data \"\") (data \"\") (data \"\") (data \"\") (data \"\") (data \"\") (data \"\") (data \"\") (data \"\") (data \"\") (data \"\") (data \"\") (data \"\") (data \"\") (data \"\") (data \"\") (data \"\") (data \"\") (data \"\") (data \"\") (data \"\") (data \"\") (data \"\")\n  (func (memory.init 64 (i32.const 0) (i32.const 0) (i32.const 0))))"
  ],
  "dump": {
    "memory_init.0.wasm": {
      "header": "\nmemory_init.0.wasm:\tfile format wasm 0x1\n\nSections:\n\n     Type start=0x0000000a end=0x00000013 (size=0x00000009) count: 2\n Function start=0x00000015 end=0x00000018 (size=0x00000003) count: 2\n   Memory start=0x0000001a end=0x0000001e (size=0x00000004) count: 1\n   Export start=0x00000020 end=0x0000003c (size=0x0000001c) count: 3\n     Code start=0x0000003e end=0x0000004b (size=0x0000000d) count: 2\n     Data start=0x0000004d end=0x0000006e (size=0x00000021) count: 4\n",
      "details": "\nmemory_init.0.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nType[2]:\n - type[0] () -> nil\n - type[1] (i32) -> i32\nFunction[2]:\n - func[0] sig=0 <test>\n - func[1] sig=1 <load8_u>\nMemory[1]:\n - memory[0] pages: initial=1 max=1\nExport[3]:\n - memory[0] -> \"memory0\"\n - func[0] <test> -> \"test\"\n - func[1] <load8_u> -> \"load8_u\"\nCode[2]:\n - func[0] size=3 <test>\n - func[1] size=7 <load8_u>\nData[4]:\n - segment[0] memory=0 size=4 - init i32=2\n  - 0000002: 0301 0401                                ....\n - segment[1] passive size=4\n  - 0000002: 0207 0108                                ....\n - segment[2] memory=0 size=5 - init i32=12\n  - 000000c: 0705 0203 06                             .....\n - segment[3] passive size=5\n  - 000000c: 0509 0207 06                             .....\n",
      "disassemble": "\nmemory_init.0.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n000040 func[0] <test>:\n 000041: 01                         | nop\n 000042: 0b                         | end\n000044 func[1] <load8_u>:\n 000045: 20 00                      | local.get 0\n 000047: 2d 00 00                   | i32.load8_u 0 0\n 00004a: 0b                         | end\n"
    },
    "memory_init.1.wasm": {
      "header": "\nmemory_init.1.wasm:\tfile format wasm 0x1\n\nSections:\n\n     Type start=0x0000000a end=0x00000013 (size=0x00000009) count: 2\n Function start=0x00000015 end=0x00000018 (size=0x00000003) count: 2\n   Memory start=0x0000001a end=0x0000001e (size=0x00000004) count: 1\n   Export start=0x00000020 end=0x0000003c (size=0x0000001c) count: 3\nDataCount start=0x0000003e end=0x0000003f (size=0x00000001) count: 4\n     Code start=0x00000041 end=0x00000057 (size=0x00000016) count: 2\n     Data start=0x00000059 end=0x0000007a (size=0x00000021) count: 4\n",
      "details": "\nmemory_init.1.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nType[2]:\n - type[0] () -> nil\n - type[1] (i32) -> i32\nFunction[2]:\n - func[0] sig=0 <test>\n - func[1] sig=1 <load8_u>\nMemory[1]:\n - memory[0] pages: initial=1 max=1\nExport[3]:\n - memory[0] -> \"memory0\"\n - func[0] <test> -> \"test\"\n - func[1] <load8_u> -> \"load8_u\"\nDataCount:\n - data count: 4\nCode[2]:\n - func[0] size=12 <test>\n - func[1] size=7 <load8_u>\nData[4]:\n - segment[0] memory=0 size=4 - init i32=2\n  - 0000002: 0301 0401                                ....\n - segment[1] passive size=4\n  - 0000002: 0207 0108                                ....\n - segment[2] memory=0 size=5 - init i32=12\n  - 000000c: 0705 0203 06                             .....\n - segment[3] passive size=5\n  - 000000c: 0509 0207 06                             .....\n",
      "disassemble": "\nmemory_init.1.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n000043 func[0] <test>:\n 000044: 41 07                      | i32.const 7\n 000046: 41 00                      | i32.const 0\n 000048: 41 04                      | i32.const 4\n 00004a: fc 08 01 00                | memory.init 1 0\n 00004e: 0b                         | end\n000050 func[1] <load8_u>:\n 000051: 20 00                      | local.get 0\n 000053: 2d 00 00                   | i32.load8_u 0 0\n 000056: 0b                         | end\n"
    },
    "memory_init.2.wasm": {
      "header": "\nmemory_init.2.wasm:\tfile format wasm 0x1\n\nSections:\n\n     Type start=0x0000000a end=0x00000013 (size=0x00000009) count: 2\n Function start=0x00000015 end=0x00000018 (size=0x00000003) count: 2\n   Memory start=0x0000001a end=0x0000001e (size=0x00000004) count: 1\n   Export start=0x00000020 end=0x0000003c (size=0x0000001c) count: 3\nDataCount start=0x0000003e end=0x0000003f (size=0x00000001) count: 4\n     Code start=0x00000041 end=0x00000057 (size=0x00000016) count: 2\n     Data start=0x00000059 end=0x0000007a (size=0x00000021) count: 4\n",
      "details": "\nmemory_init.2.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nType[2]:\n - type[0] () -> nil\n - type[1] (i32) -> i32\nFunction[2]:\n - func[0] sig=0 <test>\n - func[1] sig=1 <load8_u>\nMemory[1]:\n - memory[0] pages: initial=1 max=1\nExport[3]:\n - memory[0] -> \"memory0\"\n - func[0] <test> -> \"test\"\n - func[1] <load8_u> -> \"load8_u\"\nDataCount:\n - data count: 4\nCode[2]:\n - func[0] size=12 <test>\n - func[1] size=7 <load8_u>\nData[4]:\n - segment[0] memory=0 size=4 - init i32=2\n  - 0000002: 0301 0401                                ....\n - segment[1] passive size=4\n  - 0000002: 0207 0108                                ....\n - segment[2] memory=0 size=5 - init i32=12\n  - 000000c: 0705 0203 06                             .....\n - segment[3] passive size=5\n  - 000000c: 0509 0207 06                             .....\n",
      "disassemble": "\nmemory_init.2.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n000043 func[0] <test>:\n 000044: 41 0f                      | i32.const 15\n 000046: 41 01                      | i32.const 1\n 000048: 41 03                      | i32.const 3\n 00004a: fc 08 03 00                | memory.init 3 0\n 00004e: 0b                         | end\n000050 func[1] <load8_u>:\n 000051: 20 00                      | local.get 0\n 000053: 2d 00 00                   | i32.load8_u 0 0\n 000056: 0b                         | end\n"
    },
    "memory_init.3.wasm": {
      "header": "\nmemory_init.3.wasm:\tfile format wasm 0x1\n\nSections:\n\n     Type start=0x0000000a end=0x00000013 (size=0x00000009) count: 2\n Function start=0x00000015 end=0x00000018 (size=0x00000003) count: 2\n   Memory start=0x0000001a end=0x0000001e (size=0x00000004) count: 1\n   Export start=0x00000020 end=0x0000003c (size=0x0000001c) count: 3\nDataCount start=0x0000003e end=0x0000003f (size=0x00000001) count: 4\n     Code start=0x00000041 end=0x00000099 (size=0x00000058) count: 2\n     Data start=0x0000009b end=0x000000bc (size=0x00000021) count: 4\n",
      "details": "\nmemory_init.3.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nType[2]:\n - type[0] () -> nil\n - type[1] (i32) -> i32\nFunction[2]:\n - func[0] sig=0 <test>\n - func[1] sig=1 <load8_u>\nMemory[1]:\n - memory[0] pages: initial=1 max=1\nExport[3]:\n - memory[0] -> \"memory0\"\n - func[0] <test> -> \"test\"\n - func[1] <load8_u> -> \"load8_u\"\nDataCount:\n - data count: 4\nCode[2]:\n - func[0] size=78 <test>\n - func[1] size=7 <load8_u>\nData[4]:\n - segment[0] memory=0 size=4 - init i32=2\n  - 0000002: 0301 0401                                ....\n - segment[1] passive size=4\n  - 0000002: 0207 0108                                ....\n - segment[2] memory=0 size=5 - init i32=12\n  - 000000c: 0705 0203 06                             .....\n - segment[3] passive size=5\n  - 000000c: 0509 0207 06                             .....\n",
      "disassemble": "\nmemory_init.3.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n000043 func[0] <test>:\n 000044: 41 07                      | i32.const 7\n 000046: 41 00                      | i32.const 0\n 000048: 41 04                      | i32.const 4\n 00004a: fc 08 01 00                | memory.init 1 0\n 00004e: fc 09 01                   | data.drop 1\n 000051: 41 0f                      | i32.const 15\n 000053: 41 01                      | i32.const 1\n 000055: 41 03                      | i32.const 3\n 000057: fc 08 03 00                | memory.init 3 0\n 00005b: fc 09 03                   | data.drop 3\n 00005e: 41 14                      | i32.const 20\n 000060: 41 0f                      | i32.const 15\n 000062: 41 05                      | i32.const 5\n 000064: fc 0a 00 00                | memory.copy 0 0\n 000068: 41 15                      | i32.const 21\n 00006a: 41 1d                      | i32.const 29\n 00006c: 41 01                      | i32.const 1\n 00006e: fc 0a 00 00                | memory.copy 0 0\n 000072: 41 18                      | i32.const 24\n 000074: 41 0a                      | i32.const 10\n 000076: 41 01                      | i32.const 1\n 000078: fc 0a 00 00                | memory.copy 0 0\n 00007c: 41 0d                      | i32.const 13\n 00007e: 41 0b                      | i32.const 11\n 000080: 41 04                      | i32.const 4\n 000082: fc 0a 00 00                | memory.copy 0 0\n 000086: 41 13                      | i32.const 19\n 000088: 41 14                      | i32.const 20\n 00008a: 41 05                      | i32.const 5\n 00008c: fc 0a 00 00                | memory.copy 0 0\n 000090: 0b                         | end\n000092 func[1] <load8_u>:\n 000093: 20 00                      | local.get 0\n 000095: 2d 00 00                   | i32.load8_u 0 0\n 000098: 0b                         | end\n"
    },
    "memory_init.6.wasm": {
      "header": "\nmemory_init.6.wasm:\tfile format wasm 0x1\n\nSections:\n\n     Type start=0x0000000a end=0x0000000e (size=0x00000004) count: 1\n Function start=0x00000010 end=0x00000012 (size=0x00000002) count: 1\n   Memory start=0x00000014 end=0x00000017 (size=0x00000003) count: 1\n   Export start=0x00000019 end=0x00000021 (size=0x00000008) count: 1\nDataCount start=0x00000023 end=0x00000024 (size=0x00000001) count: 1\n     Code start=0x00000026 end=0x00000030 (size=0x0000000a) count: 1\n     Data start=0x00000032 end=0x00000036 (size=0x00000004) count: 1\n",
      "details": "\nmemory_init.6.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nType[1]:\n - type[0] () -> nil\nFunction[1]:\n - func[0] sig=0 <test>\nMemory[1]:\n - memory[0] pages: initial=1\nExport[1]:\n - func[0] <test> -> \"test\"\nDataCount:\n - data count: 1\nCode[1]:\n - func[0] size=8 <test>\nData[1]:\n - segment[0] passive size=1\n  - 0000000: 37                                       7\n",
      "disassemble": "\nmemory_init.6.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n000028 func[0] <test>:\n 000029: fc 09 00                   | data.drop 0\n 00002c: fc 09 00                   | data.drop 0\n 00002f: 0b                         | end\n"
    },
    "memory_init.7.wasm": {
      "header": "\nmemory_init.7.wasm:\tfile format wasm 0x1\n\nSections:\n\n     Type start=0x0000000a end=0x0000000e (size=0x00000004) count: 1\n Function start=0x00000010 end=0x00000012 (size=0x00000002) count: 1\n   Memory start=0x00000014 end=0x00000017 (size=0x00000003) count: 1\n   Export start=0x00000019 end=0x00000021 (size=0x00000008) count: 1\nDataCount start=0x00000023 end=0x00000024 (size=0x00000001) count: 1\n     Code start=0x00000026 end=0x00000038 (size=0x00000012) count: 1\n     Data start=0x0000003a end=0x0000003e (size=0x00000004) count: 1\n",
      "details": "\nmemory_init.7.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nType[1]:\n - type[0] () -> nil\nFunction[1]:\n - func[0] sig=0 <test>\nMemory[1]:\n - memory[0] pages: initial=1\nExport[1]:\n - func[0] <test> -> \"test\"\nDataCount:\n - data count: 1\nCode[1]:\n - func[0] size=16 <test>\nData[1]:\n - segment[0] passive size=1\n  - 0000000: 37                                       7\n",
      "disassemble": "\nmemory_init.7.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n000028 func[0] <test>:\n 000029: fc 09 00                   | data.drop 0\n 00002c: 41 d2 09                   | i32.const 1234\n 00002f: 41 01                      | i32.const 1\n 000031: 41 01                      | i32.const 1\n 000033: fc 08 00 00                | memory.init 0 0\n 000037: 0b                         | end\n"
    },
    "memory_init.8.wasm": {
      "header": "\nmemory_init.8.wasm:\tfile format wasm 0x1\n\nSections:\n\n     Type start=0x0000000a end=0x0000000e (size=0x00000004) count: 1\n Function start=0x00000010 end=0x00000012 (size=0x00000002) count: 1\n   Memory start=0x00000014 end=0x00000017 (size=0x00000003) count: 1\n   Export start=0x00000019 end=0x00000021 (size=0x00000008) count: 1\nDataCount start=0x00000023 end=0x00000024 (size=0x00000001) count: 1\n     Code start=0x00000026 end=0x00000035 (size=0x0000000f) count: 1\n     Data start=0x00000037 end=0x0000003e (size=0x00000007) count: 1\n",
      "details": "\nmemory_init.8.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nType[1]:\n - type[0] () -> nil\nFunction[1]:\n - func[0] sig=0 <test>\nMemory[1]:\n - memory[0] pages: initial=1\nExport[1]:\n - func[0] <test> -> \"test\"\nDataCount:\n - data count: 1\nCode[1]:\n - func[0] size=13 <test>\nData[1]:\n - segment[0] memory=0 size=1 - init i32=0\n  - 0000000: 37                                       7\n",
      "disassemble": "\nmemory_init.8.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n000028 func[0] <test>:\n 000029: 41 d2 09                   | i32.const 1234\n 00002c: 41 01                      | i32.const 1\n 00002e: 41 01                      | i32.const 1\n 000030: fc 08 00 00                | memory.init 0 0\n 000034: 0b                         | end\n"
    },
    "memory_init.11.wasm": {
      "header": "\nmemory_init.11.wasm:\tfile format wasm 0x1\n\nSections:\n\n     Type start=0x0000000a end=0x0000000e (size=0x00000004) count: 1\n Function start=0x00000010 end=0x00000012 (size=0x00000002) count: 1\n   Memory start=0x00000014 end=0x00000017 (size=0x00000003) count: 1\n   Export start=0x00000019 end=0x00000021 (size=0x00000008) count: 1\nDataCount start=0x00000023 end=0x00000024 (size=0x00000001) count: 1\n     Code start=0x00000026 end=0x0000003e (size=0x00000018) count: 1\n     Data start=0x00000040 end=0x00000044 (size=0x00000004) count: 1\n",
      "details": "\nmemory_init.11.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nType[1]:\n - type[0] () -> nil\nFunction[1]:\n - func[0] sig=0 <test>\nMemory[1]:\n - memory[0] pages: initial=1\nExport[1]:\n - func[0] <test> -> \"test\"\nDataCount:\n - data count: 1\nCode[1]:\n - func[0] size=22 <test>\nData[1]:\n - segment[0] passive size=1\n  - 0000000: 37                                       7\n",
      "disassemble": "\nmemory_init.11.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n000028 func[0] <test>:\n 000029: 41 01                      | i32.const 1\n 00002b: 41 00                      | i32.const 0\n 00002d: 41 01                      | i32.const 1\n 00002f: fc 08 00 00                | memory.init 0 0\n 000033: 41 01                      | i32.const 1\n 000035: 41 00                      | i32.const 0\n 000037: 41 01                      | i32.const 1\n 000039: fc 08 00 00                | memory.init 0 0\n 00003d: 0b                         | end\n"
    },
    "memory_init.12.wasm": {
      "header": "\nmemory_init.12.wasm:\tfile format wasm 0x1\n\nSections:\n\n     Type start=0x0000000a end=0x0000000e (size=0x00000004) count: 1\n Function start=0x00000010 end=0x00000012 (size=0x00000002) count: 1\n   Memory start=0x00000014 end=0x00000017 (size=0x00000003) count: 1\n   Export start=0x00000019 end=0x00000021 (size=0x00000008) count: 1\nDataCount start=0x00000023 end=0x00000024 (size=0x00000001) count: 1\n     Code start=0x00000026 end=0x00000035 (size=0x0000000f) count: 1\n     Data start=0x00000037 end=0x0000003b (size=0x00000004) count: 1\n",
      "details": "\nmemory_init.12.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nType[1]:\n - type[0] () -> nil\nFunction[1]:\n - func[0] sig=0 <test>\nMemory[1]:\n - memory[0] pages: initial=1\nExport[1]:\n - func[0] <test> -> \"test\"\nDataCount:\n - data count: 1\nCode[1]:\n - func[0] size=13 <test>\nData[1]:\n - segment[0] passive size=1\n  - 0000000: 37                                       7\n",
      "disassemble": "\nmemory_init.12.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n000028 func[0] <test>:\n 000029: 41 d2 09                   | i32.const 1234\n 00002c: 41 00                      | i32.const 0\n 00002e: 41 05                      | i32.const 5\n 000030: fc 08 00 00                | memory.init 0 0\n 000034: 0b                         | end\n"
    },
    "memory_init.13.wasm": {
      "header": "\nmemory_init.13.wasm:\tfile format wasm 0x1\n\nSections:\n\n     Type start=0x0000000a end=0x0000000e (size=0x00000004) count: 1\n Function start=0x00000010 end=0x00000012 (size=0x00000002) count: 1\n   Memory start=0x00000014 end=0x00000017 (size=0x00000003) count: 1\n   Export start=0x00000019 end=0x00000021 (size=0x00000008) count: 1\nDataCount start=0x00000023 end=0x00000024 (size=0x00000001) count: 1\n     Code start=0x00000026 end=0x00000035 (size=0x0000000f) count: 1\n     Data start=0x00000037 end=0x0000003b (size=0x00000004) count: 1\n",
      "details": "\nmemory_init.13.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nType[1]:\n - type[0] () -> nil\nFunction[1]:\n - func[0] sig=0 <test>\nMemory[1]:\n - memory[0] pages: initial=1\nExport[1]:\n - func[0] <test> -> \"test\"\nDataCount:\n - data count: 1\nCode[1]:\n - func[0] size=13 <test>\nData[1]:\n - segment[0] passive size=1\n  - 0000000: 37                                       7\n",
      "disassemble": "\nmemory_init.13.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n000028 func[0] <test>:\n 000029: 41 d2 09                   | i32.const 1234\n 00002c: 41 02                      | i32.const 2\n 00002e: 41 03                      | i32.const 3\n 000030: fc 08 00 00                | memory.init 0 0\n 000034: 0b                         | end\n"
    },
    "memory_init.14.wasm": {
      "header": "\nmemory_init.14.wasm:\tfile format wasm 0x1\n\nSections:\n\n     Type start=0x0000000a end=0x0000000e (size=0x00000004) count: 1\n Function start=0x00000010 end=0x00000012 (size=0x00000002) count: 1\n   Memory start=0x00000014 end=0x00000017 (size=0x00000003) count: 1\n   Export start=0x00000019 end=0x00000021 (size=0x00000008) count: 1\nDataCount start=0x00000023 end=0x00000024 (size=0x00000001) count: 1\n     Code start=0x00000026 end=0x00000036 (size=0x00000010) count: 1\n     Data start=0x00000038 end=0x0000003c (size=0x00000004) count: 1\n",
      "details": "\nmemory_init.14.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nType[1]:\n - type[0] () -> nil\nFunction[1]:\n - func[0] sig=0 <test>\nMemory[1]:\n - memory[0] pages: initial=1\nExport[1]:\n - func[0] <test> -> \"test\"\nDataCount:\n - data count: 1\nCode[1]:\n - func[0] size=14 <test>\nData[1]:\n - segment[0] passive size=1\n  - 0000000: 37                                       7\n",
      "disassemble": "\nmemory_init.14.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n000028 func[0] <test>:\n 000029: 41 fe ff 03                | i32.const 65534\n 00002d: 41 01                      | i32.const 1\n 00002f: 41 03                      | i32.const 3\n 000031: fc 08 00 00                | memory.init 0 0\n 000035: 0b                         | end\n"
    },
    "memory_init.15.wasm": {
      "header": "\nmemory_init.15.wasm:\tfile format wasm 0x1\n\nSections:\n\n     Type start=0x0000000a end=0x0000000e (size=0x00000004) count: 1\n Function start=0x00000010 end=0x00000012 (size=0x00000002) count: 1\n   Memory start=0x00000014 end=0x00000017 (size=0x00000003) count: 1\n   Export start=0x00000019 end=0x00000021 (size=0x00000008) count: 1\nDataCount start=0x00000023 end=0x00000024 (size=0x00000001) count: 1\n     Code start=0x00000026 end=0x00000035 (size=0x0000000f) count: 1\n     Data start=0x00000037 end=0x0000003b (size=0x00000004) count: 1\n",
      "details": "\nmemory_init.15.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nType[1]:\n - type[0] () -> nil\nFunction[1]:\n - func[0] sig=0 <test>\nMemory[1]:\n - memory[0] pages: initial=1\nExport[1]:\n - func[0] <test> -> \"test\"\nDataCount:\n - data count: 1\nCode[1]:\n - func[0] size=13 <test>\nData[1]:\n - segment[0] passive size=1\n  - 0000000: 37                                       7\n",
      "disassemble": "\nmemory_init.15.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n000028 func[0] <test>:\n 000029: 41 d2 09                   | i32.const 1234\n 00002c: 41 04                      | i32.const 4\n 00002e: 41 00                      | i32.const 0\n 000030: fc 08 00 00                | memory.init 0 0\n 000034: 0b                         | end\n"
    },
    "memory_init.16.wasm": {
      "header": "\nmemory_init.16.wasm:\tfile format wasm 0x1\n\nSections:\n\n     Type start=0x0000000a end=0x0000000e (size=0x00000004) count: 1\n Function start=0x00000010 end=0x00000012 (size=0x00000002) count: 1\n   Memory start=0x00000014 end=0x00000017 (size=0x00000003) count: 1\n   Export start=0x00000019 end=0x00000021 (size=0x00000008) count: 1\nDataCount start=0x00000023 end=0x00000024 (size=0x00000001) count: 1\n     Code start=0x00000026 end=0x00000035 (size=0x0000000f) count: 1\n     Data start=0x00000037 end=0x0000003b (size=0x00000004) count: 1\n",
      "details": "\nmemory_init.16.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nType[1]:\n - type[0] () -> nil\nFunction[1]:\n - func[0] sig=0 <test>\nMemory[1]:\n - memory[0] pages: initial=1\nExport[1]:\n - func[0] <test> -> \"test\"\nDataCount:\n - data count: 1\nCode[1]:\n - func[0] size=13 <test>\nData[1]:\n - segment[0] passive size=1\n  - 0000000: 37                                       7\n",
      "disassemble": "\nmemory_init.16.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n000028 func[0] <test>:\n 000029: 41 d2 09                   | i32.const 1234\n 00002c: 41 01                      | i32.const 1\n 00002e: 41 00                      | i32.const 0\n 000030: fc 08 00 00                | memory.init 0 0\n 000034: 0b                         | end\n"
    },
    "memory_init.17.wasm": {
      "header": "\nmemory_init.17.wasm:\tfile format wasm 0x1\n\nSections:\n\n     Type start=0x0000000a end=0x0000000e (size=0x00000004) count: 1\n Function start=0x00000010 end=0x00000012 (size=0x00000002) count: 1\n   Memory start=0x00000014 end=0x00000017 (size=0x00000003) count: 1\n   Export start=0x00000019 end=0x00000021 (size=0x00000008) count: 1\nDataCount start=0x00000023 end=0x00000024 (size=0x00000001) count: 1\n     Code start=0x00000026 end=0x00000036 (size=0x00000010) count: 1\n     Data start=0x00000038 end=0x0000003c (size=0x00000004) count: 1\n",
      "details": "\nmemory_init.17.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nType[1]:\n - type[0] () -> nil\nFunction[1]:\n - func[0] sig=0 <test>\nMemory[1]:\n - memory[0] pages: initial=1\nExport[1]:\n - func[0] <test> -> \"test\"\nDataCount:\n - data count: 1\nCode[1]:\n - func[0] size=14 <test>\nData[1]:\n - segment[0] passive size=1\n  - 0000000: 37                                       7\n",
      "disassemble": "\nmemory_init.17.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n000028 func[0] <test>:\n 000029: 41 81 80 04                | i32.const 65537\n 00002d: 41 00                      | i32.const 0\n 00002f: 41 00                      | i32.const 0\n 000031: fc 08 00 00                | memory.init 0 0\n 000035: 0b                         | end\n"
    },
    "memory_init.18.wasm": {
      "header": "\nmemory_init.18.wasm:\tfile format wasm 0x1\n\nSections:\n\n     Type start=0x0000000a end=0x0000000e (size=0x00000004) count: 1\n Function start=0x00000010 end=0x00000012 (size=0x00000002) count: 1\n   Memory start=0x00000014 end=0x00000017 (size=0x00000003) count: 1\n   Export start=0x00000019 end=0x00000021 (size=0x00000008) count: 1\nDataCount start=0x00000023 end=0x00000024 (size=0x00000001) count: 1\n     Code start=0x00000026 end=0x00000036 (size=0x00000010) count: 1\n     Data start=0x00000038 end=0x0000003c (size=0x00000004) count: 1\n",
      "details": "\nmemory_init.18.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nType[1]:\n - type[0] () -> nil\nFunction[1]:\n - func[0] sig=0 <test>\nMemory[1]:\n - memory[0] pages: initial=1\nExport[1]:\n - func[0] <test> -> \"test\"\nDataCount:\n - data count: 1\nCode[1]:\n - func[0] size=14 <test>\nData[1]:\n - segment[0] passive size=1\n  - 0000000: 37                                       7\n",
      "disassemble": "\nmemory_init.18.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n000028 func[0] <test>:\n 000029: 41 80 80 04                | i32.const 65536\n 00002d: 41 00                      | i32.const 0\n 00002f: 41 00                      | i32.const 0\n 000031: fc 08 00 00                | memory.init 0 0\n 000035: 0b                         | end\n"
    },
    "memory_init.19.wasm": {
      "header": "\nmemory_init.19.wasm:\tfile format wasm 0x1\n\nSections:\n\n     Type start=0x0000000a end=0x0000000e (size=0x00000004) count: 1\n Function start=0x00000010 end=0x00000012 (size=0x00000002) count: 1\n   Memory start=0x00000014 end=0x00000017 (size=0x00000003) count: 1\n   Export start=0x00000019 end=0x00000021 (size=0x00000008) count: 1\nDataCount start=0x00000023 end=0x00000024 (size=0x00000001) count: 1\n     Code start=0x00000026 end=0x00000036 (size=0x00000010) count: 1\n     Data start=0x00000038 end=0x0000003c (size=0x00000004) count: 1\n",
      "details": "\nmemory_init.19.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nType[1]:\n - type[0] () -> nil\nFunction[1]:\n - func[0] sig=0 <test>\nMemory[1]:\n - memory[0] pages: initial=1\nExport[1]:\n - func[0] <test> -> \"test\"\nDataCount:\n - data count: 1\nCode[1]:\n - func[0] size=14 <test>\nData[1]:\n - segment[0] passive size=1\n  - 0000000: 37                                       7\n",
      "disassemble": "\nmemory_init.19.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n000028 func[0] <test>:\n 000029: 41 80 80 04                | i32.const 65536\n 00002d: 41 01                      | i32.const 1\n 00002f: 41 00                      | i32.const 0\n 000031: fc 08 00 00                | memory.init 0 0\n 000035: 0b                         | end\n"
    },
    "memory_init.20.wasm": {
      "header": "\nmemory_init.20.wasm:\tfile format wasm 0x1\n\nSections:\n\n     Type start=0x0000000a end=0x0000000e (size=0x00000004) count: 1\n Function start=0x00000010 end=0x00000012 (size=0x00000002) count: 1\n   Memory start=0x00000014 end=0x00000017 (size=0x00000003) count: 1\n   Export start=0x00000019 end=0x00000021 (size=0x00000008) count: 1\nDataCount start=0x00000023 end=0x00000024 (size=0x00000001) count: 1\n     Code start=0x00000026 end=0x00000036 (size=0x00000010) count: 1\n     Data start=0x00000038 end=0x0000003c (size=0x00000004) count: 1\n",
      "details": "\nmemory_init.20.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nType[1]:\n - type[0] () -> nil\nFunction[1]:\n - func[0] sig=0 <test>\nMemory[1]:\n - memory[0] pages: initial=1\nExport[1]:\n - func[0] <test> -> \"test\"\nDataCount:\n - data count: 1\nCode[1]:\n - func[0] size=14 <test>\nData[1]:\n - segment[0] passive size=1\n  - 0000000: 37                                       7\n",
      "disassemble": "\nmemory_init.20.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n000028 func[0] <test>:\n 000029: 41 81 80 04                | i32.const 65537\n 00002d: 41 04                      | i32.const 4\n 00002f: 41 00                      | i32.const 0\n 000031: fc 08 00 00                | memory.init 0 0\n 000035: 0b                         | end\n"
    },
    "memory_init.84.wasm": {
      "header": "\nmemory_init.84.wasm:\tfile format wasm 0x1\n\nSections:\n\n     Type start=0x0000000a end=0x00000017 (size=0x0000000d) count: 2\n Function start=0x00000019 end=0x0000001c (size=0x00000003) count: 2\n   Memory start=0x0000001e end=0x00000022 (size=0x00000004) count: 1\n   Export start=0x00000024 end=0x00000038 (size=0x00000014) count: 2\nDataCount start=0x0000003a end=0x0000003b (size=0x00000001) count: 1\n     Code start=0x0000003d end=0x00000073 (size=0x00000036) count: 2\n     Data start=0x00000075 end=0x00000088 (size=0x00000013) count: 1\n",
      "details": "\nmemory_init.84.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nType[2]:\n - type[0] (i32, i32, i32) -> i32\n - type[1] (i32, i32) -> nil\nFunction[2]:\n - func[0] sig=0 <checkRange>\n - func[1] sig=1 <run>\nMemory[1]:\n - memory[0] pages: initial=1 max=1\nExport[2]:\n - func[0] <checkRange> -> \"checkRange\"\n - func[1] <run> -> \"run\"\nDataCount:\n - data count: 1\nCode[2]:\n - func[0] size=39 <checkRange>\n - func[1] size=12 <run>\nData[1]:\n - segment[0] passive size=16\n  - 0000000: 4242 4242 4242 4242 4242 4242 4242 4242  BBBBBBBBBBBBBBBB\n",
      "disassemble": "\nmemory_init.84.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n00003f func[0] <checkRange>:\n 000040: 03 40                      | loop\n 000042: 20 00                      |   local.get 0\n 000044: 20 01                      |   local.get 1\n 000046: 46                         |   i32.eq\n 000047: 04 40                      |   if\n 000049: 41 7f                      |     i32.const 4294967295\n 00004b: 0f                         |     return\n 00004c: 0b                         |   end\n 00004d: 20 00                      |   local.get 0\n 00004f: 2d 00 00                   |   i32.load8_u 0 0\n 000052: 20 02                      |   local.get 2\n 000054: 46                         |   i32.eq\n 000055: 04 40                      |   if\n 000057: 20 00                      |     local.get 0\n 000059: 41 01                      |     i32.const 1\n 00005b: 6a                         |     i32.add\n 00005c: 21 00                      |     local.set 0\n 00005e: 0c 01                      |     br 1\n 000060: 0b                         |   end\n 000061: 0b                         | end\n 000062: 20 00                      | local.get 0\n 000064: 0f                         | return\n 000065: 0b                         | end\n000067 func[1] <run>:\n 000068: 20 00                      | local.get 0\n 00006a: 41 00                      | i32.const 0\n 00006c: 20 01                      | local.get 1\n 00006e: fc 08 00 00                | memory.init 0 0\n 000072: 0b                         | end\n"
    },
    "memory_init.85.wasm": {
      "header": "\nmemory_init.85.wasm:\tfile format wasm 0x1\n\nSections:\n\n     Type start=0x0000000a end=0x00000017 (size=0x0000000d) count: 2\n Function start=0x00000019 end=0x0000001c (size=0x00000003) count: 2\n   Memory start=0x0000001e end=0x00000022 (size=0x00000004) count: 1\n   Export start=0x00000024 end=0x00000038 (size=0x00000014) count: 2\nDataCount start=0x0000003a end=0x0000003b (size=0x00000001) count: 1\n     Code start=0x0000003d end=0x00000073 (size=0x00000036) count: 2\n     Data start=0x00000075 end=0x00000088 (size=0x00000013) count: 1\n",
      "details": "\nmemory_init.85.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nType[2]:\n - type[0] (i32, i32, i32) -> i32\n - type[1] (i32, i32) -> nil\nFunction[2]:\n - func[0] sig=0 <checkRange>\n - func[1] sig=1 <run>\nMemory[1]:\n - memory[0] pages: initial=1 max=1\nExport[2]:\n - func[0] <checkRange> -> \"checkRange\"\n - func[1] <run> -> \"run\"\nDataCount:\n - data count: 1\nCode[2]:\n - func[0] size=39 <checkRange>\n - func[1] size=12 <run>\nData[1]:\n - segment[0] passive size=16\n  - 0000000: 4242 4242 4242 4242 4242 4242 4242 4242  BBBBBBBBBBBBBBBB\n",
      "disassemble": "\nmemory_init.85.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n00003f func[0] <checkRange>:\n 000040: 03 40                      | loop\n 000042: 20 00                      |   local.get 0\n 000044: 20 01                      |   local.get 1\n 000046: 46                         |   i32.eq\n 000047: 04 40                      |   if\n 000049: 41 7f                      |     i32.const 4294967295\n 00004b: 0f                         |     return\n 00004c: 0b                         |   end\n 00004d: 20 00                      |   local.get 0\n 00004f: 2d 00 00                   |   i32.load8_u 0 0\n 000052: 20 02                      |   local.get 2\n 000054: 46                         |   i32.eq\n 000055: 04 40                      |   if\n 000057: 20 00                      |     local.get 0\n 000059: 41 01                      |     i32.const 1\n 00005b: 6a                         |     i32.add\n 00005c: 21 00                      |     local.set 0\n 00005e: 0c 01                      |     br 1\n 000060: 0b                         |   end\n 000061: 0b                         | end\n 000062: 20 00                      | local.get 0\n 000064: 0f                         | return\n 000065: 0b                         | end\n000067 func[1] <run>:\n 000068: 20 00                      | local.get 0\n 00006a: 41 00                      | i32.const 0\n 00006c: 20 01                      | local.get 1\n 00006e: fc 08 00 00                | memory.init 0 0\n 000072: 0b                         | end\n"
    },
    "memory_init.86.wasm": {
      "header": "\nmemory_init.86.wasm:\tfile format wasm 0x1\n\nSections:\n\n     Type start=0x0000000a end=0x00000017 (size=0x0000000d) count: 2\n Function start=0x00000019 end=0x0000001c (size=0x00000003) count: 2\n   Memory start=0x0000001e end=0x00000022 (size=0x00000004) count: 1\n   Export start=0x00000024 end=0x00000038 (size=0x00000014) count: 2\nDataCount start=0x0000003a end=0x0000003b (size=0x00000001) count: 1\n     Code start=0x0000003d end=0x00000073 (size=0x00000036) count: 2\n     Data start=0x00000075 end=0x00000088 (size=0x00000013) count: 1\n",
      "details": "\nmemory_init.86.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nType[2]:\n - type[0] (i32, i32, i32) -> i32\n - type[1] (i32, i32) -> nil\nFunction[2]:\n - func[0] sig=0 <checkRange>\n - func[1] sig=1 <run>\nMemory[1]:\n - memory[0] pages: initial=1 max=1\nExport[2]:\n - func[0] <checkRange> -> \"checkRange\"\n - func[1] <run> -> \"run\"\nDataCount:\n - data count: 1\nCode[2]:\n - func[0] size=39 <checkRange>\n - func[1] size=12 <run>\nData[1]:\n - segment[0] passive size=16\n  - 0000000: 4242 4242 4242 4242 4242 4242 4242 4242  BBBBBBBBBBBBBBBB\n",
      "disassemble": "\nmemory_init.86.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n00003f func[0] <checkRange>:\n 000040: 03 40                      | loop\n 000042: 20 00                      |   local.get 0\n 000044: 20 01                      |   local.get 1\n 000046: 46                         |   i32.eq\n 000047: 04 40                      |   if\n 000049: 41 7f                      |     i32.const 4294967295\n 00004b: 0f                         |     return\n 00004c: 0b                         |   end\n 00004d: 20 00                      |   local.get 0\n 00004f: 2d 00 00                   |   i32.load8_u 0 0\n 000052: 20 02                      |   local.get 2\n 000054: 46                         |   i32.eq\n 000055: 04 40                      |   if\n 000057: 20 00                      |     local.get 0\n 000059: 41 01                      |     i32.const 1\n 00005b: 6a                         |     i32.add\n 00005c: 21 00                      |     local.set 0\n 00005e: 0c 01                      |     br 1\n 000060: 0b                         |   end\n 000061: 0b                         | end\n 000062: 20 00                      | local.get 0\n 000064: 0f                         | return\n 000065: 0b                         | end\n000067 func[1] <run>:\n 000068: 20 00                      | local.get 0\n 00006a: 41 00                      | i32.const 0\n 00006c: 20 01                      | local.get 1\n 00006e: fc 08 00 00                | memory.init 0 0\n 000072: 0b                         | end\n"
    },
    "memory_init.87.wasm": {
      "header": "\nmemory_init.87.wasm:\tfile format wasm 0x1\n\nSections:\n\n     Type start=0x0000000a end=0x00000017 (size=0x0000000d) count: 2\n Function start=0x00000019 end=0x0000001c (size=0x00000003) count: 2\n   Memory start=0x0000001e end=0x00000022 (size=0x00000004) count: 1\n   Export start=0x00000024 end=0x00000038 (size=0x00000014) count: 2\nDataCount start=0x0000003a end=0x0000003b (size=0x00000001) count: 1\n     Code start=0x0000003d end=0x00000073 (size=0x00000036) count: 2\n     Data start=0x00000075 end=0x00000088 (size=0x00000013) count: 1\n",
      "details": "\nmemory_init.87.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nType[2]:\n - type[0] (i32, i32, i32) -> i32\n - type[1] (i32, i32) -> nil\nFunction[2]:\n - func[0] sig=0 <checkRange>\n - func[1] sig=1 <run>\nMemory[1]:\n - memory[0] pages: initial=1 max=1\nExport[2]:\n - func[0] <checkRange> -> \"checkRange\"\n - func[1] <run> -> \"run\"\nDataCount:\n - data count: 1\nCode[2]:\n - func[0] size=39 <checkRange>\n - func[1] size=12 <run>\nData[1]:\n - segment[0] passive size=16\n  - 0000000: 4242 4242 4242 4242 4242 4242 4242 4242  BBBBBBBBBBBBBBBB\n",
      "disassemble": "\nmemory_init.87.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n00003f func[0] <checkRange>:\n 000040: 03 40                      | loop\n 000042: 20 00                      |   local.get 0\n 000044: 20 01                      |   local.get 1\n 000046: 46                         |   i32.eq\n 000047: 04 40                      |   if\n 000049: 41 7f                      |     i32.const 4294967295\n 00004b: 0f                         |     return\n 00004c: 0b                         |   end\n 00004d: 20 00                      |   local.get 0\n 00004f: 2d 00 00                   |   i32.load8_u 0 0\n 000052: 20 02                      |   local.get 2\n 000054: 46                         |   i32.eq\n 000055: 04 40                      |   if\n 000057: 20 00                      |     local.get 0\n 000059: 41 01                      |     i32.const 1\n 00005b: 6a                         |     i32.add\n 00005c: 21 00                      |     local.set 0\n 00005e: 0c 01                      |     br 1\n 000060: 0b                         |   end\n 000061: 0b                         | end\n 000062: 20 00                      | local.get 0\n 000064: 0f                         | return\n 000065: 0b                         | end\n000067 func[1] <run>:\n 000068: 20 00                      | local.get 0\n 00006a: 41 00                      | i32.const 0\n 00006c: 20 01                      | local.get 1\n 00006e: fc 08 00 00                | memory.init 0 0\n 000072: 0b                         | end\n"
    },
    "memory_init.88.wasm": {
      "header": "\nmemory_init.88.wasm:\tfile format wasm 0x1\n\nSections:\n\n     Type start=0x0000000a end=0x00000017 (size=0x0000000d) count: 2\n Function start=0x00000019 end=0x0000001c (size=0x00000003) count: 2\n   Memory start=0x0000001e end=0x00000021 (size=0x00000003) count: 1\n   Export start=0x00000023 end=0x00000037 (size=0x00000014) count: 2\nDataCount start=0x00000039 end=0x0000003a (size=0x00000001) count: 1\n     Code start=0x0000003c end=0x00000072 (size=0x00000036) count: 2\n     Data start=0x00000074 end=0x00000087 (size=0x00000013) count: 1\n",
      "details": "\nmemory_init.88.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nType[2]:\n - type[0] (i32, i32, i32) -> i32\n - type[1] (i32, i32) -> nil\nFunction[2]:\n - func[0] sig=0 <checkRange>\n - func[1] sig=1 <run>\nMemory[1]:\n - memory[0] pages: initial=1\nExport[2]:\n - func[0] <checkRange> -> \"checkRange\"\n - func[1] <run> -> \"run\"\nDataCount:\n - data count: 1\nCode[2]:\n - func[0] size=39 <checkRange>\n - func[1] size=12 <run>\nData[1]:\n - segment[0] passive size=16\n  - 0000000: 4242 4242 4242 4242 4242 4242 4242 4242  BBBBBBBBBBBBBBBB\n",
      "disassemble": "\nmemory_init.88.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n00003e func[0] <checkRange>:\n 00003f: 03 40                      | loop\n 000041: 20 00                      |   local.get 0\n 000043: 20 01                      |   local.get 1\n 000045: 46                         |   i32.eq\n 000046: 04 40                      |   if\n 000048: 41 7f                      |     i32.const 4294967295\n 00004a: 0f                         |     return\n 00004b: 0b                         |   end\n 00004c: 20 00                      |   local.get 0\n 00004e: 2d 00 00                   |   i32.load8_u 0 0\n 000051: 20 02                      |   local.get 2\n 000053: 46                         |   i32.eq\n 000054: 04 40                      |   if\n 000056: 20 00                      |     local.get 0\n 000058: 41 01                      |     i32.const 1\n 00005a: 6a                         |     i32.add\n 00005b: 21 00                      |     local.set 0\n 00005d: 0c 01                      |     br 1\n 00005f: 0b                         |   end\n 000060: 0b                         | end\n 000061: 20 00                      | local.get 0\n 000063: 0f                         | return\n 000064: 0b                         | end\n000066 func[1] <run>:\n 000067: 20 00                      | local.get 0\n 000069: 41 00                      | i32.const 0\n 00006b: 20 01                      | local.get 1\n 00006d: fc 08 00 00                | memory.init 0 0\n 000071: 0b                         | end\n"
    },
    "memory_init.89.wasm": {
      "header": "\nmemory_init.89.wasm:\tfile format wasm 0x1\n\nSections:\n\n     Type start=0x0000000a end=0x00000017 (size=0x0000000d) count: 2\n Function start=0x00000019 end=0x0000001c (size=0x00000003) count: 2\n   Memory start=0x0000001e end=0x00000021 (size=0x00000003) count: 1\n   Export start=0x00000023 end=0x00000037 (size=0x00000014) count: 2\nDataCount start=0x00000039 end=0x0000003a (size=0x00000001) count: 1\n     Code start=0x0000003c end=0x00000072 (size=0x00000036) count: 2\n     Data start=0x00000074 end=0x00000087 (size=0x00000013) count: 1\n",
      "details": "\nmemory_init.89.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nType[2]:\n - type[0] (i32, i32, i32) -> i32\n - type[1] (i32, i32) -> nil\nFunction[2]:\n - func[0] sig=0 <checkRange>\n - func[1] sig=1 <run>\nMemory[1]:\n - memory[0] pages: initial=1\nExport[2]:\n - func[0] <checkRange> -> \"checkRange\"\n - func[1] <run> -> \"run\"\nDataCount:\n - data count: 1\nCode[2]:\n - func[0] size=39 <checkRange>\n - func[1] size=12 <run>\nData[1]:\n - segment[0] passive size=16\n  - 0000000: 4242 4242 4242 4242 4242 4242 4242 4242  BBBBBBBBBBBBBBBB\n",
      "disassemble": "\nmemory_init.89.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n00003e func[0] <checkRange>:\n 00003f: 03 40                      | loop\n 000041: 20 00                      |   local.get 0\n 000043: 20 01                      |   local.get 1\n 000045: 46                         |   i32.eq\n 000046: 04 40                      |   if\n 000048: 41 7f                      |     i32.const 4294967295\n 00004a: 0f                         |     return\n 00004b: 0b                         |   end\n 00004c: 20 00                      |   local.get 0\n 00004e: 2d 00 00                   |   i32.load8_u 0 0\n 000051: 20 02                      |   local.get 2\n 000053: 46                         |   i32.eq\n 000054: 04 40                      |   if\n 000056: 20 00                      |     local.get 0\n 000058: 41 01                      |     i32.const 1\n 00005a: 6a                         |     i32.add\n 00005b: 21 00                      |     local.set 0\n 00005d: 0c 01                      |     br 1\n 00005f: 0b                         |   end\n 000060: 0b                         | end\n 000061: 20 00                      | local.get 0\n 000063: 0f                         | return\n 000064: 0b                         | end\n000066 func[1] <run>:\n 000067: 20 00                      | local.get 0\n 000069: 41 00                      | i32.const 0\n 00006b: 20 01                      | local.get 1\n 00006d: fc 08 00 00                | memory.init 0 0\n 000071: 0b                         | end\n"
    },
    "memory_init.90.wasm": {
      "header": "\nmemory_init.90.wasm:\tfile format wasm 0x1\n\nSections:\n\n     Type start=0x0000000a end=0x0000000e (size=0x00000004) count: 1\n Function start=0x00000010 end=0x00000012 (size=0x00000002) count: 1\n   Memory start=0x00000014 end=0x00000017 (size=0x00000003) count: 1\nDataCount start=0x00000019 end=0x0000001a (size=0x00000001) count: 65\n     Code start=0x0000001c end=0x0000002a (size=0x0000000e) count: 1\n     Data start=0x0000002d end=0x000000b0 (size=0x00000083) count: 65\n",
      "details": "\nmemory_init.90.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nType[1]:\n - type[0] () -> nil\nFunction[1]:\n - func[0] sig=0\nMemory[1]:\n - memory[0] pages: initial=1\nDataCount:\n - data count: 65\nCode[1]:\n - func[0] size=12\nData[65]:\n - segment[0] passive size=0\n - segment[1] passive size=0\n - segment[2] passive size=0\n - segment[3] passive size=0\n - segment[4] passive size=0\n - segment[5] passive size=0\n - segment[6] passive size=0\n - segment[7] passive size=0\n - segment[8] passive size=0\n - segment[9] passive size=0\n - segment[10] passive size=0\n - segment[11] passive size=0\n - segment[12] passive size=0\n - segment[13] passive size=0\n - segment[14] passive size=0\n - segment[15] passive size=0\n - segment[16] passive size=0\n - segment[17] passive size=0\n - segment[18] passive size=0\n - segment[19] passive size=0\n - segment[20] passive size=0\n - segment[21] passive size=0\n - segment[22] passive size=0\n - segment[23] passive size=0\n - segment[24] passive size=0\n - segment[25] passive size=0\n - segment[26] passive size=0\n - segment[27] passive size=0\n - segment[28] passive size=0\n - segment[29] passive size=0\n - segment[30] passive size=0\n - segment[31] passive size=0\n - segment[32] passive size=0\n - segment[33] passive size=0\n - segment[34] passive size=0\n - segment[35] passive size=0\n - segment[36] passive size=0\n - segment[37] passive size=0\n - segment[38] passive size=0\n - segment[39] passive size=0\n - segment[40] passive size=0\n - segment[41] passive size=0\n - segment[42] passive size=0\n - segment[43] passive size=0\n - segment[44] passive size=0\n - segment[45] passive size=0\n - segment[46] passive size=0\n - segment[47] passive size=0\n - segment[48] passive size=0\n - segment[49] passive size=0\n - segment[50] passive size=0\n - segment[51] passive size=0\n - segment[52] passive size=0\n - segment[53] passive size=0\n - segment[54] passive size=0\n - segment[55] passive size=0\n - segment[56] passive size=0\n - segment[57] passive size=0\n - segment[58] passive size=0\n - segment[59] passive size=0\n - segment[60] passive size=0\n - segment[61] passive size=0\n - segment[62] passive size=0\n - segment[63] passive size=0\n - segment[64] passive size=0\n",
      "disassemble": "\nmemory_init.90.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n00001e func[0]:\n 00001f: 41 00                      | i32.const 0\n 000021: 41 00                      | i32.const 0\n 000023: 41 00                      | i32.const 0\n 000025: fc 08 40 00                | memory.init 64 0\n 000029: 0b                         | end\n"
    }
  }
}
