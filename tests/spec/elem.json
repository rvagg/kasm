{
  "bin": {
    "elem.0.wasm": "AGFzbQEAAAABBAFgAAADAwIAAAQEAXAACgmkAz0BAAAFcATSAAvSAAvQcAvSAQsBAAABAAQAAAEBAQAABXAE0gAL0gAL0HAL0gELAQAAAQAEAAABAQBBAAsABEEACwLSAAvQcAsAQQALAABBAAsCAAEAQQALAABBAAsCAAEAQQALAABBAAsCAAAAQQALAABBAAsCAAAAQQALAABBAAsCAAAAQQALAABBAAsCAAAAQQALAARBAAsC0gAL0HALAEEACwIAAABBAAsCAAAAQQALAARBAAsC0gAL0HALAEEACwIAAABBAAsCAAAEQQALAtIAC9BwCwBBAAsABEEACwLSAAvQcAsAQQALAABBAAsCAAEAQQALAABBAAsCAAEAQQALAABBAAsCAAAAQQALAABBAAsCAAAAQQALAABBAAsCAAAAQQALAABBAAsCAAAAQQALAARBAAsC0gAL0HALAEEACwIAAABBAAsCAAAAQQALAARBAAsC0gAL0HALAEEACwIAAABBAAsCAAADAAAHcATSAAvSAAvQcAvSAQsDAAADAAQAAAEBAwAAB3AE0gAL0gAL0HAL0gELAwAAAwAEAAABAQoHAgIACwIACw==",
    "elem.1.wasm": "AGFzbQEAAAABBAFgAAADAwIAAAQFAXABAwMJDwEEQQALA9IAC9BwC9IBCwoHAgIACwIACw==",
    "elem.10.wasm": "AGFzbQEAAAABBAFgAAADAgEABAQBcAABBgYBfwBBAAsJBwEAIwALAQAKBAECAAs=",
    "elem.11.wasm": "AGFzbQEAAAABBAFgAAADAgEABAQBcAABBgYBfwBBAAsJBwEAIwALAQAKBAECAAs=",
    "elem.12.wasm": "AGFzbQEAAAABBAFgAAADAgEABAQBcAAKCQcBAEEJCwEACgQBAgAL",
    "elem.13.wasm": "AGFzbQEAAAABBAFgAAACFAEIc3BlY3Rlc3QFdGFibGUBcAAKAwIBAAkHAQBBCQsBAAoEAQIACw==",
    "elem.14.wasm": "AGFzbQEAAAAEBAFwAAAJBgEAQQALAA==",
    "elem.15.wasm": "AGFzbQEAAAACFAEIc3BlY3Rlc3QFdGFibGUBcAAACQYBAEEACwA=",
    "elem.16.wasm": "AGFzbQEAAAAEBQFwAQAACQYBAEEACwA=",
    "elem.17.wasm": "AGFzbQEAAAAEBAFwABQJBgEAQRQLAA==",
    "elem.18.wasm": "AGFzbQEAAAABBAFgAAACFAEIc3BlY3Rlc3QFdGFibGUBcAAAAwIBAAkHAQBBAAsBAAoEAQIACw==",
    "elem.19.wasm": "AGFzbQEAAAABBAFgAAACFQEIc3BlY3Rlc3QFdGFibGUBcAEAZAMCAQAJBwEAQQALAQAKBAECAAs=",
    "elem.2.wasm": "AGFzbQEAAAABBAFgAAADAgEABAQBcAAKCQcBAEEACwEACgQBAgAL",
    "elem.20.wasm": "AGFzbQEAAAABBAFgAAACFAEIc3BlY3Rlc3QFdGFibGUBcAAAAwIBAAkHAQBBAQsBAAoEAQIACw==",
    "elem.21.wasm": "AGFzbQEAAAABBAFgAAACFQEIc3BlY3Rlc3QFdGFibGUBcAEAHgMCAQAJBwEAQQELAQAKBAECAAs=",
    "elem.22.wasm": "AGFzbQEAAAABBAFgAAADAgEABAQBcAAACQcBAEEACwEACgQBAgAL",
    "elem.23.wasm": "AGFzbQEAAAABBAFgAAADAgEABAUBcAEAAAkHAQBBAAsBAAoEAQIACw==",
    "elem.24.wasm": "AGFzbQEAAAABBAFgAAADAgEABAUBcAEAAQkHAQBBAAsBAAoEAQIACw==",
    "elem.25.wasm": "AGFzbQEAAAAEBAFwAAAJBgEAQQELAA==",
    "elem.26.wasm": "AGFzbQEAAAABBAFgAAADAgEABAQBcAAKCQcBAEEKCwEACgQBAgAL",
    "elem.27.wasm": "AGFzbQEAAAABBAFgAAACFAEIc3BlY3Rlc3QFdGFibGUBcAAKAwIBAAkHAQBBCgsBAAoEAQIACw==",
    "elem.28.wasm": "AGFzbQEAAAABBAFgAAADAgEABAUBcAEKFAkHAQBBCgsBAAoEAQIACw==",
    "elem.29.wasm": "AGFzbQEAAAABBAFgAAACFAEIc3BlY3Rlc3QFdGFibGUBcAAKAwIBAAkHAQBBCgsBAAoEAQIACw==",
    "elem.3.wasm": "AGFzbQEAAAABBAFgAAACFAEIc3BlY3Rlc3QFdGFibGUBcAAKAwIBAAkHAQBBAAsBAAoEAQIACw==",
    "elem.30.wasm": "AGFzbQEAAAABBAFgAAADAgEABAQBcAAKCQcBAEF/CwEACgQBAgAL",
    "elem.31.wasm": "AGFzbQEAAAABBAFgAAACFAEIc3BlY3Rlc3QFdGFibGUBcAAKAwIBAAkHAQBBfwsBAAoEAQIACw==",
    "elem.32.wasm": "AGFzbQEAAAABBAFgAAADAgEABAQBcAAKCQcBAEF2CwEACgQBAgAL",
    "elem.33.wasm": "AGFzbQEAAAABBAFgAAACFAEIc3BlY3Rlc3QFdGFibGUBcAAKAwIBAAkHAQBBdgsBAAoEAQIACw==",
    "elem.34.wasm": "AGFzbQEAAAABBAFgAAADAwIAAAQEAXAACgcIAQRpbml0AAEJBwEAQQALAQAKEQICAAsMAEEAQQBBAfwMAAAL",
    "elem.35.wasm": "AGFzbQEAAAABBAFgAAADAwIAAAQEAXAACgcIAQRpbml0AAEJBQEDAAEAChECAgALDABBAEEAQQH8DAAACw==",
    "elem.36.wasm": "AGFzbQEAAAABBAFgAAADAgEACQcBAEEACwEACgQBAgAL",
    "elem.37.wasm": "AGFzbQEAAAAEBAFwAAEJBgEAQgALAA==",
    "elem.38.wasm": "AGFzbQEAAAAEBAFwAAEJBgEA0HALAA==",
    "elem.39.wasm": "AGFzbQEAAAAEBAFwAAEJBAEACwA=",
    "elem.4.wasm": "AGFzbQEAAAABBAFgAAADAgEABAQBcAAKCR8FAEEACwEAAEEDCwEAAEEHCwEAAEEFCwEAAEEDCwEACgQBAgAL",
    "elem.40.wasm": "AGFzbQEAAAAEBAFwAAEJCAEAQQBBAAsA",
    "elem.41.wasm": "AGFzbQEAAAACFAEEdGVzdApnbG9iYWwtaTMyA38ABAQBcAABCQgBACMAIwALAA==",
    "elem.42.wasm": "AGFzbQEAAAACFAEEdGVzdApnbG9iYWwtaTMyA38ABAQBcAABCQgBACMAQQALAA==",
    "elem.43.wasm": "AGFzbQEAAAAEBAFwAAEJBwEAQQBoCwA=",
    "elem.44.wasm": "AGFzbQEAAAAEBAFwAAEJBQEAAQsA",
    "elem.45.wasm": "AGFzbQEAAAAEBAFwAAEJBwEAAUEACwA=",
    "elem.46.wasm": "AGFzbQEAAAAEBAFwAAEJBwEAQQABCwA=",
    "elem.47.wasm": "AGFzbQEAAAACCwEEdGVzdAFnA38BBAQBcAABCQYBACMACwA=",
    "elem.48.wasm": "AGFzbQEAAAAEBAFwAAEJBgEAIwALAA==",
    "elem.49.wasm": "AGFzbQEAAAACFAEEdGVzdApnbG9iYWwtaTMyA38ABAQBcAABCQYBACMBCwA=",
    "elem.5.wasm": "AGFzbQEAAAABBAFgAAACFAEIc3BlY3Rlc3QFdGFibGUBcAAKAwIBAAkfBQBBCQsBAABBAwsBAABBBwsBAABBAwsBAABBBQsBAAoEAQIACw==",
    "elem.50.wasm": "AGFzbQEAAAACGAEEdGVzdA5nbG9iYWwtbXV0LWkzMgN/AQQEAXAAAQkGAQAjAAsA",
    "elem.51.wasm": "AGFzbQEAAAAEBAFwAAEJCQEEQQALAdBvCw==",
    "elem.52.wasm": "AGFzbQEAAAAEBAFwAAEJCwEEQQALAdBw0HAL",
    "elem.53.wasm": "AGFzbQEAAAAEBAFwAAEJCQEEQQALAUEACw==",
    "elem.54.wasm": "AGFzbQEAAAAEBAFwAAEJCQEEQQALAUEACw==",
    "elem.55.wasm": "AGFzbQEAAAABBQFgAAFwAwIBAAQEAXAAAQkJAQRBAAsBEAALCgYBBADQcAs=",
    "elem.56.wasm": "AGFzbQEAAAABBQFgAAF/AwQDAAAABAQBcAAKBxQBEGNhbGwtb3ZlcndyaXR0ZW4AAgkNAgBBCQsBAABBCQsBAQoVAwUAQcEACwUAQcIACwcAQQkRAAAL",
    "elem.57.wasm": "AGFzbQEAAAABBQFgAAF/AhQBCHNwZWN0ZXN0BXRhYmxlAXAACgMEAwAAAAccARhjYWxsLW92ZXJ3cml0dGVuLWVsZW1lbnQAAgkNAgBBCQsBAABBCQsBAQoVAwUAQcEACwUAQcIACwcAQQkRAAAL",
    "elem.58.wasm": "AGFzbQEAAAABBQFgAAF/AwYFAAAAAAAEBAFwAAoHKwQMc2hhcmVkLXRhYmxlAQAGY2FsbC03AAIGY2FsbC04AAMGY2FsbC05AAQJDQIAQQgLAQAAQQkLAQEKJQUFAEHBAAsFAEHCAAsHAEEHEQAACwcAQQgRAAALBwBBCREAAAs=",
    "elem.59.wasm": "AGFzbQEAAAABBQFgAAF/AhoBB21vZHVsZTEMc2hhcmVkLXRhYmxlAXAACgMDAgAACQ0CAEEHCwEAAEEICwEBCg0CBQBBwwALBQBBxAAL",
    "elem.6.wasm": "AGFzbQEAAAABBAFgAAACGAEIc3BlY3Rlc3QKZ2xvYmFsX2kzMgN/AAMCAQAEBQFwAOgHCQcBACMACwEACgQBAgAL",
    "elem.60.wasm": "AGFzbQEAAAABBQFgAAF/AhoBB21vZHVsZTEMc2hhcmVkLXRhYmxlAXAACgMDAgAACQ0CAEEICwEAAEEJCwEBCg0CBQBBxQALBQBBxgAL",
    "elem.61.wasm": "AGFzbQEAAAABBAFgAAADAgEABAQBbwABCQcBAEEACwEACgQBAgAL",
    "elem.62.wasm": "AGFzbQEAAAAEBAFwAAEJCwEGAEEAC28B0G8L",
    "elem.63.wasm": "AGFzbQEAAAABBAFgAAADAwIAAAQEAW8AAQkFAQEAAQAKEQICAAsMAEEAQQBBAfwMAAAL",
    "elem.64.wasm": "AGFzbQEAAAABBAFgAAADAgEABAQBcAABCQcBBW8B0G8LCg4BDABBAEEAQQH8DAAACw==",
    "elem.65.wasm": "AGFzbQEAAAABCwJgAX8Bb2ACf28AAwMCAAEEBAFvAAIHFQMFdGFibGUBAANnZXQAAANzZXQAAQoRAgYAIAAlAAsIACAAIAEmAAs=",
    "elem.66.wasm": "AGFzbQEAAAACFAEIZXhwb3J0ZXIFdGFibGUBbwACCQsBBgBBAAtvAdBvCw==",
    "elem.67.wasm": "AGFzbQEAAAABBQFgAAF/AwIBAAYGAXAA0gALBwUBAWYDAAoGAQQAQSoL",
    "elem.68.wasm": "AGFzbQEAAAABBQFgAAF/Ag4BB21vZHVsZTQBZgNwAAMCAQAEBAFwAAoHFgESY2FsbF9pbXBvcnRlZF9lbGVtAAAJCQEEQQALASMACwoJAQcAQQARAAAL",
    "elem.7.wasm": "AGFzbQEAAAABBAFgAAACGAEIc3BlY3Rlc3QKZ2xvYmFsX2kzMgN/AAMCAQAEBQFwAOgHCQcBACMACwEACgQBAgAL",
    "elem.8.wasm": "AGFzbQEAAAABBQFgAAF/AwUEAAAAAAQEAXAACgcTAgZjYWxsLTcAAgZjYWxsLTkAAwkNAgBBBwsBAABBCQsBAQodBAUAQcEACwUAQcIACwcAQQcRAAALBwBBCREAAAs=",
    "elem.9.wasm": "AGFzbQEAAAABBQFgAAF/AwUEAAAAAAQEAXAACwcTAgZjYWxsLTcAAgZjYWxsLTkAAwkXAgRBBgsC0HAL0gALBEEJCwLSAQvQcAsKHQQFAEHBAAsFAEHCAAsHAEEHEQAACwcAQQkRAAAL"
  },
  "spec": {"source_filename": "/home/rvagg/git/webassembly/spec/test/core/elem.wast",
 "commands": [
  {"type": "module", "line": 4, "filename": "elem.0.wasm"}, 
  {"type": "module", "line": 80, "filename": "elem.1.wasm"}, 
  {"type": "module", "line": 90, "filename": "elem.2.wasm"}, 
  {"type": "module", "line": 95, "filename": "elem.3.wasm"}, 
  {"type": "module", "line": 101, "filename": "elem.4.wasm"}, 
  {"type": "module", "line": 110, "filename": "elem.5.wasm"}, 
  {"type": "module", "line": 120, "filename": "elem.6.wasm"}, 
  {"type": "module", "line": 127, "filename": "elem.7.wasm"}, 
  {"type": "module", "line": 134, "filename": "elem.8.wasm"}, 
  {"type": "assert_return", "line": 148, "action": {"type": "invoke", "field": "call-7", "args": []}, "expected": [{"type": "i32", "value": "65"}]}, 
  {"type": "assert_return", "line": 149, "action": {"type": "invoke", "field": "call-9", "args": []}, "expected": [{"type": "i32", "value": "66"}]}, 
  {"type": "module", "line": 153, "filename": "elem.9.wasm"}, 
  {"type": "assert_return", "line": 167, "action": {"type": "invoke", "field": "call-7", "args": []}, "expected": [{"type": "i32", "value": "65"}]}, 
  {"type": "assert_return", "line": 168, "action": {"type": "invoke", "field": "call-9", "args": []}, "expected": [{"type": "i32", "value": "66"}]}, 
  {"type": "assert_invalid", "line": 171, "filename": "elem.10.wasm", "text": "unknown global", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 175, "filename": "elem.11.wasm", "text": "unknown global", "module_type": "binary"}, 
  {"type": "module", "line": 182, "filename": "elem.12.wasm"}, 
  {"type": "module", "line": 187, "filename": "elem.13.wasm"}, 
  {"type": "module", "line": 193, "filename": "elem.14.wasm"}, 
  {"type": "module", "line": 197, "filename": "elem.15.wasm"}, 
  {"type": "module", "line": 202, "filename": "elem.16.wasm"}, 
  {"type": "module", "line": 207, "filename": "elem.17.wasm"}, 
  {"type": "module", "line": 212, "filename": "elem.18.wasm"}, 
  {"type": "module", "line": 218, "filename": "elem.19.wasm"}, 
  {"type": "module", "line": 224, "filename": "elem.20.wasm"}, 
  {"type": "module", "line": 230, "filename": "elem.21.wasm"}, 
  {"type": "assert_uninstantiable", "line": 239, "filename": "elem.22.wasm", "text": "out of bounds table access", "module_type": "binary"}, 
  {"type": "assert_uninstantiable", "line": 248, "filename": "elem.23.wasm", "text": "out of bounds table access", "module_type": "binary"}, 
  {"type": "assert_uninstantiable", "line": 257, "filename": "elem.24.wasm", "text": "out of bounds table access", "module_type": "binary"}, 
  {"type": "assert_uninstantiable", "line": 266, "filename": "elem.25.wasm", "text": "out of bounds table access", "module_type": "binary"}, 
  {"type": "assert_uninstantiable", "line": 273, "filename": "elem.26.wasm", "text": "out of bounds table access", "module_type": "binary"}, 
  {"type": "assert_uninstantiable", "line": 281, "filename": "elem.27.wasm", "text": "out of bounds table access", "module_type": "binary"}, 
  {"type": "assert_uninstantiable", "line": 290, "filename": "elem.28.wasm", "text": "out of bounds table access", "module_type": "binary"}, 
  {"type": "assert_uninstantiable", "line": 298, "filename": "elem.29.wasm", "text": "out of bounds table access", "module_type": "binary"}, 
  {"type": "assert_uninstantiable", "line": 307, "filename": "elem.30.wasm", "text": "out of bounds table access", "module_type": "binary"}, 
  {"type": "assert_uninstantiable", "line": 315, "filename": "elem.31.wasm", "text": "out of bounds table access", "module_type": "binary"}, 
  {"type": "assert_uninstantiable", "line": 324, "filename": "elem.32.wasm", "text": "out of bounds table access", "module_type": "binary"}, 
  {"type": "assert_uninstantiable", "line": 332, "filename": "elem.33.wasm", "text": "out of bounds table access", "module_type": "binary"}, 
  {"type": "module", "line": 342, "filename": "elem.34.wasm"}, 
  {"type": "assert_trap", "line": 350, "action": {"type": "invoke", "field": "init", "args": []}, "text": "out of bounds table access", "expected": []}, 
  {"type": "module", "line": 352, "filename": "elem.35.wasm"}, 
  {"type": "assert_trap", "line": 360, "action": {"type": "invoke", "field": "init", "args": []}, "text": "out of bounds table access", "expected": []}, 
  {"type": "assert_invalid", "line": 365, "filename": "elem.36.wasm", "text": "unknown table", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 375, "filename": "elem.37.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 383, "filename": "elem.38.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 391, "filename": "elem.39.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 399, "filename": "elem.40.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 407, "filename": "elem.41.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 416, "filename": "elem.42.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 426, "filename": "elem.43.wasm", "text": "constant expression required", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 434, "filename": "elem.44.wasm", "text": "constant expression required", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 442, "filename": "elem.45.wasm", "text": "constant expression required", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 450, "filename": "elem.46.wasm", "text": "constant expression required", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 458, "filename": "elem.47.wasm", "text": "constant expression required", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 467, "filename": "elem.48.wasm", "text": "unknown global 0", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 475, "filename": "elem.49.wasm", "text": "unknown global 1", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 484, "filename": "elem.50.wasm", "text": "constant expression required", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 495, "filename": "elem.51.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 503, "filename": "elem.52.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 511, "filename": "elem.53.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 519, "filename": "elem.54.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 527, "filename": "elem.55.wasm", "text": "constant expression required", "module_type": "binary"}, 
  {"type": "module", "line": 537, "filename": "elem.56.wasm"}, 
  {"type": "assert_return", "line": 548, "action": {"type": "invoke", "field": "call-overwritten", "args": []}, "expected": [{"type": "i32", "value": "66"}]}, 
  {"type": "module", "line": 550, "filename": "elem.57.wasm"}, 
  {"type": "assert_return", "line": 561, "action": {"type": "invoke", "field": "call-overwritten-element", "args": []}, "expected": [{"type": "i32", "value": "66"}]}, 
  {"type": "module", "line": 565, "name": "$module1", "filename": "elem.58.wasm"}, 
  {"type": "register", "line": 583, "name": "$module1", "as": "module1"}, 
  {"type": "assert_trap", "line": 585, "action": {"type": "invoke", "module": "$module1", "field": "call-7", "args": []}, "text": "uninitialized element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_return", "line": 586, "action": {"type": "invoke", "module": "$module1", "field": "call-8", "args": []}, "expected": [{"type": "i32", "value": "65"}]}, 
  {"type": "assert_return", "line": 587, "action": {"type": "invoke", "module": "$module1", "field": "call-9", "args": []}, "expected": [{"type": "i32", "value": "66"}]}, 
  {"type": "module", "line": 589, "name": "$module2", "filename": "elem.59.wasm"}, 
  {"type": "assert_return", "line": 598, "action": {"type": "invoke", "module": "$module1", "field": "call-7", "args": []}, "expected": [{"type": "i32", "value": "67"}]}, 
  {"type": "assert_return", "line": 599, "action": {"type": "invoke", "module": "$module1", "field": "call-8", "args": []}, "expected": [{"type": "i32", "value": "68"}]}, 
  {"type": "assert_return", "line": 600, "action": {"type": "invoke", "module": "$module1", "field": "call-9", "args": []}, "expected": [{"type": "i32", "value": "66"}]}, 
  {"type": "module", "line": 602, "name": "$module3", "filename": "elem.60.wasm"}, 
  {"type": "assert_return", "line": 611, "action": {"type": "invoke", "module": "$module1", "field": "call-7", "args": []}, "expected": [{"type": "i32", "value": "67"}]}, 
  {"type": "assert_return", "line": 612, "action": {"type": "invoke", "module": "$module1", "field": "call-8", "args": []}, "expected": [{"type": "i32", "value": "69"}]}, 
  {"type": "assert_return", "line": 613, "action": {"type": "invoke", "module": "$module1", "field": "call-9", "args": []}, "expected": [{"type": "i32", "value": "70"}]}, 
  {"type": "assert_invalid", "line": 618, "filename": "elem.61.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 623, "filename": "elem.62.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 628, "filename": "elem.63.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 637, "filename": "elem.64.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "module", "line": 646, "name": "$m", "filename": "elem.65.wasm"}, 
  {"type": "register", "line": 653, "name": "$m", "as": "exporter"}, 
  {"type": "assert_return", "line": 655, "action": {"type": "invoke", "module": "$m", "field": "get", "args": [{"type": "i32", "value": "0"}]}, "expected": [{"type": "externref", "value": "null"}]}, 
  {"type": "assert_return", "line": 656, "action": {"type": "invoke", "module": "$m", "field": "get", "args": [{"type": "i32", "value": "1"}]}, "expected": [{"type": "externref", "value": "null"}]}, 
  {"type": "assert_return", "line": 658, "action": {"type": "invoke", "module": "$m", "field": "set", "args": [{"type": "i32", "value": "0"}, {"type": "externref", "value": "42"}]}, "expected": []}, 
  {"type": "assert_return", "line": 659, "action": {"type": "invoke", "module": "$m", "field": "set", "args": [{"type": "i32", "value": "1"}, {"type": "externref", "value": "137"}]}, "expected": []}, 
  {"type": "assert_return", "line": 661, "action": {"type": "invoke", "module": "$m", "field": "get", "args": [{"type": "i32", "value": "0"}]}, "expected": [{"type": "externref", "value": "42"}]}, 
  {"type": "assert_return", "line": 662, "action": {"type": "invoke", "module": "$m", "field": "get", "args": [{"type": "i32", "value": "1"}]}, "expected": [{"type": "externref", "value": "137"}]}, 
  {"type": "module", "line": 664, "filename": "elem.66.wasm"}, 
  {"type": "assert_return", "line": 668, "action": {"type": "invoke", "module": "$m", "field": "get", "args": [{"type": "i32", "value": "0"}]}, "expected": [{"type": "externref", "value": "null"}]}, 
  {"type": "assert_return", "line": 669, "action": {"type": "invoke", "module": "$m", "field": "get", "args": [{"type": "i32", "value": "1"}]}, "expected": [{"type": "externref", "value": "137"}]}, 
  {"type": "module", "line": 673, "name": "$module4", "filename": "elem.67.wasm"}, 
  {"type": "register", "line": 680, "name": "$module4", "as": "module4"}, 
  {"type": "module", "line": 682, "filename": "elem.68.wasm"}, 
  {"type": "assert_return", "line": 692, "action": {"type": "invoke", "field": "call_imported_elem", "args": []}, "expected": [{"type": "i32", "value": "42"}]}]},
  "code": [
    "(module (table $t 10 funcref)\n  (func $f)\n  (func $g) (elem funcref) (elem funcref (ref.func $f) (item ref.func $f) (item (ref.null func)) (ref.func $g)) (elem ) (elem $f $f $g $g) (elem $p1 funcref) (elem $p2 funcref (ref.func $f) (ref.func $f) (ref.null func) (ref.func $g)) (elem $p3 ) (elem $p4 $f $f $g $g) (elem (table $t) (i32.const 0) funcref) (elem (table $t) (i32.const 0) funcref (ref.func $f) (ref.null func)) (elem (table $t) (i32.const 0) ) (elem (table $t) (i32.const 0) $f $g) (elem (table $t) (offset (i32.const 0)) funcref) (elem (table $t) (offset (i32.const 0)) $f $g) (elem (table 0) (i32.const 0) ) (elem (table 0x0) (i32.const 0) $f $f) (elem (table 0x000) (offset (i32.const 0)) ) (elem (table 0) (offset (i32.const 0)) $f $f) (elem (table $t) (i32.const 0) ) (elem (table $t) (i32.const 0) $f $f) (elem (table $t) (offset (i32.const 0)) ) (elem (table $t) (offset (i32.const 0)) $f $f) (elem (offset (i32.const 0))) (elem (offset (i32.const 0)) funcref (ref.func $f) (ref.null func)) (elem (offset (i32.const 0)) $f $f) (elem (offset (i32.const 0)) $f $f) (elem (i32.const 0)) (elem (i32.const 0) funcref (ref.func $f) (ref.null func)) (elem (i32.const 0) $f $f) (elem (i32.const 0) $f $f) (elem (i32.const 0) funcref (item (ref.func $f)) (item (ref.null func))) (elem $a1 (table $t) (i32.const 0) funcref) (elem $a2 (table $t) (i32.const 0) funcref (ref.func $f) (ref.null func)) (elem $a3 (table $t) (i32.const 0) ) (elem $a4 (table $t) (i32.const 0) $f $g) (elem $a9 (table $t) (offset (i32.const 0)) funcref) (elem $a10 (table $t) (offset (i32.const 0)) $f $g) (elem $a11 (table 0) (i32.const 0) ) (elem $a12 (table 0x0) (i32.const 0) $f $f) (elem $a13 (table 0x000) (offset (i32.const 0)) ) (elem $a14 (table 0) (offset (i32.const 0)) $f $f) (elem $a15 (table $t) (i32.const 0) ) (elem $a16 (table $t) (i32.const 0) $f $f) (elem $a17 (table $t) (offset (i32.const 0)) ) (elem $a18 (table $t) (offset (i32.const 0)) $f $f) (elem $a19 (offset (i32.const 0))) (elem $a20 (offset (i32.const 0)) funcref (ref.func $f) (ref.null func)) (elem $a21 (offset (i32.const 0)) $f $f) (elem $a22 (offset (i32.const 0)) $f $f) (elem $a23 (i32.const 0)) (elem $a24 (i32.const 0) funcref (ref.func $f) (ref.null func)) (elem $a25 (i32.const 0) $f $f) (elem $a26 (i32.const 0) $f $f) (elem declare funcref) (elem declare funcref (ref.func $f) (ref.func $f) (ref.null func) (ref.func $g)) (elem declare ) (elem declare $f $f $g $g) (elem $d1 declare funcref) (elem $d2 declare funcref (ref.func $f) (ref.func $f) (ref.null func) (ref.func $g)) (elem $d3 declare ) (elem $d4 declare $f $f $g $g))",
    "(module \n  (func $f)\n  (func $g) (table $t funcref (elem (ref.func $f) (ref.null func) (ref.func $g))))",
    "(module (table 10 funcref)\n  (func $f) (elem (i32.const 0) $f))",
    "(module (import \"spectest\" \"table\" (table 10 funcref))\n  (func $f) (elem (i32.const 0) $f))",
    "(module (table 10 funcref)\n  (func $f) (elem (i32.const 0) $f) (elem (i32.const 3) $f) (elem (i32.const 7) $f) (elem (i32.const 5) $f) (elem (i32.const 3) $f))",
    "(module (import \"spectest\" \"table\" (table 10 funcref))\n  (func $f) (elem (i32.const 9) $f) (elem (i32.const 3) $f) (elem (i32.const 7) $f) (elem (i32.const 3) $f) (elem (i32.const 5) $f))",
    "(module (global (import \"spectest\" \"global_i32\") i32) (table 1000 funcref)\n  (func $f) (elem (global.get 0) $f))",
    "(module (global $g (import \"spectest\" \"global_i32\") i32) (table 1000 funcref)\n  (func $f) (elem (global.get $g) $f))",
    "(module (type $out-i32 (func (result i32))) (table 10 funcref) (elem (i32.const 7) $const-i32-a) (elem (i32.const 9) $const-i32-b)\n  (func $const-i32-a (type $out-i32) (i32.const 65))\n  (func $const-i32-b (type $out-i32) (i32.const 66))\n  (func (export \"call-7\") (type $out-i32) (call_indirect (type $out-i32) (i32.const 7)) )\n  (func (export \"call-9\") (type $out-i32) (call_indirect (type $out-i32) (i32.const 9)) ))",
    "(assert_return (invoke \"call-7\") (i32.const 65))",
    "(assert_return (invoke \"call-9\") (i32.const 66))",
    "(module (type $out-i32 (func (result i32))) (table 11 funcref) (elem (i32.const 6) funcref (ref.null func) (ref.func $const-i32-a)) (elem (i32.const 9) funcref (ref.func $const-i32-b) (ref.null func))\n  (func $const-i32-a (type $out-i32) (i32.const 65))\n  (func $const-i32-b (type $out-i32) (i32.const 66))\n  (func (export \"call-7\") (type $out-i32) (call_indirect (type $out-i32) (i32.const 7)) )\n  (func (export \"call-9\") (type $out-i32) (call_indirect (type $out-i32) (i32.const 9)) ))",
    "(assert_return (invoke \"call-7\") (i32.const 65))",
    "(assert_return (invoke \"call-9\") (i32.const 66))",
    "(assert_invalid (module (table 1 funcref) (global i32 (i32.const 0)) (elem (global.get 0) $f) (func $f)) \"unknown global\")",
    "(assert_invalid (module (table 1 funcref) (global $g i32 (i32.const 0)) (elem (global.get $g) $f) (func $f)) \"unknown global\")",
    "(module (table 10 funcref)\n  (func $f) (elem (i32.const 9) $f))",
    "(module (import \"spectest\" \"table\" (table 10 funcref))\n  (func $f) (elem (i32.const 9) $f))",
    "(module (table 0 funcref) (elem (i32.const 0)))",
    "(module (import \"spectest\" \"table\" (table 0 funcref)) (elem (i32.const 0)))",
    "(module (table 0 0 funcref) (elem (i32.const 0)))",
    "(module (table 20 funcref) (elem (i32.const 20)))",
    "(module (import \"spectest\" \"table\" (table 0 funcref))\n  (func $f) (elem (i32.const 0) $f))",
    "(module (import \"spectest\" \"table\" (table 0 100 funcref))\n  (func $f) (elem (i32.const 0) $f))",
    "(module (import \"spectest\" \"table\" (table 0 funcref))\n  (func $f) (elem (i32.const 1) $f))",
    "(module (import \"spectest\" \"table\" (table 0 30 funcref))\n  (func $f) (elem (i32.const 1) $f))",
    "(assert_trap (module (table 0 funcref) (func $f) (elem (i32.const 0) $f) ) \"out of bounds table access\")",
    "(assert_trap (module (table 0 0 funcref) (func $f) (elem (i32.const 0) $f) ) \"out of bounds table access\")",
    "(assert_trap (module (table 0 1 funcref) (func $f) (elem (i32.const 0) $f) ) \"out of bounds table access\")",
    "(assert_trap (module (table 0 funcref) (elem (i32.const 1)) ) \"out of bounds table access\")",
    "(assert_trap (module (table 10 funcref) (func $f) (elem (i32.const 10) $f) ) \"out of bounds table access\")",
    "(assert_trap (module (import \"spectest\" \"table\" (table 10 funcref)) (func $f) (elem (i32.const 10) $f) ) \"out of bounds table access\")",
    "(assert_trap (module (table 10 20 funcref) (func $f) (elem (i32.const 10) $f) ) \"out of bounds table access\")",
    "(assert_trap (module (import \"spectest\" \"table\" (table 10 funcref)) (func $f) (elem (i32.const 10) $f) ) \"out of bounds table access\")",
    "(assert_trap (module (table 10 funcref) (func $f) (elem (i32.const -1) $f) ) \"out of bounds table access\")",
    "(assert_trap (module (import \"spectest\" \"table\" (table 10 funcref)) (func $f) (elem (i32.const -1) $f) ) \"out of bounds table access\")",
    "(assert_trap (module (table 10 funcref) (func $f) (elem (i32.const -10) $f) ) \"out of bounds table access\")",
    "(assert_trap (module (import \"spectest\" \"table\" (table 10 funcref)) (func $f) (elem (i32.const -10) $f) ) \"out of bounds table access\")",
    "(module (table 10 funcref) (elem $e (i32.const 0) $f)\n  (func $f)\n  (func (export \"init\") (table.init $e (i32.const 0) (i32.const 0) (i32.const 1)) ))",
    "(assert_trap (invoke \"init\") \"out of bounds table access\")",
    "(module (table 10 funcref) (elem $e declare $f)\n  (func $f)\n  (func (export \"init\") (table.init $e (i32.const 0) (i32.const 0) (i32.const 1)) ))",
    "(assert_trap (invoke \"init\") \"out of bounds table access\")",
    "(assert_invalid (module (func $f) (elem (i32.const 0) $f) ) \"unknown table\")",
    "(assert_invalid (module (table 1 funcref) (elem (i64.const 0)) ) \"type mismatch\")",
    "(assert_invalid (module (table 1 funcref) (elem (ref.null func)) ) \"type mismatch\")",
    "(assert_invalid (module (table 1 funcref) (elem (offset )) ) \"type mismatch\")",
    "(assert_invalid (module (table 1 funcref) (elem (offset (i32.const 0) (i32.const 0))) ) \"type mismatch\")",
    "(assert_invalid (module (global (import \"test\" \"global-i32\") i32) (table 1 funcref) (elem (offset (global.get 0) (global.get 0))) ) \"type mismatch\")",
    "(assert_invalid (module (global (import \"test\" \"global-i32\") i32) (table 1 funcref) (elem (offset (global.get 0) (i32.const 0))) ) \"type mismatch\")",
    "(assert_invalid (module (table 1 funcref) (elem (i32.ctz (i32.const 0))) ) \"constant expression required\")",
    "(assert_invalid (module (table 1 funcref) (elem (nop)) ) \"constant expression required\")",
    "(assert_invalid (module (table 1 funcref) (elem (offset (nop) (i32.const 0))) ) \"constant expression required\")",
    "(assert_invalid (module (table 1 funcref) (elem (offset (i32.const 0) (nop))) ) \"constant expression required\")",
    "(assert_invalid (module (global $g (import \"test\" \"g\") (mut i32)) (table 1 funcref) (elem (global.get $g)) ) \"constant expression required\")",
    "(assert_invalid (module (table 1 funcref) (elem (global.get 0)) ) \"unknown global 0\")",
    "(assert_invalid (module (global (import \"test\" \"global-i32\") i32) (table 1 funcref) (elem (global.get 1)) ) \"unknown global 1\")",
    "(assert_invalid (module (global (import \"test\" \"global-mut-i32\") (mut i32)) (table 1 funcref) (elem (global.get 0)) ) \"constant expression required\")",
    "(assert_invalid (module (table 1 funcref) (elem (i32.const 0) funcref (ref.null extern)) ) \"type mismatch\")",
    "(assert_invalid (module (table 1 funcref) (elem (i32.const 0) funcref (item (ref.null func) (ref.null func))) ) \"type mismatch\")",
    "(assert_invalid (module (table 1 funcref) (elem (i32.const 0) funcref (i32.const 0)) ) \"type mismatch\")",
    "(assert_invalid (module (table 1 funcref) (elem (i32.const 0) funcref (item (i32.const 0))) ) \"type mismatch\")",
    "(assert_invalid (module (table 1 funcref) (elem (i32.const 0) funcref (item (call $f))) (func $f (result funcref) (ref.null func)) ) \"constant expression required\")",
    "(module (type $out-i32 (func (result i32))) (table 10 funcref) (elem (i32.const 9) $const-i32-a) (elem (i32.const 9) $const-i32-b)\n  (func $const-i32-a (type $out-i32) (i32.const 65))\n  (func $const-i32-b (type $out-i32) (i32.const 66))\n  (func (export \"call-overwritten\") (type $out-i32) (call_indirect (type $out-i32) (i32.const 9)) ))",
    "(assert_return (invoke \"call-overwritten\") (i32.const 66))",
    "(module (type $out-i32 (func (result i32))) (import \"spectest\" \"table\" (table 10 funcref)) (elem (i32.const 9) $const-i32-a) (elem (i32.const 9) $const-i32-b)\n  (func $const-i32-a (type $out-i32) (i32.const 65))\n  (func $const-i32-b (type $out-i32) (i32.const 66))\n  (func (export \"call-overwritten-element\") (type $out-i32) (call_indirect (type $out-i32) (i32.const 9)) ))",
    "(assert_return (invoke \"call-overwritten-element\") (i32.const 66))",
    "(module $module1 (type $out-i32 (func (result i32))) (table (export \"shared-table\") 10 funcref) (elem (i32.const 8) $const-i32-a) (elem (i32.const 9) $const-i32-b)\n  (func $const-i32-a (type $out-i32) (i32.const 65))\n  (func $const-i32-b (type $out-i32) (i32.const 66))\n  (func (export \"call-7\") (type $out-i32) (call_indirect (type $out-i32) (i32.const 7)) )\n  (func (export \"call-8\") (type $out-i32) (call_indirect (type $out-i32) (i32.const 8)) )\n  (func (export \"call-9\") (type $out-i32) (call_indirect (type $out-i32) (i32.const 9)) ))",
    "(register \"module1\" $module1)",
    "(assert_trap (invoke $module1 \"call-7\") \"uninitialized element\")",
    "(assert_return (invoke $module1 \"call-8\") (i32.const 65))",
    "(assert_return (invoke $module1 \"call-9\") (i32.const 66))",
    "(module $module2 (type $out-i32 (func (result i32))) (import \"module1\" \"shared-table\" (table 10 funcref)) (elem (i32.const 7) $const-i32-c) (elem (i32.const 8) $const-i32-d)\n  (func $const-i32-c (type $out-i32) (i32.const 67))\n  (func $const-i32-d (type $out-i32) (i32.const 68)))",
    "(assert_return (invoke $module1 \"call-7\") (i32.const 67))",
    "(assert_return (invoke $module1 \"call-8\") (i32.const 68))",
    "(assert_return (invoke $module1 \"call-9\") (i32.const 66))",
    "(module $module3 (type $out-i32 (func (result i32))) (import \"module1\" \"shared-table\" (table 10 funcref)) (elem (i32.const 8) $const-i32-e) (elem (i32.const 9) $const-i32-f)\n  (func $const-i32-e (type $out-i32) (i32.const 69))\n  (func $const-i32-f (type $out-i32) (i32.const 70)))",
    "(assert_return (invoke $module1 \"call-7\") (i32.const 67))",
    "(assert_return (invoke $module1 \"call-8\") (i32.const 69))",
    "(assert_return (invoke $module1 \"call-9\") (i32.const 70))",
    "(assert_invalid (module (func $f) (table 1 externref) (elem (i32.const 0) $f)) \"type mismatch\")",
    "(assert_invalid (module (table 1 funcref) (elem (i32.const 0) externref (ref.null extern))) \"type mismatch\")",
    "(assert_invalid (module (func $f) (table $t 1 externref) (elem $e funcref (ref.func $f)) (func (table.init $t $e (i32.const 0) (i32.const 0) (i32.const 1)))) \"type mismatch\")",
    "(assert_invalid (module (table $t 1 funcref) (elem $e externref (ref.null extern)) (func (table.init $t $e (i32.const 0) (i32.const 0) (i32.const 1)))) \"type mismatch\")",
    "(module $m\t(table $t (export \"table\") 2 externref)\n  (func (export \"get\") (param $i i32) (result externref)\t(table.get $t (local.get $i)))\n  (func (export \"set\") (param $i i32) (param $x externref)\t(table.set $t (local.get $i) (local.get $x))))",
    "(register \"exporter\" $m)",
    "(assert_return (invoke $m \"get\" (i32.const 0)) (ref.null extern))",
    "(assert_return (invoke $m \"get\" (i32.const 1)) (ref.null extern))",
    "(assert_return (invoke $m \"set\" (i32.const 0) (ref.extern 42)))",
    "(assert_return (invoke $m \"set\" (i32.const 1) (ref.extern 137)))",
    "(assert_return (invoke $m \"get\" (i32.const 0)) (ref.extern 42))",
    "(assert_return (invoke $m \"get\" (i32.const 1)) (ref.extern 137))",
    "(module (import \"exporter\" \"table\" (table $t 2 externref)) (elem (i32.const 0) externref (ref.null extern)))",
    "(assert_return (invoke $m \"get\" (i32.const 0)) (ref.null extern))",
    "(assert_return (invoke $m \"get\" (i32.const 1)) (ref.extern 137))",
    "(module $module4\n  (func (result i32) i32.const 42 ) (global (export \"f\") funcref (ref.func 0)))",
    "(register \"module4\" $module4)",
    "(module (import \"module4\" \"f\" (global funcref)) (type $out-i32 (func (result i32))) (table 10 funcref) (elem (offset (i32.const 0)) funcref (global.get 0))\n  (func (export \"call_imported_elem\") (type $out-i32) (call_indirect (type $out-i32) (i32.const 0)) ))",
    "(assert_return (invoke \"call_imported_elem\") (i32.const 42))"
  ],
  "dump": {
    "elem.0.wasm": {
      "header": "\nelem.0.wasm:\tfile format wasm 0x1\n\nSections:\n\n     Type start=0x0000000a end=0x0000000e (size=0x00000004) count: 1\n Function start=0x00000010 end=0x00000013 (size=0x00000003) count: 2\n    Table start=0x00000015 end=0x00000019 (size=0x00000004) count: 1\n     Elem start=0x0000001c end=0x000001c0 (size=0x000001a4) count: 61\n     Code start=0x000001c2 end=0x000001c9 (size=0x00000007) count: 2\n",
      "details": "\nelem.0.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nType[1]:\n - type[0] () -> nil\nFunction[2]:\n - func[0] sig=0\n - func[1] sig=0\nTable[1]:\n - table[0] type=funcref initial=10\nElem[61]:\n - segment[0] flags=1 table=0 count=0\n - segment[1] flags=5 table=0 count=4\n  - elem[0] = ref.func:0\n  - elem[1] = ref.func:0\n  - elem[2] = ref.null funcref\n  - elem[3] = ref.func:1\n - segment[2] flags=1 table=0 count=0\n - segment[3] flags=1 table=0 count=4\n  - elem[0] = ref.func:0\n  - elem[1] = ref.func:0\n  - elem[2] = ref.func:1\n  - elem[3] = ref.func:1\n - segment[4] flags=1 table=0 count=0\n - segment[5] flags=5 table=0 count=4\n  - elem[0] = ref.func:0\n  - elem[1] = ref.func:0\n  - elem[2] = ref.null funcref\n  - elem[3] = ref.func:1\n - segment[6] flags=1 table=0 count=0\n - segment[7] flags=1 table=0 count=4\n  - elem[0] = ref.func:0\n  - elem[1] = ref.func:0\n  - elem[2] = ref.func:1\n  - elem[3] = ref.func:1\n - segment[8] flags=0 table=0 count=0 - init i32=0\n - segment[9] flags=4 table=0 count=2 - init i32=0\n  - elem[0] = ref.func:0\n  - elem[1] = ref.null funcref\n - segment[10] flags=0 table=0 count=0 - init i32=0\n - segment[11] flags=0 table=0 count=2 - init i32=0\n  - elem[0] = ref.func:0\n  - elem[1] = ref.func:1\n - segment[12] flags=0 table=0 count=0 - init i32=0\n - segment[13] flags=0 table=0 count=2 - init i32=0\n  - elem[0] = ref.func:0\n  - elem[1] = ref.func:1\n - segment[14] flags=0 table=0 count=0 - init i32=0\n - segment[15] flags=0 table=0 count=2 - init i32=0\n  - elem[0] = ref.func:0\n  - elem[1] = ref.func:0\n - segment[16] flags=0 table=0 count=0 - init i32=0\n - segment[17] flags=0 table=0 count=2 - init i32=0\n  - elem[0] = ref.func:0\n  - elem[1] = ref.func:0\n - segment[18] flags=0 table=0 count=0 - init i32=0\n - segment[19] flags=0 table=0 count=2 - init i32=0\n  - elem[0] = ref.func:0\n  - elem[1] = ref.func:0\n - segment[20] flags=0 table=0 count=0 - init i32=0\n - segment[21] flags=0 table=0 count=2 - init i32=0\n  - elem[0] = ref.func:0\n  - elem[1] = ref.func:0\n - segment[22] flags=0 table=0 count=0 - init i32=0\n - segment[23] flags=4 table=0 count=2 - init i32=0\n  - elem[0] = ref.func:0\n  - elem[1] = ref.null funcref\n - segment[24] flags=0 table=0 count=2 - init i32=0\n  - elem[0] = ref.func:0\n  - elem[1] = ref.func:0\n - segment[25] flags=0 table=0 count=2 - init i32=0\n  - elem[0] = ref.func:0\n  - elem[1] = ref.func:0\n - segment[26] flags=0 table=0 count=0 - init i32=0\n - segment[27] flags=4 table=0 count=2 - init i32=0\n  - elem[0] = ref.func:0\n  - elem[1] = ref.null funcref\n - segment[28] flags=0 table=0 count=2 - init i32=0\n  - elem[0] = ref.func:0\n  - elem[1] = ref.func:0\n - segment[29] flags=0 table=0 count=2 - init i32=0\n  - elem[0] = ref.func:0\n  - elem[1] = ref.func:0\n - segment[30] flags=4 table=0 count=2 - init i32=0\n  - elem[0] = ref.func:0\n  - elem[1] = ref.null funcref\n - segment[31] flags=0 table=0 count=0 - init i32=0\n - segment[32] flags=4 table=0 count=2 - init i32=0\n  - elem[0] = ref.func:0\n  - elem[1] = ref.null funcref\n - segment[33] flags=0 table=0 count=0 - init i32=0\n - segment[34] flags=0 table=0 count=2 - init i32=0\n  - elem[0] = ref.func:0\n  - elem[1] = ref.func:1\n - segment[35] flags=0 table=0 count=0 - init i32=0\n - segment[36] flags=0 table=0 count=2 - init i32=0\n  - elem[0] = ref.func:0\n  - elem[1] = ref.func:1\n - segment[37] flags=0 table=0 count=0 - init i32=0\n - segment[38] flags=0 table=0 count=2 - init i32=0\n  - elem[0] = ref.func:0\n  - elem[1] = ref.func:0\n - segment[39] flags=0 table=0 count=0 - init i32=0\n - segment[40] flags=0 table=0 count=2 - init i32=0\n  - elem[0] = ref.func:0\n  - elem[1] = ref.func:0\n - segment[41] flags=0 table=0 count=0 - init i32=0\n - segment[42] flags=0 table=0 count=2 - init i32=0\n  - elem[0] = ref.func:0\n  - elem[1] = ref.func:0\n - segment[43] flags=0 table=0 count=0 - init i32=0\n - segment[44] flags=0 table=0 count=2 - init i32=0\n  - elem[0] = ref.func:0\n  - elem[1] = ref.func:0\n - segment[45] flags=0 table=0 count=0 - init i32=0\n - segment[46] flags=4 table=0 count=2 - init i32=0\n  - elem[0] = ref.func:0\n  - elem[1] = ref.null funcref\n - segment[47] flags=0 table=0 count=2 - init i32=0\n  - elem[0] = ref.func:0\n  - elem[1] = ref.func:0\n - segment[48] flags=0 table=0 count=2 - init i32=0\n  - elem[0] = ref.func:0\n  - elem[1] = ref.func:0\n - segment[49] flags=0 table=0 count=0 - init i32=0\n - segment[50] flags=4 table=0 count=2 - init i32=0\n  - elem[0] = ref.func:0\n  - elem[1] = ref.null funcref\n - segment[51] flags=0 table=0 count=2 - init i32=0\n  - elem[0] = ref.func:0\n  - elem[1] = ref.func:0\n - segment[52] flags=0 table=0 count=2 - init i32=0\n  - elem[0] = ref.func:0\n  - elem[1] = ref.func:0\n - segment[53] flags=3 table=0 count=0\n - segment[54] flags=7 table=0 count=4\n  - elem[0] = ref.func:0\n  - elem[1] = ref.func:0\n  - elem[2] = ref.null funcref\n  - elem[3] = ref.func:1\n - segment[55] flags=3 table=0 count=0\n - segment[56] flags=3 table=0 count=4\n  - elem[0] = ref.func:0\n  - elem[1] = ref.func:0\n  - elem[2] = ref.func:1\n  - elem[3] = ref.func:1\n - segment[57] flags=3 table=0 count=0\n - segment[58] flags=7 table=0 count=4\n  - elem[0] = ref.func:0\n  - elem[1] = ref.func:0\n  - elem[2] = ref.null funcref\n  - elem[3] = ref.func:1\n - segment[59] flags=3 table=0 count=0\n - segment[60] flags=3 table=0 count=4\n  - elem[0] = ref.func:0\n  - elem[1] = ref.func:0\n  - elem[2] = ref.func:1\n  - elem[3] = ref.func:1\nCode[2]:\n - func[0] size=2\n - func[1] size=2\n",
      "disassemble": "\nelem.0.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n0001c4 func[0]:\n 0001c5: 0b                         | end\n0001c7 func[1]:\n 0001c8: 0b                         | end\n"
    },
    "elem.1.wasm": {
      "header": "\nelem.1.wasm:\tfile format wasm 0x1\n\nSections:\n\n     Type start=0x0000000a end=0x0000000e (size=0x00000004) count: 1\n Function start=0x00000010 end=0x00000013 (size=0x00000003) count: 2\n    Table start=0x00000015 end=0x0000001a (size=0x00000005) count: 1\n     Elem start=0x0000001c end=0x0000002b (size=0x0000000f) count: 1\n     Code start=0x0000002d end=0x00000034 (size=0x00000007) count: 2\n",
      "details": "\nelem.1.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nType[1]:\n - type[0] () -> nil\nFunction[2]:\n - func[0] sig=0\n - func[1] sig=0\nTable[1]:\n - table[0] type=funcref initial=3 max=3\nElem[1]:\n - segment[0] flags=4 table=0 count=3 - init i32=0\n  - elem[0] = ref.func:0\n  - elem[1] = ref.null funcref\n  - elem[2] = ref.func:1\nCode[2]:\n - func[0] size=2\n - func[1] size=2\n",
      "disassemble": "\nelem.1.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n00002f func[0]:\n 000030: 0b                         | end\n000032 func[1]:\n 000033: 0b                         | end\n"
    },
    "elem.2.wasm": {
      "header": "\nelem.2.wasm:\tfile format wasm 0x1\n\nSections:\n\n     Type start=0x0000000a end=0x0000000e (size=0x00000004) count: 1\n Function start=0x00000010 end=0x00000012 (size=0x00000002) count: 1\n    Table start=0x00000014 end=0x00000018 (size=0x00000004) count: 1\n     Elem start=0x0000001a end=0x00000021 (size=0x00000007) count: 1\n     Code start=0x00000023 end=0x00000027 (size=0x00000004) count: 1\n",
      "details": "\nelem.2.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nType[1]:\n - type[0] () -> nil\nFunction[1]:\n - func[0] sig=0\nTable[1]:\n - table[0] type=funcref initial=10\nElem[1]:\n - segment[0] flags=0 table=0 count=1 - init i32=0\n  - elem[0] = ref.func:0\nCode[1]:\n - func[0] size=2\n",
      "disassemble": "\nelem.2.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n000025 func[0]:\n 000026: 0b                         | end\n"
    },
    "elem.3.wasm": {
      "header": "\nelem.3.wasm:\tfile format wasm 0x1\n\nSections:\n\n     Type start=0x0000000a end=0x0000000e (size=0x00000004) count: 1\n   Import start=0x00000010 end=0x00000024 (size=0x00000014) count: 1\n Function start=0x00000026 end=0x00000028 (size=0x00000002) count: 1\n     Elem start=0x0000002a end=0x00000031 (size=0x00000007) count: 1\n     Code start=0x00000033 end=0x00000037 (size=0x00000004) count: 1\n",
      "details": "\nelem.3.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nType[1]:\n - type[0] () -> nil\nImport[1]:\n - table[0] type=funcref initial=10 <- spectest.table\nFunction[1]:\n - func[0] sig=0\nElem[1]:\n - segment[0] flags=0 table=0 count=1 - init i32=0\n  - elem[0] = ref.func:0\nCode[1]:\n - func[0] size=2\n",
      "disassemble": "\nelem.3.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n000035 func[0]:\n 000036: 0b                         | end\n"
    },
    "elem.4.wasm": {
      "header": "\nelem.4.wasm:\tfile format wasm 0x1\n\nSections:\n\n     Type start=0x0000000a end=0x0000000e (size=0x00000004) count: 1\n Function start=0x00000010 end=0x00000012 (size=0x00000002) count: 1\n    Table start=0x00000014 end=0x00000018 (size=0x00000004) count: 1\n     Elem start=0x0000001a end=0x00000039 (size=0x0000001f) count: 5\n     Code start=0x0000003b end=0x0000003f (size=0x00000004) count: 1\n",
      "details": "\nelem.4.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nType[1]:\n - type[0] () -> nil\nFunction[1]:\n - func[0] sig=0\nTable[1]:\n - table[0] type=funcref initial=10\nElem[5]:\n - segment[0] flags=0 table=0 count=1 - init i32=0\n  - elem[0] = ref.func:0\n - segment[1] flags=0 table=0 count=1 - init i32=3\n  - elem[3] = ref.func:0\n - segment[2] flags=0 table=0 count=1 - init i32=7\n  - elem[7] = ref.func:0\n - segment[3] flags=0 table=0 count=1 - init i32=5\n  - elem[5] = ref.func:0\n - segment[4] flags=0 table=0 count=1 - init i32=3\n  - elem[3] = ref.func:0\nCode[1]:\n - func[0] size=2\n",
      "disassemble": "\nelem.4.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n00003d func[0]:\n 00003e: 0b                         | end\n"
    },
    "elem.5.wasm": {
      "header": "\nelem.5.wasm:\tfile format wasm 0x1\n\nSections:\n\n     Type start=0x0000000a end=0x0000000e (size=0x00000004) count: 1\n   Import start=0x00000010 end=0x00000024 (size=0x00000014) count: 1\n Function start=0x00000026 end=0x00000028 (size=0x00000002) count: 1\n     Elem start=0x0000002a end=0x00000049 (size=0x0000001f) count: 5\n     Code start=0x0000004b end=0x0000004f (size=0x00000004) count: 1\n",
      "details": "\nelem.5.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nType[1]:\n - type[0] () -> nil\nImport[1]:\n - table[0] type=funcref initial=10 <- spectest.table\nFunction[1]:\n - func[0] sig=0\nElem[5]:\n - segment[0] flags=0 table=0 count=1 - init i32=9\n  - elem[9] = ref.func:0\n - segment[1] flags=0 table=0 count=1 - init i32=3\n  - elem[3] = ref.func:0\n - segment[2] flags=0 table=0 count=1 - init i32=7\n  - elem[7] = ref.func:0\n - segment[3] flags=0 table=0 count=1 - init i32=3\n  - elem[3] = ref.func:0\n - segment[4] flags=0 table=0 count=1 - init i32=5\n  - elem[5] = ref.func:0\nCode[1]:\n - func[0] size=2\n",
      "disassemble": "\nelem.5.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n00004d func[0]:\n 00004e: 0b                         | end\n"
    },
    "elem.6.wasm": {
      "header": "\nelem.6.wasm:\tfile format wasm 0x1\n\nSections:\n\n     Type start=0x0000000a end=0x0000000e (size=0x00000004) count: 1\n   Import start=0x00000010 end=0x00000028 (size=0x00000018) count: 1\n Function start=0x0000002a end=0x0000002c (size=0x00000002) count: 1\n    Table start=0x0000002e end=0x00000033 (size=0x00000005) count: 1\n     Elem start=0x00000035 end=0x0000003c (size=0x00000007) count: 1\n     Code start=0x0000003e end=0x00000042 (size=0x00000004) count: 1\n",
      "details": "\nelem.6.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nType[1]:\n - type[0] () -> nil\nImport[1]:\n - global[0] i32 mutable=0 <- spectest.global_i32\nFunction[1]:\n - func[0] sig=0\nTable[1]:\n - table[0] type=funcref initial=1000\nElem[1]:\n - segment[0] flags=0 table=0 count=1 - init global=0 <spectest.global_i32>\n  - elem[0] = ref.func:0\nCode[1]:\n - func[0] size=2\n",
      "disassemble": "\nelem.6.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n000040 func[0]:\n 000041: 0b                         | end\n"
    },
    "elem.7.wasm": {
      "header": "\nelem.7.wasm:\tfile format wasm 0x1\n\nSections:\n\n     Type start=0x0000000a end=0x0000000e (size=0x00000004) count: 1\n   Import start=0x00000010 end=0x00000028 (size=0x00000018) count: 1\n Function start=0x0000002a end=0x0000002c (size=0x00000002) count: 1\n    Table start=0x0000002e end=0x00000033 (size=0x00000005) count: 1\n     Elem start=0x00000035 end=0x0000003c (size=0x00000007) count: 1\n     Code start=0x0000003e end=0x00000042 (size=0x00000004) count: 1\n",
      "details": "\nelem.7.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nType[1]:\n - type[0] () -> nil\nImport[1]:\n - global[0] i32 mutable=0 <- spectest.global_i32\nFunction[1]:\n - func[0] sig=0\nTable[1]:\n - table[0] type=funcref initial=1000\nElem[1]:\n - segment[0] flags=0 table=0 count=1 - init global=0 <spectest.global_i32>\n  - elem[0] = ref.func:0\nCode[1]:\n - func[0] size=2\n",
      "disassemble": "\nelem.7.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n000040 func[0]:\n 000041: 0b                         | end\n"
    },
    "elem.8.wasm": {
      "header": "\nelem.8.wasm:\tfile format wasm 0x1\n\nSections:\n\n     Type start=0x0000000a end=0x0000000f (size=0x00000005) count: 1\n Function start=0x00000011 end=0x00000016 (size=0x00000005) count: 4\n    Table start=0x00000018 end=0x0000001c (size=0x00000004) count: 1\n   Export start=0x0000001e end=0x00000031 (size=0x00000013) count: 2\n     Elem start=0x00000033 end=0x00000040 (size=0x0000000d) count: 2\n     Code start=0x00000042 end=0x0000005f (size=0x0000001d) count: 4\n",
      "details": "\nelem.8.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nType[1]:\n - type[0] () -> i32\nFunction[4]:\n - func[0] sig=0\n - func[1] sig=0\n - func[2] sig=0 <call-7>\n - func[3] sig=0 <call-9>\nTable[1]:\n - table[0] type=funcref initial=10\nExport[2]:\n - func[2] <call-7> -> \"call-7\"\n - func[3] <call-9> -> \"call-9\"\nElem[2]:\n - segment[0] flags=0 table=0 count=1 - init i32=7\n  - elem[7] = ref.func:0\n - segment[1] flags=0 table=0 count=1 - init i32=9\n  - elem[9] = ref.func:1\nCode[4]:\n - func[0] size=5\n - func[1] size=5\n - func[2] size=7 <call-7>\n - func[3] size=7 <call-9>\n",
      "disassemble": "\nelem.8.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n000044 func[0]:\n 000045: 41 c1 00                   | i32.const 65\n 000048: 0b                         | end\n00004a func[1]:\n 00004b: 41 c2 00                   | i32.const 66\n 00004e: 0b                         | end\n000050 func[2] <call-7>:\n 000051: 41 07                      | i32.const 7\n 000053: 11 00 00                   | call_indirect 0 (type 0)\n 000056: 0b                         | end\n000058 func[3] <call-9>:\n 000059: 41 09                      | i32.const 9\n 00005b: 11 00 00                   | call_indirect 0 (type 0)\n 00005e: 0b                         | end\n"
    },
    "elem.9.wasm": {
      "header": "\nelem.9.wasm:\tfile format wasm 0x1\n\nSections:\n\n     Type start=0x0000000a end=0x0000000f (size=0x00000005) count: 1\n Function start=0x00000011 end=0x00000016 (size=0x00000005) count: 4\n    Table start=0x00000018 end=0x0000001c (size=0x00000004) count: 1\n   Export start=0x0000001e end=0x00000031 (size=0x00000013) count: 2\n     Elem start=0x00000033 end=0x0000004a (size=0x00000017) count: 2\n     Code start=0x0000004c end=0x00000069 (size=0x0000001d) count: 4\n",
      "details": "\nelem.9.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nType[1]:\n - type[0] () -> i32\nFunction[4]:\n - func[0] sig=0\n - func[1] sig=0\n - func[2] sig=0 <call-7>\n - func[3] sig=0 <call-9>\nTable[1]:\n - table[0] type=funcref initial=11\nExport[2]:\n - func[2] <call-7> -> \"call-7\"\n - func[3] <call-9> -> \"call-9\"\nElem[2]:\n - segment[0] flags=4 table=0 count=2 - init i32=6\n  - elem[6] = ref.null funcref\n  - elem[7] = ref.func:0\n - segment[1] flags=4 table=0 count=2 - init i32=9\n  - elem[9] = ref.func:1\n  - elem[10] = ref.null funcref\nCode[4]:\n - func[0] size=5\n - func[1] size=5\n - func[2] size=7 <call-7>\n - func[3] size=7 <call-9>\n",
      "disassemble": "\nelem.9.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n00004e func[0]:\n 00004f: 41 c1 00                   | i32.const 65\n 000052: 0b                         | end\n000054 func[1]:\n 000055: 41 c2 00                   | i32.const 66\n 000058: 0b                         | end\n00005a func[2] <call-7>:\n 00005b: 41 07                      | i32.const 7\n 00005d: 11 00 00                   | call_indirect 0 (type 0)\n 000060: 0b                         | end\n000062 func[3] <call-9>:\n 000063: 41 09                      | i32.const 9\n 000065: 11 00 00                   | call_indirect 0 (type 0)\n 000068: 0b                         | end\n"
    },
    "elem.12.wasm": {
      "header": "\nelem.12.wasm:\tfile format wasm 0x1\n\nSections:\n\n     Type start=0x0000000a end=0x0000000e (size=0x00000004) count: 1\n Function start=0x00000010 end=0x00000012 (size=0x00000002) count: 1\n    Table start=0x00000014 end=0x00000018 (size=0x00000004) count: 1\n     Elem start=0x0000001a end=0x00000021 (size=0x00000007) count: 1\n     Code start=0x00000023 end=0x00000027 (size=0x00000004) count: 1\n",
      "details": "\nelem.12.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nType[1]:\n - type[0] () -> nil\nFunction[1]:\n - func[0] sig=0\nTable[1]:\n - table[0] type=funcref initial=10\nElem[1]:\n - segment[0] flags=0 table=0 count=1 - init i32=9\n  - elem[9] = ref.func:0\nCode[1]:\n - func[0] size=2\n",
      "disassemble": "\nelem.12.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n000025 func[0]:\n 000026: 0b                         | end\n"
    },
    "elem.13.wasm": {
      "header": "\nelem.13.wasm:\tfile format wasm 0x1\n\nSections:\n\n     Type start=0x0000000a end=0x0000000e (size=0x00000004) count: 1\n   Import start=0x00000010 end=0x00000024 (size=0x00000014) count: 1\n Function start=0x00000026 end=0x00000028 (size=0x00000002) count: 1\n     Elem start=0x0000002a end=0x00000031 (size=0x00000007) count: 1\n     Code start=0x00000033 end=0x00000037 (size=0x00000004) count: 1\n",
      "details": "\nelem.13.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nType[1]:\n - type[0] () -> nil\nImport[1]:\n - table[0] type=funcref initial=10 <- spectest.table\nFunction[1]:\n - func[0] sig=0\nElem[1]:\n - segment[0] flags=0 table=0 count=1 - init i32=9\n  - elem[9] = ref.func:0\nCode[1]:\n - func[0] size=2\n",
      "disassemble": "\nelem.13.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n000035 func[0]:\n 000036: 0b                         | end\n"
    },
    "elem.14.wasm": {
      "header": "\nelem.14.wasm:\tfile format wasm 0x1\n\nSections:\n\n    Table start=0x0000000a end=0x0000000e (size=0x00000004) count: 1\n     Elem start=0x00000010 end=0x00000016 (size=0x00000006) count: 1\n",
      "details": "\nelem.14.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nTable[1]:\n - table[0] type=funcref initial=0\nElem[1]:\n - segment[0] flags=0 table=0 count=0 - init i32=0\n",
      "disassemble": "\nelem.14.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n"
    },
    "elem.15.wasm": {
      "header": "\nelem.15.wasm:\tfile format wasm 0x1\n\nSections:\n\n   Import start=0x0000000a end=0x0000001e (size=0x00000014) count: 1\n     Elem start=0x00000020 end=0x00000026 (size=0x00000006) count: 1\n",
      "details": "\nelem.15.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nImport[1]:\n - table[0] type=funcref initial=0 <- spectest.table\nElem[1]:\n - segment[0] flags=0 table=0 count=0 - init i32=0\n",
      "disassemble": "\nelem.15.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n"
    },
    "elem.16.wasm": {
      "header": "\nelem.16.wasm:\tfile format wasm 0x1\n\nSections:\n\n    Table start=0x0000000a end=0x0000000f (size=0x00000005) count: 1\n     Elem start=0x00000011 end=0x00000017 (size=0x00000006) count: 1\n",
      "details": "\nelem.16.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nTable[1]:\n - table[0] type=funcref initial=0 max=0\nElem[1]:\n - segment[0] flags=0 table=0 count=0 - init i32=0\n",
      "disassemble": "\nelem.16.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n"
    },
    "elem.17.wasm": {
      "header": "\nelem.17.wasm:\tfile format wasm 0x1\n\nSections:\n\n    Table start=0x0000000a end=0x0000000e (size=0x00000004) count: 1\n     Elem start=0x00000010 end=0x00000016 (size=0x00000006) count: 1\n",
      "details": "\nelem.17.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nTable[1]:\n - table[0] type=funcref initial=20\nElem[1]:\n - segment[0] flags=0 table=0 count=0 - init i32=20\n",
      "disassemble": "\nelem.17.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n"
    },
    "elem.18.wasm": {
      "header": "\nelem.18.wasm:\tfile format wasm 0x1\n\nSections:\n\n     Type start=0x0000000a end=0x0000000e (size=0x00000004) count: 1\n   Import start=0x00000010 end=0x00000024 (size=0x00000014) count: 1\n Function start=0x00000026 end=0x00000028 (size=0x00000002) count: 1\n     Elem start=0x0000002a end=0x00000031 (size=0x00000007) count: 1\n     Code start=0x00000033 end=0x00000037 (size=0x00000004) count: 1\n",
      "details": "\nelem.18.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nType[1]:\n - type[0] () -> nil\nImport[1]:\n - table[0] type=funcref initial=0 <- spectest.table\nFunction[1]:\n - func[0] sig=0\nElem[1]:\n - segment[0] flags=0 table=0 count=1 - init i32=0\n  - elem[0] = ref.func:0\nCode[1]:\n - func[0] size=2\n",
      "disassemble": "\nelem.18.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n000035 func[0]:\n 000036: 0b                         | end\n"
    },
    "elem.19.wasm": {
      "header": "\nelem.19.wasm:\tfile format wasm 0x1\n\nSections:\n\n     Type start=0x0000000a end=0x0000000e (size=0x00000004) count: 1\n   Import start=0x00000010 end=0x00000025 (size=0x00000015) count: 1\n Function start=0x00000027 end=0x00000029 (size=0x00000002) count: 1\n     Elem start=0x0000002b end=0x00000032 (size=0x00000007) count: 1\n     Code start=0x00000034 end=0x00000038 (size=0x00000004) count: 1\n",
      "details": "\nelem.19.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nType[1]:\n - type[0] () -> nil\nImport[1]:\n - table[0] type=funcref initial=0 max=100 <- spectest.table\nFunction[1]:\n - func[0] sig=0\nElem[1]:\n - segment[0] flags=0 table=0 count=1 - init i32=0\n  - elem[0] = ref.func:0\nCode[1]:\n - func[0] size=2\n",
      "disassemble": "\nelem.19.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n000036 func[0]:\n 000037: 0b                         | end\n"
    },
    "elem.20.wasm": {
      "header": "\nelem.20.wasm:\tfile format wasm 0x1\n\nSections:\n\n     Type start=0x0000000a end=0x0000000e (size=0x00000004) count: 1\n   Import start=0x00000010 end=0x00000024 (size=0x00000014) count: 1\n Function start=0x00000026 end=0x00000028 (size=0x00000002) count: 1\n     Elem start=0x0000002a end=0x00000031 (size=0x00000007) count: 1\n     Code start=0x00000033 end=0x00000037 (size=0x00000004) count: 1\n",
      "details": "\nelem.20.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nType[1]:\n - type[0] () -> nil\nImport[1]:\n - table[0] type=funcref initial=0 <- spectest.table\nFunction[1]:\n - func[0] sig=0\nElem[1]:\n - segment[0] flags=0 table=0 count=1 - init i32=1\n  - elem[1] = ref.func:0\nCode[1]:\n - func[0] size=2\n",
      "disassemble": "\nelem.20.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n000035 func[0]:\n 000036: 0b                         | end\n"
    },
    "elem.21.wasm": {
      "header": "\nelem.21.wasm:\tfile format wasm 0x1\n\nSections:\n\n     Type start=0x0000000a end=0x0000000e (size=0x00000004) count: 1\n   Import start=0x00000010 end=0x00000025 (size=0x00000015) count: 1\n Function start=0x00000027 end=0x00000029 (size=0x00000002) count: 1\n     Elem start=0x0000002b end=0x00000032 (size=0x00000007) count: 1\n     Code start=0x00000034 end=0x00000038 (size=0x00000004) count: 1\n",
      "details": "\nelem.21.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nType[1]:\n - type[0] () -> nil\nImport[1]:\n - table[0] type=funcref initial=0 max=30 <- spectest.table\nFunction[1]:\n - func[0] sig=0\nElem[1]:\n - segment[0] flags=0 table=0 count=1 - init i32=1\n  - elem[1] = ref.func:0\nCode[1]:\n - func[0] size=2\n",
      "disassemble": "\nelem.21.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n000036 func[0]:\n 000037: 0b                         | end\n"
    },
    "elem.34.wasm": {
      "header": "\nelem.34.wasm:\tfile format wasm 0x1\n\nSections:\n\n     Type start=0x0000000a end=0x0000000e (size=0x00000004) count: 1\n Function start=0x00000010 end=0x00000013 (size=0x00000003) count: 2\n    Table start=0x00000015 end=0x00000019 (size=0x00000004) count: 1\n   Export start=0x0000001b end=0x00000023 (size=0x00000008) count: 1\n     Elem start=0x00000025 end=0x0000002c (size=0x00000007) count: 1\n     Code start=0x0000002e end=0x0000003f (size=0x00000011) count: 2\n",
      "details": "\nelem.34.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nType[1]:\n - type[0] () -> nil\nFunction[2]:\n - func[0] sig=0\n - func[1] sig=0 <init>\nTable[1]:\n - table[0] type=funcref initial=10\nExport[1]:\n - func[1] <init> -> \"init\"\nElem[1]:\n - segment[0] flags=0 table=0 count=1 - init i32=0\n  - elem[0] = ref.func:0\nCode[2]:\n - func[0] size=2\n - func[1] size=12 <init>\n",
      "disassemble": "\nelem.34.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n000030 func[0]:\n 000031: 0b                         | end\n000033 func[1] <init>:\n 000034: 41 00                      | i32.const 0\n 000036: 41 00                      | i32.const 0\n 000038: 41 01                      | i32.const 1\n 00003a: fc 0c 00 00                | table.init 0 0\n 00003e: 0b                         | end\n"
    },
    "elem.35.wasm": {
      "header": "\nelem.35.wasm:\tfile format wasm 0x1\n\nSections:\n\n     Type start=0x0000000a end=0x0000000e (size=0x00000004) count: 1\n Function start=0x00000010 end=0x00000013 (size=0x00000003) count: 2\n    Table start=0x00000015 end=0x00000019 (size=0x00000004) count: 1\n   Export start=0x0000001b end=0x00000023 (size=0x00000008) count: 1\n     Elem start=0x00000025 end=0x0000002a (size=0x00000005) count: 1\n     Code start=0x0000002c end=0x0000003d (size=0x00000011) count: 2\n",
      "details": "\nelem.35.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nType[1]:\n - type[0] () -> nil\nFunction[2]:\n - func[0] sig=0\n - func[1] sig=0 <init>\nTable[1]:\n - table[0] type=funcref initial=10\nExport[1]:\n - func[1] <init> -> \"init\"\nElem[1]:\n - segment[0] flags=3 table=0 count=1\n  - elem[0] = ref.func:0\nCode[2]:\n - func[0] size=2\n - func[1] size=12 <init>\n",
      "disassemble": "\nelem.35.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n00002e func[0]:\n 00002f: 0b                         | end\n000031 func[1] <init>:\n 000032: 41 00                      | i32.const 0\n 000034: 41 00                      | i32.const 0\n 000036: 41 01                      | i32.const 1\n 000038: fc 0c 00 00                | table.init 0 0\n 00003c: 0b                         | end\n"
    },
    "elem.56.wasm": {
      "header": "\nelem.56.wasm:\tfile format wasm 0x1\n\nSections:\n\n     Type start=0x0000000a end=0x0000000f (size=0x00000005) count: 1\n Function start=0x00000011 end=0x00000015 (size=0x00000004) count: 3\n    Table start=0x00000017 end=0x0000001b (size=0x00000004) count: 1\n   Export start=0x0000001d end=0x00000031 (size=0x00000014) count: 1\n     Elem start=0x00000033 end=0x00000040 (size=0x0000000d) count: 2\n     Code start=0x00000042 end=0x00000057 (size=0x00000015) count: 3\n",
      "details": "\nelem.56.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nType[1]:\n - type[0] () -> i32\nFunction[3]:\n - func[0] sig=0\n - func[1] sig=0\n - func[2] sig=0 <call-overwritten>\nTable[1]:\n - table[0] type=funcref initial=10\nExport[1]:\n - func[2] <call-overwritten> -> \"call-overwritten\"\nElem[2]:\n - segment[0] flags=0 table=0 count=1 - init i32=9\n  - elem[9] = ref.func:0\n - segment[1] flags=0 table=0 count=1 - init i32=9\n  - elem[9] = ref.func:1\nCode[3]:\n - func[0] size=5\n - func[1] size=5\n - func[2] size=7 <call-overwritten>\n",
      "disassemble": "\nelem.56.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n000044 func[0]:\n 000045: 41 c1 00                   | i32.const 65\n 000048: 0b                         | end\n00004a func[1]:\n 00004b: 41 c2 00                   | i32.const 66\n 00004e: 0b                         | end\n000050 func[2] <call-overwritten>:\n 000051: 41 09                      | i32.const 9\n 000053: 11 00 00                   | call_indirect 0 (type 0)\n 000056: 0b                         | end\n"
    },
    "elem.57.wasm": {
      "header": "\nelem.57.wasm:\tfile format wasm 0x1\n\nSections:\n\n     Type start=0x0000000a end=0x0000000f (size=0x00000005) count: 1\n   Import start=0x00000011 end=0x00000025 (size=0x00000014) count: 1\n Function start=0x00000027 end=0x0000002b (size=0x00000004) count: 3\n   Export start=0x0000002d end=0x00000049 (size=0x0000001c) count: 1\n     Elem start=0x0000004b end=0x00000058 (size=0x0000000d) count: 2\n     Code start=0x0000005a end=0x0000006f (size=0x00000015) count: 3\n",
      "details": "\nelem.57.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nType[1]:\n - type[0] () -> i32\nImport[1]:\n - table[0] type=funcref initial=10 <- spectest.table\nFunction[3]:\n - func[0] sig=0\n - func[1] sig=0\n - func[2] sig=0 <call-overwritten-element>\nExport[1]:\n - func[2] <call-overwritten-element> -> \"call-overwritten-element\"\nElem[2]:\n - segment[0] flags=0 table=0 count=1 - init i32=9\n  - elem[9] = ref.func:0\n - segment[1] flags=0 table=0 count=1 - init i32=9\n  - elem[9] = ref.func:1\nCode[3]:\n - func[0] size=5\n - func[1] size=5\n - func[2] size=7 <call-overwritten-element>\n",
      "disassemble": "\nelem.57.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n00005c func[0]:\n 00005d: 41 c1 00                   | i32.const 65\n 000060: 0b                         | end\n000062 func[1]:\n 000063: 41 c2 00                   | i32.const 66\n 000066: 0b                         | end\n000068 func[2] <call-overwritten-element>:\n 000069: 41 09                      | i32.const 9\n 00006b: 11 00 00                   | call_indirect 0 <spectest.table> (type 0)\n 00006e: 0b                         | end\n"
    },
    "elem.58.wasm": {
      "header": "\nelem.58.wasm:\tfile format wasm 0x1\n\nSections:\n\n     Type start=0x0000000a end=0x0000000f (size=0x00000005) count: 1\n Function start=0x00000011 end=0x00000017 (size=0x00000006) count: 5\n    Table start=0x00000019 end=0x0000001d (size=0x00000004) count: 1\n   Export start=0x0000001f end=0x0000004a (size=0x0000002b) count: 4\n     Elem start=0x0000004c end=0x00000059 (size=0x0000000d) count: 2\n     Code start=0x0000005b end=0x00000080 (size=0x00000025) count: 5\n",
      "details": "\nelem.58.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nType[1]:\n - type[0] () -> i32\nFunction[5]:\n - func[0] sig=0\n - func[1] sig=0\n - func[2] sig=0 <call-7>\n - func[3] sig=0 <call-8>\n - func[4] sig=0 <call-9>\nTable[1]:\n - table[0] type=funcref initial=10\nExport[4]:\n - table[0] -> \"shared-table\"\n - func[2] <call-7> -> \"call-7\"\n - func[3] <call-8> -> \"call-8\"\n - func[4] <call-9> -> \"call-9\"\nElem[2]:\n - segment[0] flags=0 table=0 count=1 - init i32=8\n  - elem[8] = ref.func:0\n - segment[1] flags=0 table=0 count=1 - init i32=9\n  - elem[9] = ref.func:1\nCode[5]:\n - func[0] size=5\n - func[1] size=5\n - func[2] size=7 <call-7>\n - func[3] size=7 <call-8>\n - func[4] size=7 <call-9>\n",
      "disassemble": "\nelem.58.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n00005d func[0]:\n 00005e: 41 c1 00                   | i32.const 65\n 000061: 0b                         | end\n000063 func[1]:\n 000064: 41 c2 00                   | i32.const 66\n 000067: 0b                         | end\n000069 func[2] <call-7>:\n 00006a: 41 07                      | i32.const 7\n 00006c: 11 00 00                   | call_indirect 0 (type 0)\n 00006f: 0b                         | end\n000071 func[3] <call-8>:\n 000072: 41 08                      | i32.const 8\n 000074: 11 00 00                   | call_indirect 0 (type 0)\n 000077: 0b                         | end\n000079 func[4] <call-9>:\n 00007a: 41 09                      | i32.const 9\n 00007c: 11 00 00                   | call_indirect 0 (type 0)\n 00007f: 0b                         | end\n"
    },
    "elem.59.wasm": {
      "header": "\nelem.59.wasm:\tfile format wasm 0x1\n\nSections:\n\n     Type start=0x0000000a end=0x0000000f (size=0x00000005) count: 1\n   Import start=0x00000011 end=0x0000002b (size=0x0000001a) count: 1\n Function start=0x0000002d end=0x00000030 (size=0x00000003) count: 2\n     Elem start=0x00000032 end=0x0000003f (size=0x0000000d) count: 2\n     Code start=0x00000041 end=0x0000004e (size=0x0000000d) count: 2\n",
      "details": "\nelem.59.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nType[1]:\n - type[0] () -> i32\nImport[1]:\n - table[0] type=funcref initial=10 <- module1.shared-table\nFunction[2]:\n - func[0] sig=0\n - func[1] sig=0\nElem[2]:\n - segment[0] flags=0 table=0 count=1 - init i32=7\n  - elem[7] = ref.func:0\n - segment[1] flags=0 table=0 count=1 - init i32=8\n  - elem[8] = ref.func:1\nCode[2]:\n - func[0] size=5\n - func[1] size=5\n",
      "disassemble": "\nelem.59.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n000043 func[0]:\n 000044: 41 c3 00                   | i32.const 67\n 000047: 0b                         | end\n000049 func[1]:\n 00004a: 41 c4 00                   | i32.const 68\n 00004d: 0b                         | end\n"
    },
    "elem.60.wasm": {
      "header": "\nelem.60.wasm:\tfile format wasm 0x1\n\nSections:\n\n     Type start=0x0000000a end=0x0000000f (size=0x00000005) count: 1\n   Import start=0x00000011 end=0x0000002b (size=0x0000001a) count: 1\n Function start=0x0000002d end=0x00000030 (size=0x00000003) count: 2\n     Elem start=0x00000032 end=0x0000003f (size=0x0000000d) count: 2\n     Code start=0x00000041 end=0x0000004e (size=0x0000000d) count: 2\n",
      "details": "\nelem.60.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nType[1]:\n - type[0] () -> i32\nImport[1]:\n - table[0] type=funcref initial=10 <- module1.shared-table\nFunction[2]:\n - func[0] sig=0\n - func[1] sig=0\nElem[2]:\n - segment[0] flags=0 table=0 count=1 - init i32=8\n  - elem[8] = ref.func:0\n - segment[1] flags=0 table=0 count=1 - init i32=9\n  - elem[9] = ref.func:1\nCode[2]:\n - func[0] size=5\n - func[1] size=5\n",
      "disassemble": "\nelem.60.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n000043 func[0]:\n 000044: 41 c5 00                   | i32.const 69\n 000047: 0b                         | end\n000049 func[1]:\n 00004a: 41 c6 00                   | i32.const 70\n 00004d: 0b                         | end\n"
    },
    "elem.65.wasm": {
      "header": "\nelem.65.wasm:\tfile format wasm 0x1\n\nSections:\n\n     Type start=0x0000000a end=0x00000015 (size=0x0000000b) count: 2\n Function start=0x00000017 end=0x0000001a (size=0x00000003) count: 2\n    Table start=0x0000001c end=0x00000020 (size=0x00000004) count: 1\n   Export start=0x00000022 end=0x00000037 (size=0x00000015) count: 3\n     Code start=0x00000039 end=0x0000004a (size=0x00000011) count: 2\n",
      "details": "\nelem.65.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nType[2]:\n - type[0] (i32) -> externref\n - type[1] (i32, externref) -> nil\nFunction[2]:\n - func[0] sig=0 <get>\n - func[1] sig=1 <set>\nTable[1]:\n - table[0] type=externref initial=2\nExport[3]:\n - table[0] -> \"table\"\n - func[0] <get> -> \"get\"\n - func[1] <set> -> \"set\"\nCode[2]:\n - func[0] size=6 <get>\n - func[1] size=8 <set>\n",
      "disassemble": "\nelem.65.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n00003b func[0] <get>:\n 00003c: 20 00                      | local.get 0\n 00003e: 25 00                      | table.get 0\n 000040: 0b                         | end\n000042 func[1] <set>:\n 000043: 20 00                      | local.get 0\n 000045: 20 01                      | local.get 1\n 000047: 26 00                      | table.set 0\n 000049: 0b                         | end\n"
    },
    "elem.66.wasm": {
      "header": "\nelem.66.wasm:\tfile format wasm 0x1\n\nSections:\n\n   Import start=0x0000000a end=0x0000001e (size=0x00000014) count: 1\n     Elem start=0x00000020 end=0x0000002b (size=0x0000000b) count: 1\n",
      "details": "\nelem.66.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nImport[1]:\n - table[0] type=externref initial=2 <- exporter.table\nElem[1]:\n - segment[0] flags=6 table=0 count=1 - init i32=0\n  - elem[0] = ref.null externref\n",
      "disassemble": "\nelem.66.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n"
    },
    "elem.67.wasm": {
      "header": "\nelem.67.wasm:\tfile format wasm 0x1\n\nSections:\n\n     Type start=0x0000000a end=0x0000000f (size=0x00000005) count: 1\n Function start=0x00000011 end=0x00000013 (size=0x00000002) count: 1\n   Global start=0x00000015 end=0x0000001b (size=0x00000006) count: 1\n   Export start=0x0000001d end=0x00000022 (size=0x00000005) count: 1\n     Code start=0x00000024 end=0x0000002a (size=0x00000006) count: 1\n",
      "details": "\nelem.67.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nType[1]:\n - type[0] () -> i32\nFunction[1]:\n - func[0] sig=0\nGlobal[1]:\n - global[0] funcref mutable=0 <f> - init ref.func:0\nExport[1]:\n - global[0] -> \"f\"\nCode[1]:\n - func[0] size=4\n",
      "disassemble": "\nelem.67.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n000026 func[0]:\n 000027: 41 2a                      | i32.const 42\n 000029: 0b                         | end\n"
    },
    "elem.68.wasm": {
      "header": "\nelem.68.wasm:\tfile format wasm 0x1\n\nSections:\n\n     Type start=0x0000000a end=0x0000000f (size=0x00000005) count: 1\n   Import start=0x00000011 end=0x0000001f (size=0x0000000e) count: 1\n Function start=0x00000021 end=0x00000023 (size=0x00000002) count: 1\n    Table start=0x00000025 end=0x00000029 (size=0x00000004) count: 1\n   Export start=0x0000002b end=0x00000041 (size=0x00000016) count: 1\n     Elem start=0x00000043 end=0x0000004c (size=0x00000009) count: 1\n     Code start=0x0000004e end=0x00000057 (size=0x00000009) count: 1\n",
      "details": "\nelem.68.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nType[1]:\n - type[0] () -> i32\nImport[1]:\n - global[0] funcref mutable=0 <- module4.f\nFunction[1]:\n - func[0] sig=0 <call_imported_elem>\nTable[1]:\n - table[0] type=funcref initial=10\nExport[1]:\n - func[0] <call_imported_elem> -> \"call_imported_elem\"\nElem[1]:\n - segment[0] flags=4 table=0 count=1 - init i32=0\n  - elem[0] = global=0 <module4.f>\nCode[1]:\n - func[0] size=7 <call_imported_elem>\n",
      "disassemble": "\nelem.68.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n000050 func[0] <call_imported_elem>:\n 000051: 41 00                      | i32.const 0\n 000053: 11 00 00                   | call_indirect 0 (type 0)\n 000056: 0b                         | end\n"
    }
  }
}
