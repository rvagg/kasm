{
  "bin": {
    "table_grow.0.wasm": "AGFzbQEAAAABFQRgAX8Bb2ACf28AYAJ/bwF/YAABfwMGBQABAgIDBAQBbwAABykFA2dldAAAA3NldAABBGdyb3cAAgtncm93LWFiYnJldgADBHNpemUABAorBQYAIAAlAAsIACAAIAEmAAsJACABIAD8DwALCQAgASAA/A8ACwUA/BAACw==",
    "table_grow.1.wasm": "AGFzbQEAAAABBQFgAAF/AwIBAAQEAXAAEAcIAQRncm93AAAJBQEDAAEACgsBCQDSAEFw/A8ACw==",
    "table_grow.10.wasm": "AGFzbQEAAAABBAFgAAADAgEABAQBbwABCgsBCQDQb0EA/A8ACw==",
    "table_grow.11.wasm": "AGFzbQEAAAABBQFgAAF9AwIBAAQEAW8AAQoLAQkA0G9BAPwPAAs=",
    "table_grow.2.wasm": "AGFzbQEAAAABBgFgAX8BfwMCAQAEBAFvAAAHCAEEZ3JvdwAACgsBCQDQbyAA/A8ACw==",
    "table_grow.3.wasm": "AGFzbQEAAAABBgFgAX8BfwMCAQAEBQFvAQAKBwgBBGdyb3cAAAoLAQkA0G8gAPwPAAs=",
    "table_grow.4.wasm": "AGFzbQEAAAABDAJgAX8Bf2ACf38BcAMDAgABBAQBcAAKBxsCBGdyb3cAABBjaGVjay10YWJsZS1udWxsAAEJBQEDAAEBCj0CCQDQcCAA/A8ACzEBAXDSASECAkADQCAAJQAhAiAC0UUNASAAIAFPDQEgAEEBaiEAIAAgAU0NAAsLIAIL",
    "table_grow.5.wasm": "AGFzbQEAAAABBQFgAAF/AwIBAAQEAW8AAAoHAQUA/A8ACw==",
    "table_grow.6.wasm": "AGFzbQEAAAABBQFgAAF/AwIBAAQEAW8AAAoJAQcA0G/8DwAL",
    "table_grow.7.wasm": "AGFzbQEAAAABBQFgAAF/AwIBAAQEAW8AAAoJAQcAQQH8DwAL",
    "table_grow.8.wasm": "AGFzbQEAAAABBQFgAAF/AwIBAAQEAW8AAAoOAQwA0G9DAACAP/wPAAs=",
    "table_grow.9.wasm": "AGFzbQEAAAABBgFgAW8BfwMCAQAEBAFwAAAKCwEJACAAQQH8DwAL"
  },
  "spec": {"source_filename": "/workspace/wasm-spec/test/core/table_grow.wast",
 "commands": [
  {"type": "module", "line": 1, "filename": "table_grow.0.wasm"}, 
  {"type": "assert_return", "line": 16, "action": {"type": "invoke", "field": "size", "args": []}, "expected": [{"type": "i32", "value": "0"}]}, 
  {"type": "assert_trap", "line": 17, "action": {"type": "invoke", "field": "set", "args": [{"type": "i32", "value": "0"}, {"type": "externref", "value": "2"}]}, "text": "out of bounds table access", "expected": []}, 
  {"type": "assert_trap", "line": 18, "action": {"type": "invoke", "field": "get", "args": [{"type": "i32", "value": "0"}]}, "text": "out of bounds table access", "expected": [{"type": "externref"}]}, 
  {"type": "assert_return", "line": 20, "action": {"type": "invoke", "field": "grow", "args": [{"type": "i32", "value": "1"}, {"type": "externref", "value": "null"}]}, "expected": [{"type": "i32", "value": "0"}]}, 
  {"type": "assert_return", "line": 21, "action": {"type": "invoke", "field": "size", "args": []}, "expected": [{"type": "i32", "value": "1"}]}, 
  {"type": "assert_return", "line": 22, "action": {"type": "invoke", "field": "get", "args": [{"type": "i32", "value": "0"}]}, "expected": [{"type": "externref", "value": "null"}]}, 
  {"type": "assert_return", "line": 23, "action": {"type": "invoke", "field": "set", "args": [{"type": "i32", "value": "0"}, {"type": "externref", "value": "2"}]}, "expected": []}, 
  {"type": "assert_return", "line": 24, "action": {"type": "invoke", "field": "get", "args": [{"type": "i32", "value": "0"}]}, "expected": [{"type": "externref", "value": "2"}]}, 
  {"type": "assert_trap", "line": 25, "action": {"type": "invoke", "field": "set", "args": [{"type": "i32", "value": "1"}, {"type": "externref", "value": "2"}]}, "text": "out of bounds table access", "expected": []}, 
  {"type": "assert_trap", "line": 26, "action": {"type": "invoke", "field": "get", "args": [{"type": "i32", "value": "1"}]}, "text": "out of bounds table access", "expected": [{"type": "externref"}]}, 
  {"type": "assert_return", "line": 28, "action": {"type": "invoke", "field": "grow-abbrev", "args": [{"type": "i32", "value": "4"}, {"type": "externref", "value": "3"}]}, "expected": [{"type": "i32", "value": "1"}]}, 
  {"type": "assert_return", "line": 29, "action": {"type": "invoke", "field": "size", "args": []}, "expected": [{"type": "i32", "value": "5"}]}, 
  {"type": "assert_return", "line": 30, "action": {"type": "invoke", "field": "get", "args": [{"type": "i32", "value": "0"}]}, "expected": [{"type": "externref", "value": "2"}]}, 
  {"type": "assert_return", "line": 31, "action": {"type": "invoke", "field": "set", "args": [{"type": "i32", "value": "0"}, {"type": "externref", "value": "2"}]}, "expected": []}, 
  {"type": "assert_return", "line": 32, "action": {"type": "invoke", "field": "get", "args": [{"type": "i32", "value": "0"}]}, "expected": [{"type": "externref", "value": "2"}]}, 
  {"type": "assert_return", "line": 33, "action": {"type": "invoke", "field": "get", "args": [{"type": "i32", "value": "1"}]}, "expected": [{"type": "externref", "value": "3"}]}, 
  {"type": "assert_return", "line": 34, "action": {"type": "invoke", "field": "get", "args": [{"type": "i32", "value": "4"}]}, "expected": [{"type": "externref", "value": "3"}]}, 
  {"type": "assert_return", "line": 35, "action": {"type": "invoke", "field": "set", "args": [{"type": "i32", "value": "4"}, {"type": "externref", "value": "4"}]}, "expected": []}, 
  {"type": "assert_return", "line": 36, "action": {"type": "invoke", "field": "get", "args": [{"type": "i32", "value": "4"}]}, "expected": [{"type": "externref", "value": "4"}]}, 
  {"type": "assert_trap", "line": 37, "action": {"type": "invoke", "field": "set", "args": [{"type": "i32", "value": "5"}, {"type": "externref", "value": "2"}]}, "text": "out of bounds table access", "expected": []}, 
  {"type": "assert_trap", "line": 38, "action": {"type": "invoke", "field": "get", "args": [{"type": "i32", "value": "5"}]}, "text": "out of bounds table access", "expected": [{"type": "externref"}]}, 
  {"type": "module", "line": 42, "filename": "table_grow.1.wasm"}, 
  {"type": "assert_return", "line": 50, "action": {"type": "invoke", "field": "grow", "args": []}, "expected": [{"type": "i32", "value": "4294967295"}]}, 
  {"type": "module", "line": 53, "filename": "table_grow.2.wasm"}, 
  {"type": "assert_return", "line": 60, "action": {"type": "invoke", "field": "grow", "args": [{"type": "i32", "value": "0"}]}, "expected": [{"type": "i32", "value": "0"}]}, 
  {"type": "assert_return", "line": 61, "action": {"type": "invoke", "field": "grow", "args": [{"type": "i32", "value": "1"}]}, "expected": [{"type": "i32", "value": "0"}]}, 
  {"type": "assert_return", "line": 62, "action": {"type": "invoke", "field": "grow", "args": [{"type": "i32", "value": "0"}]}, "expected": [{"type": "i32", "value": "1"}]}, 
  {"type": "assert_return", "line": 63, "action": {"type": "invoke", "field": "grow", "args": [{"type": "i32", "value": "2"}]}, "expected": [{"type": "i32", "value": "1"}]}, 
  {"type": "assert_return", "line": 64, "action": {"type": "invoke", "field": "grow", "args": [{"type": "i32", "value": "800"}]}, "expected": [{"type": "i32", "value": "3"}]}, 
  {"type": "module", "line": 67, "filename": "table_grow.3.wasm"}, 
  {"type": "assert_return", "line": 74, "action": {"type": "invoke", "field": "grow", "args": [{"type": "i32", "value": "0"}]}, "expected": [{"type": "i32", "value": "0"}]}, 
  {"type": "assert_return", "line": 75, "action": {"type": "invoke", "field": "grow", "args": [{"type": "i32", "value": "1"}]}, "expected": [{"type": "i32", "value": "0"}]}, 
  {"type": "assert_return", "line": 76, "action": {"type": "invoke", "field": "grow", "args": [{"type": "i32", "value": "1"}]}, "expected": [{"type": "i32", "value": "1"}]}, 
  {"type": "assert_return", "line": 77, "action": {"type": "invoke", "field": "grow", "args": [{"type": "i32", "value": "2"}]}, "expected": [{"type": "i32", "value": "2"}]}, 
  {"type": "assert_return", "line": 78, "action": {"type": "invoke", "field": "grow", "args": [{"type": "i32", "value": "6"}]}, "expected": [{"type": "i32", "value": "4"}]}, 
  {"type": "assert_return", "line": 79, "action": {"type": "invoke", "field": "grow", "args": [{"type": "i32", "value": "0"}]}, "expected": [{"type": "i32", "value": "10"}]}, 
  {"type": "assert_return", "line": 80, "action": {"type": "invoke", "field": "grow", "args": [{"type": "i32", "value": "1"}]}, "expected": [{"type": "i32", "value": "4294967295"}]}, 
  {"type": "assert_return", "line": 81, "action": {"type": "invoke", "field": "grow", "args": [{"type": "i32", "value": "65536"}]}, "expected": [{"type": "i32", "value": "4294967295"}]}, 
  {"type": "module", "line": 84, "filename": "table_grow.4.wasm"}, 
  {"type": "assert_return", "line": 106, "action": {"type": "invoke", "field": "check-table-null", "args": [{"type": "i32", "value": "0"}, {"type": "i32", "value": "9"}]}, "expected": [{"type": "funcref", "value": "null"}]}, 
  {"type": "assert_return", "line": 107, "action": {"type": "invoke", "field": "grow", "args": [{"type": "i32", "value": "10"}]}, "expected": [{"type": "i32", "value": "10"}]}, 
  {"type": "assert_return", "line": 108, "action": {"type": "invoke", "field": "check-table-null", "args": [{"type": "i32", "value": "0"}, {"type": "i32", "value": "19"}]}, "expected": [{"type": "funcref", "value": "null"}]}, 
  {"type": "assert_invalid", "line": 114, "filename": "table_grow.5.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 123, "filename": "table_grow.6.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 132, "filename": "table_grow.7.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 141, "filename": "table_grow.8.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 150, "filename": "table_grow.9.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 160, "filename": "table_grow.10.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 169, "filename": "table_grow.11.wasm", "text": "type mismatch", "module_type": "binary"}]},
  "code": [
    "(module (table $t 0 externref)\n  (func (export \"get\") (param $i i32) (result externref) (table.get $t (local.get $i)))\n  (func (export \"set\") (param $i i32) (param $r externref) (table.set $t (local.get $i) (local.get $r)))\n  (func (export \"grow\") (param $sz i32) (param $init externref) (result i32) (table.grow $t (local.get $init) (local.get $sz)) )\n  (func (export \"grow-abbrev\") (param $sz i32) (param $init externref) (result i32) (table.grow (local.get $init) (local.get $sz)) )\n  (func (export \"size\") (result i32) (table.size $t)))",
    "(assert_return (invoke \"size\") (i32.const 0))",
    "(assert_trap (invoke \"set\" (i32.const 0) (ref.extern 2)) \"out of bounds table access\")",
    "(assert_trap (invoke \"get\" (i32.const 0)) \"out of bounds table access\")",
    "(assert_return (invoke \"grow\" (i32.const 1) (ref.null extern)) (i32.const 0))",
    "(assert_return (invoke \"size\") (i32.const 1))",
    "(assert_return (invoke \"get\" (i32.const 0)) (ref.null extern))",
    "(assert_return (invoke \"set\" (i32.const 0) (ref.extern 2)))",
    "(assert_return (invoke \"get\" (i32.const 0)) (ref.extern 2))",
    "(assert_trap (invoke \"set\" (i32.const 1) (ref.extern 2)) \"out of bounds table access\")",
    "(assert_trap (invoke \"get\" (i32.const 1)) \"out of bounds table access\")",
    "(assert_return (invoke \"grow-abbrev\" (i32.const 4) (ref.extern 3)) (i32.const 1))",
    "(assert_return (invoke \"size\") (i32.const 5))",
    "(assert_return (invoke \"get\" (i32.const 0)) (ref.extern 2))",
    "(assert_return (invoke \"set\" (i32.const 0) (ref.extern 2)))",
    "(assert_return (invoke \"get\" (i32.const 0)) (ref.extern 2))",
    "(assert_return (invoke \"get\" (i32.const 1)) (ref.extern 3))",
    "(assert_return (invoke \"get\" (i32.const 4)) (ref.extern 3))",
    "(assert_return (invoke \"set\" (i32.const 4) (ref.extern 4)))",
    "(assert_return (invoke \"get\" (i32.const 4)) (ref.extern 4))",
    "(assert_trap (invoke \"set\" (i32.const 5) (ref.extern 2)) \"out of bounds table access\")",
    "(assert_trap (invoke \"get\" (i32.const 5)) \"out of bounds table access\")",
    "(module (table $t 0x10 funcref) (elem declare $f)\n  (func $f (export \"grow\") (result i32) (table.grow $t (ref.func $f) (i32.const 0xffff_fff0)) ))",
    "(assert_return (invoke \"grow\") (i32.const -1))",
    "(module (table $t 0 externref)\n  (func (export \"grow\") (param i32) (result i32) (table.grow $t (ref.null extern) (local.get 0)) ))",
    "(assert_return (invoke \"grow\" (i32.const 0)) (i32.const 0))",
    "(assert_return (invoke \"grow\" (i32.const 1)) (i32.const 0))",
    "(assert_return (invoke \"grow\" (i32.const 0)) (i32.const 1))",
    "(assert_return (invoke \"grow\" (i32.const 2)) (i32.const 1))",
    "(assert_return (invoke \"grow\" (i32.const 800)) (i32.const 3))",
    "(module (table $t 0 10 externref)\n  (func (export \"grow\") (param i32) (result i32) (table.grow $t (ref.null extern) (local.get 0)) ))",
    "(assert_return (invoke \"grow\" (i32.const 0)) (i32.const 0))",
    "(assert_return (invoke \"grow\" (i32.const 1)) (i32.const 0))",
    "(assert_return (invoke \"grow\" (i32.const 1)) (i32.const 1))",
    "(assert_return (invoke \"grow\" (i32.const 2)) (i32.const 2))",
    "(assert_return (invoke \"grow\" (i32.const 6)) (i32.const 4))",
    "(assert_return (invoke \"grow\" (i32.const 0)) (i32.const 10))",
    "(assert_return (invoke \"grow\" (i32.const 1)) (i32.const -1))",
    "(assert_return (invoke \"grow\" (i32.const 0x10000)) (i32.const -1))",
    "(module (table $t 10 funcref)\n  (func (export \"grow\") (param i32) (result i32) (table.grow $t (ref.null func) (local.get 0)) ) (elem declare 1)\n  (func (export \"check-table-null\") (param i32 i32) (result funcref) (local funcref) (local.set 2 (ref.func 1)) (block (loop (local.set 2 (table.get $t (local.get 0))) (br_if 1 (i32.eqz (ref.is_null (local.get 2)))) (br_if 1 (i32.ge_u (local.get 0) (local.get 1))) (local.set 0 (i32.add (local.get 0) (i32.const 1))) (br_if 0 (i32.le_u (local.get 0) (local.get 1))) ) ) (local.get 2) ))",
    "(assert_return (invoke \"check-table-null\" (i32.const 0) (i32.const 9)) (ref.null func))",
    "(assert_return (invoke \"grow\" (i32.const 10)) (i32.const 10))",
    "(assert_return (invoke \"check-table-null\" (i32.const 0) (i32.const 19)) (ref.null func))",
    "(assert_invalid (module (table $t 0 externref) (func $type-init-size-empty-vs-i32-externref (result i32) (table.grow $t) ) ) \"type mismatch\")",
    "(assert_invalid (module (table $t 0 externref) (func $type-size-empty-vs-i32 (result i32) (table.grow $t (ref.null extern)) ) ) \"type mismatch\")",
    "(assert_invalid (module (table $t 0 externref) (func $type-init-empty-vs-externref (result i32) (table.grow $t (i32.const 1)) ) ) \"type mismatch\")",
    "(assert_invalid (module (table $t 0 externref) (func $type-size-f32-vs-i32 (result i32) (table.grow $t (ref.null extern) (f32.const 1)) ) ) \"type mismatch\")",
    "(assert_invalid (module (table $t 0 funcref) (func $type-init-externref-vs-funcref (param $r externref) (result i32) (table.grow $t (local.get $r) (i32.const 1)) ) ) \"type mismatch\")",
    "(assert_invalid (module (table $t 1 externref) (func $type-result-i32-vs-empty (table.grow $t (ref.null extern) (i32.const 0)) ) ) \"type mismatch\")",
    "(assert_invalid (module (table $t 1 externref) (func $type-result-i32-vs-f32 (result f32) (table.grow $t (ref.null extern) (i32.const 0)) ) ) \"type mismatch\")"
  ],
  "dump": {
    "table_grow.0.wasm": {
      "header": "\ntable_grow.0.wasm:\tfile format wasm 0x1\n\nSections:\n\n     Type start=0x0000000a end=0x0000001f (size=0x00000015) count: 4\n Function start=0x00000021 end=0x00000027 (size=0x00000006) count: 5\n    Table start=0x00000029 end=0x0000002d (size=0x00000004) count: 1\n   Export start=0x0000002f end=0x00000058 (size=0x00000029) count: 5\n     Code start=0x0000005a end=0x00000085 (size=0x0000002b) count: 5\n",
      "details": "\ntable_grow.0.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nType[4]:\n - type[0] (i32) -> externref\n - type[1] (i32, externref) -> nil\n - type[2] (i32, externref) -> i32\n - type[3] () -> i32\nFunction[5]:\n - func[0] sig=0 <get>\n - func[1] sig=1 <set>\n - func[2] sig=2 <grow>\n - func[3] sig=2 <grow-abbrev>\n - func[4] sig=3 <size>\nTable[1]:\n - table[0] type=externref initial=0\nExport[5]:\n - func[0] <get> -> \"get\"\n - func[1] <set> -> \"set\"\n - func[2] <grow> -> \"grow\"\n - func[3] <grow-abbrev> -> \"grow-abbrev\"\n - func[4] <size> -> \"size\"\nCode[5]:\n - func[0] size=6 <get>\n - func[1] size=8 <set>\n - func[2] size=9 <grow>\n - func[3] size=9 <grow-abbrev>\n - func[4] size=5 <size>\n",
      "disassemble": "\ntable_grow.0.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n00005c func[0] <get>:\n 00005d: 20 00                      | local.get 0\n 00005f: 25 00                      | table.get 0\n 000061: 0b                         | end\n000063 func[1] <set>:\n 000064: 20 00                      | local.get 0\n 000066: 20 01                      | local.get 1\n 000068: 26 00                      | table.set 0\n 00006a: 0b                         | end\n00006c func[2] <grow>:\n 00006d: 20 01                      | local.get 1\n 00006f: 20 00                      | local.get 0\n 000071: fc 0f 00                   | table.grow 0\n 000074: 0b                         | end\n000076 func[3] <grow-abbrev>:\n 000077: 20 01                      | local.get 1\n 000079: 20 00                      | local.get 0\n 00007b: fc 0f 00                   | table.grow 0\n 00007e: 0b                         | end\n000080 func[4] <size>:\n 000081: fc 10 00                   | table.size 0\n 000084: 0b                         | end\n"
    },
    "table_grow.1.wasm": {
      "header": "\ntable_grow.1.wasm:\tfile format wasm 0x1\n\nSections:\n\n     Type start=0x0000000a end=0x0000000f (size=0x00000005) count: 1\n Function start=0x00000011 end=0x00000013 (size=0x00000002) count: 1\n    Table start=0x00000015 end=0x00000019 (size=0x00000004) count: 1\n   Export start=0x0000001b end=0x00000023 (size=0x00000008) count: 1\n     Elem start=0x00000025 end=0x0000002a (size=0x00000005) count: 1\n     Code start=0x0000002c end=0x00000037 (size=0x0000000b) count: 1\n",
      "details": "\ntable_grow.1.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nType[1]:\n - type[0] () -> i32\nFunction[1]:\n - func[0] sig=0 <grow>\nTable[1]:\n - table[0] type=funcref initial=16\nExport[1]:\n - func[0] <grow> -> \"grow\"\nElem[1]:\n - segment[0] flags=3 table=0 count=1\n  - elem[0] = ref.func:0 <grow>\nCode[1]:\n - func[0] size=9 <grow>\n",
      "disassemble": "\ntable_grow.1.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n00002e func[0] <grow>:\n 00002f: d2 00                      | ref.func 0\n 000031: 41 70                      | i32.const 4294967280\n 000033: fc 0f 00                   | table.grow 0\n 000036: 0b                         | end\n"
    },
    "table_grow.2.wasm": {
      "header": "\ntable_grow.2.wasm:\tfile format wasm 0x1\n\nSections:\n\n     Type start=0x0000000a end=0x00000010 (size=0x00000006) count: 1\n Function start=0x00000012 end=0x00000014 (size=0x00000002) count: 1\n    Table start=0x00000016 end=0x0000001a (size=0x00000004) count: 1\n   Export start=0x0000001c end=0x00000024 (size=0x00000008) count: 1\n     Code start=0x00000026 end=0x00000031 (size=0x0000000b) count: 1\n",
      "details": "\ntable_grow.2.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nType[1]:\n - type[0] (i32) -> i32\nFunction[1]:\n - func[0] sig=0 <grow>\nTable[1]:\n - table[0] type=externref initial=0\nExport[1]:\n - func[0] <grow> -> \"grow\"\nCode[1]:\n - func[0] size=9 <grow>\n",
      "disassemble": "\ntable_grow.2.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n000028 func[0] <grow>:\n 000029: d0 6f                      | ref.null extern\n 00002b: 20 00                      | local.get 0\n 00002d: fc 0f 00                   | table.grow 0\n 000030: 0b                         | end\n"
    },
    "table_grow.3.wasm": {
      "header": "\ntable_grow.3.wasm:\tfile format wasm 0x1\n\nSections:\n\n     Type start=0x0000000a end=0x00000010 (size=0x00000006) count: 1\n Function start=0x00000012 end=0x00000014 (size=0x00000002) count: 1\n    Table start=0x00000016 end=0x0000001b (size=0x00000005) count: 1\n   Export start=0x0000001d end=0x00000025 (size=0x00000008) count: 1\n     Code start=0x00000027 end=0x00000032 (size=0x0000000b) count: 1\n",
      "details": "\ntable_grow.3.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nType[1]:\n - type[0] (i32) -> i32\nFunction[1]:\n - func[0] sig=0 <grow>\nTable[1]:\n - table[0] type=externref initial=0 max=10\nExport[1]:\n - func[0] <grow> -> \"grow\"\nCode[1]:\n - func[0] size=9 <grow>\n",
      "disassemble": "\ntable_grow.3.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n000029 func[0] <grow>:\n 00002a: d0 6f                      | ref.null extern\n 00002c: 20 00                      | local.get 0\n 00002e: fc 0f 00                   | table.grow 0\n 000031: 0b                         | end\n"
    },
    "table_grow.4.wasm": {
      "header": "\ntable_grow.4.wasm:\tfile format wasm 0x1\n\nSections:\n\n     Type start=0x0000000a end=0x00000016 (size=0x0000000c) count: 2\n Function start=0x00000018 end=0x0000001b (size=0x00000003) count: 2\n    Table start=0x0000001d end=0x00000021 (size=0x00000004) count: 1\n   Export start=0x00000023 end=0x0000003e (size=0x0000001b) count: 2\n     Elem start=0x00000040 end=0x00000045 (size=0x00000005) count: 1\n     Code start=0x00000047 end=0x00000084 (size=0x0000003d) count: 2\n",
      "details": "\ntable_grow.4.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nType[2]:\n - type[0] (i32) -> i32\n - type[1] (i32, i32) -> funcref\nFunction[2]:\n - func[0] sig=0 <grow>\n - func[1] sig=1 <check-table-null>\nTable[1]:\n - table[0] type=funcref initial=10\nExport[2]:\n - func[0] <grow> -> \"grow\"\n - func[1] <check-table-null> -> \"check-table-null\"\nElem[1]:\n - segment[0] flags=3 table=0 count=1\n  - elem[0] = ref.func:1 <check-table-null>\nCode[2]:\n - func[0] size=9 <grow>\n - func[1] size=49 <check-table-null>\n",
      "disassemble": "\ntable_grow.4.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n000049 func[0] <grow>:\n 00004a: d0 70                      | ref.null func\n 00004c: 20 00                      | local.get 0\n 00004e: fc 0f 00                   | table.grow 0\n 000051: 0b                         | end\n000053 func[1] <check-table-null>:\n 000054: 01 70                      | local[2] type=funcref\n 000056: d2 01                      | ref.func 1\n 000058: 21 02                      | local.set 2\n 00005a: 02 40                      | block\n 00005c: 03 40                      |   loop\n 00005e: 20 00                      |     local.get 0\n 000060: 25 00                      |     table.get 0\n 000062: 21 02                      |     local.set 2\n 000064: 20 02                      |     local.get 2\n 000066: d1                         |     ref.is_null\n 000067: 45                         |     i32.eqz\n 000068: 0d 01                      |     br_if 1\n 00006a: 20 00                      |     local.get 0\n 00006c: 20 01                      |     local.get 1\n 00006e: 4f                         |     i32.ge_u\n 00006f: 0d 01                      |     br_if 1\n 000071: 20 00                      |     local.get 0\n 000073: 41 01                      |     i32.const 1\n 000075: 6a                         |     i32.add\n 000076: 21 00                      |     local.set 0\n 000078: 20 00                      |     local.get 0\n 00007a: 20 01                      |     local.get 1\n 00007c: 4d                         |     i32.le_u\n 00007d: 0d 00                      |     br_if 0\n 00007f: 0b                         |   end\n 000080: 0b                         | end\n 000081: 20 02                      | local.get 2\n 000083: 0b                         | end\n"
    }
  }
}
