{
  "bin": {
    "local_tee.0.wasm": "AGFzbQEAAAABWBBgA39/fwF/YAABf2AAAX5gAAF9YAABfGABfwF/YAF+AX5gAX0BfWABfAF8YAV+fXx/fwBgBX59fH9/AX5gBX59fH9/AXxgAABgAX8AYAJ/fwF/YAF+AX8DOjkBAgMEBQYHCAkKCwwFBQUFBQUFDQUFDQUFBQUFBQ4OBQAFBQUFBQUFDAUMBQUNDQ0NBwUFBQUFDwUEBQFwAQEBBQMBAAEGBgF/AUEACwfPBzcOdHlwZS1sb2NhbC1pMzIAAA50eXBlLWxvY2FsLWk2NAABDnR5cGUtbG9jYWwtZjMyAAIOdHlwZS1sb2NhbC1mNjQAAw50eXBlLXBhcmFtLWkzMgAEDnR5cGUtcGFyYW0taTY0AAUOdHlwZS1wYXJhbS1mMzIABg50eXBlLXBhcmFtLWY2NAAHCnR5cGUtbWl4ZWQACAV3cml0ZQAJBnJlc3VsdAAKDmFzLWJsb2NrLWZpcnN0AAwMYXMtYmxvY2stbWlkAA0NYXMtYmxvY2stbGFzdAAODWFzLWxvb3AtZmlyc3QADwthcy1sb29wLW1pZAAQDGFzLWxvb3AtbGFzdAARC2FzLWJyLXZhbHVlABINYXMtYnJfaWYtY29uZAATDmFzLWJyX2lmLXZhbHVlABQTYXMtYnJfaWYtdmFsdWUtY29uZAAVEWFzLWJyX3RhYmxlLWluZGV4ABYRYXMtYnJfdGFibGUtdmFsdWUAFxdhcy1icl90YWJsZS12YWx1ZS1pbmRleAAYD2FzLXJldHVybi12YWx1ZQAZCmFzLWlmLWNvbmQAGgphcy1pZi10aGVuABsKYXMtaWYtZWxzZQAcD2FzLXNlbGVjdC1maXJzdAAdEGFzLXNlbGVjdC1zZWNvbmQAHg5hcy1zZWxlY3QtY29uZAAfDWFzLWNhbGwtZmlyc3QAIQthcy1jYWxsLW1pZAAiDGFzLWNhbGwtbGFzdAAjFmFzLWNhbGxfaW5kaXJlY3QtZmlyc3QAJBRhcy1jYWxsX2luZGlyZWN0LW1pZAAlFWFzLWNhbGxfaW5kaXJlY3QtbGFzdAAmFmFzLWNhbGxfaW5kaXJlY3QtaW5kZXgAJxJhcy1sb2NhbC5zZXQtdmFsdWUAKBJhcy1sb2NhbC50ZWUtdmFsdWUAKRNhcy1nbG9iYWwuc2V0LXZhbHVlACoPYXMtbG9hZC1hZGRyZXNzACsQYXMtbG9hZE4tYWRkcmVzcwAsEGFzLXN0b3JlLWFkZHJlc3MALQ5hcy1zdG9yZS12YWx1ZQAuEWFzLXN0b3JlTi1hZGRyZXNzAC8PYXMtc3RvcmVOLXZhbHVlADAQYXMtdW5hcnktb3BlcmFuZAAxDmFzLWJpbmFyeS1sZWZ0ADIPYXMtYmluYXJ5LXJpZ2h0ADMPYXMtdGVzdC1vcGVyYW5kADQPYXMtY29tcGFyZS1sZWZ0ADUQYXMtY29tcGFyZS1yaWdodAA2EmFzLWNvbnZlcnQtb3BlcmFuZAA3E2FzLW1lbW9yeS5ncm93LXNpemUAOAkHAQBBAAsBIAqDBzkIAQF/QQAiAAsIAQF+QgAiAAsLAQF9QwAAAAAiAAsPAQF8RAAAAAAAAAAAIgALBgBBCiIACwYAQgsiAAsJAEOamTFBIgALDQBEZmZmZmZmKEAiAAtSAwF9An4BfEIAIgBQGkMAAAAAIgGMGkQAAAAAAAAAACICmhpBACIDRRpBACIERRpDAAAAACIFjBpCACIGUBpCACIHUBpEAAAAAAAAAAAiCJoaC1UDAX0CfgF8Q5qZmb4iARpBKCIDGkF5IgQaQwAAsEAiBRpCBiIGGkQAAAAAAAAgQCIIGiAAuiABuyACIAO4IAS3IAW7IAa6IAe6IAigoKCgoKCgoLALTwMBfQJ+AXxCASIAukMAAABAIgG7RGZmZmZmZgpAIgJBBCIDuEEFIgS3QwAAsEAiBbtCBiIGukIAIge6RAAAAAAAACBAIgigoKCgoKCgoAsCAAsLAAJ/QQEiABALCwsNAAJ/EAtBASIAEAsLCw0AAn8QCxALQQEiAAsLCwADf0EDIgAQCwsLDQADfxALQQQiABALCwsNAAN/EAsQC0EFIgALCwsAAn9BCSIADAALCwsAAkBBASIADQALCxAAAn9BCCIAQQENABpBBwsLEAACf0EGQQkiAA0AGkEHCwsOAAJAQQAiAA4CAAAACwsSAAJ/QQoiAEEBDgIAAABBBwsLEQACf0EGQQsiAA4BAABBBwsLBwBBByIADwsOAEECIgAEf0EABUEBCwsOACAABH9BAyIABSAACwsOACAABH8gAAVBBCIACwsLAEEFIgAgACABGwsLACAAQQYiACABGwsLAEEAQQFBByIAGwsEAEF/CwwAQQwiAEECQQMQIAsMAEEBQQ0iAEEDECALDABBAUECQQ4iABAgCw8AQQEiAEECQQNBABEAAAsPAEEBQQIiAEEDQQARAAALDwBBAUECQQMiAEEAEQAACw8AQQFBAkEDQQAiABEAAAsKAQF/QQEiACEACwgAQQEiACIACwoBAX9BASIAJAALCQBBASIAKAIACwkAQQMiACwAAAsLAEEeIgBBBzYCAAsLAEECQQEiADYCAAsLAEEBIgBBBzoAAAsLAEECQQEiADsBAAsKAEPi8YB/IgCMCwkAQQMiAEEKagsJAEEKQQQiAGsLBwBBACIARQsJAEErIgBBCkwLCQBBCkEqIgBHCwcAQikiAKcLCABBKCIAQAAL",
    "local_tee.1.wasm": "AGFzbQEAAAABBQFgAAF+AwIBAAoKAQgBAX9BACIACw==",
    "local_tee.10.wasm": "AGFzbQEAAAABBgFgAnx+AAMCAQAKBwEFACABmgs=",
    "local_tee.11.wasm": "AGFzbQEAAAABBQFgAX8AAwIBAAoHAQUAASIACw==",
    "local_tee.12.wasm": "AGFzbQEAAAABBQFgAX8AAwIBAAoLAQkAQwAAAAAiAAs=",
    "local_tee.13.wasm": "AGFzbQEAAAABBQFgAX0AAwIBAAoPAQ0ARAAAAAAAAAAAIgAL",
    "local_tee.14.wasm": "AGFzbQEAAAABBgFgAnx+AAMCAQAKDwENAEQAAAAAAAAAACIBCw==",
    "local_tee.15.wasm": "AGFzbQEAAAABBQFgAX8AAwIBAAoHAQUAIgAaCw==",
    "local_tee.16.wasm": "AGFzbQEAAAABBQFgAX8AAwIBAAoMAQoAQQACQCIAGgsL",
    "local_tee.17.wasm": "AGFzbQEAAAABBQFgAX8AAwIBAAoMAQoAQQADQCIAGgsL",
    "local_tee.18.wasm": "AGFzbQEAAAABBQFgAX8AAwIBAAoOAQwAQQBBAARAIgAaCws=",
    "local_tee.19.wasm": "AGFzbQEAAAABBQFgAX8AAwIBAAoRAQ8AQQBBAAR/QQAFIgALGgs=",
    "local_tee.2.wasm": "AGFzbQEAAAABBAFgAAADAgEACg4BDAEBfUMAAAAAIgBFCw==",
    "local_tee.20.wasm": "AGFzbQEAAAABBQFgAX8AAwIBAAoOAQwAQQACQCIADAAaCws=",
    "local_tee.21.wasm": "AGFzbQEAAAABBQFgAX8AAwIBAAoQAQ4AQQACQCIAQQENABoLCw==",
    "local_tee.22.wasm": "AGFzbQEAAAABBQFgAX8AAwIBAAoPAQ0AQQACQCIADgAAGgsL",
    "local_tee.23.wasm": "AGFzbQEAAAABBQFgAX8AAwIBAAoIAQYAIgAPGgs=",
    "local_tee.24.wasm": "AGFzbQEAAAABBQFgAX8AAwIBAAoMAQoAIgBBAUECGxoL",
    "local_tee.25.wasm": "AGFzbQEAAAABCgJgAX8AYAF/AX8DAwIAAQoOAgcAIgAQARoLBAAgAAs=",
    "local_tee.26.wasm": "AGFzbQEAAAABCgJgAX8Bf2ABfwADAwIAAQQFAXABAQEJBwEAQQALAQAKFAIEACAACw0AAn8iAEEAEQAAGgsL",
    "local_tee.27.wasm": "AGFzbQEAAAABBQFgAX8AAwIBAAoLAQkAIgAhACAAGgs=",
    "local_tee.28.wasm": "AGFzbQEAAAABBQFgAX8AAwIBAAoJAQcAIgAiABoL",
    "local_tee.29.wasm": "AGFzbQEAAAABBQFgAX8AAwIBAAYGAX8BQQALCgsBCQAiACQAIwAaCw==",
    "local_tee.3.wasm": "AGFzbQEAAAABBAFgAAADAgEACg0BCwIBfAF+QgAiAZoL",
    "local_tee.30.wasm": "AGFzbQEAAAABBQFgAX8AAwIBAAUDAQAACgkBBwAiAEAAGgs=",
    "local_tee.31.wasm": "AGFzbQEAAAABBQFgAX8AAwIBAAUDAQAACgoBCAAiACgCABoL",
    "local_tee.32.wasm": "AGFzbQEAAAABBQFgAX8AAwIBAAUDAQABCgsBCQAiAEEBNgIACw==",
    "local_tee.33.wasm": "AGFzbQEAAAABBQFgAX0AAwIBAAoNAQsBAX9DAAAAACIBCw==",
    "local_tee.34.wasm": "AGFzbQEAAAABBgFgAn5/AAMCAQAKDQELAQF9QwAAAAAiAQs=",
    "local_tee.35.wasm": "AGFzbQEAAAABBQFgAX4AAwIBAAoMAQoCAXwBfkIAIgEL",
    "local_tee.36.wasm": "AGFzbQEAAAABBAFgAAADAgEACg0BCwIBfwF+QQAiAxoL",
    "local_tee.37.wasm": "AGFzbQEAAAABBAFgAAADAgEAChABDgIBfwF+QQAi96TqBhoL",
    "local_tee.38.wasm": "AGFzbQEAAAABBgFgAn9+AAMCAQAKCQEHAEEAIgIaCw==",
    "local_tee.39.wasm": "AGFzbQEAAAABBgFgAn9+AAMCAQAKDQELAEEAIvfyztQCGgs=",
    "local_tee.4.wasm": "AGFzbQEAAAABBAFgAAADAgEACgkBBwEBfwEiAAs=",
    "local_tee.40.wasm": "AGFzbQEAAAABBQFgAX8AAwIBAAoNAQsCAX8BfkEAIgMaCw==",
    "local_tee.41.wasm": "AGFzbQEAAAABBQFgAX4AAwIBAAoQAQ4CAX8BfkEAIveomWYaCw==",
    "local_tee.5.wasm": "AGFzbQEAAAABBAFgAAADAgEACg0BCwEBf0MAAAAAIgAL",
    "local_tee.6.wasm": "AGFzbQEAAAABBAFgAAADAgEAChEBDwEBfUQAAAAAAAAAACIACw==",
    "local_tee.7.wasm": "AGFzbQEAAAABBAFgAAADAgEAChMBEQIBfAF+RAAAAAAAAAAAIgEL",
    "local_tee.8.wasm": "AGFzbQEAAAABBgFgAX8BfgMCAQAKBgEEACAACw==",
    "local_tee.9.wasm": "AGFzbQEAAAABBQFgAX0AAwIBAAoHAQUAIABFCw=="
  },
  "spec": {"source_filename": "/home/rvagg/git/webassembly/spec/test/core/local_tee.wast",
 "commands": [
  {"type": "module", "line": 3, "filename": "local_tee.0.wasm"}, 
  {"type": "assert_return", "line": 280, "action": {"type": "invoke", "field": "type-local-i32", "args": []}, "expected": [{"type": "i32", "value": "0"}]}, 
  {"type": "assert_return", "line": 281, "action": {"type": "invoke", "field": "type-local-i64", "args": []}, "expected": [{"type": "i64", "value": "0"}]}, 
  {"type": "assert_return", "line": 282, "action": {"type": "invoke", "field": "type-local-f32", "args": []}, "expected": [{"type": "f32", "value": "0"}]}, 
  {"type": "assert_return", "line": 283, "action": {"type": "invoke", "field": "type-local-f64", "args": []}, "expected": [{"type": "f64", "value": "0"}]}, 
  {"type": "assert_return", "line": 285, "action": {"type": "invoke", "field": "type-param-i32", "args": [{"type": "i32", "value": "2"}]}, "expected": [{"type": "i32", "value": "10"}]}, 
  {"type": "assert_return", "line": 286, "action": {"type": "invoke", "field": "type-param-i64", "args": [{"type": "i64", "value": "3"}]}, "expected": [{"type": "i64", "value": "11"}]}, 
  {"type": "assert_return", "line": 287, "action": {"type": "invoke", "field": "type-param-f32", "args": [{"type": "f32", "value": "1082969293"}]}, "expected": [{"type": "f32", "value": "1093769626"}]}, 
  {"type": "assert_return", "line": 288, "action": {"type": "invoke", "field": "type-param-f64", "args": [{"type": "f64", "value": "4617878467915022336"}]}, "expected": [{"type": "f64", "value": "4623057607486498406"}]}, 
  {"type": "assert_return", "line": 290, "action": {"type": "invoke", "field": "as-block-first", "args": [{"type": "i32", "value": "0"}]}, "expected": [{"type": "i32", "value": "1"}]}, 
  {"type": "assert_return", "line": 291, "action": {"type": "invoke", "field": "as-block-mid", "args": [{"type": "i32", "value": "0"}]}, "expected": [{"type": "i32", "value": "1"}]}, 
  {"type": "assert_return", "line": 292, "action": {"type": "invoke", "field": "as-block-last", "args": [{"type": "i32", "value": "0"}]}, "expected": [{"type": "i32", "value": "1"}]}, 
  {"type": "assert_return", "line": 294, "action": {"type": "invoke", "field": "as-loop-first", "args": [{"type": "i32", "value": "0"}]}, "expected": [{"type": "i32", "value": "3"}]}, 
  {"type": "assert_return", "line": 295, "action": {"type": "invoke", "field": "as-loop-mid", "args": [{"type": "i32", "value": "0"}]}, "expected": [{"type": "i32", "value": "4"}]}, 
  {"type": "assert_return", "line": 296, "action": {"type": "invoke", "field": "as-loop-last", "args": [{"type": "i32", "value": "0"}]}, "expected": [{"type": "i32", "value": "5"}]}, 
  {"type": "assert_return", "line": 298, "action": {"type": "invoke", "field": "as-br-value", "args": [{"type": "i32", "value": "0"}]}, "expected": [{"type": "i32", "value": "9"}]}, 
  {"type": "assert_return", "line": 300, "action": {"type": "invoke", "field": "as-br_if-cond", "args": [{"type": "i32", "value": "0"}]}, "expected": []}, 
  {"type": "assert_return", "line": 301, "action": {"type": "invoke", "field": "as-br_if-value", "args": [{"type": "i32", "value": "0"}]}, "expected": [{"type": "i32", "value": "8"}]}, 
  {"type": "assert_return", "line": 302, "action": {"type": "invoke", "field": "as-br_if-value-cond", "args": [{"type": "i32", "value": "0"}]}, "expected": [{"type": "i32", "value": "6"}]}, 
  {"type": "assert_return", "line": 304, "action": {"type": "invoke", "field": "as-br_table-index", "args": [{"type": "i32", "value": "0"}]}, "expected": []}, 
  {"type": "assert_return", "line": 305, "action": {"type": "invoke", "field": "as-br_table-value", "args": [{"type": "i32", "value": "0"}]}, "expected": [{"type": "i32", "value": "10"}]}, 
  {"type": "assert_return", "line": 306, "action": {"type": "invoke", "field": "as-br_table-value-index", "args": [{"type": "i32", "value": "0"}]}, "expected": [{"type": "i32", "value": "6"}]}, 
  {"type": "assert_return", "line": 308, "action": {"type": "invoke", "field": "as-return-value", "args": [{"type": "i32", "value": "0"}]}, "expected": [{"type": "i32", "value": "7"}]}, 
  {"type": "assert_return", "line": 310, "action": {"type": "invoke", "field": "as-if-cond", "args": [{"type": "i32", "value": "0"}]}, "expected": [{"type": "i32", "value": "0"}]}, 
  {"type": "assert_return", "line": 311, "action": {"type": "invoke", "field": "as-if-then", "args": [{"type": "i32", "value": "1"}]}, "expected": [{"type": "i32", "value": "3"}]}, 
  {"type": "assert_return", "line": 312, "action": {"type": "invoke", "field": "as-if-else", "args": [{"type": "i32", "value": "0"}]}, "expected": [{"type": "i32", "value": "4"}]}, 
  {"type": "assert_return", "line": 314, "action": {"type": "invoke", "field": "as-select-first", "args": [{"type": "i32", "value": "0"}, {"type": "i32", "value": "1"}]}, "expected": [{"type": "i32", "value": "5"}]}, 
  {"type": "assert_return", "line": 315, "action": {"type": "invoke", "field": "as-select-second", "args": [{"type": "i32", "value": "0"}, {"type": "i32", "value": "0"}]}, "expected": [{"type": "i32", "value": "6"}]}, 
  {"type": "assert_return", "line": 316, "action": {"type": "invoke", "field": "as-select-cond", "args": [{"type": "i32", "value": "0"}]}, "expected": [{"type": "i32", "value": "0"}]}, 
  {"type": "assert_return", "line": 318, "action": {"type": "invoke", "field": "as-call-first", "args": [{"type": "i32", "value": "0"}]}, "expected": [{"type": "i32", "value": "4294967295"}]}, 
  {"type": "assert_return", "line": 319, "action": {"type": "invoke", "field": "as-call-mid", "args": [{"type": "i32", "value": "0"}]}, "expected": [{"type": "i32", "value": "4294967295"}]}, 
  {"type": "assert_return", "line": 320, "action": {"type": "invoke", "field": "as-call-last", "args": [{"type": "i32", "value": "0"}]}, "expected": [{"type": "i32", "value": "4294967295"}]}, 
  {"type": "assert_return", "line": 322, "action": {"type": "invoke", "field": "as-call_indirect-first", "args": [{"type": "i32", "value": "0"}]}, "expected": [{"type": "i32", "value": "4294967295"}]}, 
  {"type": "assert_return", "line": 323, "action": {"type": "invoke", "field": "as-call_indirect-mid", "args": [{"type": "i32", "value": "0"}]}, "expected": [{"type": "i32", "value": "4294967295"}]}, 
  {"type": "assert_return", "line": 324, "action": {"type": "invoke", "field": "as-call_indirect-last", "args": [{"type": "i32", "value": "0"}]}, "expected": [{"type": "i32", "value": "4294967295"}]}, 
  {"type": "assert_return", "line": 325, "action": {"type": "invoke", "field": "as-call_indirect-index", "args": [{"type": "i32", "value": "0"}]}, "expected": [{"type": "i32", "value": "4294967295"}]}, 
  {"type": "assert_return", "line": 327, "action": {"type": "invoke", "field": "as-local.set-value", "args": []}, "expected": []}, 
  {"type": "assert_return", "line": 328, "action": {"type": "invoke", "field": "as-local.tee-value", "args": [{"type": "i32", "value": "0"}]}, "expected": [{"type": "i32", "value": "1"}]}, 
  {"type": "assert_return", "line": 329, "action": {"type": "invoke", "field": "as-global.set-value", "args": []}, "expected": []}, 
  {"type": "assert_return", "line": 331, "action": {"type": "invoke", "field": "as-load-address", "args": [{"type": "i32", "value": "0"}]}, "expected": [{"type": "i32", "value": "0"}]}, 
  {"type": "assert_return", "line": 332, "action": {"type": "invoke", "field": "as-loadN-address", "args": [{"type": "i32", "value": "0"}]}, "expected": [{"type": "i32", "value": "0"}]}, 
  {"type": "assert_return", "line": 333, "action": {"type": "invoke", "field": "as-store-address", "args": [{"type": "i32", "value": "0"}]}, "expected": []}, 
  {"type": "assert_return", "line": 334, "action": {"type": "invoke", "field": "as-store-value", "args": [{"type": "i32", "value": "0"}]}, "expected": []}, 
  {"type": "assert_return", "line": 335, "action": {"type": "invoke", "field": "as-storeN-address", "args": [{"type": "i32", "value": "0"}]}, "expected": []}, 
  {"type": "assert_return", "line": 336, "action": {"type": "invoke", "field": "as-storeN-value", "args": [{"type": "i32", "value": "0"}]}, "expected": []}, 
  {"type": "assert_return", "line": 338, "action": {"type": "invoke", "field": "as-unary-operand", "args": [{"type": "f32", "value": "0"}]}, "expected": [{"type": "f32", "value": "4286640610"}]}, 
  {"type": "assert_return", "line": 339, "action": {"type": "invoke", "field": "as-binary-left", "args": [{"type": "i32", "value": "0"}]}, "expected": [{"type": "i32", "value": "13"}]}, 
  {"type": "assert_return", "line": 340, "action": {"type": "invoke", "field": "as-binary-right", "args": [{"type": "i32", "value": "0"}]}, "expected": [{"type": "i32", "value": "6"}]}, 
  {"type": "assert_return", "line": 341, "action": {"type": "invoke", "field": "as-test-operand", "args": [{"type": "i32", "value": "0"}]}, "expected": [{"type": "i32", "value": "1"}]}, 
  {"type": "assert_return", "line": 342, "action": {"type": "invoke", "field": "as-compare-left", "args": [{"type": "i32", "value": "0"}]}, "expected": [{"type": "i32", "value": "0"}]}, 
  {"type": "assert_return", "line": 343, "action": {"type": "invoke", "field": "as-compare-right", "args": [{"type": "i32", "value": "0"}]}, "expected": [{"type": "i32", "value": "1"}]}, 
  {"type": "assert_return", "line": 344, "action": {"type": "invoke", "field": "as-convert-operand", "args": [{"type": "i64", "value": "0"}]}, "expected": [{"type": "i32", "value": "41"}]}, 
  {"type": "assert_return", "line": 345, "action": {"type": "invoke", "field": "as-memory.grow-size", "args": [{"type": "i32", "value": "0"}]}, "expected": [{"type": "i32", "value": "1"}]}, 
  {"type": "assert_return", "line": 348, "action": {"type": "invoke", "field": "type-mixed", "args": [{"type": "i64", "value": "1"}, {"type": "f32", "value": "1074580685"}, {"type": "f64", "value": "4614613358185178726"}, {"type": "i32", "value": "4"}, {"type": "i32", "value": "5"}]}, "expected": []}, 
  {"type": "assert_return", "line": 354, "action": {"type": "invoke", "field": "write", "args": [{"type": "i64", "value": "1"}, {"type": "f32", "value": "1073741824"}, {"type": "f64", "value": "4614613358185178726"}, {"type": "i32", "value": "4"}, {"type": "i32", "value": "5"}]}, "expected": [{"type": "i64", "value": "56"}]}, 
  {"type": "assert_return", "line": 361, "action": {"type": "invoke", "field": "result", "args": [{"type": "i64", "value": "18446744073709551615"}, {"type": "f32", "value": "3221225472"}, {"type": "f64", "value": "13837985395039954534"}, {"type": "i32", "value": "4294967292"}, {"type": "i32", "value": "4294967291"}]}, "expected": [{"type": "f64", "value": "4630094481904264806"}]}, 
  {"type": "assert_invalid", "line": 371, "filename": "local_tee.1.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 375, "filename": "local_tee.2.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 379, "filename": "local_tee.3.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 384, "filename": "local_tee.4.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 388, "filename": "local_tee.5.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 392, "filename": "local_tee.6.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 396, "filename": "local_tee.7.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 404, "filename": "local_tee.8.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 408, "filename": "local_tee.9.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 412, "filename": "local_tee.10.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 417, "filename": "local_tee.11.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 421, "filename": "local_tee.12.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 425, "filename": "local_tee.13.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 429, "filename": "local_tee.14.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 434, "filename": "local_tee.15.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 442, "filename": "local_tee.16.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 451, "filename": "local_tee.17.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 460, "filename": "local_tee.18.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 469, "filename": "local_tee.19.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 478, "filename": "local_tee.20.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 487, "filename": "local_tee.21.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 496, "filename": "local_tee.22.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 505, "filename": "local_tee.23.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 513, "filename": "local_tee.24.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 521, "filename": "local_tee.25.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 530, "filename": "local_tee.26.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 546, "filename": "local_tee.27.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 554, "filename": "local_tee.28.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 562, "filename": "local_tee.29.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 571, "filename": "local_tee.30.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 580, "filename": "local_tee.31.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 589, "filename": "local_tee.32.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 599, "filename": "local_tee.33.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 603, "filename": "local_tee.34.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 607, "filename": "local_tee.35.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 615, "filename": "local_tee.36.wasm", "text": "unknown local", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 619, "filename": "local_tee.37.wasm", "text": "unknown local", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 624, "filename": "local_tee.38.wasm", "text": "unknown local", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 628, "filename": "local_tee.39.wasm", "text": "unknown local", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 633, "filename": "local_tee.40.wasm", "text": "unknown local", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 637, "filename": "local_tee.41.wasm", "text": "unknown local", "module_type": "binary"}]},
  "code": [
    "(module \n  (func (export \"type-local-i32\") (result i32) (local i32) (local.tee 0 (i32.const 0)))\n  (func (export \"type-local-i64\") (result i64) (local i64) (local.tee 0 (i64.const 0)))\n  (func (export \"type-local-f32\") (result f32) (local f32) (local.tee 0 (f32.const 0)))\n  (func (export \"type-local-f64\") (result f64) (local f64) (local.tee 0 (f64.const 0)))\n  (func (export \"type-param-i32\") (param i32) (result i32) (local.tee 0 (i32.const 10)))\n  (func (export \"type-param-i64\") (param i64) (result i64) (local.tee 0 (i64.const 11)))\n  (func (export \"type-param-f32\") (param f32) (result f32) (local.tee 0 (f32.const 11.1)))\n  (func (export \"type-param-f64\") (param f64) (result f64) (local.tee 0 (f64.const 12.2)))\n  (func (export \"type-mixed\") (param i64 f32 f64 i32 i32) (local f32 i64 i64 f64) (drop (i64.eqz (local.tee 0 (i64.const 0)))) (drop (f32.neg (local.tee 1 (f32.const 0)))) (drop (f64.neg (local.tee 2 (f64.const 0)))) (drop (i32.eqz (local.tee 3 (i32.const 0)))) (drop (i32.eqz (local.tee 4 (i32.const 0)))) (drop (f32.neg (local.tee 5 (f32.const 0)))) (drop (i64.eqz (local.tee 6 (i64.const 0)))) (drop (i64.eqz (local.tee 7 (i64.const 0)))) (drop (f64.neg (local.tee 8 (f64.const 0)))) )\n  (func (export \"write\") (param i64 f32 f64 i32 i32) (result i64) (local f32 i64 i64 f64) (drop (local.tee 1 (f32.const -0.3))) (drop (local.tee 3 (i32.const 40))) (drop (local.tee 4 (i32.const -7))) (drop (local.tee 5 (f32.const 5.5))) (drop (local.tee 6 (i64.const 6))) (drop (local.tee 8 (f64.const 8))) (i64.trunc_f64_s (f64.add (f64.convert_i64_u (local.get 0)) (f64.add (f64.promote_f32 (local.get 1)) (f64.add (local.get 2) (f64.add (f64.convert_i32_u (local.get 3)) (f64.add (f64.convert_i32_s (local.get 4)) (f64.add (f64.promote_f32 (local.get 5)) (f64.add (f64.convert_i64_u (local.get 6)) (f64.add (f64.convert_i64_u (local.get 7)) (local.get 8) ) ) ) ) ) ) ) ) ) )\n  (func (export \"result\") (param i64 f32 f64 i32 i32) (result f64) (local f32 i64 i64 f64) (f64.add (f64.convert_i64_u (local.tee 0 (i64.const 1))) (f64.add (f64.promote_f32 (local.tee 1 (f32.const 2))) (f64.add (local.tee 2 (f64.const 3.3)) (f64.add (f64.convert_i32_u (local.tee 3 (i32.const 4))) (f64.add (f64.convert_i32_s (local.tee 4 (i32.const 5))) (f64.add (f64.promote_f32 (local.tee 5 (f32.const 5.5))) (f64.add (f64.convert_i64_u (local.tee 6 (i64.const 6))) (f64.add (f64.convert_i64_u (local.tee 7 (i64.const 0))) (local.tee 8 (f64.const 8)) ) ) ) ) ) ) ) ) )\n  (func $dummy)\n  (func (export \"as-block-first\") (param i32) (result i32) (block (result i32) (local.tee 0 (i32.const 1)) (call $dummy)) )\n  (func (export \"as-block-mid\") (param i32) (result i32) (block (result i32) (call $dummy) (local.tee 0 (i32.const 1)) (call $dummy)) )\n  (func (export \"as-block-last\") (param i32) (result i32) (block (result i32) (call $dummy) (call $dummy) (local.tee 0 (i32.const 1))) )\n  (func (export \"as-loop-first\") (param i32) (result i32) (loop (result i32) (local.tee 0 (i32.const 3)) (call $dummy)) )\n  (func (export \"as-loop-mid\") (param i32) (result i32) (loop (result i32) (call $dummy) (local.tee 0 (i32.const 4)) (call $dummy)) )\n  (func (export \"as-loop-last\") (param i32) (result i32) (loop (result i32) (call $dummy) (call $dummy) (local.tee 0 (i32.const 5))) )\n  (func (export \"as-br-value\") (param i32) (result i32) (block (result i32) (br 0 (local.tee 0 (i32.const 9)))) )\n  (func (export \"as-br_if-cond\") (param i32) (block (br_if 0 (local.tee 0 (i32.const 1)))) )\n  (func (export \"as-br_if-value\") (param i32) (result i32) (block (result i32) (drop (br_if 0 (local.tee 0 (i32.const 8)) (i32.const 1))) (i32.const 7) ) )\n  (func (export \"as-br_if-value-cond\") (param i32) (result i32) (block (result i32) (drop (br_if 0 (i32.const 6) (local.tee 0 (i32.const 9)))) (i32.const 7) ) )\n  (func (export \"as-br_table-index\") (param i32) (block (br_table 0 0 0 (local.tee 0 (i32.const 0)))) )\n  (func (export \"as-br_table-value\") (param i32) (result i32) (block (result i32) (br_table 0 0 0 (local.tee 0 (i32.const 10)) (i32.const 1)) (i32.const 7) ) )\n  (func (export \"as-br_table-value-index\") (param i32) (result i32) (block (result i32) (br_table 0 0 (i32.const 6) (local.tee 0 (i32.const 11))) (i32.const 7) ) )\n  (func (export \"as-return-value\") (param i32) (result i32) (return (local.tee 0 (i32.const 7))) )\n  (func (export \"as-if-cond\") (param i32) (result i32) (if (result i32) (local.tee 0 (i32.const 2)) (then (i32.const 0)) (else (i32.const 1)) ) )\n  (func (export \"as-if-then\") (param i32) (result i32) (if (result i32) (local.get 0) (then (local.tee 0 (i32.const 3))) (else (local.get 0)) ) )\n  (func (export \"as-if-else\") (param i32) (result i32) (if (result i32) (local.get 0) (then (local.get 0)) (else (local.tee 0 (i32.const 4))) ) )\n  (func (export \"as-select-first\") (param i32 i32) (result i32) (select (local.tee 0 (i32.const 5)) (local.get 0) (local.get 1)) )\n  (func (export \"as-select-second\") (param i32 i32) (result i32) (select (local.get 0) (local.tee 0 (i32.const 6)) (local.get 1)) )\n  (func (export \"as-select-cond\") (param i32) (result i32) (select (i32.const 0) (i32.const 1) (local.tee 0 (i32.const 7))) )\n  (func $f (param i32 i32 i32) (result i32) (i32.const -1))\n  (func (export \"as-call-first\") (param i32) (result i32) (call $f (local.tee 0 (i32.const 12)) (i32.const 2) (i32.const 3)) )\n  (func (export \"as-call-mid\") (param i32) (result i32) (call $f (i32.const 1) (local.tee 0 (i32.const 13)) (i32.const 3)) )\n  (func (export \"as-call-last\") (param i32) (result i32) (call $f (i32.const 1) (i32.const 2) (local.tee 0 (i32.const 14))) ) (type $sig (func (param i32 i32 i32) (result i32))) (table funcref (elem $f))\n  (func (export \"as-call_indirect-first\") (param i32) (result i32) (call_indirect (type $sig) (local.tee 0 (i32.const 1)) (i32.const 2) (i32.const 3) (i32.const 0) ) )\n  (func (export \"as-call_indirect-mid\") (param i32) (result i32) (call_indirect (type $sig) (i32.const 1) (local.tee 0 (i32.const 2)) (i32.const 3) (i32.const 0) ) )\n  (func (export \"as-call_indirect-last\") (param i32) (result i32) (call_indirect (type $sig) (i32.const 1) (i32.const 2) (local.tee 0 (i32.const 3)) (i32.const 0) ) )\n  (func (export \"as-call_indirect-index\") (param i32) (result i32) (call_indirect (type $sig) (i32.const 1) (i32.const 2) (i32.const 3) (local.tee 0 (i32.const 0)) ) )\n  (func (export \"as-local.set-value\") (local i32) (local.set 0 (local.tee 0 (i32.const 1))) )\n  (func (export \"as-local.tee-value\") (param i32) (result i32) (local.tee 0 (local.tee 0 (i32.const 1))) ) (global $g (mut i32) (i32.const 0))\n  (func (export \"as-global.set-value\") (local i32) (global.set $g (local.tee 0 (i32.const 1))) ) (memory 1)\n  (func (export \"as-load-address\") (param i32) (result i32) (i32.load (local.tee 0 (i32.const 1))) )\n  (func (export \"as-loadN-address\") (param i32) (result i32) (i32.load8_s (local.tee 0 (i32.const 3))) )\n  (func (export \"as-store-address\") (param i32) (i32.store (local.tee 0 (i32.const 30)) (i32.const 7)) )\n  (func (export \"as-store-value\") (param i32) (i32.store (i32.const 2) (local.tee 0 (i32.const 1))) )\n  (func (export \"as-storeN-address\") (param i32) (i32.store8 (local.tee 0 (i32.const 1)) (i32.const 7)) )\n  (func (export \"as-storeN-value\") (param i32) (i32.store16 (i32.const 2) (local.tee 0 (i32.const 1))) )\n  (func (export \"as-unary-operand\") (param f32) (result f32) (f32.neg (local.tee 0 (f32.const nan:0x0f1e2))) )\n  (func (export \"as-binary-left\") (param i32) (result i32) (i32.add (local.tee 0 (i32.const 3)) (i32.const 10)) )\n  (func (export \"as-binary-right\") (param i32) (result i32) (i32.sub (i32.const 10) (local.tee 0 (i32.const 4))) )\n  (func (export \"as-test-operand\") (param i32) (result i32) (i32.eqz (local.tee 0 (i32.const 0))) )\n  (func (export \"as-compare-left\") (param i32) (result i32) (i32.le_s (local.tee 0 (i32.const 43)) (i32.const 10)) )\n  (func (export \"as-compare-right\") (param i32) (result i32) (i32.ne (i32.const 10) (local.tee 0 (i32.const 42))) )\n  (func (export \"as-convert-operand\") (param i64) (result i32) (i32.wrap_i64 (local.tee 0 (i64.const 41))) )\n  (func (export \"as-memory.grow-size\") (param i32) (result i32) (memory.grow (local.tee 0 (i32.const 40))) ))",
    "(assert_return (invoke \"type-local-i32\") (i32.const 0))",
    "(assert_return (invoke \"type-local-i64\") (i64.const 0))",
    "(assert_return (invoke \"type-local-f32\") (f32.const 0))",
    "(assert_return (invoke \"type-local-f64\") (f64.const 0))",
    "(assert_return (invoke \"type-param-i32\" (i32.const 2)) (i32.const 10))",
    "(assert_return (invoke \"type-param-i64\" (i64.const 3)) (i64.const 11))",
    "(assert_return (invoke \"type-param-f32\" (f32.const 4.4)) (f32.const 11.1))",
    "(assert_return (invoke \"type-param-f64\" (f64.const 5.5)) (f64.const 12.2))",
    "(assert_return (invoke \"as-block-first\" (i32.const 0)) (i32.const 1))",
    "(assert_return (invoke \"as-block-mid\" (i32.const 0)) (i32.const 1))",
    "(assert_return (invoke \"as-block-last\" (i32.const 0)) (i32.const 1))",
    "(assert_return (invoke \"as-loop-first\" (i32.const 0)) (i32.const 3))",
    "(assert_return (invoke \"as-loop-mid\" (i32.const 0)) (i32.const 4))",
    "(assert_return (invoke \"as-loop-last\" (i32.const 0)) (i32.const 5))",
    "(assert_return (invoke \"as-br-value\" (i32.const 0)) (i32.const 9))",
    "(assert_return (invoke \"as-br_if-cond\" (i32.const 0)))",
    "(assert_return (invoke \"as-br_if-value\" (i32.const 0)) (i32.const 8))",
    "(assert_return (invoke \"as-br_if-value-cond\" (i32.const 0)) (i32.const 6))",
    "(assert_return (invoke \"as-br_table-index\" (i32.const 0)))",
    "(assert_return (invoke \"as-br_table-value\" (i32.const 0)) (i32.const 10))",
    "(assert_return (invoke \"as-br_table-value-index\" (i32.const 0)) (i32.const 6))",
    "(assert_return (invoke \"as-return-value\" (i32.const 0)) (i32.const 7))",
    "(assert_return (invoke \"as-if-cond\" (i32.const 0)) (i32.const 0))",
    "(assert_return (invoke \"as-if-then\" (i32.const 1)) (i32.const 3))",
    "(assert_return (invoke \"as-if-else\" (i32.const 0)) (i32.const 4))",
    "(assert_return (invoke \"as-select-first\" (i32.const 0) (i32.const 1)) (i32.const 5))",
    "(assert_return (invoke \"as-select-second\" (i32.const 0) (i32.const 0)) (i32.const 6))",
    "(assert_return (invoke \"as-select-cond\" (i32.const 0)) (i32.const 0))",
    "(assert_return (invoke \"as-call-first\" (i32.const 0)) (i32.const -1))",
    "(assert_return (invoke \"as-call-mid\" (i32.const 0)) (i32.const -1))",
    "(assert_return (invoke \"as-call-last\" (i32.const 0)) (i32.const -1))",
    "(assert_return (invoke \"as-call_indirect-first\" (i32.const 0)) (i32.const -1))",
    "(assert_return (invoke \"as-call_indirect-mid\" (i32.const 0)) (i32.const -1))",
    "(assert_return (invoke \"as-call_indirect-last\" (i32.const 0)) (i32.const -1))",
    "(assert_return (invoke \"as-call_indirect-index\" (i32.const 0)) (i32.const -1))",
    "(assert_return (invoke \"as-local.set-value\"))",
    "(assert_return (invoke \"as-local.tee-value\" (i32.const 0)) (i32.const 1))",
    "(assert_return (invoke \"as-global.set-value\"))",
    "(assert_return (invoke \"as-load-address\" (i32.const 0)) (i32.const 0))",
    "(assert_return (invoke \"as-loadN-address\" (i32.const 0)) (i32.const 0))",
    "(assert_return (invoke \"as-store-address\" (i32.const 0)))",
    "(assert_return (invoke \"as-store-value\" (i32.const 0)))",
    "(assert_return (invoke \"as-storeN-address\" (i32.const 0)))",
    "(assert_return (invoke \"as-storeN-value\" (i32.const 0)))",
    "(assert_return (invoke \"as-unary-operand\" (f32.const 0)) (f32.const -nan:0x0f1e2))",
    "(assert_return (invoke \"as-binary-left\" (i32.const 0)) (i32.const 13))",
    "(assert_return (invoke \"as-binary-right\" (i32.const 0)) (i32.const 6))",
    "(assert_return (invoke \"as-test-operand\" (i32.const 0)) (i32.const 1))",
    "(assert_return (invoke \"as-compare-left\" (i32.const 0)) (i32.const 0))",
    "(assert_return (invoke \"as-compare-right\" (i32.const 0)) (i32.const 1))",
    "(assert_return (invoke \"as-convert-operand\" (i64.const 0)) (i32.const 41))",
    "(assert_return (invoke \"as-memory.grow-size\" (i32.const 0)) (i32.const 1))",
    "(assert_return (invoke \"type-mixed\" (i64.const 1) (f32.const 2.2) (f64.const 3.3) (i32.const 4) (i32.const 5) ))",
    "(assert_return (invoke \"write\" (i64.const 1) (f32.const 2) (f64.const 3.3) (i32.const 4) (i32.const 5) ) (i64.const 56))",
    "(assert_return (invoke \"result\" (i64.const -1) (f32.const -2) (f64.const -3.3) (i32.const -4) (i32.const -5) ) (f64.const 34.8))",
    "(assert_invalid (module (func $type-local-num-vs-num (result i64) (local i32) (local.tee 0 (i32.const 0)))) \"type mismatch\")",
    "(assert_invalid (module (func $type-local-num-vs-num (local f32) (i32.eqz (local.tee 0 (f32.const 0))))) \"type mismatch\")",
    "(assert_invalid (module (func $type-local-num-vs-num (local f64 i64) (f64.neg (local.tee 1 (i64.const 0))))) \"type mismatch\")",
    "(assert_invalid (module (func $type-local-arg-void-vs-num (local i32) (local.tee 0 (nop)))) \"type mismatch\")",
    "(assert_invalid (module (func $type-local-arg-num-vs-num (local i32) (local.tee 0 (f32.const 0)))) \"type mismatch\")",
    "(assert_invalid (module (func $type-local-arg-num-vs-num (local f32) (local.tee 0 (f64.const 0)))) \"type mismatch\")",
    "(assert_invalid (module (func $type-local-arg-num-vs-num (local f64 i64) (local.tee 1 (f64.const 0)))) \"type mismatch\")",
    "(assert_invalid (module (func $type-param-num-vs-num (param i32) (result i64) (local.get 0))) \"type mismatch\")",
    "(assert_invalid (module (func $type-param-num-vs-num (param f32) (i32.eqz (local.get 0)))) \"type mismatch\")",
    "(assert_invalid (module (func $type-param-num-vs-num (param f64 i64) (f64.neg (local.get 1)))) \"type mismatch\")",
    "(assert_invalid (module (func $type-param-arg-void-vs-num (param i32) (local.tee 0 (nop)))) \"type mismatch\")",
    "(assert_invalid (module (func $type-param-arg-num-vs-num (param i32) (local.tee 0 (f32.const 0)))) \"type mismatch\")",
    "(assert_invalid (module (func $type-param-arg-num-vs-num (param f32) (local.tee 0 (f64.const 0)))) \"type mismatch\")",
    "(assert_invalid (module (func $type-param-arg-num-vs-num (param f64 i64) (local.tee 1 (f64.const 0)))) \"type mismatch\")",
    "(assert_invalid (module (func $type-param-arg-empty-vs-num (param i32) (local.tee 0) (drop) ) ) \"type mismatch\")",
    "(assert_invalid (module (func $type-param-arg-empty-vs-num-in-block (param i32) (i32.const 0) (block (local.tee 0) (drop)) ) ) \"type mismatch\")",
    "(assert_invalid (module (func $type-param-arg-empty-vs-num-in-loop (param i32) (i32.const 0) (loop (local.tee 0) (drop)) ) ) \"type mismatch\")",
    "(assert_invalid (module (func $type-param-arg-empty-vs-num-in-then (param i32) (i32.const 0) (i32.const 0) (if (then (local.tee 0) (drop))) ) ) \"type mismatch\")",
    "(assert_invalid (module (func $type-param-arg-empty-vs-num-in-else (param i32) (i32.const 0) (i32.const 0) (if (result i32) (then (i32.const 0)) (else (local.tee 0))) (drop) ) ) \"type mismatch\")",
    "(assert_invalid (module (func $type-param-arg-empty-vs-num-in-br (param i32) (i32.const 0) (block (br 0 (local.tee 0)) (drop)) ) ) \"type mismatch\")",
    "(assert_invalid (module (func $type-param-arg-empty-vs-num-in-br_if (param i32) (i32.const 0) (block (br_if 0 (local.tee 0) (i32.const 1)) (drop)) ) ) \"type mismatch\")",
    "(assert_invalid (module (func $type-param-arg-empty-vs-num-in-br_table (param i32) (i32.const 0) (block (br_table 0 (local.tee 0)) (drop)) ) ) \"type mismatch\")",
    "(assert_invalid (module (func $type-param-arg-empty-vs-num-in-return (param i32) (return (local.tee 0)) (drop) ) ) \"type mismatch\")",
    "(assert_invalid (module (func $type-param-arg-empty-vs-num-in-select (param i32) (select (local.tee 0) (i32.const 1) (i32.const 2)) (drop) ) ) \"type mismatch\")",
    "(assert_invalid (module (func $type-param-arg-empty-vs-num-in-call (param i32) (call 1 (local.tee 0)) (drop) ) (func (param i32) (result i32) (local.get 0)) ) \"type mismatch\")",
    "(assert_invalid (module (func $f (param i32) (result i32) (local.get 0)) (type $sig (func (param i32) (result i32))) (table funcref (elem $f)) (func $type-param-arg-empty-vs-num-in-call_indirect (param i32) (block (result i32) (call_indirect (type $sig) (local.tee 0) (i32.const 0) ) (drop) ) ) ) \"type mismatch\")",
    "(assert_invalid (module (func $type-param-arg-empty-vs-num-in-local.set (param i32) (local.set 0 (local.tee 0)) (local.get 0) (drop) ) ) \"type mismatch\")",
    "(assert_invalid (module (func $type-param-arg-empty-vs-num-in-local.tee (param i32) (local.tee 0 (local.tee 0)) (drop) ) ) \"type mismatch\")",
    "(assert_invalid (module (global $x (mut i32) (i32.const 0)) (func $type-param-arg-empty-vs-num-in-global.set (param i32) (global.set $x (local.tee 0)) (global.get $x) (drop) ) ) \"type mismatch\")",
    "(assert_invalid (module (memory 0) (func $type-param-arg-empty-vs-num-in-memory.grow (param i32) (memory.grow (local.tee 0)) (drop) ) ) \"type mismatch\")",
    "(assert_invalid (module (memory 0) (func $type-param-arg-empty-vs-num-in-load (param i32) (i32.load (local.tee 0)) (drop) ) ) \"type mismatch\")",
    "(assert_invalid (module (memory 1) (func $type-param-arg-empty-vs-num-in-store (param i32) (i32.store (local.tee 0) (i32.const 1)) ) ) \"type mismatch\")",
    "(assert_invalid (module (func $type-mixed-arg-num-vs-num (param f32) (local i32) (local.tee 1 (f32.const 0)))) \"type mismatch\")",
    "(assert_invalid (module (func $type-mixed-arg-num-vs-num (param i64 i32) (local f32) (local.tee 1 (f32.const 0)))) \"type mismatch\")",
    "(assert_invalid (module (func $type-mixed-arg-num-vs-num (param i64) (local f64 i64) (local.tee 1 (i64.const 0)))) \"type mismatch\")",
    "(assert_invalid (module (func $unbound-local (local i32 i64) (local.tee 3 (i32.const 0)) drop)) \"unknown local\")",
    "(assert_invalid (module (func $large-local (local i32 i64) (local.tee 14324343 (i32.const 0)) drop)) \"unknown local\")",
    "(assert_invalid (module (func $unbound-param (param i32 i64) (local.tee 2 (i32.const 0)) drop)) \"unknown local\")",
    "(assert_invalid (module (func $large-param (param i32 i64) (local.tee 714324343 (i32.const 0)) drop)) \"unknown local\")",
    "(assert_invalid (module (func $unbound-mixed (param i32) (local i32 i64) (local.tee 3 (i32.const 0)) drop)) \"unknown local\")",
    "(assert_invalid (module (func $large-mixed (param i64) (local i32 i64) (local.tee 214324343 (i32.const 0)) drop)) \"unknown local\")"
  ],
  "dump": {
    "local_tee.0.wasm": {
      "header": "\nlocal_tee.0.wasm:\tfile format wasm 0x1\nOnFuncType type[0] = -32, num_params=3\nOnFuncType type[1] = -32, num_params=0\nOnFuncType type[2] = -32, num_params=0\nOnFuncType type[3] = -32, num_params=0\nOnFuncType type[4] = -32, num_params=0\nOnFuncType type[5] = -32, num_params=1\nOnFuncType type[6] = -32, num_params=1\nOnFuncType type[7] = -32, num_params=1\nOnFuncType type[8] = -32, num_params=1\nOnFuncType type[9] = -32, num_params=5\nOnFuncType type[10] = -32, num_params=5\nOnFuncType type[11] = -32, num_params=5\nOnFuncType type[12] = -32, num_params=0\nOnFuncType type[13] = -32, num_params=1\nOnFuncType type[14] = -32, num_params=2\nOnFuncType type[15] = -32, num_params=1\n\nSections:\n\n     Type start=0x0000000a end=0x00000062 (size=0x00000058) count: 16\nOnFuncType type[0] = -32, num_params=3\nOnFuncType type[1] = -32, num_params=0\nOnFuncType type[2] = -32, num_params=0\nOnFuncType type[3] = -32, num_params=0\nOnFuncType type[4] = -32, num_params=0\nOnFuncType type[5] = -32, num_params=1\nOnFuncType type[6] = -32, num_params=1\nOnFuncType type[7] = -32, num_params=1\nOnFuncType type[8] = -32, num_params=1\nOnFuncType type[9] = -32, num_params=5\nOnFuncType type[10] = -32, num_params=5\nOnFuncType type[11] = -32, num_params=5\nOnFuncType type[12] = -32, num_params=0\nOnFuncType type[13] = -32, num_params=1\nOnFuncType type[14] = -32, num_params=2\nOnFuncType type[15] = -32, num_params=1\n Function start=0x00000064 end=0x0000009e (size=0x0000003a) count: 57\n    Table start=0x000000a0 end=0x000000a5 (size=0x00000005) count: 1\n   Memory start=0x000000a7 end=0x000000aa (size=0x00000003) count: 1\n   Global start=0x000000ac end=0x000000b2 (size=0x00000006) count: 1\n   Export start=0x000000b5 end=0x00000484 (size=0x000003cf) count: 55\n     Elem start=0x00000486 end=0x0000048d (size=0x00000007) count: 1\n     Code start=0x00000490 end=0x00000813 (size=0x00000383) count: 57\n",
      "details": "\nlocal_tee.0.wasm:\tfile format wasm 0x1\nOnFuncType type[0] = -32, num_params=3\nOnFuncType type[1] = -32, num_params=0\nOnFuncType type[2] = -32, num_params=0\nOnFuncType type[3] = -32, num_params=0\nOnFuncType type[4] = -32, num_params=0\nOnFuncType type[5] = -32, num_params=1\nOnFuncType type[6] = -32, num_params=1\nOnFuncType type[7] = -32, num_params=1\nOnFuncType type[8] = -32, num_params=1\nOnFuncType type[9] = -32, num_params=5\nOnFuncType type[10] = -32, num_params=5\nOnFuncType type[11] = -32, num_params=5\nOnFuncType type[12] = -32, num_params=0\nOnFuncType type[13] = -32, num_params=1\nOnFuncType type[14] = -32, num_params=2\nOnFuncType type[15] = -32, num_params=1\n\nSection Details:\n\nType[16]:\nOnFuncType type[0] = -32, num_params=3\n - type[0] (i32, i32, i32) -> i32\nOnFuncType type[1] = -32, num_params=0\n - type[1] () -> i32\nOnFuncType type[2] = -32, num_params=0\n - type[2] () -> i64\nOnFuncType type[3] = -32, num_params=0\n - type[3] () -> f32\nOnFuncType type[4] = -32, num_params=0\n - type[4] () -> f64\nOnFuncType type[5] = -32, num_params=1\n - type[5] (i32) -> i32\nOnFuncType type[6] = -32, num_params=1\n - type[6] (i64) -> i64\nOnFuncType type[7] = -32, num_params=1\n - type[7] (f32) -> f32\nOnFuncType type[8] = -32, num_params=1\n - type[8] (f64) -> f64\nOnFuncType type[9] = -32, num_params=5\n - type[9] (i64, f32, f64, i32, i32) -> nil\nOnFuncType type[10] = -32, num_params=5\n - type[10] (i64, f32, f64, i32, i32) -> i64\nOnFuncType type[11] = -32, num_params=5\n - type[11] (i64, f32, f64, i32, i32) -> f64\nOnFuncType type[12] = -32, num_params=0\n - type[12] () -> nil\nOnFuncType type[13] = -32, num_params=1\n - type[13] (i32) -> nil\nOnFuncType type[14] = -32, num_params=2\n - type[14] (i32, i32) -> i32\nOnFuncType type[15] = -32, num_params=1\n - type[15] (i64) -> i32\nFunction[57]:\n - func[0] sig=1 <type-local-i32>\n - func[1] sig=2 <type-local-i64>\n - func[2] sig=3 <type-local-f32>\n - func[3] sig=4 <type-local-f64>\n - func[4] sig=5 <type-param-i32>\n - func[5] sig=6 <type-param-i64>\n - func[6] sig=7 <type-param-f32>\n - func[7] sig=8 <type-param-f64>\n - func[8] sig=9 <type-mixed>\n - func[9] sig=10 <write>\n - func[10] sig=11 <result>\n - func[11] sig=12\n - func[12] sig=5 <as-block-first>\n - func[13] sig=5 <as-block-mid>\n - func[14] sig=5 <as-block-last>\n - func[15] sig=5 <as-loop-first>\n - func[16] sig=5 <as-loop-mid>\n - func[17] sig=5 <as-loop-last>\n - func[18] sig=5 <as-br-value>\n - func[19] sig=13 <as-br_if-cond>\n - func[20] sig=5 <as-br_if-value>\n - func[21] sig=5 <as-br_if-value-cond>\n - func[22] sig=13 <as-br_table-index>\n - func[23] sig=5 <as-br_table-value>\n - func[24] sig=5 <as-br_table-value-index>\n - func[25] sig=5 <as-return-value>\n - func[26] sig=5 <as-if-cond>\n - func[27] sig=5 <as-if-then>\n - func[28] sig=5 <as-if-else>\n - func[29] sig=14 <as-select-first>\n - func[30] sig=14 <as-select-second>\n - func[31] sig=5 <as-select-cond>\n - func[32] sig=0\n - func[33] sig=5 <as-call-first>\n - func[34] sig=5 <as-call-mid>\n - func[35] sig=5 <as-call-last>\n - func[36] sig=5 <as-call_indirect-first>\n - func[37] sig=5 <as-call_indirect-mid>\n - func[38] sig=5 <as-call_indirect-last>\n - func[39] sig=5 <as-call_indirect-index>\n - func[40] sig=12 <as-local.set-value>\n - func[41] sig=5 <as-local.tee-value>\n - func[42] sig=12 <as-global.set-value>\n - func[43] sig=5 <as-load-address>\n - func[44] sig=5 <as-loadN-address>\n - func[45] sig=13 <as-store-address>\n - func[46] sig=13 <as-store-value>\n - func[47] sig=13 <as-storeN-address>\n - func[48] sig=13 <as-storeN-value>\n - func[49] sig=7 <as-unary-operand>\n - func[50] sig=5 <as-binary-left>\n - func[51] sig=5 <as-binary-right>\n - func[52] sig=5 <as-test-operand>\n - func[53] sig=5 <as-compare-left>\n - func[54] sig=5 <as-compare-right>\n - func[55] sig=15 <as-convert-operand>\n - func[56] sig=5 <as-memory.grow-size>\nTable[1]:\n - table[0] type=funcref initial=1 max=1\nMemory[1]:\n - memory[0] pages: initial=1\nGlobal[1]:\n - global[0] i32 mutable=1 - init i32=0\nExport[55]:\n - func[0] <type-local-i32> -> \"type-local-i32\"\n - func[1] <type-local-i64> -> \"type-local-i64\"\n - func[2] <type-local-f32> -> \"type-local-f32\"\n - func[3] <type-local-f64> -> \"type-local-f64\"\n - func[4] <type-param-i32> -> \"type-param-i32\"\n - func[5] <type-param-i64> -> \"type-param-i64\"\n - func[6] <type-param-f32> -> \"type-param-f32\"\n - func[7] <type-param-f64> -> \"type-param-f64\"\n - func[8] <type-mixed> -> \"type-mixed\"\n - func[9] <write> -> \"write\"\n - func[10] <result> -> \"result\"\n - func[12] <as-block-first> -> \"as-block-first\"\n - func[13] <as-block-mid> -> \"as-block-mid\"\n - func[14] <as-block-last> -> \"as-block-last\"\n - func[15] <as-loop-first> -> \"as-loop-first\"\n - func[16] <as-loop-mid> -> \"as-loop-mid\"\n - func[17] <as-loop-last> -> \"as-loop-last\"\n - func[18] <as-br-value> -> \"as-br-value\"\n - func[19] <as-br_if-cond> -> \"as-br_if-cond\"\n - func[20] <as-br_if-value> -> \"as-br_if-value\"\n - func[21] <as-br_if-value-cond> -> \"as-br_if-value-cond\"\n - func[22] <as-br_table-index> -> \"as-br_table-index\"\n - func[23] <as-br_table-value> -> \"as-br_table-value\"\n - func[24] <as-br_table-value-index> -> \"as-br_table-value-index\"\n - func[25] <as-return-value> -> \"as-return-value\"\n - func[26] <as-if-cond> -> \"as-if-cond\"\n - func[27] <as-if-then> -> \"as-if-then\"\n - func[28] <as-if-else> -> \"as-if-else\"\n - func[29] <as-select-first> -> \"as-select-first\"\n - func[30] <as-select-second> -> \"as-select-second\"\n - func[31] <as-select-cond> -> \"as-select-cond\"\n - func[33] <as-call-first> -> \"as-call-first\"\n - func[34] <as-call-mid> -> \"as-call-mid\"\n - func[35] <as-call-last> -> \"as-call-last\"\n - func[36] <as-call_indirect-first> -> \"as-call_indirect-first\"\n - func[37] <as-call_indirect-mid> -> \"as-call_indirect-mid\"\n - func[38] <as-call_indirect-last> -> \"as-call_indirect-last\"\n - func[39] <as-call_indirect-index> -> \"as-call_indirect-index\"\n - func[40] <as-local.set-value> -> \"as-local.set-value\"\n - func[41] <as-local.tee-value> -> \"as-local.tee-value\"\n - func[42] <as-global.set-value> -> \"as-global.set-value\"\n - func[43] <as-load-address> -> \"as-load-address\"\n - func[44] <as-loadN-address> -> \"as-loadN-address\"\n - func[45] <as-store-address> -> \"as-store-address\"\n - func[46] <as-store-value> -> \"as-store-value\"\n - func[47] <as-storeN-address> -> \"as-storeN-address\"\n - func[48] <as-storeN-value> -> \"as-storeN-value\"\n - func[49] <as-unary-operand> -> \"as-unary-operand\"\n - func[50] <as-binary-left> -> \"as-binary-left\"\n - func[51] <as-binary-right> -> \"as-binary-right\"\n - func[52] <as-test-operand> -> \"as-test-operand\"\n - func[53] <as-compare-left> -> \"as-compare-left\"\n - func[54] <as-compare-right> -> \"as-compare-right\"\n - func[55] <as-convert-operand> -> \"as-convert-operand\"\n - func[56] <as-memory.grow-size> -> \"as-memory.grow-size\"\nElem[1]:\n - segment[0] flags=0 table=0 count=1 - init i32=0\n  - elem[0] = ref.func:32\nCode[57]:\n - func[0] size=8 <type-local-i32>\n - func[1] size=8 <type-local-i64>\n - func[2] size=11 <type-local-f32>\n - func[3] size=15 <type-local-f64>\n - func[4] size=6 <type-param-i32>\n - func[5] size=6 <type-param-i64>\n - func[6] size=9 <type-param-f32>\n - func[7] size=13 <type-param-f64>\n - func[8] size=82 <type-mixed>\n - func[9] size=85 <write>\n - func[10] size=79 <result>\n - func[11] size=2\n - func[12] size=11 <as-block-first>\n - func[13] size=13 <as-block-mid>\n - func[14] size=13 <as-block-last>\n - func[15] size=11 <as-loop-first>\n - func[16] size=13 <as-loop-mid>\n - func[17] size=13 <as-loop-last>\n - func[18] size=11 <as-br-value>\n - func[19] size=11 <as-br_if-cond>\n - func[20] size=16 <as-br_if-value>\n - func[21] size=16 <as-br_if-value-cond>\n - func[22] size=14 <as-br_table-index>\n - func[23] size=18 <as-br_table-value>\n - func[24] size=17 <as-br_table-value-index>\n - func[25] size=7 <as-return-value>\n - func[26] size=14 <as-if-cond>\n - func[27] size=14 <as-if-then>\n - func[28] size=14 <as-if-else>\n - func[29] size=11 <as-select-first>\n - func[30] size=11 <as-select-second>\n - func[31] size=11 <as-select-cond>\n - func[32] size=4\n - func[33] size=12 <as-call-first>\n - func[34] size=12 <as-call-mid>\n - func[35] size=12 <as-call-last>\n - func[36] size=15 <as-call_indirect-first>\n - func[37] size=15 <as-call_indirect-mid>\n - func[38] size=15 <as-call_indirect-last>\n - func[39] size=15 <as-call_indirect-index>\n - func[40] size=10 <as-local.set-value>\n - func[41] size=8 <as-local.tee-value>\n - func[42] size=10 <as-global.set-value>\n - func[43] size=9 <as-load-address>\n - func[44] size=9 <as-loadN-address>\n - func[45] size=11 <as-store-address>\n - func[46] size=11 <as-store-value>\n - func[47] size=11 <as-storeN-address>\n - func[48] size=11 <as-storeN-value>\n - func[49] size=10 <as-unary-operand>\n - func[50] size=9 <as-binary-left>\n - func[51] size=9 <as-binary-right>\n - func[52] size=7 <as-test-operand>\n - func[53] size=9 <as-compare-left>\n - func[54] size=9 <as-compare-right>\n - func[55] size=7 <as-convert-operand>\n - func[56] size=8 <as-memory.grow-size>\n",
      "disassemble": "\nlocal_tee.0.wasm:\tfile format wasm 0x1\nOnFuncType type[0] = -32, num_params=3\nOnFuncType type[1] = -32, num_params=0\nOnFuncType type[2] = -32, num_params=0\nOnFuncType type[3] = -32, num_params=0\nOnFuncType type[4] = -32, num_params=0\nOnFuncType type[5] = -32, num_params=1\nOnFuncType type[6] = -32, num_params=1\nOnFuncType type[7] = -32, num_params=1\nOnFuncType type[8] = -32, num_params=1\nOnFuncType type[9] = -32, num_params=5\nOnFuncType type[10] = -32, num_params=5\nOnFuncType type[11] = -32, num_params=5\nOnFuncType type[12] = -32, num_params=0\nOnFuncType type[13] = -32, num_params=1\nOnFuncType type[14] = -32, num_params=2\nOnFuncType type[15] = -32, num_params=1\n\nCode Disassembly:\n\nOnFuncType type[0] = -32, num_params=3\nOnFuncType type[1] = -32, num_params=0\nOnFuncType type[2] = -32, num_params=0\nOnFuncType type[3] = -32, num_params=0\nOnFuncType type[4] = -32, num_params=0\nOnFuncType type[5] = -32, num_params=1\nOnFuncType type[6] = -32, num_params=1\nOnFuncType type[7] = -32, num_params=1\nOnFuncType type[8] = -32, num_params=1\nOnFuncType type[9] = -32, num_params=5\nOnFuncType type[10] = -32, num_params=5\nOnFuncType type[11] = -32, num_params=5\nOnFuncType type[12] = -32, num_params=0\nOnFuncType type[13] = -32, num_params=1\nOnFuncType type[14] = -32, num_params=2\nOnFuncType type[15] = -32, num_params=1\n000492 func[0] <type-local-i32>:\n((type_index=0, local_index_=3))\n 000493: 01 7f                      | local[3] type=i32\n 000495: 41 00                      | i32.const 0\n 000497: 22 00                      | local.tee 0\n 000499: 0b                         | end\n00049b func[1] <type-local-i64>:\n((type_index=0, local_index_=3))\n 00049c: 01 7e                      | local[3] type=i64\n 00049e: 42 00                      | i64.const 0\n 0004a0: 22 00                      | local.tee 0\n 0004a2: 0b                         | end\n0004a4 func[2] <type-local-f32>:\n((type_index=0, local_index_=3))\n 0004a5: 01 7d                      | local[3] type=f32\n 0004a7: 43 00 00 00 00             | f32.const 0x0p+0\n 0004ac: 22 00                      | local.tee 0\n 0004ae: 0b                         | end\n0004b0 func[3] <type-local-f64>:\n((type_index=0, local_index_=3))\n 0004b1: 01 7c                      | local[3] type=f64\n 0004b3: 44 00 00 00 00 00 00 00 00 | f64.const 0x0p+0\n 0004bc: 22 00                      | local.tee 0\n 0004be: 0b                         | end\n0004c0 func[4] <type-param-i32>:\n((type_index=0, local_index_=3))\n 0004c1: 41 0a                      | i32.const 10\n 0004c3: 22 00                      | local.tee 0\n 0004c5: 0b                         | end\n0004c7 func[5] <type-param-i64>:\n((type_index=0, local_index_=3))\n 0004c8: 42 0b                      | i64.const 11\n 0004ca: 22 00                      | local.tee 0\n 0004cc: 0b                         | end\n0004ce func[6] <type-param-f32>:\n((type_index=0, local_index_=3))\n 0004cf: 43 9a 99 31 41             | f32.const 0x1.633334p+3\n 0004d4: 22 00                      | local.tee 0\n 0004d6: 0b                         | end\n0004d8 func[7] <type-param-f64>:\n((type_index=0, local_index_=3))\n 0004d9: 44 66 66 66 66 66 66 28 40 | f64.const 0x1.8666666666666p+3\n 0004e2: 22 00                      | local.tee 0\n 0004e4: 0b                         | end\n0004e6 func[8] <type-mixed>:\n((type_index=0, local_index_=3))\n 0004e7: 01 7d                      | local[3] type=f32\n 0004e9: 02 7e                      | local[4..5] type=i64\n 0004eb: 01 7c                      | local[6] type=f64\n 0004ed: 42 00                      | i64.const 0\n 0004ef: 22 00                      | local.tee 0\n 0004f1: 50                         | i64.eqz\n 0004f2: 1a                         | drop\n 0004f3: 43 00 00 00 00             | f32.const 0x0p+0\n 0004f8: 22 01                      | local.tee 1\n 0004fa: 8c                         | f32.neg\n 0004fb: 1a                         | drop\n 0004fc: 44 00 00 00 00 00 00 00 00 | f64.const 0x0p+0\n 000505: 22 02                      | local.tee 2\n 000507: 9a                         | f64.neg\n 000508: 1a                         | drop\n 000509: 41 00                      | i32.const 0\n 00050b: 22 03                      | local.tee 3\n 00050d: 45                         | i32.eqz\n 00050e: 1a                         | drop\n 00050f: 41 00                      | i32.const 0\n 000511: 22 04                      | local.tee 4\n 000513: 45                         | i32.eqz\n 000514: 1a                         | drop\n 000515: 43 00 00 00 00             | f32.const 0x0p+0\n 00051a: 22 05                      | local.tee 5\n 00051c: 8c                         | f32.neg\n 00051d: 1a                         | drop\n 00051e: 42 00                      | i64.const 0\n 000520: 22 06                      | local.tee 6\n 000522: 50                         | i64.eqz\n 000523: 1a                         | drop\n 000524: 42 00                      | i64.const 0\n 000526: 22 07                      | local.tee 7\n 000528: 50                         | i64.eqz\n 000529: 1a                         | drop\n 00052a: 44 00 00 00 00 00 00 00 00 | f64.const 0x0p+0\n 000533: 22 08                      | local.tee 8\n 000535: 9a                         | f64.neg\n 000536: 1a                         | drop\n 000537: 0b                         | end\n000539 func[9] <write>:\n((type_index=0, local_index_=3))\n 00053a: 01 7d                      | local[3] type=f32\n 00053c: 02 7e                      | local[4..5] type=i64\n 00053e: 01 7c                      | local[6] type=f64\n 000540: 43 9a 99 99 be             | f32.const -0x1.333334p-2\n 000545: 22 01                      | local.tee 1\n 000547: 1a                         | drop\n 000548: 41 28                      | i32.const 40\n 00054a: 22 03                      | local.tee 3\n 00054c: 1a                         | drop\n 00054d: 41 79                      | i32.const 4294967289\n 00054f: 22 04                      | local.tee 4\n 000551: 1a                         | drop\n 000552: 43 00 00 b0 40             | f32.const 0x1.6p+2\n 000557: 22 05                      | local.tee 5\n 000559: 1a                         | drop\n 00055a: 42 06                      | i64.const 6\n 00055c: 22 06                      | local.tee 6\n 00055e: 1a                         | drop\n 00055f: 44 00 00 00 00 00 00 20 40 | f64.const 0x1p+3\n 000568: 22 08                      | local.tee 8\n 00056a: 1a                         | drop\n 00056b: 20 00                      | local.get 0\n 00056d: ba                         | f64.convert_i64_u\n 00056e: 20 01                      | local.get 1\n 000570: bb                         | f64.promote_f32\n 000571: 20 02                      | local.get 2\n 000573: 20 03                      | local.get 3\n 000575: b8                         | f64.convert_i32_u\n 000576: 20 04                      | local.get 4\n 000578: b7                         | f64.convert_i32_s\n 000579: 20 05                      | local.get 5\n 00057b: bb                         | f64.promote_f32\n 00057c: 20 06                      | local.get 6\n 00057e: ba                         | f64.convert_i64_u\n 00057f: 20 07                      | local.get 7\n 000581: ba                         | f64.convert_i64_u\n 000582: 20 08                      | local.get 8\n 000584: a0                         | f64.add\n 000585: a0                         | f64.add\n 000586: a0                         | f64.add\n 000587: a0                         | f64.add\n 000588: a0                         | f64.add\n 000589: a0                         | f64.add\n 00058a: a0                         | f64.add\n 00058b: a0                         | f64.add\n 00058c: b0                         | i64.trunc_f64_s\n 00058d: 0b                         | end\n00058f func[10] <result>:\n((type_index=0, local_index_=3))\n 000590: 01 7d                      | local[3] type=f32\n 000592: 02 7e                      | local[4..5] type=i64\n 000594: 01 7c                      | local[6] type=f64\n 000596: 42 01                      | i64.const 1\n 000598: 22 00                      | local.tee 0\n 00059a: ba                         | f64.convert_i64_u\n 00059b: 43 00 00 00 40             | f32.const 0x1p+1\n 0005a0: 22 01                      | local.tee 1\n 0005a2: bb                         | f64.promote_f32\n 0005a3: 44 66 66 66 66 66 66 0a 40 | f64.const 0x1.a666666666666p+1\n 0005ac: 22 02                      | local.tee 2\n 0005ae: 41 04                      | i32.const 4\n 0005b0: 22 03                      | local.tee 3\n 0005b2: b8                         | f64.convert_i32_u\n 0005b3: 41 05                      | i32.const 5\n 0005b5: 22 04                      | local.tee 4\n 0005b7: b7                         | f64.convert_i32_s\n 0005b8: 43 00 00 b0 40             | f32.const 0x1.6p+2\n 0005bd: 22 05                      | local.tee 5\n 0005bf: bb                         | f64.promote_f32\n 0005c0: 42 06                      | i64.const 6\n 0005c2: 22 06                      | local.tee 6\n 0005c4: ba                         | f64.convert_i64_u\n 0005c5: 42 00                      | i64.const 0\n 0005c7: 22 07                      | local.tee 7\n 0005c9: ba                         | f64.convert_i64_u\n 0005ca: 44 00 00 00 00 00 00 20 40 | f64.const 0x1p+3\n 0005d3: 22 08                      | local.tee 8\n 0005d5: a0                         | f64.add\n 0005d6: a0                         | f64.add\n 0005d7: a0                         | f64.add\n 0005d8: a0                         | f64.add\n 0005d9: a0                         | f64.add\n 0005da: a0                         | f64.add\n 0005db: a0                         | f64.add\n 0005dc: a0                         | f64.add\n 0005dd: 0b                         | end\n0005df func[11]:\n((type_index=0, local_index_=3))\n 0005e0: 0b                         | end\n0005e2 func[12] <as-block-first>:\n((type_index=0, local_index_=3))\n 0005e3: 02 7f                      | block i32\n 0005e5: 41 01                      |   i32.const 1\n 0005e7: 22 00                      |   local.tee 0\n 0005e9: 10 0b                      |   call 11\n 0005eb: 0b                         | end\n 0005ec: 0b                         | end\n0005ee func[13] <as-block-mid>:\n((type_index=0, local_index_=3))\n 0005ef: 02 7f                      | block i32\n 0005f1: 10 0b                      |   call 11\n 0005f3: 41 01                      |   i32.const 1\n 0005f5: 22 00                      |   local.tee 0\n 0005f7: 10 0b                      |   call 11\n 0005f9: 0b                         | end\n 0005fa: 0b                         | end\n0005fc func[14] <as-block-last>:\n((type_index=0, local_index_=3))\n 0005fd: 02 7f                      | block i32\n 0005ff: 10 0b                      |   call 11\n 000601: 10 0b                      |   call 11\n 000603: 41 01                      |   i32.const 1\n 000605: 22 00                      |   local.tee 0\n 000607: 0b                         | end\n 000608: 0b                         | end\n00060a func[15] <as-loop-first>:\n((type_index=0, local_index_=3))\n 00060b: 03 7f                      | loop i32\n 00060d: 41 03                      |   i32.const 3\n 00060f: 22 00                      |   local.tee 0\n 000611: 10 0b                      |   call 11\n 000613: 0b                         | end\n 000614: 0b                         | end\n000616 func[16] <as-loop-mid>:\n((type_index=0, local_index_=3))\n 000617: 03 7f                      | loop i32\n 000619: 10 0b                      |   call 11\n 00061b: 41 04                      |   i32.const 4\n 00061d: 22 00                      |   local.tee 0\n 00061f: 10 0b                      |   call 11\n 000621: 0b                         | end\n 000622: 0b                         | end\n000624 func[17] <as-loop-last>:\n((type_index=0, local_index_=3))\n 000625: 03 7f                      | loop i32\n 000627: 10 0b                      |   call 11\n 000629: 10 0b                      |   call 11\n 00062b: 41 05                      |   i32.const 5\n 00062d: 22 00                      |   local.tee 0\n 00062f: 0b                         | end\n 000630: 0b                         | end\n000632 func[18] <as-br-value>:\n((type_index=0, local_index_=3))\n 000633: 02 7f                      | block i32\n 000635: 41 09                      |   i32.const 9\n 000637: 22 00                      |   local.tee 0\n 000639: 0c 00                      |   br 0\n 00063b: 0b                         | end\n 00063c: 0b                         | end\n00063e func[19] <as-br_if-cond>:\n((type_index=0, local_index_=3))\n 00063f: 02 40                      | block\n 000641: 41 01                      |   i32.const 1\n 000643: 22 00                      |   local.tee 0\n 000645: 0d 00                      |   br_if 0\n 000647: 0b                         | end\n 000648: 0b                         | end\n00064a func[20] <as-br_if-value>:\n((type_index=0, local_index_=3))\n 00064b: 02 7f                      | block i32\n 00064d: 41 08                      |   i32.const 8\n 00064f: 22 00                      |   local.tee 0\n 000651: 41 01                      |   i32.const 1\n 000653: 0d 00                      |   br_if 0\n 000655: 1a                         |   drop\n 000656: 41 07                      |   i32.const 7\n 000658: 0b                         | end\n 000659: 0b                         | end\n00065b func[21] <as-br_if-value-cond>:\n((type_index=0, local_index_=3))\n 00065c: 02 7f                      | block i32\n 00065e: 41 06                      |   i32.const 6\n 000660: 41 09                      |   i32.const 9\n 000662: 22 00                      |   local.tee 0\n 000664: 0d 00                      |   br_if 0\n 000666: 1a                         |   drop\n 000667: 41 07                      |   i32.const 7\n 000669: 0b                         | end\n 00066a: 0b                         | end\n00066c func[22] <as-br_table-index>:\n((type_index=0, local_index_=3))\n 00066d: 02 40                      | block\n 00066f: 41 00                      |   i32.const 0\n 000671: 22 00                      |   local.tee 0\n 000673: 0e 02 00 00 00             |   br_table 0 0 0\n 000678: 0b                         | end\n 000679: 0b                         | end\n00067b func[23] <as-br_table-value>:\n((type_index=0, local_index_=3))\n 00067c: 02 7f                      | block i32\n 00067e: 41 0a                      |   i32.const 10\n 000680: 22 00                      |   local.tee 0\n 000682: 41 01                      |   i32.const 1\n 000684: 0e 02 00 00 00             |   br_table 0 0 0\n 000689: 41 07                      |   i32.const 7\n 00068b: 0b                         | end\n 00068c: 0b                         | end\n00068e func[24] <as-br_table-value-index>:\n((type_index=0, local_index_=3))\n 00068f: 02 7f                      | block i32\n 000691: 41 06                      |   i32.const 6\n 000693: 41 0b                      |   i32.const 11\n 000695: 22 00                      |   local.tee 0\n 000697: 0e 01 00 00                |   br_table 0 0\n 00069b: 41 07                      |   i32.const 7\n 00069d: 0b                         | end\n 00069e: 0b                         | end\n0006a0 func[25] <as-return-value>:\n((type_index=0, local_index_=3))\n 0006a1: 41 07                      | i32.const 7\n 0006a3: 22 00                      | local.tee 0\n 0006a5: 0f                         | return\n 0006a6: 0b                         | end\n0006a8 func[26] <as-if-cond>:\n((type_index=0, local_index_=3))\n 0006a9: 41 02                      | i32.const 2\n 0006ab: 22 00                      | local.tee 0\n 0006ad: 04 7f                      | if i32\n 0006af: 41 00                      |   i32.const 0\n 0006b1: 05                         | else\n 0006b2: 41 01                      |   i32.const 1\n 0006b4: 0b                         | end\n 0006b5: 0b                         | end\n0006b7 func[27] <as-if-then>:\n((type_index=0, local_index_=3))\n 0006b8: 20 00                      | local.get 0\n 0006ba: 04 7f                      | if i32\n 0006bc: 41 03                      |   i32.const 3\n 0006be: 22 00                      |   local.tee 0\n 0006c0: 05                         | else\n 0006c1: 20 00                      |   local.get 0\n 0006c3: 0b                         | end\n 0006c4: 0b                         | end\n0006c6 func[28] <as-if-else>:\n((type_index=0, local_index_=3))\n 0006c7: 20 00                      | local.get 0\n 0006c9: 04 7f                      | if i32\n 0006cb: 20 00                      |   local.get 0\n 0006cd: 05                         | else\n 0006ce: 41 04                      |   i32.const 4\n 0006d0: 22 00                      |   local.tee 0\n 0006d2: 0b                         | end\n 0006d3: 0b                         | end\n0006d5 func[29] <as-select-first>:\n((type_index=0, local_index_=3))\n 0006d6: 41 05                      | i32.const 5\n 0006d8: 22 00                      | local.tee 0\n 0006da: 20 00                      | local.get 0\n 0006dc: 20 01                      | local.get 1\n 0006de: 1b                         | select\n 0006df: 0b                         | end\n0006e1 func[30] <as-select-second>:\n((type_index=0, local_index_=3))\n 0006e2: 20 00                      | local.get 0\n 0006e4: 41 06                      | i32.const 6\n 0006e6: 22 00                      | local.tee 0\n 0006e8: 20 01                      | local.get 1\n 0006ea: 1b                         | select\n 0006eb: 0b                         | end\n0006ed func[31] <as-select-cond>:\n((type_index=0, local_index_=3))\n 0006ee: 41 00                      | i32.const 0\n 0006f0: 41 01                      | i32.const 1\n 0006f2: 41 07                      | i32.const 7\n 0006f4: 22 00                      | local.tee 0\n 0006f6: 1b                         | select\n 0006f7: 0b                         | end\n0006f9 func[32]:\n((type_index=0, local_index_=3))\n 0006fa: 41 7f                      | i32.const 4294967295\n 0006fc: 0b                         | end\n0006fe func[33] <as-call-first>:\n((type_index=0, local_index_=3))\n 0006ff: 41 0c                      | i32.const 12\n 000701: 22 00                      | local.tee 0\n 000703: 41 02                      | i32.const 2\n 000705: 41 03                      | i32.const 3\n 000707: 10 20                      | call 32\n 000709: 0b                         | end\n00070b func[34] <as-call-mid>:\n((type_index=0, local_index_=3))\n 00070c: 41 01                      | i32.const 1\n 00070e: 41 0d                      | i32.const 13\n 000710: 22 00                      | local.tee 0\n 000712: 41 03                      | i32.const 3\n 000714: 10 20                      | call 32\n 000716: 0b                         | end\n000718 func[35] <as-call-last>:\n((type_index=0, local_index_=3))\n 000719: 41 01                      | i32.const 1\n 00071b: 41 02                      | i32.const 2\n 00071d: 41 0e                      | i32.const 14\n 00071f: 22 00                      | local.tee 0\n 000721: 10 20                      | call 32\n 000723: 0b                         | end\n000725 func[36] <as-call_indirect-first>:\n((type_index=0, local_index_=3))\n 000726: 41 01                      | i32.const 1\n 000728: 22 00                      | local.tee 0\n 00072a: 41 02                      | i32.const 2\n 00072c: 41 03                      | i32.const 3\n 00072e: 41 00                      | i32.const 0\n 000730: 11 00 00                   | call_indirect 0 (type 0)\n 000733: 0b                         | end\n000735 func[37] <as-call_indirect-mid>:\n((type_index=0, local_index_=3))\n 000736: 41 01                      | i32.const 1\n 000738: 41 02                      | i32.const 2\n 00073a: 22 00                      | local.tee 0\n 00073c: 41 03                      | i32.const 3\n 00073e: 41 00                      | i32.const 0\n 000740: 11 00 00                   | call_indirect 0 (type 0)\n 000743: 0b                         | end\n000745 func[38] <as-call_indirect-last>:\n((type_index=0, local_index_=3))\n 000746: 41 01                      | i32.const 1\n 000748: 41 02                      | i32.const 2\n 00074a: 41 03                      | i32.const 3\n 00074c: 22 00                      | local.tee 0\n 00074e: 41 00                      | i32.const 0\n 000750: 11 00 00                   | call_indirect 0 (type 0)\n 000753: 0b                         | end\n000755 func[39] <as-call_indirect-index>:\n((type_index=0, local_index_=3))\n 000756: 41 01                      | i32.const 1\n 000758: 41 02                      | i32.const 2\n 00075a: 41 03                      | i32.const 3\n 00075c: 41 00                      | i32.const 0\n 00075e: 22 00                      | local.tee 0\n 000760: 11 00 00                   | call_indirect 0 (type 0)\n 000763: 0b                         | end\n000765 func[40] <as-local.set-value>:\n((type_index=0, local_index_=3))\n 000766: 01 7f                      | local[3] type=i32\n 000768: 41 01                      | i32.const 1\n 00076a: 22 00                      | local.tee 0\n 00076c: 21 00                      | local.set 0\n 00076e: 0b                         | end\n000770 func[41] <as-local.tee-value>:\n((type_index=0, local_index_=3))\n 000771: 41 01                      | i32.const 1\n 000773: 22 00                      | local.tee 0\n 000775: 22 00                      | local.tee 0\n 000777: 0b                         | end\n000779 func[42] <as-global.set-value>:\n((type_index=0, local_index_=3))\n 00077a: 01 7f                      | local[3] type=i32\n 00077c: 41 01                      | i32.const 1\n 00077e: 22 00                      | local.tee 0\n 000780: 24 00                      | global.set 0\n 000782: 0b                         | end\n000784 func[43] <as-load-address>:\n((type_index=0, local_index_=3))\n 000785: 41 01                      | i32.const 1\n 000787: 22 00                      | local.tee 0\n 000789: 28 02 00                   | i32.load 2 0\n 00078c: 0b                         | end\n00078e func[44] <as-loadN-address>:\n((type_index=0, local_index_=3))\n 00078f: 41 03                      | i32.const 3\n 000791: 22 00                      | local.tee 0\n 000793: 2c 00 00                   | i32.load8_s 0 0\n 000796: 0b                         | end\n000798 func[45] <as-store-address>:\n((type_index=0, local_index_=3))\n 000799: 41 1e                      | i32.const 30\n 00079b: 22 00                      | local.tee 0\n 00079d: 41 07                      | i32.const 7\n 00079f: 36 02 00                   | i32.store 2 0\n 0007a2: 0b                         | end\n0007a4 func[46] <as-store-value>:\n((type_index=0, local_index_=3))\n 0007a5: 41 02                      | i32.const 2\n 0007a7: 41 01                      | i32.const 1\n 0007a9: 22 00                      | local.tee 0\n 0007ab: 36 02 00                   | i32.store 2 0\n 0007ae: 0b                         | end\n0007b0 func[47] <as-storeN-address>:\n((type_index=0, local_index_=3))\n 0007b1: 41 01                      | i32.const 1\n 0007b3: 22 00                      | local.tee 0\n 0007b5: 41 07                      | i32.const 7\n 0007b7: 3a 00 00                   | i32.store8 0 0\n 0007ba: 0b                         | end\n0007bc func[48] <as-storeN-value>:\n((type_index=0, local_index_=3))\n 0007bd: 41 02                      | i32.const 2\n 0007bf: 41 01                      | i32.const 1\n 0007c1: 22 00                      | local.tee 0\n 0007c3: 3b 01 00                   | i32.store16 1 0\n 0007c6: 0b                         | end\n0007c8 func[49] <as-unary-operand>:\n((type_index=0, local_index_=3))\n 0007c9: 43 e2 f1 80 7f             | f32.const nan:0xf1e2\n 0007ce: 22 00                      | local.tee 0\n 0007d0: 8c                         | f32.neg\n 0007d1: 0b                         | end\n0007d3 func[50] <as-binary-left>:\n((type_index=0, local_index_=3))\n 0007d4: 41 03                      | i32.const 3\n 0007d6: 22 00                      | local.tee 0\n 0007d8: 41 0a                      | i32.const 10\n 0007da: 6a                         | i32.add\n 0007db: 0b                         | end\n0007dd func[51] <as-binary-right>:\n((type_index=0, local_index_=3))\n 0007de: 41 0a                      | i32.const 10\n 0007e0: 41 04                      | i32.const 4\n 0007e2: 22 00                      | local.tee 0\n 0007e4: 6b                         | i32.sub\n 0007e5: 0b                         | end\n0007e7 func[52] <as-test-operand>:\n((type_index=0, local_index_=3))\n 0007e8: 41 00                      | i32.const 0\n 0007ea: 22 00                      | local.tee 0\n 0007ec: 45                         | i32.eqz\n 0007ed: 0b                         | end\n0007ef func[53] <as-compare-left>:\n((type_index=0, local_index_=3))\n 0007f0: 41 2b                      | i32.const 43\n 0007f2: 22 00                      | local.tee 0\n 0007f4: 41 0a                      | i32.const 10\n 0007f6: 4c                         | i32.le_s\n 0007f7: 0b                         | end\n0007f9 func[54] <as-compare-right>:\n((type_index=0, local_index_=3))\n 0007fa: 41 0a                      | i32.const 10\n 0007fc: 41 2a                      | i32.const 42\n 0007fe: 22 00                      | local.tee 0\n 000800: 47                         | i32.ne\n 000801: 0b                         | end\n000803 func[55] <as-convert-operand>:\n((type_index=0, local_index_=3))\n 000804: 42 29                      | i64.const 41\n 000806: 22 00                      | local.tee 0\n 000808: a7                         | i32.wrap_i64\n 000809: 0b                         | end\n00080b func[56] <as-memory.grow-size>:\n((type_index=0, local_index_=3))\n 00080c: 41 28                      | i32.const 40\n 00080e: 22 00                      | local.tee 0\n 000810: 40 00                      | memory.grow 0\n 000812: 0b                         | end\n"
    }
  }
}
