{
  "bin": {
    "local_get.0.wasm": "AGFzbQEAAAABNgpgAAF/YAABfmAAAX1gAAF8YAF/AX9gAX4BfmABfQF9YAF8AXxgBX59fH9/AGAFfn18f38BfAMUEwABAgMEBQYHCAkEBAQEBAQEBAQHswITDnR5cGUtbG9jYWwtaTMyAAAOdHlwZS1sb2NhbC1pNjQAAQ50eXBlLWxvY2FsLWYzMgACDnR5cGUtbG9jYWwtZjY0AAMOdHlwZS1wYXJhbS1pMzIABA50eXBlLXBhcmFtLWk2NAAFDnR5cGUtcGFyYW0tZjMyAAYOdHlwZS1wYXJhbS1mNjQABwp0eXBlLW1peGVkAAgEcmVhZAAJDmFzLWJsb2NrLXZhbHVlAAoNYXMtbG9vcC12YWx1ZQALC2FzLWJyLXZhbHVlAAwOYXMtYnJfaWYtdmFsdWUADRNhcy1icl9pZi12YWx1ZS1jb25kAA4RYXMtYnJfdGFibGUtdmFsdWUADw9hcy1yZXR1cm4tdmFsdWUAEAphcy1pZi10aGVuABEKYXMtaWYtZWxzZQASCo4CEwYBAX8gAAsGAQF+IAALBgEBfSAACwYBAXwgAAsEACAACwQAIAALBAAgAAsEACAACywDAX0CfgF8IABQGiABjBogApoaIANFGiAERRogBYwaIAZQGiAHUBogCJoaCz8DAX0CfgF8QwAAsEAhBUIGIQZEAAAAAAAAIEAhCCAAuiABuyACIAO4IAS3IAW7IAa6IAe6IAigoKCgoKCgoAsHAAJ/IAALCwcAA38gAAsLCQACfyAADAALCwsAAn8gAEEBDQALCwsAAn8gACAADQALCx0AAkACQAJAIAAOAgABAkEADwtBAQ8LQQIPC0EDCwUAIAAPCwwAIAAEfyAABUEACwsMACAABH9BAQUgAAsL",
    "local_get.1.wasm": "AGFzbQEAAAABBQFgAAF+AwIBAAoIAQYBAX8gAAs=",
    "local_get.10.wasm": "AGFzbQEAAAABBAFgAAADAgEACggBBgEBfCAACw==",
    "local_get.11.wasm": "AGFzbQEAAAABBAFgAAADAgEACgsBCQIBfwF+IAMaCw==",
    "local_get.12.wasm": "AGFzbQEAAAABBAFgAAADAgEACg4BDAIBfwF+IPek6gYaCw==",
    "local_get.13.wasm": "AGFzbQEAAAABBgFgAn9+AAMCAQAKBwEFACACGgs=",
    "local_get.14.wasm": "AGFzbQEAAAABBgFgAn9+AAMCAQAKCwEJACD38s7UAhoL",
    "local_get.15.wasm": "AGFzbQEAAAABBQFgAX8AAwIBAAoLAQkCAX8BfiADGgs=",
    "local_get.16.wasm": "AGFzbQEAAAABBQFgAX4AAwIBAAoOAQwCAX8BfiD3qJlmGgs=",
    "local_get.2.wasm": "AGFzbQEAAAABBQFgAAF/AwIBAAoJAQcBAX0gAEUL",
    "local_get.3.wasm": "AGFzbQEAAAABBQFgAAF8AwIBAAoLAQkCAXwBfiABmgs=",
    "local_get.4.wasm": "AGFzbQEAAAABBgFgAX8BfgMCAQAKBgEEACAACw==",
    "local_get.5.wasm": "AGFzbQEAAAABBgFgAX0BfwMCAQAKBwEFACAARQs=",
    "local_get.6.wasm": "AGFzbQEAAAABBwFgAnx+AXwDAgEACgcBBQAgAZoL",
    "local_get.7.wasm": "AGFzbQEAAAABBAFgAAADAgEACggBBgEBfyAACw==",
    "local_get.8.wasm": "AGFzbQEAAAABBAFgAAADAgEACggBBgEBfiAACw==",
    "local_get.9.wasm": "AGFzbQEAAAABBAFgAAADAgEACggBBgEBfSAACw=="
  },
  "spec": {"source_filename": "/home/rvagg/git/webassembly/spec/test/core/local_get.wast",
 "commands": [
  {"type": "module", "line": 3, "filename": "local_get.0.wasm"}, 
  {"type": "assert_return", "line": 109, "action": {"type": "invoke", "field": "type-local-i32", "args": []}, "expected": [{"type": "i32", "value": "0"}]}, 
  {"type": "assert_return", "line": 110, "action": {"type": "invoke", "field": "type-local-i64", "args": []}, "expected": [{"type": "i64", "value": "0"}]}, 
  {"type": "assert_return", "line": 111, "action": {"type": "invoke", "field": "type-local-f32", "args": []}, "expected": [{"type": "f32", "value": "0"}]}, 
  {"type": "assert_return", "line": 112, "action": {"type": "invoke", "field": "type-local-f64", "args": []}, "expected": [{"type": "f64", "value": "0"}]}, 
  {"type": "assert_return", "line": 114, "action": {"type": "invoke", "field": "type-param-i32", "args": [{"type": "i32", "value": "2"}]}, "expected": [{"type": "i32", "value": "2"}]}, 
  {"type": "assert_return", "line": 115, "action": {"type": "invoke", "field": "type-param-i64", "args": [{"type": "i64", "value": "3"}]}, "expected": [{"type": "i64", "value": "3"}]}, 
  {"type": "assert_return", "line": 116, "action": {"type": "invoke", "field": "type-param-f32", "args": [{"type": "f32", "value": "1082969293"}]}, "expected": [{"type": "f32", "value": "1082969293"}]}, 
  {"type": "assert_return", "line": 117, "action": {"type": "invoke", "field": "type-param-f64", "args": [{"type": "f64", "value": "4617878467915022336"}]}, "expected": [{"type": "f64", "value": "4617878467915022336"}]}, 
  {"type": "assert_return", "line": 119, "action": {"type": "invoke", "field": "as-block-value", "args": [{"type": "i32", "value": "6"}]}, "expected": [{"type": "i32", "value": "6"}]}, 
  {"type": "assert_return", "line": 120, "action": {"type": "invoke", "field": "as-loop-value", "args": [{"type": "i32", "value": "7"}]}, "expected": [{"type": "i32", "value": "7"}]}, 
  {"type": "assert_return", "line": 122, "action": {"type": "invoke", "field": "as-br-value", "args": [{"type": "i32", "value": "8"}]}, "expected": [{"type": "i32", "value": "8"}]}, 
  {"type": "assert_return", "line": 123, "action": {"type": "invoke", "field": "as-br_if-value", "args": [{"type": "i32", "value": "9"}]}, "expected": [{"type": "i32", "value": "9"}]}, 
  {"type": "assert_return", "line": 124, "action": {"type": "invoke", "field": "as-br_if-value-cond", "args": [{"type": "i32", "value": "10"}]}, "expected": [{"type": "i32", "value": "10"}]}, 
  {"type": "assert_return", "line": 125, "action": {"type": "invoke", "field": "as-br_table-value", "args": [{"type": "i32", "value": "1"}]}, "expected": [{"type": "i32", "value": "2"}]}, 
  {"type": "assert_return", "line": 127, "action": {"type": "invoke", "field": "as-return-value", "args": [{"type": "i32", "value": "0"}]}, "expected": [{"type": "i32", "value": "0"}]}, 
  {"type": "assert_return", "line": 129, "action": {"type": "invoke", "field": "as-if-then", "args": [{"type": "i32", "value": "1"}]}, "expected": [{"type": "i32", "value": "1"}]}, 
  {"type": "assert_return", "line": 130, "action": {"type": "invoke", "field": "as-if-else", "args": [{"type": "i32", "value": "0"}]}, "expected": [{"type": "i32", "value": "0"}]}, 
  {"type": "assert_return", "line": 133, "action": {"type": "invoke", "field": "type-mixed", "args": [{"type": "i64", "value": "1"}, {"type": "f32", "value": "1074580685"}, {"type": "f64", "value": "4614613358185178726"}, {"type": "i32", "value": "4"}, {"type": "i32", "value": "5"}]}, "expected": []}, 
  {"type": "assert_return", "line": 139, "action": {"type": "invoke", "field": "read", "args": [{"type": "i64", "value": "1"}, {"type": "f32", "value": "1073741824"}, {"type": "f64", "value": "4614613358185178726"}, {"type": "i32", "value": "4"}, {"type": "i32", "value": "5"}]}, "expected": [{"type": "f64", "value": "4630094481904264806"}]}, 
  {"type": "assert_invalid", "line": 149, "filename": "local_get.1.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 153, "filename": "local_get.2.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 157, "filename": "local_get.3.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 165, "filename": "local_get.4.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 169, "filename": "local_get.5.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 173, "filename": "local_get.6.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 181, "filename": "local_get.7.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 185, "filename": "local_get.8.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 189, "filename": "local_get.9.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 193, "filename": "local_get.10.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 201, "filename": "local_get.11.wasm", "text": "unknown local", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 205, "filename": "local_get.12.wasm", "text": "unknown local", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 210, "filename": "local_get.13.wasm", "text": "unknown local", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 214, "filename": "local_get.14.wasm", "text": "unknown local", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 219, "filename": "local_get.15.wasm", "text": "unknown local", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 223, "filename": "local_get.16.wasm", "text": "unknown local", "module_type": "binary"}]},
  "code": [
    "(module \n  (func (export \"type-local-i32\") (result i32) (local i32) (local.get 0))\n  (func (export \"type-local-i64\") (result i64) (local i64) (local.get 0))\n  (func (export \"type-local-f32\") (result f32) (local f32) (local.get 0))\n  (func (export \"type-local-f64\") (result f64) (local f64) (local.get 0))\n  (func (export \"type-param-i32\") (param i32) (result i32) (local.get 0))\n  (func (export \"type-param-i64\") (param i64) (result i64) (local.get 0))\n  (func (export \"type-param-f32\") (param f32) (result f32) (local.get 0))\n  (func (export \"type-param-f64\") (param f64) (result f64) (local.get 0))\n  (func (export \"type-mixed\") (param i64 f32 f64 i32 i32) (local f32 i64 i64 f64) (drop (i64.eqz (local.get 0))) (drop (f32.neg (local.get 1))) (drop (f64.neg (local.get 2))) (drop (i32.eqz (local.get 3))) (drop (i32.eqz (local.get 4))) (drop (f32.neg (local.get 5))) (drop (i64.eqz (local.get 6))) (drop (i64.eqz (local.get 7))) (drop (f64.neg (local.get 8))) )\n  (func (export \"read\") (param i64 f32 f64 i32 i32) (result f64) (local f32 i64 i64 f64) (local.set 5 (f32.const 5.5)) (local.set 6 (i64.const 6)) (local.set 8 (f64.const 8)) (f64.add (f64.convert_i64_u (local.get 0)) (f64.add (f64.promote_f32 (local.get 1)) (f64.add (local.get 2) (f64.add (f64.convert_i32_u (local.get 3)) (f64.add (f64.convert_i32_s (local.get 4)) (f64.add (f64.promote_f32 (local.get 5)) (f64.add (f64.convert_i64_u (local.get 6)) (f64.add (f64.convert_i64_u (local.get 7)) (local.get 8) ) ) ) ) ) ) ) ) )\n  (func (export \"as-block-value\") (param i32) (result i32) (block (result i32) (local.get 0)) )\n  (func (export \"as-loop-value\") (param i32) (result i32) (loop (result i32) (local.get 0)) )\n  (func (export \"as-br-value\") (param i32) (result i32) (block (result i32) (br 0 (local.get 0))) )\n  (func (export \"as-br_if-value\") (param i32) (result i32) (block $l0 (result i32) (br_if $l0 (local.get 0) (i32.const 1))) )\n  (func (export \"as-br_if-value-cond\") (param i32) (result i32) (block (result i32) (br_if 0 (local.get 0) (local.get 0)) ) )\n  (func (export \"as-br_table-value\") (param i32) (result i32) (block (block (block (br_table 0 1 2 (local.get 0)) (return (i32.const 0)) ) (return (i32.const 1)) ) (return (i32.const 2)) ) (i32.const 3) )\n  (func (export \"as-return-value\") (param i32) (result i32) (return (local.get 0)) )\n  (func (export \"as-if-then\") (param i32) (result i32) (if (result i32) (local.get 0) (then (local.get 0)) (else (i32.const 0))) )\n  (func (export \"as-if-else\") (param i32) (result i32) (if (result i32) (local.get 0) (then (i32.const 1)) (else (local.get 0))) ))",
    "(assert_return (invoke \"type-local-i32\") (i32.const 0))",
    "(assert_return (invoke \"type-local-i64\") (i64.const 0))",
    "(assert_return (invoke \"type-local-f32\") (f32.const 0))",
    "(assert_return (invoke \"type-local-f64\") (f64.const 0))",
    "(assert_return (invoke \"type-param-i32\" (i32.const 2)) (i32.const 2))",
    "(assert_return (invoke \"type-param-i64\" (i64.const 3)) (i64.const 3))",
    "(assert_return (invoke \"type-param-f32\" (f32.const 4.4)) (f32.const 4.4))",
    "(assert_return (invoke \"type-param-f64\" (f64.const 5.5)) (f64.const 5.5))",
    "(assert_return (invoke \"as-block-value\" (i32.const 6)) (i32.const 6))",
    "(assert_return (invoke \"as-loop-value\" (i32.const 7)) (i32.const 7))",
    "(assert_return (invoke \"as-br-value\" (i32.const 8)) (i32.const 8))",
    "(assert_return (invoke \"as-br_if-value\" (i32.const 9)) (i32.const 9))",
    "(assert_return (invoke \"as-br_if-value-cond\" (i32.const 10)) (i32.const 10))",
    "(assert_return (invoke \"as-br_table-value\" (i32.const 1)) (i32.const 2))",
    "(assert_return (invoke \"as-return-value\" (i32.const 0)) (i32.const 0))",
    "(assert_return (invoke \"as-if-then\" (i32.const 1)) (i32.const 1))",
    "(assert_return (invoke \"as-if-else\" (i32.const 0)) (i32.const 0))",
    "(assert_return (invoke \"type-mixed\" (i64.const 1) (f32.const 2.2) (f64.const 3.3) (i32.const 4) (i32.const 5) ))",
    "(assert_return (invoke \"read\" (i64.const 1) (f32.const 2) (f64.const 3.3) (i32.const 4) (i32.const 5) ) (f64.const 34.8))",
    "(assert_invalid (module (func $type-local-num-vs-num (result i64) (local i32) (local.get 0))) \"type mismatch\")",
    "(assert_invalid (module (func $type-local-num-vs-num (result i32) (local f32) (i32.eqz (local.get 0)))) \"type mismatch\")",
    "(assert_invalid (module (func $type-local-num-vs-num (result f64) (local f64 i64) (f64.neg (local.get 1)))) \"type mismatch\")",
    "(assert_invalid (module (func $type-param-num-vs-num (param i32) (result i64) (local.get 0))) \"type mismatch\")",
    "(assert_invalid (module (func $type-param-num-vs-num (param f32) (result i32) (i32.eqz (local.get 0)))) \"type mismatch\")",
    "(assert_invalid (module (func $type-param-num-vs-num (param f64 i64) (result f64) (f64.neg (local.get 1)))) \"type mismatch\")",
    "(assert_invalid (module (func $type-empty-vs-i32 (local i32) (local.get 0))) \"type mismatch\")",
    "(assert_invalid (module (func $type-empty-vs-i64 (local i64) (local.get 0))) \"type mismatch\")",
    "(assert_invalid (module (func $type-empty-vs-f32 (local f32) (local.get 0))) \"type mismatch\")",
    "(assert_invalid (module (func $type-empty-vs-f64 (local f64) (local.get 0))) \"type mismatch\")",
    "(assert_invalid (module (func $unbound-local (local i32 i64) (local.get 3) drop)) \"unknown local\")",
    "(assert_invalid (module (func $large-local (local i32 i64) (local.get 14324343) drop)) \"unknown local\")",
    "(assert_invalid (module (func $unbound-param (param i32 i64) (local.get 2) drop)) \"unknown local\")",
    "(assert_invalid (module (func $large-param (param i32 i64) (local.get 714324343) drop)) \"unknown local\")",
    "(assert_invalid (module (func $unbound-mixed (param i32) (local i32 i64) (local.get 3) drop)) \"unknown local\")",
    "(assert_invalid (module (func $large-mixed (param i64) (local i32 i64) (local.get 214324343) drop)) \"unknown local\")"
  ],
  "dump": {
    "local_get.0.wasm": {
      "header": "\nlocal_get.0.wasm:\tfile format wasm 0x1\n\nSections:\n\n     Type start=0x0000000a end=0x00000040 (size=0x00000036) count: 10\n Function start=0x00000042 end=0x00000056 (size=0x00000014) count: 19\n   Export start=0x00000059 end=0x0000018c (size=0x00000133) count: 19\n     Code start=0x0000018f end=0x0000029d (size=0x0000010e) count: 19\n",
      "details": "\nlocal_get.0.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nType[10]:\n - type[0] () -> i32\n - type[1] () -> i64\n - type[2] () -> f32\n - type[3] () -> f64\n - type[4] (i32) -> i32\n - type[5] (i64) -> i64\n - type[6] (f32) -> f32\n - type[7] (f64) -> f64\n - type[8] (i64, f32, f64, i32, i32) -> nil\n - type[9] (i64, f32, f64, i32, i32) -> f64\nFunction[19]:\n - func[0] sig=0 <type-local-i32>\n - func[1] sig=1 <type-local-i64>\n - func[2] sig=2 <type-local-f32>\n - func[3] sig=3 <type-local-f64>\n - func[4] sig=4 <type-param-i32>\n - func[5] sig=5 <type-param-i64>\n - func[6] sig=6 <type-param-f32>\n - func[7] sig=7 <type-param-f64>\n - func[8] sig=8 <type-mixed>\n - func[9] sig=9 <read>\n - func[10] sig=4 <as-block-value>\n - func[11] sig=4 <as-loop-value>\n - func[12] sig=4 <as-br-value>\n - func[13] sig=4 <as-br_if-value>\n - func[14] sig=4 <as-br_if-value-cond>\n - func[15] sig=4 <as-br_table-value>\n - func[16] sig=4 <as-return-value>\n - func[17] sig=4 <as-if-then>\n - func[18] sig=4 <as-if-else>\nExport[19]:\n - func[0] <type-local-i32> -> \"type-local-i32\"\n - func[1] <type-local-i64> -> \"type-local-i64\"\n - func[2] <type-local-f32> -> \"type-local-f32\"\n - func[3] <type-local-f64> -> \"type-local-f64\"\n - func[4] <type-param-i32> -> \"type-param-i32\"\n - func[5] <type-param-i64> -> \"type-param-i64\"\n - func[6] <type-param-f32> -> \"type-param-f32\"\n - func[7] <type-param-f64> -> \"type-param-f64\"\n - func[8] <type-mixed> -> \"type-mixed\"\n - func[9] <read> -> \"read\"\n - func[10] <as-block-value> -> \"as-block-value\"\n - func[11] <as-loop-value> -> \"as-loop-value\"\n - func[12] <as-br-value> -> \"as-br-value\"\n - func[13] <as-br_if-value> -> \"as-br_if-value\"\n - func[14] <as-br_if-value-cond> -> \"as-br_if-value-cond\"\n - func[15] <as-br_table-value> -> \"as-br_table-value\"\n - func[16] <as-return-value> -> \"as-return-value\"\n - func[17] <as-if-then> -> \"as-if-then\"\n - func[18] <as-if-else> -> \"as-if-else\"\nCode[19]:\n - func[0] size=6 <type-local-i32>\n - func[1] size=6 <type-local-i64>\n - func[2] size=6 <type-local-f32>\n - func[3] size=6 <type-local-f64>\n - func[4] size=4 <type-param-i32>\n - func[5] size=4 <type-param-i64>\n - func[6] size=4 <type-param-f32>\n - func[7] size=4 <type-param-f64>\n - func[8] size=44 <type-mixed>\n - func[9] size=63 <read>\n - func[10] size=7 <as-block-value>\n - func[11] size=7 <as-loop-value>\n - func[12] size=9 <as-br-value>\n - func[13] size=11 <as-br_if-value>\n - func[14] size=11 <as-br_if-value-cond>\n - func[15] size=29 <as-br_table-value>\n - func[16] size=5 <as-return-value>\n - func[17] size=12 <as-if-then>\n - func[18] size=12 <as-if-else>\n",
      "disassemble": "\nlocal_get.0.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n000191 func[0] <type-local-i32>:\n 000192: 01 7f                      | local[0] type=i32\n 000194: 20 00                      | local.get 0\n 000196: 0b                         | end\n000198 func[1] <type-local-i64>:\n 000199: 01 7e                      | local[0] type=i64\n 00019b: 20 00                      | local.get 0\n 00019d: 0b                         | end\n00019f func[2] <type-local-f32>:\n 0001a0: 01 7d                      | local[0] type=f32\n 0001a2: 20 00                      | local.get 0\n 0001a4: 0b                         | end\n0001a6 func[3] <type-local-f64>:\n 0001a7: 01 7c                      | local[0] type=f64\n 0001a9: 20 00                      | local.get 0\n 0001ab: 0b                         | end\n0001ad func[4] <type-param-i32>:\n 0001ae: 20 00                      | local.get 0\n 0001b0: 0b                         | end\n0001b2 func[5] <type-param-i64>:\n 0001b3: 20 00                      | local.get 0\n 0001b5: 0b                         | end\n0001b7 func[6] <type-param-f32>:\n 0001b8: 20 00                      | local.get 0\n 0001ba: 0b                         | end\n0001bc func[7] <type-param-f64>:\n 0001bd: 20 00                      | local.get 0\n 0001bf: 0b                         | end\n0001c1 func[8] <type-mixed>:\n 0001c2: 01 7d                      | local[0] type=f32\n 0001c4: 02 7e                      | local[1..2] type=i64\n 0001c6: 01 7c                      | local[3] type=f64\n 0001c8: 20 00                      | local.get 0\n 0001ca: 50                         | i64.eqz\n 0001cb: 1a                         | drop\n 0001cc: 20 01                      | local.get 1\n 0001ce: 8c                         | f32.neg\n 0001cf: 1a                         | drop\n 0001d0: 20 02                      | local.get 2\n 0001d2: 9a                         | f64.neg\n 0001d3: 1a                         | drop\n 0001d4: 20 03                      | local.get 3\n 0001d6: 45                         | i32.eqz\n 0001d7: 1a                         | drop\n 0001d8: 20 04                      | local.get 4\n 0001da: 45                         | i32.eqz\n 0001db: 1a                         | drop\n 0001dc: 20 05                      | local.get 5\n 0001de: 8c                         | f32.neg\n 0001df: 1a                         | drop\n 0001e0: 20 06                      | local.get 6\n 0001e2: 50                         | i64.eqz\n 0001e3: 1a                         | drop\n 0001e4: 20 07                      | local.get 7\n 0001e6: 50                         | i64.eqz\n 0001e7: 1a                         | drop\n 0001e8: 20 08                      | local.get 8\n 0001ea: 9a                         | f64.neg\n 0001eb: 1a                         | drop\n 0001ec: 0b                         | end\n0001ee func[9] <read>:\n 0001ef: 01 7d                      | local[0] type=f32\n 0001f1: 02 7e                      | local[1..2] type=i64\n 0001f3: 01 7c                      | local[3] type=f64\n 0001f5: 43 00 00 b0 40             | f32.const 0x1.6p+2\n 0001fa: 21 05                      | local.set 5\n 0001fc: 42 06                      | i64.const 6\n 0001fe: 21 06                      | local.set 6\n 000200: 44 00 00 00 00 00 00 20 40 | f64.const 0x1p+3\n 000209: 21 08                      | local.set 8\n 00020b: 20 00                      | local.get 0\n 00020d: ba                         | f64.convert_i64_u\n 00020e: 20 01                      | local.get 1\n 000210: bb                         | f64.promote_f32\n 000211: 20 02                      | local.get 2\n 000213: 20 03                      | local.get 3\n 000215: b8                         | f64.convert_i32_u\n 000216: 20 04                      | local.get 4\n 000218: b7                         | f64.convert_i32_s\n 000219: 20 05                      | local.get 5\n 00021b: bb                         | f64.promote_f32\n 00021c: 20 06                      | local.get 6\n 00021e: ba                         | f64.convert_i64_u\n 00021f: 20 07                      | local.get 7\n 000221: ba                         | f64.convert_i64_u\n 000222: 20 08                      | local.get 8\n 000224: a0                         | f64.add\n 000225: a0                         | f64.add\n 000226: a0                         | f64.add\n 000227: a0                         | f64.add\n 000228: a0                         | f64.add\n 000229: a0                         | f64.add\n 00022a: a0                         | f64.add\n 00022b: a0                         | f64.add\n 00022c: 0b                         | end\n00022e func[10] <as-block-value>:\n 00022f: 02 7f                      | block i32\n 000231: 20 00                      |   local.get 0\n 000233: 0b                         | end\n 000234: 0b                         | end\n000236 func[11] <as-loop-value>:\n 000237: 03 7f                      | loop i32\n 000239: 20 00                      |   local.get 0\n 00023b: 0b                         | end\n 00023c: 0b                         | end\n00023e func[12] <as-br-value>:\n 00023f: 02 7f                      | block i32\n 000241: 20 00                      |   local.get 0\n 000243: 0c 00                      |   br 0\n 000245: 0b                         | end\n 000246: 0b                         | end\n000248 func[13] <as-br_if-value>:\n 000249: 02 7f                      | block i32\n 00024b: 20 00                      |   local.get 0\n 00024d: 41 01                      |   i32.const 1\n 00024f: 0d 00                      |   br_if 0\n 000251: 0b                         | end\n 000252: 0b                         | end\n000254 func[14] <as-br_if-value-cond>:\n 000255: 02 7f                      | block i32\n 000257: 20 00                      |   local.get 0\n 000259: 20 00                      |   local.get 0\n 00025b: 0d 00                      |   br_if 0\n 00025d: 0b                         | end\n 00025e: 0b                         | end\n000260 func[15] <as-br_table-value>:\n 000261: 02 40                      | block\n 000263: 02 40                      |   block\n 000265: 02 40                      |     block\n 000267: 20 00                      |       local.get 0\n 000269: 0e 02 00 01 02             |       br_table 0 1 2\n 00026e: 41 00                      |       i32.const 0\n 000270: 0f                         |       return\n 000271: 0b                         |     end\n 000272: 41 01                      |     i32.const 1\n 000274: 0f                         |     return\n 000275: 0b                         |   end\n 000276: 41 02                      |   i32.const 2\n 000278: 0f                         |   return\n 000279: 0b                         | end\n 00027a: 41 03                      | i32.const 3\n 00027c: 0b                         | end\n00027e func[16] <as-return-value>:\n 00027f: 20 00                      | local.get 0\n 000281: 0f                         | return\n 000282: 0b                         | end\n000284 func[17] <as-if-then>:\n 000285: 20 00                      | local.get 0\n 000287: 04 7f                      | if i32\n 000289: 20 00                      |   local.get 0\n 00028b: 05                         | else\n 00028c: 41 00                      |   i32.const 0\n 00028e: 0b                         | end\n 00028f: 0b                         | end\n000291 func[18] <as-if-else>:\n 000292: 20 00                      | local.get 0\n 000294: 04 7f                      | if i32\n 000296: 41 01                      |   i32.const 1\n 000298: 05                         | else\n 000299: 20 00                      |   local.get 0\n 00029b: 0b                         | end\n 00029c: 0b                         | end\n"
    }
  }
}
