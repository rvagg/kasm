{
  "bin": {
    "unwind.0.wasm": "AGFzbQEAAAABCAJgAABgAAF/AzIxAAABAAEAAQEAAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQeUCjEaZnVuYy11bndpbmQtYnktdW5yZWFjaGFibGUAABFmdW5jLXVud2luZC1ieS1icgABF2Z1bmMtdW53aW5kLWJ5LWJyLXZhbHVlAAIUZnVuYy11bndpbmQtYnktYnJfaWYAAxpmdW5jLXVud2luZC1ieS1icl9pZi12YWx1ZQAEF2Z1bmMtdW53aW5kLWJ5LWJyX3RhYmxlAAUdZnVuYy11bndpbmQtYnktYnJfdGFibGUtdmFsdWUABhVmdW5jLXVud2luZC1ieS1yZXR1cm4ABxtibG9jay11bndpbmQtYnktdW5yZWFjaGFibGUACBJibG9jay11bndpbmQtYnktYnIACRhibG9jay11bndpbmQtYnktYnItdmFsdWUAChVibG9jay11bndpbmQtYnktYnJfaWYACxtibG9jay11bndpbmQtYnktYnJfaWYtdmFsdWUADBhibG9jay11bndpbmQtYnktYnJfdGFibGUADR5ibG9jay11bndpbmQtYnktYnJfdGFibGUtdmFsdWUADhZibG9jay11bndpbmQtYnktcmV0dXJuAA8iYmxvY2stbmVzdGVkLXVud2luZC1ieS11bnJlYWNoYWJsZQAQGWJsb2NrLW5lc3RlZC11bndpbmQtYnktYnIAER9ibG9jay1uZXN0ZWQtdW53aW5kLWJ5LWJyLXZhbHVlABIcYmxvY2stbmVzdGVkLXVud2luZC1ieS1icl9pZgATImJsb2NrLW5lc3RlZC11bndpbmQtYnktYnJfaWYtdmFsdWUAFB9ibG9jay1uZXN0ZWQtdW53aW5kLWJ5LWJyX3RhYmxlABUlYmxvY2stbmVzdGVkLXVud2luZC1ieS1icl90YWJsZS12YWx1ZQAWHWJsb2NrLW5lc3RlZC11bndpbmQtYnktcmV0dXJuABcXdW5hcnktYWZ0ZXItdW5yZWFjaGFibGUAGA51bmFyeS1hZnRlci1icgAZEXVuYXJ5LWFmdGVyLWJyX2lmABoUdW5hcnktYWZ0ZXItYnJfdGFibGUAGxJ1bmFyeS1hZnRlci1yZXR1cm4AHBhiaW5hcnktYWZ0ZXItdW5yZWFjaGFibGUAHQ9iaW5hcnktYWZ0ZXItYnIAHhJiaW5hcnktYWZ0ZXItYnJfaWYAHxViaW5hcnktYWZ0ZXItYnJfdGFibGUAIBNiaW5hcnktYWZ0ZXItcmV0dXJuACEYc2VsZWN0LWFmdGVyLXVucmVhY2hhYmxlACIPc2VsZWN0LWFmdGVyLWJyACMSc2VsZWN0LWFmdGVyLWJyX2lmACQVc2VsZWN0LWFmdGVyLWJyX3RhYmxlACUTc2VsZWN0LWFmdGVyLXJldHVybgAmHWJsb2NrLXZhbHVlLWFmdGVyLXVucmVhY2hhYmxlACcUYmxvY2stdmFsdWUtYWZ0ZXItYnIAKBdibG9jay12YWx1ZS1hZnRlci1icl9pZgApGmJsb2NrLXZhbHVlLWFmdGVyLWJyX3RhYmxlACoYYmxvY2stdmFsdWUtYWZ0ZXItcmV0dXJuACscbG9vcC12YWx1ZS1hZnRlci11bnJlYWNoYWJsZQAsE2xvb3AtdmFsdWUtYWZ0ZXItYnIALRZsb29wLXZhbHVlLWFmdGVyLWJyX2lmAC4ZbG9vcC12YWx1ZS1hZnRlci1icl90YWJsZQAvF2xvb3AtdmFsdWUtYWZ0ZXItcmV0dXJuADAKvAYxBwBBA0IBAAsIAEEDQgEMAAsKAEEDQgFBCQwACwwAQQNCAUEBDQAaGgsOAEEDQgFBCUEBDQAaGgsLAEEDQgFBAA4AAAsNAEEDQgFBCUEADgAACwkAQQNCAUEJDwsKAAJAQQNCAQALCw0AAkBBA0IBDAALQQkLDQACf0EDQgFBCQwACwsRAAJAQQNCAUEBDQAaGgtBCQsRAAJ/QQNCAUEJQQENABoaCwsQAAJAQQNCAUEADgAAC0EJCxAAAn9BA0IBQQlBAA4AAAsLDAACf0EDQgFBCQ8LCw0AAn9BAwJAQgEACwsLEQACQEEDAkBCAQwBCxoLQQkLEAACf0EDAkBCAUEJDAELCwsUAAJAQQMCQEIBQQENARoLGgtBCQsUAAJ/QQMCQEIBQQlBAQ0BGhoLCwsUAAJAQQMCQEIBQQEOAAELGgtBCQsTAAJ/QQMCQEIBQQlBAQ4AAQsLCw8AAn9BAwJAQgFBCQ8LCwsJAEMAAAAAAFALDwACf0MAAAAAQQkMAFALCw8AAn9CAEEJQQENABpQCwsTAAJ/QwAAAABBCUEADgEAAFALCwsAQwAAAABBCQ9QCxIAQwAAAABEAAAAAAAA8D8AUQsYAAJ/QwAAAABEAAAAAAAA8D9BCQwAUQsLEQACf0IAQgFBCUEBDQAaUQsLGwACf0MAAAAARAAAAAAAAPA/QQlBAA4AAFELCxQAQwAAAABEAAAAAAAA8D9BCQ9RCxQAQwAAAABEAAAAAAAA8D9CAAAbCxoAAn9DAAAAAEQAAAAAAADwP0IAQQkMABsLCxMAAn9BAEEBQQBBCUEBDQAaGwsLHQACf0MAAAAARAAAAAAAAPA/QgBBCUEADgAAGwsLFgBDAAAAAEQAAAAAAADwP0IBQQkPGwsLAAJ/QwAAAAAACwsOAAJ/QwAAAABBCQwACwsOAAJ/QQBBCUEBDQAaCwsSAAJ/QwAAAABBCUEADgEAAAsLDQACf0MAAAAAQQkPCwsLAAN/QwAAAAAACwsRAAJ/A39DAAAAAEEJDAELCwsRAAJ/A39BAEEJQQENARoLCwsVAAJ/A39DAAAAAEEJQQAOAQEBCwsLDQADf0MAAAAAQQkPCws="
  },
  "spec": {"source_filename": "/workspace/wasm-spec/test/core/unwind.wast",
 "commands": [
  {"type": "module", "line": 3, "filename": "unwind.0.wasm"}, 
  {"type": "assert_trap", "line": 212, "action": {"type": "invoke", "field": "func-unwind-by-unreachable", "args": []}, "text": "unreachable", "expected": []}, 
  {"type": "assert_return", "line": 213, "action": {"type": "invoke", "field": "func-unwind-by-br", "args": []}, "expected": []}, 
  {"type": "assert_return", "line": 214, "action": {"type": "invoke", "field": "func-unwind-by-br-value", "args": []}, "expected": [{"type": "i32", "value": "9"}]}, 
  {"type": "assert_return", "line": 215, "action": {"type": "invoke", "field": "func-unwind-by-br_if", "args": []}, "expected": []}, 
  {"type": "assert_return", "line": 216, "action": {"type": "invoke", "field": "func-unwind-by-br_if-value", "args": []}, "expected": [{"type": "i32", "value": "9"}]}, 
  {"type": "assert_return", "line": 217, "action": {"type": "invoke", "field": "func-unwind-by-br_table", "args": []}, "expected": []}, 
  {"type": "assert_return", "line": 218, "action": {"type": "invoke", "field": "func-unwind-by-br_table-value", "args": []}, "expected": [{"type": "i32", "value": "9"}]}, 
  {"type": "assert_return", "line": 219, "action": {"type": "invoke", "field": "func-unwind-by-return", "args": []}, "expected": [{"type": "i32", "value": "9"}]}, 
  {"type": "assert_trap", "line": 221, "action": {"type": "invoke", "field": "block-unwind-by-unreachable", "args": []}, "text": "unreachable", "expected": []}, 
  {"type": "assert_return", "line": 222, "action": {"type": "invoke", "field": "block-unwind-by-br", "args": []}, "expected": [{"type": "i32", "value": "9"}]}, 
  {"type": "assert_return", "line": 223, "action": {"type": "invoke", "field": "block-unwind-by-br-value", "args": []}, "expected": [{"type": "i32", "value": "9"}]}, 
  {"type": "assert_return", "line": 224, "action": {"type": "invoke", "field": "block-unwind-by-br_if", "args": []}, "expected": [{"type": "i32", "value": "9"}]}, 
  {"type": "assert_return", "line": 225, "action": {"type": "invoke", "field": "block-unwind-by-br_if-value", "args": []}, "expected": [{"type": "i32", "value": "9"}]}, 
  {"type": "assert_return", "line": 226, "action": {"type": "invoke", "field": "block-unwind-by-br_table", "args": []}, "expected": [{"type": "i32", "value": "9"}]}, 
  {"type": "assert_return", "line": 227, "action": {"type": "invoke", "field": "block-unwind-by-br_table-value", "args": []}, "expected": [{"type": "i32", "value": "9"}]}, 
  {"type": "assert_return", "line": 228, "action": {"type": "invoke", "field": "block-unwind-by-return", "args": []}, "expected": [{"type": "i32", "value": "9"}]}, 
  {"type": "assert_trap", "line": 230, "action": {"type": "invoke", "field": "block-nested-unwind-by-unreachable", "args": []}, "text": "unreachable", "expected": [{"type": "i32"}]}, 
  {"type": "assert_return", "line": 231, "action": {"type": "invoke", "field": "block-nested-unwind-by-br", "args": []}, "expected": [{"type": "i32", "value": "9"}]}, 
  {"type": "assert_return", "line": 232, "action": {"type": "invoke", "field": "block-nested-unwind-by-br-value", "args": []}, "expected": [{"type": "i32", "value": "9"}]}, 
  {"type": "assert_return", "line": 233, "action": {"type": "invoke", "field": "block-nested-unwind-by-br_if", "args": []}, "expected": [{"type": "i32", "value": "9"}]}, 
  {"type": "assert_return", "line": 234, "action": {"type": "invoke", "field": "block-nested-unwind-by-br_if-value", "args": []}, "expected": [{"type": "i32", "value": "9"}]}, 
  {"type": "assert_return", "line": 235, "action": {"type": "invoke", "field": "block-nested-unwind-by-br_table", "args": []}, "expected": [{"type": "i32", "value": "9"}]}, 
  {"type": "assert_return", "line": 236, "action": {"type": "invoke", "field": "block-nested-unwind-by-br_table-value", "args": []}, "expected": [{"type": "i32", "value": "9"}]}, 
  {"type": "assert_return", "line": 237, "action": {"type": "invoke", "field": "block-nested-unwind-by-return", "args": []}, "expected": [{"type": "i32", "value": "9"}]}, 
  {"type": "assert_trap", "line": 239, "action": {"type": "invoke", "field": "unary-after-unreachable", "args": []}, "text": "unreachable", "expected": [{"type": "i32"}]}, 
  {"type": "assert_return", "line": 240, "action": {"type": "invoke", "field": "unary-after-br", "args": []}, "expected": [{"type": "i32", "value": "9"}]}, 
  {"type": "assert_return", "line": 241, "action": {"type": "invoke", "field": "unary-after-br_if", "args": []}, "expected": [{"type": "i32", "value": "9"}]}, 
  {"type": "assert_return", "line": 242, "action": {"type": "invoke", "field": "unary-after-br_table", "args": []}, "expected": [{"type": "i32", "value": "9"}]}, 
  {"type": "assert_return", "line": 243, "action": {"type": "invoke", "field": "unary-after-return", "args": []}, "expected": [{"type": "i32", "value": "9"}]}, 
  {"type": "assert_trap", "line": 245, "action": {"type": "invoke", "field": "binary-after-unreachable", "args": []}, "text": "unreachable", "expected": [{"type": "i32"}]}, 
  {"type": "assert_return", "line": 246, "action": {"type": "invoke", "field": "binary-after-br", "args": []}, "expected": [{"type": "i32", "value": "9"}]}, 
  {"type": "assert_return", "line": 247, "action": {"type": "invoke", "field": "binary-after-br_if", "args": []}, "expected": [{"type": "i32", "value": "9"}]}, 
  {"type": "assert_return", "line": 248, "action": {"type": "invoke", "field": "binary-after-br_table", "args": []}, "expected": [{"type": "i32", "value": "9"}]}, 
  {"type": "assert_return", "line": 249, "action": {"type": "invoke", "field": "binary-after-return", "args": []}, "expected": [{"type": "i32", "value": "9"}]}, 
  {"type": "assert_trap", "line": 251, "action": {"type": "invoke", "field": "select-after-unreachable", "args": []}, "text": "unreachable", "expected": [{"type": "i32"}]}, 
  {"type": "assert_return", "line": 252, "action": {"type": "invoke", "field": "select-after-br", "args": []}, "expected": [{"type": "i32", "value": "9"}]}, 
  {"type": "assert_return", "line": 253, "action": {"type": "invoke", "field": "select-after-br_if", "args": []}, "expected": [{"type": "i32", "value": "9"}]}, 
  {"type": "assert_return", "line": 254, "action": {"type": "invoke", "field": "select-after-br_table", "args": []}, "expected": [{"type": "i32", "value": "9"}]}, 
  {"type": "assert_return", "line": 255, "action": {"type": "invoke", "field": "select-after-return", "args": []}, "expected": [{"type": "i32", "value": "9"}]}, 
  {"type": "assert_trap", "line": 257, "action": {"type": "invoke", "field": "block-value-after-unreachable", "args": []}, "text": "unreachable", "expected": [{"type": "i32"}]}, 
  {"type": "assert_return", "line": 258, "action": {"type": "invoke", "field": "block-value-after-br", "args": []}, "expected": [{"type": "i32", "value": "9"}]}, 
  {"type": "assert_return", "line": 259, "action": {"type": "invoke", "field": "block-value-after-br_if", "args": []}, "expected": [{"type": "i32", "value": "9"}]}, 
  {"type": "assert_return", "line": 260, "action": {"type": "invoke", "field": "block-value-after-br_table", "args": []}, "expected": [{"type": "i32", "value": "9"}]}, 
  {"type": "assert_return", "line": 261, "action": {"type": "invoke", "field": "block-value-after-return", "args": []}, "expected": [{"type": "i32", "value": "9"}]}, 
  {"type": "assert_trap", "line": 263, "action": {"type": "invoke", "field": "loop-value-after-unreachable", "args": []}, "text": "unreachable", "expected": [{"type": "i32"}]}, 
  {"type": "assert_return", "line": 264, "action": {"type": "invoke", "field": "loop-value-after-br", "args": []}, "expected": [{"type": "i32", "value": "9"}]}, 
  {"type": "assert_return", "line": 265, "action": {"type": "invoke", "field": "loop-value-after-br_if", "args": []}, "expected": [{"type": "i32", "value": "9"}]}, 
  {"type": "assert_return", "line": 266, "action": {"type": "invoke", "field": "loop-value-after-br_table", "args": []}, "expected": [{"type": "i32", "value": "9"}]}, 
  {"type": "assert_return", "line": 267, "action": {"type": "invoke", "field": "loop-value-after-return", "args": []}, "expected": [{"type": "i32", "value": "9"}]}]},
  "code": [
    "(module \n  (func (export \"func-unwind-by-unreachable\") (i32.const 3) (i64.const 1) (unreachable) )\n  (func (export \"func-unwind-by-br\") (i32.const 3) (i64.const 1) (br 0) )\n  (func (export \"func-unwind-by-br-value\") (result i32) (i32.const 3) (i64.const 1) (br 0 (i32.const 9)) )\n  (func (export \"func-unwind-by-br_if\") (i32.const 3) (i64.const 1) (drop (drop (br_if 0 (i32.const 1)))) )\n  (func (export \"func-unwind-by-br_if-value\") (result i32) (i32.const 3) (i64.const 1) (drop (drop (br_if 0 (i32.const 9) (i32.const 1)))) )\n  (func (export \"func-unwind-by-br_table\") (i32.const 3) (i64.const 1) (br_table 0 (i32.const 0)) )\n  (func (export \"func-unwind-by-br_table-value\") (result i32) (i32.const 3) (i64.const 1) (br_table 0 (i32.const 9) (i32.const 0)) )\n  (func (export \"func-unwind-by-return\") (result i32) (i32.const 3) (i64.const 1) (return (i32.const 9)) )\n  (func (export \"block-unwind-by-unreachable\") (block (i32.const 3) (i64.const 1) (unreachable)) )\n  (func (export \"block-unwind-by-br\") (result i32) (block (i32.const 3) (i64.const 1) (br 0)) (i32.const 9) )\n  (func (export \"block-unwind-by-br-value\") (result i32) (block (result i32) (i32.const 3) (i64.const 1) (br 0 (i32.const 9))) )\n  (func (export \"block-unwind-by-br_if\") (result i32) (block (i32.const 3) (i64.const 1) (drop (drop (br_if 0 (i32.const 1))))) (i32.const 9) )\n  (func (export \"block-unwind-by-br_if-value\") (result i32) (block (result i32) (i32.const 3) (i64.const 1) (drop (drop (br_if 0 (i32.const 9) (i32.const 1)))) ) )\n  (func (export \"block-unwind-by-br_table\") (result i32) (block (i32.const 3) (i64.const 1) (br_table 0 (i32.const 0))) (i32.const 9) )\n  (func (export \"block-unwind-by-br_table-value\") (result i32) (block (result i32) (i32.const 3) (i64.const 1) (br_table 0 (i32.const 9) (i32.const 0)) ) )\n  (func (export \"block-unwind-by-return\") (result i32) (block (result i32) (i32.const 3) (i64.const 1) (return (i32.const 9))) )\n  (func (export \"block-nested-unwind-by-unreachable\") (result i32) (block (result i32) (i32.const 3) (block (i64.const 1) (unreachable))) )\n  (func (export \"block-nested-unwind-by-br\") (result i32) (block (i32.const 3) (block (i64.const 1) (br 1)) (drop)) (i32.const 9) )\n  (func (export \"block-nested-unwind-by-br-value\") (result i32) (block (result i32) (i32.const 3) (block (i64.const 1) (br 1 (i32.const 9))) ) )\n  (func (export \"block-nested-unwind-by-br_if\") (result i32) (block (i32.const 3) (block (i64.const 1) (drop (br_if 1 (i32.const 1)))) (drop)) (i32.const 9) )\n  (func (export \"block-nested-unwind-by-br_if-value\") (result i32) (block (result i32) (i32.const 3) (block (i64.const 1) (drop (drop (br_if 1 (i32.const 9) (i32.const 1))))) ) )\n  (func (export \"block-nested-unwind-by-br_table\") (result i32) (block (i32.const 3) (block (i64.const 1) (br_table 1 (i32.const 1))) (drop) ) (i32.const 9) )\n  (func (export \"block-nested-unwind-by-br_table-value\") (result i32) (block (result i32) (i32.const 3) (block (i64.const 1) (br_table 1 (i32.const 9) (i32.const 1))) ) )\n  (func (export \"block-nested-unwind-by-return\") (result i32) (block (result i32) (i32.const 3) (block (i64.const 1) (return (i32.const 9))) ) )\n  (func (export \"unary-after-unreachable\") (result i32) (f32.const 0) (unreachable) (i64.eqz) )\n  (func (export \"unary-after-br\") (result i32) (block (result i32) (f32.const 0) (br 0 (i32.const 9)) (i64.eqz)) )\n  (func (export \"unary-after-br_if\") (result i32) (block (result i32) (i64.const 0) (drop (br_if 0 (i32.const 9) (i32.const 1))) (i64.eqz) ) )\n  (func (export \"unary-after-br_table\") (result i32) (block (result i32) (f32.const 0) (br_table 0 0 (i32.const 9) (i32.const 0)) (i64.eqz) ) )\n  (func (export \"unary-after-return\") (result i32) (f32.const 0) (return (i32.const 9)) (i64.eqz) )\n  (func (export \"binary-after-unreachable\") (result i32) (f32.const 0) (f64.const 1) (unreachable) (i64.eq) )\n  (func (export \"binary-after-br\") (result i32) (block (result i32) (f32.const 0) (f64.const 1) (br 0 (i32.const 9)) (i64.eq) ) )\n  (func (export \"binary-after-br_if\") (result i32) (block (result i32) (i64.const 0) (i64.const 1) (drop (br_if 0 (i32.const 9) (i32.const 1))) (i64.eq) ) )\n  (func (export \"binary-after-br_table\") (result i32) (block (result i32) (f32.const 0) (f64.const 1) (br_table 0 (i32.const 9) (i32.const 0)) (i64.eq) ) )\n  (func (export \"binary-after-return\") (result i32) (f32.const 0) (f64.const 1) (return (i32.const 9)) (i64.eq) )\n  (func (export \"select-after-unreachable\") (result i32) (f32.const 0) (f64.const 1) (i64.const 0) (unreachable) (select) )\n  (func (export \"select-after-br\") (result i32) (block (result i32) (f32.const 0) (f64.const 1) (i64.const 0) (br 0 (i32.const 9)) (select) ) )\n  (func (export \"select-after-br_if\") (result i32) (block (result i32) (i32.const 0) (i32.const 1) (i32.const 0) (drop (br_if 0 (i32.const 9) (i32.const 1))) (select) ) )\n  (func (export \"select-after-br_table\") (result i32) (block (result i32) (f32.const 0) (f64.const 1) (i64.const 0) (br_table 0 (i32.const 9) (i32.const 0)) (select) ) )\n  (func (export \"select-after-return\") (result i32) (f32.const 0) (f64.const 1) (i64.const 1) (return (i32.const 9)) (select) )\n  (func (export \"block-value-after-unreachable\") (result i32) (block (result i32) (f32.const 0) (unreachable)) )\n  (func (export \"block-value-after-br\") (result i32) (block (result i32) (f32.const 0) (br 0 (i32.const 9))) )\n  (func (export \"block-value-after-br_if\") (result i32) (block (result i32) (i32.const 0) (drop (br_if 0 (i32.const 9) (i32.const 1))) ) )\n  (func (export \"block-value-after-br_table\") (result i32) (block (result i32) (f32.const 0) (br_table 0 0 (i32.const 9) (i32.const 0)) ) )\n  (func (export \"block-value-after-return\") (result i32) (block (result i32) (f32.const 0) (return (i32.const 9))) )\n  (func (export \"loop-value-after-unreachable\") (result i32) (loop (result i32) (f32.const 0) (unreachable)) )\n  (func (export \"loop-value-after-br\") (result i32) (block (result i32) (loop (result i32) (f32.const 0) (br 1 (i32.const 9)))) )\n  (func (export \"loop-value-after-br_if\") (result i32) (block (result i32) (loop (result i32) (i32.const 0) (drop (br_if 1 (i32.const 9) (i32.const 1))) ) ) )\n  (func (export \"loop-value-after-br_table\") (result i32) (block (result i32) (loop (result i32) (f32.const 0) (br_table 1 1 (i32.const 9) (i32.const 0)) ) ) )\n  (func (export \"loop-value-after-return\") (result i32) (loop (result i32) (f32.const 0) (return (i32.const 9))) ))",
    "(assert_trap (invoke \"func-unwind-by-unreachable\") \"unreachable\")",
    "(assert_return (invoke \"func-unwind-by-br\"))",
    "(assert_return (invoke \"func-unwind-by-br-value\") (i32.const 9))",
    "(assert_return (invoke \"func-unwind-by-br_if\"))",
    "(assert_return (invoke \"func-unwind-by-br_if-value\") (i32.const 9))",
    "(assert_return (invoke \"func-unwind-by-br_table\"))",
    "(assert_return (invoke \"func-unwind-by-br_table-value\") (i32.const 9))",
    "(assert_return (invoke \"func-unwind-by-return\") (i32.const 9))",
    "(assert_trap (invoke \"block-unwind-by-unreachable\") \"unreachable\")",
    "(assert_return (invoke \"block-unwind-by-br\") (i32.const 9))",
    "(assert_return (invoke \"block-unwind-by-br-value\") (i32.const 9))",
    "(assert_return (invoke \"block-unwind-by-br_if\") (i32.const 9))",
    "(assert_return (invoke \"block-unwind-by-br_if-value\") (i32.const 9))",
    "(assert_return (invoke \"block-unwind-by-br_table\") (i32.const 9))",
    "(assert_return (invoke \"block-unwind-by-br_table-value\") (i32.const 9))",
    "(assert_return (invoke \"block-unwind-by-return\") (i32.const 9))",
    "(assert_trap (invoke \"block-nested-unwind-by-unreachable\") \"unreachable\")",
    "(assert_return (invoke \"block-nested-unwind-by-br\") (i32.const 9))",
    "(assert_return (invoke \"block-nested-unwind-by-br-value\") (i32.const 9))",
    "(assert_return (invoke \"block-nested-unwind-by-br_if\") (i32.const 9))",
    "(assert_return (invoke \"block-nested-unwind-by-br_if-value\") (i32.const 9))",
    "(assert_return (invoke \"block-nested-unwind-by-br_table\") (i32.const 9))",
    "(assert_return (invoke \"block-nested-unwind-by-br_table-value\") (i32.const 9))",
    "(assert_return (invoke \"block-nested-unwind-by-return\") (i32.const 9))",
    "(assert_trap (invoke \"unary-after-unreachable\") \"unreachable\")",
    "(assert_return (invoke \"unary-after-br\") (i32.const 9))",
    "(assert_return (invoke \"unary-after-br_if\") (i32.const 9))",
    "(assert_return (invoke \"unary-after-br_table\") (i32.const 9))",
    "(assert_return (invoke \"unary-after-return\") (i32.const 9))",
    "(assert_trap (invoke \"binary-after-unreachable\") \"unreachable\")",
    "(assert_return (invoke \"binary-after-br\") (i32.const 9))",
    "(assert_return (invoke \"binary-after-br_if\") (i32.const 9))",
    "(assert_return (invoke \"binary-after-br_table\") (i32.const 9))",
    "(assert_return (invoke \"binary-after-return\") (i32.const 9))",
    "(assert_trap (invoke \"select-after-unreachable\") \"unreachable\")",
    "(assert_return (invoke \"select-after-br\") (i32.const 9))",
    "(assert_return (invoke \"select-after-br_if\") (i32.const 9))",
    "(assert_return (invoke \"select-after-br_table\") (i32.const 9))",
    "(assert_return (invoke \"select-after-return\") (i32.const 9))",
    "(assert_trap (invoke \"block-value-after-unreachable\") \"unreachable\")",
    "(assert_return (invoke \"block-value-after-br\") (i32.const 9))",
    "(assert_return (invoke \"block-value-after-br_if\") (i32.const 9))",
    "(assert_return (invoke \"block-value-after-br_table\") (i32.const 9))",
    "(assert_return (invoke \"block-value-after-return\") (i32.const 9))",
    "(assert_trap (invoke \"loop-value-after-unreachable\") \"unreachable\")",
    "(assert_return (invoke \"loop-value-after-br\") (i32.const 9))",
    "(assert_return (invoke \"loop-value-after-br_if\") (i32.const 9))",
    "(assert_return (invoke \"loop-value-after-br_table\") (i32.const 9))",
    "(assert_return (invoke \"loop-value-after-return\") (i32.const 9))"
  ],
  "dump": {
    "unwind.0.wasm": {
      "header": "\nunwind.0.wasm:\tfile format wasm 0x1\n\nSections:\n\n     Type start=0x0000000a end=0x00000012 (size=0x00000008) count: 2\n Function start=0x00000014 end=0x00000046 (size=0x00000032) count: 49\n   Export start=0x00000049 end=0x0000055d (size=0x00000514) count: 49\n     Code start=0x00000560 end=0x0000089c (size=0x0000033c) count: 49\n",
      "details": "\nunwind.0.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nType[2]:\n - type[0] () -> nil\n - type[1] () -> i32\nFunction[49]:\n - func[0] sig=0 <func-unwind-by-unreachable>\n - func[1] sig=0 <func-unwind-by-br>\n - func[2] sig=1 <func-unwind-by-br-value>\n - func[3] sig=0 <func-unwind-by-br_if>\n - func[4] sig=1 <func-unwind-by-br_if-value>\n - func[5] sig=0 <func-unwind-by-br_table>\n - func[6] sig=1 <func-unwind-by-br_table-value>\n - func[7] sig=1 <func-unwind-by-return>\n - func[8] sig=0 <block-unwind-by-unreachable>\n - func[9] sig=1 <block-unwind-by-br>\n - func[10] sig=1 <block-unwind-by-br-value>\n - func[11] sig=1 <block-unwind-by-br_if>\n - func[12] sig=1 <block-unwind-by-br_if-value>\n - func[13] sig=1 <block-unwind-by-br_table>\n - func[14] sig=1 <block-unwind-by-br_table-value>\n - func[15] sig=1 <block-unwind-by-return>\n - func[16] sig=1 <block-nested-unwind-by-unreachable>\n - func[17] sig=1 <block-nested-unwind-by-br>\n - func[18] sig=1 <block-nested-unwind-by-br-value>\n - func[19] sig=1 <block-nested-unwind-by-br_if>\n - func[20] sig=1 <block-nested-unwind-by-br_if-value>\n - func[21] sig=1 <block-nested-unwind-by-br_table>\n - func[22] sig=1 <block-nested-unwind-by-br_table-value>\n - func[23] sig=1 <block-nested-unwind-by-return>\n - func[24] sig=1 <unary-after-unreachable>\n - func[25] sig=1 <unary-after-br>\n - func[26] sig=1 <unary-after-br_if>\n - func[27] sig=1 <unary-after-br_table>\n - func[28] sig=1 <unary-after-return>\n - func[29] sig=1 <binary-after-unreachable>\n - func[30] sig=1 <binary-after-br>\n - func[31] sig=1 <binary-after-br_if>\n - func[32] sig=1 <binary-after-br_table>\n - func[33] sig=1 <binary-after-return>\n - func[34] sig=1 <select-after-unreachable>\n - func[35] sig=1 <select-after-br>\n - func[36] sig=1 <select-after-br_if>\n - func[37] sig=1 <select-after-br_table>\n - func[38] sig=1 <select-after-return>\n - func[39] sig=1 <block-value-after-unreachable>\n - func[40] sig=1 <block-value-after-br>\n - func[41] sig=1 <block-value-after-br_if>\n - func[42] sig=1 <block-value-after-br_table>\n - func[43] sig=1 <block-value-after-return>\n - func[44] sig=1 <loop-value-after-unreachable>\n - func[45] sig=1 <loop-value-after-br>\n - func[46] sig=1 <loop-value-after-br_if>\n - func[47] sig=1 <loop-value-after-br_table>\n - func[48] sig=1 <loop-value-after-return>\nExport[49]:\n - func[0] <func-unwind-by-unreachable> -> \"func-unwind-by-unreachable\"\n - func[1] <func-unwind-by-br> -> \"func-unwind-by-br\"\n - func[2] <func-unwind-by-br-value> -> \"func-unwind-by-br-value\"\n - func[3] <func-unwind-by-br_if> -> \"func-unwind-by-br_if\"\n - func[4] <func-unwind-by-br_if-value> -> \"func-unwind-by-br_if-value\"\n - func[5] <func-unwind-by-br_table> -> \"func-unwind-by-br_table\"\n - func[6] <func-unwind-by-br_table-value> -> \"func-unwind-by-br_table-value\"\n - func[7] <func-unwind-by-return> -> \"func-unwind-by-return\"\n - func[8] <block-unwind-by-unreachable> -> \"block-unwind-by-unreachable\"\n - func[9] <block-unwind-by-br> -> \"block-unwind-by-br\"\n - func[10] <block-unwind-by-br-value> -> \"block-unwind-by-br-value\"\n - func[11] <block-unwind-by-br_if> -> \"block-unwind-by-br_if\"\n - func[12] <block-unwind-by-br_if-value> -> \"block-unwind-by-br_if-value\"\n - func[13] <block-unwind-by-br_table> -> \"block-unwind-by-br_table\"\n - func[14] <block-unwind-by-br_table-value> -> \"block-unwind-by-br_table-value\"\n - func[15] <block-unwind-by-return> -> \"block-unwind-by-return\"\n - func[16] <block-nested-unwind-by-unreachable> -> \"block-nested-unwind-by-unreachable\"\n - func[17] <block-nested-unwind-by-br> -> \"block-nested-unwind-by-br\"\n - func[18] <block-nested-unwind-by-br-value> -> \"block-nested-unwind-by-br-value\"\n - func[19] <block-nested-unwind-by-br_if> -> \"block-nested-unwind-by-br_if\"\n - func[20] <block-nested-unwind-by-br_if-value> -> \"block-nested-unwind-by-br_if-value\"\n - func[21] <block-nested-unwind-by-br_table> -> \"block-nested-unwind-by-br_table\"\n - func[22] <block-nested-unwind-by-br_table-value> -> \"block-nested-unwind-by-br_table-value\"\n - func[23] <block-nested-unwind-by-return> -> \"block-nested-unwind-by-return\"\n - func[24] <unary-after-unreachable> -> \"unary-after-unreachable\"\n - func[25] <unary-after-br> -> \"unary-after-br\"\n - func[26] <unary-after-br_if> -> \"unary-after-br_if\"\n - func[27] <unary-after-br_table> -> \"unary-after-br_table\"\n - func[28] <unary-after-return> -> \"unary-after-return\"\n - func[29] <binary-after-unreachable> -> \"binary-after-unreachable\"\n - func[30] <binary-after-br> -> \"binary-after-br\"\n - func[31] <binary-after-br_if> -> \"binary-after-br_if\"\n - func[32] <binary-after-br_table> -> \"binary-after-br_table\"\n - func[33] <binary-after-return> -> \"binary-after-return\"\n - func[34] <select-after-unreachable> -> \"select-after-unreachable\"\n - func[35] <select-after-br> -> \"select-after-br\"\n - func[36] <select-after-br_if> -> \"select-after-br_if\"\n - func[37] <select-after-br_table> -> \"select-after-br_table\"\n - func[38] <select-after-return> -> \"select-after-return\"\n - func[39] <block-value-after-unreachable> -> \"block-value-after-unreachable\"\n - func[40] <block-value-after-br> -> \"block-value-after-br\"\n - func[41] <block-value-after-br_if> -> \"block-value-after-br_if\"\n - func[42] <block-value-after-br_table> -> \"block-value-after-br_table\"\n - func[43] <block-value-after-return> -> \"block-value-after-return\"\n - func[44] <loop-value-after-unreachable> -> \"loop-value-after-unreachable\"\n - func[45] <loop-value-after-br> -> \"loop-value-after-br\"\n - func[46] <loop-value-after-br_if> -> \"loop-value-after-br_if\"\n - func[47] <loop-value-after-br_table> -> \"loop-value-after-br_table\"\n - func[48] <loop-value-after-return> -> \"loop-value-after-return\"\nCode[49]:\n - func[0] size=7 <func-unwind-by-unreachable>\n - func[1] size=8 <func-unwind-by-br>\n - func[2] size=10 <func-unwind-by-br-value>\n - func[3] size=12 <func-unwind-by-br_if>\n - func[4] size=14 <func-unwind-by-br_if-value>\n - func[5] size=11 <func-unwind-by-br_table>\n - func[6] size=13 <func-unwind-by-br_table-value>\n - func[7] size=9 <func-unwind-by-return>\n - func[8] size=10 <block-unwind-by-unreachable>\n - func[9] size=13 <block-unwind-by-br>\n - func[10] size=13 <block-unwind-by-br-value>\n - func[11] size=17 <block-unwind-by-br_if>\n - func[12] size=17 <block-unwind-by-br_if-value>\n - func[13] size=16 <block-unwind-by-br_table>\n - func[14] size=16 <block-unwind-by-br_table-value>\n - func[15] size=12 <block-unwind-by-return>\n - func[16] size=13 <block-nested-unwind-by-unreachable>\n - func[17] size=17 <block-nested-unwind-by-br>\n - func[18] size=16 <block-nested-unwind-by-br-value>\n - func[19] size=20 <block-nested-unwind-by-br_if>\n - func[20] size=20 <block-nested-unwind-by-br_if-value>\n - func[21] size=20 <block-nested-unwind-by-br_table>\n - func[22] size=19 <block-nested-unwind-by-br_table-value>\n - func[23] size=15 <block-nested-unwind-by-return>\n - func[24] size=9 <unary-after-unreachable>\n - func[25] size=15 <unary-after-br>\n - func[26] size=15 <unary-after-br_if>\n - func[27] size=19 <unary-after-br_table>\n - func[28] size=11 <unary-after-return>\n - func[29] size=18 <binary-after-unreachable>\n - func[30] size=24 <binary-after-br>\n - func[31] size=17 <binary-after-br_if>\n - func[32] size=27 <binary-after-br_table>\n - func[33] size=20 <binary-after-return>\n - func[34] size=20 <select-after-unreachable>\n - func[35] size=26 <select-after-br>\n - func[36] size=19 <select-after-br_if>\n - func[37] size=29 <select-after-br_table>\n - func[38] size=22 <select-after-return>\n - func[39] size=11 <block-value-after-unreachable>\n - func[40] size=14 <block-value-after-br>\n - func[41] size=14 <block-value-after-br_if>\n - func[42] size=18 <block-value-after-br_table>\n - func[43] size=13 <block-value-after-return>\n - func[44] size=11 <loop-value-after-unreachable>\n - func[45] size=17 <loop-value-after-br>\n - func[46] size=17 <loop-value-after-br_if>\n - func[47] size=21 <loop-value-after-br_table>\n - func[48] size=13 <loop-value-after-return>\n",
      "disassemble": "\nunwind.0.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n000562 func[0] <func-unwind-by-unreachable>:\n 000563: 41 03                      | i32.const 3\n 000565: 42 01                      | i64.const 1\n 000567: 00                         | unreachable\n 000568: 0b                         | end\n00056a func[1] <func-unwind-by-br>:\n 00056b: 41 03                      | i32.const 3\n 00056d: 42 01                      | i64.const 1\n 00056f: 0c 00                      | br 0\n 000571: 0b                         | end\n000573 func[2] <func-unwind-by-br-value>:\n 000574: 41 03                      | i32.const 3\n 000576: 42 01                      | i64.const 1\n 000578: 41 09                      | i32.const 9\n 00057a: 0c 00                      | br 0\n 00057c: 0b                         | end\n00057e func[3] <func-unwind-by-br_if>:\n 00057f: 41 03                      | i32.const 3\n 000581: 42 01                      | i64.const 1\n 000583: 41 01                      | i32.const 1\n 000585: 0d 00                      | br_if 0\n 000587: 1a                         | drop\n 000588: 1a                         | drop\n 000589: 0b                         | end\n00058b func[4] <func-unwind-by-br_if-value>:\n 00058c: 41 03                      | i32.const 3\n 00058e: 42 01                      | i64.const 1\n 000590: 41 09                      | i32.const 9\n 000592: 41 01                      | i32.const 1\n 000594: 0d 00                      | br_if 0\n 000596: 1a                         | drop\n 000597: 1a                         | drop\n 000598: 0b                         | end\n00059a func[5] <func-unwind-by-br_table>:\n 00059b: 41 03                      | i32.const 3\n 00059d: 42 01                      | i64.const 1\n 00059f: 41 00                      | i32.const 0\n 0005a1: 0e 00 00                   | br_table 0\n 0005a4: 0b                         | end\n0005a6 func[6] <func-unwind-by-br_table-value>:\n 0005a7: 41 03                      | i32.const 3\n 0005a9: 42 01                      | i64.const 1\n 0005ab: 41 09                      | i32.const 9\n 0005ad: 41 00                      | i32.const 0\n 0005af: 0e 00 00                   | br_table 0\n 0005b2: 0b                         | end\n0005b4 func[7] <func-unwind-by-return>:\n 0005b5: 41 03                      | i32.const 3\n 0005b7: 42 01                      | i64.const 1\n 0005b9: 41 09                      | i32.const 9\n 0005bb: 0f                         | return\n 0005bc: 0b                         | end\n0005be func[8] <block-unwind-by-unreachable>:\n 0005bf: 02 40                      | block\n 0005c1: 41 03                      |   i32.const 3\n 0005c3: 42 01                      |   i64.const 1\n 0005c5: 00                         |   unreachable\n 0005c6: 0b                         | end\n 0005c7: 0b                         | end\n0005c9 func[9] <block-unwind-by-br>:\n 0005ca: 02 40                      | block\n 0005cc: 41 03                      |   i32.const 3\n 0005ce: 42 01                      |   i64.const 1\n 0005d0: 0c 00                      |   br 0\n 0005d2: 0b                         | end\n 0005d3: 41 09                      | i32.const 9\n 0005d5: 0b                         | end\n0005d7 func[10] <block-unwind-by-br-value>:\n 0005d8: 02 7f                      | block i32\n 0005da: 41 03                      |   i32.const 3\n 0005dc: 42 01                      |   i64.const 1\n 0005de: 41 09                      |   i32.const 9\n 0005e0: 0c 00                      |   br 0\n 0005e2: 0b                         | end\n 0005e3: 0b                         | end\n0005e5 func[11] <block-unwind-by-br_if>:\n 0005e6: 02 40                      | block\n 0005e8: 41 03                      |   i32.const 3\n 0005ea: 42 01                      |   i64.const 1\n 0005ec: 41 01                      |   i32.const 1\n 0005ee: 0d 00                      |   br_if 0\n 0005f0: 1a                         |   drop\n 0005f1: 1a                         |   drop\n 0005f2: 0b                         | end\n 0005f3: 41 09                      | i32.const 9\n 0005f5: 0b                         | end\n0005f7 func[12] <block-unwind-by-br_if-value>:\n 0005f8: 02 7f                      | block i32\n 0005fa: 41 03                      |   i32.const 3\n 0005fc: 42 01                      |   i64.const 1\n 0005fe: 41 09                      |   i32.const 9\n 000600: 41 01                      |   i32.const 1\n 000602: 0d 00                      |   br_if 0\n 000604: 1a                         |   drop\n 000605: 1a                         |   drop\n 000606: 0b                         | end\n 000607: 0b                         | end\n000609 func[13] <block-unwind-by-br_table>:\n 00060a: 02 40                      | block\n 00060c: 41 03                      |   i32.const 3\n 00060e: 42 01                      |   i64.const 1\n 000610: 41 00                      |   i32.const 0\n 000612: 0e 00 00                   |   br_table 0\n 000615: 0b                         | end\n 000616: 41 09                      | i32.const 9\n 000618: 0b                         | end\n00061a func[14] <block-unwind-by-br_table-value>:\n 00061b: 02 7f                      | block i32\n 00061d: 41 03                      |   i32.const 3\n 00061f: 42 01                      |   i64.const 1\n 000621: 41 09                      |   i32.const 9\n 000623: 41 00                      |   i32.const 0\n 000625: 0e 00 00                   |   br_table 0\n 000628: 0b                         | end\n 000629: 0b                         | end\n00062b func[15] <block-unwind-by-return>:\n 00062c: 02 7f                      | block i32\n 00062e: 41 03                      |   i32.const 3\n 000630: 42 01                      |   i64.const 1\n 000632: 41 09                      |   i32.const 9\n 000634: 0f                         |   return\n 000635: 0b                         | end\n 000636: 0b                         | end\n000638 func[16] <block-nested-unwind-by-unreachable>:\n 000639: 02 7f                      | block i32\n 00063b: 41 03                      |   i32.const 3\n 00063d: 02 40                      |   block\n 00063f: 42 01                      |     i64.const 1\n 000641: 00                         |     unreachable\n 000642: 0b                         |   end\n 000643: 0b                         | end\n 000644: 0b                         | end\n000646 func[17] <block-nested-unwind-by-br>:\n 000647: 02 40                      | block\n 000649: 41 03                      |   i32.const 3\n 00064b: 02 40                      |   block\n 00064d: 42 01                      |     i64.const 1\n 00064f: 0c 01                      |     br 1\n 000651: 0b                         |   end\n 000652: 1a                         |   drop\n 000653: 0b                         | end\n 000654: 41 09                      | i32.const 9\n 000656: 0b                         | end\n000658 func[18] <block-nested-unwind-by-br-value>:\n 000659: 02 7f                      | block i32\n 00065b: 41 03                      |   i32.const 3\n 00065d: 02 40                      |   block\n 00065f: 42 01                      |     i64.const 1\n 000661: 41 09                      |     i32.const 9\n 000663: 0c 01                      |     br 1\n 000665: 0b                         |   end\n 000666: 0b                         | end\n 000667: 0b                         | end\n000669 func[19] <block-nested-unwind-by-br_if>:\n 00066a: 02 40                      | block\n 00066c: 41 03                      |   i32.const 3\n 00066e: 02 40                      |   block\n 000670: 42 01                      |     i64.const 1\n 000672: 41 01                      |     i32.const 1\n 000674: 0d 01                      |     br_if 1\n 000676: 1a                         |     drop\n 000677: 0b                         |   end\n 000678: 1a                         |   drop\n 000679: 0b                         | end\n 00067a: 41 09                      | i32.const 9\n 00067c: 0b                         | end\n00067e func[20] <block-nested-unwind-by-br_if-value>:\n 00067f: 02 7f                      | block i32\n 000681: 41 03                      |   i32.const 3\n 000683: 02 40                      |   block\n 000685: 42 01                      |     i64.const 1\n 000687: 41 09                      |     i32.const 9\n 000689: 41 01                      |     i32.const 1\n 00068b: 0d 01                      |     br_if 1\n 00068d: 1a                         |     drop\n 00068e: 1a                         |     drop\n 00068f: 0b                         |   end\n 000690: 0b                         | end\n 000691: 0b                         | end\n000693 func[21] <block-nested-unwind-by-br_table>:\n 000694: 02 40                      | block\n 000696: 41 03                      |   i32.const 3\n 000698: 02 40                      |   block\n 00069a: 42 01                      |     i64.const 1\n 00069c: 41 01                      |     i32.const 1\n 00069e: 0e 00 01                   |     br_table 1\n 0006a1: 0b                         |   end\n 0006a2: 1a                         |   drop\n 0006a3: 0b                         | end\n 0006a4: 41 09                      | i32.const 9\n 0006a6: 0b                         | end\n0006a8 func[22] <block-nested-unwind-by-br_table-value>:\n 0006a9: 02 7f                      | block i32\n 0006ab: 41 03                      |   i32.const 3\n 0006ad: 02 40                      |   block\n 0006af: 42 01                      |     i64.const 1\n 0006b1: 41 09                      |     i32.const 9\n 0006b3: 41 01                      |     i32.const 1\n 0006b5: 0e 00 01                   |     br_table 1\n 0006b8: 0b                         |   end\n 0006b9: 0b                         | end\n 0006ba: 0b                         | end\n0006bc func[23] <block-nested-unwind-by-return>:\n 0006bd: 02 7f                      | block i32\n 0006bf: 41 03                      |   i32.const 3\n 0006c1: 02 40                      |   block\n 0006c3: 42 01                      |     i64.const 1\n 0006c5: 41 09                      |     i32.const 9\n 0006c7: 0f                         |     return\n 0006c8: 0b                         |   end\n 0006c9: 0b                         | end\n 0006ca: 0b                         | end\n0006cc func[24] <unary-after-unreachable>:\n 0006cd: 43 00 00 00 00             | f32.const 0x0p+0\n 0006d2: 00                         | unreachable\n 0006d3: 50                         | i64.eqz\n 0006d4: 0b                         | end\n0006d6 func[25] <unary-after-br>:\n 0006d7: 02 7f                      | block i32\n 0006d9: 43 00 00 00 00             |   f32.const 0x0p+0\n 0006de: 41 09                      |   i32.const 9\n 0006e0: 0c 00                      |   br 0\n 0006e2: 50                         |   i64.eqz\n 0006e3: 0b                         | end\n 0006e4: 0b                         | end\n0006e6 func[26] <unary-after-br_if>:\n 0006e7: 02 7f                      | block i32\n 0006e9: 42 00                      |   i64.const 0\n 0006eb: 41 09                      |   i32.const 9\n 0006ed: 41 01                      |   i32.const 1\n 0006ef: 0d 00                      |   br_if 0\n 0006f1: 1a                         |   drop\n 0006f2: 50                         |   i64.eqz\n 0006f3: 0b                         | end\n 0006f4: 0b                         | end\n0006f6 func[27] <unary-after-br_table>:\n 0006f7: 02 7f                      | block i32\n 0006f9: 43 00 00 00 00             |   f32.const 0x0p+0\n 0006fe: 41 09                      |   i32.const 9\n 000700: 41 00                      |   i32.const 0\n 000702: 0e 01 00 00                |   br_table 0 0\n 000706: 50                         |   i64.eqz\n 000707: 0b                         | end\n 000708: 0b                         | end\n00070a func[28] <unary-after-return>:\n 00070b: 43 00 00 00 00             | f32.const 0x0p+0\n 000710: 41 09                      | i32.const 9\n 000712: 0f                         | return\n 000713: 50                         | i64.eqz\n 000714: 0b                         | end\n000716 func[29] <binary-after-unreachable>:\n 000717: 43 00 00 00 00             | f32.const 0x0p+0\n 00071c: 44 00 00 00 00 00 00 f0 3f | f64.const 0x1p+0\n 000725: 00                         | unreachable\n 000726: 51                         | i64.eq\n 000727: 0b                         | end\n000729 func[30] <binary-after-br>:\n 00072a: 02 7f                      | block i32\n 00072c: 43 00 00 00 00             |   f32.const 0x0p+0\n 000731: 44 00 00 00 00 00 00 f0 3f |   f64.const 0x1p+0\n 00073a: 41 09                      |   i32.const 9\n 00073c: 0c 00                      |   br 0\n 00073e: 51                         |   i64.eq\n 00073f: 0b                         | end\n 000740: 0b                         | end\n000742 func[31] <binary-after-br_if>:\n 000743: 02 7f                      | block i32\n 000745: 42 00                      |   i64.const 0\n 000747: 42 01                      |   i64.const 1\n 000749: 41 09                      |   i32.const 9\n 00074b: 41 01                      |   i32.const 1\n 00074d: 0d 00                      |   br_if 0\n 00074f: 1a                         |   drop\n 000750: 51                         |   i64.eq\n 000751: 0b                         | end\n 000752: 0b                         | end\n000754 func[32] <binary-after-br_table>:\n 000755: 02 7f                      | block i32\n 000757: 43 00 00 00 00             |   f32.const 0x0p+0\n 00075c: 44 00 00 00 00 00 00 f0 3f |   f64.const 0x1p+0\n 000765: 41 09                      |   i32.const 9\n 000767: 41 00                      |   i32.const 0\n 000769: 0e 00 00                   |   br_table 0\n 00076c: 51                         |   i64.eq\n 00076d: 0b                         | end\n 00076e: 0b                         | end\n000770 func[33] <binary-after-return>:\n 000771: 43 00 00 00 00             | f32.const 0x0p+0\n 000776: 44 00 00 00 00 00 00 f0 3f | f64.const 0x1p+0\n 00077f: 41 09                      | i32.const 9\n 000781: 0f                         | return\n 000782: 51                         | i64.eq\n 000783: 0b                         | end\n000785 func[34] <select-after-unreachable>:\n 000786: 43 00 00 00 00             | f32.const 0x0p+0\n 00078b: 44 00 00 00 00 00 00 f0 3f | f64.const 0x1p+0\n 000794: 42 00                      | i64.const 0\n 000796: 00                         | unreachable\n 000797: 1b                         | select\n 000798: 0b                         | end\n00079a func[35] <select-after-br>:\n 00079b: 02 7f                      | block i32\n 00079d: 43 00 00 00 00             |   f32.const 0x0p+0\n 0007a2: 44 00 00 00 00 00 00 f0 3f |   f64.const 0x1p+0\n 0007ab: 42 00                      |   i64.const 0\n 0007ad: 41 09                      |   i32.const 9\n 0007af: 0c 00                      |   br 0\n 0007b1: 1b                         |   select\n 0007b2: 0b                         | end\n 0007b3: 0b                         | end\n0007b5 func[36] <select-after-br_if>:\n 0007b6: 02 7f                      | block i32\n 0007b8: 41 00                      |   i32.const 0\n 0007ba: 41 01                      |   i32.const 1\n 0007bc: 41 00                      |   i32.const 0\n 0007be: 41 09                      |   i32.const 9\n 0007c0: 41 01                      |   i32.const 1\n 0007c2: 0d 00                      |   br_if 0\n 0007c4: 1a                         |   drop\n 0007c5: 1b                         |   select\n 0007c6: 0b                         | end\n 0007c7: 0b                         | end\n0007c9 func[37] <select-after-br_table>:\n 0007ca: 02 7f                      | block i32\n 0007cc: 43 00 00 00 00             |   f32.const 0x0p+0\n 0007d1: 44 00 00 00 00 00 00 f0 3f |   f64.const 0x1p+0\n 0007da: 42 00                      |   i64.const 0\n 0007dc: 41 09                      |   i32.const 9\n 0007de: 41 00                      |   i32.const 0\n 0007e0: 0e 00 00                   |   br_table 0\n 0007e3: 1b                         |   select\n 0007e4: 0b                         | end\n 0007e5: 0b                         | end\n0007e7 func[38] <select-after-return>:\n 0007e8: 43 00 00 00 00             | f32.const 0x0p+0\n 0007ed: 44 00 00 00 00 00 00 f0 3f | f64.const 0x1p+0\n 0007f6: 42 01                      | i64.const 1\n 0007f8: 41 09                      | i32.const 9\n 0007fa: 0f                         | return\n 0007fb: 1b                         | select\n 0007fc: 0b                         | end\n0007fe func[39] <block-value-after-unreachable>:\n 0007ff: 02 7f                      | block i32\n 000801: 43 00 00 00 00             |   f32.const 0x0p+0\n 000806: 00                         |   unreachable\n 000807: 0b                         | end\n 000808: 0b                         | end\n00080a func[40] <block-value-after-br>:\n 00080b: 02 7f                      | block i32\n 00080d: 43 00 00 00 00             |   f32.const 0x0p+0\n 000812: 41 09                      |   i32.const 9\n 000814: 0c 00                      |   br 0\n 000816: 0b                         | end\n 000817: 0b                         | end\n000819 func[41] <block-value-after-br_if>:\n 00081a: 02 7f                      | block i32\n 00081c: 41 00                      |   i32.const 0\n 00081e: 41 09                      |   i32.const 9\n 000820: 41 01                      |   i32.const 1\n 000822: 0d 00                      |   br_if 0\n 000824: 1a                         |   drop\n 000825: 0b                         | end\n 000826: 0b                         | end\n000828 func[42] <block-value-after-br_table>:\n 000829: 02 7f                      | block i32\n 00082b: 43 00 00 00 00             |   f32.const 0x0p+0\n 000830: 41 09                      |   i32.const 9\n 000832: 41 00                      |   i32.const 0\n 000834: 0e 01 00 00                |   br_table 0 0\n 000838: 0b                         | end\n 000839: 0b                         | end\n00083b func[43] <block-value-after-return>:\n 00083c: 02 7f                      | block i32\n 00083e: 43 00 00 00 00             |   f32.const 0x0p+0\n 000843: 41 09                      |   i32.const 9\n 000845: 0f                         |   return\n 000846: 0b                         | end\n 000847: 0b                         | end\n000849 func[44] <loop-value-after-unreachable>:\n 00084a: 03 7f                      | loop i32\n 00084c: 43 00 00 00 00             |   f32.const 0x0p+0\n 000851: 00                         |   unreachable\n 000852: 0b                         | end\n 000853: 0b                         | end\n000855 func[45] <loop-value-after-br>:\n 000856: 02 7f                      | block i32\n 000858: 03 7f                      |   loop i32\n 00085a: 43 00 00 00 00             |     f32.const 0x0p+0\n 00085f: 41 09                      |     i32.const 9\n 000861: 0c 01                      |     br 1\n 000863: 0b                         |   end\n 000864: 0b                         | end\n 000865: 0b                         | end\n000867 func[46] <loop-value-after-br_if>:\n 000868: 02 7f                      | block i32\n 00086a: 03 7f                      |   loop i32\n 00086c: 41 00                      |     i32.const 0\n 00086e: 41 09                      |     i32.const 9\n 000870: 41 01                      |     i32.const 1\n 000872: 0d 01                      |     br_if 1\n 000874: 1a                         |     drop\n 000875: 0b                         |   end\n 000876: 0b                         | end\n 000877: 0b                         | end\n000879 func[47] <loop-value-after-br_table>:\n 00087a: 02 7f                      | block i32\n 00087c: 03 7f                      |   loop i32\n 00087e: 43 00 00 00 00             |     f32.const 0x0p+0\n 000883: 41 09                      |     i32.const 9\n 000885: 41 00                      |     i32.const 0\n 000887: 0e 01 01 01                |     br_table 1 1\n 00088b: 0b                         |   end\n 00088c: 0b                         | end\n 00088d: 0b                         | end\n00088f func[48] <loop-value-after-return>:\n 000890: 03 7f                      | loop i32\n 000892: 43 00 00 00 00             |   f32.const 0x0p+0\n 000897: 41 09                      |   i32.const 9\n 000899: 0f                         |   return\n 00089a: 0b                         | end\n 00089b: 0b                         | end\n"
    }
  }
}
