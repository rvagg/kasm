{
  "bin": {
    "br_if.0.wasm": "AGFzbQEAAAABKQlgA39/fwF/YAAAYAABf2AAAX5gAAF9YAABfGABfwF/YAF/AGACf38AA0A/AQEBAQECAwQFBgYHBgYGBgYHAgECBgECAgMGCAgGBgIAAgICAAICAgIGBgYCAgICAgIFAgICAgICBgYGBgYGBAUBcAEBAQUDAQABBgYBfwFBCgsH0Qg8CHR5cGUtaTMyAAEIdHlwZS1pNjQAAgh0eXBlLWYzMgADCHR5cGUtZjY0AAQOdHlwZS1pMzItdmFsdWUABQ50eXBlLWk2NC12YWx1ZQAGDnR5cGUtZjMyLXZhbHVlAAcOdHlwZS1mNjQtdmFsdWUACA5hcy1ibG9jay1maXJzdAAJDGFzLWJsb2NrLW1pZAAKDWFzLWJsb2NrLWxhc3QACxRhcy1ibG9jay1maXJzdC12YWx1ZQAMEmFzLWJsb2NrLW1pZC12YWx1ZQANE2FzLWJsb2NrLWxhc3QtdmFsdWUADg1hcy1sb29wLWZpcnN0AA8LYXMtbG9vcC1taWQAEAxhcy1sb29wLWxhc3QAEQthcy1ici12YWx1ZQASDWFzLWJyX2lmLWNvbmQAEw5hcy1icl9pZi12YWx1ZQAUE2FzLWJyX2lmLXZhbHVlLWNvbmQAFRFhcy1icl90YWJsZS1pbmRleAAWEWFzLWJyX3RhYmxlLXZhbHVlABcXYXMtYnJfdGFibGUtdmFsdWUtaW5kZXgAGA9hcy1yZXR1cm4tdmFsdWUAGQphcy1pZi1jb25kABoKYXMtaWYtdGhlbgAbCmFzLWlmLWVsc2UAHA9hcy1zZWxlY3QtZmlyc3QAHRBhcy1zZWxlY3Qtc2Vjb25kAB4OYXMtc2VsZWN0LWNvbmQAHw1hcy1jYWxsLWZpcnN0ACELYXMtY2FsbC1taWQAIgxhcy1jYWxsLWxhc3QAIxVhcy1jYWxsX2luZGlyZWN0LWZ1bmMAJRZhcy1jYWxsX2luZGlyZWN0LWZpcnN0ACYUYXMtY2FsbF9pbmRpcmVjdC1taWQAJxVhcy1jYWxsX2luZGlyZWN0LWxhc3QAKBJhcy1sb2NhbC5zZXQtdmFsdWUAKRJhcy1sb2NhbC50ZWUtdmFsdWUAKhNhcy1nbG9iYWwuc2V0LXZhbHVlACsPYXMtbG9hZC1hZGRyZXNzACwQYXMtbG9hZE4tYWRkcmVzcwAtEGFzLXN0b3JlLWFkZHJlc3MALg5hcy1zdG9yZS12YWx1ZQAvEWFzLXN0b3JlTi1hZGRyZXNzADAPYXMtc3RvcmVOLXZhbHVlADEQYXMtdW5hcnktb3BlcmFuZAAyDmFzLWJpbmFyeS1sZWZ0ADMPYXMtYmluYXJ5LXJpZ2h0ADQPYXMtdGVzdC1vcGVyYW5kADUPYXMtY29tcGFyZS1sZWZ0ADYQYXMtY29tcGFyZS1yaWdodAA3E2FzLW1lbW9yeS5ncm93LXNpemUAOBJuZXN0ZWQtYmxvY2stdmFsdWUAOQ9uZXN0ZWQtYnItdmFsdWUAOhJuZXN0ZWQtYnJfaWYtdmFsdWUAOxduZXN0ZWQtYnJfaWYtdmFsdWUtY29uZAA8FW5lc3RlZC1icl90YWJsZS12YWx1ZQA9G25lc3RlZC1icl90YWJsZS12YWx1ZS1pbmRleAA+CQcBAEEACwEkCtoIPwIACw0AAkBBAEEBDQBoGgsLDQACQEIAQQENAHoaCwsQAAJAQwAAAABBAQ0AjBoLCxQAAkBEAAAAAAAAAABBAQ0AmhoLCwwAAn9BAUEBDQBoCwsMAAJ+QgJBAQ0AegsLDwACfUMAAEBAQQENAIwLCxMAAnxEAAAAAAAAEEBBAQ0AmgsLDgACQCAADQBBAg8LQQMLEAACQBAAIAANAEECDwtBAwsNAAJAEAAQACAADQALCw8AAn9BCiAADQAaQQsPCwsRAAJ/EABBFCAADQAaQRUPCwsPAAJ/EAAQAEELIAANAAsLEQACQANAIAANAUECDwsLQQMLEwACQANAEAAgAA0BQQIPCwtBBAsLAANAEAAgAA0BCwsNAAJ/QQFBAg0ADAALCw0AAkBBAUEBDQANAAsLEgACf0EBQQINAEEDDQAaQQQLCxIAAn9BAkEBIAANAA0AGkEECwsQAAJAQQFBAg0ADgIAAAALCxQAAn9BAUECDQBBAw4CAAAAQQQLCxMAAn9BAkEBQQMNAA4BAABBBAsLDAACfkIBQQINAA8LCxMAAn9BASAADQAEf0ECBUEDCwsLEQACQCAABEAgAQ0BBRAACwsLEQACQCAABEAQAAUgAQ0BCwsLEAACf0EDQQoNAEECIAAbCwsQAAJ/QQFBA0EKDQAgABsLCxAAAn9BAUECQQNBCg0AGwsLBABBfwsRAAJ/QQxBAQ0AQQJBAxAgCwsRAAJ/QQFBDUEBDQBBAxAgCwsRAAJ/QQFBAkEOQQENABAgCwsEACAACxQAAn9BBEEKDQBBAUECQQARAAALCxQAAn9BAUEEQQoNAEECQQARAAALCxQAAn9BAUECQQRBCg0AQQARAAALCxQAAn9BAUECQQNBBEEKDQARAAALCxEBAX8Cf0ERIAANACEAQX8LCxAAAn9BASAADQAiAEF/DwsLEAACf0EBIAANACQAQX8PCwsOAAJ/QQFBAQ0AKAIACwsOAAJ/QR5BAQ0ALAAACwsSAAJ/QR5BAQ0AQQc2AgBBfwsLEgACf0ECQR9BAQ0ANgIAQX8LCxIAAn9BIEEBDQBBBzoAAEF/CwsSAAJ/QQJBIUEBDQA7AQBBfwsLEwACfEQAAAAAAADwP0EBDQCaCwsOAAJ/QQFBAQ0AQQpqCwsOAAJ/QQpBAUEBDQBrCwsMAAJ/QQBBAQ0ARQsLDgACf0EBQQENAEEKTQsLDgACf0EKQQFBKg0ARwsLDQACf0EBQQENAEAACwsaAEEBAn9BAhpBBAJ/QQggAA0BGkEQC2oLagsbAEEBAn9BAhoCf0EIIAANARpBBAsMAEEQC2oLHgBBAQJ/QQIaAn9BCCAADQEaQQQLQQENABpBEAtqCx4AQQECf0ECGkEEAn9BCCAADQEaQQELDQAaQRALagseAEEBAn9BAhoCf0EIIAANARpBBAtBAQ4AAEEQC2oLHgBBAQJ/QQIaQQQCf0EIIAANARpBAQsOAABBEAtqCw==",
    "br_if.1.wasm": "AGFzbQEAAAABBAFgAAADAgEACgwBCgACQEEADQBoCws=",
    "br_if.10.wasm": "AGFzbQEAAAABBQFgAAF/AwIBAAoNAQsAAn9BAQ0AQQELCw==",
    "br_if.11.wasm": "AGFzbQEAAAABBAFgAAADAgEACg0BCwACQEEAQQANAAsL",
    "br_if.12.wasm": "AGFzbQEAAAABBAFgAAADAgEACg0BCwACQEEAQQENAAsL",
    "br_if.13.wasm": "AGFzbQEAAAABBQFgAAF/AwIBAAoOAQwAAn8BQQANAEEBCws=",
    "br_if.14.wasm": "AGFzbQEAAAABBQFgAAF/AwIBAAoOAQwAAn8BQQENAEEBCws=",
    "br_if.15.wasm": "AGFzbQEAAAABBQFgAAF/AwIBAAoQAQ4AAn9CAUEADQAaQQELCw==",
    "br_if.16.wasm": "AGFzbQEAAAABBQFgAAF/AwIBAAoQAQ4AAn9CAUEADQAaQQELCw==",
    "br_if.17.wasm": "AGFzbQEAAAABBAFgAAADAgEACgkBBwACQA0ACws=",
    "br_if.18.wasm": "AGFzbQEAAAABBAFgAAADAgEACgoBCAACQAENAAsL",
    "br_if.19.wasm": "AGFzbQEAAAABBAFgAAADAgEACgsBCQACQEIADQALCw==",
    "br_if.2.wasm": "AGFzbQEAAAABBAFgAAADAgEACgwBCgACQEEADQB6Cws=",
    "br_if.20.wasm": "AGFzbQEAAAABBQFgAAF/AwIBAAoOAQwAAn9BAAENAEEBCws=",
    "br_if.21.wasm": "AGFzbQEAAAABBQFgAAF/AwIBAAoQAQ4AAn9BAAJAQQENAQsLCw==",
    "br_if.22.wasm": "AGFzbQEAAAABBQFgAAF/AwIBAAoPAQ0AAn9BAEIADQBBAQsL",
    "br_if.23.wasm": "AGFzbQEAAAABBAFgAAADAgEAChIBEAACQEEAQQAEfw0ACwtFGgs=",
    "br_if.24.wasm": "AGFzbQEAAAABBAFgAAADAgEAChQBEgACQEEAQQAEf0EBDQALC0UaCw==",
    "br_if.25.wasm": "AGFzbQEAAAABBAFgAAADAgEACgwBCgACfw0ADwtFGgs=",
    "br_if.26.wasm": "AGFzbQEAAAABBAFgAAADAgEACg4BDAACf0EBDQAPC0UaCw==",
    "br_if.27.wasm": "AGFzbQEAAAABBAFgAAADAgEACggBBgBBAQ0BCw==",
    "br_if.28.wasm": "AGFzbQEAAAABBAFgAAADAgEACg4BDAACQAJAQQENBQsLCw==",
    "br_if.29.wasm": "AGFzbQEAAAABBAFgAAADAgEACgwBCgBBAQ2BgICAAQs=",
    "br_if.3.wasm": "AGFzbQEAAAABBAFgAAADAgEACgwBCgACQEEADQCMCws=",
    "br_if.4.wasm": "AGFzbQEAAAABBAFgAAADAgEACgwBCgACQEEADQCaCws=",
    "br_if.5.wasm": "AGFzbQEAAAABBAFgAAADAgEACgwBCgACQEEBDQBoCws=",
    "br_if.6.wasm": "AGFzbQEAAAABBAFgAAADAgEACgwBCgACQEIBDQB6Cws=",
    "br_if.7.wasm": "AGFzbQEAAAABBAFgAAADAgEACg8BDQACQEMAAIA/DQCMCws=",
    "br_if.8.wasm": "AGFzbQEAAAABBAFgAAADAgEACgwBCgACQEIBDQCaCws=",
    "br_if.9.wasm": "AGFzbQEAAAABBQFgAAF/AwIBAAoNAQsAAn9BAA0AQQELCw=="
  },
  "spec": {"source_filename": "/home/rvagg/git/webassembly/spec/test/core/br_if.wast",
 "commands": [
  {"type": "module", "line": 3, "filename": "br_if.0.wasm"}, 
  {"type": "assert_return", "line": 372, "action": {"type": "invoke", "field": "type-i32", "args": []}, "expected": []}, 
  {"type": "assert_return", "line": 373, "action": {"type": "invoke", "field": "type-i64", "args": []}, "expected": []}, 
  {"type": "assert_return", "line": 374, "action": {"type": "invoke", "field": "type-f32", "args": []}, "expected": []}, 
  {"type": "assert_return", "line": 375, "action": {"type": "invoke", "field": "type-f64", "args": []}, "expected": []}, 
  {"type": "assert_return", "line": 377, "action": {"type": "invoke", "field": "type-i32-value", "args": []}, "expected": [{"type": "i32", "value": "1"}]}, 
  {"type": "assert_return", "line": 378, "action": {"type": "invoke", "field": "type-i64-value", "args": []}, "expected": [{"type": "i64", "value": "2"}]}, 
  {"type": "assert_return", "line": 379, "action": {"type": "invoke", "field": "type-f32-value", "args": []}, "expected": [{"type": "f32", "value": "1077936128"}]}, 
  {"type": "assert_return", "line": 380, "action": {"type": "invoke", "field": "type-f64-value", "args": []}, "expected": [{"type": "f64", "value": "4616189618054758400"}]}, 
  {"type": "assert_return", "line": 382, "action": {"type": "invoke", "field": "as-block-first", "args": [{"type": "i32", "value": "0"}]}, "expected": [{"type": "i32", "value": "2"}]}, 
  {"type": "assert_return", "line": 383, "action": {"type": "invoke", "field": "as-block-first", "args": [{"type": "i32", "value": "1"}]}, "expected": [{"type": "i32", "value": "3"}]}, 
  {"type": "assert_return", "line": 384, "action": {"type": "invoke", "field": "as-block-mid", "args": [{"type": "i32", "value": "0"}]}, "expected": [{"type": "i32", "value": "2"}]}, 
  {"type": "assert_return", "line": 385, "action": {"type": "invoke", "field": "as-block-mid", "args": [{"type": "i32", "value": "1"}]}, "expected": [{"type": "i32", "value": "3"}]}, 
  {"type": "assert_return", "line": 386, "action": {"type": "invoke", "field": "as-block-last", "args": [{"type": "i32", "value": "0"}]}, "expected": []}, 
  {"type": "assert_return", "line": 387, "action": {"type": "invoke", "field": "as-block-last", "args": [{"type": "i32", "value": "1"}]}, "expected": []}, 
  {"type": "assert_return", "line": 389, "action": {"type": "invoke", "field": "as-block-first-value", "args": [{"type": "i32", "value": "0"}]}, "expected": [{"type": "i32", "value": "11"}]}, 
  {"type": "assert_return", "line": 390, "action": {"type": "invoke", "field": "as-block-first-value", "args": [{"type": "i32", "value": "1"}]}, "expected": [{"type": "i32", "value": "10"}]}, 
  {"type": "assert_return", "line": 391, "action": {"type": "invoke", "field": "as-block-mid-value", "args": [{"type": "i32", "value": "0"}]}, "expected": [{"type": "i32", "value": "21"}]}, 
  {"type": "assert_return", "line": 392, "action": {"type": "invoke", "field": "as-block-mid-value", "args": [{"type": "i32", "value": "1"}]}, "expected": [{"type": "i32", "value": "20"}]}, 
  {"type": "assert_return", "line": 393, "action": {"type": "invoke", "field": "as-block-last-value", "args": [{"type": "i32", "value": "0"}]}, "expected": [{"type": "i32", "value": "11"}]}, 
  {"type": "assert_return", "line": 394, "action": {"type": "invoke", "field": "as-block-last-value", "args": [{"type": "i32", "value": "1"}]}, "expected": [{"type": "i32", "value": "11"}]}, 
  {"type": "assert_return", "line": 396, "action": {"type": "invoke", "field": "as-loop-first", "args": [{"type": "i32", "value": "0"}]}, "expected": [{"type": "i32", "value": "2"}]}, 
  {"type": "assert_return", "line": 397, "action": {"type": "invoke", "field": "as-loop-first", "args": [{"type": "i32", "value": "1"}]}, "expected": [{"type": "i32", "value": "3"}]}, 
  {"type": "assert_return", "line": 398, "action": {"type": "invoke", "field": "as-loop-mid", "args": [{"type": "i32", "value": "0"}]}, "expected": [{"type": "i32", "value": "2"}]}, 
  {"type": "assert_return", "line": 399, "action": {"type": "invoke", "field": "as-loop-mid", "args": [{"type": "i32", "value": "1"}]}, "expected": [{"type": "i32", "value": "4"}]}, 
  {"type": "assert_return", "line": 400, "action": {"type": "invoke", "field": "as-loop-last", "args": [{"type": "i32", "value": "0"}]}, "expected": []}, 
  {"type": "assert_return", "line": 401, "action": {"type": "invoke", "field": "as-loop-last", "args": [{"type": "i32", "value": "1"}]}, "expected": []}, 
  {"type": "assert_return", "line": 403, "action": {"type": "invoke", "field": "as-br-value", "args": []}, "expected": [{"type": "i32", "value": "1"}]}, 
  {"type": "assert_return", "line": 405, "action": {"type": "invoke", "field": "as-br_if-cond", "args": []}, "expected": []}, 
  {"type": "assert_return", "line": 406, "action": {"type": "invoke", "field": "as-br_if-value", "args": []}, "expected": [{"type": "i32", "value": "1"}]}, 
  {"type": "assert_return", "line": 407, "action": {"type": "invoke", "field": "as-br_if-value-cond", "args": [{"type": "i32", "value": "0"}]}, "expected": [{"type": "i32", "value": "2"}]}, 
  {"type": "assert_return", "line": 408, "action": {"type": "invoke", "field": "as-br_if-value-cond", "args": [{"type": "i32", "value": "1"}]}, "expected": [{"type": "i32", "value": "1"}]}, 
  {"type": "assert_return", "line": 410, "action": {"type": "invoke", "field": "as-br_table-index", "args": []}, "expected": []}, 
  {"type": "assert_return", "line": 411, "action": {"type": "invoke", "field": "as-br_table-value", "args": []}, "expected": [{"type": "i32", "value": "1"}]}, 
  {"type": "assert_return", "line": 412, "action": {"type": "invoke", "field": "as-br_table-value-index", "args": []}, "expected": [{"type": "i32", "value": "1"}]}, 
  {"type": "assert_return", "line": 414, "action": {"type": "invoke", "field": "as-return-value", "args": []}, "expected": [{"type": "i64", "value": "1"}]}, 
  {"type": "assert_return", "line": 416, "action": {"type": "invoke", "field": "as-if-cond", "args": [{"type": "i32", "value": "0"}]}, "expected": [{"type": "i32", "value": "2"}]}, 
  {"type": "assert_return", "line": 417, "action": {"type": "invoke", "field": "as-if-cond", "args": [{"type": "i32", "value": "1"}]}, "expected": [{"type": "i32", "value": "1"}]}, 
  {"type": "assert_return", "line": 418, "action": {"type": "invoke", "field": "as-if-then", "args": [{"type": "i32", "value": "0"}, {"type": "i32", "value": "0"}]}, "expected": []}, 
  {"type": "assert_return", "line": 419, "action": {"type": "invoke", "field": "as-if-then", "args": [{"type": "i32", "value": "4"}, {"type": "i32", "value": "0"}]}, "expected": []}, 
  {"type": "assert_return", "line": 420, "action": {"type": "invoke", "field": "as-if-then", "args": [{"type": "i32", "value": "0"}, {"type": "i32", "value": "1"}]}, "expected": []}, 
  {"type": "assert_return", "line": 421, "action": {"type": "invoke", "field": "as-if-then", "args": [{"type": "i32", "value": "4"}, {"type": "i32", "value": "1"}]}, "expected": []}, 
  {"type": "assert_return", "line": 422, "action": {"type": "invoke", "field": "as-if-else", "args": [{"type": "i32", "value": "0"}, {"type": "i32", "value": "0"}]}, "expected": []}, 
  {"type": "assert_return", "line": 423, "action": {"type": "invoke", "field": "as-if-else", "args": [{"type": "i32", "value": "3"}, {"type": "i32", "value": "0"}]}, "expected": []}, 
  {"type": "assert_return", "line": 424, "action": {"type": "invoke", "field": "as-if-else", "args": [{"type": "i32", "value": "0"}, {"type": "i32", "value": "1"}]}, "expected": []}, 
  {"type": "assert_return", "line": 425, "action": {"type": "invoke", "field": "as-if-else", "args": [{"type": "i32", "value": "3"}, {"type": "i32", "value": "1"}]}, "expected": []}, 
  {"type": "assert_return", "line": 427, "action": {"type": "invoke", "field": "as-select-first", "args": [{"type": "i32", "value": "0"}]}, "expected": [{"type": "i32", "value": "3"}]}, 
  {"type": "assert_return", "line": 428, "action": {"type": "invoke", "field": "as-select-first", "args": [{"type": "i32", "value": "1"}]}, "expected": [{"type": "i32", "value": "3"}]}, 
  {"type": "assert_return", "line": 429, "action": {"type": "invoke", "field": "as-select-second", "args": [{"type": "i32", "value": "0"}]}, "expected": [{"type": "i32", "value": "3"}]}, 
  {"type": "assert_return", "line": 430, "action": {"type": "invoke", "field": "as-select-second", "args": [{"type": "i32", "value": "1"}]}, "expected": [{"type": "i32", "value": "3"}]}, 
  {"type": "assert_return", "line": 431, "action": {"type": "invoke", "field": "as-select-cond", "args": []}, "expected": [{"type": "i32", "value": "3"}]}, 
  {"type": "assert_return", "line": 433, "action": {"type": "invoke", "field": "as-call-first", "args": []}, "expected": [{"type": "i32", "value": "12"}]}, 
  {"type": "assert_return", "line": 434, "action": {"type": "invoke", "field": "as-call-mid", "args": []}, "expected": [{"type": "i32", "value": "13"}]}, 
  {"type": "assert_return", "line": 435, "action": {"type": "invoke", "field": "as-call-last", "args": []}, "expected": [{"type": "i32", "value": "14"}]}, 
  {"type": "assert_return", "line": 437, "action": {"type": "invoke", "field": "as-call_indirect-func", "args": []}, "expected": [{"type": "i32", "value": "4"}]}, 
  {"type": "assert_return", "line": 438, "action": {"type": "invoke", "field": "as-call_indirect-first", "args": []}, "expected": [{"type": "i32", "value": "4"}]}, 
  {"type": "assert_return", "line": 439, "action": {"type": "invoke", "field": "as-call_indirect-mid", "args": []}, "expected": [{"type": "i32", "value": "4"}]}, 
  {"type": "assert_return", "line": 440, "action": {"type": "invoke", "field": "as-call_indirect-last", "args": []}, "expected": [{"type": "i32", "value": "4"}]}, 
  {"type": "assert_return", "line": 442, "action": {"type": "invoke", "field": "as-local.set-value", "args": [{"type": "i32", "value": "0"}]}, "expected": [{"type": "i32", "value": "4294967295"}]}, 
  {"type": "assert_return", "line": 443, "action": {"type": "invoke", "field": "as-local.set-value", "args": [{"type": "i32", "value": "1"}]}, "expected": [{"type": "i32", "value": "17"}]}, 
  {"type": "assert_return", "line": 445, "action": {"type": "invoke", "field": "as-local.tee-value", "args": [{"type": "i32", "value": "0"}]}, "expected": [{"type": "i32", "value": "4294967295"}]}, 
  {"type": "assert_return", "line": 446, "action": {"type": "invoke", "field": "as-local.tee-value", "args": [{"type": "i32", "value": "1"}]}, "expected": [{"type": "i32", "value": "1"}]}, 
  {"type": "assert_return", "line": 448, "action": {"type": "invoke", "field": "as-global.set-value", "args": [{"type": "i32", "value": "0"}]}, "expected": [{"type": "i32", "value": "4294967295"}]}, 
  {"type": "assert_return", "line": 449, "action": {"type": "invoke", "field": "as-global.set-value", "args": [{"type": "i32", "value": "1"}]}, "expected": [{"type": "i32", "value": "1"}]}, 
  {"type": "assert_return", "line": 451, "action": {"type": "invoke", "field": "as-load-address", "args": []}, "expected": [{"type": "i32", "value": "1"}]}, 
  {"type": "assert_return", "line": 452, "action": {"type": "invoke", "field": "as-loadN-address", "args": []}, "expected": [{"type": "i32", "value": "30"}]}, 
  {"type": "assert_return", "line": 454, "action": {"type": "invoke", "field": "as-store-address", "args": []}, "expected": [{"type": "i32", "value": "30"}]}, 
  {"type": "assert_return", "line": 455, "action": {"type": "invoke", "field": "as-store-value", "args": []}, "expected": [{"type": "i32", "value": "31"}]}, 
  {"type": "assert_return", "line": 456, "action": {"type": "invoke", "field": "as-storeN-address", "args": []}, "expected": [{"type": "i32", "value": "32"}]}, 
  {"type": "assert_return", "line": 457, "action": {"type": "invoke", "field": "as-storeN-value", "args": []}, "expected": [{"type": "i32", "value": "33"}]}, 
  {"type": "assert_return", "line": 459, "action": {"type": "invoke", "field": "as-unary-operand", "args": []}, "expected": [{"type": "f64", "value": "4607182418800017408"}]}, 
  {"type": "assert_return", "line": 460, "action": {"type": "invoke", "field": "as-binary-left", "args": []}, "expected": [{"type": "i32", "value": "1"}]}, 
  {"type": "assert_return", "line": 461, "action": {"type": "invoke", "field": "as-binary-right", "args": []}, "expected": [{"type": "i32", "value": "1"}]}, 
  {"type": "assert_return", "line": 462, "action": {"type": "invoke", "field": "as-test-operand", "args": []}, "expected": [{"type": "i32", "value": "0"}]}, 
  {"type": "assert_return", "line": 463, "action": {"type": "invoke", "field": "as-compare-left", "args": []}, "expected": [{"type": "i32", "value": "1"}]}, 
  {"type": "assert_return", "line": 464, "action": {"type": "invoke", "field": "as-compare-right", "args": []}, "expected": [{"type": "i32", "value": "1"}]}, 
  {"type": "assert_return", "line": 465, "action": {"type": "invoke", "field": "as-memory.grow-size", "args": []}, "expected": [{"type": "i32", "value": "1"}]}, 
  {"type": "assert_return", "line": 467, "action": {"type": "invoke", "field": "nested-block-value", "args": [{"type": "i32", "value": "0"}]}, "expected": [{"type": "i32", "value": "21"}]}, 
  {"type": "assert_return", "line": 468, "action": {"type": "invoke", "field": "nested-block-value", "args": [{"type": "i32", "value": "1"}]}, "expected": [{"type": "i32", "value": "9"}]}, 
  {"type": "assert_return", "line": 469, "action": {"type": "invoke", "field": "nested-br-value", "args": [{"type": "i32", "value": "0"}]}, "expected": [{"type": "i32", "value": "5"}]}, 
  {"type": "assert_return", "line": 470, "action": {"type": "invoke", "field": "nested-br-value", "args": [{"type": "i32", "value": "1"}]}, "expected": [{"type": "i32", "value": "9"}]}, 
  {"type": "assert_return", "line": 471, "action": {"type": "invoke", "field": "nested-br_if-value", "args": [{"type": "i32", "value": "0"}]}, "expected": [{"type": "i32", "value": "5"}]}, 
  {"type": "assert_return", "line": 472, "action": {"type": "invoke", "field": "nested-br_if-value", "args": [{"type": "i32", "value": "1"}]}, "expected": [{"type": "i32", "value": "9"}]}, 
  {"type": "assert_return", "line": 473, "action": {"type": "invoke", "field": "nested-br_if-value-cond", "args": [{"type": "i32", "value": "0"}]}, "expected": [{"type": "i32", "value": "5"}]}, 
  {"type": "assert_return", "line": 474, "action": {"type": "invoke", "field": "nested-br_if-value-cond", "args": [{"type": "i32", "value": "1"}]}, "expected": [{"type": "i32", "value": "9"}]}, 
  {"type": "assert_return", "line": 475, "action": {"type": "invoke", "field": "nested-br_table-value", "args": [{"type": "i32", "value": "0"}]}, "expected": [{"type": "i32", "value": "5"}]}, 
  {"type": "assert_return", "line": 476, "action": {"type": "invoke", "field": "nested-br_table-value", "args": [{"type": "i32", "value": "1"}]}, "expected": [{"type": "i32", "value": "9"}]}, 
  {"type": "assert_return", "line": 477, "action": {"type": "invoke", "field": "nested-br_table-value-index", "args": [{"type": "i32", "value": "0"}]}, "expected": [{"type": "i32", "value": "5"}]}, 
  {"type": "assert_return", "line": 478, "action": {"type": "invoke", "field": "nested-br_table-value-index", "args": [{"type": "i32", "value": "1"}]}, "expected": [{"type": "i32", "value": "9"}]}, 
  {"type": "assert_invalid", "line": 481, "filename": "br_if.1.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 485, "filename": "br_if.2.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 489, "filename": "br_if.3.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 493, "filename": "br_if.4.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 498, "filename": "br_if.5.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 502, "filename": "br_if.6.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 506, "filename": "br_if.7.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 510, "filename": "br_if.8.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 515, "filename": "br_if.9.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 521, "filename": "br_if.10.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 527, "filename": "br_if.11.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 533, "filename": "br_if.12.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 540, "filename": "br_if.13.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 546, "filename": "br_if.14.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 552, "filename": "br_if.15.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 560, "filename": "br_if.16.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 569, "filename": "br_if.17.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 575, "filename": "br_if.18.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 581, "filename": "br_if.19.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 587, "filename": "br_if.20.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 593, "filename": "br_if.21.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 599, "filename": "br_if.22.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 606, "filename": "br_if.23.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 618, "filename": "br_if.24.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 630, "filename": "br_if.25.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 641, "filename": "br_if.26.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 654, "filename": "br_if.27.wasm", "text": "unknown label", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 658, "filename": "br_if.28.wasm", "text": "unknown label", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 662, "filename": "br_if.29.wasm", "text": "unknown label", "module_type": "binary"}]},
  "code": [
    "(module \n  (func $dummy)\n  (func (export \"type-i32\") (block (drop (i32.ctz (br_if 0 (i32.const 0) (i32.const 1))))) )\n  (func (export \"type-i64\") (block (drop (i64.ctz (br_if 0 (i64.const 0) (i32.const 1))))) )\n  (func (export \"type-f32\") (block (drop (f32.neg (br_if 0 (f32.const 0) (i32.const 1))))) )\n  (func (export \"type-f64\") (block (drop (f64.neg (br_if 0 (f64.const 0) (i32.const 1))))) )\n  (func (export \"type-i32-value\") (result i32) (block (result i32) (i32.ctz (br_if 0 (i32.const 1) (i32.const 1)))) )\n  (func (export \"type-i64-value\") (result i64) (block (result i64) (i64.ctz (br_if 0 (i64.const 2) (i32.const 1)))) )\n  (func (export \"type-f32-value\") (result f32) (block (result f32) (f32.neg (br_if 0 (f32.const 3) (i32.const 1)))) )\n  (func (export \"type-f64-value\") (result f64) (block (result f64) (f64.neg (br_if 0 (f64.const 4) (i32.const 1)))) )\n  (func (export \"as-block-first\") (param i32) (result i32) (block (br_if 0 (local.get 0)) (return (i32.const 2))) (i32.const 3) )\n  (func (export \"as-block-mid\") (param i32) (result i32) (block (call $dummy) (br_if 0 (local.get 0)) (return (i32.const 2))) (i32.const 3) )\n  (func (export \"as-block-last\") (param i32) (block (call $dummy) (call $dummy) (br_if 0 (local.get 0))) )\n  (func (export \"as-block-first-value\") (param i32) (result i32) (block (result i32) (drop (br_if 0 (i32.const 10) (local.get 0))) (return (i32.const 11)) ) )\n  (func (export \"as-block-mid-value\") (param i32) (result i32) (block (result i32) (call $dummy) (drop (br_if 0 (i32.const 20) (local.get 0))) (return (i32.const 21)) ) )\n  (func (export \"as-block-last-value\") (param i32) (result i32) (block (result i32) (call $dummy) (call $dummy) (br_if 0 (i32.const 11) (local.get 0)) ) )\n  (func (export \"as-loop-first\") (param i32) (result i32) (block (loop (br_if 1 (local.get 0)) (return (i32.const 2)))) (i32.const 3) )\n  (func (export \"as-loop-mid\") (param i32) (result i32) (block (loop (call $dummy) (br_if 1 (local.get 0)) (return (i32.const 2)))) (i32.const 4) )\n  (func (export \"as-loop-last\") (param i32) (loop (call $dummy) (br_if 1 (local.get 0))) )\n  (func (export \"as-br-value\") (result i32) (block (result i32) (br 0 (br_if 0 (i32.const 1) (i32.const 2)))) )\n  (func (export \"as-br_if-cond\") (block (br_if 0 (br_if 0 (i32.const 1) (i32.const 1)))) )\n  (func (export \"as-br_if-value\") (result i32) (block (result i32) (drop (br_if 0 (br_if 0 (i32.const 1) (i32.const 2)) (i32.const 3))) (i32.const 4) ) )\n  (func (export \"as-br_if-value-cond\") (param i32) (result i32) (block (result i32) (drop (br_if 0 (i32.const 2) (br_if 0 (i32.const 1) (local.get 0)))) (i32.const 4) ) )\n  (func (export \"as-br_table-index\") (block (br_table 0 0 0 (br_if 0 (i32.const 1) (i32.const 2)))) )\n  (func (export \"as-br_table-value\") (result i32) (block (result i32) (br_table 0 0 0 (br_if 0 (i32.const 1) (i32.const 2)) (i32.const 3)) (i32.const 4) ) )\n  (func (export \"as-br_table-value-index\") (result i32) (block (result i32) (br_table 0 0 (i32.const 2) (br_if 0 (i32.const 1) (i32.const 3))) (i32.const 4) ) )\n  (func (export \"as-return-value\") (result i64) (block (result i64) (return (br_if 0 (i64.const 1) (i32.const 2)))) )\n  (func (export \"as-if-cond\") (param i32) (result i32) (block (result i32) (if (result i32) (br_if 0 (i32.const 1) (local.get 0)) (then (i32.const 2)) (else (i32.const 3)) ) ) )\n  (func (export \"as-if-then\") (param i32 i32) (block (if (local.get 0) (then (br_if 1 (local.get 1))) (else (call $dummy))) ) )\n  (func (export \"as-if-else\") (param i32 i32) (block (if (local.get 0) (then (call $dummy)) (else (br_if 1 (local.get 1)))) ) )\n  (func (export \"as-select-first\") (param i32) (result i32) (block (result i32) (select (br_if 0 (i32.const 3) (i32.const 10)) (i32.const 2) (local.get 0)) ) )\n  (func (export \"as-select-second\") (param i32) (result i32) (block (result i32) (select (i32.const 1) (br_if 0 (i32.const 3) (i32.const 10)) (local.get 0)) ) )\n  (func (export \"as-select-cond\") (result i32) (block (result i32) (select (i32.const 1) (i32.const 2) (br_if 0 (i32.const 3) (i32.const 10))) ) )\n  (func $f (param i32 i32 i32) (result i32) (i32.const -1))\n  (func (export \"as-call-first\") (result i32) (block (result i32) (call $f (br_if 0 (i32.const 12) (i32.const 1)) (i32.const 2) (i32.const 3) ) ) )\n  (func (export \"as-call-mid\") (result i32) (block (result i32) (call $f (i32.const 1) (br_if 0 (i32.const 13) (i32.const 1)) (i32.const 3) ) ) )\n  (func (export \"as-call-last\") (result i32) (block (result i32) (call $f (i32.const 1) (i32.const 2) (br_if 0 (i32.const 14) (i32.const 1)) ) ) )\n  (func $ (param i32 i32 i32) (result i32) (local.get 0)) (type $check (func (param i32 i32 i32) (result i32))) (table funcref (elem $func))\n  (func (export \"as-call_indirect-func\") (result i32) (block (result i32) (call_indirect (type $check) (br_if 0 (i32.const 4) (i32.const 10)) (i32.const 1) (i32.const 2) (i32.const 0) ) ) )\n  (func (export \"as-call_indirect-first\") (result i32) (block (result i32) (call_indirect (type $check) (i32.const 1) (br_if 0 (i32.const 4) (i32.const 10)) (i32.const 2) (i32.const 0) ) ) )\n  (func (export \"as-call_indirect-mid\") (result i32) (block (result i32) (call_indirect (type $check) (i32.const 1) (i32.const 2) (br_if 0 (i32.const 4) (i32.const 10)) (i32.const 0) ) ) )\n  (func (export \"as-call_indirect-last\") (result i32) (block (result i32) (call_indirect (type $check) (i32.const 1) (i32.const 2) (i32.const 3) (br_if 0 (i32.const 4) (i32.const 10)) ) ) )\n  (func (export \"as-local.set-value\") (param i32) (result i32) (local i32) (block (result i32) (local.set 0 (br_if 0 (i32.const 17) (local.get 0))) (i32.const -1) ) )\n  (func (export \"as-local.tee-value\") (param i32) (result i32) (block (result i32) (local.tee 0 (br_if 0 (i32.const 1) (local.get 0))) (return (i32.const -1)) ) ) (global $a (mut i32) (i32.const 10))\n  (func (export \"as-global.set-value\") (param i32) (result i32) (block (result i32) (global.set $a (br_if 0 (i32.const 1) (local.get 0))) (return (i32.const -1)) ) ) (memory 1)\n  (func (export \"as-load-address\") (result i32) (block (result i32) (i32.load (br_if 0 (i32.const 1) (i32.const 1)))) )\n  (func (export \"as-loadN-address\") (result i32) (block (result i32) (i32.load8_s (br_if 0 (i32.const 30) (i32.const 1)))) )\n  (func (export \"as-store-address\") (result i32) (block (result i32) (i32.store (br_if 0 (i32.const 30) (i32.const 1)) (i32.const 7)) (i32.const -1) ) )\n  (func (export \"as-store-value\") (result i32) (block (result i32) (i32.store (i32.const 2) (br_if 0 (i32.const 31) (i32.const 1))) (i32.const -1) ) )\n  (func (export \"as-storeN-address\") (result i32) (block (result i32) (i32.store8 (br_if 0 (i32.const 32) (i32.const 1)) (i32.const 7)) (i32.const -1) ) )\n  (func (export \"as-storeN-value\") (result i32) (block (result i32) (i32.store16 (i32.const 2) (br_if 0 (i32.const 33) (i32.const 1))) (i32.const -1) ) )\n  (func (export \"as-unary-operand\") (result f64) (block (result f64) (f64.neg (br_if 0 (f64.const 1.0) (i32.const 1)))) )\n  (func (export \"as-binary-left\") (result i32) (block (result i32) (i32.add (br_if 0 (i32.const 1) (i32.const 1)) (i32.const 10))) )\n  (func (export \"as-binary-right\") (result i32) (block (result i32) (i32.sub (i32.const 10) (br_if 0 (i32.const 1) (i32.const 1)))) )\n  (func (export \"as-test-operand\") (result i32) (block (result i32) (i32.eqz (br_if 0 (i32.const 0) (i32.const 1)))) )\n  (func (export \"as-compare-left\") (result i32) (block (result i32) (i32.le_u (br_if 0 (i32.const 1) (i32.const 1)) (i32.const 10))) )\n  (func (export \"as-compare-right\") (result i32) (block (result i32) (i32.ne (i32.const 10) (br_if 0 (i32.const 1) (i32.const 42)))) )\n  (func (export \"as-memory.grow-size\") (result i32) (block (result i32) (memory.grow (br_if 0 (i32.const 1) (i32.const 1)))) )\n  (func (export \"nested-block-value\") (param i32) (result i32) (i32.add (i32.const 1) (block (result i32) (drop (i32.const 2)) (i32.add (i32.const 4) (block (result i32) (drop (br_if 1 (i32.const 8) (local.get 0))) (i32.const 16) ) ) ) ) )\n  (func (export \"nested-br-value\") (param i32) (result i32) (i32.add (i32.const 1) (block (result i32) (drop (i32.const 2)) (br 0 (block (result i32) (drop (br_if 1 (i32.const 8) (local.get 0))) (i32.const 4) ) ) (i32.const 16) ) ) )\n  (func (export \"nested-br_if-value\") (param i32) (result i32) (i32.add (i32.const 1) (block (result i32) (drop (i32.const 2)) (drop (br_if 0 (block (result i32) (drop (br_if 1 (i32.const 8) (local.get 0))) (i32.const 4) ) (i32.const 1) )) (i32.const 16) ) ) )\n  (func (export \"nested-br_if-value-cond\") (param i32) (result i32) (i32.add (i32.const 1) (block (result i32) (drop (i32.const 2)) (drop (br_if 0 (i32.const 4) (block (result i32) (drop (br_if 1 (i32.const 8) (local.get 0))) (i32.const 1) ) )) (i32.const 16) ) ) )\n  (func (export \"nested-br_table-value\") (param i32) (result i32) (i32.add (i32.const 1) (block (result i32) (drop (i32.const 2)) (br_table 0 (block (result i32) (drop (br_if 1 (i32.const 8) (local.get 0))) (i32.const 4) ) (i32.const 1) ) (i32.const 16) ) ) )\n  (func (export \"nested-br_table-value-index\") (param i32) (result i32) (i32.add (i32.const 1) (block (result i32) (drop (i32.const 2)) (br_table 0 (i32.const 4) (block (result i32) (drop (br_if 1 (i32.const 8) (local.get 0))) (i32.const 1) ) ) (i32.const 16) ) ) ))",
    "(assert_return (invoke \"type-i32\"))",
    "(assert_return (invoke \"type-i64\"))",
    "(assert_return (invoke \"type-f32\"))",
    "(assert_return (invoke \"type-f64\"))",
    "(assert_return (invoke \"type-i32-value\") (i32.const 1))",
    "(assert_return (invoke \"type-i64-value\") (i64.const 2))",
    "(assert_return (invoke \"type-f32-value\") (f32.const 3))",
    "(assert_return (invoke \"type-f64-value\") (f64.const 4))",
    "(assert_return (invoke \"as-block-first\" (i32.const 0)) (i32.const 2))",
    "(assert_return (invoke \"as-block-first\" (i32.const 1)) (i32.const 3))",
    "(assert_return (invoke \"as-block-mid\" (i32.const 0)) (i32.const 2))",
    "(assert_return (invoke \"as-block-mid\" (i32.const 1)) (i32.const 3))",
    "(assert_return (invoke \"as-block-last\" (i32.const 0)))",
    "(assert_return (invoke \"as-block-last\" (i32.const 1)))",
    "(assert_return (invoke \"as-block-first-value\" (i32.const 0)) (i32.const 11))",
    "(assert_return (invoke \"as-block-first-value\" (i32.const 1)) (i32.const 10))",
    "(assert_return (invoke \"as-block-mid-value\" (i32.const 0)) (i32.const 21))",
    "(assert_return (invoke \"as-block-mid-value\" (i32.const 1)) (i32.const 20))",
    "(assert_return (invoke \"as-block-last-value\" (i32.const 0)) (i32.const 11))",
    "(assert_return (invoke \"as-block-last-value\" (i32.const 1)) (i32.const 11))",
    "(assert_return (invoke \"as-loop-first\" (i32.const 0)) (i32.const 2))",
    "(assert_return (invoke \"as-loop-first\" (i32.const 1)) (i32.const 3))",
    "(assert_return (invoke \"as-loop-mid\" (i32.const 0)) (i32.const 2))",
    "(assert_return (invoke \"as-loop-mid\" (i32.const 1)) (i32.const 4))",
    "(assert_return (invoke \"as-loop-last\" (i32.const 0)))",
    "(assert_return (invoke \"as-loop-last\" (i32.const 1)))",
    "(assert_return (invoke \"as-br-value\") (i32.const 1))",
    "(assert_return (invoke \"as-br_if-cond\"))",
    "(assert_return (invoke \"as-br_if-value\") (i32.const 1))",
    "(assert_return (invoke \"as-br_if-value-cond\" (i32.const 0)) (i32.const 2))",
    "(assert_return (invoke \"as-br_if-value-cond\" (i32.const 1)) (i32.const 1))",
    "(assert_return (invoke \"as-br_table-index\"))",
    "(assert_return (invoke \"as-br_table-value\") (i32.const 1))",
    "(assert_return (invoke \"as-br_table-value-index\") (i32.const 1))",
    "(assert_return (invoke \"as-return-value\") (i64.const 1))",
    "(assert_return (invoke \"as-if-cond\" (i32.const 0)) (i32.const 2))",
    "(assert_return (invoke \"as-if-cond\" (i32.const 1)) (i32.const 1))",
    "(assert_return (invoke \"as-if-then\" (i32.const 0) (i32.const 0)))",
    "(assert_return (invoke \"as-if-then\" (i32.const 4) (i32.const 0)))",
    "(assert_return (invoke \"as-if-then\" (i32.const 0) (i32.const 1)))",
    "(assert_return (invoke \"as-if-then\" (i32.const 4) (i32.const 1)))",
    "(assert_return (invoke \"as-if-else\" (i32.const 0) (i32.const 0)))",
    "(assert_return (invoke \"as-if-else\" (i32.const 3) (i32.const 0)))",
    "(assert_return (invoke \"as-if-else\" (i32.const 0) (i32.const 1)))",
    "(assert_return (invoke \"as-if-else\" (i32.const 3) (i32.const 1)))",
    "(assert_return (invoke \"as-select-first\" (i32.const 0)) (i32.const 3))",
    "(assert_return (invoke \"as-select-first\" (i32.const 1)) (i32.const 3))",
    "(assert_return (invoke \"as-select-second\" (i32.const 0)) (i32.const 3))",
    "(assert_return (invoke \"as-select-second\" (i32.const 1)) (i32.const 3))",
    "(assert_return (invoke \"as-select-cond\") (i32.const 3))",
    "(assert_return (invoke \"as-call-first\") (i32.const 12))",
    "(assert_return (invoke \"as-call-mid\") (i32.const 13))",
    "(assert_return (invoke \"as-call-last\") (i32.const 14))",
    "(assert_return (invoke \"as-call_indirect-func\") (i32.const 4))",
    "(assert_return (invoke \"as-call_indirect-first\") (i32.const 4))",
    "(assert_return (invoke \"as-call_indirect-mid\") (i32.const 4))",
    "(assert_return (invoke \"as-call_indirect-last\") (i32.const 4))",
    "(assert_return (invoke \"as-local.set-value\" (i32.const 0)) (i32.const -1))",
    "(assert_return (invoke \"as-local.set-value\" (i32.const 1)) (i32.const 17))",
    "(assert_return (invoke \"as-local.tee-value\" (i32.const 0)) (i32.const -1))",
    "(assert_return (invoke \"as-local.tee-value\" (i32.const 1)) (i32.const 1))",
    "(assert_return (invoke \"as-global.set-value\" (i32.const 0)) (i32.const -1))",
    "(assert_return (invoke \"as-global.set-value\" (i32.const 1)) (i32.const 1))",
    "(assert_return (invoke \"as-load-address\") (i32.const 1))",
    "(assert_return (invoke \"as-loadN-address\") (i32.const 30))",
    "(assert_return (invoke \"as-store-address\") (i32.const 30))",
    "(assert_return (invoke \"as-store-value\") (i32.const 31))",
    "(assert_return (invoke \"as-storeN-address\") (i32.const 32))",
    "(assert_return (invoke \"as-storeN-value\") (i32.const 33))",
    "(assert_return (invoke \"as-unary-operand\") (f64.const 1.0))",
    "(assert_return (invoke \"as-binary-left\") (i32.const 1))",
    "(assert_return (invoke \"as-binary-right\") (i32.const 1))",
    "(assert_return (invoke \"as-test-operand\") (i32.const 0))",
    "(assert_return (invoke \"as-compare-left\") (i32.const 1))",
    "(assert_return (invoke \"as-compare-right\") (i32.const 1))",
    "(assert_return (invoke \"as-memory.grow-size\") (i32.const 1))",
    "(assert_return (invoke \"nested-block-value\" (i32.const 0)) (i32.const 21))",
    "(assert_return (invoke \"nested-block-value\" (i32.const 1)) (i32.const 9))",
    "(assert_return (invoke \"nested-br-value\" (i32.const 0)) (i32.const 5))",
    "(assert_return (invoke \"nested-br-value\" (i32.const 1)) (i32.const 9))",
    "(assert_return (invoke \"nested-br_if-value\" (i32.const 0)) (i32.const 5))",
    "(assert_return (invoke \"nested-br_if-value\" (i32.const 1)) (i32.const 9))",
    "(assert_return (invoke \"nested-br_if-value-cond\" (i32.const 0)) (i32.const 5))",
    "(assert_return (invoke \"nested-br_if-value-cond\" (i32.const 1)) (i32.const 9))",
    "(assert_return (invoke \"nested-br_table-value\" (i32.const 0)) (i32.const 5))",
    "(assert_return (invoke \"nested-br_table-value\" (i32.const 1)) (i32.const 9))",
    "(assert_return (invoke \"nested-br_table-value-index\" (i32.const 0)) (i32.const 5))",
    "(assert_return (invoke \"nested-br_table-value-index\" (i32.const 1)) (i32.const 9))",
    "(assert_invalid (module (func $type-false-i32 (block (i32.ctz (br_if 0 (i32.const 0)))))) \"type mismatch\")",
    "(assert_invalid (module (func $type-false-i64 (block (i64.ctz (br_if 0 (i32.const 0)))))) \"type mismatch\")",
    "(assert_invalid (module (func $type-false-f32 (block (f32.neg (br_if 0 (i32.const 0)))))) \"type mismatch\")",
    "(assert_invalid (module (func $type-false-f64 (block (f64.neg (br_if 0 (i32.const 0)))))) \"type mismatch\")",
    "(assert_invalid (module (func $type-true-i32 (block (i32.ctz (br_if 0 (i32.const 1)))))) \"type mismatch\")",
    "(assert_invalid (module (func $type-true-i64 (block (i64.ctz (br_if 0 (i64.const 1)))))) \"type mismatch\")",
    "(assert_invalid (module (func $type-true-f32 (block (f32.neg (br_if 0 (f32.const 1)))))) \"type mismatch\")",
    "(assert_invalid (module (func $type-true-f64 (block (f64.neg (br_if 0 (i64.const 1)))))) \"type mismatch\")",
    "(assert_invalid (module (func $type-false-arg-void-vs-num (result i32) (block (result i32) (br_if 0 (i32.const 0)) (i32.const 1)) )) \"type mismatch\")",
    "(assert_invalid (module (func $type-true-arg-void-vs-num (result i32) (block (result i32) (br_if 0 (i32.const 1)) (i32.const 1)) )) \"type mismatch\")",
    "(assert_invalid (module (func $type-false-arg-num-vs-void (block (br_if 0 (i32.const 0) (i32.const 0))) )) \"type mismatch\")",
    "(assert_invalid (module (func $type-true-arg-num-vs-void (block (br_if 0 (i32.const 0) (i32.const 1))) )) \"type mismatch\")",
    "(assert_invalid (module (func $type-false-arg-void-vs-num (result i32) (block (result i32) (br_if 0 (nop) (i32.const 0)) (i32.const 1)) )) \"type mismatch\")",
    "(assert_invalid (module (func $type-true-arg-void-vs-num (result i32) (block (result i32) (br_if 0 (nop) (i32.const 1)) (i32.const 1)) )) \"type mismatch\")",
    "(assert_invalid (module (func $type-false-arg-num-vs-num (result i32) (block (result i32) (drop (br_if 0 (i64.const 1) (i32.const 0))) (i32.const 1) ) )) \"type mismatch\")",
    "(assert_invalid (module (func $type-true-arg-num-vs-num (result i32) (block (result i32) (drop (br_if 0 (i64.const 1) (i32.const 0))) (i32.const 1) ) )) \"type mismatch\")",
    "(assert_invalid (module (func $type-cond-empty-vs-i32 (block (br_if 0)) )) \"type mismatch\")",
    "(assert_invalid (module (func $type-cond-void-vs-i32 (block (br_if 0 (nop))) )) \"type mismatch\")",
    "(assert_invalid (module (func $type-cond-num-vs-i32 (block (br_if 0 (i64.const 0))) )) \"type mismatch\")",
    "(assert_invalid (module (func $type-arg-cond-void-vs-i32 (result i32) (block (result i32) (br_if 0 (i32.const 0) (nop)) (i32.const 1)) )) \"type mismatch\")",
    "(assert_invalid (module (func $type-arg-void-vs-num-nested (result i32) (block (result i32) (i32.const 0) (block (br_if 1 (i32.const 1)))) )) \"type mismatch\")",
    "(assert_invalid (module (func $type-arg-cond-num-vs-i32 (result i32) (block (result i32) (br_if 0 (i32.const 0) (i64.const 0)) (i32.const 1)) )) \"type mismatch\")",
    "(assert_invalid (module (func $type-1st-cond-empty-in-then (block (i32.const 0) (i32.const 0) (if (result i32) (then (br_if 0))) ) (i32.eqz) (drop) ) ) \"type mismatch\")",
    "(assert_invalid (module (func $type-2nd-cond-empty-in-then (block (i32.const 0) (i32.const 0) (if (result i32) (then (br_if 0 (i32.const 1)))) ) (i32.eqz) (drop) ) ) \"type mismatch\")",
    "(assert_invalid (module (func $type-1st-cond-empty-in-return (block (result i32) (return (br_if 0)) ) (i32.eqz) (drop) ) ) \"type mismatch\")",
    "(assert_invalid (module (func $type-2nd-cond-empty-in-return (block (result i32) (return (br_if 0 (i32.const 1))) ) (i32.eqz) (drop) ) ) \"type mismatch\")",
    "(assert_invalid (module (func $unbound-label (br_if 1 (i32.const 1)))) \"unknown label\")",
    "(assert_invalid (module (func $unbound-nested-label (block (block (br_if 5 (i32.const 1)))))) \"unknown label\")",
    "(assert_invalid (module (func $large-label (br_if 0x10000001 (i32.const 1)))) \"unknown label\")"
  ],
  "dump": {
    "br_if.0.wasm": {
      "header": "\nbr_if.0.wasm:\tfile format wasm 0x1\n\nSections:\n\n     Type start=0x0000000a end=0x00000033 (size=0x00000029) count: 9\n Function start=0x00000035 end=0x00000075 (size=0x00000040) count: 63\n    Table start=0x00000077 end=0x0000007c (size=0x00000005) count: 1\n   Memory start=0x0000007e end=0x00000081 (size=0x00000003) count: 1\n   Global start=0x00000083 end=0x00000089 (size=0x00000006) count: 1\n   Export start=0x0000008c end=0x000004dd (size=0x00000451) count: 60\n     Elem start=0x000004df end=0x000004e6 (size=0x00000007) count: 1\n     Code start=0x000004e9 end=0x00000943 (size=0x0000045a) count: 63\n",
      "details": "\nbr_if.0.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nType[9]:\n - type[0] (i32, i32, i32) -> i32\n - type[1] () -> nil\n - type[2] () -> i32\n - type[3] () -> i64\n - type[4] () -> f32\n - type[5] () -> f64\n - type[6] (i32) -> i32\n - type[7] (i32) -> nil\n - type[8] (i32, i32) -> nil\nFunction[63]:\n - func[0] sig=1\n - func[1] sig=1 <type-i32>\n - func[2] sig=1 <type-i64>\n - func[3] sig=1 <type-f32>\n - func[4] sig=1 <type-f64>\n - func[5] sig=2 <type-i32-value>\n - func[6] sig=3 <type-i64-value>\n - func[7] sig=4 <type-f32-value>\n - func[8] sig=5 <type-f64-value>\n - func[9] sig=6 <as-block-first>\n - func[10] sig=6 <as-block-mid>\n - func[11] sig=7 <as-block-last>\n - func[12] sig=6 <as-block-first-value>\n - func[13] sig=6 <as-block-mid-value>\n - func[14] sig=6 <as-block-last-value>\n - func[15] sig=6 <as-loop-first>\n - func[16] sig=6 <as-loop-mid>\n - func[17] sig=7 <as-loop-last>\n - func[18] sig=2 <as-br-value>\n - func[19] sig=1 <as-br_if-cond>\n - func[20] sig=2 <as-br_if-value>\n - func[21] sig=6 <as-br_if-value-cond>\n - func[22] sig=1 <as-br_table-index>\n - func[23] sig=2 <as-br_table-value>\n - func[24] sig=2 <as-br_table-value-index>\n - func[25] sig=3 <as-return-value>\n - func[26] sig=6 <as-if-cond>\n - func[27] sig=8 <as-if-then>\n - func[28] sig=8 <as-if-else>\n - func[29] sig=6 <as-select-first>\n - func[30] sig=6 <as-select-second>\n - func[31] sig=2 <as-select-cond>\n - func[32] sig=0\n - func[33] sig=2 <as-call-first>\n - func[34] sig=2 <as-call-mid>\n - func[35] sig=2 <as-call-last>\n - func[36] sig=0\n - func[37] sig=2 <as-call_indirect-func>\n - func[38] sig=2 <as-call_indirect-first>\n - func[39] sig=2 <as-call_indirect-mid>\n - func[40] sig=2 <as-call_indirect-last>\n - func[41] sig=6 <as-local.set-value>\n - func[42] sig=6 <as-local.tee-value>\n - func[43] sig=6 <as-global.set-value>\n - func[44] sig=2 <as-load-address>\n - func[45] sig=2 <as-loadN-address>\n - func[46] sig=2 <as-store-address>\n - func[47] sig=2 <as-store-value>\n - func[48] sig=2 <as-storeN-address>\n - func[49] sig=2 <as-storeN-value>\n - func[50] sig=5 <as-unary-operand>\n - func[51] sig=2 <as-binary-left>\n - func[52] sig=2 <as-binary-right>\n - func[53] sig=2 <as-test-operand>\n - func[54] sig=2 <as-compare-left>\n - func[55] sig=2 <as-compare-right>\n - func[56] sig=2 <as-memory.grow-size>\n - func[57] sig=6 <nested-block-value>\n - func[58] sig=6 <nested-br-value>\n - func[59] sig=6 <nested-br_if-value>\n - func[60] sig=6 <nested-br_if-value-cond>\n - func[61] sig=6 <nested-br_table-value>\n - func[62] sig=6 <nested-br_table-value-index>\nTable[1]:\n - table[0] type=funcref initial=1 max=1\nMemory[1]:\n - memory[0] pages: initial=1\nGlobal[1]:\n - global[0] i32 mutable=1 - init i32=10\nExport[60]:\n - func[1] <type-i32> -> \"type-i32\"\n - func[2] <type-i64> -> \"type-i64\"\n - func[3] <type-f32> -> \"type-f32\"\n - func[4] <type-f64> -> \"type-f64\"\n - func[5] <type-i32-value> -> \"type-i32-value\"\n - func[6] <type-i64-value> -> \"type-i64-value\"\n - func[7] <type-f32-value> -> \"type-f32-value\"\n - func[8] <type-f64-value> -> \"type-f64-value\"\n - func[9] <as-block-first> -> \"as-block-first\"\n - func[10] <as-block-mid> -> \"as-block-mid\"\n - func[11] <as-block-last> -> \"as-block-last\"\n - func[12] <as-block-first-value> -> \"as-block-first-value\"\n - func[13] <as-block-mid-value> -> \"as-block-mid-value\"\n - func[14] <as-block-last-value> -> \"as-block-last-value\"\n - func[15] <as-loop-first> -> \"as-loop-first\"\n - func[16] <as-loop-mid> -> \"as-loop-mid\"\n - func[17] <as-loop-last> -> \"as-loop-last\"\n - func[18] <as-br-value> -> \"as-br-value\"\n - func[19] <as-br_if-cond> -> \"as-br_if-cond\"\n - func[20] <as-br_if-value> -> \"as-br_if-value\"\n - func[21] <as-br_if-value-cond> -> \"as-br_if-value-cond\"\n - func[22] <as-br_table-index> -> \"as-br_table-index\"\n - func[23] <as-br_table-value> -> \"as-br_table-value\"\n - func[24] <as-br_table-value-index> -> \"as-br_table-value-index\"\n - func[25] <as-return-value> -> \"as-return-value\"\n - func[26] <as-if-cond> -> \"as-if-cond\"\n - func[27] <as-if-then> -> \"as-if-then\"\n - func[28] <as-if-else> -> \"as-if-else\"\n - func[29] <as-select-first> -> \"as-select-first\"\n - func[30] <as-select-second> -> \"as-select-second\"\n - func[31] <as-select-cond> -> \"as-select-cond\"\n - func[33] <as-call-first> -> \"as-call-first\"\n - func[34] <as-call-mid> -> \"as-call-mid\"\n - func[35] <as-call-last> -> \"as-call-last\"\n - func[37] <as-call_indirect-func> -> \"as-call_indirect-func\"\n - func[38] <as-call_indirect-first> -> \"as-call_indirect-first\"\n - func[39] <as-call_indirect-mid> -> \"as-call_indirect-mid\"\n - func[40] <as-call_indirect-last> -> \"as-call_indirect-last\"\n - func[41] <as-local.set-value> -> \"as-local.set-value\"\n - func[42] <as-local.tee-value> -> \"as-local.tee-value\"\n - func[43] <as-global.set-value> -> \"as-global.set-value\"\n - func[44] <as-load-address> -> \"as-load-address\"\n - func[45] <as-loadN-address> -> \"as-loadN-address\"\n - func[46] <as-store-address> -> \"as-store-address\"\n - func[47] <as-store-value> -> \"as-store-value\"\n - func[48] <as-storeN-address> -> \"as-storeN-address\"\n - func[49] <as-storeN-value> -> \"as-storeN-value\"\n - func[50] <as-unary-operand> -> \"as-unary-operand\"\n - func[51] <as-binary-left> -> \"as-binary-left\"\n - func[52] <as-binary-right> -> \"as-binary-right\"\n - func[53] <as-test-operand> -> \"as-test-operand\"\n - func[54] <as-compare-left> -> \"as-compare-left\"\n - func[55] <as-compare-right> -> \"as-compare-right\"\n - func[56] <as-memory.grow-size> -> \"as-memory.grow-size\"\n - func[57] <nested-block-value> -> \"nested-block-value\"\n - func[58] <nested-br-value> -> \"nested-br-value\"\n - func[59] <nested-br_if-value> -> \"nested-br_if-value\"\n - func[60] <nested-br_if-value-cond> -> \"nested-br_if-value-cond\"\n - func[61] <nested-br_table-value> -> \"nested-br_table-value\"\n - func[62] <nested-br_table-value-index> -> \"nested-br_table-value-index\"\nElem[1]:\n - segment[0] flags=0 table=0 count=1 - init i32=0\n  - elem[0] = ref.func:36\nCode[63]:\n - func[0] size=2\n - func[1] size=13 <type-i32>\n - func[2] size=13 <type-i64>\n - func[3] size=16 <type-f32>\n - func[4] size=20 <type-f64>\n - func[5] size=12 <type-i32-value>\n - func[6] size=12 <type-i64-value>\n - func[7] size=15 <type-f32-value>\n - func[8] size=19 <type-f64-value>\n - func[9] size=14 <as-block-first>\n - func[10] size=16 <as-block-mid>\n - func[11] size=13 <as-block-last>\n - func[12] size=15 <as-block-first-value>\n - func[13] size=17 <as-block-mid-value>\n - func[14] size=15 <as-block-last-value>\n - func[15] size=17 <as-loop-first>\n - func[16] size=19 <as-loop-mid>\n - func[17] size=11 <as-loop-last>\n - func[18] size=13 <as-br-value>\n - func[19] size=13 <as-br_if-cond>\n - func[20] size=18 <as-br_if-value>\n - func[21] size=18 <as-br_if-value-cond>\n - func[22] size=16 <as-br_table-index>\n - func[23] size=20 <as-br_table-value>\n - func[24] size=19 <as-br_table-value-index>\n - func[25] size=12 <as-return-value>\n - func[26] size=19 <as-if-cond>\n - func[27] size=17 <as-if-then>\n - func[28] size=17 <as-if-else>\n - func[29] size=16 <as-select-first>\n - func[30] size=16 <as-select-second>\n - func[31] size=16 <as-select-cond>\n - func[32] size=4\n - func[33] size=17 <as-call-first>\n - func[34] size=17 <as-call-mid>\n - func[35] size=17 <as-call-last>\n - func[36] size=4\n - func[37] size=20 <as-call_indirect-func>\n - func[38] size=20 <as-call_indirect-first>\n - func[39] size=20 <as-call_indirect-mid>\n - func[40] size=20 <as-call_indirect-last>\n - func[41] size=17 <as-local.set-value>\n - func[42] size=16 <as-local.tee-value>\n - func[43] size=16 <as-global.set-value>\n - func[44] size=14 <as-load-address>\n - func[45] size=14 <as-loadN-address>\n - func[46] size=18 <as-store-address>\n - func[47] size=18 <as-store-value>\n - func[48] size=18 <as-storeN-address>\n - func[49] size=18 <as-storeN-value>\n - func[50] size=19 <as-unary-operand>\n - func[51] size=14 <as-binary-left>\n - func[52] size=14 <as-binary-right>\n - func[53] size=12 <as-test-operand>\n - func[54] size=14 <as-compare-left>\n - func[55] size=14 <as-compare-right>\n - func[56] size=13 <as-memory.grow-size>\n - func[57] size=26 <nested-block-value>\n - func[58] size=27 <nested-br-value>\n - func[59] size=30 <nested-br_if-value>\n - func[60] size=30 <nested-br_if-value-cond>\n - func[61] size=30 <nested-br_table-value>\n - func[62] size=30 <nested-br_table-value-index>\n",
      "disassemble": "\nbr_if.0.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n0004eb func[0]:\n 0004ec: 0b                         | end\n0004ee func[1] <type-i32>:\n 0004ef: 02 40                      | block\n 0004f1: 41 00                      |   i32.const 0\n 0004f3: 41 01                      |   i32.const 1\n 0004f5: 0d 00                      |   br_if 0\n 0004f7: 68                         |   i32.ctz\n 0004f8: 1a                         |   drop\n 0004f9: 0b                         | end\n 0004fa: 0b                         | end\n0004fc func[2] <type-i64>:\n 0004fd: 02 40                      | block\n 0004ff: 42 00                      |   i64.const 0\n 000501: 41 01                      |   i32.const 1\n 000503: 0d 00                      |   br_if 0\n 000505: 7a                         |   i64.ctz\n 000506: 1a                         |   drop\n 000507: 0b                         | end\n 000508: 0b                         | end\n00050a func[3] <type-f32>:\n 00050b: 02 40                      | block\n 00050d: 43 00 00 00 00             |   f32.const 0x0p+0\n 000512: 41 01                      |   i32.const 1\n 000514: 0d 00                      |   br_if 0\n 000516: 8c                         |   f32.neg\n 000517: 1a                         |   drop\n 000518: 0b                         | end\n 000519: 0b                         | end\n00051b func[4] <type-f64>:\n 00051c: 02 40                      | block\n 00051e: 44 00 00 00 00 00 00 00 00 |   f64.const 0x0p+0\n 000527: 41 01                      |   i32.const 1\n 000529: 0d 00                      |   br_if 0\n 00052b: 9a                         |   f64.neg\n 00052c: 1a                         |   drop\n 00052d: 0b                         | end\n 00052e: 0b                         | end\n000530 func[5] <type-i32-value>:\n 000531: 02 7f                      | block i32\n 000533: 41 01                      |   i32.const 1\n 000535: 41 01                      |   i32.const 1\n 000537: 0d 00                      |   br_if 0\n 000539: 68                         |   i32.ctz\n 00053a: 0b                         | end\n 00053b: 0b                         | end\n00053d func[6] <type-i64-value>:\n 00053e: 02 7e                      | block i64\n 000540: 42 02                      |   i64.const 2\n 000542: 41 01                      |   i32.const 1\n 000544: 0d 00                      |   br_if 0\n 000546: 7a                         |   i64.ctz\n 000547: 0b                         | end\n 000548: 0b                         | end\n00054a func[7] <type-f32-value>:\n 00054b: 02 7d                      | block f32\n 00054d: 43 00 00 40 40             |   f32.const 0x1.8p+1\n 000552: 41 01                      |   i32.const 1\n 000554: 0d 00                      |   br_if 0\n 000556: 8c                         |   f32.neg\n 000557: 0b                         | end\n 000558: 0b                         | end\n00055a func[8] <type-f64-value>:\n 00055b: 02 7c                      | block f64\n 00055d: 44 00 00 00 00 00 00 10 40 |   f64.const 0x1p+2\n 000566: 41 01                      |   i32.const 1\n 000568: 0d 00                      |   br_if 0\n 00056a: 9a                         |   f64.neg\n 00056b: 0b                         | end\n 00056c: 0b                         | end\n00056e func[9] <as-block-first>:\n 00056f: 02 40                      | block\n 000571: 20 00                      |   local.get 0\n 000573: 0d 00                      |   br_if 0\n 000575: 41 02                      |   i32.const 2\n 000577: 0f                         |   return\n 000578: 0b                         | end\n 000579: 41 03                      | i32.const 3\n 00057b: 0b                         | end\n00057d func[10] <as-block-mid>:\n 00057e: 02 40                      | block\n 000580: 10 00                      |   call 0\n 000582: 20 00                      |   local.get 0\n 000584: 0d 00                      |   br_if 0\n 000586: 41 02                      |   i32.const 2\n 000588: 0f                         |   return\n 000589: 0b                         | end\n 00058a: 41 03                      | i32.const 3\n 00058c: 0b                         | end\n00058e func[11] <as-block-last>:\n 00058f: 02 40                      | block\n 000591: 10 00                      |   call 0\n 000593: 10 00                      |   call 0\n 000595: 20 00                      |   local.get 0\n 000597: 0d 00                      |   br_if 0\n 000599: 0b                         | end\n 00059a: 0b                         | end\n00059c func[12] <as-block-first-value>:\n 00059d: 02 7f                      | block i32\n 00059f: 41 0a                      |   i32.const 10\n 0005a1: 20 00                      |   local.get 0\n 0005a3: 0d 00                      |   br_if 0\n 0005a5: 1a                         |   drop\n 0005a6: 41 0b                      |   i32.const 11\n 0005a8: 0f                         |   return\n 0005a9: 0b                         | end\n 0005aa: 0b                         | end\n0005ac func[13] <as-block-mid-value>:\n 0005ad: 02 7f                      | block i32\n 0005af: 10 00                      |   call 0\n 0005b1: 41 14                      |   i32.const 20\n 0005b3: 20 00                      |   local.get 0\n 0005b5: 0d 00                      |   br_if 0\n 0005b7: 1a                         |   drop\n 0005b8: 41 15                      |   i32.const 21\n 0005ba: 0f                         |   return\n 0005bb: 0b                         | end\n 0005bc: 0b                         | end\n0005be func[14] <as-block-last-value>:\n 0005bf: 02 7f                      | block i32\n 0005c1: 10 00                      |   call 0\n 0005c3: 10 00                      |   call 0\n 0005c5: 41 0b                      |   i32.const 11\n 0005c7: 20 00                      |   local.get 0\n 0005c9: 0d 00                      |   br_if 0\n 0005cb: 0b                         | end\n 0005cc: 0b                         | end\n0005ce func[15] <as-loop-first>:\n 0005cf: 02 40                      | block\n 0005d1: 03 40                      |   loop\n 0005d3: 20 00                      |     local.get 0\n 0005d5: 0d 01                      |     br_if 1\n 0005d7: 41 02                      |     i32.const 2\n 0005d9: 0f                         |     return\n 0005da: 0b                         |   end\n 0005db: 0b                         | end\n 0005dc: 41 03                      | i32.const 3\n 0005de: 0b                         | end\n0005e0 func[16] <as-loop-mid>:\n 0005e1: 02 40                      | block\n 0005e3: 03 40                      |   loop\n 0005e5: 10 00                      |     call 0\n 0005e7: 20 00                      |     local.get 0\n 0005e9: 0d 01                      |     br_if 1\n 0005eb: 41 02                      |     i32.const 2\n 0005ed: 0f                         |     return\n 0005ee: 0b                         |   end\n 0005ef: 0b                         | end\n 0005f0: 41 04                      | i32.const 4\n 0005f2: 0b                         | end\n0005f4 func[17] <as-loop-last>:\n 0005f5: 03 40                      | loop\n 0005f7: 10 00                      |   call 0\n 0005f9: 20 00                      |   local.get 0\n 0005fb: 0d 01                      |   br_if 1\n 0005fd: 0b                         | end\n 0005fe: 0b                         | end\n000600 func[18] <as-br-value>:\n 000601: 02 7f                      | block i32\n 000603: 41 01                      |   i32.const 1\n 000605: 41 02                      |   i32.const 2\n 000607: 0d 00                      |   br_if 0\n 000609: 0c 00                      |   br 0\n 00060b: 0b                         | end\n 00060c: 0b                         | end\n00060e func[19] <as-br_if-cond>:\n 00060f: 02 40                      | block\n 000611: 41 01                      |   i32.const 1\n 000613: 41 01                      |   i32.const 1\n 000615: 0d 00                      |   br_if 0\n 000617: 0d 00                      |   br_if 0\n 000619: 0b                         | end\n 00061a: 0b                         | end\n00061c func[20] <as-br_if-value>:\n 00061d: 02 7f                      | block i32\n 00061f: 41 01                      |   i32.const 1\n 000621: 41 02                      |   i32.const 2\n 000623: 0d 00                      |   br_if 0\n 000625: 41 03                      |   i32.const 3\n 000627: 0d 00                      |   br_if 0\n 000629: 1a                         |   drop\n 00062a: 41 04                      |   i32.const 4\n 00062c: 0b                         | end\n 00062d: 0b                         | end\n00062f func[21] <as-br_if-value-cond>:\n 000630: 02 7f                      | block i32\n 000632: 41 02                      |   i32.const 2\n 000634: 41 01                      |   i32.const 1\n 000636: 20 00                      |   local.get 0\n 000638: 0d 00                      |   br_if 0\n 00063a: 0d 00                      |   br_if 0\n 00063c: 1a                         |   drop\n 00063d: 41 04                      |   i32.const 4\n 00063f: 0b                         | end\n 000640: 0b                         | end\n000642 func[22] <as-br_table-index>:\n 000643: 02 40                      | block\n 000645: 41 01                      |   i32.const 1\n 000647: 41 02                      |   i32.const 2\n 000649: 0d 00                      |   br_if 0\n 00064b: 0e 02 00 00 00             |   br_table 0 0 0\n 000650: 0b                         | end\n 000651: 0b                         | end\n000653 func[23] <as-br_table-value>:\n 000654: 02 7f                      | block i32\n 000656: 41 01                      |   i32.const 1\n 000658: 41 02                      |   i32.const 2\n 00065a: 0d 00                      |   br_if 0\n 00065c: 41 03                      |   i32.const 3\n 00065e: 0e 02 00 00 00             |   br_table 0 0 0\n 000663: 41 04                      |   i32.const 4\n 000665: 0b                         | end\n 000666: 0b                         | end\n000668 func[24] <as-br_table-value-index>:\n 000669: 02 7f                      | block i32\n 00066b: 41 02                      |   i32.const 2\n 00066d: 41 01                      |   i32.const 1\n 00066f: 41 03                      |   i32.const 3\n 000671: 0d 00                      |   br_if 0\n 000673: 0e 01 00 00                |   br_table 0 0\n 000677: 41 04                      |   i32.const 4\n 000679: 0b                         | end\n 00067a: 0b                         | end\n00067c func[25] <as-return-value>:\n 00067d: 02 7e                      | block i64\n 00067f: 42 01                      |   i64.const 1\n 000681: 41 02                      |   i32.const 2\n 000683: 0d 00                      |   br_if 0\n 000685: 0f                         |   return\n 000686: 0b                         | end\n 000687: 0b                         | end\n000689 func[26] <as-if-cond>:\n 00068a: 02 7f                      | block i32\n 00068c: 41 01                      |   i32.const 1\n 00068e: 20 00                      |   local.get 0\n 000690: 0d 00                      |   br_if 0\n 000692: 04 7f                      |   if i32\n 000694: 41 02                      |     i32.const 2\n 000696: 05                         |   else\n 000697: 41 03                      |     i32.const 3\n 000699: 0b                         |   end\n 00069a: 0b                         | end\n 00069b: 0b                         | end\n00069d func[27] <as-if-then>:\n 00069e: 02 40                      | block\n 0006a0: 20 00                      |   local.get 0\n 0006a2: 04 40                      |   if\n 0006a4: 20 01                      |     local.get 1\n 0006a6: 0d 01                      |     br_if 1\n 0006a8: 05                         |   else\n 0006a9: 10 00                      |     call 0\n 0006ab: 0b                         |   end\n 0006ac: 0b                         | end\n 0006ad: 0b                         | end\n0006af func[28] <as-if-else>:\n 0006b0: 02 40                      | block\n 0006b2: 20 00                      |   local.get 0\n 0006b4: 04 40                      |   if\n 0006b6: 10 00                      |     call 0\n 0006b8: 05                         |   else\n 0006b9: 20 01                      |     local.get 1\n 0006bb: 0d 01                      |     br_if 1\n 0006bd: 0b                         |   end\n 0006be: 0b                         | end\n 0006bf: 0b                         | end\n0006c1 func[29] <as-select-first>:\n 0006c2: 02 7f                      | block i32\n 0006c4: 41 03                      |   i32.const 3\n 0006c6: 41 0a                      |   i32.const 10\n 0006c8: 0d 00                      |   br_if 0\n 0006ca: 41 02                      |   i32.const 2\n 0006cc: 20 00                      |   local.get 0\n 0006ce: 1b                         |   select\n 0006cf: 0b                         | end\n 0006d0: 0b                         | end\n0006d2 func[30] <as-select-second>:\n 0006d3: 02 7f                      | block i32\n 0006d5: 41 01                      |   i32.const 1\n 0006d7: 41 03                      |   i32.const 3\n 0006d9: 41 0a                      |   i32.const 10\n 0006db: 0d 00                      |   br_if 0\n 0006dd: 20 00                      |   local.get 0\n 0006df: 1b                         |   select\n 0006e0: 0b                         | end\n 0006e1: 0b                         | end\n0006e3 func[31] <as-select-cond>:\n 0006e4: 02 7f                      | block i32\n 0006e6: 41 01                      |   i32.const 1\n 0006e8: 41 02                      |   i32.const 2\n 0006ea: 41 03                      |   i32.const 3\n 0006ec: 41 0a                      |   i32.const 10\n 0006ee: 0d 00                      |   br_if 0\n 0006f0: 1b                         |   select\n 0006f1: 0b                         | end\n 0006f2: 0b                         | end\n0006f4 func[32]:\n 0006f5: 41 7f                      | i32.const 4294967295\n 0006f7: 0b                         | end\n0006f9 func[33] <as-call-first>:\n 0006fa: 02 7f                      | block i32\n 0006fc: 41 0c                      |   i32.const 12\n 0006fe: 41 01                      |   i32.const 1\n 000700: 0d 00                      |   br_if 0\n 000702: 41 02                      |   i32.const 2\n 000704: 41 03                      |   i32.const 3\n 000706: 10 20                      |   call 32\n 000708: 0b                         | end\n 000709: 0b                         | end\n00070b func[34] <as-call-mid>:\n 00070c: 02 7f                      | block i32\n 00070e: 41 01                      |   i32.const 1\n 000710: 41 0d                      |   i32.const 13\n 000712: 41 01                      |   i32.const 1\n 000714: 0d 00                      |   br_if 0\n 000716: 41 03                      |   i32.const 3\n 000718: 10 20                      |   call 32\n 00071a: 0b                         | end\n 00071b: 0b                         | end\n00071d func[35] <as-call-last>:\n 00071e: 02 7f                      | block i32\n 000720: 41 01                      |   i32.const 1\n 000722: 41 02                      |   i32.const 2\n 000724: 41 0e                      |   i32.const 14\n 000726: 41 01                      |   i32.const 1\n 000728: 0d 00                      |   br_if 0\n 00072a: 10 20                      |   call 32\n 00072c: 0b                         | end\n 00072d: 0b                         | end\n00072f func[36]:\n 000730: 20 00                      | local.get 0\n 000732: 0b                         | end\n000734 func[37] <as-call_indirect-func>:\n 000735: 02 7f                      | block i32\n 000737: 41 04                      |   i32.const 4\n 000739: 41 0a                      |   i32.const 10\n 00073b: 0d 00                      |   br_if 0\n 00073d: 41 01                      |   i32.const 1\n 00073f: 41 02                      |   i32.const 2\n 000741: 41 00                      |   i32.const 0\n 000743: 11 00 00                   |   call_indirect 0 (type 0)\n 000746: 0b                         | end\n 000747: 0b                         | end\n000749 func[38] <as-call_indirect-first>:\n 00074a: 02 7f                      | block i32\n 00074c: 41 01                      |   i32.const 1\n 00074e: 41 04                      |   i32.const 4\n 000750: 41 0a                      |   i32.const 10\n 000752: 0d 00                      |   br_if 0\n 000754: 41 02                      |   i32.const 2\n 000756: 41 00                      |   i32.const 0\n 000758: 11 00 00                   |   call_indirect 0 (type 0)\n 00075b: 0b                         | end\n 00075c: 0b                         | end\n00075e func[39] <as-call_indirect-mid>:\n 00075f: 02 7f                      | block i32\n 000761: 41 01                      |   i32.const 1\n 000763: 41 02                      |   i32.const 2\n 000765: 41 04                      |   i32.const 4\n 000767: 41 0a                      |   i32.const 10\n 000769: 0d 00                      |   br_if 0\n 00076b: 41 00                      |   i32.const 0\n 00076d: 11 00 00                   |   call_indirect 0 (type 0)\n 000770: 0b                         | end\n 000771: 0b                         | end\n000773 func[40] <as-call_indirect-last>:\n 000774: 02 7f                      | block i32\n 000776: 41 01                      |   i32.const 1\n 000778: 41 02                      |   i32.const 2\n 00077a: 41 03                      |   i32.const 3\n 00077c: 41 04                      |   i32.const 4\n 00077e: 41 0a                      |   i32.const 10\n 000780: 0d 00                      |   br_if 0\n 000782: 11 00 00                   |   call_indirect 0 (type 0)\n 000785: 0b                         | end\n 000786: 0b                         | end\n000788 func[41] <as-local.set-value>:\n 000789: 01 7f                      | local[1] type=i32\n 00078b: 02 7f                      | block i32\n 00078d: 41 11                      |   i32.const 17\n 00078f: 20 00                      |   local.get 0\n 000791: 0d 00                      |   br_if 0\n 000793: 21 00                      |   local.set 0\n 000795: 41 7f                      |   i32.const 4294967295\n 000797: 0b                         | end\n 000798: 0b                         | end\n00079a func[42] <as-local.tee-value>:\n 00079b: 02 7f                      | block i32\n 00079d: 41 01                      |   i32.const 1\n 00079f: 20 00                      |   local.get 0\n 0007a1: 0d 00                      |   br_if 0\n 0007a3: 22 00                      |   local.tee 0\n 0007a5: 41 7f                      |   i32.const 4294967295\n 0007a7: 0f                         |   return\n 0007a8: 0b                         | end\n 0007a9: 0b                         | end\n0007ab func[43] <as-global.set-value>:\n 0007ac: 02 7f                      | block i32\n 0007ae: 41 01                      |   i32.const 1\n 0007b0: 20 00                      |   local.get 0\n 0007b2: 0d 00                      |   br_if 0\n 0007b4: 24 00                      |   global.set 0\n 0007b6: 41 7f                      |   i32.const 4294967295\n 0007b8: 0f                         |   return\n 0007b9: 0b                         | end\n 0007ba: 0b                         | end\n0007bc func[44] <as-load-address>:\n 0007bd: 02 7f                      | block i32\n 0007bf: 41 01                      |   i32.const 1\n 0007c1: 41 01                      |   i32.const 1\n 0007c3: 0d 00                      |   br_if 0\n 0007c5: 28 02 00                   |   i32.load 2 0\n 0007c8: 0b                         | end\n 0007c9: 0b                         | end\n0007cb func[45] <as-loadN-address>:\n 0007cc: 02 7f                      | block i32\n 0007ce: 41 1e                      |   i32.const 30\n 0007d0: 41 01                      |   i32.const 1\n 0007d2: 0d 00                      |   br_if 0\n 0007d4: 2c 00 00                   |   i32.load8_s 0 0\n 0007d7: 0b                         | end\n 0007d8: 0b                         | end\n0007da func[46] <as-store-address>:\n 0007db: 02 7f                      | block i32\n 0007dd: 41 1e                      |   i32.const 30\n 0007df: 41 01                      |   i32.const 1\n 0007e1: 0d 00                      |   br_if 0\n 0007e3: 41 07                      |   i32.const 7\n 0007e5: 36 02 00                   |   i32.store 2 0\n 0007e8: 41 7f                      |   i32.const 4294967295\n 0007ea: 0b                         | end\n 0007eb: 0b                         | end\n0007ed func[47] <as-store-value>:\n 0007ee: 02 7f                      | block i32\n 0007f0: 41 02                      |   i32.const 2\n 0007f2: 41 1f                      |   i32.const 31\n 0007f4: 41 01                      |   i32.const 1\n 0007f6: 0d 00                      |   br_if 0\n 0007f8: 36 02 00                   |   i32.store 2 0\n 0007fb: 41 7f                      |   i32.const 4294967295\n 0007fd: 0b                         | end\n 0007fe: 0b                         | end\n000800 func[48] <as-storeN-address>:\n 000801: 02 7f                      | block i32\n 000803: 41 20                      |   i32.const 32\n 000805: 41 01                      |   i32.const 1\n 000807: 0d 00                      |   br_if 0\n 000809: 41 07                      |   i32.const 7\n 00080b: 3a 00 00                   |   i32.store8 0 0\n 00080e: 41 7f                      |   i32.const 4294967295\n 000810: 0b                         | end\n 000811: 0b                         | end\n000813 func[49] <as-storeN-value>:\n 000814: 02 7f                      | block i32\n 000816: 41 02                      |   i32.const 2\n 000818: 41 21                      |   i32.const 33\n 00081a: 41 01                      |   i32.const 1\n 00081c: 0d 00                      |   br_if 0\n 00081e: 3b 01 00                   |   i32.store16 1 0\n 000821: 41 7f                      |   i32.const 4294967295\n 000823: 0b                         | end\n 000824: 0b                         | end\n000826 func[50] <as-unary-operand>:\n 000827: 02 7c                      | block f64\n 000829: 44 00 00 00 00 00 00 f0 3f |   f64.const 0x1p+0\n 000832: 41 01                      |   i32.const 1\n 000834: 0d 00                      |   br_if 0\n 000836: 9a                         |   f64.neg\n 000837: 0b                         | end\n 000838: 0b                         | end\n00083a func[51] <as-binary-left>:\n 00083b: 02 7f                      | block i32\n 00083d: 41 01                      |   i32.const 1\n 00083f: 41 01                      |   i32.const 1\n 000841: 0d 00                      |   br_if 0\n 000843: 41 0a                      |   i32.const 10\n 000845: 6a                         |   i32.add\n 000846: 0b                         | end\n 000847: 0b                         | end\n000849 func[52] <as-binary-right>:\n 00084a: 02 7f                      | block i32\n 00084c: 41 0a                      |   i32.const 10\n 00084e: 41 01                      |   i32.const 1\n 000850: 41 01                      |   i32.const 1\n 000852: 0d 00                      |   br_if 0\n 000854: 6b                         |   i32.sub\n 000855: 0b                         | end\n 000856: 0b                         | end\n000858 func[53] <as-test-operand>:\n 000859: 02 7f                      | block i32\n 00085b: 41 00                      |   i32.const 0\n 00085d: 41 01                      |   i32.const 1\n 00085f: 0d 00                      |   br_if 0\n 000861: 45                         |   i32.eqz\n 000862: 0b                         | end\n 000863: 0b                         | end\n000865 func[54] <as-compare-left>:\n 000866: 02 7f                      | block i32\n 000868: 41 01                      |   i32.const 1\n 00086a: 41 01                      |   i32.const 1\n 00086c: 0d 00                      |   br_if 0\n 00086e: 41 0a                      |   i32.const 10\n 000870: 4d                         |   i32.le_u\n 000871: 0b                         | end\n 000872: 0b                         | end\n000874 func[55] <as-compare-right>:\n 000875: 02 7f                      | block i32\n 000877: 41 0a                      |   i32.const 10\n 000879: 41 01                      |   i32.const 1\n 00087b: 41 2a                      |   i32.const 42\n 00087d: 0d 00                      |   br_if 0\n 00087f: 47                         |   i32.ne\n 000880: 0b                         | end\n 000881: 0b                         | end\n000883 func[56] <as-memory.grow-size>:\n 000884: 02 7f                      | block i32\n 000886: 41 01                      |   i32.const 1\n 000888: 41 01                      |   i32.const 1\n 00088a: 0d 00                      |   br_if 0\n 00088c: 40 00                      |   memory.grow 0\n 00088e: 0b                         | end\n 00088f: 0b                         | end\n000891 func[57] <nested-block-value>:\n 000892: 41 01                      | i32.const 1\n 000894: 02 7f                      | block i32\n 000896: 41 02                      |   i32.const 2\n 000898: 1a                         |   drop\n 000899: 41 04                      |   i32.const 4\n 00089b: 02 7f                      |   block i32\n 00089d: 41 08                      |     i32.const 8\n 00089f: 20 00                      |     local.get 0\n 0008a1: 0d 01                      |     br_if 1\n 0008a3: 1a                         |     drop\n 0008a4: 41 10                      |     i32.const 16\n 0008a6: 0b                         |   end\n 0008a7: 6a                         |   i32.add\n 0008a8: 0b                         | end\n 0008a9: 6a                         | i32.add\n 0008aa: 0b                         | end\n0008ac func[58] <nested-br-value>:\n 0008ad: 41 01                      | i32.const 1\n 0008af: 02 7f                      | block i32\n 0008b1: 41 02                      |   i32.const 2\n 0008b3: 1a                         |   drop\n 0008b4: 02 7f                      |   block i32\n 0008b6: 41 08                      |     i32.const 8\n 0008b8: 20 00                      |     local.get 0\n 0008ba: 0d 01                      |     br_if 1\n 0008bc: 1a                         |     drop\n 0008bd: 41 04                      |     i32.const 4\n 0008bf: 0b                         |   end\n 0008c0: 0c 00                      |   br 0\n 0008c2: 41 10                      |   i32.const 16\n 0008c4: 0b                         | end\n 0008c5: 6a                         | i32.add\n 0008c6: 0b                         | end\n0008c8 func[59] <nested-br_if-value>:\n 0008c9: 41 01                      | i32.const 1\n 0008cb: 02 7f                      | block i32\n 0008cd: 41 02                      |   i32.const 2\n 0008cf: 1a                         |   drop\n 0008d0: 02 7f                      |   block i32\n 0008d2: 41 08                      |     i32.const 8\n 0008d4: 20 00                      |     local.get 0\n 0008d6: 0d 01                      |     br_if 1\n 0008d8: 1a                         |     drop\n 0008d9: 41 04                      |     i32.const 4\n 0008db: 0b                         |   end\n 0008dc: 41 01                      |   i32.const 1\n 0008de: 0d 00                      |   br_if 0\n 0008e0: 1a                         |   drop\n 0008e1: 41 10                      |   i32.const 16\n 0008e3: 0b                         | end\n 0008e4: 6a                         | i32.add\n 0008e5: 0b                         | end\n0008e7 func[60] <nested-br_if-value-cond>:\n 0008e8: 41 01                      | i32.const 1\n 0008ea: 02 7f                      | block i32\n 0008ec: 41 02                      |   i32.const 2\n 0008ee: 1a                         |   drop\n 0008ef: 41 04                      |   i32.const 4\n 0008f1: 02 7f                      |   block i32\n 0008f3: 41 08                      |     i32.const 8\n 0008f5: 20 00                      |     local.get 0\n 0008f7: 0d 01                      |     br_if 1\n 0008f9: 1a                         |     drop\n 0008fa: 41 01                      |     i32.const 1\n 0008fc: 0b                         |   end\n 0008fd: 0d 00                      |   br_if 0\n 0008ff: 1a                         |   drop\n 000900: 41 10                      |   i32.const 16\n 000902: 0b                         | end\n 000903: 6a                         | i32.add\n 000904: 0b                         | end\n000906 func[61] <nested-br_table-value>:\n 000907: 41 01                      | i32.const 1\n 000909: 02 7f                      | block i32\n 00090b: 41 02                      |   i32.const 2\n 00090d: 1a                         |   drop\n 00090e: 02 7f                      |   block i32\n 000910: 41 08                      |     i32.const 8\n 000912: 20 00                      |     local.get 0\n 000914: 0d 01                      |     br_if 1\n 000916: 1a                         |     drop\n 000917: 41 04                      |     i32.const 4\n 000919: 0b                         |   end\n 00091a: 41 01                      |   i32.const 1\n 00091c: 0e 00 00                   |   br_table 0\n 00091f: 41 10                      |   i32.const 16\n 000921: 0b                         | end\n 000922: 6a                         | i32.add\n 000923: 0b                         | end\n000925 func[62] <nested-br_table-value-index>:\n 000926: 41 01                      | i32.const 1\n 000928: 02 7f                      | block i32\n 00092a: 41 02                      |   i32.const 2\n 00092c: 1a                         |   drop\n 00092d: 41 04                      |   i32.const 4\n 00092f: 02 7f                      |   block i32\n 000931: 41 08                      |     i32.const 8\n 000933: 20 00                      |     local.get 0\n 000935: 0d 01                      |     br_if 1\n 000937: 1a                         |     drop\n 000938: 41 01                      |     i32.const 1\n 00093a: 0b                         |   end\n 00093b: 0e 00 00                   |   br_table 0\n 00093e: 41 10                      |   i32.const 16\n 000940: 0b                         | end\n 000941: 6a                         | i32.add\n 000942: 0b                         | end\n"
    }
  }
}
