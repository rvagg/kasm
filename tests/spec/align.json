{
  "bin": {
    "align.0.wasm": "AGFzbQEAAAABBAFgAAADAgEABQMBAAAKCgEIAEEALAAAGgs=",
    "align.1.wasm": "AGFzbQEAAAABBAFgAAADAgEABQMBAAAKCgEIAEEALQAAGgs=",
    "align.10.wasm": "AGFzbQEAAAABBAFgAAADAgEABQMBAAAKCgEIAEEANQIAGgs=",
    "align.100.wasm": "AGFzbQEAAAABBAFgAAADAgEABQMBAAAKCwEJAEEAQgA8AQAL",
    "align.101.wasm": "AGFzbQEAAAABBAFgAAADAgEABQMBAAAKCwEJAEEAQgA9AgAL",
    "align.102.wasm": "AGFzbQEAAAABBAFgAAADAgEABQMBAAAKCwEJAEEAQgA+AwAL",
    "align.103.wasm": "AGFzbQEAAAABBAFgAAADAgEABQMBAAAKCwEJAEEAQgA3BAAL",
    "align.104.wasm": "AGFzbQEAAAABBAFgAAADAgEABQMBAAAKDgEMAEEAQwAAAAA4AwAL",
    "align.105.wasm": "AGFzbQEAAAABBAFgAAADAgEABQMBAAAKEgEQAEEARAAAAAAAAAAAOQQACw==",
    "align.106.wasm": "AGFzbQEAAAABFwRgAX8BfWABfwF8YAJ/fwF/YAJ/fwF+AwUEAAECAwUDAQABB00EEGYzMl9hbGlnbl9zd2l0Y2gAABBmNjRfYWxpZ25fc3dpdGNoAAEQaTMyX2FsaWduX3N3aXRjaAACEGk2NF9hbGlnbl9zd2l0Y2gAAwr7CARjAQJ9QwAAIEEhAQJAAkACQAJAAkAgAA4EAAECAwQLQQAgATgCAEEAKgIAIQIMAwtBACABOAAAQQAqAAAhAgwCC0EAIAE4AQBBACoBACECDAELQQAgATgCAEEAKgIAIQILIAILewECfEQAAAAAAAAkQCEBAkACQAJAAkACQAJAIAAOBQABAgMEBQtBACABOQMAQQArAwAhAgwEC0EAIAE5AABBACsAACECDAMLQQAgATkBAEEAKwEAIQIMAgtBACABOQIAQQArAgAhAgwBC0EAIAE5AwBBACsDACECCyACC+ICAQJ/QQohAgJAAkACQAJAAkACQCAADgUAAQIDBAULIAFBAEYEQEEAIAI6AABBACwAACEDCyABQQFGBEBBACACOgAAQQAsAAAhAwsMBAsgAUEARgRAQQAgAjoAAEEALQAAIQMLIAFBAUYEQEEAIAI6AABBAC0AACEDCwwDCyABQQBGBEBBACACOwEAQQAuAQAhAwsgAUEBRgRAQQAgAjsAAEEALgAAIQMLIAFBAkYEQEEAIAI7AQBBAC4BACEDCwwCCyABQQBGBEBBACACOwEAQQAvAQAhAwsgAUEBRgRAQQAgAjsAAEEALwAAIQMLIAFBAkYEQEEAIAI7AQBBAC8BACEDCwwBCyABQQBGBEBBACACNgIAQQAoAgAhAwsgAUEBRgRAQQAgAjYAAEEAKAAAIQMLIAFBAkYEQEEAIAI2AQBBACgBACEDCyABQQRGBEBBACACNgIAQQAoAgAhAwsLIAMLtAQBAn5CCiECAkACQAJAAkACQAJAAkACQCAADgcAAQIDBAUGBwsgAUEARgRAQQAgAjwAAEEAMAAAIQMLIAFBAUYEQEEAIAI8AABBADAAACEDCwwGCyABQQBGBEBBACACPAAAQQAxAAAhAwsgAUEBRgRAQQAgAjwAAEEAMQAAIQMLDAULIAFBAEYEQEEAIAI9AQBBADIBACEDCyABQQFGBEBBACACPQAAQQAyAAAhAwsgAUECRgRAQQAgAj0BAEEAMgEAIQMLDAQLIAFBAEYEQEEAIAI9AQBBADMBACEDCyABQQFGBEBBACACPQAAQQAzAAAhAwsgAUECRgRAQQAgAj0BAEEAMwEAIQMLDAMLIAFBAEYEQEEAIAI+AgBBADQCACEDCyABQQFGBEBBACACPgAAQQA0AAAhAwsgAUECRgRAQQAgAj4BAEEANAEAIQMLIAFBBEYEQEEAIAI+AgBBADQCACEDCwwCCyABQQBGBEBBACACPgIAQQA1AgAhAwsgAUEBRgRAQQAgAj4AAEEANQAAIQMLIAFBAkYEQEEAIAI+AQBBADUBACEDCyABQQRGBEBBACACPgIAQQA1AgAhAwsMAQsgAUEARgRAQQAgAjcDAEEAKQMAIQMLIAFBAUYEQEEAIAI3AABBACkAACEDCyABQQJGBEBBACACNwEAQQApAQAhAwsgAUEERgRAQQAgAjcCAEEAKQIAIQMLIAFBCEYEQEEAIAI3AwBBACkDACEDCwsgAws=",
    "align.107.wasm": "AGFzbQEAAAABCwJgAn9+AGABfwF/AwMCAAEFAwEAAQcQAgVzdG9yZQAABGxvYWQAAQoTAgkAIAAgATcCAAsHACAAKAIACw==",
    "align.11.wasm": "AGFzbQEAAAABBAFgAAADAgEABQMBAAAKCgEIAEEAKQMAGgs=",
    "align.12.wasm": "AGFzbQEAAAABBAFgAAADAgEABQMBAAAKCgEIAEEAKgIAGgs=",
    "align.13.wasm": "AGFzbQEAAAABBAFgAAADAgEABQMBAAAKCgEIAEEAKwMAGgs=",
    "align.14.wasm": "AGFzbQEAAAABBAFgAAADAgEABQMBAAAKCwEJAEEAQQE6AAAL",
    "align.15.wasm": "AGFzbQEAAAABBAFgAAADAgEABQMBAAAKCwEJAEEAQQE7AQAL",
    "align.16.wasm": "AGFzbQEAAAABBAFgAAADAgEABQMBAAAKCwEJAEEAQQE2AgAL",
    "align.17.wasm": "AGFzbQEAAAABBAFgAAADAgEABQMBAAAKCwEJAEEAQgE8AAAL",
    "align.18.wasm": "AGFzbQEAAAABBAFgAAADAgEABQMBAAAKCwEJAEEAQgE9AQAL",
    "align.19.wasm": "AGFzbQEAAAABBAFgAAADAgEABQMBAAAKCwEJAEEAQgE+AgAL",
    "align.2.wasm": "AGFzbQEAAAABBAFgAAADAgEABQMBAAAKCgEIAEEALgEAGgs=",
    "align.20.wasm": "AGFzbQEAAAABBAFgAAADAgEABQMBAAAKCwEJAEEAQgE3AwAL",
    "align.21.wasm": "AGFzbQEAAAABBAFgAAADAgEABQMBAAAKDgEMAEEAQwAAgD84AgAL",
    "align.22.wasm": "AGFzbQEAAAABBAFgAAADAgEABQMBAAAKEgEQAEEARAAAAAAAAPA/OQMACw==",
    "align.23.wat": "KG1vZHVsZSAobWVtb3J5IDApIChmdW5jIChkcm9wIChpMzIubG9hZDhfcyBhbGlnbj0wIChpMzIuY29uc3QgMCkpKSkp",
    "align.24.wat": "KG1vZHVsZSAobWVtb3J5IDApIChmdW5jIChkcm9wIChpMzIubG9hZDhfcyBhbGlnbj03IChpMzIuY29uc3QgMCkpKSkp",
    "align.25.wat": "KG1vZHVsZSAobWVtb3J5IDApIChmdW5jIChkcm9wIChpMzIubG9hZDhfdSBhbGlnbj0wIChpMzIuY29uc3QgMCkpKSkp",
    "align.26.wat": "KG1vZHVsZSAobWVtb3J5IDApIChmdW5jIChkcm9wIChpMzIubG9hZDhfdSBhbGlnbj03IChpMzIuY29uc3QgMCkpKSkp",
    "align.27.wat": "KG1vZHVsZSAobWVtb3J5IDApIChmdW5jIChkcm9wIChpMzIubG9hZDE2X3MgYWxpZ249MCAoaTMyLmNvbnN0IDApKSkpKQ==",
    "align.28.wat": "KG1vZHVsZSAobWVtb3J5IDApIChmdW5jIChkcm9wIChpMzIubG9hZDE2X3MgYWxpZ249NyAoaTMyLmNvbnN0IDApKSkpKQ==",
    "align.29.wat": "KG1vZHVsZSAobWVtb3J5IDApIChmdW5jIChkcm9wIChpMzIubG9hZDE2X3UgYWxpZ249MCAoaTMyLmNvbnN0IDApKSkpKQ==",
    "align.3.wasm": "AGFzbQEAAAABBAFgAAADAgEABQMBAAAKCgEIAEEALwEAGgs=",
    "align.30.wat": "KG1vZHVsZSAobWVtb3J5IDApIChmdW5jIChkcm9wIChpMzIubG9hZDE2X3UgYWxpZ249NyAoaTMyLmNvbnN0IDApKSkpKQ==",
    "align.31.wat": "KG1vZHVsZSAobWVtb3J5IDApIChmdW5jIChkcm9wIChpMzIubG9hZCBhbGlnbj0wIChpMzIuY29uc3QgMCkpKSkp",
    "align.32.wat": "KG1vZHVsZSAobWVtb3J5IDApIChmdW5jIChkcm9wIChpMzIubG9hZCBhbGlnbj03IChpMzIuY29uc3QgMCkpKSkp",
    "align.33.wat": "KG1vZHVsZSAobWVtb3J5IDApIChmdW5jIChkcm9wIChpNjQubG9hZDhfcyBhbGlnbj0wIChpMzIuY29uc3QgMCkpKSkp",
    "align.34.wat": "KG1vZHVsZSAobWVtb3J5IDApIChmdW5jIChkcm9wIChpNjQubG9hZDhfcyBhbGlnbj03IChpMzIuY29uc3QgMCkpKSkp",
    "align.35.wat": "KG1vZHVsZSAobWVtb3J5IDApIChmdW5jIChkcm9wIChpNjQubG9hZDhfdSBhbGlnbj0wIChpMzIuY29uc3QgMCkpKSkp",
    "align.36.wat": "KG1vZHVsZSAobWVtb3J5IDApIChmdW5jIChkcm9wIChpNjQubG9hZDhfdSBhbGlnbj03IChpMzIuY29uc3QgMCkpKSkp",
    "align.37.wat": "KG1vZHVsZSAobWVtb3J5IDApIChmdW5jIChkcm9wIChpNjQubG9hZDE2X3MgYWxpZ249MCAoaTMyLmNvbnN0IDApKSkpKQ==",
    "align.38.wat": "KG1vZHVsZSAobWVtb3J5IDApIChmdW5jIChkcm9wIChpNjQubG9hZDE2X3MgYWxpZ249NyAoaTMyLmNvbnN0IDApKSkpKQ==",
    "align.39.wat": "KG1vZHVsZSAobWVtb3J5IDApIChmdW5jIChkcm9wIChpNjQubG9hZDE2X3UgYWxpZ249MCAoaTMyLmNvbnN0IDApKSkpKQ==",
    "align.4.wasm": "AGFzbQEAAAABBAFgAAADAgEABQMBAAAKCgEIAEEAKAIAGgs=",
    "align.40.wat": "KG1vZHVsZSAobWVtb3J5IDApIChmdW5jIChkcm9wIChpNjQubG9hZDE2X3UgYWxpZ249NyAoaTMyLmNvbnN0IDApKSkpKQ==",
    "align.41.wat": "KG1vZHVsZSAobWVtb3J5IDApIChmdW5jIChkcm9wIChpNjQubG9hZDMyX3MgYWxpZ249MCAoaTMyLmNvbnN0IDApKSkpKQ==",
    "align.42.wat": "KG1vZHVsZSAobWVtb3J5IDApIChmdW5jIChkcm9wIChpNjQubG9hZDMyX3MgYWxpZ249NyAoaTMyLmNvbnN0IDApKSkpKQ==",
    "align.43.wat": "KG1vZHVsZSAobWVtb3J5IDApIChmdW5jIChkcm9wIChpNjQubG9hZDMyX3UgYWxpZ249MCAoaTMyLmNvbnN0IDApKSkpKQ==",
    "align.44.wat": "KG1vZHVsZSAobWVtb3J5IDApIChmdW5jIChkcm9wIChpNjQubG9hZDMyX3UgYWxpZ249NyAoaTMyLmNvbnN0IDApKSkpKQ==",
    "align.45.wat": "KG1vZHVsZSAobWVtb3J5IDApIChmdW5jIChkcm9wIChpNjQubG9hZCBhbGlnbj0wIChpMzIuY29uc3QgMCkpKSkp",
    "align.46.wat": "KG1vZHVsZSAobWVtb3J5IDApIChmdW5jIChkcm9wIChpNjQubG9hZCBhbGlnbj03IChpMzIuY29uc3QgMCkpKSkp",
    "align.47.wat": "KG1vZHVsZSAobWVtb3J5IDApIChmdW5jIChkcm9wIChmMzIubG9hZCBhbGlnbj0wIChpMzIuY29uc3QgMCkpKSkp",
    "align.48.wat": "KG1vZHVsZSAobWVtb3J5IDApIChmdW5jIChkcm9wIChmMzIubG9hZCBhbGlnbj03IChpMzIuY29uc3QgMCkpKSkp",
    "align.49.wat": "KG1vZHVsZSAobWVtb3J5IDApIChmdW5jIChkcm9wIChmNjQubG9hZCBhbGlnbj0wIChpMzIuY29uc3QgMCkpKSkp",
    "align.5.wasm": "AGFzbQEAAAABBAFgAAADAgEABQMBAAAKCgEIAEEAMAAAGgs=",
    "align.50.wat": "KG1vZHVsZSAobWVtb3J5IDApIChmdW5jIChkcm9wIChmNjQubG9hZCBhbGlnbj03IChpMzIuY29uc3QgMCkpKSkp",
    "align.51.wat": "KG1vZHVsZSAobWVtb3J5IDApIChmdW5jIChpMzIuc3RvcmU4IGFsaWduPTAgKGkzMi5jb25zdCAwKSAoaTMyLmNvbnN0IDApKSkp",
    "align.52.wat": "KG1vZHVsZSAobWVtb3J5IDApIChmdW5jIChpMzIuc3RvcmU4IGFsaWduPTcgKGkzMi5jb25zdCAwKSAoaTMyLmNvbnN0IDApKSkp",
    "align.53.wat": "KG1vZHVsZSAobWVtb3J5IDApIChmdW5jIChpMzIuc3RvcmUxNiBhbGlnbj0wIChpMzIuY29uc3QgMCkgKGkzMi5jb25zdCAwKSkpKQ==",
    "align.54.wat": "KG1vZHVsZSAobWVtb3J5IDApIChmdW5jIChpMzIuc3RvcmUxNiBhbGlnbj03IChpMzIuY29uc3QgMCkgKGkzMi5jb25zdCAwKSkpKQ==",
    "align.55.wat": "KG1vZHVsZSAobWVtb3J5IDApIChmdW5jIChpMzIuc3RvcmUgYWxpZ249MCAoaTMyLmNvbnN0IDApIChpMzIuY29uc3QgMCkpKSk=",
    "align.56.wat": "KG1vZHVsZSAobWVtb3J5IDApIChmdW5jIChpMzIuc3RvcmUgYWxpZ249NyAoaTMyLmNvbnN0IDApIChpMzIuY29uc3QgMCkpKSk=",
    "align.57.wat": "KG1vZHVsZSAobWVtb3J5IDApIChmdW5jIChpNjQuc3RvcmU4IGFsaWduPTAgKGkzMi5jb25zdCAwKSAoaTY0LmNvbnN0IDApKSkp",
    "align.58.wat": "KG1vZHVsZSAobWVtb3J5IDApIChmdW5jIChpNjQuc3RvcmU4IGFsaWduPTcgKGkzMi5jb25zdCAwKSAoaTY0LmNvbnN0IDApKSkp",
    "align.59.wat": "KG1vZHVsZSAobWVtb3J5IDApIChmdW5jIChpNjQuc3RvcmUxNiBhbGlnbj0wIChpMzIuY29uc3QgMCkgKGk2NC5jb25zdCAwKSkpKQ==",
    "align.6.wasm": "AGFzbQEAAAABBAFgAAADAgEABQMBAAAKCgEIAEEAMQAAGgs=",
    "align.60.wat": "KG1vZHVsZSAobWVtb3J5IDApIChmdW5jIChpNjQuc3RvcmUxNiBhbGlnbj03IChpMzIuY29uc3QgMCkgKGk2NC5jb25zdCAwKSkpKQ==",
    "align.61.wat": "KG1vZHVsZSAobWVtb3J5IDApIChmdW5jIChpNjQuc3RvcmUzMiBhbGlnbj0wIChpMzIuY29uc3QgMCkgKGk2NC5jb25zdCAwKSkpKQ==",
    "align.62.wat": "KG1vZHVsZSAobWVtb3J5IDApIChmdW5jIChpNjQuc3RvcmUzMiBhbGlnbj03IChpMzIuY29uc3QgMCkgKGk2NC5jb25zdCAwKSkpKQ==",
    "align.63.wat": "KG1vZHVsZSAobWVtb3J5IDApIChmdW5jIChpNjQuc3RvcmUgYWxpZ249MCAoaTMyLmNvbnN0IDApIChpNjQuY29uc3QgMCkpKSk=",
    "align.64.wat": "KG1vZHVsZSAobWVtb3J5IDApIChmdW5jIChpNjQuc3RvcmUgYWxpZ249NyAoaTMyLmNvbnN0IDApIChpNjQuY29uc3QgMCkpKSk=",
    "align.65.wat": "KG1vZHVsZSAobWVtb3J5IDApIChmdW5jIChmMzIuc3RvcmUgYWxpZ249MCAoaTMyLmNvbnN0IDApIChmMzIuY29uc3QgMCkpKSk=",
    "align.66.wat": "KG1vZHVsZSAobWVtb3J5IDApIChmdW5jIChmMzIuc3RvcmUgYWxpZ249NyAoaTMyLmNvbnN0IDApIChmMzIuY29uc3QgMCkpKSk=",
    "align.67.wat": "KG1vZHVsZSAobWVtb3J5IDApIChmdW5jIChmNjQuc3RvcmUgYWxpZ249MCAoaTMyLmNvbnN0IDApIChmMzIuY29uc3QgMCkpKSk=",
    "align.68.wat": "KG1vZHVsZSAobWVtb3J5IDApIChmdW5jIChmNjQuc3RvcmUgYWxpZ249NyAoaTMyLmNvbnN0IDApIChmMzIuY29uc3QgMCkpKSk=",
    "align.69.wasm": "AGFzbQEAAAABBAFgAAADAgEABQMBAAAKCgEIAEEALAEAGgs=",
    "align.7.wasm": "AGFzbQEAAAABBAFgAAADAgEABQMBAAAKCgEIAEEAMgEAGgs=",
    "align.70.wasm": "AGFzbQEAAAABBAFgAAADAgEABQMBAAAKCgEIAEEALQEAGgs=",
    "align.71.wasm": "AGFzbQEAAAABBAFgAAADAgEABQMBAAAKCgEIAEEALgIAGgs=",
    "align.72.wasm": "AGFzbQEAAAABBAFgAAADAgEABQMBAAAKCgEIAEEALwIAGgs=",
    "align.73.wasm": "AGFzbQEAAAABBAFgAAADAgEABQMBAAAKCgEIAEEAKAMAGgs=",
    "align.74.wasm": "AGFzbQEAAAABBAFgAAADAgEABQMBAAAKCgEIAEEAMAEAGgs=",
    "align.75.wasm": "AGFzbQEAAAABBAFgAAADAgEABQMBAAAKCgEIAEEAMQEAGgs=",
    "align.76.wasm": "AGFzbQEAAAABBAFgAAADAgEABQMBAAAKCgEIAEEAMgIAGgs=",
    "align.77.wasm": "AGFzbQEAAAABBAFgAAADAgEABQMBAAAKCgEIAEEAMwIAGgs=",
    "align.78.wasm": "AGFzbQEAAAABBAFgAAADAgEABQMBAAAKCgEIAEEANAMAGgs=",
    "align.79.wasm": "AGFzbQEAAAABBAFgAAADAgEABQMBAAAKCgEIAEEANQMAGgs=",
    "align.8.wasm": "AGFzbQEAAAABBAFgAAADAgEABQMBAAAKCgEIAEEAMwEAGgs=",
    "align.80.wasm": "AGFzbQEAAAABBAFgAAADAgEABQMBAAAKCgEIAEEAKQQAGgs=",
    "align.81.wasm": "AGFzbQEAAAABBAFgAAADAgEABQMBAAAKCgEIAEEAKgMAGgs=",
    "align.82.wasm": "AGFzbQEAAAABBAFgAAADAgEABQMBAAAKCgEIAEEAKwQAGgs=",
    "align.83.wasm": "AGFzbQEAAAABBAFgAAADAgEABQMBAAAKCgEIAEEALAEAGgs=",
    "align.84.wasm": "AGFzbQEAAAABBAFgAAADAgEABQMBAAAKCgEIAEEALQEAGgs=",
    "align.85.wasm": "AGFzbQEAAAABBAFgAAADAgEABQMBAAAKCgEIAEEALgIAGgs=",
    "align.86.wasm": "AGFzbQEAAAABBAFgAAADAgEABQMBAAAKCgEIAEEALwIAGgs=",
    "align.87.wasm": "AGFzbQEAAAABBAFgAAADAgEABQMBAAAKCgEIAEEAKAMAGgs=",
    "align.88.wasm": "AGFzbQEAAAABBAFgAAADAgEABQMBAAAKCgEIAEEAMAEAGgs=",
    "align.89.wasm": "AGFzbQEAAAABBAFgAAADAgEABQMBAAAKCgEIAEEAMQEAGgs=",
    "align.9.wasm": "AGFzbQEAAAABBAFgAAADAgEABQMBAAAKCgEIAEEANAIAGgs=",
    "align.90.wasm": "AGFzbQEAAAABBAFgAAADAgEABQMBAAAKCgEIAEEAMgIAGgs=",
    "align.91.wasm": "AGFzbQEAAAABBAFgAAADAgEABQMBAAAKCgEIAEEAMwIAGgs=",
    "align.92.wasm": "AGFzbQEAAAABBAFgAAADAgEABQMBAAAKCgEIAEEANAMAGgs=",
    "align.93.wasm": "AGFzbQEAAAABBAFgAAADAgEABQMBAAAKCgEIAEEANQMAGgs=",
    "align.94.wasm": "AGFzbQEAAAABBAFgAAADAgEABQMBAAAKCgEIAEEAKQQAGgs=",
    "align.95.wasm": "AGFzbQEAAAABBAFgAAADAgEABQMBAAAKCgEIAEEAKgMAGgs=",
    "align.96.wasm": "AGFzbQEAAAABBAFgAAADAgEABQMBAAAKCgEIAEEAKwQAGgs=",
    "align.97.wasm": "AGFzbQEAAAABBAFgAAADAgEABQMBAAAKCwEJAEEAQQA6AQAL",
    "align.98.wasm": "AGFzbQEAAAABBAFgAAADAgEABQMBAAAKCwEJAEEAQQA7AgAL",
    "align.99.wasm": "AGFzbQEAAAABBAFgAAADAgEABQMBAAAKCwEJAEEAQQA2AwAL"
  },
  "spec": {"source_filename": "/Users/rvagg/git/webassembly/spec/test/core/align.wast",
 "commands": [
  {"type": "module", "line": 3, "filename": "align.0.wasm"}, 
  {"type": "module", "line": 4, "filename": "align.1.wasm"}, 
  {"type": "module", "line": 5, "filename": "align.2.wasm"}, 
  {"type": "module", "line": 6, "filename": "align.3.wasm"}, 
  {"type": "module", "line": 7, "filename": "align.4.wasm"}, 
  {"type": "module", "line": 8, "filename": "align.5.wasm"}, 
  {"type": "module", "line": 9, "filename": "align.6.wasm"}, 
  {"type": "module", "line": 10, "filename": "align.7.wasm"}, 
  {"type": "module", "line": 11, "filename": "align.8.wasm"}, 
  {"type": "module", "line": 12, "filename": "align.9.wasm"}, 
  {"type": "module", "line": 13, "filename": "align.10.wasm"}, 
  {"type": "module", "line": 14, "filename": "align.11.wasm"}, 
  {"type": "module", "line": 15, "filename": "align.12.wasm"}, 
  {"type": "module", "line": 16, "filename": "align.13.wasm"}, 
  {"type": "module", "line": 17, "filename": "align.14.wasm"}, 
  {"type": "module", "line": 18, "filename": "align.15.wasm"}, 
  {"type": "module", "line": 19, "filename": "align.16.wasm"}, 
  {"type": "module", "line": 20, "filename": "align.17.wasm"}, 
  {"type": "module", "line": 21, "filename": "align.18.wasm"}, 
  {"type": "module", "line": 22, "filename": "align.19.wasm"}, 
  {"type": "module", "line": 23, "filename": "align.20.wasm"}, 
  {"type": "module", "line": 24, "filename": "align.21.wasm"}, 
  {"type": "module", "line": 25, "filename": "align.22.wasm"}, 
  {"type": "assert_malformed", "line": 28, "filename": "align.23.wat", "text": "alignment", "module_type": "text"}, 
  {"type": "assert_malformed", "line": 34, "filename": "align.24.wat", "text": "alignment", "module_type": "text"}, 
  {"type": "assert_malformed", "line": 40, "filename": "align.25.wat", "text": "alignment", "module_type": "text"}, 
  {"type": "assert_malformed", "line": 46, "filename": "align.26.wat", "text": "alignment", "module_type": "text"}, 
  {"type": "assert_malformed", "line": 52, "filename": "align.27.wat", "text": "alignment", "module_type": "text"}, 
  {"type": "assert_malformed", "line": 58, "filename": "align.28.wat", "text": "alignment", "module_type": "text"}, 
  {"type": "assert_malformed", "line": 64, "filename": "align.29.wat", "text": "alignment", "module_type": "text"}, 
  {"type": "assert_malformed", "line": 70, "filename": "align.30.wat", "text": "alignment", "module_type": "text"}, 
  {"type": "assert_malformed", "line": 76, "filename": "align.31.wat", "text": "alignment", "module_type": "text"}, 
  {"type": "assert_malformed", "line": 82, "filename": "align.32.wat", "text": "alignment", "module_type": "text"}, 
  {"type": "assert_malformed", "line": 88, "filename": "align.33.wat", "text": "alignment", "module_type": "text"}, 
  {"type": "assert_malformed", "line": 94, "filename": "align.34.wat", "text": "alignment", "module_type": "text"}, 
  {"type": "assert_malformed", "line": 100, "filename": "align.35.wat", "text": "alignment", "module_type": "text"}, 
  {"type": "assert_malformed", "line": 106, "filename": "align.36.wat", "text": "alignment", "module_type": "text"}, 
  {"type": "assert_malformed", "line": 112, "filename": "align.37.wat", "text": "alignment", "module_type": "text"}, 
  {"type": "assert_malformed", "line": 118, "filename": "align.38.wat", "text": "alignment", "module_type": "text"}, 
  {"type": "assert_malformed", "line": 124, "filename": "align.39.wat", "text": "alignment", "module_type": "text"}, 
  {"type": "assert_malformed", "line": 130, "filename": "align.40.wat", "text": "alignment", "module_type": "text"}, 
  {"type": "assert_malformed", "line": 136, "filename": "align.41.wat", "text": "alignment", "module_type": "text"}, 
  {"type": "assert_malformed", "line": 142, "filename": "align.42.wat", "text": "alignment", "module_type": "text"}, 
  {"type": "assert_malformed", "line": 148, "filename": "align.43.wat", "text": "alignment", "module_type": "text"}, 
  {"type": "assert_malformed", "line": 154, "filename": "align.44.wat", "text": "alignment", "module_type": "text"}, 
  {"type": "assert_malformed", "line": 160, "filename": "align.45.wat", "text": "alignment", "module_type": "text"}, 
  {"type": "assert_malformed", "line": 166, "filename": "align.46.wat", "text": "alignment", "module_type": "text"}, 
  {"type": "assert_malformed", "line": 172, "filename": "align.47.wat", "text": "alignment", "module_type": "text"}, 
  {"type": "assert_malformed", "line": 178, "filename": "align.48.wat", "text": "alignment", "module_type": "text"}, 
  {"type": "assert_malformed", "line": 184, "filename": "align.49.wat", "text": "alignment", "module_type": "text"}, 
  {"type": "assert_malformed", "line": 190, "filename": "align.50.wat", "text": "alignment", "module_type": "text"}, 
  {"type": "assert_malformed", "line": 197, "filename": "align.51.wat", "text": "alignment", "module_type": "text"}, 
  {"type": "assert_malformed", "line": 203, "filename": "align.52.wat", "text": "alignment", "module_type": "text"}, 
  {"type": "assert_malformed", "line": 209, "filename": "align.53.wat", "text": "alignment", "module_type": "text"}, 
  {"type": "assert_malformed", "line": 215, "filename": "align.54.wat", "text": "alignment", "module_type": "text"}, 
  {"type": "assert_malformed", "line": 221, "filename": "align.55.wat", "text": "alignment", "module_type": "text"}, 
  {"type": "assert_malformed", "line": 227, "filename": "align.56.wat", "text": "alignment", "module_type": "text"}, 
  {"type": "assert_malformed", "line": 233, "filename": "align.57.wat", "text": "alignment", "module_type": "text"}, 
  {"type": "assert_malformed", "line": 239, "filename": "align.58.wat", "text": "alignment", "module_type": "text"}, 
  {"type": "assert_malformed", "line": 245, "filename": "align.59.wat", "text": "alignment", "module_type": "text"}, 
  {"type": "assert_malformed", "line": 251, "filename": "align.60.wat", "text": "alignment", "module_type": "text"}, 
  {"type": "assert_malformed", "line": 257, "filename": "align.61.wat", "text": "alignment", "module_type": "text"}, 
  {"type": "assert_malformed", "line": 263, "filename": "align.62.wat", "text": "alignment", "module_type": "text"}, 
  {"type": "assert_malformed", "line": 269, "filename": "align.63.wat", "text": "alignment", "module_type": "text"}, 
  {"type": "assert_malformed", "line": 275, "filename": "align.64.wat", "text": "alignment", "module_type": "text"}, 
  {"type": "assert_malformed", "line": 281, "filename": "align.65.wat", "text": "alignment", "module_type": "text"}, 
  {"type": "assert_malformed", "line": 287, "filename": "align.66.wat", "text": "alignment", "module_type": "text"}, 
  {"type": "assert_malformed", "line": 293, "filename": "align.67.wat", "text": "alignment", "module_type": "text"}, 
  {"type": "assert_malformed", "line": 299, "filename": "align.68.wat", "text": "alignment", "module_type": "text"}, 
  {"type": "assert_invalid", "line": 306, "filename": "align.69.wasm", "text": "alignment must not be larger than natural", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 310, "filename": "align.70.wasm", "text": "alignment must not be larger than natural", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 314, "filename": "align.71.wasm", "text": "alignment must not be larger than natural", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 318, "filename": "align.72.wasm", "text": "alignment must not be larger than natural", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 322, "filename": "align.73.wasm", "text": "alignment must not be larger than natural", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 326, "filename": "align.74.wasm", "text": "alignment must not be larger than natural", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 330, "filename": "align.75.wasm", "text": "alignment must not be larger than natural", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 334, "filename": "align.76.wasm", "text": "alignment must not be larger than natural", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 338, "filename": "align.77.wasm", "text": "alignment must not be larger than natural", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 342, "filename": "align.78.wasm", "text": "alignment must not be larger than natural", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 346, "filename": "align.79.wasm", "text": "alignment must not be larger than natural", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 350, "filename": "align.80.wasm", "text": "alignment must not be larger than natural", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 354, "filename": "align.81.wasm", "text": "alignment must not be larger than natural", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 358, "filename": "align.82.wasm", "text": "alignment must not be larger than natural", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 363, "filename": "align.83.wasm", "text": "alignment must not be larger than natural", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 367, "filename": "align.84.wasm", "text": "alignment must not be larger than natural", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 371, "filename": "align.85.wasm", "text": "alignment must not be larger than natural", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 375, "filename": "align.86.wasm", "text": "alignment must not be larger than natural", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 379, "filename": "align.87.wasm", "text": "alignment must not be larger than natural", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 383, "filename": "align.88.wasm", "text": "alignment must not be larger than natural", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 387, "filename": "align.89.wasm", "text": "alignment must not be larger than natural", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 391, "filename": "align.90.wasm", "text": "alignment must not be larger than natural", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 395, "filename": "align.91.wasm", "text": "alignment must not be larger than natural", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 399, "filename": "align.92.wasm", "text": "alignment must not be larger than natural", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 403, "filename": "align.93.wasm", "text": "alignment must not be larger than natural", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 407, "filename": "align.94.wasm", "text": "alignment must not be larger than natural", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 411, "filename": "align.95.wasm", "text": "alignment must not be larger than natural", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 415, "filename": "align.96.wasm", "text": "alignment must not be larger than natural", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 420, "filename": "align.97.wasm", "text": "alignment must not be larger than natural", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 424, "filename": "align.98.wasm", "text": "alignment must not be larger than natural", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 428, "filename": "align.99.wasm", "text": "alignment must not be larger than natural", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 432, "filename": "align.100.wasm", "text": "alignment must not be larger than natural", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 436, "filename": "align.101.wasm", "text": "alignment must not be larger than natural", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 440, "filename": "align.102.wasm", "text": "alignment must not be larger than natural", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 444, "filename": "align.103.wasm", "text": "alignment must not be larger than natural", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 448, "filename": "align.104.wasm", "text": "alignment must not be larger than natural", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 452, "filename": "align.105.wasm", "text": "alignment must not be larger than natural", "module_type": "binary"}, 
  {"type": "module", "line": 458, "filename": "align.106.wasm"}, 
  {"type": "assert_return", "line": 802, "action": {"type": "invoke", "field": "f32_align_switch", "args": [{"type": "i32", "value": "0"}]}, "expected": [{"type": "f32", "value": "1092616192"}]}, 
  {"type": "assert_return", "line": 803, "action": {"type": "invoke", "field": "f32_align_switch", "args": [{"type": "i32", "value": "1"}]}, "expected": [{"type": "f32", "value": "1092616192"}]}, 
  {"type": "assert_return", "line": 804, "action": {"type": "invoke", "field": "f32_align_switch", "args": [{"type": "i32", "value": "2"}]}, "expected": [{"type": "f32", "value": "1092616192"}]}, 
  {"type": "assert_return", "line": 805, "action": {"type": "invoke", "field": "f32_align_switch", "args": [{"type": "i32", "value": "3"}]}, "expected": [{"type": "f32", "value": "1092616192"}]}, 
  {"type": "assert_return", "line": 807, "action": {"type": "invoke", "field": "f64_align_switch", "args": [{"type": "i32", "value": "0"}]}, "expected": [{"type": "f64", "value": "4621819117588971520"}]}, 
  {"type": "assert_return", "line": 808, "action": {"type": "invoke", "field": "f64_align_switch", "args": [{"type": "i32", "value": "1"}]}, "expected": [{"type": "f64", "value": "4621819117588971520"}]}, 
  {"type": "assert_return", "line": 809, "action": {"type": "invoke", "field": "f64_align_switch", "args": [{"type": "i32", "value": "2"}]}, "expected": [{"type": "f64", "value": "4621819117588971520"}]}, 
  {"type": "assert_return", "line": 810, "action": {"type": "invoke", "field": "f64_align_switch", "args": [{"type": "i32", "value": "3"}]}, "expected": [{"type": "f64", "value": "4621819117588971520"}]}, 
  {"type": "assert_return", "line": 811, "action": {"type": "invoke", "field": "f64_align_switch", "args": [{"type": "i32", "value": "4"}]}, "expected": [{"type": "f64", "value": "4621819117588971520"}]}, 
  {"type": "assert_return", "line": 813, "action": {"type": "invoke", "field": "i32_align_switch", "args": [{"type": "i32", "value": "0"}, {"type": "i32", "value": "0"}]}, "expected": [{"type": "i32", "value": "10"}]}, 
  {"type": "assert_return", "line": 814, "action": {"type": "invoke", "field": "i32_align_switch", "args": [{"type": "i32", "value": "0"}, {"type": "i32", "value": "1"}]}, "expected": [{"type": "i32", "value": "10"}]}, 
  {"type": "assert_return", "line": 815, "action": {"type": "invoke", "field": "i32_align_switch", "args": [{"type": "i32", "value": "1"}, {"type": "i32", "value": "0"}]}, "expected": [{"type": "i32", "value": "10"}]}, 
  {"type": "assert_return", "line": 816, "action": {"type": "invoke", "field": "i32_align_switch", "args": [{"type": "i32", "value": "1"}, {"type": "i32", "value": "1"}]}, "expected": [{"type": "i32", "value": "10"}]}, 
  {"type": "assert_return", "line": 817, "action": {"type": "invoke", "field": "i32_align_switch", "args": [{"type": "i32", "value": "2"}, {"type": "i32", "value": "0"}]}, "expected": [{"type": "i32", "value": "10"}]}, 
  {"type": "assert_return", "line": 818, "action": {"type": "invoke", "field": "i32_align_switch", "args": [{"type": "i32", "value": "2"}, {"type": "i32", "value": "1"}]}, "expected": [{"type": "i32", "value": "10"}]}, 
  {"type": "assert_return", "line": 819, "action": {"type": "invoke", "field": "i32_align_switch", "args": [{"type": "i32", "value": "2"}, {"type": "i32", "value": "2"}]}, "expected": [{"type": "i32", "value": "10"}]}, 
  {"type": "assert_return", "line": 820, "action": {"type": "invoke", "field": "i32_align_switch", "args": [{"type": "i32", "value": "3"}, {"type": "i32", "value": "0"}]}, "expected": [{"type": "i32", "value": "10"}]}, 
  {"type": "assert_return", "line": 821, "action": {"type": "invoke", "field": "i32_align_switch", "args": [{"type": "i32", "value": "3"}, {"type": "i32", "value": "1"}]}, "expected": [{"type": "i32", "value": "10"}]}, 
  {"type": "assert_return", "line": 822, "action": {"type": "invoke", "field": "i32_align_switch", "args": [{"type": "i32", "value": "3"}, {"type": "i32", "value": "2"}]}, "expected": [{"type": "i32", "value": "10"}]}, 
  {"type": "assert_return", "line": 823, "action": {"type": "invoke", "field": "i32_align_switch", "args": [{"type": "i32", "value": "4"}, {"type": "i32", "value": "0"}]}, "expected": [{"type": "i32", "value": "10"}]}, 
  {"type": "assert_return", "line": 824, "action": {"type": "invoke", "field": "i32_align_switch", "args": [{"type": "i32", "value": "4"}, {"type": "i32", "value": "1"}]}, "expected": [{"type": "i32", "value": "10"}]}, 
  {"type": "assert_return", "line": 825, "action": {"type": "invoke", "field": "i32_align_switch", "args": [{"type": "i32", "value": "4"}, {"type": "i32", "value": "2"}]}, "expected": [{"type": "i32", "value": "10"}]}, 
  {"type": "assert_return", "line": 826, "action": {"type": "invoke", "field": "i32_align_switch", "args": [{"type": "i32", "value": "4"}, {"type": "i32", "value": "4"}]}, "expected": [{"type": "i32", "value": "10"}]}, 
  {"type": "assert_return", "line": 828, "action": {"type": "invoke", "field": "i64_align_switch", "args": [{"type": "i32", "value": "0"}, {"type": "i32", "value": "0"}]}, "expected": [{"type": "i64", "value": "10"}]}, 
  {"type": "assert_return", "line": 829, "action": {"type": "invoke", "field": "i64_align_switch", "args": [{"type": "i32", "value": "0"}, {"type": "i32", "value": "1"}]}, "expected": [{"type": "i64", "value": "10"}]}, 
  {"type": "assert_return", "line": 830, "action": {"type": "invoke", "field": "i64_align_switch", "args": [{"type": "i32", "value": "1"}, {"type": "i32", "value": "0"}]}, "expected": [{"type": "i64", "value": "10"}]}, 
  {"type": "assert_return", "line": 831, "action": {"type": "invoke", "field": "i64_align_switch", "args": [{"type": "i32", "value": "1"}, {"type": "i32", "value": "1"}]}, "expected": [{"type": "i64", "value": "10"}]}, 
  {"type": "assert_return", "line": 832, "action": {"type": "invoke", "field": "i64_align_switch", "args": [{"type": "i32", "value": "2"}, {"type": "i32", "value": "0"}]}, "expected": [{"type": "i64", "value": "10"}]}, 
  {"type": "assert_return", "line": 833, "action": {"type": "invoke", "field": "i64_align_switch", "args": [{"type": "i32", "value": "2"}, {"type": "i32", "value": "1"}]}, "expected": [{"type": "i64", "value": "10"}]}, 
  {"type": "assert_return", "line": 834, "action": {"type": "invoke", "field": "i64_align_switch", "args": [{"type": "i32", "value": "2"}, {"type": "i32", "value": "2"}]}, "expected": [{"type": "i64", "value": "10"}]}, 
  {"type": "assert_return", "line": 835, "action": {"type": "invoke", "field": "i64_align_switch", "args": [{"type": "i32", "value": "3"}, {"type": "i32", "value": "0"}]}, "expected": [{"type": "i64", "value": "10"}]}, 
  {"type": "assert_return", "line": 836, "action": {"type": "invoke", "field": "i64_align_switch", "args": [{"type": "i32", "value": "3"}, {"type": "i32", "value": "1"}]}, "expected": [{"type": "i64", "value": "10"}]}, 
  {"type": "assert_return", "line": 837, "action": {"type": "invoke", "field": "i64_align_switch", "args": [{"type": "i32", "value": "3"}, {"type": "i32", "value": "2"}]}, "expected": [{"type": "i64", "value": "10"}]}, 
  {"type": "assert_return", "line": 838, "action": {"type": "invoke", "field": "i64_align_switch", "args": [{"type": "i32", "value": "4"}, {"type": "i32", "value": "0"}]}, "expected": [{"type": "i64", "value": "10"}]}, 
  {"type": "assert_return", "line": 839, "action": {"type": "invoke", "field": "i64_align_switch", "args": [{"type": "i32", "value": "4"}, {"type": "i32", "value": "1"}]}, "expected": [{"type": "i64", "value": "10"}]}, 
  {"type": "assert_return", "line": 840, "action": {"type": "invoke", "field": "i64_align_switch", "args": [{"type": "i32", "value": "4"}, {"type": "i32", "value": "2"}]}, "expected": [{"type": "i64", "value": "10"}]}, 
  {"type": "assert_return", "line": 841, "action": {"type": "invoke", "field": "i64_align_switch", "args": [{"type": "i32", "value": "4"}, {"type": "i32", "value": "4"}]}, "expected": [{"type": "i64", "value": "10"}]}, 
  {"type": "assert_return", "line": 842, "action": {"type": "invoke", "field": "i64_align_switch", "args": [{"type": "i32", "value": "5"}, {"type": "i32", "value": "0"}]}, "expected": [{"type": "i64", "value": "10"}]}, 
  {"type": "assert_return", "line": 843, "action": {"type": "invoke", "field": "i64_align_switch", "args": [{"type": "i32", "value": "5"}, {"type": "i32", "value": "1"}]}, "expected": [{"type": "i64", "value": "10"}]}, 
  {"type": "assert_return", "line": 844, "action": {"type": "invoke", "field": "i64_align_switch", "args": [{"type": "i32", "value": "5"}, {"type": "i32", "value": "2"}]}, "expected": [{"type": "i64", "value": "10"}]}, 
  {"type": "assert_return", "line": 845, "action": {"type": "invoke", "field": "i64_align_switch", "args": [{"type": "i32", "value": "5"}, {"type": "i32", "value": "4"}]}, "expected": [{"type": "i64", "value": "10"}]}, 
  {"type": "assert_return", "line": 846, "action": {"type": "invoke", "field": "i64_align_switch", "args": [{"type": "i32", "value": "6"}, {"type": "i32", "value": "0"}]}, "expected": [{"type": "i64", "value": "10"}]}, 
  {"type": "assert_return", "line": 847, "action": {"type": "invoke", "field": "i64_align_switch", "args": [{"type": "i32", "value": "6"}, {"type": "i32", "value": "1"}]}, "expected": [{"type": "i64", "value": "10"}]}, 
  {"type": "assert_return", "line": 848, "action": {"type": "invoke", "field": "i64_align_switch", "args": [{"type": "i32", "value": "6"}, {"type": "i32", "value": "2"}]}, "expected": [{"type": "i64", "value": "10"}]}, 
  {"type": "assert_return", "line": 849, "action": {"type": "invoke", "field": "i64_align_switch", "args": [{"type": "i32", "value": "6"}, {"type": "i32", "value": "4"}]}, "expected": [{"type": "i64", "value": "10"}]}, 
  {"type": "assert_return", "line": 850, "action": {"type": "invoke", "field": "i64_align_switch", "args": [{"type": "i32", "value": "6"}, {"type": "i32", "value": "8"}]}, "expected": [{"type": "i64", "value": "10"}]}, 
  {"type": "module", "line": 854, "filename": "align.107.wasm"}, 
  {"type": "assert_trap", "line": 864, "action": {"type": "invoke", "field": "store", "args": [{"type": "i32", "value": "65532"}, {"type": "i64", "value": "18446744073709551615"}]}, "text": "out of bounds memory access", "expected": []}, 
  {"type": "assert_return", "line": 866, "action": {"type": "invoke", "field": "load", "args": [{"type": "i32", "value": "65532"}]}, "expected": [{"type": "i32", "value": "0"}]}]},
  "code": [
    "(module (memory 0)\n  (func (drop (i32.load8_s align=1 (i32.const 0)))))",
    "(module (memory 0)\n  (func (drop (i32.load8_u align=1 (i32.const 0)))))",
    "(module (memory 0)\n  (func (drop (i32.load16_s align=2 (i32.const 0)))))",
    "(module (memory 0)\n  (func (drop (i32.load16_u align=2 (i32.const 0)))))",
    "(module (memory 0)\n  (func (drop (i32.load align=4 (i32.const 0)))))",
    "(module (memory 0)\n  (func (drop (i64.load8_s align=1 (i32.const 0)))))",
    "(module (memory 0)\n  (func (drop (i64.load8_u align=1 (i32.const 0)))))",
    "(module (memory 0)\n  (func (drop (i64.load16_s align=2 (i32.const 0)))))",
    "(module (memory 0)\n  (func (drop (i64.load16_u align=2 (i32.const 0)))))",
    "(module (memory 0)\n  (func (drop (i64.load32_s align=4 (i32.const 0)))))",
    "(module (memory 0)\n  (func (drop (i64.load32_u align=4 (i32.const 0)))))",
    "(module (memory 0)\n  (func (drop (i64.load align=8 (i32.const 0)))))",
    "(module (memory 0)\n  (func (drop (f32.load align=4 (i32.const 0)))))",
    "(module (memory 0)\n  (func (drop (f64.load align=8 (i32.const 0)))))",
    "(module (memory 0)\n  (func (i32.store8 align=1 (i32.const 0) (i32.const 1))))",
    "(module (memory 0)\n  (func (i32.store16 align=2 (i32.const 0) (i32.const 1))))",
    "(module (memory 0)\n  (func (i32.store align=4 (i32.const 0) (i32.const 1))))",
    "(module (memory 0)\n  (func (i64.store8 align=1 (i32.const 0) (i64.const 1))))",
    "(module (memory 0)\n  (func (i64.store16 align=2 (i32.const 0) (i64.const 1))))",
    "(module (memory 0)\n  (func (i64.store32 align=4 (i32.const 0) (i64.const 1))))",
    "(module (memory 0)\n  (func (i64.store align=8 (i32.const 0) (i64.const 1))))",
    "(module (memory 0)\n  (func (f32.store align=4 (i32.const 0) (f32.const 1.0))))",
    "(module (memory 0)\n  (func (f64.store align=8 (i32.const 0) (f64.const 1.0))))",
    "(assert_malformed (module quote \"(module (memory 0) (func (drop (i32.load8_s align=0 (i32.const 0)))))\" ) \"alignment\")",
    "(assert_malformed (module quote \"(module (memory 0) (func (drop (i32.load8_s align=7 (i32.const 0)))))\" ) \"alignment\")",
    "(assert_malformed (module quote \"(module (memory 0) (func (drop (i32.load8_u align=0 (i32.const 0)))))\" ) \"alignment\")",
    "(assert_malformed (module quote \"(module (memory 0) (func (drop (i32.load8_u align=7 (i32.const 0)))))\" ) \"alignment\")",
    "(assert_malformed (module quote \"(module (memory 0) (func (drop (i32.load16_s align=0 (i32.const 0)))))\" ) \"alignment\")",
    "(assert_malformed (module quote \"(module (memory 0) (func (drop (i32.load16_s align=7 (i32.const 0)))))\" ) \"alignment\")",
    "(assert_malformed (module quote \"(module (memory 0) (func (drop (i32.load16_u align=0 (i32.const 0)))))\" ) \"alignment\")",
    "(assert_malformed (module quote \"(module (memory 0) (func (drop (i32.load16_u align=7 (i32.const 0)))))\" ) \"alignment\")",
    "(assert_malformed (module quote \"(module (memory 0) (func (drop (i32.load align=0 (i32.const 0)))))\" ) \"alignment\")",
    "(assert_malformed (module quote \"(module (memory 0) (func (drop (i32.load align=7 (i32.const 0)))))\" ) \"alignment\")",
    "(assert_malformed (module quote \"(module (memory 0) (func (drop (i64.load8_s align=0 (i32.const 0)))))\" ) \"alignment\")",
    "(assert_malformed (module quote \"(module (memory 0) (func (drop (i64.load8_s align=7 (i32.const 0)))))\" ) \"alignment\")",
    "(assert_malformed (module quote \"(module (memory 0) (func (drop (i64.load8_u align=0 (i32.const 0)))))\" ) \"alignment\")",
    "(assert_malformed (module quote \"(module (memory 0) (func (drop (i64.load8_u align=7 (i32.const 0)))))\" ) \"alignment\")",
    "(assert_malformed (module quote \"(module (memory 0) (func (drop (i64.load16_s align=0 (i32.const 0)))))\" ) \"alignment\")",
    "(assert_malformed (module quote \"(module (memory 0) (func (drop (i64.load16_s align=7 (i32.const 0)))))\" ) \"alignment\")",
    "(assert_malformed (module quote \"(module (memory 0) (func (drop (i64.load16_u align=0 (i32.const 0)))))\" ) \"alignment\")",
    "(assert_malformed (module quote \"(module (memory 0) (func (drop (i64.load16_u align=7 (i32.const 0)))))\" ) \"alignment\")",
    "(assert_malformed (module quote \"(module (memory 0) (func (drop (i64.load32_s align=0 (i32.const 0)))))\" ) \"alignment\")",
    "(assert_malformed (module quote \"(module (memory 0) (func (drop (i64.load32_s align=7 (i32.const 0)))))\" ) \"alignment\")",
    "(assert_malformed (module quote \"(module (memory 0) (func (drop (i64.load32_u align=0 (i32.const 0)))))\" ) \"alignment\")",
    "(assert_malformed (module quote \"(module (memory 0) (func (drop (i64.load32_u align=7 (i32.const 0)))))\" ) \"alignment\")",
    "(assert_malformed (module quote \"(module (memory 0) (func (drop (i64.load align=0 (i32.const 0)))))\" ) \"alignment\")",
    "(assert_malformed (module quote \"(module (memory 0) (func (drop (i64.load align=7 (i32.const 0)))))\" ) \"alignment\")",
    "(assert_malformed (module quote \"(module (memory 0) (func (drop (f32.load align=0 (i32.const 0)))))\" ) \"alignment\")",
    "(assert_malformed (module quote \"(module (memory 0) (func (drop (f32.load align=7 (i32.const 0)))))\" ) \"alignment\")",
    "(assert_malformed (module quote \"(module (memory 0) (func (drop (f64.load align=0 (i32.const 0)))))\" ) \"alignment\")",
    "(assert_malformed (module quote \"(module (memory 0) (func (drop (f64.load align=7 (i32.const 0)))))\" ) \"alignment\")",
    "(assert_malformed (module quote \"(module (memory 0) (func (i32.store8 align=0 (i32.const 0) (i32.const 0))))\" ) \"alignment\")",
    "(assert_malformed (module quote \"(module (memory 0) (func (i32.store8 align=7 (i32.const 0) (i32.const 0))))\" ) \"alignment\")",
    "(assert_malformed (module quote \"(module (memory 0) (func (i32.store16 align=0 (i32.const 0) (i32.const 0))))\" ) \"alignment\")",
    "(assert_malformed (module quote \"(module (memory 0) (func (i32.store16 align=7 (i32.const 0) (i32.const 0))))\" ) \"alignment\")",
    "(assert_malformed (module quote \"(module (memory 0) (func (i32.store align=0 (i32.const 0) (i32.const 0))))\" ) \"alignment\")",
    "(assert_malformed (module quote \"(module (memory 0) (func (i32.store align=7 (i32.const 0) (i32.const 0))))\" ) \"alignment\")",
    "(assert_malformed (module quote \"(module (memory 0) (func (i64.store8 align=0 (i32.const 0) (i64.const 0))))\" ) \"alignment\")",
    "(assert_malformed (module quote \"(module (memory 0) (func (i64.store8 align=7 (i32.const 0) (i64.const 0))))\" ) \"alignment\")",
    "(assert_malformed (module quote \"(module (memory 0) (func (i64.store16 align=0 (i32.const 0) (i64.const 0))))\" ) \"alignment\")",
    "(assert_malformed (module quote \"(module (memory 0) (func (i64.store16 align=7 (i32.const 0) (i64.const 0))))\" ) \"alignment\")",
    "(assert_malformed (module quote \"(module (memory 0) (func (i64.store32 align=0 (i32.const 0) (i64.const 0))))\" ) \"alignment\")",
    "(assert_malformed (module quote \"(module (memory 0) (func (i64.store32 align=7 (i32.const 0) (i64.const 0))))\" ) \"alignment\")",
    "(assert_malformed (module quote \"(module (memory 0) (func (i64.store align=0 (i32.const 0) (i64.const 0))))\" ) \"alignment\")",
    "(assert_malformed (module quote \"(module (memory 0) (func (i64.store align=7 (i32.const 0) (i64.const 0))))\" ) \"alignment\")",
    "(assert_malformed (module quote \"(module (memory 0) (func (f32.store align=0 (i32.const 0) (f32.const 0))))\" ) \"alignment\")",
    "(assert_malformed (module quote \"(module (memory 0) (func (f32.store align=7 (i32.const 0) (f32.const 0))))\" ) \"alignment\")",
    "(assert_malformed (module quote \"(module (memory 0) (func (f64.store align=0 (i32.const 0) (f32.const 0))))\" ) \"alignment\")",
    "(assert_malformed (module quote \"(module (memory 0) (func (f64.store align=7 (i32.const 0) (f32.const 0))))\" ) \"alignment\")",
    "(assert_invalid (module (memory 0) (func (drop (i32.load8_s align=2 (i32.const 0))))) \"alignment must not be larger than natural\")",
    "(assert_invalid (module (memory 0) (func (drop (i32.load8_u align=2 (i32.const 0))))) \"alignment must not be larger than natural\")",
    "(assert_invalid (module (memory 0) (func (drop (i32.load16_s align=4 (i32.const 0))))) \"alignment must not be larger than natural\")",
    "(assert_invalid (module (memory 0) (func (drop (i32.load16_u align=4 (i32.const 0))))) \"alignment must not be larger than natural\")",
    "(assert_invalid (module (memory 0) (func (drop (i32.load align=8 (i32.const 0))))) \"alignment must not be larger than natural\")",
    "(assert_invalid (module (memory 0) (func (drop (i64.load8_s align=2 (i32.const 0))))) \"alignment must not be larger than natural\")",
    "(assert_invalid (module (memory 0) (func (drop (i64.load8_u align=2 (i32.const 0))))) \"alignment must not be larger than natural\")",
    "(assert_invalid (module (memory 0) (func (drop (i64.load16_s align=4 (i32.const 0))))) \"alignment must not be larger than natural\")",
    "(assert_invalid (module (memory 0) (func (drop (i64.load16_u align=4 (i32.const 0))))) \"alignment must not be larger than natural\")",
    "(assert_invalid (module (memory 0) (func (drop (i64.load32_s align=8 (i32.const 0))))) \"alignment must not be larger than natural\")",
    "(assert_invalid (module (memory 0) (func (drop (i64.load32_u align=8 (i32.const 0))))) \"alignment must not be larger than natural\")",
    "(assert_invalid (module (memory 0) (func (drop (i64.load align=16 (i32.const 0))))) \"alignment must not be larger than natural\")",
    "(assert_invalid (module (memory 0) (func (drop (f32.load align=8 (i32.const 0))))) \"alignment must not be larger than natural\")",
    "(assert_invalid (module (memory 0) (func (drop (f64.load align=16 (i32.const 0))))) \"alignment must not be larger than natural\")",
    "(assert_invalid (module (memory 0) (func (drop (i32.load8_s align=2 (i32.const 0))))) \"alignment must not be larger than natural\")",
    "(assert_invalid (module (memory 0) (func (drop (i32.load8_u align=2 (i32.const 0))))) \"alignment must not be larger than natural\")",
    "(assert_invalid (module (memory 0) (func (drop (i32.load16_s align=4 (i32.const 0))))) \"alignment must not be larger than natural\")",
    "(assert_invalid (module (memory 0) (func (drop (i32.load16_u align=4 (i32.const 0))))) \"alignment must not be larger than natural\")",
    "(assert_invalid (module (memory 0) (func (drop (i32.load align=8 (i32.const 0))))) \"alignment must not be larger than natural\")",
    "(assert_invalid (module (memory 0) (func (drop (i64.load8_s align=2 (i32.const 0))))) \"alignment must not be larger than natural\")",
    "(assert_invalid (module (memory 0) (func (drop (i64.load8_u align=2 (i32.const 0))))) \"alignment must not be larger than natural\")",
    "(assert_invalid (module (memory 0) (func (drop (i64.load16_s align=4 (i32.const 0))))) \"alignment must not be larger than natural\")",
    "(assert_invalid (module (memory 0) (func (drop (i64.load16_u align=4 (i32.const 0))))) \"alignment must not be larger than natural\")",
    "(assert_invalid (module (memory 0) (func (drop (i64.load32_s align=8 (i32.const 0))))) \"alignment must not be larger than natural\")",
    "(assert_invalid (module (memory 0) (func (drop (i64.load32_u align=8 (i32.const 0))))) \"alignment must not be larger than natural\")",
    "(assert_invalid (module (memory 0) (func (drop (i64.load align=16 (i32.const 0))))) \"alignment must not be larger than natural\")",
    "(assert_invalid (module (memory 0) (func (drop (f32.load align=8 (i32.const 0))))) \"alignment must not be larger than natural\")",
    "(assert_invalid (module (memory 0) (func (drop (f64.load align=16 (i32.const 0))))) \"alignment must not be larger than natural\")",
    "(assert_invalid (module (memory 0) (func (i32.store8 align=2 (i32.const 0) (i32.const 0)))) \"alignment must not be larger than natural\")",
    "(assert_invalid (module (memory 0) (func (i32.store16 align=4 (i32.const 0) (i32.const 0)))) \"alignment must not be larger than natural\")",
    "(assert_invalid (module (memory 0) (func (i32.store align=8 (i32.const 0) (i32.const 0)))) \"alignment must not be larger than natural\")",
    "(assert_invalid (module (memory 0) (func (i64.store8 align=2 (i32.const 0) (i64.const 0)))) \"alignment must not be larger than natural\")",
    "(assert_invalid (module (memory 0) (func (i64.store16 align=4 (i32.const 0) (i64.const 0)))) \"alignment must not be larger than natural\")",
    "(assert_invalid (module (memory 0) (func (i64.store32 align=8 (i32.const 0) (i64.const 0)))) \"alignment must not be larger than natural\")",
    "(assert_invalid (module (memory 0) (func (i64.store align=16 (i32.const 0) (i64.const 0)))) \"alignment must not be larger than natural\")",
    "(assert_invalid (module (memory 0) (func (f32.store align=8 (i32.const 0) (f32.const 0)))) \"alignment must not be larger than natural\")",
    "(assert_invalid (module (memory 0) (func (f64.store align=16 (i32.const 0) (f64.const 0)))) \"alignment must not be larger than natural\")",
    "(module (memory 1)\n  (func (export \"f32_align_switch\") (param i32) (result f32) (local f32 f32) (local.set 1 (f32.const 10.0)) (block $4 (block $2 (block $1 (block $default (block $0 (br_table $0 $default $1 $2 $4 (local.get 0)) ) (f32.store (i32.const 0) (local.get 1)) (local.set 2 (f32.load (i32.const 0))) (br $4) ) (f32.store align=1 (i32.const 0) (local.get 1)) (local.set 2 (f32.load align=1 (i32.const 0))) (br $4) ) (f32.store align=2 (i32.const 0) (local.get 1)) (local.set 2 (f32.load align=2 (i32.const 0))) (br $4) ) (f32.store align=4 (i32.const 0) (local.get 1)) (local.set 2 (f32.load align=4 (i32.const 0))) ) (local.get 2) )\n  (func (export \"f64_align_switch\") (param i32) (result f64) (local f64 f64) (local.set 1 (f64.const 10.0)) (block $8 (block $4 (block $2 (block $1 (block $default (block $0 (br_table $0 $default $1 $2 $4 $8 (local.get 0)) ) (f64.store (i32.const 0) (local.get 1)) (local.set 2 (f64.load (i32.const 0))) (br $8) ) (f64.store align=1 (i32.const 0) (local.get 1)) (local.set 2 (f64.load align=1 (i32.const 0))) (br $8) ) (f64.store align=2 (i32.const 0) (local.get 1)) (local.set 2 (f64.load align=2 (i32.const 0))) (br $8) ) (f64.store align=4 (i32.const 0) (local.get 1)) (local.set 2 (f64.load align=4 (i32.const 0))) (br $8) ) (f64.store align=8 (i32.const 0) (local.get 1)) (local.set 2 (f64.load align=8 (i32.const 0))) ) (local.get 2) )\n  (func (export \"i32_align_switch\") (param i32 i32) (result i32) (local i32 i32) (local.set 2 (i32.const 10)) (block $32 (block $16u (block $16s (block $8u (block $8s (block $0 (br_table $0 $8s $8u $16s $16u $32 (local.get 0)) ) (if (i32.eq (local.get 1) (i32.const 0)) (then (i32.store8 (i32.const 0) (local.get 2)) (local.set 3 (i32.load8_s (i32.const 0))) ) ) (if (i32.eq (local.get 1) (i32.const 1)) (then (i32.store8 align=1 (i32.const 0) (local.get 2)) (local.set 3 (i32.load8_s align=1 (i32.const 0))) ) ) (br $32) ) (if (i32.eq (local.get 1) (i32.const 0)) (then (i32.store8 (i32.const 0) (local.get 2)) (local.set 3 (i32.load8_u (i32.const 0))) ) ) (if (i32.eq (local.get 1) (i32.const 1)) (then (i32.store8 align=1 (i32.const 0) (local.get 2)) (local.set 3 (i32.load8_u align=1 (i32.const 0))) ) ) (br $32) ) (if (i32.eq (local.get 1) (i32.const 0)) (then (i32.store16 (i32.const 0) (local.get 2)) (local.set 3 (i32.load16_s (i32.const 0))) ) ) (if (i32.eq (local.get 1) (i32.const 1)) (then (i32.store16 align=1 (i32.const 0) (local.get 2)) (local.set 3 (i32.load16_s align=1 (i32.const 0))) ) ) (if (i32.eq (local.get 1) (i32.const 2)) (then (i32.store16 align=2 (i32.const 0) (local.get 2)) (local.set 3 (i32.load16_s align=2 (i32.const 0))) ) ) (br $32) ) (if (i32.eq (local.get 1) (i32.const 0)) (then (i32.store16 (i32.const 0) (local.get 2)) (local.set 3 (i32.load16_u (i32.const 0))) ) ) (if (i32.eq (local.get 1) (i32.const 1)) (then (i32.store16 align=1 (i32.const 0) (local.get 2)) (local.set 3 (i32.load16_u align=1 (i32.const 0))) ) ) (if (i32.eq (local.get 1) (i32.const 2)) (then (i32.store16 align=2 (i32.const 0) (local.get 2)) (local.set 3 (i32.load16_u align=2 (i32.const 0))) ) ) (br $32) ) (if (i32.eq (local.get 1) (i32.const 0)) (then (i32.store (i32.const 0) (local.get 2)) (local.set 3 (i32.load (i32.const 0))) ) ) (if (i32.eq (local.get 1) (i32.const 1)) (then (i32.store align=1 (i32.const 0) (local.get 2)) (local.set 3 (i32.load align=1 (i32.const 0))) ) ) (if (i32.eq (local.get 1) (i32.const 2)) (then (i32.store align=2 (i32.const 0) (local.get 2)) (local.set 3 (i32.load align=2 (i32.const 0))) ) ) (if (i32.eq (local.get 1) (i32.const 4)) (then (i32.store align=4 (i32.const 0) (local.get 2)) (local.set 3 (i32.load align=4 (i32.const 0))) ) ) ) (local.get 3) )\n  (func (export \"i64_align_switch\") (param i32 i32) (result i64) (local i64 i64) (local.set 2 (i64.const 10)) (block $64 (block $32u (block $32s (block $16u (block $16s (block $8u (block $8s (block $0 (br_table $0 $8s $8u $16s $16u $32s $32u $64 (local.get 0)) ) (if (i32.eq (local.get 1) (i32.const 0)) (then (i64.store8 (i32.const 0) (local.get 2)) (local.set 3 (i64.load8_s (i32.const 0))) ) ) (if (i32.eq (local.get 1) (i32.const 1)) (then (i64.store8 align=1 (i32.const 0) (local.get 2)) (local.set 3 (i64.load8_s align=1 (i32.const 0))) ) ) (br $64) ) (if (i32.eq (local.get 1) (i32.const 0)) (then (i64.store8 (i32.const 0) (local.get 2)) (local.set 3 (i64.load8_u (i32.const 0))) ) ) (if (i32.eq (local.get 1) (i32.const 1)) (then (i64.store8 align=1 (i32.const 0) (local.get 2)) (local.set 3 (i64.load8_u align=1 (i32.const 0))) ) ) (br $64) ) (if (i32.eq (local.get 1) (i32.const 0)) (then (i64.store16 (i32.const 0) (local.get 2)) (local.set 3 (i64.load16_s (i32.const 0))) ) ) (if (i32.eq (local.get 1) (i32.const 1)) (then (i64.store16 align=1 (i32.const 0) (local.get 2)) (local.set 3 (i64.load16_s align=1 (i32.const 0))) ) ) (if (i32.eq (local.get 1) (i32.const 2)) (then (i64.store16 align=2 (i32.const 0) (local.get 2)) (local.set 3 (i64.load16_s align=2 (i32.const 0))) ) ) (br $64) ) (if (i32.eq (local.get 1) (i32.const 0)) (then (i64.store16 (i32.const 0) (local.get 2)) (local.set 3 (i64.load16_u (i32.const 0))) ) ) (if (i32.eq (local.get 1) (i32.const 1)) (then (i64.store16 align=1 (i32.const 0) (local.get 2)) (local.set 3 (i64.load16_u align=1 (i32.const 0))) ) ) (if (i32.eq (local.get 1) (i32.const 2)) (then (i64.store16 align=2 (i32.const 0) (local.get 2)) (local.set 3 (i64.load16_u align=2 (i32.const 0))) ) ) (br $64) ) (if (i32.eq (local.get 1) (i32.const 0)) (then (i64.store32 (i32.const 0) (local.get 2)) (local.set 3 (i64.load32_s (i32.const 0))) ) ) (if (i32.eq (local.get 1) (i32.const 1)) (then (i64.store32 align=1 (i32.const 0) (local.get 2)) (local.set 3 (i64.load32_s align=1 (i32.const 0))) ) ) (if (i32.eq (local.get 1) (i32.const 2)) (then (i64.store32 align=2 (i32.const 0) (local.get 2)) (local.set 3 (i64.load32_s align=2 (i32.const 0))) ) ) (if (i32.eq (local.get 1) (i32.const 4)) (then (i64.store32 align=4 (i32.const 0) (local.get 2)) (local.set 3 (i64.load32_s align=4 (i32.const 0))) ) ) (br $64) ) (if (i32.eq (local.get 1) (i32.const 0)) (then (i64.store32 (i32.const 0) (local.get 2)) (local.set 3 (i64.load32_u (i32.const 0))) ) ) (if (i32.eq (local.get 1) (i32.const 1)) (then (i64.store32 align=1 (i32.const 0) (local.get 2)) (local.set 3 (i64.load32_u align=1 (i32.const 0))) ) ) (if (i32.eq (local.get 1) (i32.const 2)) (then (i64.store32 align=2 (i32.const 0) (local.get 2)) (local.set 3 (i64.load32_u align=2 (i32.const 0))) ) ) (if (i32.eq (local.get 1) (i32.const 4)) (then (i64.store32 align=4 (i32.const 0) (local.get 2)) (local.set 3 (i64.load32_u align=4 (i32.const 0))) ) ) (br $64) ) (if (i32.eq (local.get 1) (i32.const 0)) (then (i64.store (i32.const 0) (local.get 2)) (local.set 3 (i64.load (i32.const 0))) ) ) (if (i32.eq (local.get 1) (i32.const 1)) (then (i64.store align=1 (i32.const 0) (local.get 2)) (local.set 3 (i64.load align=1 (i32.const 0))) ) ) (if (i32.eq (local.get 1) (i32.const 2)) (then (i64.store align=2 (i32.const 0) (local.get 2)) (local.set 3 (i64.load align=2 (i32.const 0))) ) ) (if (i32.eq (local.get 1) (i32.const 4)) (then (i64.store align=4 (i32.const 0) (local.get 2)) (local.set 3 (i64.load align=4 (i32.const 0))) ) ) (if (i32.eq (local.get 1) (i32.const 8)) (then (i64.store align=8 (i32.const 0) (local.get 2)) (local.set 3 (i64.load align=8 (i32.const 0))) ) ) ) (local.get 3) ))",
    "(assert_return (invoke \"f32_align_switch\" (i32.const 0)) (f32.const 10.0))",
    "(assert_return (invoke \"f32_align_switch\" (i32.const 1)) (f32.const 10.0))",
    "(assert_return (invoke \"f32_align_switch\" (i32.const 2)) (f32.const 10.0))",
    "(assert_return (invoke \"f32_align_switch\" (i32.const 3)) (f32.const 10.0))",
    "(assert_return (invoke \"f64_align_switch\" (i32.const 0)) (f64.const 10.0))",
    "(assert_return (invoke \"f64_align_switch\" (i32.const 1)) (f64.const 10.0))",
    "(assert_return (invoke \"f64_align_switch\" (i32.const 2)) (f64.const 10.0))",
    "(assert_return (invoke \"f64_align_switch\" (i32.const 3)) (f64.const 10.0))",
    "(assert_return (invoke \"f64_align_switch\" (i32.const 4)) (f64.const 10.0))",
    "(assert_return (invoke \"i32_align_switch\" (i32.const 0) (i32.const 0)) (i32.const 10))",
    "(assert_return (invoke \"i32_align_switch\" (i32.const 0) (i32.const 1)) (i32.const 10))",
    "(assert_return (invoke \"i32_align_switch\" (i32.const 1) (i32.const 0)) (i32.const 10))",
    "(assert_return (invoke \"i32_align_switch\" (i32.const 1) (i32.const 1)) (i32.const 10))",
    "(assert_return (invoke \"i32_align_switch\" (i32.const 2) (i32.const 0)) (i32.const 10))",
    "(assert_return (invoke \"i32_align_switch\" (i32.const 2) (i32.const 1)) (i32.const 10))",
    "(assert_return (invoke \"i32_align_switch\" (i32.const 2) (i32.const 2)) (i32.const 10))",
    "(assert_return (invoke \"i32_align_switch\" (i32.const 3) (i32.const 0)) (i32.const 10))",
    "(assert_return (invoke \"i32_align_switch\" (i32.const 3) (i32.const 1)) (i32.const 10))",
    "(assert_return (invoke \"i32_align_switch\" (i32.const 3) (i32.const 2)) (i32.const 10))",
    "(assert_return (invoke \"i32_align_switch\" (i32.const 4) (i32.const 0)) (i32.const 10))",
    "(assert_return (invoke \"i32_align_switch\" (i32.const 4) (i32.const 1)) (i32.const 10))",
    "(assert_return (invoke \"i32_align_switch\" (i32.const 4) (i32.const 2)) (i32.const 10))",
    "(assert_return (invoke \"i32_align_switch\" (i32.const 4) (i32.const 4)) (i32.const 10))",
    "(assert_return (invoke \"i64_align_switch\" (i32.const 0) (i32.const 0)) (i64.const 10))",
    "(assert_return (invoke \"i64_align_switch\" (i32.const 0) (i32.const 1)) (i64.const 10))",
    "(assert_return (invoke \"i64_align_switch\" (i32.const 1) (i32.const 0)) (i64.const 10))",
    "(assert_return (invoke \"i64_align_switch\" (i32.const 1) (i32.const 1)) (i64.const 10))",
    "(assert_return (invoke \"i64_align_switch\" (i32.const 2) (i32.const 0)) (i64.const 10))",
    "(assert_return (invoke \"i64_align_switch\" (i32.const 2) (i32.const 1)) (i64.const 10))",
    "(assert_return (invoke \"i64_align_switch\" (i32.const 2) (i32.const 2)) (i64.const 10))",
    "(assert_return (invoke \"i64_align_switch\" (i32.const 3) (i32.const 0)) (i64.const 10))",
    "(assert_return (invoke \"i64_align_switch\" (i32.const 3) (i32.const 1)) (i64.const 10))",
    "(assert_return (invoke \"i64_align_switch\" (i32.const 3) (i32.const 2)) (i64.const 10))",
    "(assert_return (invoke \"i64_align_switch\" (i32.const 4) (i32.const 0)) (i64.const 10))",
    "(assert_return (invoke \"i64_align_switch\" (i32.const 4) (i32.const 1)) (i64.const 10))",
    "(assert_return (invoke \"i64_align_switch\" (i32.const 4) (i32.const 2)) (i64.const 10))",
    "(assert_return (invoke \"i64_align_switch\" (i32.const 4) (i32.const 4)) (i64.const 10))",
    "(assert_return (invoke \"i64_align_switch\" (i32.const 5) (i32.const 0)) (i64.const 10))",
    "(assert_return (invoke \"i64_align_switch\" (i32.const 5) (i32.const 1)) (i64.const 10))",
    "(assert_return (invoke \"i64_align_switch\" (i32.const 5) (i32.const 2)) (i64.const 10))",
    "(assert_return (invoke \"i64_align_switch\" (i32.const 5) (i32.const 4)) (i64.const 10))",
    "(assert_return (invoke \"i64_align_switch\" (i32.const 6) (i32.const 0)) (i64.const 10))",
    "(assert_return (invoke \"i64_align_switch\" (i32.const 6) (i32.const 1)) (i64.const 10))",
    "(assert_return (invoke \"i64_align_switch\" (i32.const 6) (i32.const 2)) (i64.const 10))",
    "(assert_return (invoke \"i64_align_switch\" (i32.const 6) (i32.const 4)) (i64.const 10))",
    "(assert_return (invoke \"i64_align_switch\" (i32.const 6) (i32.const 8)) (i64.const 10))",
    "(module (memory 1)\n  (func (export \"store\") (param i32 i64) (i64.store align=4 (local.get 0) (local.get 1)) )\n  (func (export \"load\") (param i32) (result i32) (i32.load (local.get 0)) ))",
    "(assert_trap (invoke \"store\" (i32.const 65532) (i64.const -1)) \"out of bounds memory access\")",
    "(assert_return (invoke \"load\" (i32.const 65532)) (i32.const 0))"
  ],
  "dump": {
    "align.0.wasm": {
      "header": "\nalign.0.wasm:\tfile format wasm 0x1\n\nSections:\n\n     Type start=0x0000000a end=0x0000000e (size=0x00000004) count: 1\n Function start=0x00000010 end=0x00000012 (size=0x00000002) count: 1\n   Memory start=0x00000014 end=0x00000017 (size=0x00000003) count: 1\n     Code start=0x00000019 end=0x00000023 (size=0x0000000a) count: 1\n",
      "details": "\nalign.0.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nType[1]:\n - type[0] () -> nil\nFunction[1]:\n - func[0] sig=0\nMemory[1]:\n - memory[0] pages: initial=0\nCode[1]:\n - func[0] size=8\n",
      "disassemble": "\nalign.0.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n00001b func[0]:\n 00001c: 41 00                      | i32.const 0\n 00001e: 2c 00 00                   | i32.load8_s 0 0\n 000021: 1a                         | drop\n 000022: 0b                         | end\n"
    },
    "align.1.wasm": {
      "header": "\nalign.1.wasm:\tfile format wasm 0x1\n\nSections:\n\n     Type start=0x0000000a end=0x0000000e (size=0x00000004) count: 1\n Function start=0x00000010 end=0x00000012 (size=0x00000002) count: 1\n   Memory start=0x00000014 end=0x00000017 (size=0x00000003) count: 1\n     Code start=0x00000019 end=0x00000023 (size=0x0000000a) count: 1\n",
      "details": "\nalign.1.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nType[1]:\n - type[0] () -> nil\nFunction[1]:\n - func[0] sig=0\nMemory[1]:\n - memory[0] pages: initial=0\nCode[1]:\n - func[0] size=8\n",
      "disassemble": "\nalign.1.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n00001b func[0]:\n 00001c: 41 00                      | i32.const 0\n 00001e: 2d 00 00                   | i32.load8_u 0 0\n 000021: 1a                         | drop\n 000022: 0b                         | end\n"
    },
    "align.2.wasm": {
      "header": "\nalign.2.wasm:\tfile format wasm 0x1\n\nSections:\n\n     Type start=0x0000000a end=0x0000000e (size=0x00000004) count: 1\n Function start=0x00000010 end=0x00000012 (size=0x00000002) count: 1\n   Memory start=0x00000014 end=0x00000017 (size=0x00000003) count: 1\n     Code start=0x00000019 end=0x00000023 (size=0x0000000a) count: 1\n",
      "details": "\nalign.2.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nType[1]:\n - type[0] () -> nil\nFunction[1]:\n - func[0] sig=0\nMemory[1]:\n - memory[0] pages: initial=0\nCode[1]:\n - func[0] size=8\n",
      "disassemble": "\nalign.2.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n00001b func[0]:\n 00001c: 41 00                      | i32.const 0\n 00001e: 2e 01 00                   | i32.load16_s 1 0\n 000021: 1a                         | drop\n 000022: 0b                         | end\n"
    },
    "align.3.wasm": {
      "header": "\nalign.3.wasm:\tfile format wasm 0x1\n\nSections:\n\n     Type start=0x0000000a end=0x0000000e (size=0x00000004) count: 1\n Function start=0x00000010 end=0x00000012 (size=0x00000002) count: 1\n   Memory start=0x00000014 end=0x00000017 (size=0x00000003) count: 1\n     Code start=0x00000019 end=0x00000023 (size=0x0000000a) count: 1\n",
      "details": "\nalign.3.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nType[1]:\n - type[0] () -> nil\nFunction[1]:\n - func[0] sig=0\nMemory[1]:\n - memory[0] pages: initial=0\nCode[1]:\n - func[0] size=8\n",
      "disassemble": "\nalign.3.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n00001b func[0]:\n 00001c: 41 00                      | i32.const 0\n 00001e: 2f 01 00                   | i32.load16_u 1 0\n 000021: 1a                         | drop\n 000022: 0b                         | end\n"
    },
    "align.4.wasm": {
      "header": "\nalign.4.wasm:\tfile format wasm 0x1\n\nSections:\n\n     Type start=0x0000000a end=0x0000000e (size=0x00000004) count: 1\n Function start=0x00000010 end=0x00000012 (size=0x00000002) count: 1\n   Memory start=0x00000014 end=0x00000017 (size=0x00000003) count: 1\n     Code start=0x00000019 end=0x00000023 (size=0x0000000a) count: 1\n",
      "details": "\nalign.4.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nType[1]:\n - type[0] () -> nil\nFunction[1]:\n - func[0] sig=0\nMemory[1]:\n - memory[0] pages: initial=0\nCode[1]:\n - func[0] size=8\n",
      "disassemble": "\nalign.4.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n00001b func[0]:\n 00001c: 41 00                      | i32.const 0\n 00001e: 28 02 00                   | i32.load 2 0\n 000021: 1a                         | drop\n 000022: 0b                         | end\n"
    },
    "align.5.wasm": {
      "header": "\nalign.5.wasm:\tfile format wasm 0x1\n\nSections:\n\n     Type start=0x0000000a end=0x0000000e (size=0x00000004) count: 1\n Function start=0x00000010 end=0x00000012 (size=0x00000002) count: 1\n   Memory start=0x00000014 end=0x00000017 (size=0x00000003) count: 1\n     Code start=0x00000019 end=0x00000023 (size=0x0000000a) count: 1\n",
      "details": "\nalign.5.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nType[1]:\n - type[0] () -> nil\nFunction[1]:\n - func[0] sig=0\nMemory[1]:\n - memory[0] pages: initial=0\nCode[1]:\n - func[0] size=8\n",
      "disassemble": "\nalign.5.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n00001b func[0]:\n 00001c: 41 00                      | i32.const 0\n 00001e: 30 00 00                   | i64.load8_s 0 0\n 000021: 1a                         | drop\n 000022: 0b                         | end\n"
    },
    "align.6.wasm": {
      "header": "\nalign.6.wasm:\tfile format wasm 0x1\n\nSections:\n\n     Type start=0x0000000a end=0x0000000e (size=0x00000004) count: 1\n Function start=0x00000010 end=0x00000012 (size=0x00000002) count: 1\n   Memory start=0x00000014 end=0x00000017 (size=0x00000003) count: 1\n     Code start=0x00000019 end=0x00000023 (size=0x0000000a) count: 1\n",
      "details": "\nalign.6.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nType[1]:\n - type[0] () -> nil\nFunction[1]:\n - func[0] sig=0\nMemory[1]:\n - memory[0] pages: initial=0\nCode[1]:\n - func[0] size=8\n",
      "disassemble": "\nalign.6.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n00001b func[0]:\n 00001c: 41 00                      | i32.const 0\n 00001e: 31 00 00                   | i64.load8_u 0 0\n 000021: 1a                         | drop\n 000022: 0b                         | end\n"
    },
    "align.7.wasm": {
      "header": "\nalign.7.wasm:\tfile format wasm 0x1\n\nSections:\n\n     Type start=0x0000000a end=0x0000000e (size=0x00000004) count: 1\n Function start=0x00000010 end=0x00000012 (size=0x00000002) count: 1\n   Memory start=0x00000014 end=0x00000017 (size=0x00000003) count: 1\n     Code start=0x00000019 end=0x00000023 (size=0x0000000a) count: 1\n",
      "details": "\nalign.7.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nType[1]:\n - type[0] () -> nil\nFunction[1]:\n - func[0] sig=0\nMemory[1]:\n - memory[0] pages: initial=0\nCode[1]:\n - func[0] size=8\n",
      "disassemble": "\nalign.7.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n00001b func[0]:\n 00001c: 41 00                      | i32.const 0\n 00001e: 32 01 00                   | i64.load16_s 1 0\n 000021: 1a                         | drop\n 000022: 0b                         | end\n"
    },
    "align.8.wasm": {
      "header": "\nalign.8.wasm:\tfile format wasm 0x1\n\nSections:\n\n     Type start=0x0000000a end=0x0000000e (size=0x00000004) count: 1\n Function start=0x00000010 end=0x00000012 (size=0x00000002) count: 1\n   Memory start=0x00000014 end=0x00000017 (size=0x00000003) count: 1\n     Code start=0x00000019 end=0x00000023 (size=0x0000000a) count: 1\n",
      "details": "\nalign.8.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nType[1]:\n - type[0] () -> nil\nFunction[1]:\n - func[0] sig=0\nMemory[1]:\n - memory[0] pages: initial=0\nCode[1]:\n - func[0] size=8\n",
      "disassemble": "\nalign.8.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n00001b func[0]:\n 00001c: 41 00                      | i32.const 0\n 00001e: 33 01 00                   | i64.load16_u 1 0\n 000021: 1a                         | drop\n 000022: 0b                         | end\n"
    },
    "align.9.wasm": {
      "header": "\nalign.9.wasm:\tfile format wasm 0x1\n\nSections:\n\n     Type start=0x0000000a end=0x0000000e (size=0x00000004) count: 1\n Function start=0x00000010 end=0x00000012 (size=0x00000002) count: 1\n   Memory start=0x00000014 end=0x00000017 (size=0x00000003) count: 1\n     Code start=0x00000019 end=0x00000023 (size=0x0000000a) count: 1\n",
      "details": "\nalign.9.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nType[1]:\n - type[0] () -> nil\nFunction[1]:\n - func[0] sig=0\nMemory[1]:\n - memory[0] pages: initial=0\nCode[1]:\n - func[0] size=8\n",
      "disassemble": "\nalign.9.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n00001b func[0]:\n 00001c: 41 00                      | i32.const 0\n 00001e: 34 02 00                   | i64.load32_s 2 0\n 000021: 1a                         | drop\n 000022: 0b                         | end\n"
    },
    "align.10.wasm": {
      "header": "\nalign.10.wasm:\tfile format wasm 0x1\n\nSections:\n\n     Type start=0x0000000a end=0x0000000e (size=0x00000004) count: 1\n Function start=0x00000010 end=0x00000012 (size=0x00000002) count: 1\n   Memory start=0x00000014 end=0x00000017 (size=0x00000003) count: 1\n     Code start=0x00000019 end=0x00000023 (size=0x0000000a) count: 1\n",
      "details": "\nalign.10.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nType[1]:\n - type[0] () -> nil\nFunction[1]:\n - func[0] sig=0\nMemory[1]:\n - memory[0] pages: initial=0\nCode[1]:\n - func[0] size=8\n",
      "disassemble": "\nalign.10.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n00001b func[0]:\n 00001c: 41 00                      | i32.const 0\n 00001e: 35 02 00                   | i64.load32_u 2 0\n 000021: 1a                         | drop\n 000022: 0b                         | end\n"
    },
    "align.11.wasm": {
      "header": "\nalign.11.wasm:\tfile format wasm 0x1\n\nSections:\n\n     Type start=0x0000000a end=0x0000000e (size=0x00000004) count: 1\n Function start=0x00000010 end=0x00000012 (size=0x00000002) count: 1\n   Memory start=0x00000014 end=0x00000017 (size=0x00000003) count: 1\n     Code start=0x00000019 end=0x00000023 (size=0x0000000a) count: 1\n",
      "details": "\nalign.11.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nType[1]:\n - type[0] () -> nil\nFunction[1]:\n - func[0] sig=0\nMemory[1]:\n - memory[0] pages: initial=0\nCode[1]:\n - func[0] size=8\n",
      "disassemble": "\nalign.11.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n00001b func[0]:\n 00001c: 41 00                      | i32.const 0\n 00001e: 29 03 00                   | i64.load 3 0\n 000021: 1a                         | drop\n 000022: 0b                         | end\n"
    },
    "align.12.wasm": {
      "header": "\nalign.12.wasm:\tfile format wasm 0x1\n\nSections:\n\n     Type start=0x0000000a end=0x0000000e (size=0x00000004) count: 1\n Function start=0x00000010 end=0x00000012 (size=0x00000002) count: 1\n   Memory start=0x00000014 end=0x00000017 (size=0x00000003) count: 1\n     Code start=0x00000019 end=0x00000023 (size=0x0000000a) count: 1\n",
      "details": "\nalign.12.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nType[1]:\n - type[0] () -> nil\nFunction[1]:\n - func[0] sig=0\nMemory[1]:\n - memory[0] pages: initial=0\nCode[1]:\n - func[0] size=8\n",
      "disassemble": "\nalign.12.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n00001b func[0]:\n 00001c: 41 00                      | i32.const 0\n 00001e: 2a 02 00                   | f32.load 2 0\n 000021: 1a                         | drop\n 000022: 0b                         | end\n"
    },
    "align.13.wasm": {
      "header": "\nalign.13.wasm:\tfile format wasm 0x1\n\nSections:\n\n     Type start=0x0000000a end=0x0000000e (size=0x00000004) count: 1\n Function start=0x00000010 end=0x00000012 (size=0x00000002) count: 1\n   Memory start=0x00000014 end=0x00000017 (size=0x00000003) count: 1\n     Code start=0x00000019 end=0x00000023 (size=0x0000000a) count: 1\n",
      "details": "\nalign.13.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nType[1]:\n - type[0] () -> nil\nFunction[1]:\n - func[0] sig=0\nMemory[1]:\n - memory[0] pages: initial=0\nCode[1]:\n - func[0] size=8\n",
      "disassemble": "\nalign.13.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n00001b func[0]:\n 00001c: 41 00                      | i32.const 0\n 00001e: 2b 03 00                   | f64.load 3 0\n 000021: 1a                         | drop\n 000022: 0b                         | end\n"
    },
    "align.14.wasm": {
      "header": "\nalign.14.wasm:\tfile format wasm 0x1\n\nSections:\n\n     Type start=0x0000000a end=0x0000000e (size=0x00000004) count: 1\n Function start=0x00000010 end=0x00000012 (size=0x00000002) count: 1\n   Memory start=0x00000014 end=0x00000017 (size=0x00000003) count: 1\n     Code start=0x00000019 end=0x00000024 (size=0x0000000b) count: 1\n",
      "details": "\nalign.14.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nType[1]:\n - type[0] () -> nil\nFunction[1]:\n - func[0] sig=0\nMemory[1]:\n - memory[0] pages: initial=0\nCode[1]:\n - func[0] size=9\n",
      "disassemble": "\nalign.14.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n00001b func[0]:\n 00001c: 41 00                      | i32.const 0\n 00001e: 41 01                      | i32.const 1\n 000020: 3a 00 00                   | i32.store8 0 0\n 000023: 0b                         | end\n"
    },
    "align.15.wasm": {
      "header": "\nalign.15.wasm:\tfile format wasm 0x1\n\nSections:\n\n     Type start=0x0000000a end=0x0000000e (size=0x00000004) count: 1\n Function start=0x00000010 end=0x00000012 (size=0x00000002) count: 1\n   Memory start=0x00000014 end=0x00000017 (size=0x00000003) count: 1\n     Code start=0x00000019 end=0x00000024 (size=0x0000000b) count: 1\n",
      "details": "\nalign.15.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nType[1]:\n - type[0] () -> nil\nFunction[1]:\n - func[0] sig=0\nMemory[1]:\n - memory[0] pages: initial=0\nCode[1]:\n - func[0] size=9\n",
      "disassemble": "\nalign.15.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n00001b func[0]:\n 00001c: 41 00                      | i32.const 0\n 00001e: 41 01                      | i32.const 1\n 000020: 3b 01 00                   | i32.store16 1 0\n 000023: 0b                         | end\n"
    },
    "align.16.wasm": {
      "header": "\nalign.16.wasm:\tfile format wasm 0x1\n\nSections:\n\n     Type start=0x0000000a end=0x0000000e (size=0x00000004) count: 1\n Function start=0x00000010 end=0x00000012 (size=0x00000002) count: 1\n   Memory start=0x00000014 end=0x00000017 (size=0x00000003) count: 1\n     Code start=0x00000019 end=0x00000024 (size=0x0000000b) count: 1\n",
      "details": "\nalign.16.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nType[1]:\n - type[0] () -> nil\nFunction[1]:\n - func[0] sig=0\nMemory[1]:\n - memory[0] pages: initial=0\nCode[1]:\n - func[0] size=9\n",
      "disassemble": "\nalign.16.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n00001b func[0]:\n 00001c: 41 00                      | i32.const 0\n 00001e: 41 01                      | i32.const 1\n 000020: 36 02 00                   | i32.store 2 0\n 000023: 0b                         | end\n"
    },
    "align.17.wasm": {
      "header": "\nalign.17.wasm:\tfile format wasm 0x1\n\nSections:\n\n     Type start=0x0000000a end=0x0000000e (size=0x00000004) count: 1\n Function start=0x00000010 end=0x00000012 (size=0x00000002) count: 1\n   Memory start=0x00000014 end=0x00000017 (size=0x00000003) count: 1\n     Code start=0x00000019 end=0x00000024 (size=0x0000000b) count: 1\n",
      "details": "\nalign.17.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nType[1]:\n - type[0] () -> nil\nFunction[1]:\n - func[0] sig=0\nMemory[1]:\n - memory[0] pages: initial=0\nCode[1]:\n - func[0] size=9\n",
      "disassemble": "\nalign.17.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n00001b func[0]:\n 00001c: 41 00                      | i32.const 0\n 00001e: 42 01                      | i64.const 1\n 000020: 3c 00 00                   | i64.store8 0 0\n 000023: 0b                         | end\n"
    },
    "align.18.wasm": {
      "header": "\nalign.18.wasm:\tfile format wasm 0x1\n\nSections:\n\n     Type start=0x0000000a end=0x0000000e (size=0x00000004) count: 1\n Function start=0x00000010 end=0x00000012 (size=0x00000002) count: 1\n   Memory start=0x00000014 end=0x00000017 (size=0x00000003) count: 1\n     Code start=0x00000019 end=0x00000024 (size=0x0000000b) count: 1\n",
      "details": "\nalign.18.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nType[1]:\n - type[0] () -> nil\nFunction[1]:\n - func[0] sig=0\nMemory[1]:\n - memory[0] pages: initial=0\nCode[1]:\n - func[0] size=9\n",
      "disassemble": "\nalign.18.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n00001b func[0]:\n 00001c: 41 00                      | i32.const 0\n 00001e: 42 01                      | i64.const 1\n 000020: 3d 01 00                   | i64.store16 1 0\n 000023: 0b                         | end\n"
    },
    "align.19.wasm": {
      "header": "\nalign.19.wasm:\tfile format wasm 0x1\n\nSections:\n\n     Type start=0x0000000a end=0x0000000e (size=0x00000004) count: 1\n Function start=0x00000010 end=0x00000012 (size=0x00000002) count: 1\n   Memory start=0x00000014 end=0x00000017 (size=0x00000003) count: 1\n     Code start=0x00000019 end=0x00000024 (size=0x0000000b) count: 1\n",
      "details": "\nalign.19.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nType[1]:\n - type[0] () -> nil\nFunction[1]:\n - func[0] sig=0\nMemory[1]:\n - memory[0] pages: initial=0\nCode[1]:\n - func[0] size=9\n",
      "disassemble": "\nalign.19.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n00001b func[0]:\n 00001c: 41 00                      | i32.const 0\n 00001e: 42 01                      | i64.const 1\n 000020: 3e 02 00                   | i64.store32 2 0\n 000023: 0b                         | end\n"
    },
    "align.20.wasm": {
      "header": "\nalign.20.wasm:\tfile format wasm 0x1\n\nSections:\n\n     Type start=0x0000000a end=0x0000000e (size=0x00000004) count: 1\n Function start=0x00000010 end=0x00000012 (size=0x00000002) count: 1\n   Memory start=0x00000014 end=0x00000017 (size=0x00000003) count: 1\n     Code start=0x00000019 end=0x00000024 (size=0x0000000b) count: 1\n",
      "details": "\nalign.20.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nType[1]:\n - type[0] () -> nil\nFunction[1]:\n - func[0] sig=0\nMemory[1]:\n - memory[0] pages: initial=0\nCode[1]:\n - func[0] size=9\n",
      "disassemble": "\nalign.20.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n00001b func[0]:\n 00001c: 41 00                      | i32.const 0\n 00001e: 42 01                      | i64.const 1\n 000020: 37 03 00                   | i64.store 3 0\n 000023: 0b                         | end\n"
    },
    "align.21.wasm": {
      "header": "\nalign.21.wasm:\tfile format wasm 0x1\n\nSections:\n\n     Type start=0x0000000a end=0x0000000e (size=0x00000004) count: 1\n Function start=0x00000010 end=0x00000012 (size=0x00000002) count: 1\n   Memory start=0x00000014 end=0x00000017 (size=0x00000003) count: 1\n     Code start=0x00000019 end=0x00000027 (size=0x0000000e) count: 1\n",
      "details": "\nalign.21.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nType[1]:\n - type[0] () -> nil\nFunction[1]:\n - func[0] sig=0\nMemory[1]:\n - memory[0] pages: initial=0\nCode[1]:\n - func[0] size=12\n",
      "disassemble": "\nalign.21.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n00001b func[0]:\n 00001c: 41 00                      | i32.const 0\n 00001e: 43 00 00 80 3f             | f32.const 0x1p+0\n 000023: 38 02 00                   | f32.store 2 0\n 000026: 0b                         | end\n"
    },
    "align.22.wasm": {
      "header": "\nalign.22.wasm:\tfile format wasm 0x1\n\nSections:\n\n     Type start=0x0000000a end=0x0000000e (size=0x00000004) count: 1\n Function start=0x00000010 end=0x00000012 (size=0x00000002) count: 1\n   Memory start=0x00000014 end=0x00000017 (size=0x00000003) count: 1\n     Code start=0x00000019 end=0x0000002b (size=0x00000012) count: 1\n",
      "details": "\nalign.22.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nType[1]:\n - type[0] () -> nil\nFunction[1]:\n - func[0] sig=0\nMemory[1]:\n - memory[0] pages: initial=0\nCode[1]:\n - func[0] size=16\n",
      "disassemble": "\nalign.22.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n00001b func[0]:\n 00001c: 41 00                      | i32.const 0\n 00001e: 44 00 00 00 00 00 00 f0 3f | f64.const 0x1p+0\n 000027: 39 03 00                   | f64.store 3 0\n 00002a: 0b                         | end\n"
    },
    "align.106.wasm": {
      "header": "\nalign.106.wasm:\tfile format wasm 0x1\n\nSections:\n\n     Type start=0x0000000a end=0x00000021 (size=0x00000017) count: 4\n Function start=0x00000023 end=0x00000028 (size=0x00000005) count: 4\n   Memory start=0x0000002a end=0x0000002d (size=0x00000003) count: 1\n   Export start=0x0000002f end=0x0000007c (size=0x0000004d) count: 4\n     Code start=0x0000007f end=0x000004fa (size=0x0000047b) count: 4\n",
      "details": "\nalign.106.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nType[4]:\n - type[0] (i32) -> f32\n - type[1] (i32) -> f64\n - type[2] (i32, i32) -> i32\n - type[3] (i32, i32) -> i64\nFunction[4]:\n - func[0] sig=0 <f32_align_switch>\n - func[1] sig=1 <f64_align_switch>\n - func[2] sig=2 <i32_align_switch>\n - func[3] sig=3 <i64_align_switch>\nMemory[1]:\n - memory[0] pages: initial=1\nExport[4]:\n - func[0] <f32_align_switch> -> \"f32_align_switch\"\n - func[1] <f64_align_switch> -> \"f64_align_switch\"\n - func[2] <i32_align_switch> -> \"i32_align_switch\"\n - func[3] <i64_align_switch> -> \"i64_align_switch\"\nCode[4]:\n - func[0] size=99 <f32_align_switch>\n - func[1] size=123 <f64_align_switch>\n - func[2] size=354 <i32_align_switch>\n - func[3] size=564 <i64_align_switch>\n",
      "disassemble": "\nalign.106.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n000081 func[0] <f32_align_switch>:\n 000082: 02 7d                      | local[1..2] type=f32\n 000084: 43 00 00 20 41             | f32.const 0x1.4p+3\n 000089: 21 01                      | local.set 1\n 00008b: 02 40                      | block\n 00008d: 02 40                      |   block\n 00008f: 02 40                      |     block\n 000091: 02 40                      |       block\n 000093: 02 40                      |         block\n 000095: 20 00                      |           local.get 0\n 000097: 0e 04 00 01 02 03 04       |           br_table 0 1 2 3 4\n 00009e: 0b                         |         end\n 00009f: 41 00                      |         i32.const 0\n 0000a1: 20 01                      |         local.get 1\n 0000a3: 38 02 00                   |         f32.store 2 0\n 0000a6: 41 00                      |         i32.const 0\n 0000a8: 2a 02 00                   |         f32.load 2 0\n 0000ab: 21 02                      |         local.set 2\n 0000ad: 0c 03                      |         br 3\n 0000af: 0b                         |       end\n 0000b0: 41 00                      |       i32.const 0\n 0000b2: 20 01                      |       local.get 1\n 0000b4: 38 00 00                   |       f32.store 0 0\n 0000b7: 41 00                      |       i32.const 0\n 0000b9: 2a 00 00                   |       f32.load 0 0\n 0000bc: 21 02                      |       local.set 2\n 0000be: 0c 02                      |       br 2\n 0000c0: 0b                         |     end\n 0000c1: 41 00                      |     i32.const 0\n 0000c3: 20 01                      |     local.get 1\n 0000c5: 38 01 00                   |     f32.store 1 0\n 0000c8: 41 00                      |     i32.const 0\n 0000ca: 2a 01 00                   |     f32.load 1 0\n 0000cd: 21 02                      |     local.set 2\n 0000cf: 0c 01                      |     br 1\n 0000d1: 0b                         |   end\n 0000d2: 41 00                      |   i32.const 0\n 0000d4: 20 01                      |   local.get 1\n 0000d6: 38 02 00                   |   f32.store 2 0\n 0000d9: 41 00                      |   i32.const 0\n 0000db: 2a 02 00                   |   f32.load 2 0\n 0000de: 21 02                      |   local.set 2\n 0000e0: 0b                         | end\n 0000e1: 20 02                      | local.get 2\n 0000e3: 0b                         | end\n0000e5 func[1] <f64_align_switch>:\n 0000e6: 02 7c                      | local[1..2] type=f64\n 0000e8: 44 00 00 00 00 00 00 24 40 | f64.const 0x1.4p+3\n 0000f1: 21 01                      | local.set 1\n 0000f3: 02 40                      | block\n 0000f5: 02 40                      |   block\n 0000f7: 02 40                      |     block\n 0000f9: 02 40                      |       block\n 0000fb: 02 40                      |         block\n 0000fd: 02 40                      |           block\n 0000ff: 20 00                      |             local.get 0\n 000101: 0e 05 00 01 02 03 04 05    |             br_table 0 1 2 3 4 5\n 000109: 0b                         |           end\n 00010a: 41 00                      |           i32.const 0\n 00010c: 20 01                      |           local.get 1\n 00010e: 39 03 00                   |           f64.store 3 0\n 000111: 41 00                      |           i32.const 0\n 000113: 2b 03 00                   |           f64.load 3 0\n 000116: 21 02                      |           local.set 2\n 000118: 0c 04                      |           br 4\n 00011a: 0b                         |         end\n 00011b: 41 00                      |         i32.const 0\n 00011d: 20 01                      |         local.get 1\n 00011f: 39 00 00                   |         f64.store 0 0\n 000122: 41 00                      |         i32.const 0\n 000124: 2b 00 00                   |         f64.load 0 0\n 000127: 21 02                      |         local.set 2\n 000129: 0c 03                      |         br 3\n 00012b: 0b                         |       end\n 00012c: 41 00                      |       i32.const 0\n 00012e: 20 01                      |       local.get 1\n 000130: 39 01 00                   |       f64.store 1 0\n 000133: 41 00                      |       i32.const 0\n 000135: 2b 01 00                   |       f64.load 1 0\n 000138: 21 02                      |       local.set 2\n 00013a: 0c 02                      |       br 2\n 00013c: 0b                         |     end\n 00013d: 41 00                      |     i32.const 0\n 00013f: 20 01                      |     local.get 1\n 000141: 39 02 00                   |     f64.store 2 0\n 000144: 41 00                      |     i32.const 0\n 000146: 2b 02 00                   |     f64.load 2 0\n 000149: 21 02                      |     local.set 2\n 00014b: 0c 01                      |     br 1\n 00014d: 0b                         |   end\n 00014e: 41 00                      |   i32.const 0\n 000150: 20 01                      |   local.get 1\n 000152: 39 03 00                   |   f64.store 3 0\n 000155: 41 00                      |   i32.const 0\n 000157: 2b 03 00                   |   f64.load 3 0\n 00015a: 21 02                      |   local.set 2\n 00015c: 0b                         | end\n 00015d: 20 02                      | local.get 2\n 00015f: 0b                         | end\n000162 func[2] <i32_align_switch>:\n 000163: 02 7f                      | local[2..3] type=i32\n 000165: 41 0a                      | i32.const 10\n 000167: 21 02                      | local.set 2\n 000169: 02 40                      | block\n 00016b: 02 40                      |   block\n 00016d: 02 40                      |     block\n 00016f: 02 40                      |       block\n 000171: 02 40                      |         block\n 000173: 02 40                      |           block\n 000175: 20 00                      |             local.get 0\n 000177: 0e 05 00 01 02 03 04 05    |             br_table 0 1 2 3 4 5\n 00017f: 0b                         |           end\n 000180: 20 01                      |           local.get 1\n 000182: 41 00                      |           i32.const 0\n 000184: 46                         |           i32.eq\n 000185: 04 40                      |           if\n 000187: 41 00                      |             i32.const 0\n 000189: 20 02                      |             local.get 2\n 00018b: 3a 00 00                   |             i32.store8 0 0\n 00018e: 41 00                      |             i32.const 0\n 000190: 2c 00 00                   |             i32.load8_s 0 0\n 000193: 21 03                      |             local.set 3\n 000195: 0b                         |           end\n 000196: 20 01                      |           local.get 1\n 000198: 41 01                      |           i32.const 1\n 00019a: 46                         |           i32.eq\n 00019b: 04 40                      |           if\n 00019d: 41 00                      |             i32.const 0\n 00019f: 20 02                      |             local.get 2\n 0001a1: 3a 00 00                   |             i32.store8 0 0\n 0001a4: 41 00                      |             i32.const 0\n 0001a6: 2c 00 00                   |             i32.load8_s 0 0\n 0001a9: 21 03                      |             local.set 3\n 0001ab: 0b                         |           end\n 0001ac: 0c 04                      |           br 4\n 0001ae: 0b                         |         end\n 0001af: 20 01                      |         local.get 1\n 0001b1: 41 00                      |         i32.const 0\n 0001b3: 46                         |         i32.eq\n 0001b4: 04 40                      |         if\n 0001b6: 41 00                      |           i32.const 0\n 0001b8: 20 02                      |           local.get 2\n 0001ba: 3a 00 00                   |           i32.store8 0 0\n 0001bd: 41 00                      |           i32.const 0\n 0001bf: 2d 00 00                   |           i32.load8_u 0 0\n 0001c2: 21 03                      |           local.set 3\n 0001c4: 0b                         |         end\n 0001c5: 20 01                      |         local.get 1\n 0001c7: 41 01                      |         i32.const 1\n 0001c9: 46                         |         i32.eq\n 0001ca: 04 40                      |         if\n 0001cc: 41 00                      |           i32.const 0\n 0001ce: 20 02                      |           local.get 2\n 0001d0: 3a 00 00                   |           i32.store8 0 0\n 0001d3: 41 00                      |           i32.const 0\n 0001d5: 2d 00 00                   |           i32.load8_u 0 0\n 0001d8: 21 03                      |           local.set 3\n 0001da: 0b                         |         end\n 0001db: 0c 03                      |         br 3\n 0001dd: 0b                         |       end\n 0001de: 20 01                      |       local.get 1\n 0001e0: 41 00                      |       i32.const 0\n 0001e2: 46                         |       i32.eq\n 0001e3: 04 40                      |       if\n 0001e5: 41 00                      |         i32.const 0\n 0001e7: 20 02                      |         local.get 2\n 0001e9: 3b 01 00                   |         i32.store16 1 0\n 0001ec: 41 00                      |         i32.const 0\n 0001ee: 2e 01 00                   |         i32.load16_s 1 0\n 0001f1: 21 03                      |         local.set 3\n 0001f3: 0b                         |       end\n 0001f4: 20 01                      |       local.get 1\n 0001f6: 41 01                      |       i32.const 1\n 0001f8: 46                         |       i32.eq\n 0001f9: 04 40                      |       if\n 0001fb: 41 00                      |         i32.const 0\n 0001fd: 20 02                      |         local.get 2\n 0001ff: 3b 00 00                   |         i32.store16 0 0\n 000202: 41 00                      |         i32.const 0\n 000204: 2e 00 00                   |         i32.load16_s 0 0\n 000207: 21 03                      |         local.set 3\n 000209: 0b                         |       end\n 00020a: 20 01                      |       local.get 1\n 00020c: 41 02                      |       i32.const 2\n 00020e: 46                         |       i32.eq\n 00020f: 04 40                      |       if\n 000211: 41 00                      |         i32.const 0\n 000213: 20 02                      |         local.get 2\n 000215: 3b 01 00                   |         i32.store16 1 0\n 000218: 41 00                      |         i32.const 0\n 00021a: 2e 01 00                   |         i32.load16_s 1 0\n 00021d: 21 03                      |         local.set 3\n 00021f: 0b                         |       end\n 000220: 0c 02                      |       br 2\n 000222: 0b                         |     end\n 000223: 20 01                      |     local.get 1\n 000225: 41 00                      |     i32.const 0\n 000227: 46                         |     i32.eq\n 000228: 04 40                      |     if\n 00022a: 41 00                      |       i32.const 0\n 00022c: 20 02                      |       local.get 2\n 00022e: 3b 01 00                   |       i32.store16 1 0\n 000231: 41 00                      |       i32.const 0\n 000233: 2f 01 00                   |       i32.load16_u 1 0\n 000236: 21 03                      |       local.set 3\n 000238: 0b                         |     end\n 000239: 20 01                      |     local.get 1\n 00023b: 41 01                      |     i32.const 1\n 00023d: 46                         |     i32.eq\n 00023e: 04 40                      |     if\n 000240: 41 00                      |       i32.const 0\n 000242: 20 02                      |       local.get 2\n 000244: 3b 00 00                   |       i32.store16 0 0\n 000247: 41 00                      |       i32.const 0\n 000249: 2f 00 00                   |       i32.load16_u 0 0\n 00024c: 21 03                      |       local.set 3\n 00024e: 0b                         |     end\n 00024f: 20 01                      |     local.get 1\n 000251: 41 02                      |     i32.const 2\n 000253: 46                         |     i32.eq\n 000254: 04 40                      |     if\n 000256: 41 00                      |       i32.const 0\n 000258: 20 02                      |       local.get 2\n 00025a: 3b 01 00                   |       i32.store16 1 0\n 00025d: 41 00                      |       i32.const 0\n 00025f: 2f 01 00                   |       i32.load16_u 1 0\n 000262: 21 03                      |       local.set 3\n 000264: 0b                         |     end\n 000265: 0c 01                      |     br 1\n 000267: 0b                         |   end\n 000268: 20 01                      |   local.get 1\n 00026a: 41 00                      |   i32.const 0\n 00026c: 46                         |   i32.eq\n 00026d: 04 40                      |   if\n 00026f: 41 00                      |     i32.const 0\n 000271: 20 02                      |     local.get 2\n 000273: 36 02 00                   |     i32.store 2 0\n 000276: 41 00                      |     i32.const 0\n 000278: 28 02 00                   |     i32.load 2 0\n 00027b: 21 03                      |     local.set 3\n 00027d: 0b                         |   end\n 00027e: 20 01                      |   local.get 1\n 000280: 41 01                      |   i32.const 1\n 000282: 46                         |   i32.eq\n 000283: 04 40                      |   if\n 000285: 41 00                      |     i32.const 0\n 000287: 20 02                      |     local.get 2\n 000289: 36 00 00                   |     i32.store 0 0\n 00028c: 41 00                      |     i32.const 0\n 00028e: 28 00 00                   |     i32.load 0 0\n 000291: 21 03                      |     local.set 3\n 000293: 0b                         |   end\n 000294: 20 01                      |   local.get 1\n 000296: 41 02                      |   i32.const 2\n 000298: 46                         |   i32.eq\n 000299: 04 40                      |   if\n 00029b: 41 00                      |     i32.const 0\n 00029d: 20 02                      |     local.get 2\n 00029f: 36 01 00                   |     i32.store 1 0\n 0002a2: 41 00                      |     i32.const 0\n 0002a4: 28 01 00                   |     i32.load 1 0\n 0002a7: 21 03                      |     local.set 3\n 0002a9: 0b                         |   end\n 0002aa: 20 01                      |   local.get 1\n 0002ac: 41 04                      |   i32.const 4\n 0002ae: 46                         |   i32.eq\n 0002af: 04 40                      |   if\n 0002b1: 41 00                      |     i32.const 0\n 0002b3: 20 02                      |     local.get 2\n 0002b5: 36 02 00                   |     i32.store 2 0\n 0002b8: 41 00                      |     i32.const 0\n 0002ba: 28 02 00                   |     i32.load 2 0\n 0002bd: 21 03                      |     local.set 3\n 0002bf: 0b                         |   end\n 0002c0: 0b                         | end\n 0002c1: 20 03                      | local.get 3\n 0002c3: 0b                         | end\n0002c6 func[3] <i64_align_switch>:\n 0002c7: 02 7e                      | local[2..3] type=i64\n 0002c9: 42 0a                      | i64.const 10\n 0002cb: 21 02                      | local.set 2\n 0002cd: 02 40                      | block\n 0002cf: 02 40                      |   block\n 0002d1: 02 40                      |     block\n 0002d3: 02 40                      |       block\n 0002d5: 02 40                      |         block\n 0002d7: 02 40                      |           block\n 0002d9: 02 40                      |             block\n 0002db: 02 40                      |               block\n 0002dd: 20 00                      |                 local.get 0\n 0002df: 0e 07 00 01 02 03 04 05 06 |                 br_table 0 1 2 3 4 5 6 7\n 0002e8: 07                         | \n 0002e9: 0b                         |               end\n 0002ea: 20 01                      |               local.get 1\n 0002ec: 41 00                      |               i32.const 0\n 0002ee: 46                         |               i32.eq\n 0002ef: 04 40                      |               if\n 0002f1: 41 00                      |                 i32.const 0\n 0002f3: 20 02                      |                 local.get 2\n 0002f5: 3c 00 00                   |                 i64.store8 0 0\n 0002f8: 41 00                      |                 i32.const 0\n 0002fa: 30 00 00                   |                 i64.load8_s 0 0\n 0002fd: 21 03                      |                 local.set 3\n 0002ff: 0b                         |               end\n 000300: 20 01                      |               local.get 1\n 000302: 41 01                      |               i32.const 1\n 000304: 46                         |               i32.eq\n 000305: 04 40                      |               if\n 000307: 41 00                      |                 i32.const 0\n 000309: 20 02                      |                 local.get 2\n 00030b: 3c 00 00                   |                 i64.store8 0 0\n 00030e: 41 00                      |                 i32.const 0\n 000310: 30 00 00                   |                 i64.load8_s 0 0\n 000313: 21 03                      |                 local.set 3\n 000315: 0b                         |               end\n 000316: 0c 06                      |               br 6\n 000318: 0b                         |             end\n 000319: 20 01                      |             local.get 1\n 00031b: 41 00                      |             i32.const 0\n 00031d: 46                         |             i32.eq\n 00031e: 04 40                      |             if\n 000320: 41 00                      |               i32.const 0\n 000322: 20 02                      |               local.get 2\n 000324: 3c 00 00                   |               i64.store8 0 0\n 000327: 41 00                      |               i32.const 0\n 000329: 31 00 00                   |               i64.load8_u 0 0\n 00032c: 21 03                      |               local.set 3\n 00032e: 0b                         |             end\n 00032f: 20 01                      |             local.get 1\n 000331: 41 01                      |             i32.const 1\n 000333: 46                         |             i32.eq\n 000334: 04 40                      |             if\n 000336: 41 00                      |               i32.const 0\n 000338: 20 02                      |               local.get 2\n 00033a: 3c 00 00                   |               i64.store8 0 0\n 00033d: 41 00                      |               i32.const 0\n 00033f: 31 00 00                   |               i64.load8_u 0 0\n 000342: 21 03                      |               local.set 3\n 000344: 0b                         |             end\n 000345: 0c 05                      |             br 5\n 000347: 0b                         |           end\n 000348: 20 01                      |           local.get 1\n 00034a: 41 00                      |           i32.const 0\n 00034c: 46                         |           i32.eq\n 00034d: 04 40                      |           if\n 00034f: 41 00                      |             i32.const 0\n 000351: 20 02                      |             local.get 2\n 000353: 3d 01 00                   |             i64.store16 1 0\n 000356: 41 00                      |             i32.const 0\n 000358: 32 01 00                   |             i64.load16_s 1 0\n 00035b: 21 03                      |             local.set 3\n 00035d: 0b                         |           end\n 00035e: 20 01                      |           local.get 1\n 000360: 41 01                      |           i32.const 1\n 000362: 46                         |           i32.eq\n 000363: 04 40                      |           if\n 000365: 41 00                      |             i32.const 0\n 000367: 20 02                      |             local.get 2\n 000369: 3d 00 00                   |             i64.store16 0 0\n 00036c: 41 00                      |             i32.const 0\n 00036e: 32 00 00                   |             i64.load16_s 0 0\n 000371: 21 03                      |             local.set 3\n 000373: 0b                         |           end\n 000374: 20 01                      |           local.get 1\n 000376: 41 02                      |           i32.const 2\n 000378: 46                         |           i32.eq\n 000379: 04 40                      |           if\n 00037b: 41 00                      |             i32.const 0\n 00037d: 20 02                      |             local.get 2\n 00037f: 3d 01 00                   |             i64.store16 1 0\n 000382: 41 00                      |             i32.const 0\n 000384: 32 01 00                   |             i64.load16_s 1 0\n 000387: 21 03                      |             local.set 3\n 000389: 0b                         |           end\n 00038a: 0c 04                      |           br 4\n 00038c: 0b                         |         end\n 00038d: 20 01                      |         local.get 1\n 00038f: 41 00                      |         i32.const 0\n 000391: 46                         |         i32.eq\n 000392: 04 40                      |         if\n 000394: 41 00                      |           i32.const 0\n 000396: 20 02                      |           local.get 2\n 000398: 3d 01 00                   |           i64.store16 1 0\n 00039b: 41 00                      |           i32.const 0\n 00039d: 33 01 00                   |           i64.load16_u 1 0\n 0003a0: 21 03                      |           local.set 3\n 0003a2: 0b                         |         end\n 0003a3: 20 01                      |         local.get 1\n 0003a5: 41 01                      |         i32.const 1\n 0003a7: 46                         |         i32.eq\n 0003a8: 04 40                      |         if\n 0003aa: 41 00                      |           i32.const 0\n 0003ac: 20 02                      |           local.get 2\n 0003ae: 3d 00 00                   |           i64.store16 0 0\n 0003b1: 41 00                      |           i32.const 0\n 0003b3: 33 00 00                   |           i64.load16_u 0 0\n 0003b6: 21 03                      |           local.set 3\n 0003b8: 0b                         |         end\n 0003b9: 20 01                      |         local.get 1\n 0003bb: 41 02                      |         i32.const 2\n 0003bd: 46                         |         i32.eq\n 0003be: 04 40                      |         if\n 0003c0: 41 00                      |           i32.const 0\n 0003c2: 20 02                      |           local.get 2\n 0003c4: 3d 01 00                   |           i64.store16 1 0\n 0003c7: 41 00                      |           i32.const 0\n 0003c9: 33 01 00                   |           i64.load16_u 1 0\n 0003cc: 21 03                      |           local.set 3\n 0003ce: 0b                         |         end\n 0003cf: 0c 03                      |         br 3\n 0003d1: 0b                         |       end\n 0003d2: 20 01                      |       local.get 1\n 0003d4: 41 00                      |       i32.const 0\n 0003d6: 46                         |       i32.eq\n 0003d7: 04 40                      |       if\n 0003d9: 41 00                      |         i32.const 0\n 0003db: 20 02                      |         local.get 2\n 0003dd: 3e 02 00                   |         i64.store32 2 0\n 0003e0: 41 00                      |         i32.const 0\n 0003e2: 34 02 00                   |         i64.load32_s 2 0\n 0003e5: 21 03                      |         local.set 3\n 0003e7: 0b                         |       end\n 0003e8: 20 01                      |       local.get 1\n 0003ea: 41 01                      |       i32.const 1\n 0003ec: 46                         |       i32.eq\n 0003ed: 04 40                      |       if\n 0003ef: 41 00                      |         i32.const 0\n 0003f1: 20 02                      |         local.get 2\n 0003f3: 3e 00 00                   |         i64.store32 0 0\n 0003f6: 41 00                      |         i32.const 0\n 0003f8: 34 00 00                   |         i64.load32_s 0 0\n 0003fb: 21 03                      |         local.set 3\n 0003fd: 0b                         |       end\n 0003fe: 20 01                      |       local.get 1\n 000400: 41 02                      |       i32.const 2\n 000402: 46                         |       i32.eq\n 000403: 04 40                      |       if\n 000405: 41 00                      |         i32.const 0\n 000407: 20 02                      |         local.get 2\n 000409: 3e 01 00                   |         i64.store32 1 0\n 00040c: 41 00                      |         i32.const 0\n 00040e: 34 01 00                   |         i64.load32_s 1 0\n 000411: 21 03                      |         local.set 3\n 000413: 0b                         |       end\n 000414: 20 01                      |       local.get 1\n 000416: 41 04                      |       i32.const 4\n 000418: 46                         |       i32.eq\n 000419: 04 40                      |       if\n 00041b: 41 00                      |         i32.const 0\n 00041d: 20 02                      |         local.get 2\n 00041f: 3e 02 00                   |         i64.store32 2 0\n 000422: 41 00                      |         i32.const 0\n 000424: 34 02 00                   |         i64.load32_s 2 0\n 000427: 21 03                      |         local.set 3\n 000429: 0b                         |       end\n 00042a: 0c 02                      |       br 2\n 00042c: 0b                         |     end\n 00042d: 20 01                      |     local.get 1\n 00042f: 41 00                      |     i32.const 0\n 000431: 46                         |     i32.eq\n 000432: 04 40                      |     if\n 000434: 41 00                      |       i32.const 0\n 000436: 20 02                      |       local.get 2\n 000438: 3e 02 00                   |       i64.store32 2 0\n 00043b: 41 00                      |       i32.const 0\n 00043d: 35 02 00                   |       i64.load32_u 2 0\n 000440: 21 03                      |       local.set 3\n 000442: 0b                         |     end\n 000443: 20 01                      |     local.get 1\n 000445: 41 01                      |     i32.const 1\n 000447: 46                         |     i32.eq\n 000448: 04 40                      |     if\n 00044a: 41 00                      |       i32.const 0\n 00044c: 20 02                      |       local.get 2\n 00044e: 3e 00 00                   |       i64.store32 0 0\n 000451: 41 00                      |       i32.const 0\n 000453: 35 00 00                   |       i64.load32_u 0 0\n 000456: 21 03                      |       local.set 3\n 000458: 0b                         |     end\n 000459: 20 01                      |     local.get 1\n 00045b: 41 02                      |     i32.const 2\n 00045d: 46                         |     i32.eq\n 00045e: 04 40                      |     if\n 000460: 41 00                      |       i32.const 0\n 000462: 20 02                      |       local.get 2\n 000464: 3e 01 00                   |       i64.store32 1 0\n 000467: 41 00                      |       i32.const 0\n 000469: 35 01 00                   |       i64.load32_u 1 0\n 00046c: 21 03                      |       local.set 3\n 00046e: 0b                         |     end\n 00046f: 20 01                      |     local.get 1\n 000471: 41 04                      |     i32.const 4\n 000473: 46                         |     i32.eq\n 000474: 04 40                      |     if\n 000476: 41 00                      |       i32.const 0\n 000478: 20 02                      |       local.get 2\n 00047a: 3e 02 00                   |       i64.store32 2 0\n 00047d: 41 00                      |       i32.const 0\n 00047f: 35 02 00                   |       i64.load32_u 2 0\n 000482: 21 03                      |       local.set 3\n 000484: 0b                         |     end\n 000485: 0c 01                      |     br 1\n 000487: 0b                         |   end\n 000488: 20 01                      |   local.get 1\n 00048a: 41 00                      |   i32.const 0\n 00048c: 46                         |   i32.eq\n 00048d: 04 40                      |   if\n 00048f: 41 00                      |     i32.const 0\n 000491: 20 02                      |     local.get 2\n 000493: 37 03 00                   |     i64.store 3 0\n 000496: 41 00                      |     i32.const 0\n 000498: 29 03 00                   |     i64.load 3 0\n 00049b: 21 03                      |     local.set 3\n 00049d: 0b                         |   end\n 00049e: 20 01                      |   local.get 1\n 0004a0: 41 01                      |   i32.const 1\n 0004a2: 46                         |   i32.eq\n 0004a3: 04 40                      |   if\n 0004a5: 41 00                      |     i32.const 0\n 0004a7: 20 02                      |     local.get 2\n 0004a9: 37 00 00                   |     i64.store 0 0\n 0004ac: 41 00                      |     i32.const 0\n 0004ae: 29 00 00                   |     i64.load 0 0\n 0004b1: 21 03                      |     local.set 3\n 0004b3: 0b                         |   end\n 0004b4: 20 01                      |   local.get 1\n 0004b6: 41 02                      |   i32.const 2\n 0004b8: 46                         |   i32.eq\n 0004b9: 04 40                      |   if\n 0004bb: 41 00                      |     i32.const 0\n 0004bd: 20 02                      |     local.get 2\n 0004bf: 37 01 00                   |     i64.store 1 0\n 0004c2: 41 00                      |     i32.const 0\n 0004c4: 29 01 00                   |     i64.load 1 0\n 0004c7: 21 03                      |     local.set 3\n 0004c9: 0b                         |   end\n 0004ca: 20 01                      |   local.get 1\n 0004cc: 41 04                      |   i32.const 4\n 0004ce: 46                         |   i32.eq\n 0004cf: 04 40                      |   if\n 0004d1: 41 00                      |     i32.const 0\n 0004d3: 20 02                      |     local.get 2\n 0004d5: 37 02 00                   |     i64.store 2 0\n 0004d8: 41 00                      |     i32.const 0\n 0004da: 29 02 00                   |     i64.load 2 0\n 0004dd: 21 03                      |     local.set 3\n 0004df: 0b                         |   end\n 0004e0: 20 01                      |   local.get 1\n 0004e2: 41 08                      |   i32.const 8\n 0004e4: 46                         |   i32.eq\n 0004e5: 04 40                      |   if\n 0004e7: 41 00                      |     i32.const 0\n 0004e9: 20 02                      |     local.get 2\n 0004eb: 37 03 00                   |     i64.store 3 0\n 0004ee: 41 00                      |     i32.const 0\n 0004f0: 29 03 00                   |     i64.load 3 0\n 0004f3: 21 03                      |     local.set 3\n 0004f5: 0b                         |   end\n 0004f6: 0b                         | end\n 0004f7: 20 03                      | local.get 3\n 0004f9: 0b                         | end\n"
    },
    "align.107.wasm": {
      "header": "\nalign.107.wasm:\tfile format wasm 0x1\n\nSections:\n\n     Type start=0x0000000a end=0x00000015 (size=0x0000000b) count: 2\n Function start=0x00000017 end=0x0000001a (size=0x00000003) count: 2\n   Memory start=0x0000001c end=0x0000001f (size=0x00000003) count: 1\n   Export start=0x00000021 end=0x00000031 (size=0x00000010) count: 2\n     Code start=0x00000033 end=0x00000046 (size=0x00000013) count: 2\n",
      "details": "\nalign.107.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nType[2]:\n - type[0] (i32, i64) -> nil\n - type[1] (i32) -> i32\nFunction[2]:\n - func[0] sig=0 <store>\n - func[1] sig=1 <load>\nMemory[1]:\n - memory[0] pages: initial=1\nExport[2]:\n - func[0] <store> -> \"store\"\n - func[1] <load> -> \"load\"\nCode[2]:\n - func[0] size=9 <store>\n - func[1] size=7 <load>\n",
      "disassemble": "\nalign.107.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n000035 func[0] <store>:\n 000036: 20 00                      | local.get 0\n 000038: 20 01                      | local.get 1\n 00003a: 37 02 00                   | i64.store 2 0\n 00003d: 0b                         | end\n00003f func[1] <load>:\n 000040: 20 00                      | local.get 0\n 000042: 28 02 00                   | i32.load 2 0\n 000045: 0b                         | end\n"
    }
  }
}
