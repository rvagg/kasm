{
  "bin": {
    "float_literals.0.wasm": "AGFzbQEAAAABEQRgAAF/YAABfmAAAX1gAAF8A1NSAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQECAgICAgICAgICAwMDAwMDAwMDAwf9C1IHZjMyLm5hbgAAEGYzMi5wb3NpdGl2ZV9uYW4AARBmMzIubmVnYXRpdmVfbmFuAAINZjMyLnBsYWluX25hbgADImYzMi5pbmZvcm1hbGx5X2tub3duX2FzX3BsYWluX3NuYW4ABBBmMzIuYWxsX29uZXNfbmFuAAUMZjMyLm1pc2NfbmFuAAYVZjMyLm1pc2NfcG9zaXRpdmVfbmFuAAcVZjMyLm1pc2NfbmVnYXRpdmVfbmFuAAgMZjMyLmluZmluaXR5AAkVZjMyLnBvc2l0aXZlX2luZmluaXR5AAoVZjMyLm5lZ2F0aXZlX2luZmluaXR5AAsIZjMyLnplcm8ADBFmMzIucG9zaXRpdmVfemVybwANEWYzMi5uZWdhdGl2ZV96ZXJvAA4IZjMyLm1pc2MADxBmMzIubWluX3Bvc2l0aXZlABAOZjMyLm1pbl9ub3JtYWwAEQ5mMzIubWF4X2Zpbml0ZQASEWYzMi5tYXhfc3Vibm9ybWFsABMQZjMyLnRyYWlsaW5nX2RvdAAUDGYzMl9kZWMuemVybwAVFWYzMl9kZWMucG9zaXRpdmVfemVybwAWFWYzMl9kZWMubmVnYXRpdmVfemVybwAXDGYzMl9kZWMubWlzYwAYFGYzMl9kZWMubWluX3Bvc2l0aXZlABkSZjMyX2RlYy5taW5fbm9ybWFsABoVZjMyX2RlYy5tYXhfc3Vibm9ybWFsABsSZjMyX2RlYy5tYXhfZmluaXRlABwUZjMyX2RlYy50cmFpbGluZ19kb3QAHRdmMzJfZGVjLnJvb3RfYmVlcl9mbG9hdAAeB2Y2NC5uYW4AHxBmNjQucG9zaXRpdmVfbmFuACAQZjY0Lm5lZ2F0aXZlX25hbgAhDWY2NC5wbGFpbl9uYW4AIiJmNjQuaW5mb3JtYWxseV9rbm93bl9hc19wbGFpbl9zbmFuACMQZjY0LmFsbF9vbmVzX25hbgAkDGY2NC5taXNjX25hbgAlFWY2NC5taXNjX3Bvc2l0aXZlX25hbgAmFWY2NC5taXNjX25lZ2F0aXZlX25hbgAnDGY2NC5pbmZpbml0eQAoFWY2NC5wb3NpdGl2ZV9pbmZpbml0eQApFWY2NC5uZWdhdGl2ZV9pbmZpbml0eQAqCGY2NC56ZXJvACsRZjY0LnBvc2l0aXZlX3plcm8ALBFmNjQubmVnYXRpdmVfemVybwAtCGY2NC5taXNjAC4QZjY0Lm1pbl9wb3NpdGl2ZQAvDmY2NC5taW5fbm9ybWFsADARZjY0Lm1heF9zdWJub3JtYWwAMQ5mNjQubWF4X2Zpbml0ZQAyEGY2NC50cmFpbGluZ19kb3QAMwxmNjRfZGVjLnplcm8ANBVmNjRfZGVjLnBvc2l0aXZlX3plcm8ANRVmNjRfZGVjLm5lZ2F0aXZlX3plcm8ANgxmNjRfZGVjLm1pc2MANxRmNjRfZGVjLm1pbl9wb3NpdGl2ZQA4EmY2NF9kZWMubWluX25vcm1hbAA5FWY2NF9kZWMubWF4X3N1Ym5vcm1hbAA6EmY2NF9kZWMubWF4X2Zpbml0ZQA7FGY2NF9kZWMudHJhaWxpbmdfZG90ADwXZjY0X2RlYy5yb290X2JlZXJfZmxvYXQAPQxmMzItZGVjLXNlcDEAPgxmMzItZGVjLXNlcDIAPwxmMzItZGVjLXNlcDMAQAxmMzItZGVjLXNlcDQAQQxmMzItZGVjLXNlcDUAQgxmMzItaGV4LXNlcDEAQwxmMzItaGV4LXNlcDIARAxmMzItaGV4LXNlcDMARQxmMzItaGV4LXNlcDQARgxmMzItaGV4LXNlcDUARwxmNjQtZGVjLXNlcDEASAxmNjQtZGVjLXNlcDIASQxmNjQtZGVjLXNlcDMASgxmNjQtZGVjLXNlcDQASwxmNjQtZGVjLXNlcDUATAxmNjQtaGV4LXNlcDEATQxmNjQtaGV4LXNlcDIATgxmNjQtaGV4LXNlcDMATwxmNjQtaGV4LXNlcDQAUAxmNjQtaGV4LXNlcDUAUQrzBlIIAEMAAMB/vAsIAEMAAMB/vAsIAEMAAMD/vAsIAEMAAMB/vAsIAEMAAKB/vAsIAEP/////vAsIAENFI4F/vAsIAENQQLB/vAsIAEPevKr/vAsIAEMAAIB/vAsIAEMAAIB/vAsIAEMAAID/vAsIAEMAAAAAvAsIAEMAAAAAvAsIAEMAAACAvAsIAEPbD8lAvAsIAEMBAAAAvAsIAEMAAIAAvAsIAEP//39/vAsIAEP//38AvAsIAEMAAIBEvAsIAEMAAAAAvAsIAEMAAAAAvAsIAEMAAACAvAsIAEPbD8lAvAsIAEMBAAAAvAsIAEMAAIAAvAsIAEP//38AvAsIAEP//39/vAsIAEP5AhVQvAsIAEMBAIA/vAsMAEQAAAAAAAD4f70LDABEAAAAAAAA+H+9CwwARAAAAAAAAPj/vQsMAEQAAAAAAAD4f70LDABEAAAAAAAA9H+9CwwARP//////////vQsMAES8mnhWNBLwf70LDABECQgHBgUE83+9CwwAREUjAe/Nq/L/vQsMAEQAAAAAAADwf70LDABEAAAAAAAA8H+9CwwARAAAAAAAAPD/vQsMAEQAAAAAAAAAAL0LDABEAAAAAAAAAAC9CwwARAAAAAAAAACAvQsMAEQYLURU+yEZQL0LDABEAQAAAAAAAAC9CwwARAAAAAAAABAAvQsMAET///////8PAL0LDABE////////73+9CwwARAAAAAAAADBGvQsMAEQAAAAAAAAAAL0LDABEAAAAAAAAAAC9CwwARAAAAAAAAACAvQsMAEQYLURU+yEZQL0LDABEAQAAAAAAAAC9CwwARAAAAAAAABAAvQsMAET///////8PAL0LDABE////////73+9CwwARH3DlCWtSbJUvQsMAEQknvEfAADwP70LBwBDACR0SQsHAEMAAHpECwcAQxDJekQLBwBDlhlhWAsHAEN0rh1uCwcAQwrwIE0LBwBDgAfVRwsHAEPx/yBHCwcAQwAA8EkLBwBDKMCrVQsLAEQAAAAAgIQuQQsLAEQAAAAAAECPQAsLAEQAi/z6IVmPQAsLAERFzLdbc1zQJgsLAESc3ltyzrXDRQsLAEQyMwEAHuAlQwsLAEQAAAAA8KD6QAsLAERAszQo/h/kQAsLAEQAAAAAAAA+QQsLAEQAcJ8PBXi1Qgs=",
    "float_literals.1.wasm": "AGFzbQEAAAABhYCAgAABYAABfAOCgICAAAEAB46AgIAAAQo0Mjk0OTY3MjQ5AAAKkYCAgAABi4CAgAAARAAAIPr//+9BCw==",
    "float_literals.10.wat": "KGdsb2JhbCBmMzIgKGYzMi5jb25zdCAxLl8wKSk=",
    "float_literals.11.wat": "KGdsb2JhbCBmMzIgKGYzMi5jb25zdCBfMWUxKSk=",
    "float_literals.12.wat": "KGdsb2JhbCBmMzIgKGYzMi5jb25zdCAxZTFfKSk=",
    "float_literals.13.wat": "KGdsb2JhbCBmMzIgKGYzMi5jb25zdCAxX2UxKSk=",
    "float_literals.14.wat": "KGdsb2JhbCBmMzIgKGYzMi5jb25zdCAxZV8xKSk=",
    "float_literals.15.wat": "KGdsb2JhbCBmMzIgKGYzMi5jb25zdCBfMS4wZTEpKQ==",
    "float_literals.16.wat": "KGdsb2JhbCBmMzIgKGYzMi5jb25zdCAxLjBlMV8pKQ==",
    "float_literals.17.wat": "KGdsb2JhbCBmMzIgKGYzMi5jb25zdCAxLjBfZTEpKQ==",
    "float_literals.18.wat": "KGdsb2JhbCBmMzIgKGYzMi5jb25zdCAxLjBlXzEpKQ==",
    "float_literals.19.wat": "KGdsb2JhbCBmMzIgKGYzMi5jb25zdCAxLjBlK18xKSk=",
    "float_literals.2.wat": "KGdsb2JhbCBmMzIgKGYzMi5jb25zdCBfMTAwKSk=",
    "float_literals.20.wat": "KGdsb2JhbCBmMzIgKGYzMi5jb25zdCAxLjBlXysxKSk=",
    "float_literals.21.wat": "KGdsb2JhbCBmMzIgKGYzMi5jb25zdCBfMHgxMDApKQ==",
    "float_literals.22.wat": "KGdsb2JhbCBmMzIgKGYzMi5jb25zdCAwX3gxMDApKQ==",
    "float_literals.23.wat": "KGdsb2JhbCBmMzIgKGYzMi5jb25zdCAweF8xMDApKQ==",
    "float_literals.24.wat": "KGdsb2JhbCBmMzIgKGYzMi5jb25zdCAweDAwXykp",
    "float_literals.25.wat": "KGdsb2JhbCBmMzIgKGYzMi5jb25zdCAweGZmX19mZmZmKSk=",
    "float_literals.26.wat": "KGdsb2JhbCBmMzIgKGYzMi5jb25zdCAweF8xLjApKQ==",
    "float_literals.27.wat": "KGdsb2JhbCBmMzIgKGYzMi5jb25zdCAweDEuMF8pKQ==",
    "float_literals.28.wat": "KGdsb2JhbCBmMzIgKGYzMi5jb25zdCAweDFfLjApKQ==",
    "float_literals.29.wat": "KGdsb2JhbCBmMzIgKGYzMi5jb25zdCAweDEuXzApKQ==",
    "float_literals.3.wat": "KGdsb2JhbCBmMzIgKGYzMi5jb25zdCArXzEwMCkp",
    "float_literals.30.wat": "KGdsb2JhbCBmMzIgKGYzMi5jb25zdCAweF8xcDEpKQ==",
    "float_literals.31.wat": "KGdsb2JhbCBmMzIgKGYzMi5jb25zdCAweDFwMV8pKQ==",
    "float_literals.32.wat": "KGdsb2JhbCBmMzIgKGYzMi5jb25zdCAweDFfcDEpKQ==",
    "float_literals.33.wat": "KGdsb2JhbCBmMzIgKGYzMi5jb25zdCAweDFwXzEpKQ==",
    "float_literals.34.wat": "KGdsb2JhbCBmMzIgKGYzMi5jb25zdCAweF8xLjBwMSkp",
    "float_literals.35.wat": "KGdsb2JhbCBmMzIgKGYzMi5jb25zdCAweDEuMHAxXykp",
    "float_literals.36.wat": "KGdsb2JhbCBmMzIgKGYzMi5jb25zdCAweDEuMF9wMSkp",
    "float_literals.37.wat": "KGdsb2JhbCBmMzIgKGYzMi5jb25zdCAweDEuMHBfMSkp",
    "float_literals.38.wat": "KGdsb2JhbCBmMzIgKGYzMi5jb25zdCAweDEuMHArXzEpKQ==",
    "float_literals.39.wat": "KGdsb2JhbCBmMzIgKGYzMi5jb25zdCAweDEuMHBfKzEpKQ==",
    "float_literals.4.wat": "KGdsb2JhbCBmMzIgKGYzMi5jb25zdCAtXzEwMCkp",
    "float_literals.40.wat": "KGdsb2JhbCBmMzIgKGYzMi5jb25zdCBuYW46MHg4MF8wMDAwKSk=",
    "float_literals.41.wat": "KGdsb2JhbCBmNjQgKGY2NC5jb25zdCBfMTAwKSk=",
    "float_literals.42.wat": "KGdsb2JhbCBmNjQgKGY2NC5jb25zdCArXzEwMCkp",
    "float_literals.43.wat": "KGdsb2JhbCBmNjQgKGY2NC5jb25zdCAtXzEwMCkp",
    "float_literals.44.wat": "KGdsb2JhbCBmNjQgKGY2NC5jb25zdCA5OV8pKQ==",
    "float_literals.45.wat": "KGdsb2JhbCBmNjQgKGY2NC5jb25zdCAxX18wMDApKQ==",
    "float_literals.46.wat": "KGdsb2JhbCBmNjQgKGY2NC5jb25zdCBfMS4wKSk=",
    "float_literals.47.wat": "KGdsb2JhbCBmNjQgKGY2NC5jb25zdCAxLjBfKSk=",
    "float_literals.48.wat": "KGdsb2JhbCBmNjQgKGY2NC5jb25zdCAxXy4wKSk=",
    "float_literals.49.wat": "KGdsb2JhbCBmNjQgKGY2NC5jb25zdCAxLl8wKSk=",
    "float_literals.5.wat": "KGdsb2JhbCBmMzIgKGYzMi5jb25zdCA5OV8pKQ==",
    "float_literals.50.wat": "KGdsb2JhbCBmNjQgKGY2NC5jb25zdCBfMWUxKSk=",
    "float_literals.51.wat": "KGdsb2JhbCBmNjQgKGY2NC5jb25zdCAxZTFfKSk=",
    "float_literals.52.wat": "KGdsb2JhbCBmNjQgKGY2NC5jb25zdCAxX2UxKSk=",
    "float_literals.53.wat": "KGdsb2JhbCBmNjQgKGY2NC5jb25zdCAxZV8xKSk=",
    "float_literals.54.wat": "KGdsb2JhbCBmNjQgKGY2NC5jb25zdCBfMS4wZTEpKQ==",
    "float_literals.55.wat": "KGdsb2JhbCBmNjQgKGY2NC5jb25zdCAxLjBlMV8pKQ==",
    "float_literals.56.wat": "KGdsb2JhbCBmNjQgKGY2NC5jb25zdCAxLjBfZTEpKQ==",
    "float_literals.57.wat": "KGdsb2JhbCBmNjQgKGY2NC5jb25zdCAxLjBlXzEpKQ==",
    "float_literals.58.wat": "KGdsb2JhbCBmNjQgKGY2NC5jb25zdCAxLjBlK18xKSk=",
    "float_literals.59.wat": "KGdsb2JhbCBmNjQgKGY2NC5jb25zdCAxLjBlXysxKSk=",
    "float_literals.6.wat": "KGdsb2JhbCBmMzIgKGYzMi5jb25zdCAxX18wMDApKQ==",
    "float_literals.60.wat": "KGdsb2JhbCBmNjQgKGY2NC5jb25zdCBfMHgxMDApKQ==",
    "float_literals.61.wat": "KGdsb2JhbCBmNjQgKGY2NC5jb25zdCAwX3gxMDApKQ==",
    "float_literals.62.wat": "KGdsb2JhbCBmNjQgKGY2NC5jb25zdCAweF8xMDApKQ==",
    "float_literals.63.wat": "KGdsb2JhbCBmNjQgKGY2NC5jb25zdCAweDAwXykp",
    "float_literals.64.wat": "KGdsb2JhbCBmNjQgKGY2NC5jb25zdCAweGZmX19mZmZmKSk=",
    "float_literals.65.wat": "KGdsb2JhbCBmNjQgKGY2NC5jb25zdCAweF8xLjApKQ==",
    "float_literals.66.wat": "KGdsb2JhbCBmNjQgKGY2NC5jb25zdCAweDEuMF8pKQ==",
    "float_literals.67.wat": "KGdsb2JhbCBmNjQgKGY2NC5jb25zdCAweDFfLjApKQ==",
    "float_literals.68.wat": "KGdsb2JhbCBmNjQgKGY2NC5jb25zdCAweDEuXzApKQ==",
    "float_literals.69.wat": "KGdsb2JhbCBmNjQgKGY2NC5jb25zdCAweF8xcDEpKQ==",
    "float_literals.7.wat": "KGdsb2JhbCBmMzIgKGYzMi5jb25zdCBfMS4wKSk=",
    "float_literals.70.wat": "KGdsb2JhbCBmNjQgKGY2NC5jb25zdCAweDFwMV8pKQ==",
    "float_literals.71.wat": "KGdsb2JhbCBmNjQgKGY2NC5jb25zdCAweDFfcDEpKQ==",
    "float_literals.72.wat": "KGdsb2JhbCBmNjQgKGY2NC5jb25zdCAweDFwXzEpKQ==",
    "float_literals.73.wat": "KGdsb2JhbCBmNjQgKGY2NC5jb25zdCAweF8xLjBwMSkp",
    "float_literals.74.wat": "KGdsb2JhbCBmNjQgKGY2NC5jb25zdCAweDEuMHAxXykp",
    "float_literals.75.wat": "KGdsb2JhbCBmNjQgKGY2NC5jb25zdCAweDEuMF9wMSkp",
    "float_literals.76.wat": "KGdsb2JhbCBmNjQgKGY2NC5jb25zdCAweDEuMHBfMSkp",
    "float_literals.77.wat": "KGdsb2JhbCBmNjQgKGY2NC5jb25zdCAweDEuMHArXzEpKQ==",
    "float_literals.78.wat": "KGdsb2JhbCBmNjQgKGY2NC5jb25zdCAweDEuMHBfKzEpKQ==",
    "float_literals.79.wat": "KGdsb2JhbCBmNjQgKGY2NC5jb25zdCBuYW46MHgxMF8wMDAwXzAwMDBfMDAwMCkp",
    "float_literals.8.wat": "KGdsb2JhbCBmMzIgKGYzMi5jb25zdCAxLjBfKSk=",
    "float_literals.9.wat": "KGdsb2JhbCBmMzIgKGYzMi5jb25zdCAxXy4wKSk="
  },
  "spec": {"source_filename": "/Users/rvagg/git/webassembly/spec/test/core/float_literals.wast",
 "commands": [
  {"type": "module", "line": 3, "filename": "float_literals.0.wasm"}, 
  {"type": "assert_return", "line": 105, "action": {"type": "invoke", "field": "f32.nan", "args": []}, "expected": [{"type": "i32", "value": "2143289344"}]}, 
  {"type": "assert_return", "line": 106, "action": {"type": "invoke", "field": "f32.positive_nan", "args": []}, "expected": [{"type": "i32", "value": "2143289344"}]}, 
  {"type": "assert_return", "line": 107, "action": {"type": "invoke", "field": "f32.negative_nan", "args": []}, "expected": [{"type": "i32", "value": "4290772992"}]}, 
  {"type": "assert_return", "line": 108, "action": {"type": "invoke", "field": "f32.plain_nan", "args": []}, "expected": [{"type": "i32", "value": "2143289344"}]}, 
  {"type": "assert_return", "line": 109, "action": {"type": "invoke", "field": "f32.informally_known_as_plain_snan", "args": []}, "expected": [{"type": "i32", "value": "2141192192"}]}, 
  {"type": "assert_return", "line": 110, "action": {"type": "invoke", "field": "f32.all_ones_nan", "args": []}, "expected": [{"type": "i32", "value": "4294967295"}]}, 
  {"type": "assert_return", "line": 111, "action": {"type": "invoke", "field": "f32.misc_nan", "args": []}, "expected": [{"type": "i32", "value": "2139169605"}]}, 
  {"type": "assert_return", "line": 112, "action": {"type": "invoke", "field": "f32.misc_positive_nan", "args": []}, "expected": [{"type": "i32", "value": "2142257232"}]}, 
  {"type": "assert_return", "line": 113, "action": {"type": "invoke", "field": "f32.misc_negative_nan", "args": []}, "expected": [{"type": "i32", "value": "4289379550"}]}, 
  {"type": "assert_return", "line": 114, "action": {"type": "invoke", "field": "f32.infinity", "args": []}, "expected": [{"type": "i32", "value": "2139095040"}]}, 
  {"type": "assert_return", "line": 115, "action": {"type": "invoke", "field": "f32.positive_infinity", "args": []}, "expected": [{"type": "i32", "value": "2139095040"}]}, 
  {"type": "assert_return", "line": 116, "action": {"type": "invoke", "field": "f32.negative_infinity", "args": []}, "expected": [{"type": "i32", "value": "4286578688"}]}, 
  {"type": "assert_return", "line": 117, "action": {"type": "invoke", "field": "f32.zero", "args": []}, "expected": [{"type": "i32", "value": "0"}]}, 
  {"type": "assert_return", "line": 118, "action": {"type": "invoke", "field": "f32.positive_zero", "args": []}, "expected": [{"type": "i32", "value": "0"}]}, 
  {"type": "assert_return", "line": 119, "action": {"type": "invoke", "field": "f32.negative_zero", "args": []}, "expected": [{"type": "i32", "value": "2147483648"}]}, 
  {"type": "assert_return", "line": 120, "action": {"type": "invoke", "field": "f32.misc", "args": []}, "expected": [{"type": "i32", "value": "1086918619"}]}, 
  {"type": "assert_return", "line": 121, "action": {"type": "invoke", "field": "f32.min_positive", "args": []}, "expected": [{"type": "i32", "value": "1"}]}, 
  {"type": "assert_return", "line": 122, "action": {"type": "invoke", "field": "f32.min_normal", "args": []}, "expected": [{"type": "i32", "value": "8388608"}]}, 
  {"type": "assert_return", "line": 123, "action": {"type": "invoke", "field": "f32.max_subnormal", "args": []}, "expected": [{"type": "i32", "value": "8388607"}]}, 
  {"type": "assert_return", "line": 124, "action": {"type": "invoke", "field": "f32.max_finite", "args": []}, "expected": [{"type": "i32", "value": "2139095039"}]}, 
  {"type": "assert_return", "line": 125, "action": {"type": "invoke", "field": "f32.trailing_dot", "args": []}, "expected": [{"type": "i32", "value": "1149239296"}]}, 
  {"type": "assert_return", "line": 126, "action": {"type": "invoke", "field": "f32_dec.zero", "args": []}, "expected": [{"type": "i32", "value": "0"}]}, 
  {"type": "assert_return", "line": 127, "action": {"type": "invoke", "field": "f32_dec.positive_zero", "args": []}, "expected": [{"type": "i32", "value": "0"}]}, 
  {"type": "assert_return", "line": 128, "action": {"type": "invoke", "field": "f32_dec.negative_zero", "args": []}, "expected": [{"type": "i32", "value": "2147483648"}]}, 
  {"type": "assert_return", "line": 129, "action": {"type": "invoke", "field": "f32_dec.misc", "args": []}, "expected": [{"type": "i32", "value": "1086918619"}]}, 
  {"type": "assert_return", "line": 130, "action": {"type": "invoke", "field": "f32_dec.min_positive", "args": []}, "expected": [{"type": "i32", "value": "1"}]}, 
  {"type": "assert_return", "line": 131, "action": {"type": "invoke", "field": "f32_dec.min_normal", "args": []}, "expected": [{"type": "i32", "value": "8388608"}]}, 
  {"type": "assert_return", "line": 132, "action": {"type": "invoke", "field": "f32_dec.max_subnormal", "args": []}, "expected": [{"type": "i32", "value": "8388607"}]}, 
  {"type": "assert_return", "line": 133, "action": {"type": "invoke", "field": "f32_dec.max_finite", "args": []}, "expected": [{"type": "i32", "value": "2139095039"}]}, 
  {"type": "assert_return", "line": 134, "action": {"type": "invoke", "field": "f32_dec.trailing_dot", "args": []}, "expected": [{"type": "i32", "value": "1343554297"}]}, 
  {"type": "assert_return", "line": 135, "action": {"type": "invoke", "field": "f32_dec.root_beer_float", "args": []}, "expected": [{"type": "i32", "value": "1065353217"}]}, 
  {"type": "assert_return", "line": 137, "action": {"type": "invoke", "field": "f64.nan", "args": []}, "expected": [{"type": "i64", "value": "9221120237041090560"}]}, 
  {"type": "assert_return", "line": 138, "action": {"type": "invoke", "field": "f64.positive_nan", "args": []}, "expected": [{"type": "i64", "value": "9221120237041090560"}]}, 
  {"type": "assert_return", "line": 139, "action": {"type": "invoke", "field": "f64.negative_nan", "args": []}, "expected": [{"type": "i64", "value": "18444492273895866368"}]}, 
  {"type": "assert_return", "line": 140, "action": {"type": "invoke", "field": "f64.plain_nan", "args": []}, "expected": [{"type": "i64", "value": "9221120237041090560"}]}, 
  {"type": "assert_return", "line": 141, "action": {"type": "invoke", "field": "f64.informally_known_as_plain_snan", "args": []}, "expected": [{"type": "i64", "value": "9219994337134247936"}]}, 
  {"type": "assert_return", "line": 142, "action": {"type": "invoke", "field": "f64.all_ones_nan", "args": []}, "expected": [{"type": "i64", "value": "18446744073709551615"}]}, 
  {"type": "assert_return", "line": 143, "action": {"type": "invoke", "field": "f64.misc_nan", "args": []}, "expected": [{"type": "i64", "value": "9218888453225749180"}]}, 
  {"type": "assert_return", "line": 144, "action": {"type": "invoke", "field": "f64.misc_positive_nan", "args": []}, "expected": [{"type": "i64", "value": "9219717281780008969"}]}, 
  {"type": "assert_return", "line": 145, "action": {"type": "invoke", "field": "f64.misc_negative_nan", "args": []}, "expected": [{"type": "i64", "value": "18442992325002076997"}]}, 
  {"type": "assert_return", "line": 146, "action": {"type": "invoke", "field": "f64.infinity", "args": []}, "expected": [{"type": "i64", "value": "9218868437227405312"}]}, 
  {"type": "assert_return", "line": 147, "action": {"type": "invoke", "field": "f64.positive_infinity", "args": []}, "expected": [{"type": "i64", "value": "9218868437227405312"}]}, 
  {"type": "assert_return", "line": 148, "action": {"type": "invoke", "field": "f64.negative_infinity", "args": []}, "expected": [{"type": "i64", "value": "18442240474082181120"}]}, 
  {"type": "assert_return", "line": 149, "action": {"type": "invoke", "field": "f64.zero", "args": []}, "expected": [{"type": "i64", "value": "0"}]}, 
  {"type": "assert_return", "line": 150, "action": {"type": "invoke", "field": "f64.positive_zero", "args": []}, "expected": [{"type": "i64", "value": "0"}]}, 
  {"type": "assert_return", "line": 151, "action": {"type": "invoke", "field": "f64.negative_zero", "args": []}, "expected": [{"type": "i64", "value": "9223372036854775808"}]}, 
  {"type": "assert_return", "line": 152, "action": {"type": "invoke", "field": "f64.misc", "args": []}, "expected": [{"type": "i64", "value": "4618760256179416344"}]}, 
  {"type": "assert_return", "line": 153, "action": {"type": "invoke", "field": "f64.min_positive", "args": []}, "expected": [{"type": "i64", "value": "1"}]}, 
  {"type": "assert_return", "line": 154, "action": {"type": "invoke", "field": "f64.min_normal", "args": []}, "expected": [{"type": "i64", "value": "4503599627370496"}]}, 
  {"type": "assert_return", "line": 155, "action": {"type": "invoke", "field": "f64.max_subnormal", "args": []}, "expected": [{"type": "i64", "value": "4503599627370495"}]}, 
  {"type": "assert_return", "line": 156, "action": {"type": "invoke", "field": "f64.max_finite", "args": []}, "expected": [{"type": "i64", "value": "9218868437227405311"}]}, 
  {"type": "assert_return", "line": 157, "action": {"type": "invoke", "field": "f64.trailing_dot", "args": []}, "expected": [{"type": "i64", "value": "5057542381537067008"}]}, 
  {"type": "assert_return", "line": 158, "action": {"type": "invoke", "field": "f64_dec.zero", "args": []}, "expected": [{"type": "i64", "value": "0"}]}, 
  {"type": "assert_return", "line": 159, "action": {"type": "invoke", "field": "f64_dec.positive_zero", "args": []}, "expected": [{"type": "i64", "value": "0"}]}, 
  {"type": "assert_return", "line": 160, "action": {"type": "invoke", "field": "f64_dec.negative_zero", "args": []}, "expected": [{"type": "i64", "value": "9223372036854775808"}]}, 
  {"type": "assert_return", "line": 161, "action": {"type": "invoke", "field": "f64_dec.misc", "args": []}, "expected": [{"type": "i64", "value": "4618760256179416344"}]}, 
  {"type": "assert_return", "line": 162, "action": {"type": "invoke", "field": "f64_dec.min_positive", "args": []}, "expected": [{"type": "i64", "value": "1"}]}, 
  {"type": "assert_return", "line": 163, "action": {"type": "invoke", "field": "f64_dec.min_normal", "args": []}, "expected": [{"type": "i64", "value": "4503599627370496"}]}, 
  {"type": "assert_return", "line": 164, "action": {"type": "invoke", "field": "f64_dec.max_subnormal", "args": []}, "expected": [{"type": "i64", "value": "4503599627370495"}]}, 
  {"type": "assert_return", "line": 165, "action": {"type": "invoke", "field": "f64_dec.max_finite", "args": []}, "expected": [{"type": "i64", "value": "9218868437227405311"}]}, 
  {"type": "assert_return", "line": 166, "action": {"type": "invoke", "field": "f64_dec.trailing_dot", "args": []}, "expected": [{"type": "i64", "value": "6103021453049119613"}]}, 
  {"type": "assert_return", "line": 167, "action": {"type": "invoke", "field": "f64_dec.root_beer_float", "args": []}, "expected": [{"type": "i64", "value": "4607182419335945764"}]}, 
  {"type": "assert_return", "line": 169, "action": {"type": "invoke", "field": "f32-dec-sep1", "args": []}, "expected": [{"type": "f32", "value": "1232348160"}]}, 
  {"type": "assert_return", "line": 170, "action": {"type": "invoke", "field": "f32-dec-sep2", "args": []}, "expected": [{"type": "f32", "value": "1148846080"}]}, 
  {"type": "assert_return", "line": 171, "action": {"type": "invoke", "field": "f32-dec-sep3", "args": []}, "expected": [{"type": "f32", "value": "1148897552"}]}, 
  {"type": "assert_return", "line": 172, "action": {"type": "invoke", "field": "f32-dec-sep4", "args": []}, "expected": [{"type": "f32", "value": "1482758550"}]}, 
  {"type": "assert_return", "line": 173, "action": {"type": "invoke", "field": "f32-dec-sep5", "args": []}, "expected": [{"type": "f32", "value": "1847438964"}]}, 
  {"type": "assert_return", "line": 174, "action": {"type": "invoke", "field": "f32-hex-sep1", "args": []}, "expected": [{"type": "f32", "value": "1294004234"}]}, 
  {"type": "assert_return", "line": 175, "action": {"type": "invoke", "field": "f32-hex-sep2", "args": []}, "expected": [{"type": "f32", "value": "1205143424"}]}, 
  {"type": "assert_return", "line": 176, "action": {"type": "invoke", "field": "f32-hex-sep3", "args": []}, "expected": [{"type": "f32", "value": "1193345009"}]}, 
  {"type": "assert_return", "line": 177, "action": {"type": "invoke", "field": "f32-hex-sep4", "args": []}, "expected": [{"type": "f32", "value": "1240465408"}]}, 
  {"type": "assert_return", "line": 178, "action": {"type": "invoke", "field": "f32-hex-sep5", "args": []}, "expected": [{"type": "f32", "value": "1437319208"}]}, 
  {"type": "assert_return", "line": 180, "action": {"type": "invoke", "field": "f64-dec-sep1", "args": []}, "expected": [{"type": "f64", "value": "4696837146684686336"}]}, 
  {"type": "assert_return", "line": 181, "action": {"type": "invoke", "field": "f64-dec-sep2", "args": []}, "expected": [{"type": "f64", "value": "4652007308841189376"}]}, 
  {"type": "assert_return", "line": 182, "action": {"type": "invoke", "field": "f64-dec-sep3", "args": []}, "expected": [{"type": "f64", "value": "4652034942576659200"}]}, 
  {"type": "assert_return", "line": 183, "action": {"type": "invoke", "field": "f64-dec-sep4", "args": []}, "expected": [{"type": "f64", "value": "2796837019126844485"}]}, 
  {"type": "assert_return", "line": 184, "action": {"type": "invoke", "field": "f64-dec-sep5", "args": []}, "expected": [{"type": "f64", "value": "5027061507362119324"}]}, 
  {"type": "assert_return", "line": 185, "action": {"type": "invoke", "field": "f64-hex-sep1", "args": []}, "expected": [{"type": "f64", "value": "4838519794133185330"}]}, 
  {"type": "assert_return", "line": 186, "action": {"type": "invoke", "field": "f64-hex-sep2", "args": []}, "expected": [{"type": "f64", "value": "4682231715257647104"}]}, 
  {"type": "assert_return", "line": 187, "action": {"type": "invoke", "field": "f64-hex-sep3", "args": []}, "expected": [{"type": "f64", "value": "4675897489574114112"}]}, 
  {"type": "assert_return", "line": 188, "action": {"type": "invoke", "field": "f64-hex-sep4", "args": []}, "expected": [{"type": "f64", "value": "4701195061021376512"}]}, 
  {"type": "assert_return", "line": 189, "action": {"type": "invoke", "field": "f64-hex-sep5", "args": []}, "expected": [{"type": "f64", "value": "4806880140420149248"}]}, 
  {"type": "module", "line": 192, "filename": "float_literals.1.wasm"}, 
  {"type": "assert_return", "line": 201, "action": {"type": "invoke", "field": "4294967249", "args": []}, "expected": [{"type": "f64", "value": "4751297606777307136"}]}, 
  {"type": "assert_malformed", "line": 204, "filename": "float_literals.2.wat", "text": "unknown operator", "module_type": "text"}, 
  {"type": "assert_malformed", "line": 208, "filename": "float_literals.3.wat", "text": "unknown operator", "module_type": "text"}, 
  {"type": "assert_malformed", "line": 212, "filename": "float_literals.4.wat", "text": "unknown operator", "module_type": "text"}, 
  {"type": "assert_malformed", "line": 216, "filename": "float_literals.5.wat", "text": "unknown operator", "module_type": "text"}, 
  {"type": "assert_malformed", "line": 220, "filename": "float_literals.6.wat", "text": "unknown operator", "module_type": "text"}, 
  {"type": "assert_malformed", "line": 224, "filename": "float_literals.7.wat", "text": "unknown operator", "module_type": "text"}, 
  {"type": "assert_malformed", "line": 228, "filename": "float_literals.8.wat", "text": "unknown operator", "module_type": "text"}, 
  {"type": "assert_malformed", "line": 232, "filename": "float_literals.9.wat", "text": "unknown operator", "module_type": "text"}, 
  {"type": "assert_malformed", "line": 236, "filename": "float_literals.10.wat", "text": "unknown operator", "module_type": "text"}, 
  {"type": "assert_malformed", "line": 240, "filename": "float_literals.11.wat", "text": "unknown operator", "module_type": "text"}, 
  {"type": "assert_malformed", "line": 244, "filename": "float_literals.12.wat", "text": "unknown operator", "module_type": "text"}, 
  {"type": "assert_malformed", "line": 248, "filename": "float_literals.13.wat", "text": "unknown operator", "module_type": "text"}, 
  {"type": "assert_malformed", "line": 252, "filename": "float_literals.14.wat", "text": "unknown operator", "module_type": "text"}, 
  {"type": "assert_malformed", "line": 256, "filename": "float_literals.15.wat", "text": "unknown operator", "module_type": "text"}, 
  {"type": "assert_malformed", "line": 260, "filename": "float_literals.16.wat", "text": "unknown operator", "module_type": "text"}, 
  {"type": "assert_malformed", "line": 264, "filename": "float_literals.17.wat", "text": "unknown operator", "module_type": "text"}, 
  {"type": "assert_malformed", "line": 268, "filename": "float_literals.18.wat", "text": "unknown operator", "module_type": "text"}, 
  {"type": "assert_malformed", "line": 272, "filename": "float_literals.19.wat", "text": "unknown operator", "module_type": "text"}, 
  {"type": "assert_malformed", "line": 276, "filename": "float_literals.20.wat", "text": "unknown operator", "module_type": "text"}, 
  {"type": "assert_malformed", "line": 280, "filename": "float_literals.21.wat", "text": "unknown operator", "module_type": "text"}, 
  {"type": "assert_malformed", "line": 284, "filename": "float_literals.22.wat", "text": "unknown operator", "module_type": "text"}, 
  {"type": "assert_malformed", "line": 288, "filename": "float_literals.23.wat", "text": "unknown operator", "module_type": "text"}, 
  {"type": "assert_malformed", "line": 292, "filename": "float_literals.24.wat", "text": "unknown operator", "module_type": "text"}, 
  {"type": "assert_malformed", "line": 296, "filename": "float_literals.25.wat", "text": "unknown operator", "module_type": "text"}, 
  {"type": "assert_malformed", "line": 300, "filename": "float_literals.26.wat", "text": "unknown operator", "module_type": "text"}, 
  {"type": "assert_malformed", "line": 304, "filename": "float_literals.27.wat", "text": "unknown operator", "module_type": "text"}, 
  {"type": "assert_malformed", "line": 308, "filename": "float_literals.28.wat", "text": "unknown operator", "module_type": "text"}, 
  {"type": "assert_malformed", "line": 312, "filename": "float_literals.29.wat", "text": "unknown operator", "module_type": "text"}, 
  {"type": "assert_malformed", "line": 316, "filename": "float_literals.30.wat", "text": "unknown operator", "module_type": "text"}, 
  {"type": "assert_malformed", "line": 320, "filename": "float_literals.31.wat", "text": "unknown operator", "module_type": "text"}, 
  {"type": "assert_malformed", "line": 324, "filename": "float_literals.32.wat", "text": "unknown operator", "module_type": "text"}, 
  {"type": "assert_malformed", "line": 328, "filename": "float_literals.33.wat", "text": "unknown operator", "module_type": "text"}, 
  {"type": "assert_malformed", "line": 332, "filename": "float_literals.34.wat", "text": "unknown operator", "module_type": "text"}, 
  {"type": "assert_malformed", "line": 336, "filename": "float_literals.35.wat", "text": "unknown operator", "module_type": "text"}, 
  {"type": "assert_malformed", "line": 340, "filename": "float_literals.36.wat", "text": "unknown operator", "module_type": "text"}, 
  {"type": "assert_malformed", "line": 344, "filename": "float_literals.37.wat", "text": "unknown operator", "module_type": "text"}, 
  {"type": "assert_malformed", "line": 348, "filename": "float_literals.38.wat", "text": "unknown operator", "module_type": "text"}, 
  {"type": "assert_malformed", "line": 352, "filename": "float_literals.39.wat", "text": "unknown operator", "module_type": "text"}, 
  {"type": "assert_malformed", "line": 356, "filename": "float_literals.40.wat", "text": "constant out of range", "module_type": "text"}, 
  {"type": "assert_malformed", "line": 361, "filename": "float_literals.41.wat", "text": "unknown operator", "module_type": "text"}, 
  {"type": "assert_malformed", "line": 365, "filename": "float_literals.42.wat", "text": "unknown operator", "module_type": "text"}, 
  {"type": "assert_malformed", "line": 369, "filename": "float_literals.43.wat", "text": "unknown operator", "module_type": "text"}, 
  {"type": "assert_malformed", "line": 373, "filename": "float_literals.44.wat", "text": "unknown operator", "module_type": "text"}, 
  {"type": "assert_malformed", "line": 377, "filename": "float_literals.45.wat", "text": "unknown operator", "module_type": "text"}, 
  {"type": "assert_malformed", "line": 381, "filename": "float_literals.46.wat", "text": "unknown operator", "module_type": "text"}, 
  {"type": "assert_malformed", "line": 385, "filename": "float_literals.47.wat", "text": "unknown operator", "module_type": "text"}, 
  {"type": "assert_malformed", "line": 389, "filename": "float_literals.48.wat", "text": "unknown operator", "module_type": "text"}, 
  {"type": "assert_malformed", "line": 393, "filename": "float_literals.49.wat", "text": "unknown operator", "module_type": "text"}, 
  {"type": "assert_malformed", "line": 397, "filename": "float_literals.50.wat", "text": "unknown operator", "module_type": "text"}, 
  {"type": "assert_malformed", "line": 401, "filename": "float_literals.51.wat", "text": "unknown operator", "module_type": "text"}, 
  {"type": "assert_malformed", "line": 405, "filename": "float_literals.52.wat", "text": "unknown operator", "module_type": "text"}, 
  {"type": "assert_malformed", "line": 409, "filename": "float_literals.53.wat", "text": "unknown operator", "module_type": "text"}, 
  {"type": "assert_malformed", "line": 413, "filename": "float_literals.54.wat", "text": "unknown operator", "module_type": "text"}, 
  {"type": "assert_malformed", "line": 417, "filename": "float_literals.55.wat", "text": "unknown operator", "module_type": "text"}, 
  {"type": "assert_malformed", "line": 421, "filename": "float_literals.56.wat", "text": "unknown operator", "module_type": "text"}, 
  {"type": "assert_malformed", "line": 425, "filename": "float_literals.57.wat", "text": "unknown operator", "module_type": "text"}, 
  {"type": "assert_malformed", "line": 429, "filename": "float_literals.58.wat", "text": "unknown operator", "module_type": "text"}, 
  {"type": "assert_malformed", "line": 433, "filename": "float_literals.59.wat", "text": "unknown operator", "module_type": "text"}, 
  {"type": "assert_malformed", "line": 437, "filename": "float_literals.60.wat", "text": "unknown operator", "module_type": "text"}, 
  {"type": "assert_malformed", "line": 441, "filename": "float_literals.61.wat", "text": "unknown operator", "module_type": "text"}, 
  {"type": "assert_malformed", "line": 445, "filename": "float_literals.62.wat", "text": "unknown operator", "module_type": "text"}, 
  {"type": "assert_malformed", "line": 449, "filename": "float_literals.63.wat", "text": "unknown operator", "module_type": "text"}, 
  {"type": "assert_malformed", "line": 453, "filename": "float_literals.64.wat", "text": "unknown operator", "module_type": "text"}, 
  {"type": "assert_malformed", "line": 457, "filename": "float_literals.65.wat", "text": "unknown operator", "module_type": "text"}, 
  {"type": "assert_malformed", "line": 461, "filename": "float_literals.66.wat", "text": "unknown operator", "module_type": "text"}, 
  {"type": "assert_malformed", "line": 465, "filename": "float_literals.67.wat", "text": "unknown operator", "module_type": "text"}, 
  {"type": "assert_malformed", "line": 469, "filename": "float_literals.68.wat", "text": "unknown operator", "module_type": "text"}, 
  {"type": "assert_malformed", "line": 473, "filename": "float_literals.69.wat", "text": "unknown operator", "module_type": "text"}, 
  {"type": "assert_malformed", "line": 477, "filename": "float_literals.70.wat", "text": "unknown operator", "module_type": "text"}, 
  {"type": "assert_malformed", "line": 481, "filename": "float_literals.71.wat", "text": "unknown operator", "module_type": "text"}, 
  {"type": "assert_malformed", "line": 485, "filename": "float_literals.72.wat", "text": "unknown operator", "module_type": "text"}, 
  {"type": "assert_malformed", "line": 489, "filename": "float_literals.73.wat", "text": "unknown operator", "module_type": "text"}, 
  {"type": "assert_malformed", "line": 493, "filename": "float_literals.74.wat", "text": "unknown operator", "module_type": "text"}, 
  {"type": "assert_malformed", "line": 497, "filename": "float_literals.75.wat", "text": "unknown operator", "module_type": "text"}, 
  {"type": "assert_malformed", "line": 501, "filename": "float_literals.76.wat", "text": "unknown operator", "module_type": "text"}, 
  {"type": "assert_malformed", "line": 505, "filename": "float_literals.77.wat", "text": "unknown operator", "module_type": "text"}, 
  {"type": "assert_malformed", "line": 509, "filename": "float_literals.78.wat", "text": "unknown operator", "module_type": "text"}, 
  {"type": "assert_malformed", "line": 513, "filename": "float_literals.79.wat", "text": "constant out of range", "module_type": "text"}]},
  "code": [
    "(module \n  (func (export \"f32.nan\") (result i32) (i32.reinterpret_f32 (f32.const nan)))\n  (func (export \"f32.positive_nan\") (result i32) (i32.reinterpret_f32 (f32.const +nan)))\n  (func (export \"f32.negative_nan\") (result i32) (i32.reinterpret_f32 (f32.const -nan)))\n  (func (export \"f32.plain_nan\") (result i32) (i32.reinterpret_f32 (f32.const nan:0x400000)))\n  (func (export \"f32.informally_known_as_plain_snan\") (result i32) (i32.reinterpret_f32 (f32.const nan:0x200000)))\n  (func (export \"f32.all_ones_nan\") (result i32) (i32.reinterpret_f32 (f32.const -nan:0x7fffff)))\n  (func (export \"f32.misc_nan\") (result i32) (i32.reinterpret_f32 (f32.const nan:0x012345)))\n  (func (export \"f32.misc_positive_nan\") (result i32) (i32.reinterpret_f32 (f32.const +nan:0x304050)))\n  (func (export \"f32.misc_negative_nan\") (result i32) (i32.reinterpret_f32 (f32.const -nan:0x2abcde)))\n  (func (export \"f32.infinity\") (result i32) (i32.reinterpret_f32 (f32.const inf)))\n  (func (export \"f32.positive_infinity\") (result i32) (i32.reinterpret_f32 (f32.const +inf)))\n  (func (export \"f32.negative_infinity\") (result i32) (i32.reinterpret_f32 (f32.const -inf)))\n  (func (export \"f32.zero\") (result i32) (i32.reinterpret_f32 (f32.const 0x0.0p0)))\n  (func (export \"f32.positive_zero\") (result i32) (i32.reinterpret_f32 (f32.const +0x0.0p0)))\n  (func (export \"f32.negative_zero\") (result i32) (i32.reinterpret_f32 (f32.const -0x0.0p0)))\n  (func (export \"f32.misc\") (result i32) (i32.reinterpret_f32 (f32.const 0x1.921fb6p+2)))\n  (func (export \"f32.min_positive\") (result i32) (i32.reinterpret_f32 (f32.const 0x1p-149)))\n  (func (export \"f32.min_normal\") (result i32) (i32.reinterpret_f32 (f32.const 0x1p-126)))\n  (func (export \"f32.max_finite\") (result i32) (i32.reinterpret_f32 (f32.const 0x1.fffffep+127)))\n  (func (export \"f32.max_subnormal\") (result i32) (i32.reinterpret_f32 (f32.const 0x1.fffffcp-127)))\n  (func (export \"f32.trailing_dot\") (result i32) (i32.reinterpret_f32 (f32.const 0x1.p10)))\n  (func (export \"f32_dec.zero\") (result i32) (i32.reinterpret_f32 (f32.const 0.0e0)))\n  (func (export \"f32_dec.positive_zero\") (result i32) (i32.reinterpret_f32 (f32.const +0.0e0)))\n  (func (export \"f32_dec.negative_zero\") (result i32) (i32.reinterpret_f32 (f32.const -0.0e0)))\n  (func (export \"f32_dec.misc\") (result i32) (i32.reinterpret_f32 (f32.const 6.28318548202514648)))\n  (func (export \"f32_dec.min_positive\") (result i32) (i32.reinterpret_f32 (f32.const 1.4013e-45)))\n  (func (export \"f32_dec.min_normal\") (result i32) (i32.reinterpret_f32 (f32.const 1.1754944e-38)))\n  (func (export \"f32_dec.max_subnormal\") (result i32) (i32.reinterpret_f32 (f32.const 1.1754942e-38)))\n  (func (export \"f32_dec.max_finite\") (result i32) (i32.reinterpret_f32 (f32.const 3.4028234e+38)))\n  (func (export \"f32_dec.trailing_dot\") (result i32) (i32.reinterpret_f32 (f32.const 1.e10)))\n  (func (export \"f32_dec.root_beer_float\") (result i32) (i32.reinterpret_f32 (f32.const 1.000000119)))\n  (func (export \"f64.nan\") (result i64) (i64.reinterpret_f64 (f64.const nan)))\n  (func (export \"f64.positive_nan\") (result i64) (i64.reinterpret_f64 (f64.const +nan)))\n  (func (export \"f64.negative_nan\") (result i64) (i64.reinterpret_f64 (f64.const -nan)))\n  (func (export \"f64.plain_nan\") (result i64) (i64.reinterpret_f64 (f64.const nan:0x8000000000000)))\n  (func (export \"f64.informally_known_as_plain_snan\") (result i64) (i64.reinterpret_f64 (f64.const nan:0x4000000000000)))\n  (func (export \"f64.all_ones_nan\") (result i64) (i64.reinterpret_f64 (f64.const -nan:0xfffffffffffff)))\n  (func (export \"f64.misc_nan\") (result i64) (i64.reinterpret_f64 (f64.const nan:0x0123456789abc)))\n  (func (export \"f64.misc_positive_nan\") (result i64) (i64.reinterpret_f64 (f64.const +nan:0x3040506070809)))\n  (func (export \"f64.misc_negative_nan\") (result i64) (i64.reinterpret_f64 (f64.const -nan:0x2abcdef012345)))\n  (func (export \"f64.infinity\") (result i64) (i64.reinterpret_f64 (f64.const inf)))\n  (func (export \"f64.positive_infinity\") (result i64) (i64.reinterpret_f64 (f64.const +inf)))\n  (func (export \"f64.negative_infinity\") (result i64) (i64.reinterpret_f64 (f64.const -inf)))\n  (func (export \"f64.zero\") (result i64) (i64.reinterpret_f64 (f64.const 0x0.0p0)))\n  (func (export \"f64.positive_zero\") (result i64) (i64.reinterpret_f64 (f64.const +0x0.0p0)))\n  (func (export \"f64.negative_zero\") (result i64) (i64.reinterpret_f64 (f64.const -0x0.0p0)))\n  (func (export \"f64.misc\") (result i64) (i64.reinterpret_f64 (f64.const 0x1.921fb54442d18p+2)))\n  (func (export \"f64.min_positive\") (result i64) (i64.reinterpret_f64 (f64.const 0x0.0000000000001p-1022)))\n  (func (export \"f64.min_normal\") (result i64) (i64.reinterpret_f64 (f64.const 0x1p-1022)))\n  (func (export \"f64.max_subnormal\") (result i64) (i64.reinterpret_f64 (f64.const 0x0.fffffffffffffp-1022)))\n  (func (export \"f64.max_finite\") (result i64) (i64.reinterpret_f64 (f64.const 0x1.fffffffffffffp+1023)))\n  (func (export \"f64.trailing_dot\") (result i64) (i64.reinterpret_f64 (f64.const 0x1.p100)))\n  (func (export \"f64_dec.zero\") (result i64) (i64.reinterpret_f64 (f64.const 0.0e0)))\n  (func (export \"f64_dec.positive_zero\") (result i64) (i64.reinterpret_f64 (f64.const +0.0e0)))\n  (func (export \"f64_dec.negative_zero\") (result i64) (i64.reinterpret_f64 (f64.const -0.0e0)))\n  (func (export \"f64_dec.misc\") (result i64) (i64.reinterpret_f64 (f64.const 6.28318530717958623)))\n  (func (export \"f64_dec.min_positive\") (result i64) (i64.reinterpret_f64 (f64.const 4.94066e-324)))\n  (func (export \"f64_dec.min_normal\") (result i64) (i64.reinterpret_f64 (f64.const 2.2250738585072012e-308)))\n  (func (export \"f64_dec.max_subnormal\") (result i64) (i64.reinterpret_f64 (f64.const 2.2250738585072011e-308)))\n  (func (export \"f64_dec.max_finite\") (result i64) (i64.reinterpret_f64 (f64.const 1.7976931348623157e+308)))\n  (func (export \"f64_dec.trailing_dot\") (result i64) (i64.reinterpret_f64 (f64.const 1.e100)))\n  (func (export \"f64_dec.root_beer_float\") (result i64) (i64.reinterpret_f64 (f64.const 1.000000119)))\n  (func (export \"f32-dec-sep1\") (result f32) (f32.const 1_000_000))\n  (func (export \"f32-dec-sep2\") (result f32) (f32.const 1_0_0_0))\n  (func (export \"f32-dec-sep3\") (result f32) (f32.const 100_3.141_592))\n  (func (export \"f32-dec-sep4\") (result f32) (f32.const 99e+1_3))\n  (func (export \"f32-dec-sep5\") (result f32) (f32.const 122_000.11_3_54E0_2_3))\n  (func (export \"f32-hex-sep1\") (result f32) (f32.const 0xa_0f_00_99))\n  (func (export \"f32-hex-sep2\") (result f32) (f32.const 0x1_a_A_0_f))\n  (func (export \"f32-hex-sep3\") (result f32) (f32.const 0xa0_ff.f141_a59a))\n  (func (export \"f32-hex-sep4\") (result f32) (f32.const 0xf0P+1_3))\n  (func (export \"f32-hex-sep5\") (result f32) (f32.const 0x2a_f00a.1f_3_eep2_3))\n  (func (export \"f64-dec-sep1\") (result f64) (f64.const 1_000_000))\n  (func (export \"f64-dec-sep2\") (result f64) (f64.const 1_0_0_0))\n  (func (export \"f64-dec-sep3\") (result f64) (f64.const 100_3.141_592))\n  (func (export \"f64-dec-sep4\") (result f64) (f64.const 99e-1_23))\n  (func (export \"f64-dec-sep5\") (result f64) (f64.const 122_000.11_3_54e0_2_3))\n  (func (export \"f64-hex-sep1\") (result f64) (f64.const 0xa_f00f_0000_9999))\n  (func (export \"f64-hex-sep2\") (result f64) (f64.const 0x1_a_A_0_f))\n  (func (export \"f64-hex-sep3\") (result f64) (f64.const 0xa0_ff.f141_a59a))\n  (func (export \"f64-hex-sep4\") (result f64) (f64.const 0xf0P+1_3))\n  (func (export \"f64-hex-sep5\") (result f64) (f64.const 0x2a_f00a.1f_3_eep2_3)))",
    "(assert_return (invoke \"f32.nan\") (i32.const 0x7fc00000))",
    "(assert_return (invoke \"f32.positive_nan\") (i32.const 0x7fc00000))",
    "(assert_return (invoke \"f32.negative_nan\") (i32.const 0xffc00000))",
    "(assert_return (invoke \"f32.plain_nan\") (i32.const 0x7fc00000))",
    "(assert_return (invoke \"f32.informally_known_as_plain_snan\") (i32.const 0x7fa00000))",
    "(assert_return (invoke \"f32.all_ones_nan\") (i32.const 0xffffffff))",
    "(assert_return (invoke \"f32.misc_nan\") (i32.const 0x7f812345))",
    "(assert_return (invoke \"f32.misc_positive_nan\") (i32.const 0x7fb04050))",
    "(assert_return (invoke \"f32.misc_negative_nan\") (i32.const 0xffaabcde))",
    "(assert_return (invoke \"f32.infinity\") (i32.const 0x7f800000))",
    "(assert_return (invoke \"f32.positive_infinity\") (i32.const 0x7f800000))",
    "(assert_return (invoke \"f32.negative_infinity\") (i32.const 0xff800000))",
    "(assert_return (invoke \"f32.zero\") (i32.const 0))",
    "(assert_return (invoke \"f32.positive_zero\") (i32.const 0))",
    "(assert_return (invoke \"f32.negative_zero\") (i32.const 0x80000000))",
    "(assert_return (invoke \"f32.misc\") (i32.const 0x40c90fdb))",
    "(assert_return (invoke \"f32.min_positive\") (i32.const 1))",
    "(assert_return (invoke \"f32.min_normal\") (i32.const 0x800000))",
    "(assert_return (invoke \"f32.max_subnormal\") (i32.const 0x7fffff))",
    "(assert_return (invoke \"f32.max_finite\") (i32.const 0x7f7fffff))",
    "(assert_return (invoke \"f32.trailing_dot\") (i32.const 0x44800000))",
    "(assert_return (invoke \"f32_dec.zero\") (i32.const 0))",
    "(assert_return (invoke \"f32_dec.positive_zero\") (i32.const 0))",
    "(assert_return (invoke \"f32_dec.negative_zero\") (i32.const 0x80000000))",
    "(assert_return (invoke \"f32_dec.misc\") (i32.const 0x40c90fdb))",
    "(assert_return (invoke \"f32_dec.min_positive\") (i32.const 1))",
    "(assert_return (invoke \"f32_dec.min_normal\") (i32.const 0x800000))",
    "(assert_return (invoke \"f32_dec.max_subnormal\") (i32.const 0x7fffff))",
    "(assert_return (invoke \"f32_dec.max_finite\") (i32.const 0x7f7fffff))",
    "(assert_return (invoke \"f32_dec.trailing_dot\") (i32.const 0x501502f9))",
    "(assert_return (invoke \"f32_dec.root_beer_float\") (i32.const 0x3f800001))",
    "(assert_return (invoke \"f64.nan\") (i64.const 0x7ff8000000000000))",
    "(assert_return (invoke \"f64.positive_nan\") (i64.const 0x7ff8000000000000))",
    "(assert_return (invoke \"f64.negative_nan\") (i64.const 0xfff8000000000000))",
    "(assert_return (invoke \"f64.plain_nan\") (i64.const 0x7ff8000000000000))",
    "(assert_return (invoke \"f64.informally_known_as_plain_snan\") (i64.const 0x7ff4000000000000))",
    "(assert_return (invoke \"f64.all_ones_nan\") (i64.const 0xffffffffffffffff))",
    "(assert_return (invoke \"f64.misc_nan\") (i64.const 0x7ff0123456789abc))",
    "(assert_return (invoke \"f64.misc_positive_nan\") (i64.const 0x7ff3040506070809))",
    "(assert_return (invoke \"f64.misc_negative_nan\") (i64.const 0xfff2abcdef012345))",
    "(assert_return (invoke \"f64.infinity\") (i64.const 0x7ff0000000000000))",
    "(assert_return (invoke \"f64.positive_infinity\") (i64.const 0x7ff0000000000000))",
    "(assert_return (invoke \"f64.negative_infinity\") (i64.const 0xfff0000000000000))",
    "(assert_return (invoke \"f64.zero\") (i64.const 0))",
    "(assert_return (invoke \"f64.positive_zero\") (i64.const 0))",
    "(assert_return (invoke \"f64.negative_zero\") (i64.const 0x8000000000000000))",
    "(assert_return (invoke \"f64.misc\") (i64.const 0x401921fb54442d18))",
    "(assert_return (invoke \"f64.min_positive\") (i64.const 1))",
    "(assert_return (invoke \"f64.min_normal\") (i64.const 0x10000000000000))",
    "(assert_return (invoke \"f64.max_subnormal\") (i64.const 0xfffffffffffff))",
    "(assert_return (invoke \"f64.max_finite\") (i64.const 0x7fefffffffffffff))",
    "(assert_return (invoke \"f64.trailing_dot\") (i64.const 0x4630000000000000))",
    "(assert_return (invoke \"f64_dec.zero\") (i64.const 0))",
    "(assert_return (invoke \"f64_dec.positive_zero\") (i64.const 0))",
    "(assert_return (invoke \"f64_dec.negative_zero\") (i64.const 0x8000000000000000))",
    "(assert_return (invoke \"f64_dec.misc\") (i64.const 0x401921fb54442d18))",
    "(assert_return (invoke \"f64_dec.min_positive\") (i64.const 1))",
    "(assert_return (invoke \"f64_dec.min_normal\") (i64.const 0x10000000000000))",
    "(assert_return (invoke \"f64_dec.max_subnormal\") (i64.const 0xfffffffffffff))",
    "(assert_return (invoke \"f64_dec.max_finite\") (i64.const 0x7fefffffffffffff))",
    "(assert_return (invoke \"f64_dec.trailing_dot\") (i64.const 0x54b249ad2594c37d))",
    "(assert_return (invoke \"f64_dec.root_beer_float\") (i64.const 0x3ff000001ff19e24))",
    "(assert_return (invoke \"f32-dec-sep1\") (f32.const 1000000))",
    "(assert_return (invoke \"f32-dec-sep2\") (f32.const 1000))",
    "(assert_return (invoke \"f32-dec-sep3\") (f32.const 1003.141592))",
    "(assert_return (invoke \"f32-dec-sep4\") (f32.const 99e+13))",
    "(assert_return (invoke \"f32-dec-sep5\") (f32.const 122000.11354e23))",
    "(assert_return (invoke \"f32-hex-sep1\") (f32.const 0xa0f0099))",
    "(assert_return (invoke \"f32-hex-sep2\") (f32.const 0x1aa0f))",
    "(assert_return (invoke \"f32-hex-sep3\") (f32.const 0xa0ff.f141a59a))",
    "(assert_return (invoke \"f32-hex-sep4\") (f32.const 0xf0P+13))",
    "(assert_return (invoke \"f32-hex-sep5\") (f32.const 0x2af00a.1f3eep23))",
    "(assert_return (invoke \"f64-dec-sep1\") (f64.const 1000000))",
    "(assert_return (invoke \"f64-dec-sep2\") (f64.const 1000))",
    "(assert_return (invoke \"f64-dec-sep3\") (f64.const 1003.141592))",
    "(assert_return (invoke \"f64-dec-sep4\") (f64.const 99e-123))",
    "(assert_return (invoke \"f64-dec-sep5\") (f64.const 122000.11354e23))",
    "(assert_return (invoke \"f64-hex-sep1\") (f64.const 0xaf00f00009999))",
    "(assert_return (invoke \"f64-hex-sep2\") (f64.const 0x1aa0f))",
    "(assert_return (invoke \"f64-hex-sep3\") (f64.const 0xa0ff.f141a59a))",
    "(assert_return (invoke \"f64-hex-sep4\") (f64.const 0xf0P+13))",
    "(assert_return (invoke \"f64-hex-sep5\") (f64.const 0x2af00a.1f3eep23))",
    "(module binary \"\\00\\61\\73\\6d\\01\\00\\00\\00\\01\\85\\80\\80\\80\\00\\01\\60\" \"\\00\\01\\7c\\03\\82\\80\\80\\80\\00\\01\\00\\07\\8e\\80\\80\\80\" \"\\00\\01\\0a\\34\\32\\39\\34\\39\\36\\37\\32\\34\\39\\00\\00\\0a\" \"\\91\\80\\80\\80\\00\\01\\8b\\80\\80\\80\\00\\00\\44\\00\\00\\20\" \"\\fa\\ff\\ff\\ef\\41\\0b\")",
    "(assert_return (invoke \"4294967249\") (f64.const 4294967249))",
    "(assert_malformed (module quote \"(global f32 (f32.const _100))\") \"unknown operator\")",
    "(assert_malformed (module quote \"(global f32 (f32.const +_100))\") \"unknown operator\")",
    "(assert_malformed (module quote \"(global f32 (f32.const -_100))\") \"unknown operator\")",
    "(assert_malformed (module quote \"(global f32 (f32.const 99_))\") \"unknown operator\")",
    "(assert_malformed (module quote \"(global f32 (f32.const 1__000))\") \"unknown operator\")",
    "(assert_malformed (module quote \"(global f32 (f32.const _1.0))\") \"unknown operator\")",
    "(assert_malformed (module quote \"(global f32 (f32.const 1.0_))\") \"unknown operator\")",
    "(assert_malformed (module quote \"(global f32 (f32.const 1_.0))\") \"unknown operator\")",
    "(assert_malformed (module quote \"(global f32 (f32.const 1._0))\") \"unknown operator\")",
    "(assert_malformed (module quote \"(global f32 (f32.const _1e1))\") \"unknown operator\")",
    "(assert_malformed (module quote \"(global f32 (f32.const 1e1_))\") \"unknown operator\")",
    "(assert_malformed (module quote \"(global f32 (f32.const 1_e1))\") \"unknown operator\")",
    "(assert_malformed (module quote \"(global f32 (f32.const 1e_1))\") \"unknown operator\")",
    "(assert_malformed (module quote \"(global f32 (f32.const _1.0e1))\") \"unknown operator\")",
    "(assert_malformed (module quote \"(global f32 (f32.const 1.0e1_))\") \"unknown operator\")",
    "(assert_malformed (module quote \"(global f32 (f32.const 1.0_e1))\") \"unknown operator\")",
    "(assert_malformed (module quote \"(global f32 (f32.const 1.0e_1))\") \"unknown operator\")",
    "(assert_malformed (module quote \"(global f32 (f32.const 1.0e+_1))\") \"unknown operator\")",
    "(assert_malformed (module quote \"(global f32 (f32.const 1.0e_+1))\") \"unknown operator\")",
    "(assert_malformed (module quote \"(global f32 (f32.const _0x100))\") \"unknown operator\")",
    "(assert_malformed (module quote \"(global f32 (f32.const 0_x100))\") \"unknown operator\")",
    "(assert_malformed (module quote \"(global f32 (f32.const 0x_100))\") \"unknown operator\")",
    "(assert_malformed (module quote \"(global f32 (f32.const 0x00_))\") \"unknown operator\")",
    "(assert_malformed (module quote \"(global f32 (f32.const 0xff__ffff))\") \"unknown operator\")",
    "(assert_malformed (module quote \"(global f32 (f32.const 0x_1.0))\") \"unknown operator\")",
    "(assert_malformed (module quote \"(global f32 (f32.const 0x1.0_))\") \"unknown operator\")",
    "(assert_malformed (module quote \"(global f32 (f32.const 0x1_.0))\") \"unknown operator\")",
    "(assert_malformed (module quote \"(global f32 (f32.const 0x1._0))\") \"unknown operator\")",
    "(assert_malformed (module quote \"(global f32 (f32.const 0x_1p1))\") \"unknown operator\")",
    "(assert_malformed (module quote \"(global f32 (f32.const 0x1p1_))\") \"unknown operator\")",
    "(assert_malformed (module quote \"(global f32 (f32.const 0x1_p1))\") \"unknown operator\")",
    "(assert_malformed (module quote \"(global f32 (f32.const 0x1p_1))\") \"unknown operator\")",
    "(assert_malformed (module quote \"(global f32 (f32.const 0x_1.0p1))\") \"unknown operator\")",
    "(assert_malformed (module quote \"(global f32 (f32.const 0x1.0p1_))\") \"unknown operator\")",
    "(assert_malformed (module quote \"(global f32 (f32.const 0x1.0_p1))\") \"unknown operator\")",
    "(assert_malformed (module quote \"(global f32 (f32.const 0x1.0p_1))\") \"unknown operator\")",
    "(assert_malformed (module quote \"(global f32 (f32.const 0x1.0p+_1))\") \"unknown operator\")",
    "(assert_malformed (module quote \"(global f32 (f32.const 0x1.0p_+1))\") \"unknown operator\")",
    "(assert_malformed (module quote \"(global f32 (f32.const nan:0x80_0000))\") \"constant out of range\")",
    "(assert_malformed (module quote \"(global f64 (f64.const _100))\") \"unknown operator\")",
    "(assert_malformed (module quote \"(global f64 (f64.const +_100))\") \"unknown operator\")",
    "(assert_malformed (module quote \"(global f64 (f64.const -_100))\") \"unknown operator\")",
    "(assert_malformed (module quote \"(global f64 (f64.const 99_))\") \"unknown operator\")",
    "(assert_malformed (module quote \"(global f64 (f64.const 1__000))\") \"unknown operator\")",
    "(assert_malformed (module quote \"(global f64 (f64.const _1.0))\") \"unknown operator\")",
    "(assert_malformed (module quote \"(global f64 (f64.const 1.0_))\") \"unknown operator\")",
    "(assert_malformed (module quote \"(global f64 (f64.const 1_.0))\") \"unknown operator\")",
    "(assert_malformed (module quote \"(global f64 (f64.const 1._0))\") \"unknown operator\")",
    "(assert_malformed (module quote \"(global f64 (f64.const _1e1))\") \"unknown operator\")",
    "(assert_malformed (module quote \"(global f64 (f64.const 1e1_))\") \"unknown operator\")",
    "(assert_malformed (module quote \"(global f64 (f64.const 1_e1))\") \"unknown operator\")",
    "(assert_malformed (module quote \"(global f64 (f64.const 1e_1))\") \"unknown operator\")",
    "(assert_malformed (module quote \"(global f64 (f64.const _1.0e1))\") \"unknown operator\")",
    "(assert_malformed (module quote \"(global f64 (f64.const 1.0e1_))\") \"unknown operator\")",
    "(assert_malformed (module quote \"(global f64 (f64.const 1.0_e1))\") \"unknown operator\")",
    "(assert_malformed (module quote \"(global f64 (f64.const 1.0e_1))\") \"unknown operator\")",
    "(assert_malformed (module quote \"(global f64 (f64.const 1.0e+_1))\") \"unknown operator\")",
    "(assert_malformed (module quote \"(global f64 (f64.const 1.0e_+1))\") \"unknown operator\")",
    "(assert_malformed (module quote \"(global f64 (f64.const _0x100))\") \"unknown operator\")",
    "(assert_malformed (module quote \"(global f64 (f64.const 0_x100))\") \"unknown operator\")",
    "(assert_malformed (module quote \"(global f64 (f64.const 0x_100))\") \"unknown operator\")",
    "(assert_malformed (module quote \"(global f64 (f64.const 0x00_))\") \"unknown operator\")",
    "(assert_malformed (module quote \"(global f64 (f64.const 0xff__ffff))\") \"unknown operator\")",
    "(assert_malformed (module quote \"(global f64 (f64.const 0x_1.0))\") \"unknown operator\")",
    "(assert_malformed (module quote \"(global f64 (f64.const 0x1.0_))\") \"unknown operator\")",
    "(assert_malformed (module quote \"(global f64 (f64.const 0x1_.0))\") \"unknown operator\")",
    "(assert_malformed (module quote \"(global f64 (f64.const 0x1._0))\") \"unknown operator\")",
    "(assert_malformed (module quote \"(global f64 (f64.const 0x_1p1))\") \"unknown operator\")",
    "(assert_malformed (module quote \"(global f64 (f64.const 0x1p1_))\") \"unknown operator\")",
    "(assert_malformed (module quote \"(global f64 (f64.const 0x1_p1))\") \"unknown operator\")",
    "(assert_malformed (module quote \"(global f64 (f64.const 0x1p_1))\") \"unknown operator\")",
    "(assert_malformed (module quote \"(global f64 (f64.const 0x_1.0p1))\") \"unknown operator\")",
    "(assert_malformed (module quote \"(global f64 (f64.const 0x1.0p1_))\") \"unknown operator\")",
    "(assert_malformed (module quote \"(global f64 (f64.const 0x1.0_p1))\") \"unknown operator\")",
    "(assert_malformed (module quote \"(global f64 (f64.const 0x1.0p_1))\") \"unknown operator\")",
    "(assert_malformed (module quote \"(global f64 (f64.const 0x1.0p+_1))\") \"unknown operator\")",
    "(assert_malformed (module quote \"(global f64 (f64.const 0x1.0p_+1))\") \"unknown operator\")",
    "(assert_malformed (module quote \"(global f64 (f64.const nan:0x10_0000_0000_0000))\") \"constant out of range\")"
  ],
  "dump": {
    "float_literals.0.wasm": {
      "header": "\nfloat_literals.0.wasm:\tfile format wasm 0x1\n\nSections:\n\n     Type start=0x0000000a end=0x0000001b (size=0x00000011) count: 4\n Function start=0x0000001d end=0x00000070 (size=0x00000053) count: 82\n   Export start=0x00000073 end=0x00000670 (size=0x000005fd) count: 82\n     Code start=0x00000673 end=0x000009e6 (size=0x00000373) count: 82\n",
      "details": "\nfloat_literals.0.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nType[4]:\n - type[0] () -> i32\n - type[1] () -> i64\n - type[2] () -> f32\n - type[3] () -> f64\nFunction[82]:\n - func[0] sig=0 <f32.nan>\n - func[1] sig=0 <f32.positive_nan>\n - func[2] sig=0 <f32.negative_nan>\n - func[3] sig=0 <f32.plain_nan>\n - func[4] sig=0 <f32.informally_known_as_plain_snan>\n - func[5] sig=0 <f32.all_ones_nan>\n - func[6] sig=0 <f32.misc_nan>\n - func[7] sig=0 <f32.misc_positive_nan>\n - func[8] sig=0 <f32.misc_negative_nan>\n - func[9] sig=0 <f32.infinity>\n - func[10] sig=0 <f32.positive_infinity>\n - func[11] sig=0 <f32.negative_infinity>\n - func[12] sig=0 <f32.zero>\n - func[13] sig=0 <f32.positive_zero>\n - func[14] sig=0 <f32.negative_zero>\n - func[15] sig=0 <f32.misc>\n - func[16] sig=0 <f32.min_positive>\n - func[17] sig=0 <f32.min_normal>\n - func[18] sig=0 <f32.max_finite>\n - func[19] sig=0 <f32.max_subnormal>\n - func[20] sig=0 <f32.trailing_dot>\n - func[21] sig=0 <f32_dec.zero>\n - func[22] sig=0 <f32_dec.positive_zero>\n - func[23] sig=0 <f32_dec.negative_zero>\n - func[24] sig=0 <f32_dec.misc>\n - func[25] sig=0 <f32_dec.min_positive>\n - func[26] sig=0 <f32_dec.min_normal>\n - func[27] sig=0 <f32_dec.max_subnormal>\n - func[28] sig=0 <f32_dec.max_finite>\n - func[29] sig=0 <f32_dec.trailing_dot>\n - func[30] sig=0 <f32_dec.root_beer_float>\n - func[31] sig=1 <f64.nan>\n - func[32] sig=1 <f64.positive_nan>\n - func[33] sig=1 <f64.negative_nan>\n - func[34] sig=1 <f64.plain_nan>\n - func[35] sig=1 <f64.informally_known_as_plain_snan>\n - func[36] sig=1 <f64.all_ones_nan>\n - func[37] sig=1 <f64.misc_nan>\n - func[38] sig=1 <f64.misc_positive_nan>\n - func[39] sig=1 <f64.misc_negative_nan>\n - func[40] sig=1 <f64.infinity>\n - func[41] sig=1 <f64.positive_infinity>\n - func[42] sig=1 <f64.negative_infinity>\n - func[43] sig=1 <f64.zero>\n - func[44] sig=1 <f64.positive_zero>\n - func[45] sig=1 <f64.negative_zero>\n - func[46] sig=1 <f64.misc>\n - func[47] sig=1 <f64.min_positive>\n - func[48] sig=1 <f64.min_normal>\n - func[49] sig=1 <f64.max_subnormal>\n - func[50] sig=1 <f64.max_finite>\n - func[51] sig=1 <f64.trailing_dot>\n - func[52] sig=1 <f64_dec.zero>\n - func[53] sig=1 <f64_dec.positive_zero>\n - func[54] sig=1 <f64_dec.negative_zero>\n - func[55] sig=1 <f64_dec.misc>\n - func[56] sig=1 <f64_dec.min_positive>\n - func[57] sig=1 <f64_dec.min_normal>\n - func[58] sig=1 <f64_dec.max_subnormal>\n - func[59] sig=1 <f64_dec.max_finite>\n - func[60] sig=1 <f64_dec.trailing_dot>\n - func[61] sig=1 <f64_dec.root_beer_float>\n - func[62] sig=2 <f32-dec-sep1>\n - func[63] sig=2 <f32-dec-sep2>\n - func[64] sig=2 <f32-dec-sep3>\n - func[65] sig=2 <f32-dec-sep4>\n - func[66] sig=2 <f32-dec-sep5>\n - func[67] sig=2 <f32-hex-sep1>\n - func[68] sig=2 <f32-hex-sep2>\n - func[69] sig=2 <f32-hex-sep3>\n - func[70] sig=2 <f32-hex-sep4>\n - func[71] sig=2 <f32-hex-sep5>\n - func[72] sig=3 <f64-dec-sep1>\n - func[73] sig=3 <f64-dec-sep2>\n - func[74] sig=3 <f64-dec-sep3>\n - func[75] sig=3 <f64-dec-sep4>\n - func[76] sig=3 <f64-dec-sep5>\n - func[77] sig=3 <f64-hex-sep1>\n - func[78] sig=3 <f64-hex-sep2>\n - func[79] sig=3 <f64-hex-sep3>\n - func[80] sig=3 <f64-hex-sep4>\n - func[81] sig=3 <f64-hex-sep5>\nExport[82]:\n - func[0] <f32.nan> -> \"f32.nan\"\n - func[1] <f32.positive_nan> -> \"f32.positive_nan\"\n - func[2] <f32.negative_nan> -> \"f32.negative_nan\"\n - func[3] <f32.plain_nan> -> \"f32.plain_nan\"\n - func[4] <f32.informally_known_as_plain_snan> -> \"f32.informally_known_as_plain_snan\"\n - func[5] <f32.all_ones_nan> -> \"f32.all_ones_nan\"\n - func[6] <f32.misc_nan> -> \"f32.misc_nan\"\n - func[7] <f32.misc_positive_nan> -> \"f32.misc_positive_nan\"\n - func[8] <f32.misc_negative_nan> -> \"f32.misc_negative_nan\"\n - func[9] <f32.infinity> -> \"f32.infinity\"\n - func[10] <f32.positive_infinity> -> \"f32.positive_infinity\"\n - func[11] <f32.negative_infinity> -> \"f32.negative_infinity\"\n - func[12] <f32.zero> -> \"f32.zero\"\n - func[13] <f32.positive_zero> -> \"f32.positive_zero\"\n - func[14] <f32.negative_zero> -> \"f32.negative_zero\"\n - func[15] <f32.misc> -> \"f32.misc\"\n - func[16] <f32.min_positive> -> \"f32.min_positive\"\n - func[17] <f32.min_normal> -> \"f32.min_normal\"\n - func[18] <f32.max_finite> -> \"f32.max_finite\"\n - func[19] <f32.max_subnormal> -> \"f32.max_subnormal\"\n - func[20] <f32.trailing_dot> -> \"f32.trailing_dot\"\n - func[21] <f32_dec.zero> -> \"f32_dec.zero\"\n - func[22] <f32_dec.positive_zero> -> \"f32_dec.positive_zero\"\n - func[23] <f32_dec.negative_zero> -> \"f32_dec.negative_zero\"\n - func[24] <f32_dec.misc> -> \"f32_dec.misc\"\n - func[25] <f32_dec.min_positive> -> \"f32_dec.min_positive\"\n - func[26] <f32_dec.min_normal> -> \"f32_dec.min_normal\"\n - func[27] <f32_dec.max_subnormal> -> \"f32_dec.max_subnormal\"\n - func[28] <f32_dec.max_finite> -> \"f32_dec.max_finite\"\n - func[29] <f32_dec.trailing_dot> -> \"f32_dec.trailing_dot\"\n - func[30] <f32_dec.root_beer_float> -> \"f32_dec.root_beer_float\"\n - func[31] <f64.nan> -> \"f64.nan\"\n - func[32] <f64.positive_nan> -> \"f64.positive_nan\"\n - func[33] <f64.negative_nan> -> \"f64.negative_nan\"\n - func[34] <f64.plain_nan> -> \"f64.plain_nan\"\n - func[35] <f64.informally_known_as_plain_snan> -> \"f64.informally_known_as_plain_snan\"\n - func[36] <f64.all_ones_nan> -> \"f64.all_ones_nan\"\n - func[37] <f64.misc_nan> -> \"f64.misc_nan\"\n - func[38] <f64.misc_positive_nan> -> \"f64.misc_positive_nan\"\n - func[39] <f64.misc_negative_nan> -> \"f64.misc_negative_nan\"\n - func[40] <f64.infinity> -> \"f64.infinity\"\n - func[41] <f64.positive_infinity> -> \"f64.positive_infinity\"\n - func[42] <f64.negative_infinity> -> \"f64.negative_infinity\"\n - func[43] <f64.zero> -> \"f64.zero\"\n - func[44] <f64.positive_zero> -> \"f64.positive_zero\"\n - func[45] <f64.negative_zero> -> \"f64.negative_zero\"\n - func[46] <f64.misc> -> \"f64.misc\"\n - func[47] <f64.min_positive> -> \"f64.min_positive\"\n - func[48] <f64.min_normal> -> \"f64.min_normal\"\n - func[49] <f64.max_subnormal> -> \"f64.max_subnormal\"\n - func[50] <f64.max_finite> -> \"f64.max_finite\"\n - func[51] <f64.trailing_dot> -> \"f64.trailing_dot\"\n - func[52] <f64_dec.zero> -> \"f64_dec.zero\"\n - func[53] <f64_dec.positive_zero> -> \"f64_dec.positive_zero\"\n - func[54] <f64_dec.negative_zero> -> \"f64_dec.negative_zero\"\n - func[55] <f64_dec.misc> -> \"f64_dec.misc\"\n - func[56] <f64_dec.min_positive> -> \"f64_dec.min_positive\"\n - func[57] <f64_dec.min_normal> -> \"f64_dec.min_normal\"\n - func[58] <f64_dec.max_subnormal> -> \"f64_dec.max_subnormal\"\n - func[59] <f64_dec.max_finite> -> \"f64_dec.max_finite\"\n - func[60] <f64_dec.trailing_dot> -> \"f64_dec.trailing_dot\"\n - func[61] <f64_dec.root_beer_float> -> \"f64_dec.root_beer_float\"\n - func[62] <f32-dec-sep1> -> \"f32-dec-sep1\"\n - func[63] <f32-dec-sep2> -> \"f32-dec-sep2\"\n - func[64] <f32-dec-sep3> -> \"f32-dec-sep3\"\n - func[65] <f32-dec-sep4> -> \"f32-dec-sep4\"\n - func[66] <f32-dec-sep5> -> \"f32-dec-sep5\"\n - func[67] <f32-hex-sep1> -> \"f32-hex-sep1\"\n - func[68] <f32-hex-sep2> -> \"f32-hex-sep2\"\n - func[69] <f32-hex-sep3> -> \"f32-hex-sep3\"\n - func[70] <f32-hex-sep4> -> \"f32-hex-sep4\"\n - func[71] <f32-hex-sep5> -> \"f32-hex-sep5\"\n - func[72] <f64-dec-sep1> -> \"f64-dec-sep1\"\n - func[73] <f64-dec-sep2> -> \"f64-dec-sep2\"\n - func[74] <f64-dec-sep3> -> \"f64-dec-sep3\"\n - func[75] <f64-dec-sep4> -> \"f64-dec-sep4\"\n - func[76] <f64-dec-sep5> -> \"f64-dec-sep5\"\n - func[77] <f64-hex-sep1> -> \"f64-hex-sep1\"\n - func[78] <f64-hex-sep2> -> \"f64-hex-sep2\"\n - func[79] <f64-hex-sep3> -> \"f64-hex-sep3\"\n - func[80] <f64-hex-sep4> -> \"f64-hex-sep4\"\n - func[81] <f64-hex-sep5> -> \"f64-hex-sep5\"\nCode[82]:\n - func[0] size=8 <f32.nan>\n - func[1] size=8 <f32.positive_nan>\n - func[2] size=8 <f32.negative_nan>\n - func[3] size=8 <f32.plain_nan>\n - func[4] size=8 <f32.informally_known_as_plain_snan>\n - func[5] size=8 <f32.all_ones_nan>\n - func[6] size=8 <f32.misc_nan>\n - func[7] size=8 <f32.misc_positive_nan>\n - func[8] size=8 <f32.misc_negative_nan>\n - func[9] size=8 <f32.infinity>\n - func[10] size=8 <f32.positive_infinity>\n - func[11] size=8 <f32.negative_infinity>\n - func[12] size=8 <f32.zero>\n - func[13] size=8 <f32.positive_zero>\n - func[14] size=8 <f32.negative_zero>\n - func[15] size=8 <f32.misc>\n - func[16] size=8 <f32.min_positive>\n - func[17] size=8 <f32.min_normal>\n - func[18] size=8 <f32.max_finite>\n - func[19] size=8 <f32.max_subnormal>\n - func[20] size=8 <f32.trailing_dot>\n - func[21] size=8 <f32_dec.zero>\n - func[22] size=8 <f32_dec.positive_zero>\n - func[23] size=8 <f32_dec.negative_zero>\n - func[24] size=8 <f32_dec.misc>\n - func[25] size=8 <f32_dec.min_positive>\n - func[26] size=8 <f32_dec.min_normal>\n - func[27] size=8 <f32_dec.max_subnormal>\n - func[28] size=8 <f32_dec.max_finite>\n - func[29] size=8 <f32_dec.trailing_dot>\n - func[30] size=8 <f32_dec.root_beer_float>\n - func[31] size=12 <f64.nan>\n - func[32] size=12 <f64.positive_nan>\n - func[33] size=12 <f64.negative_nan>\n - func[34] size=12 <f64.plain_nan>\n - func[35] size=12 <f64.informally_known_as_plain_snan>\n - func[36] size=12 <f64.all_ones_nan>\n - func[37] size=12 <f64.misc_nan>\n - func[38] size=12 <f64.misc_positive_nan>\n - func[39] size=12 <f64.misc_negative_nan>\n - func[40] size=12 <f64.infinity>\n - func[41] size=12 <f64.positive_infinity>\n - func[42] size=12 <f64.negative_infinity>\n - func[43] size=12 <f64.zero>\n - func[44] size=12 <f64.positive_zero>\n - func[45] size=12 <f64.negative_zero>\n - func[46] size=12 <f64.misc>\n - func[47] size=12 <f64.min_positive>\n - func[48] size=12 <f64.min_normal>\n - func[49] size=12 <f64.max_subnormal>\n - func[50] size=12 <f64.max_finite>\n - func[51] size=12 <f64.trailing_dot>\n - func[52] size=12 <f64_dec.zero>\n - func[53] size=12 <f64_dec.positive_zero>\n - func[54] size=12 <f64_dec.negative_zero>\n - func[55] size=12 <f64_dec.misc>\n - func[56] size=12 <f64_dec.min_positive>\n - func[57] size=12 <f64_dec.min_normal>\n - func[58] size=12 <f64_dec.max_subnormal>\n - func[59] size=12 <f64_dec.max_finite>\n - func[60] size=12 <f64_dec.trailing_dot>\n - func[61] size=12 <f64_dec.root_beer_float>\n - func[62] size=7 <f32-dec-sep1>\n - func[63] size=7 <f32-dec-sep2>\n - func[64] size=7 <f32-dec-sep3>\n - func[65] size=7 <f32-dec-sep4>\n - func[66] size=7 <f32-dec-sep5>\n - func[67] size=7 <f32-hex-sep1>\n - func[68] size=7 <f32-hex-sep2>\n - func[69] size=7 <f32-hex-sep3>\n - func[70] size=7 <f32-hex-sep4>\n - func[71] size=7 <f32-hex-sep5>\n - func[72] size=11 <f64-dec-sep1>\n - func[73] size=11 <f64-dec-sep2>\n - func[74] size=11 <f64-dec-sep3>\n - func[75] size=11 <f64-dec-sep4>\n - func[76] size=11 <f64-dec-sep5>\n - func[77] size=11 <f64-hex-sep1>\n - func[78] size=11 <f64-hex-sep2>\n - func[79] size=11 <f64-hex-sep3>\n - func[80] size=11 <f64-hex-sep4>\n - func[81] size=11 <f64-hex-sep5>\n",
      "disassemble": "\nfloat_literals.0.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n000675 func[0] <f32.nan>:\n 000676: 43 00 00 c0 7f             | f32.const nan\n 00067b: bc                         | i32.reinterpret_f32\n 00067c: 0b                         | end\n00067e func[1] <f32.positive_nan>:\n 00067f: 43 00 00 c0 7f             | f32.const nan\n 000684: bc                         | i32.reinterpret_f32\n 000685: 0b                         | end\n000687 func[2] <f32.negative_nan>:\n 000688: 43 00 00 c0 ff             | f32.const -nan\n 00068d: bc                         | i32.reinterpret_f32\n 00068e: 0b                         | end\n000690 func[3] <f32.plain_nan>:\n 000691: 43 00 00 c0 7f             | f32.const nan\n 000696: bc                         | i32.reinterpret_f32\n 000697: 0b                         | end\n000699 func[4] <f32.informally_known_as_plain_snan>:\n 00069a: 43 00 00 a0 7f             | f32.const nan:0x200000\n 00069f: bc                         | i32.reinterpret_f32\n 0006a0: 0b                         | end\n0006a2 func[5] <f32.all_ones_nan>:\n 0006a3: 43 ff ff ff ff             | f32.const -nan:0x7fffff\n 0006a8: bc                         | i32.reinterpret_f32\n 0006a9: 0b                         | end\n0006ab func[6] <f32.misc_nan>:\n 0006ac: 43 45 23 81 7f             | f32.const nan:0x12345\n 0006b1: bc                         | i32.reinterpret_f32\n 0006b2: 0b                         | end\n0006b4 func[7] <f32.misc_positive_nan>:\n 0006b5: 43 50 40 b0 7f             | f32.const nan:0x304050\n 0006ba: bc                         | i32.reinterpret_f32\n 0006bb: 0b                         | end\n0006bd func[8] <f32.misc_negative_nan>:\n 0006be: 43 de bc aa ff             | f32.const -nan:0x2abcde\n 0006c3: bc                         | i32.reinterpret_f32\n 0006c4: 0b                         | end\n0006c6 func[9] <f32.infinity>:\n 0006c7: 43 00 00 80 7f             | f32.const inf\n 0006cc: bc                         | i32.reinterpret_f32\n 0006cd: 0b                         | end\n0006cf func[10] <f32.positive_infinity>:\n 0006d0: 43 00 00 80 7f             | f32.const inf\n 0006d5: bc                         | i32.reinterpret_f32\n 0006d6: 0b                         | end\n0006d8 func[11] <f32.negative_infinity>:\n 0006d9: 43 00 00 80 ff             | f32.const -inf\n 0006de: bc                         | i32.reinterpret_f32\n 0006df: 0b                         | end\n0006e1 func[12] <f32.zero>:\n 0006e2: 43 00 00 00 00             | f32.const 0x0p+0\n 0006e7: bc                         | i32.reinterpret_f32\n 0006e8: 0b                         | end\n0006ea func[13] <f32.positive_zero>:\n 0006eb: 43 00 00 00 00             | f32.const 0x0p+0\n 0006f0: bc                         | i32.reinterpret_f32\n 0006f1: 0b                         | end\n0006f3 func[14] <f32.negative_zero>:\n 0006f4: 43 00 00 00 80             | f32.const -0x0p+0\n 0006f9: bc                         | i32.reinterpret_f32\n 0006fa: 0b                         | end\n0006fc func[15] <f32.misc>:\n 0006fd: 43 db 0f c9 40             | f32.const 0x1.921fb6p+2\n 000702: bc                         | i32.reinterpret_f32\n 000703: 0b                         | end\n000705 func[16] <f32.min_positive>:\n 000706: 43 01 00 00 00             | f32.const 0x1p-149\n 00070b: bc                         | i32.reinterpret_f32\n 00070c: 0b                         | end\n00070e func[17] <f32.min_normal>:\n 00070f: 43 00 00 80 00             | f32.const 0x1p-126\n 000714: bc                         | i32.reinterpret_f32\n 000715: 0b                         | end\n000717 func[18] <f32.max_finite>:\n 000718: 43 ff ff 7f 7f             | f32.const 0x1.fffffep+127\n 00071d: bc                         | i32.reinterpret_f32\n 00071e: 0b                         | end\n000720 func[19] <f32.max_subnormal>:\n 000721: 43 ff ff 7f 00             | f32.const 0x1.fffffcp-127\n 000726: bc                         | i32.reinterpret_f32\n 000727: 0b                         | end\n000729 func[20] <f32.trailing_dot>:\n 00072a: 43 00 00 80 44             | f32.const 0x1p+10\n 00072f: bc                         | i32.reinterpret_f32\n 000730: 0b                         | end\n000732 func[21] <f32_dec.zero>:\n 000733: 43 00 00 00 00             | f32.const 0x0p+0\n 000738: bc                         | i32.reinterpret_f32\n 000739: 0b                         | end\n00073b func[22] <f32_dec.positive_zero>:\n 00073c: 43 00 00 00 00             | f32.const 0x0p+0\n 000741: bc                         | i32.reinterpret_f32\n 000742: 0b                         | end\n000744 func[23] <f32_dec.negative_zero>:\n 000745: 43 00 00 00 80             | f32.const -0x0p+0\n 00074a: bc                         | i32.reinterpret_f32\n 00074b: 0b                         | end\n00074d func[24] <f32_dec.misc>:\n 00074e: 43 db 0f c9 40             | f32.const 0x1.921fb6p+2\n 000753: bc                         | i32.reinterpret_f32\n 000754: 0b                         | end\n000756 func[25] <f32_dec.min_positive>:\n 000757: 43 01 00 00 00             | f32.const 0x1p-149\n 00075c: bc                         | i32.reinterpret_f32\n 00075d: 0b                         | end\n00075f func[26] <f32_dec.min_normal>:\n 000760: 43 00 00 80 00             | f32.const 0x1p-126\n 000765: bc                         | i32.reinterpret_f32\n 000766: 0b                         | end\n000768 func[27] <f32_dec.max_subnormal>:\n 000769: 43 ff ff 7f 00             | f32.const 0x1.fffffcp-127\n 00076e: bc                         | i32.reinterpret_f32\n 00076f: 0b                         | end\n000771 func[28] <f32_dec.max_finite>:\n 000772: 43 ff ff 7f 7f             | f32.const 0x1.fffffep+127\n 000777: bc                         | i32.reinterpret_f32\n 000778: 0b                         | end\n00077a func[29] <f32_dec.trailing_dot>:\n 00077b: 43 f9 02 15 50             | f32.const 0x1.2a05f2p+33\n 000780: bc                         | i32.reinterpret_f32\n 000781: 0b                         | end\n000783 func[30] <f32_dec.root_beer_float>:\n 000784: 43 01 00 80 3f             | f32.const 0x1.000002p+0\n 000789: bc                         | i32.reinterpret_f32\n 00078a: 0b                         | end\n00078c func[31] <f64.nan>:\n 00078d: 44 00 00 00 00 00 00 f8 7f | f64.const nan\n 000796: bd                         | i64.reinterpret_f64\n 000797: 0b                         | end\n000799 func[32] <f64.positive_nan>:\n 00079a: 44 00 00 00 00 00 00 f8 7f | f64.const nan\n 0007a3: bd                         | i64.reinterpret_f64\n 0007a4: 0b                         | end\n0007a6 func[33] <f64.negative_nan>:\n 0007a7: 44 00 00 00 00 00 00 f8 ff | f64.const -nan\n 0007b0: bd                         | i64.reinterpret_f64\n 0007b1: 0b                         | end\n0007b3 func[34] <f64.plain_nan>:\n 0007b4: 44 00 00 00 00 00 00 f8 7f | f64.const nan\n 0007bd: bd                         | i64.reinterpret_f64\n 0007be: 0b                         | end\n0007c0 func[35] <f64.informally_known_as_plain_snan>:\n 0007c1: 44 00 00 00 00 00 00 f4 7f | f64.const nan:0x4000000000000\n 0007ca: bd                         | i64.reinterpret_f64\n 0007cb: 0b                         | end\n0007cd func[36] <f64.all_ones_nan>:\n 0007ce: 44 ff ff ff ff ff ff ff ff | f64.const -nan:0xfffffffffffff\n 0007d7: bd                         | i64.reinterpret_f64\n 0007d8: 0b                         | end\n0007da func[37] <f64.misc_nan>:\n 0007db: 44 bc 9a 78 56 34 12 f0 7f | f64.const nan:0x123456789abc\n 0007e4: bd                         | i64.reinterpret_f64\n 0007e5: 0b                         | end\n0007e7 func[38] <f64.misc_positive_nan>:\n 0007e8: 44 09 08 07 06 05 04 f3 7f | f64.const nan:0x3040506070809\n 0007f1: bd                         | i64.reinterpret_f64\n 0007f2: 0b                         | end\n0007f4 func[39] <f64.misc_negative_nan>:\n 0007f5: 44 45 23 01 ef cd ab f2 ff | f64.const -nan:0x2abcdef012345\n 0007fe: bd                         | i64.reinterpret_f64\n 0007ff: 0b                         | end\n000801 func[40] <f64.infinity>:\n 000802: 44 00 00 00 00 00 00 f0 7f | f64.const inf\n 00080b: bd                         | i64.reinterpret_f64\n 00080c: 0b                         | end\n00080e func[41] <f64.positive_infinity>:\n 00080f: 44 00 00 00 00 00 00 f0 7f | f64.const inf\n 000818: bd                         | i64.reinterpret_f64\n 000819: 0b                         | end\n00081b func[42] <f64.negative_infinity>:\n 00081c: 44 00 00 00 00 00 00 f0 ff | f64.const -inf\n 000825: bd                         | i64.reinterpret_f64\n 000826: 0b                         | end\n000828 func[43] <f64.zero>:\n 000829: 44 00 00 00 00 00 00 00 00 | f64.const 0x0p+0\n 000832: bd                         | i64.reinterpret_f64\n 000833: 0b                         | end\n000835 func[44] <f64.positive_zero>:\n 000836: 44 00 00 00 00 00 00 00 00 | f64.const 0x0p+0\n 00083f: bd                         | i64.reinterpret_f64\n 000840: 0b                         | end\n000842 func[45] <f64.negative_zero>:\n 000843: 44 00 00 00 00 00 00 00 80 | f64.const -0x0p+0\n 00084c: bd                         | i64.reinterpret_f64\n 00084d: 0b                         | end\n00084f func[46] <f64.misc>:\n 000850: 44 18 2d 44 54 fb 21 19 40 | f64.const 0x1.921fb54442d18p+2\n 000859: bd                         | i64.reinterpret_f64\n 00085a: 0b                         | end\n00085c func[47] <f64.min_positive>:\n 00085d: 44 01 00 00 00 00 00 00 00 | f64.const 0x1p-1074\n 000866: bd                         | i64.reinterpret_f64\n 000867: 0b                         | end\n000869 func[48] <f64.min_normal>:\n 00086a: 44 00 00 00 00 00 00 10 00 | f64.const 0x1p-1022\n 000873: bd                         | i64.reinterpret_f64\n 000874: 0b                         | end\n000876 func[49] <f64.max_subnormal>:\n 000877: 44 ff ff ff ff ff ff 0f 00 | f64.const 0x1.ffffffffffffep-1023\n 000880: bd                         | i64.reinterpret_f64\n 000881: 0b                         | end\n000883 func[50] <f64.max_finite>:\n 000884: 44 ff ff ff ff ff ff ef 7f | f64.const 0x1.fffffffffffffp+1023\n 00088d: bd                         | i64.reinterpret_f64\n 00088e: 0b                         | end\n000890 func[51] <f64.trailing_dot>:\n 000891: 44 00 00 00 00 00 00 30 46 | f64.const 0x1p+100\n 00089a: bd                         | i64.reinterpret_f64\n 00089b: 0b                         | end\n00089d func[52] <f64_dec.zero>:\n 00089e: 44 00 00 00 00 00 00 00 00 | f64.const 0x0p+0\n 0008a7: bd                         | i64.reinterpret_f64\n 0008a8: 0b                         | end\n0008aa func[53] <f64_dec.positive_zero>:\n 0008ab: 44 00 00 00 00 00 00 00 00 | f64.const 0x0p+0\n 0008b4: bd                         | i64.reinterpret_f64\n 0008b5: 0b                         | end\n0008b7 func[54] <f64_dec.negative_zero>:\n 0008b8: 44 00 00 00 00 00 00 00 80 | f64.const -0x0p+0\n 0008c1: bd                         | i64.reinterpret_f64\n 0008c2: 0b                         | end\n0008c4 func[55] <f64_dec.misc>:\n 0008c5: 44 18 2d 44 54 fb 21 19 40 | f64.const 0x1.921fb54442d18p+2\n 0008ce: bd                         | i64.reinterpret_f64\n 0008cf: 0b                         | end\n0008d1 func[56] <f64_dec.min_positive>:\n 0008d2: 44 01 00 00 00 00 00 00 00 | f64.const 0x1p-1074\n 0008db: bd                         | i64.reinterpret_f64\n 0008dc: 0b                         | end\n0008de func[57] <f64_dec.min_normal>:\n 0008df: 44 00 00 00 00 00 00 10 00 | f64.const 0x1p-1022\n 0008e8: bd                         | i64.reinterpret_f64\n 0008e9: 0b                         | end\n0008eb func[58] <f64_dec.max_subnormal>:\n 0008ec: 44 ff ff ff ff ff ff 0f 00 | f64.const 0x1.ffffffffffffep-1023\n 0008f5: bd                         | i64.reinterpret_f64\n 0008f6: 0b                         | end\n0008f8 func[59] <f64_dec.max_finite>:\n 0008f9: 44 ff ff ff ff ff ff ef 7f | f64.const 0x1.fffffffffffffp+1023\n 000902: bd                         | i64.reinterpret_f64\n 000903: 0b                         | end\n000905 func[60] <f64_dec.trailing_dot>:\n 000906: 44 7d c3 94 25 ad 49 b2 54 | f64.const 0x1.249ad2594c37dp+332\n 00090f: bd                         | i64.reinterpret_f64\n 000910: 0b                         | end\n000912 func[61] <f64_dec.root_beer_float>:\n 000913: 44 24 9e f1 1f 00 00 f0 3f | f64.const 0x1.000001ff19e24p+0\n 00091c: bd                         | i64.reinterpret_f64\n 00091d: 0b                         | end\n00091f func[62] <f32-dec-sep1>:\n 000920: 43 00 24 74 49             | f32.const 0x1.e848p+19\n 000925: 0b                         | end\n000927 func[63] <f32-dec-sep2>:\n 000928: 43 00 00 7a 44             | f32.const 0x1.f4p+9\n 00092d: 0b                         | end\n00092f func[64] <f32-dec-sep3>:\n 000930: 43 10 c9 7a 44             | f32.const 0x1.f5922p+9\n 000935: 0b                         | end\n000937 func[65] <f32-dec-sep4>:\n 000938: 43 96 19 61 58             | f32.const 0x1.c2332cp+49\n 00093d: 0b                         | end\n00093f func[66] <f32-dec-sep5>:\n 000940: 43 74 ae 1d 6e             | f32.const 0x1.3b5ce8p+93\n 000945: 0b                         | end\n000947 func[67] <f32-hex-sep1>:\n 000948: 43 0a f0 20 4d             | f32.const 0x1.41e014p+27\n 00094d: 0b                         | end\n00094f func[68] <f32-hex-sep2>:\n 000950: 43 80 07 d5 47             | f32.const 0x1.aa0fp+16\n 000955: 0b                         | end\n000957 func[69] <f32-hex-sep3>:\n 000958: 43 f1 ff 20 47             | f32.const 0x1.41ffe2p+15\n 00095d: 0b                         | end\n00095f func[70] <f32-hex-sep4>:\n 000960: 43 00 00 f0 49             | f32.const 0x1.ep+20\n 000965: 0b                         | end\n000967 func[71] <f32-hex-sep5>:\n 000968: 43 28 c0 ab 55             | f32.const 0x1.57805p+44\n 00096d: 0b                         | end\n00096f func[72] <f64-dec-sep1>:\n 000970: 44 00 00 00 00 80 84 2e 41 | f64.const 0x1.e848p+19\n 000979: 0b                         | end\n00097b func[73] <f64-dec-sep2>:\n 00097c: 44 00 00 00 00 00 40 8f 40 | f64.const 0x1.f4p+9\n 000985: 0b                         | end\n000987 func[74] <f64-dec-sep3>:\n 000988: 44 00 8b fc fa 21 59 8f 40 | f64.const 0x1.f5921fafc8bp+9\n 000991: 0b                         | end\n000993 func[75] <f64-dec-sep4>:\n 000994: 44 45 cc b7 5b 73 5c d0 26 | f64.const 0x1.05c735bb7cc45p-402\n 00099d: 0b                         | end\n00099f func[76] <f64-dec-sep5>:\n 0009a0: 44 9c de 5b 72 ce b5 c3 45 | f64.const 0x1.3b5ce725bde9cp+93\n 0009a9: 0b                         | end\n0009ab func[77] <f64-hex-sep1>:\n 0009ac: 44 32 33 01 00 1e e0 25 43 | f64.const 0x1.5e01e00013332p+51\n 0009b5: 0b                         | end\n0009b7 func[78] <f64-hex-sep2>:\n 0009b8: 44 00 00 00 00 f0 a0 fa 40 | f64.const 0x1.aa0fp+16\n 0009c1: 0b                         | end\n0009c3 func[79] <f64-hex-sep3>:\n 0009c4: 44 40 b3 34 28 fe 1f e4 40 | f64.const 0x1.41ffe2834b34p+15\n 0009cd: 0b                         | end\n0009cf func[80] <f64-hex-sep4>:\n 0009d0: 44 00 00 00 00 00 00 3e 41 | f64.const 0x1.ep+20\n 0009d9: 0b                         | end\n0009db func[81] <f64-hex-sep5>:\n 0009dc: 44 00 70 9f 0f 05 78 b5 42 | f64.const 0x1.578050f9f7p+44\n 0009e5: 0b                         | end\n"
    },
    "float_literals.1.wasm": {
      "header": "\nfloat_literals.1.wasm:\tfile format wasm 0x1\n\nSections:\n\n     Type start=0x0000000e end=0x00000013 (size=0x00000005) count: 1\n Function start=0x00000019 end=0x0000001b (size=0x00000002) count: 1\n   Export start=0x00000021 end=0x0000002f (size=0x0000000e) count: 1\n     Code start=0x00000035 end=0x00000046 (size=0x00000011) count: 1\n",
      "details": "\nfloat_literals.1.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nType[1]:\n - type[0] () -> f64\nFunction[1]:\n - func[0] sig=0 <4294967249>\nExport[1]:\n - func[0] <4294967249> -> \"4294967249\"\nCode[1]:\n - func[0] size=11 <4294967249>\n",
      "disassemble": "\nfloat_literals.1.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n00003b func[0] <4294967249>:\n 00003c: 44 00 00 20 fa ff ff ef 41 | f64.const 0x1.ffffffa2p+31\n 000045: 0b                         | end\n"
    }
  }
}
