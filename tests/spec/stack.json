{
  "bin": {
    "stack.0.wasm": "AGFzbQEAAAABDQNgAX4BfmAAAX9gAAADCQgAAAAAAAECAQYGAX8BQQALB1cGCGZhYy1leHByAAAJZmFjLXN0YWNrAAENZmFjLXN0YWNrLXJhdwACCWZhYy1taXhlZAADDWZhYy1taXhlZC1yYXcABBBub3QtcXVpdGUtYS10cmVlAAcKjwIILwECfiAAIQFCASECAkADQCABQgBRBEAMAgUgASACfiECIAFCAX0hAQsMAAsLIAILLwECfiAAIQFCASECAkADQCABQgBRBEAMAgUgASACfiECIAFCAX0hAQsMAAsLIAILLwECfiAAIQFCASECAkADQCABQgBRBEAMAgUgASACfiECIAFCAX0hAQsMAAsLIAILLwECfiAAIQFCASECAkADQCABQgBRBEAMAgUgASACfiECIAFCAX0hAQsMAAsLIAILLwECfiAAIQFCASECAkADQCABQgBRBEAMAgUgASACfiECIAFCAX0hAQsMAAsLIAILDQEBf0EBIwBqJAAjAAsFABAFGgsJABAFEAUQBmoL",
    "stack.1.wasm": "AGFzbQEAAAABDANgAABgAX8AYAABfwMCAQAEBAFwAAEKtAMBsQMAAkBBABEAAAsDQEEAEQAAC0EABEBBABEAAAtBAARAQQARAAAFQQARAAALAkBBABEAAAsDQEEAEQAAC0EABEBBABEAAAtBAARAQQARAAAFQQARAAALAkBBAEEAEQEACwNAQQBBABEBAAtBAARAQQBBABEBAAtBAARAQQBBABEBAAVBAEEAEQEACwJ/QQARAgALGgN/QQARAgALGkEABH9BABECAAVBABECAAsaAkBBABEAAAsDQEEAEQAAC0EABEBBABEAAAtBAARAQQARAAAFQQARAAALAkBBABEAAAsDQEEAEQAAC0EABEBBABEAAAtBAARAQQARAAAFQQARAAALAkBBABEAAAsDQEEAEQAAC0EABEBBABEAAAtBAARAQQARAAAFQQARAAALAkBBAEEAEQEACwNAQQBBABEBAAtBAARAQQBBABEBAAtBAARAQQBBABEBAAVBAEEAEQEACwJ/QQARAgALGgN/QQARAgALGkEABH9BABECAAVBABECAAsaAkBBABEAAAsDQEEAEQAAC0EABEBBABEAAAtBAARAQQARAAAFQQARAAALQQARAAAL"
  },
  "spec": {"source_filename": "/workspace/wasm-spec/test/core/stack.wast",
 "commands": [
  {"type": "module", "line": 1, "filename": "stack.0.wasm"}, 
  {"type": "assert_return", "line": 146, "action": {"type": "invoke", "field": "fac-expr", "args": [{"type": "i64", "value": "25"}]}, "expected": [{"type": "i64", "value": "7034535277573963776"}]}, 
  {"type": "assert_return", "line": 147, "action": {"type": "invoke", "field": "fac-stack", "args": [{"type": "i64", "value": "25"}]}, "expected": [{"type": "i64", "value": "7034535277573963776"}]}, 
  {"type": "assert_return", "line": 148, "action": {"type": "invoke", "field": "fac-mixed", "args": [{"type": "i64", "value": "25"}]}, "expected": [{"type": "i64", "value": "7034535277573963776"}]}, 
  {"type": "assert_return", "line": 150, "action": {"type": "invoke", "field": "not-quite-a-tree", "args": []}, "expected": [{"type": "i32", "value": "3"}]}, 
  {"type": "assert_return", "line": 151, "action": {"type": "invoke", "field": "not-quite-a-tree", "args": []}, "expected": [{"type": "i32", "value": "9"}]}, 
  {"type": "module", "line": 156, "filename": "stack.1.wasm"}]},
  "code": [
    "(module \n  (func (export \"fac-expr\") (param $n i64) (result i64) (local $i i64) (local $res i64) (local.set $i (local.get $n)) (local.set $res (i64.const 1)) (block $done (loop $loop (if (i64.eq (local.get $i) (i64.const 0)) (then (br $done)) (else (local.set $res (i64.mul (local.get $i) (local.get $res))) (local.set $i (i64.sub (local.get $i) (i64.const 1))) ) ) (br $loop) ) ) (local.get $res) )\n  (func (export \"fac-stack\") (param $n i64) (result i64) (local $i i64) (local $res i64) (local.get $n) (local.set $i) (i64.const 1) (local.set $res) (block $done (loop $loop (local.get $i) (i64.const 0) (i64.eq) (if (then (br $done)) (else (local.get $i) (local.get $res) (i64.mul) (local.set $res) (local.get $i) (i64.const 1) (i64.sub) (local.set $i) ) ) (br $loop) ) ) (local.get $res) )\n  (func (export \"fac-stack-raw\") (param $n i64) (result i64) (local $i i64) (local $res i64) local.get $n local.set $i i64.const 1 local.set $res block $done loop $loop local.get $i i64.const 0 i64.eq if $body br $done else $body local.get $i local.get $res i64.mul local.set $res local.get $i i64.const 1 i64.sub local.set $i end $body br $loop end $loop end $done local.get $res )\n  (func (export \"fac-mixed\") (param $n i64) (result i64) (local $i i64) (local $res i64) (local.set $i (local.get $n)) (local.set $res (i64.const 1)) (block $done (loop $loop (i64.eq (local.get $i) (i64.const 0)) (if (then (br $done)) (else (i64.mul (local.get $i) (local.get $res)) (local.set $res) (i64.sub (local.get $i) (i64.const 1)) (local.set $i) ) ) (br $loop) ) ) (local.get $res) )\n  (func (export \"fac-mixed-raw\") (param $n i64) (result i64) (local $i i64) (local $res i64) (local.set $i (local.get $n)) (local.set $res (i64.const 1)) block $done loop $loop (i64.eq (local.get $i) (i64.const 0)) if br $done else (i64.mul (local.get $i) (local.get $res)) local.set $res (i64.sub (local.get $i) (i64.const 1)) local.set $i end br $loop end end local.get $res ) (global $temp (mut i32) (i32.const 0))\n  (func $add_one_to_global (result i32) (local i32) (global.set $temp (i32.add (i32.const 1) (global.get $temp))) (global.get $temp) )\n  (func $add_one_to_global_and_drop (drop (call $add_one_to_global)) )\n  (func (export \"not-quite-a-tree\") (result i32) call $add_one_to_global call $add_one_to_global call $add_one_to_global_and_drop i32.add ))",
    "(assert_return (invoke \"fac-expr\" (i64.const 25)) (i64.const 7034535277573963776))",
    "(assert_return (invoke \"fac-stack\" (i64.const 25)) (i64.const 7034535277573963776))",
    "(assert_return (invoke \"fac-mixed\" (i64.const 25)) (i64.const 7034535277573963776))",
    "(assert_return (invoke \"not-quite-a-tree\") (i32.const 3))",
    "(assert_return (invoke \"not-quite-a-tree\") (i32.const 9))",
    "(module (type $proc (func)) (table 1 funcref)\n  (func (block i32.const 0 call_indirect) (loop i32.const 0 call_indirect) (if (i32.const 0) (then i32.const 0 call_indirect)) (if (i32.const 0) (then i32.const 0 call_indirect) (else i32.const 0 call_indirect) ) (block i32.const 0 call_indirect (type $proc)) (loop i32.const 0 call_indirect (type $proc)) (if (i32.const 0) (then i32.const 0 call_indirect (type $proc))) (if (i32.const 0) (then i32.const 0 call_indirect (type $proc)) (else i32.const 0 call_indirect (type $proc)) ) (block i32.const 0 i32.const 0 call_indirect (param i32)) (loop i32.const 0 i32.const 0 call_indirect (param i32)) (if (i32.const 0) (then i32.const 0 i32.const 0 call_indirect (param i32))) (if (i32.const 0) (then i32.const 0 i32.const 0 call_indirect (param i32)) (else i32.const 0 i32.const 0 call_indirect (param i32)) ) (block (result i32) i32.const 0 call_indirect (result i32)) (drop) (loop (result i32) i32.const 0 call_indirect (result i32)) (drop) (if (result i32) (i32.const 0) (then i32.const 0 call_indirect (result i32)) (else i32.const 0 call_indirect (result i32)) ) (drop) (block i32.const 0 call_indirect (type $proc) (param) (result)) (loop i32.const 0 call_indirect (type $proc) (param) (result)) (if (i32.const 0) (then i32.const 0 call_indirect (type $proc) (param) (result)) ) (if (i32.const 0) (then i32.const 0 call_indirect (type $proc) (param) (param) (result)) (else i32.const 0 call_indirect (type $proc) (param) (result) (result)) ) block i32.const 0 call_indirect end loop i32.const 0 call_indirect end i32.const 0 if i32.const 0 call_indirect end i32.const 0 if i32.const 0 call_indirect else i32.const 0 call_indirect end block i32.const 0 call_indirect (type $proc) end loop i32.const 0 call_indirect (type $proc) end i32.const 0 if i32.const 0 call_indirect (type $proc) end i32.const 0 if i32.const 0 call_indirect (type $proc) else i32.const 0 call_indirect (type $proc) end block i32.const 0 i32.const 0 call_indirect (param i32) end loop i32.const 0 i32.const 0 call_indirect (param i32) end i32.const 0 if i32.const 0 i32.const 0 call_indirect (param i32) end i32.const 0 if i32.const 0 i32.const 0 call_indirect (param i32) else i32.const 0 i32.const 0 call_indirect (param i32) end block (result i32) i32.const 0 call_indirect (result i32) end drop loop (result i32) i32.const 0 call_indirect (result i32) end drop i32.const 0 if (result i32) i32.const 0 call_indirect (result i32) else i32.const 0 call_indirect (result i32) end drop block i32.const 0 call_indirect (type $proc) (param) (result) end loop i32.const 0 call_indirect (type $proc) (param) (result) end i32.const 0 if i32.const 0 call_indirect (type $proc) (param) (result) end i32.const 0 if i32.const 0 call_indirect (type $proc) (param) (result) else i32.const 0 call_indirect (type $proc) (param) (param) (result) (result) end i32.const 0 call_indirect ))"
  ],
  "dump": {
    "stack.0.wasm": {
      "header": "\nstack.0.wasm:\tfile format wasm 0x1\n\nSections:\n\n     Type start=0x0000000a end=0x00000017 (size=0x0000000d) count: 3\n Function start=0x00000019 end=0x00000022 (size=0x00000009) count: 8\n   Global start=0x00000024 end=0x0000002a (size=0x00000006) count: 1\n   Export start=0x0000002c end=0x00000083 (size=0x00000057) count: 6\n     Code start=0x00000086 end=0x00000195 (size=0x0000010f) count: 8\n",
      "details": "\nstack.0.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nType[3]:\n - type[0] (i64) -> i64\n - type[1] () -> i32\n - type[2] () -> nil\nFunction[8]:\n - func[0] sig=0 <fac-expr>\n - func[1] sig=0 <fac-stack>\n - func[2] sig=0 <fac-stack-raw>\n - func[3] sig=0 <fac-mixed>\n - func[4] sig=0 <fac-mixed-raw>\n - func[5] sig=1\n - func[6] sig=2\n - func[7] sig=1 <not-quite-a-tree>\nGlobal[1]:\n - global[0] i32 mutable=1 - init i32=0\nExport[6]:\n - func[0] <fac-expr> -> \"fac-expr\"\n - func[1] <fac-stack> -> \"fac-stack\"\n - func[2] <fac-stack-raw> -> \"fac-stack-raw\"\n - func[3] <fac-mixed> -> \"fac-mixed\"\n - func[4] <fac-mixed-raw> -> \"fac-mixed-raw\"\n - func[7] <not-quite-a-tree> -> \"not-quite-a-tree\"\nCode[8]:\n - func[0] size=47 <fac-expr>\n - func[1] size=47 <fac-stack>\n - func[2] size=47 <fac-stack-raw>\n - func[3] size=47 <fac-mixed>\n - func[4] size=47 <fac-mixed-raw>\n - func[5] size=13\n - func[6] size=5\n - func[7] size=9 <not-quite-a-tree>\n",
      "disassemble": "\nstack.0.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n000088 func[0] <fac-expr>:\n 000089: 02 7e                      | local[1..2] type=i64\n 00008b: 20 00                      | local.get 0\n 00008d: 21 01                      | local.set 1\n 00008f: 42 01                      | i64.const 1\n 000091: 21 02                      | local.set 2\n 000093: 02 40                      | block\n 000095: 03 40                      |   loop\n 000097: 20 01                      |     local.get 1\n 000099: 42 00                      |     i64.const 0\n 00009b: 51                         |     i64.eq\n 00009c: 04 40                      |     if\n 00009e: 0c 02                      |       br 2\n 0000a0: 05                         |     else\n 0000a1: 20 01                      |       local.get 1\n 0000a3: 20 02                      |       local.get 2\n 0000a5: 7e                         |       i64.mul\n 0000a6: 21 02                      |       local.set 2\n 0000a8: 20 01                      |       local.get 1\n 0000aa: 42 01                      |       i64.const 1\n 0000ac: 7d                         |       i64.sub\n 0000ad: 21 01                      |       local.set 1\n 0000af: 0b                         |     end\n 0000b0: 0c 00                      |     br 0\n 0000b2: 0b                         |   end\n 0000b3: 0b                         | end\n 0000b4: 20 02                      | local.get 2\n 0000b6: 0b                         | end\n0000b8 func[1] <fac-stack>:\n 0000b9: 02 7e                      | local[1..2] type=i64\n 0000bb: 20 00                      | local.get 0\n 0000bd: 21 01                      | local.set 1\n 0000bf: 42 01                      | i64.const 1\n 0000c1: 21 02                      | local.set 2\n 0000c3: 02 40                      | block\n 0000c5: 03 40                      |   loop\n 0000c7: 20 01                      |     local.get 1\n 0000c9: 42 00                      |     i64.const 0\n 0000cb: 51                         |     i64.eq\n 0000cc: 04 40                      |     if\n 0000ce: 0c 02                      |       br 2\n 0000d0: 05                         |     else\n 0000d1: 20 01                      |       local.get 1\n 0000d3: 20 02                      |       local.get 2\n 0000d5: 7e                         |       i64.mul\n 0000d6: 21 02                      |       local.set 2\n 0000d8: 20 01                      |       local.get 1\n 0000da: 42 01                      |       i64.const 1\n 0000dc: 7d                         |       i64.sub\n 0000dd: 21 01                      |       local.set 1\n 0000df: 0b                         |     end\n 0000e0: 0c 00                      |     br 0\n 0000e2: 0b                         |   end\n 0000e3: 0b                         | end\n 0000e4: 20 02                      | local.get 2\n 0000e6: 0b                         | end\n0000e8 func[2] <fac-stack-raw>:\n 0000e9: 02 7e                      | local[1..2] type=i64\n 0000eb: 20 00                      | local.get 0\n 0000ed: 21 01                      | local.set 1\n 0000ef: 42 01                      | i64.const 1\n 0000f1: 21 02                      | local.set 2\n 0000f3: 02 40                      | block\n 0000f5: 03 40                      |   loop\n 0000f7: 20 01                      |     local.get 1\n 0000f9: 42 00                      |     i64.const 0\n 0000fb: 51                         |     i64.eq\n 0000fc: 04 40                      |     if\n 0000fe: 0c 02                      |       br 2\n 000100: 05                         |     else\n 000101: 20 01                      |       local.get 1\n 000103: 20 02                      |       local.get 2\n 000105: 7e                         |       i64.mul\n 000106: 21 02                      |       local.set 2\n 000108: 20 01                      |       local.get 1\n 00010a: 42 01                      |       i64.const 1\n 00010c: 7d                         |       i64.sub\n 00010d: 21 01                      |       local.set 1\n 00010f: 0b                         |     end\n 000110: 0c 00                      |     br 0\n 000112: 0b                         |   end\n 000113: 0b                         | end\n 000114: 20 02                      | local.get 2\n 000116: 0b                         | end\n000118 func[3] <fac-mixed>:\n 000119: 02 7e                      | local[1..2] type=i64\n 00011b: 20 00                      | local.get 0\n 00011d: 21 01                      | local.set 1\n 00011f: 42 01                      | i64.const 1\n 000121: 21 02                      | local.set 2\n 000123: 02 40                      | block\n 000125: 03 40                      |   loop\n 000127: 20 01                      |     local.get 1\n 000129: 42 00                      |     i64.const 0\n 00012b: 51                         |     i64.eq\n 00012c: 04 40                      |     if\n 00012e: 0c 02                      |       br 2\n 000130: 05                         |     else\n 000131: 20 01                      |       local.get 1\n 000133: 20 02                      |       local.get 2\n 000135: 7e                         |       i64.mul\n 000136: 21 02                      |       local.set 2\n 000138: 20 01                      |       local.get 1\n 00013a: 42 01                      |       i64.const 1\n 00013c: 7d                         |       i64.sub\n 00013d: 21 01                      |       local.set 1\n 00013f: 0b                         |     end\n 000140: 0c 00                      |     br 0\n 000142: 0b                         |   end\n 000143: 0b                         | end\n 000144: 20 02                      | local.get 2\n 000146: 0b                         | end\n000148 func[4] <fac-mixed-raw>:\n 000149: 02 7e                      | local[1..2] type=i64\n 00014b: 20 00                      | local.get 0\n 00014d: 21 01                      | local.set 1\n 00014f: 42 01                      | i64.const 1\n 000151: 21 02                      | local.set 2\n 000153: 02 40                      | block\n 000155: 03 40                      |   loop\n 000157: 20 01                      |     local.get 1\n 000159: 42 00                      |     i64.const 0\n 00015b: 51                         |     i64.eq\n 00015c: 04 40                      |     if\n 00015e: 0c 02                      |       br 2\n 000160: 05                         |     else\n 000161: 20 01                      |       local.get 1\n 000163: 20 02                      |       local.get 2\n 000165: 7e                         |       i64.mul\n 000166: 21 02                      |       local.set 2\n 000168: 20 01                      |       local.get 1\n 00016a: 42 01                      |       i64.const 1\n 00016c: 7d                         |       i64.sub\n 00016d: 21 01                      |       local.set 1\n 00016f: 0b                         |     end\n 000170: 0c 00                      |     br 0\n 000172: 0b                         |   end\n 000173: 0b                         | end\n 000174: 20 02                      | local.get 2\n 000176: 0b                         | end\n000178 func[5]:\n 000179: 01 7f                      | local[0] type=i32\n 00017b: 41 01                      | i32.const 1\n 00017d: 23 00                      | global.get 0\n 00017f: 6a                         | i32.add\n 000180: 24 00                      | global.set 0\n 000182: 23 00                      | global.get 0\n 000184: 0b                         | end\n000186 func[6]:\n 000187: 10 05                      | call 5\n 000189: 1a                         | drop\n 00018a: 0b                         | end\n00018c func[7] <not-quite-a-tree>:\n 00018d: 10 05                      | call 5\n 00018f: 10 05                      | call 5\n 000191: 10 06                      | call 6\n 000193: 6a                         | i32.add\n 000194: 0b                         | end\n"
    },
    "stack.1.wasm": {
      "header": "\nstack.1.wasm:\tfile format wasm 0x1\n\nSections:\n\n     Type start=0x0000000a end=0x00000016 (size=0x0000000c) count: 3\n Function start=0x00000018 end=0x0000001a (size=0x00000002) count: 1\n    Table start=0x0000001c end=0x00000020 (size=0x00000004) count: 1\n     Code start=0x00000023 end=0x000001d7 (size=0x000001b4) count: 1\n",
      "details": "\nstack.1.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nType[3]:\n - type[0] () -> nil\n - type[1] (i32) -> nil\n - type[2] () -> i32\nFunction[1]:\n - func[0] sig=0\nTable[1]:\n - table[0] type=funcref initial=1\nCode[1]:\n - func[0] size=433\n",
      "disassemble": "\nstack.1.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n000026 func[0]:\n 000027: 02 40                      | block\n 000029: 41 00                      |   i32.const 0\n 00002b: 11 00 00                   |   call_indirect 0 (type 0)\n 00002e: 0b                         | end\n 00002f: 03 40                      | loop\n 000031: 41 00                      |   i32.const 0\n 000033: 11 00 00                   |   call_indirect 0 (type 0)\n 000036: 0b                         | end\n 000037: 41 00                      | i32.const 0\n 000039: 04 40                      | if\n 00003b: 41 00                      |   i32.const 0\n 00003d: 11 00 00                   |   call_indirect 0 (type 0)\n 000040: 0b                         | end\n 000041: 41 00                      | i32.const 0\n 000043: 04 40                      | if\n 000045: 41 00                      |   i32.const 0\n 000047: 11 00 00                   |   call_indirect 0 (type 0)\n 00004a: 05                         | else\n 00004b: 41 00                      |   i32.const 0\n 00004d: 11 00 00                   |   call_indirect 0 (type 0)\n 000050: 0b                         | end\n 000051: 02 40                      | block\n 000053: 41 00                      |   i32.const 0\n 000055: 11 00 00                   |   call_indirect 0 (type 0)\n 000058: 0b                         | end\n 000059: 03 40                      | loop\n 00005b: 41 00                      |   i32.const 0\n 00005d: 11 00 00                   |   call_indirect 0 (type 0)\n 000060: 0b                         | end\n 000061: 41 00                      | i32.const 0\n 000063: 04 40                      | if\n 000065: 41 00                      |   i32.const 0\n 000067: 11 00 00                   |   call_indirect 0 (type 0)\n 00006a: 0b                         | end\n 00006b: 41 00                      | i32.const 0\n 00006d: 04 40                      | if\n 00006f: 41 00                      |   i32.const 0\n 000071: 11 00 00                   |   call_indirect 0 (type 0)\n 000074: 05                         | else\n 000075: 41 00                      |   i32.const 0\n 000077: 11 00 00                   |   call_indirect 0 (type 0)\n 00007a: 0b                         | end\n 00007b: 02 40                      | block\n 00007d: 41 00                      |   i32.const 0\n 00007f: 41 00                      |   i32.const 0\n 000081: 11 01 00                   |   call_indirect 0 (type 1)\n 000084: 0b                         | end\n 000085: 03 40                      | loop\n 000087: 41 00                      |   i32.const 0\n 000089: 41 00                      |   i32.const 0\n 00008b: 11 01 00                   |   call_indirect 0 (type 1)\n 00008e: 0b                         | end\n 00008f: 41 00                      | i32.const 0\n 000091: 04 40                      | if\n 000093: 41 00                      |   i32.const 0\n 000095: 41 00                      |   i32.const 0\n 000097: 11 01 00                   |   call_indirect 0 (type 1)\n 00009a: 0b                         | end\n 00009b: 41 00                      | i32.const 0\n 00009d: 04 40                      | if\n 00009f: 41 00                      |   i32.const 0\n 0000a1: 41 00                      |   i32.const 0\n 0000a3: 11 01 00                   |   call_indirect 0 (type 1)\n 0000a6: 05                         | else\n 0000a7: 41 00                      |   i32.const 0\n 0000a9: 41 00                      |   i32.const 0\n 0000ab: 11 01 00                   |   call_indirect 0 (type 1)\n 0000ae: 0b                         | end\n 0000af: 02 7f                      | block i32\n 0000b1: 41 00                      |   i32.const 0\n 0000b3: 11 02 00                   |   call_indirect 0 (type 2)\n 0000b6: 0b                         | end\n 0000b7: 1a                         | drop\n 0000b8: 03 7f                      | loop i32\n 0000ba: 41 00                      |   i32.const 0\n 0000bc: 11 02 00                   |   call_indirect 0 (type 2)\n 0000bf: 0b                         | end\n 0000c0: 1a                         | drop\n 0000c1: 41 00                      | i32.const 0\n 0000c3: 04 7f                      | if i32\n 0000c5: 41 00                      |   i32.const 0\n 0000c7: 11 02 00                   |   call_indirect 0 (type 2)\n 0000ca: 05                         | else\n 0000cb: 41 00                      |   i32.const 0\n 0000cd: 11 02 00                   |   call_indirect 0 (type 2)\n 0000d0: 0b                         | end\n 0000d1: 1a                         | drop\n 0000d2: 02 40                      | block\n 0000d4: 41 00                      |   i32.const 0\n 0000d6: 11 00 00                   |   call_indirect 0 (type 0)\n 0000d9: 0b                         | end\n 0000da: 03 40                      | loop\n 0000dc: 41 00                      |   i32.const 0\n 0000de: 11 00 00                   |   call_indirect 0 (type 0)\n 0000e1: 0b                         | end\n 0000e2: 41 00                      | i32.const 0\n 0000e4: 04 40                      | if\n 0000e6: 41 00                      |   i32.const 0\n 0000e8: 11 00 00                   |   call_indirect 0 (type 0)\n 0000eb: 0b                         | end\n 0000ec: 41 00                      | i32.const 0\n 0000ee: 04 40                      | if\n 0000f0: 41 00                      |   i32.const 0\n 0000f2: 11 00 00                   |   call_indirect 0 (type 0)\n 0000f5: 05                         | else\n 0000f6: 41 00                      |   i32.const 0\n 0000f8: 11 00 00                   |   call_indirect 0 (type 0)\n 0000fb: 0b                         | end\n 0000fc: 02 40                      | block\n 0000fe: 41 00                      |   i32.const 0\n 000100: 11 00 00                   |   call_indirect 0 (type 0)\n 000103: 0b                         | end\n 000104: 03 40                      | loop\n 000106: 41 00                      |   i32.const 0\n 000108: 11 00 00                   |   call_indirect 0 (type 0)\n 00010b: 0b                         | end\n 00010c: 41 00                      | i32.const 0\n 00010e: 04 40                      | if\n 000110: 41 00                      |   i32.const 0\n 000112: 11 00 00                   |   call_indirect 0 (type 0)\n 000115: 0b                         | end\n 000116: 41 00                      | i32.const 0\n 000118: 04 40                      | if\n 00011a: 41 00                      |   i32.const 0\n 00011c: 11 00 00                   |   call_indirect 0 (type 0)\n 00011f: 05                         | else\n 000120: 41 00                      |   i32.const 0\n 000122: 11 00 00                   |   call_indirect 0 (type 0)\n 000125: 0b                         | end\n 000126: 02 40                      | block\n 000128: 41 00                      |   i32.const 0\n 00012a: 11 00 00                   |   call_indirect 0 (type 0)\n 00012d: 0b                         | end\n 00012e: 03 40                      | loop\n 000130: 41 00                      |   i32.const 0\n 000132: 11 00 00                   |   call_indirect 0 (type 0)\n 000135: 0b                         | end\n 000136: 41 00                      | i32.const 0\n 000138: 04 40                      | if\n 00013a: 41 00                      |   i32.const 0\n 00013c: 11 00 00                   |   call_indirect 0 (type 0)\n 00013f: 0b                         | end\n 000140: 41 00                      | i32.const 0\n 000142: 04 40                      | if\n 000144: 41 00                      |   i32.const 0\n 000146: 11 00 00                   |   call_indirect 0 (type 0)\n 000149: 05                         | else\n 00014a: 41 00                      |   i32.const 0\n 00014c: 11 00 00                   |   call_indirect 0 (type 0)\n 00014f: 0b                         | end\n 000150: 02 40                      | block\n 000152: 41 00                      |   i32.const 0\n 000154: 41 00                      |   i32.const 0\n 000156: 11 01 00                   |   call_indirect 0 (type 1)\n 000159: 0b                         | end\n 00015a: 03 40                      | loop\n 00015c: 41 00                      |   i32.const 0\n 00015e: 41 00                      |   i32.const 0\n 000160: 11 01 00                   |   call_indirect 0 (type 1)\n 000163: 0b                         | end\n 000164: 41 00                      | i32.const 0\n 000166: 04 40                      | if\n 000168: 41 00                      |   i32.const 0\n 00016a: 41 00                      |   i32.const 0\n 00016c: 11 01 00                   |   call_indirect 0 (type 1)\n 00016f: 0b                         | end\n 000170: 41 00                      | i32.const 0\n 000172: 04 40                      | if\n 000174: 41 00                      |   i32.const 0\n 000176: 41 00                      |   i32.const 0\n 000178: 11 01 00                   |   call_indirect 0 (type 1)\n 00017b: 05                         | else\n 00017c: 41 00                      |   i32.const 0\n 00017e: 41 00                      |   i32.const 0\n 000180: 11 01 00                   |   call_indirect 0 (type 1)\n 000183: 0b                         | end\n 000184: 02 7f                      | block i32\n 000186: 41 00                      |   i32.const 0\n 000188: 11 02 00                   |   call_indirect 0 (type 2)\n 00018b: 0b                         | end\n 00018c: 1a                         | drop\n 00018d: 03 7f                      | loop i32\n 00018f: 41 00                      |   i32.const 0\n 000191: 11 02 00                   |   call_indirect 0 (type 2)\n 000194: 0b                         | end\n 000195: 1a                         | drop\n 000196: 41 00                      | i32.const 0\n 000198: 04 7f                      | if i32\n 00019a: 41 00                      |   i32.const 0\n 00019c: 11 02 00                   |   call_indirect 0 (type 2)\n 00019f: 05                         | else\n 0001a0: 41 00                      |   i32.const 0\n 0001a2: 11 02 00                   |   call_indirect 0 (type 2)\n 0001a5: 0b                         | end\n 0001a6: 1a                         | drop\n 0001a7: 02 40                      | block\n 0001a9: 41 00                      |   i32.const 0\n 0001ab: 11 00 00                   |   call_indirect 0 (type 0)\n 0001ae: 0b                         | end\n 0001af: 03 40                      | loop\n 0001b1: 41 00                      |   i32.const 0\n 0001b3: 11 00 00                   |   call_indirect 0 (type 0)\n 0001b6: 0b                         | end\n 0001b7: 41 00                      | i32.const 0\n 0001b9: 04 40                      | if\n 0001bb: 41 00                      |   i32.const 0\n 0001bd: 11 00 00                   |   call_indirect 0 (type 0)\n 0001c0: 0b                         | end\n 0001c1: 41 00                      | i32.const 0\n 0001c3: 04 40                      | if\n 0001c5: 41 00                      |   i32.const 0\n 0001c7: 11 00 00                   |   call_indirect 0 (type 0)\n 0001ca: 05                         | else\n 0001cb: 41 00                      |   i32.const 0\n 0001cd: 11 00 00                   |   call_indirect 0 (type 0)\n 0001d0: 0b                         | end\n 0001d1: 41 00                      | i32.const 0\n 0001d3: 11 00 00                   | call_indirect 0 (type 0)\n 0001d6: 0b                         | end\n"
    }
  }
}
