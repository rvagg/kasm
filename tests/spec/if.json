{
  "bin": {
    "if.0.wasm": "AGFzbQEAAAABXRBgAn9/AX9gAABgAAF/YAF/AGADf3x/A398f2ABfwF/YAF/An9/YAADf35/YAACf39gAAJ9fWABfwN/f35gAAN/f35gAn9/An9/YAN+fn8Cfn9gAn5+AX5gAX4BfgM2NQEDBQYABQUFBQUFBQUFBQUABQUFAwMFBQUFAwUFBQUFBQAFAAUFBQIFCgUFBQUFBQUNDgEBBAUBcAEBAQUDAQABBgYBfwFBCgsHzgYyBWVtcHR5AAEIc2luZ3VsYXIAAgVtdWx0aQADBm5lc3RlZAAED2FzLXNlbGVjdC1maXJzdAAFDWFzLXNlbGVjdC1taWQABg5hcy1zZWxlY3QtbGFzdAAHDWFzLWxvb3AtZmlyc3QACAthcy1sb29wLW1pZAAJDGFzLWxvb3AtbGFzdAAKD2FzLWlmLWNvbmRpdGlvbgALDmFzLWJyX2lmLWZpcnN0AAwNYXMtYnJfaWYtbGFzdAANEWFzLWJyX3RhYmxlLWZpcnN0AA4QYXMtYnJfdGFibGUtbGFzdAAPFmFzLWNhbGxfaW5kaXJlY3QtZmlyc3QAERRhcy1jYWxsX2luZGlyZWN0LW1pZAASFWFzLWNhbGxfaW5kaXJlY3QtbGFzdAATDmFzLXN0b3JlLWZpcnN0ABQNYXMtc3RvcmUtbGFzdAAVFGFzLW1lbW9yeS5ncm93LXZhbHVlABYNYXMtY2FsbC12YWx1ZQAYD2FzLXJldHVybi12YWx1ZQAZD2FzLWRyb3Atb3BlcmFuZAAaC2FzLWJyLXZhbHVlABsSYXMtbG9jYWwuc2V0LXZhbHVlABwSYXMtbG9jYWwudGVlLXZhbHVlAB0TYXMtZ2xvYmFsLnNldC12YWx1ZQAeD2FzLWxvYWQtb3BlcmFuZAAfEGFzLXVuYXJ5LW9wZXJhbmQAIBFhcy1iaW5hcnktb3BlcmFuZAAhD2FzLXRlc3Qtb3BlcmFuZAAiEmFzLWNvbXBhcmUtb3BlcmFuZAAjEmFzLWJpbmFyeS1vcGVyYW5kcwAkE2FzLWNvbXBhcmUtb3BlcmFuZHMAJRFhcy1taXhlZC1vcGVyYW5kcwAmCmJyZWFrLWJhcmUAJwticmVhay12YWx1ZQAoEWJyZWFrLW11bHRpLXZhbHVlACkFcGFyYW0AKgZwYXJhbXMAKwlwYXJhbXMtaWQALAtwYXJhbS1icmVhawAtDHBhcmFtcy1icmVhawAuD3BhcmFtcy1pZC1icmVhawAvB2VmZmVjdHMAMBJhZGQ2NF91X3dpdGhfY2FycnkAMRFhZGQ2NF91X3NhdHVyYXRlZAAyCHR5cGUtdXNlADMSYXR5cGljYWwtY29uZGl0aW9uADQJBwEAQQALARAKxgs1AgALFgAgAARACyAABEALIAAEQAsgAARACwsaACAABEABCyAABEABBQELIAAEf0EHBUEICwtnACAABEAQABAAEAALIAAEQAUQABAAEAALIAAEfxAAEABBCBAABRAAEABBCRAACyAABAcQABAAQQEQABAAEABCAhAAEAAQAEEDEAAFEAAQAEF/EAAQABAAQn4QABAAEABBfRAACxoaC1IAIAAEfyABBEAQAAJACwELIAEEQAUQAAJACwELIAEEfxAAQQkFEABBCgsFIAEEQBAAAkALAQsgAQRABRAAAkALAQsgAQR/EABBCgUQAEELCwsLFQAgAAR/EABBAQUQAEEAC0ECQQMbCxUAQQIgAAR/EABBAQUQAEEAC0EDGwsVAEECQQMgAAR/EABBAQUQAEEACxsLFwADfyAABH8QAEEBBRAAQQALEAAQAAsLFwADfxAAIAAEfxAAQQEFEABBAAsQAAsLFwADfxAAEAAgAAR/EABBAQUQAEEACwsLGAAgAAR/QQEFQQALBH8QAEECBRAAQQMLCxoAAn8gAAR/EABBAQUQAEEAC0ECDQBBAw8LCxoAAn9BAiAABH8QAEEBBRAAQQALDQBBAw8LCxkAAn8gAAR/EABBAQUQAEEAC0ECDgEAAAsLGQACf0ECIAAEfxAAQQEFEABBAAsOAQAACwsEACAACxoAAn8gAAR/EABBAQUQAEEAC0ECQQARAAALCxoAAn9BAiAABH8QAEEBBRAAQQALQQARAAALCxoAAn9BAkEAIAAEfxAAQQEFEABBAAsRAAALCxUAIAAEfxAAQQEFEABBAAtBAjYCAAsVAEECIAAEfxAAQQEFEABBAAs2AgALDgAgAAR/QQEFQQALQAALBAAgAAsOACAABH9BAQVBAAsQFwsNACAABH9BAQVBAAsPCw0AIAAEf0EBBUEACxoLEQACfyAABH9BAQVBAAsMAAsLEgEBfyAABH9BAQVBAAshACAACw4AIAAEf0EBBUEACyIACxAAIAAEf0EBBUEACyQAIwALDwAgAAR/QQsFQQoLKAIACxEAIAAEfxAAQQ0FEABBcwtoCx8AIAAEfxAAQQMFEABBfQsgAQR/EABBBAUQAEF7C2wLEQAgAAR/EABBDQUQAEEAC0ULKwAgAAR9EABDAABAQAUQAEMAAEDACyABBH0QAEMAAIBABRAAQwAAgMALXgsZACAABAgQAEEDEABBBAUQAEEDEABBfAtsCyUAIAAECRAAQwAAQEAQAEMAAEBABRAAQwAAAMAQAEMAAEDAC14LHAAgAAQIEABBAxAAQQQFEABBfRAAQXwLQQVqbAtnAEEBBEAMAAALQQEEQAwAAAUAC0EABEAABQwAAAtBAQRAQQENAAALQQEEQEEBDQAABQALQQAEQAAFQQENAAALQQEEQEEADgAAAAtBAQRAQQAOAAAABQALQQAEQAAFQQAOAAAAC0ETCxQAIAAEf0ESDABBEwVBFQwAQRQLCyQAIAAEC0ESQW5CEgwAQRNBbUITBUFuQRJCbgwAQW1BE0JtCwsQAEEBIAAEBUECagVBfmoLCw4AQQFBAiAABABqBWsLCwwAQQFBAiAABAwLagsUAEEBIAAEBUECagwABUF+agwACwsSAEEBQQIgAAQAagwABWsMAAsLDgBBAUECIAAEDAwAC2oLUQEBfwJ/QQEhASAACwRAIAFBA2whASABQQVrIQEgAUEHbCEBDAAgAUHkAGwhAQUgAUEFbCEBIAFBB2shASABQQNsIQEMACABQegHbCEBCyABCxcBAX4gACABfCACrXwhAyADIAMgAFQPCxAAIAAgAUEAEDEEDxpCfwsLVQBBAQRAC0EBBH9BAAVBAgtBAQQDGgUaC0EARAAAAAAAAAAAQQBBAQQECxoaGkEBBH9BAAVBAgtBAQQDGgUaC0EARAAAAAAAAAAAQQBBAQQECxoaGgsNAEEABEALQQFFBEALCw==",
    "if.1.wat": "KHR5cGUgJHNpZyAoZnVuYyAocGFyYW0gaTMyKSAocmVzdWx0IGkzMikpKShmdW5jIChpMzIuY29uc3QgMCkgIChpZiAodHlwZSAkc2lnKSAocmVzdWx0IGkzMikgKHBhcmFtIGkzMikgKGkzMi5jb25zdCAxKSAodGhlbikpKQ==",
    "if.10.wat": "KHR5cGUgJHNpZyAoZnVuYyAocGFyYW0gaTMyKSAocmVzdWx0IGkzMikpKShmdW5jIChpMzIuY29uc3QgMCkgKGkzMi5jb25zdCAxKSAgKGlmICh0eXBlICRzaWcpIChwYXJhbSBpMzIpICh0aGVuIChkcm9wKSkgKGVsc2UgKGRyb3ApKSkgICh1bnJlYWNoYWJsZSkp",
    "if.100.wasm": "AGFzbQEAAAABCAJgAABgAX8AAwIBAAoNAQsAAkBBAQQBGgsLCw==",
    "if.101.wasm": "AGFzbQEAAAABCQJgAABgAn98AAMCAQAKDgEMAAJAQQEEARoaCwsL",
    "if.102.wasm": "AGFzbQEAAAABCAJgAABgAX8AAwIBAAoSARAAAkBDAAAAAEEBBAEaCwsL",
    "if.103.wasm": "AGFzbQEAAAABCQJgAABgAn1/AAMCAQAKEwERAAJAQwAAAABBAQQBGhoLCws=",
    "if.104.wat": "KGZ1bmMgKHBhcmFtIGkzMikgKHJlc3VsdCBpMzIpIGlmIChwYXJhbSAkeCBpMzIpIGVuZCk=",
    "if.105.wat": "KGZ1bmMgKHBhcmFtIGkzMikgKHJlc3VsdCBpMzIpIChpZiAocGFyYW0gJHggaTMyKSAodGhlbikpKQ==",
    "if.106.wat": "KGZ1bmMgaTMyLmNvbnN0IDAgaWYgZW5kICRsKQ==",
    "if.107.wat": "KGZ1bmMgaTMyLmNvbnN0IDAgaWYgJGEgZW5kICRsKQ==",
    "if.108.wat": "KGZ1bmMgaTMyLmNvbnN0IDAgaWYgZWxzZSAkbCBlbmQp",
    "if.109.wat": "KGZ1bmMgaTMyLmNvbnN0IDAgaWYgJGEgZWxzZSAkbCBlbmQp",
    "if.11.wat": "KHR5cGUgJHNpZyAoZnVuYyAocGFyYW0gaTMyIGkzMikgKHJlc3VsdCBpMzIpKSkoZnVuYyAoaTMyLmNvbnN0IDApIChpMzIuY29uc3QgMSkgIChpZiAodHlwZSAkc2lnKSAocGFyYW0gaTMyKSAocmVzdWx0IGkzMikgKHRoZW4pKSAodW5yZWFjaGFibGUpKQ==",
    "if.110.wat": "KGZ1bmMgaTMyLmNvbnN0IDAgaWYgZWxzZSBlbmQgJGwp",
    "if.111.wat": "KGZ1bmMgaTMyLmNvbnN0IDAgaWYgZWxzZSAkbCBlbmQgJGwp",
    "if.112.wat": "KGZ1bmMgaTMyLmNvbnN0IDAgaWYgZWxzZSAkbDEgZW5kICRsMik=",
    "if.113.wat": "KGZ1bmMgaTMyLmNvbnN0IDAgaWYgJGEgZWxzZSBlbmQgJGwp",
    "if.114.wat": "KGZ1bmMgaTMyLmNvbnN0IDAgaWYgJGEgZWxzZSAkYSBlbmQgJGwp",
    "if.115.wat": "KGZ1bmMgaTMyLmNvbnN0IDAgaWYgJGEgZWxzZSAkbCBlbmQgJGwp",
    "if.116.wat": "KGZ1bmMgKGlmIGkzMi5jb25zdCAwICh0aGVuKSAoZWxzZSkpKQ==",
    "if.12.wasm": "AGFzbQEAAAABBAFgAAADAgEACgsBCQBBAUEABEALCw==",
    "if.13.wasm": "AGFzbQEAAAABBQFgAAF/AwIBAAoJAQcAQQAEQAsL",
    "if.14.wasm": "AGFzbQEAAAABBQFgAAF+AwIBAAoJAQcAQQAEQAsL",
    "if.15.wasm": "AGFzbQEAAAABBQFgAAF9AwIBAAoJAQcAQQAEQAsL",
    "if.16.wasm": "AGFzbQEAAAABBQFgAAF8AwIBAAoJAQcAQQAEQAsL",
    "if.17.wasm": "AGFzbQEAAAABBQFgAAF/AwIBAAoJAQcAQQAEQAsL",
    "if.18.wasm": "AGFzbQEAAAABBQFgAAF+AwIBAAoJAQcAQQAEQAsL",
    "if.19.wasm": "AGFzbQEAAAABBQFgAAF9AwIBAAoJAQcAQQAEQAsL",
    "if.2.wat": "KHR5cGUgJHNpZyAoZnVuYyAocGFyYW0gaTMyKSAocmVzdWx0IGkzMikpKShmdW5jIChpMzIuY29uc3QgMCkgIChpZiAocGFyYW0gaTMyKSAodHlwZSAkc2lnKSAocmVzdWx0IGkzMikgKGkzMi5jb25zdCAxKSAodGhlbikpKQ==",
    "if.20.wasm": "AGFzbQEAAAABBQFgAAF8AwIBAAoJAQcAQQAEQAsL",
    "if.21.wasm": "AGFzbQEAAAABBAFgAAADAgEACgsBCQBBAQRAQQELCw==",
    "if.22.wasm": "AGFzbQEAAAABBAFgAAADAgEACgsBCQBBAQRAQQELCw==",
    "if.23.wasm": "AGFzbQEAAAABBAFgAAADAgEACgwBCgBBAQRABUEBCws=",
    "if.24.wasm": "AGFzbQEAAAABBAFgAAADAgEACg4BDABBAQRAQQEFQQELCw==",
    "if.25.wasm": "AGFzbQEAAAABBAFgAAADAgEACg0BCwBBAQRAQQFBAgsL",
    "if.26.wasm": "AGFzbQEAAAABBAFgAAADAgEACg0BCwBBAQRAQQFBAgsL",
    "if.27.wasm": "AGFzbQEAAAABBAFgAAADAgEACg4BDABBAQRABUEBQQILCw==",
    "if.28.wasm": "AGFzbQEAAAABBAFgAAADAgEAChIBEABBAQRAQQFBAgVBAkEBCws=",
    "if.29.wasm": "AGFzbQEAAAABBQFgAAF/AwIBAAoMAQoAQQEEfwVBAAsL",
    "if.3.wat": "KHR5cGUgJHNpZyAoZnVuYyAocGFyYW0gaTMyKSAocmVzdWx0IGkzMikpKShmdW5jIChpMzIuY29uc3QgMCkgIChpZiAocGFyYW0gaTMyKSAocmVzdWx0IGkzMikgKHR5cGUgJHNpZykgKGkzMi5jb25zdCAxKSAodGhlbikpKQ==",
    "if.30.wasm": "AGFzbQEAAAABBQFgAAF/AwIBAAoLAQkAQQEEf0EACws=",
    "if.31.wasm": "AGFzbQEAAAABBQFgAAF/AwIBAAoJAQcAQQEEfwsL",
    "if.32.wasm": "AGFzbQEAAAABBgFgAAJ/fwMCAQAKDgEMAEEBBAAFQQBBAgsL",
    "if.33.wasm": "AGFzbQEAAAABBgFgAAJ/fwMCAQAKDQELAEEBBABBAEEBCws=",
    "if.34.wasm": "AGFzbQEAAAABBgFgAAJ/fwMCAQAKCQEHAEEBBAALCw==",
    "if.35.wasm": "AGFzbQEAAAABBQFgAAF/AwIBAAoLAQkAQQEEf0EBCws=",
    "if.36.wasm": "AGFzbQEAAAABBgFgAAJ/fwMCAQAKDQELAEEBBABBAUEBCws=",
    "if.37.wasm": "AGFzbQEAAAABBQFgAAF/AwIBAAoNAQsAQQEEfwEFQQALCw==",
    "if.38.wasm": "AGFzbQEAAAABBQFgAAF/AwIBAAoNAQsAQQEEf0EABQELCw==",
    "if.39.wasm": "AGFzbQEAAAABBQFgAAF/AwIBAAoMAQoAQQEEfwEFAQsL",
    "if.4.wat": "KHR5cGUgJHNpZyAoZnVuYyAocGFyYW0gaTMyKSAocmVzdWx0IGkzMikpKShmdW5jIChpMzIuY29uc3QgMCkgIChpZiAocmVzdWx0IGkzMikgKHR5cGUgJHNpZykgKHBhcmFtIGkzMikgKGkzMi5jb25zdCAxKSAodGhlbikpKQ==",
    "if.40.wasm": "AGFzbQEAAAABBgFgAAJ/fwMCAQAKDwENAEEBBAABBUEAQQALCw==",
    "if.41.wasm": "AGFzbQEAAAABBgFgAAJ/fwMCAQAKDwENAEEBBABBAEEABQELCw==",
    "if.42.wasm": "AGFzbQEAAAABBgFgAAJ/fwMCAQAKDAEKAEEBBAABBQELCw==",
    "if.43.wasm": "AGFzbQEAAAABBQFgAAF/AwIBAAoOAQwAQQEEf0IBBUEBCws=",
    "if.44.wasm": "AGFzbQEAAAABBQFgAAF/AwIBAAoOAQwAQQEEf0EBBUIBCws=",
    "if.45.wasm": "AGFzbQEAAAABBQFgAAF/AwIBAAoOAQwAQQEEf0IBBUIBCws=",
    "if.46.wasm": "AGFzbQEAAAABBgFgAAJ/fwMCAQAKEAEOAEEBBABBAQVBAUEBCws=",
    "if.47.wasm": "AGFzbQEAAAABBgFgAAJ/fwMCAQAKEAEOAEEBBABBAUEBBUEBCws=",
    "if.48.wasm": "AGFzbQEAAAABBgFgAAJ/fwMCAQAKDgEMAEEBBABBAQVBAQsL",
    "if.49.wasm": "AGFzbQEAAAABBgFgAAJ/fwMCAQAKEgEQAEEAQQEEAEEBBUEBQQELCw==",
    "if.5.wat": "KHR5cGUgJHNpZyAoZnVuYyAocGFyYW0gaTMyKSAocmVzdWx0IGkzMikpKShmdW5jIChpMzIuY29uc3QgMCkgIChpZiAocmVzdWx0IGkzMikgKHBhcmFtIGkzMikgKHR5cGUgJHNpZykgKGkzMi5jb25zdCAxKSAodGhlbikpKQ==",
    "if.50.wasm": "AGFzbQEAAAABBgFgAAJ/fwMCAQAKEgEQAEEAQQEEAEEBQQEFQQELCw==",
    "if.51.wasm": "AGFzbQEAAAABBgFgAAJ/fwMCAQAKEAEOAEEAQQEEAEEBBUEBCws=",
    "if.52.wasm": "AGFzbQEAAAABBQFgAAF/AwIBAAoQAQ4AQQEEf0EBQQEFQQELCw==",
    "if.53.wasm": "AGFzbQEAAAABBQFgAAF/AwIBAAoQAQ4AQQEEf0EBBUEBQQELCw==",
    "if.54.wasm": "AGFzbQEAAAABBQFgAAF/AwIBAAoSARAAQQEEf0EBQQEFQQFBAQsL",
    "if.55.wasm": "AGFzbQEAAAABBQFgAAF/AwIBAAoVARMAQQEEf0IBBUQAAAAAAADwPwsL",
    "if.56.wasm": "AGFzbQEAAAABBgFgAAJ/fwMCAQAKEgEQAEEBBABBAUEBQQEFQQELCw==",
    "if.57.wasm": "AGFzbQEAAAABBQFgAAF/AwIBAAoQAQ4AQQAEfgAAABsFQgALCw==",
    "if.58.wasm": "AGFzbQEAAAABBQFgAAF/AwIBAAoQAQ4AQQEEfkIABQAAABsLCw==",
    "if.59.wasm": "AGFzbQEAAAABBQFgAAF/AwIBAAoSARAAQQEEfgAAABsFAAAAGwsL",
    "if.6.wat": "KGZ1bmMgKGkzMi5jb25zdCAwKSAoaWYgKHJlc3VsdCBpMzIpIChwYXJhbSBpMzIpIChpMzIuY29uc3QgMSkgKHRoZW4pKSk=",
    "if.60.wasm": "AGFzbQEAAAABBQFgAAF/AwIBAAoOAQwAQQEEfwwABUEBCws=",
    "if.61.wasm": "AGFzbQEAAAABBQFgAAF/AwIBAAoOAQwAQQEEf0EBBQwACws=",
    "if.62.wasm": "AGFzbQEAAAABBgFgAAJ/fwMCAQAKEAEOAEEBBAAMAAVBAUEBCws=",
    "if.63.wasm": "AGFzbQEAAAABBgFgAAJ/fwMCAQAKEAEOAEEBBABBAUEBBQwACws=",
    "if.64.wasm": "AGFzbQEAAAABBQFgAAF/AwIBAAoQAQ4AQQEEfwwAQQEFQQELCw==",
    "if.65.wasm": "AGFzbQEAAAABBQFgAAF/AwIBAAoQAQ4AQQEEf0EBBQwAQQELCw==",
    "if.66.wasm": "AGFzbQEAAAABBgFgAAJ/fwMCAQAKFAESAEEBBAAMAEEBQQEFQQFBAQsL",
    "if.67.wasm": "AGFzbQEAAAABBgFgAAJ/fwMCAQAKFAESAEEBBABBAUEBBQwAQQFBAQsL",
    "if.68.wasm": "AGFzbQEAAAABBQFgAAF/AwIBAAoRAQ8AQQEEfwEMAEEBBUEBCws=",
    "if.69.wasm": "AGFzbQEAAAABBQFgAAF/AwIBAAoRAQ8AQQEEf0EBBQEMAEEBCws=",
    "if.7.wat": "KGZ1bmMgKGkzMi5jb25zdCAwKSAoaTMyLmNvbnN0IDEpICAoaWYgKHBhcmFtICR4IGkzMikgKHRoZW4gKGRyb3ApKSAoZWxzZSAoZHJvcCkpKSk=",
    "if.70.wasm": "AGFzbQEAAAABBgFgAAJ/fwMCAQAKFQETAEEBBAABDABBAUEBBUEBQQELCw==",
    "if.71.wasm": "AGFzbQEAAAABBgFgAAJ/fwMCAQAKFQETAEEBBABBAUEBBQEMAEEBQQELCw==",
    "if.72.wasm": "AGFzbQEAAAABBQFgAAF/AwIBAAoSARAAQQEEf0IBDABBAQVBAQsL",
    "if.73.wasm": "AGFzbQEAAAABBQFgAAF/AwIBAAoSARAAQQEEf0EBBUIBDABBAQsL",
    "if.74.wasm": "AGFzbQEAAAABBgFgAAJ/fwMCAQAKFgEUAEEBBABCAQwAQQFBAQVBAUEBCws=",
    "if.75.wasm": "AGFzbQEAAAABBgFgAAJ/fwMCAQAKFgEUAEEBBABBAUEBBUIBDABBAUEBCws=",
    "if.76.wasm": "AGFzbQEAAAABBgFgAAJ/fwMCAQAKFAESAEEBQQEEAEIBDABBAQVBAQsL",
    "if.77.wasm": "AGFzbQEAAAABBgFgAAJ/fwMCAQAKFAESAEEBQQEEAEEBBUIBDABBAQsL",
    "if.78.wasm": "AGFzbQEAAAABBAFgAAADAgEACgcBBQAEQAsL",
    "if.79.wasm": "AGFzbQEAAAABBAFgAAADAgEACgwBCgBBAAJABEALCws=",
    "if.8.wat": "KHR5cGUgJHNpZyAoZnVuYykpKGZ1bmMgKGkzMi5jb25zdCAxKSAgKGlmICh0eXBlICRzaWcpIChyZXN1bHQgaTMyKSAodGhlbiAoaTMyLmNvbnN0IDApKSAoZWxzZSAoaTMyLmNvbnN0IDIpKSkgICh1bnJlYWNoYWJsZSkp",
    "if.80.wasm": "AGFzbQEAAAABBAFgAAADAgEACgwBCgBBAANABEALCws=",
    "if.81.wasm": "AGFzbQEAAAABBAFgAAADAgEACg4BDABBAEEABEAEQAsLCw==",
    "if.82.wasm": "AGFzbQEAAAABBAFgAAADAgEAChQBEgBBAEEABH9BAAUEQAtBAAsaCw==",
    "if.83.wasm": "AGFzbQEAAAABBAFgAAADAgEACg8BDQBBAAJABEALDAAaCws=",
    "if.84.wasm": "AGFzbQEAAAABBAFgAAADAgEAChEBDwBBAAJABEALQQENABoLCw==",
    "if.85.wasm": "AGFzbQEAAAABBAFgAAADAgEAChABDgBBAAJABEALDgAAGgsL",
    "if.86.wasm": "AGFzbQEAAAABBAFgAAADAgEACgkBBwAEQAsPGgs=",
    "if.87.wasm": "AGFzbQEAAAABBAFgAAADAgEACg0BCwAEQAtBAUECGxoL",
    "if.88.wasm": "AGFzbQEAAAABCQJgAABgAX8BfwMDAgABCg8CCAAEQAsQARoLBAAgAAs=",
    "if.89.wasm": "AGFzbQEAAAABCQJgAX8Bf2AAAAMDAgABBAUBcAEBAQkHAQBBAAsBAAoVAgQAIAALDgACfwRAC0EAEQAAGgsL",
    "if.9.wat": "KHR5cGUgJHNpZyAoZnVuYyAocGFyYW0gaTMyKSAocmVzdWx0IGkzMikpKShmdW5jIChpMzIuY29uc3QgMSkgIChpZiAodHlwZSAkc2lnKSAocmVzdWx0IGkzMikgKHRoZW4gKGkzMi5jb25zdCAwKSkgKGVsc2UgKGkzMi5jb25zdCAyKSkpICAodW5yZWFjaGFibGUpKQ==",
    "if.90.wasm": "AGFzbQEAAAABBAFgAAADAgEACg4BDAEBfwRACyEAIAAaCw==",
    "if.91.wasm": "AGFzbQEAAAABBAFgAAADAgEACgwBCgEBfwRACyIAGgs=",
    "if.92.wasm": "AGFzbQEAAAABBAFgAAADAgEABgYBfwFBAAsKDAEKAARACyQAIwAaCw==",
    "if.93.wasm": "AGFzbQEAAAABBAFgAAADAgEABQMBAAAKCgEIAARAC0AAGgs=",
    "if.94.wasm": "AGFzbQEAAAABBAFgAAADAgEABQMBAAAKCwEJAARACygCABoL",
    "if.95.wasm": "AGFzbQEAAAABBAFgAAADAgEABQMBAAEKDAEKAARAC0EBNgIACw==",
    "if.96.wasm": "AGFzbQEAAAABCAJgAABgAX8AAwIBAAoKAQgAQQEEARoLCw==",
    "if.97.wasm": "AGFzbQEAAAABCQJgAABgAn98AAMCAQAKCwEJAEEBBAEaGgsL",
    "if.98.wasm": "AGFzbQEAAAABCAJgAABgAX8AAwIBAAoPAQ0AQwAAAABBAQQBGgsL",
    "if.99.wasm": "AGFzbQEAAAABCQJgAABgAn1/AAMCAQAKEAEOAEMAAAAAQQEEARoaCws="
  },
  "spec": {"source_filename": "/workspace/wasm-spec/test/core/if.wast",
 "commands": [
  {"type": "module", "line": 3, "filename": "if.0.wasm"}, 
  {"type": "assert_return", "line": 537, "action": {"type": "invoke", "field": "empty", "args": [{"type": "i32", "value": "0"}]}, "expected": []}, 
  {"type": "assert_return", "line": 538, "action": {"type": "invoke", "field": "empty", "args": [{"type": "i32", "value": "1"}]}, "expected": []}, 
  {"type": "assert_return", "line": 539, "action": {"type": "invoke", "field": "empty", "args": [{"type": "i32", "value": "100"}]}, "expected": []}, 
  {"type": "assert_return", "line": 540, "action": {"type": "invoke", "field": "empty", "args": [{"type": "i32", "value": "4294967294"}]}, "expected": []}, 
  {"type": "assert_return", "line": 542, "action": {"type": "invoke", "field": "singular", "args": [{"type": "i32", "value": "0"}]}, "expected": [{"type": "i32", "value": "8"}]}, 
  {"type": "assert_return", "line": 543, "action": {"type": "invoke", "field": "singular", "args": [{"type": "i32", "value": "1"}]}, "expected": [{"type": "i32", "value": "7"}]}, 
  {"type": "assert_return", "line": 544, "action": {"type": "invoke", "field": "singular", "args": [{"type": "i32", "value": "10"}]}, "expected": [{"type": "i32", "value": "7"}]}, 
  {"type": "assert_return", "line": 545, "action": {"type": "invoke", "field": "singular", "args": [{"type": "i32", "value": "4294967286"}]}, "expected": [{"type": "i32", "value": "7"}]}, 
  {"type": "assert_return", "line": 547, "action": {"type": "invoke", "field": "multi", "args": [{"type": "i32", "value": "0"}]}, "expected": [{"type": "i32", "value": "9"}, {"type": "i32", "value": "4294967295"}]}, 
  {"type": "assert_return", "line": 548, "action": {"type": "invoke", "field": "multi", "args": [{"type": "i32", "value": "1"}]}, "expected": [{"type": "i32", "value": "8"}, {"type": "i32", "value": "1"}]}, 
  {"type": "assert_return", "line": 549, "action": {"type": "invoke", "field": "multi", "args": [{"type": "i32", "value": "13"}]}, "expected": [{"type": "i32", "value": "8"}, {"type": "i32", "value": "1"}]}, 
  {"type": "assert_return", "line": 550, "action": {"type": "invoke", "field": "multi", "args": [{"type": "i32", "value": "4294967291"}]}, "expected": [{"type": "i32", "value": "8"}, {"type": "i32", "value": "1"}]}, 
  {"type": "assert_return", "line": 552, "action": {"type": "invoke", "field": "nested", "args": [{"type": "i32", "value": "0"}, {"type": "i32", "value": "0"}]}, "expected": [{"type": "i32", "value": "11"}]}, 
  {"type": "assert_return", "line": 553, "action": {"type": "invoke", "field": "nested", "args": [{"type": "i32", "value": "1"}, {"type": "i32", "value": "0"}]}, "expected": [{"type": "i32", "value": "10"}]}, 
  {"type": "assert_return", "line": 554, "action": {"type": "invoke", "field": "nested", "args": [{"type": "i32", "value": "0"}, {"type": "i32", "value": "1"}]}, "expected": [{"type": "i32", "value": "10"}]}, 
  {"type": "assert_return", "line": 555, "action": {"type": "invoke", "field": "nested", "args": [{"type": "i32", "value": "3"}, {"type": "i32", "value": "2"}]}, "expected": [{"type": "i32", "value": "9"}]}, 
  {"type": "assert_return", "line": 556, "action": {"type": "invoke", "field": "nested", "args": [{"type": "i32", "value": "0"}, {"type": "i32", "value": "4294967196"}]}, "expected": [{"type": "i32", "value": "10"}]}, 
  {"type": "assert_return", "line": 557, "action": {"type": "invoke", "field": "nested", "args": [{"type": "i32", "value": "10"}, {"type": "i32", "value": "10"}]}, "expected": [{"type": "i32", "value": "9"}]}, 
  {"type": "assert_return", "line": 558, "action": {"type": "invoke", "field": "nested", "args": [{"type": "i32", "value": "0"}, {"type": "i32", "value": "4294967295"}]}, "expected": [{"type": "i32", "value": "10"}]}, 
  {"type": "assert_return", "line": 559, "action": {"type": "invoke", "field": "nested", "args": [{"type": "i32", "value": "4294967185"}, {"type": "i32", "value": "4294967294"}]}, "expected": [{"type": "i32", "value": "9"}]}, 
  {"type": "assert_return", "line": 561, "action": {"type": "invoke", "field": "as-select-first", "args": [{"type": "i32", "value": "0"}]}, "expected": [{"type": "i32", "value": "0"}]}, 
  {"type": "assert_return", "line": 562, "action": {"type": "invoke", "field": "as-select-first", "args": [{"type": "i32", "value": "1"}]}, "expected": [{"type": "i32", "value": "1"}]}, 
  {"type": "assert_return", "line": 563, "action": {"type": "invoke", "field": "as-select-mid", "args": [{"type": "i32", "value": "0"}]}, "expected": [{"type": "i32", "value": "2"}]}, 
  {"type": "assert_return", "line": 564, "action": {"type": "invoke", "field": "as-select-mid", "args": [{"type": "i32", "value": "1"}]}, "expected": [{"type": "i32", "value": "2"}]}, 
  {"type": "assert_return", "line": 565, "action": {"type": "invoke", "field": "as-select-last", "args": [{"type": "i32", "value": "0"}]}, "expected": [{"type": "i32", "value": "3"}]}, 
  {"type": "assert_return", "line": 566, "action": {"type": "invoke", "field": "as-select-last", "args": [{"type": "i32", "value": "1"}]}, "expected": [{"type": "i32", "value": "2"}]}, 
  {"type": "assert_return", "line": 568, "action": {"type": "invoke", "field": "as-loop-first", "args": [{"type": "i32", "value": "0"}]}, "expected": [{"type": "i32", "value": "0"}]}, 
  {"type": "assert_return", "line": 569, "action": {"type": "invoke", "field": "as-loop-first", "args": [{"type": "i32", "value": "1"}]}, "expected": [{"type": "i32", "value": "1"}]}, 
  {"type": "assert_return", "line": 570, "action": {"type": "invoke", "field": "as-loop-mid", "args": [{"type": "i32", "value": "0"}]}, "expected": [{"type": "i32", "value": "0"}]}, 
  {"type": "assert_return", "line": 571, "action": {"type": "invoke", "field": "as-loop-mid", "args": [{"type": "i32", "value": "1"}]}, "expected": [{"type": "i32", "value": "1"}]}, 
  {"type": "assert_return", "line": 572, "action": {"type": "invoke", "field": "as-loop-last", "args": [{"type": "i32", "value": "0"}]}, "expected": [{"type": "i32", "value": "0"}]}, 
  {"type": "assert_return", "line": 573, "action": {"type": "invoke", "field": "as-loop-last", "args": [{"type": "i32", "value": "1"}]}, "expected": [{"type": "i32", "value": "1"}]}, 
  {"type": "assert_return", "line": 575, "action": {"type": "invoke", "field": "as-if-condition", "args": [{"type": "i32", "value": "0"}]}, "expected": [{"type": "i32", "value": "3"}]}, 
  {"type": "assert_return", "line": 576, "action": {"type": "invoke", "field": "as-if-condition", "args": [{"type": "i32", "value": "1"}]}, "expected": [{"type": "i32", "value": "2"}]}, 
  {"type": "assert_return", "line": 578, "action": {"type": "invoke", "field": "as-br_if-first", "args": [{"type": "i32", "value": "0"}]}, "expected": [{"type": "i32", "value": "0"}]}, 
  {"type": "assert_return", "line": 579, "action": {"type": "invoke", "field": "as-br_if-first", "args": [{"type": "i32", "value": "1"}]}, "expected": [{"type": "i32", "value": "1"}]}, 
  {"type": "assert_return", "line": 580, "action": {"type": "invoke", "field": "as-br_if-last", "args": [{"type": "i32", "value": "0"}]}, "expected": [{"type": "i32", "value": "3"}]}, 
  {"type": "assert_return", "line": 581, "action": {"type": "invoke", "field": "as-br_if-last", "args": [{"type": "i32", "value": "1"}]}, "expected": [{"type": "i32", "value": "2"}]}, 
  {"type": "assert_return", "line": 583, "action": {"type": "invoke", "field": "as-br_table-first", "args": [{"type": "i32", "value": "0"}]}, "expected": [{"type": "i32", "value": "0"}]}, 
  {"type": "assert_return", "line": 584, "action": {"type": "invoke", "field": "as-br_table-first", "args": [{"type": "i32", "value": "1"}]}, "expected": [{"type": "i32", "value": "1"}]}, 
  {"type": "assert_return", "line": 585, "action": {"type": "invoke", "field": "as-br_table-last", "args": [{"type": "i32", "value": "0"}]}, "expected": [{"type": "i32", "value": "2"}]}, 
  {"type": "assert_return", "line": 586, "action": {"type": "invoke", "field": "as-br_table-last", "args": [{"type": "i32", "value": "1"}]}, "expected": [{"type": "i32", "value": "2"}]}, 
  {"type": "assert_return", "line": 588, "action": {"type": "invoke", "field": "as-call_indirect-first", "args": [{"type": "i32", "value": "0"}]}, "expected": [{"type": "i32", "value": "0"}]}, 
  {"type": "assert_return", "line": 589, "action": {"type": "invoke", "field": "as-call_indirect-first", "args": [{"type": "i32", "value": "1"}]}, "expected": [{"type": "i32", "value": "1"}]}, 
  {"type": "assert_return", "line": 590, "action": {"type": "invoke", "field": "as-call_indirect-mid", "args": [{"type": "i32", "value": "0"}]}, "expected": [{"type": "i32", "value": "2"}]}, 
  {"type": "assert_return", "line": 591, "action": {"type": "invoke", "field": "as-call_indirect-mid", "args": [{"type": "i32", "value": "1"}]}, "expected": [{"type": "i32", "value": "2"}]}, 
  {"type": "assert_return", "line": 592, "action": {"type": "invoke", "field": "as-call_indirect-last", "args": [{"type": "i32", "value": "0"}]}, "expected": [{"type": "i32", "value": "2"}]}, 
  {"type": "assert_trap", "line": 593, "action": {"type": "invoke", "field": "as-call_indirect-last", "args": [{"type": "i32", "value": "1"}]}, "text": "undefined element", "expected": [{"type": "i32"}]}, 
  {"type": "assert_return", "line": 595, "action": {"type": "invoke", "field": "as-store-first", "args": [{"type": "i32", "value": "0"}]}, "expected": []}, 
  {"type": "assert_return", "line": 596, "action": {"type": "invoke", "field": "as-store-first", "args": [{"type": "i32", "value": "1"}]}, "expected": []}, 
  {"type": "assert_return", "line": 597, "action": {"type": "invoke", "field": "as-store-last", "args": [{"type": "i32", "value": "0"}]}, "expected": []}, 
  {"type": "assert_return", "line": 598, "action": {"type": "invoke", "field": "as-store-last", "args": [{"type": "i32", "value": "1"}]}, "expected": []}, 
  {"type": "assert_return", "line": 600, "action": {"type": "invoke", "field": "as-memory.grow-value", "args": [{"type": "i32", "value": "0"}]}, "expected": [{"type": "i32", "value": "1"}]}, 
  {"type": "assert_return", "line": 601, "action": {"type": "invoke", "field": "as-memory.grow-value", "args": [{"type": "i32", "value": "1"}]}, "expected": [{"type": "i32", "value": "1"}]}, 
  {"type": "assert_return", "line": 603, "action": {"type": "invoke", "field": "as-call-value", "args": [{"type": "i32", "value": "0"}]}, "expected": [{"type": "i32", "value": "0"}]}, 
  {"type": "assert_return", "line": 604, "action": {"type": "invoke", "field": "as-call-value", "args": [{"type": "i32", "value": "1"}]}, "expected": [{"type": "i32", "value": "1"}]}, 
  {"type": "assert_return", "line": 606, "action": {"type": "invoke", "field": "as-return-value", "args": [{"type": "i32", "value": "0"}]}, "expected": [{"type": "i32", "value": "0"}]}, 
  {"type": "assert_return", "line": 607, "action": {"type": "invoke", "field": "as-return-value", "args": [{"type": "i32", "value": "1"}]}, "expected": [{"type": "i32", "value": "1"}]}, 
  {"type": "assert_return", "line": 609, "action": {"type": "invoke", "field": "as-drop-operand", "args": [{"type": "i32", "value": "0"}]}, "expected": []}, 
  {"type": "assert_return", "line": 610, "action": {"type": "invoke", "field": "as-drop-operand", "args": [{"type": "i32", "value": "1"}]}, "expected": []}, 
  {"type": "assert_return", "line": 612, "action": {"type": "invoke", "field": "as-br-value", "args": [{"type": "i32", "value": "0"}]}, "expected": [{"type": "i32", "value": "0"}]}, 
  {"type": "assert_return", "line": 613, "action": {"type": "invoke", "field": "as-br-value", "args": [{"type": "i32", "value": "1"}]}, "expected": [{"type": "i32", "value": "1"}]}, 
  {"type": "assert_return", "line": 615, "action": {"type": "invoke", "field": "as-local.set-value", "args": [{"type": "i32", "value": "0"}]}, "expected": [{"type": "i32", "value": "0"}]}, 
  {"type": "assert_return", "line": 616, "action": {"type": "invoke", "field": "as-local.set-value", "args": [{"type": "i32", "value": "1"}]}, "expected": [{"type": "i32", "value": "1"}]}, 
  {"type": "assert_return", "line": 618, "action": {"type": "invoke", "field": "as-local.tee-value", "args": [{"type": "i32", "value": "0"}]}, "expected": [{"type": "i32", "value": "0"}]}, 
  {"type": "assert_return", "line": 619, "action": {"type": "invoke", "field": "as-local.tee-value", "args": [{"type": "i32", "value": "1"}]}, "expected": [{"type": "i32", "value": "1"}]}, 
  {"type": "assert_return", "line": 621, "action": {"type": "invoke", "field": "as-global.set-value", "args": [{"type": "i32", "value": "0"}]}, "expected": [{"type": "i32", "value": "0"}]}, 
  {"type": "assert_return", "line": 622, "action": {"type": "invoke", "field": "as-global.set-value", "args": [{"type": "i32", "value": "1"}]}, "expected": [{"type": "i32", "value": "1"}]}, 
  {"type": "assert_return", "line": 624, "action": {"type": "invoke", "field": "as-load-operand", "args": [{"type": "i32", "value": "0"}]}, "expected": [{"type": "i32", "value": "0"}]}, 
  {"type": "assert_return", "line": 625, "action": {"type": "invoke", "field": "as-load-operand", "args": [{"type": "i32", "value": "1"}]}, "expected": [{"type": "i32", "value": "0"}]}, 
  {"type": "assert_return", "line": 627, "action": {"type": "invoke", "field": "as-unary-operand", "args": [{"type": "i32", "value": "0"}]}, "expected": [{"type": "i32", "value": "0"}]}, 
  {"type": "assert_return", "line": 628, "action": {"type": "invoke", "field": "as-unary-operand", "args": [{"type": "i32", "value": "1"}]}, "expected": [{"type": "i32", "value": "0"}]}, 
  {"type": "assert_return", "line": 629, "action": {"type": "invoke", "field": "as-unary-operand", "args": [{"type": "i32", "value": "4294967295"}]}, "expected": [{"type": "i32", "value": "0"}]}, 
  {"type": "assert_return", "line": 631, "action": {"type": "invoke", "field": "as-binary-operand", "args": [{"type": "i32", "value": "0"}, {"type": "i32", "value": "0"}]}, "expected": [{"type": "i32", "value": "15"}]}, 
  {"type": "assert_return", "line": 632, "action": {"type": "invoke", "field": "as-binary-operand", "args": [{"type": "i32", "value": "0"}, {"type": "i32", "value": "1"}]}, "expected": [{"type": "i32", "value": "4294967284"}]}, 
  {"type": "assert_return", "line": 633, "action": {"type": "invoke", "field": "as-binary-operand", "args": [{"type": "i32", "value": "1"}, {"type": "i32", "value": "0"}]}, "expected": [{"type": "i32", "value": "4294967281"}]}, 
  {"type": "assert_return", "line": 634, "action": {"type": "invoke", "field": "as-binary-operand", "args": [{"type": "i32", "value": "1"}, {"type": "i32", "value": "1"}]}, "expected": [{"type": "i32", "value": "12"}]}, 
  {"type": "assert_return", "line": 636, "action": {"type": "invoke", "field": "as-test-operand", "args": [{"type": "i32", "value": "0"}]}, "expected": [{"type": "i32", "value": "1"}]}, 
  {"type": "assert_return", "line": 637, "action": {"type": "invoke", "field": "as-test-operand", "args": [{"type": "i32", "value": "1"}]}, "expected": [{"type": "i32", "value": "0"}]}, 
  {"type": "assert_return", "line": 639, "action": {"type": "invoke", "field": "as-compare-operand", "args": [{"type": "i32", "value": "0"}, {"type": "i32", "value": "0"}]}, "expected": [{"type": "i32", "value": "1"}]}, 
  {"type": "assert_return", "line": 640, "action": {"type": "invoke", "field": "as-compare-operand", "args": [{"type": "i32", "value": "0"}, {"type": "i32", "value": "1"}]}, "expected": [{"type": "i32", "value": "0"}]}, 
  {"type": "assert_return", "line": 641, "action": {"type": "invoke", "field": "as-compare-operand", "args": [{"type": "i32", "value": "1"}, {"type": "i32", "value": "0"}]}, "expected": [{"type": "i32", "value": "1"}]}, 
  {"type": "assert_return", "line": 642, "action": {"type": "invoke", "field": "as-compare-operand", "args": [{"type": "i32", "value": "1"}, {"type": "i32", "value": "1"}]}, "expected": [{"type": "i32", "value": "0"}]}, 
  {"type": "assert_return", "line": 644, "action": {"type": "invoke", "field": "as-binary-operands", "args": [{"type": "i32", "value": "0"}]}, "expected": [{"type": "i32", "value": "4294967284"}]}, 
  {"type": "assert_return", "line": 645, "action": {"type": "invoke", "field": "as-binary-operands", "args": [{"type": "i32", "value": "1"}]}, "expected": [{"type": "i32", "value": "12"}]}, 
  {"type": "assert_return", "line": 647, "action": {"type": "invoke", "field": "as-compare-operands", "args": [{"type": "i32", "value": "0"}]}, "expected": [{"type": "i32", "value": "1"}]}, 
  {"type": "assert_return", "line": 648, "action": {"type": "invoke", "field": "as-compare-operands", "args": [{"type": "i32", "value": "1"}]}, "expected": [{"type": "i32", "value": "0"}]}, 
  {"type": "assert_return", "line": 650, "action": {"type": "invoke", "field": "as-mixed-operands", "args": [{"type": "i32", "value": "0"}]}, "expected": [{"type": "i32", "value": "4294967293"}]}, 
  {"type": "assert_return", "line": 651, "action": {"type": "invoke", "field": "as-mixed-operands", "args": [{"type": "i32", "value": "1"}]}, "expected": [{"type": "i32", "value": "27"}]}, 
  {"type": "assert_return", "line": 653, "action": {"type": "invoke", "field": "break-bare", "args": []}, "expected": [{"type": "i32", "value": "19"}]}, 
  {"type": "assert_return", "line": 654, "action": {"type": "invoke", "field": "break-value", "args": [{"type": "i32", "value": "1"}]}, "expected": [{"type": "i32", "value": "18"}]}, 
  {"type": "assert_return", "line": 655, "action": {"type": "invoke", "field": "break-value", "args": [{"type": "i32", "value": "0"}]}, "expected": [{"type": "i32", "value": "21"}]}, 
  {"type": "assert_return", "line": 656, "action": {"type": "invoke", "field": "break-multi-value", "args": [{"type": "i32", "value": "0"}]}, "expected": [{"type": "i32", "value": "4294967278"}, {"type": "i32", "value": "18"}, {"type": "i64", "value": "18446744073709551598"}]}, 
  {"type": "assert_return", "line": 659, "action": {"type": "invoke", "field": "break-multi-value", "args": [{"type": "i32", "value": "1"}]}, "expected": [{"type": "i32", "value": "18"}, {"type": "i32", "value": "4294967278"}, {"type": "i64", "value": "18"}]}, 
  {"type": "assert_return", "line": 663, "action": {"type": "invoke", "field": "param", "args": [{"type": "i32", "value": "0"}]}, "expected": [{"type": "i32", "value": "4294967295"}]}, 
  {"type": "assert_return", "line": 664, "action": {"type": "invoke", "field": "param", "args": [{"type": "i32", "value": "1"}]}, "expected": [{"type": "i32", "value": "3"}]}, 
  {"type": "assert_return", "line": 665, "action": {"type": "invoke", "field": "params", "args": [{"type": "i32", "value": "0"}]}, "expected": [{"type": "i32", "value": "4294967295"}]}, 
  {"type": "assert_return", "line": 666, "action": {"type": "invoke", "field": "params", "args": [{"type": "i32", "value": "1"}]}, "expected": [{"type": "i32", "value": "3"}]}, 
  {"type": "assert_return", "line": 667, "action": {"type": "invoke", "field": "params-id", "args": [{"type": "i32", "value": "0"}]}, "expected": [{"type": "i32", "value": "3"}]}, 
  {"type": "assert_return", "line": 668, "action": {"type": "invoke", "field": "params-id", "args": [{"type": "i32", "value": "1"}]}, "expected": [{"type": "i32", "value": "3"}]}, 
  {"type": "assert_return", "line": 669, "action": {"type": "invoke", "field": "param-break", "args": [{"type": "i32", "value": "0"}]}, "expected": [{"type": "i32", "value": "4294967295"}]}, 
  {"type": "assert_return", "line": 670, "action": {"type": "invoke", "field": "param-break", "args": [{"type": "i32", "value": "1"}]}, "expected": [{"type": "i32", "value": "3"}]}, 
  {"type": "assert_return", "line": 671, "action": {"type": "invoke", "field": "params-break", "args": [{"type": "i32", "value": "0"}]}, "expected": [{"type": "i32", "value": "4294967295"}]}, 
  {"type": "assert_return", "line": 672, "action": {"type": "invoke", "field": "params-break", "args": [{"type": "i32", "value": "1"}]}, "expected": [{"type": "i32", "value": "3"}]}, 
  {"type": "assert_return", "line": 673, "action": {"type": "invoke", "field": "params-id-break", "args": [{"type": "i32", "value": "0"}]}, "expected": [{"type": "i32", "value": "3"}]}, 
  {"type": "assert_return", "line": 674, "action": {"type": "invoke", "field": "params-id-break", "args": [{"type": "i32", "value": "1"}]}, "expected": [{"type": "i32", "value": "3"}]}, 
  {"type": "assert_return", "line": 676, "action": {"type": "invoke", "field": "effects", "args": [{"type": "i32", "value": "1"}]}, "expected": [{"type": "i32", "value": "4294967282"}]}, 
  {"type": "assert_return", "line": 677, "action": {"type": "invoke", "field": "effects", "args": [{"type": "i32", "value": "0"}]}, "expected": [{"type": "i32", "value": "4294967290"}]}, 
  {"type": "assert_return", "line": 680, "action": {"type": "invoke", "field": "add64_u_with_carry", "args": [{"type": "i64", "value": "0"}, {"type": "i64", "value": "0"}, {"type": "i32", "value": "0"}]}, "expected": [{"type": "i64", "value": "0"}, {"type": "i32", "value": "0"}]}, 
  {"type": "assert_return", "line": 684, "action": {"type": "invoke", "field": "add64_u_with_carry", "args": [{"type": "i64", "value": "100"}, {"type": "i64", "value": "124"}, {"type": "i32", "value": "0"}]}, "expected": [{"type": "i64", "value": "224"}, {"type": "i32", "value": "0"}]}, 
  {"type": "assert_return", "line": 688, "action": {"type": "invoke", "field": "add64_u_with_carry", "args": [{"type": "i64", "value": "18446744073709551615"}, {"type": "i64", "value": "0"}, {"type": "i32", "value": "0"}]}, "expected": [{"type": "i64", "value": "18446744073709551615"}, {"type": "i32", "value": "0"}]}, 
  {"type": "assert_return", "line": 692, "action": {"type": "invoke", "field": "add64_u_with_carry", "args": [{"type": "i64", "value": "18446744073709551615"}, {"type": "i64", "value": "1"}, {"type": "i32", "value": "0"}]}, "expected": [{"type": "i64", "value": "0"}, {"type": "i32", "value": "1"}]}, 
  {"type": "assert_return", "line": 696, "action": {"type": "invoke", "field": "add64_u_with_carry", "args": [{"type": "i64", "value": "18446744073709551615"}, {"type": "i64", "value": "18446744073709551615"}, {"type": "i32", "value": "0"}]}, "expected": [{"type": "i64", "value": "18446744073709551614"}, {"type": "i32", "value": "1"}]}, 
  {"type": "assert_return", "line": 700, "action": {"type": "invoke", "field": "add64_u_with_carry", "args": [{"type": "i64", "value": "18446744073709551615"}, {"type": "i64", "value": "0"}, {"type": "i32", "value": "1"}]}, "expected": [{"type": "i64", "value": "0"}, {"type": "i32", "value": "1"}]}, 
  {"type": "assert_return", "line": 704, "action": {"type": "invoke", "field": "add64_u_with_carry", "args": [{"type": "i64", "value": "18446744073709551615"}, {"type": "i64", "value": "1"}, {"type": "i32", "value": "1"}]}, "expected": [{"type": "i64", "value": "1"}, {"type": "i32", "value": "1"}]}, 
  {"type": "assert_return", "line": 708, "action": {"type": "invoke", "field": "add64_u_with_carry", "args": [{"type": "i64", "value": "9223372036854775808"}, {"type": "i64", "value": "9223372036854775808"}, {"type": "i32", "value": "0"}]}, "expected": [{"type": "i64", "value": "0"}, {"type": "i32", "value": "1"}]}, 
  {"type": "assert_return", "line": 713, "action": {"type": "invoke", "field": "add64_u_saturated", "args": [{"type": "i64", "value": "0"}, {"type": "i64", "value": "0"}]}, "expected": [{"type": "i64", "value": "0"}]}, 
  {"type": "assert_return", "line": 716, "action": {"type": "invoke", "field": "add64_u_saturated", "args": [{"type": "i64", "value": "1230"}, {"type": "i64", "value": "23"}]}, "expected": [{"type": "i64", "value": "1253"}]}, 
  {"type": "assert_return", "line": 719, "action": {"type": "invoke", "field": "add64_u_saturated", "args": [{"type": "i64", "value": "18446744073709551615"}, {"type": "i64", "value": "0"}]}, "expected": [{"type": "i64", "value": "18446744073709551615"}]}, 
  {"type": "assert_return", "line": 722, "action": {"type": "invoke", "field": "add64_u_saturated", "args": [{"type": "i64", "value": "18446744073709551615"}, {"type": "i64", "value": "1"}]}, "expected": [{"type": "i64", "value": "18446744073709551615"}]}, 
  {"type": "assert_return", "line": 725, "action": {"type": "invoke", "field": "add64_u_saturated", "args": [{"type": "i64", "value": "18446744073709551615"}, {"type": "i64", "value": "18446744073709551615"}]}, "expected": [{"type": "i64", "value": "18446744073709551615"}]}, 
  {"type": "assert_return", "line": 728, "action": {"type": "invoke", "field": "add64_u_saturated", "args": [{"type": "i64", "value": "9223372036854775808"}, {"type": "i64", "value": "9223372036854775808"}]}, "expected": [{"type": "i64", "value": "18446744073709551615"}]}, 
  {"type": "assert_return", "line": 731, "action": {"type": "invoke", "field": "type-use", "args": []}, "expected": []}, 
  {"type": "assert_return", "line": 733, "action": {"type": "invoke", "field": "atypical-condition", "args": []}, "expected": []}, 
  {"type": "assert_malformed", "line": 736, "filename": "if.1.wat", "text": "unexpected token", "module_type": "text"}, 
  {"type": "assert_malformed", "line": 745, "filename": "if.2.wat", "text": "unexpected token", "module_type": "text"}, 
  {"type": "assert_malformed", "line": 754, "filename": "if.3.wat", "text": "unexpected token", "module_type": "text"}, 
  {"type": "assert_malformed", "line": 763, "filename": "if.4.wat", "text": "unexpected token", "module_type": "text"}, 
  {"type": "assert_malformed", "line": 772, "filename": "if.5.wat", "text": "unexpected token", "module_type": "text"}, 
  {"type": "assert_malformed", "line": 781, "filename": "if.6.wat", "text": "unexpected token", "module_type": "text"}, 
  {"type": "assert_malformed", "line": 788, "filename": "if.7.wat", "text": "unexpected token", "module_type": "text"}, 
  {"type": "assert_malformed", "line": 796, "filename": "if.8.wat", "text": "inline function type", "module_type": "text"}, 
  {"type": "assert_malformed", "line": 806, "filename": "if.9.wat", "text": "inline function type", "module_type": "text"}, 
  {"type": "assert_malformed", "line": 816, "filename": "if.10.wat", "text": "inline function type", "module_type": "text"}, 
  {"type": "assert_malformed", "line": 826, "filename": "if.11.wat", "text": "inline function type", "module_type": "text"}, 
  {"type": "assert_invalid", "line": 836, "filename": "if.12.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 844, "filename": "if.13.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 848, "filename": "if.14.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 852, "filename": "if.15.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 856, "filename": "if.16.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 861, "filename": "if.17.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 865, "filename": "if.18.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 869, "filename": "if.19.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 873, "filename": "if.20.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 878, "filename": "if.21.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 884, "filename": "if.22.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 890, "filename": "if.23.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 896, "filename": "if.24.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 903, "filename": "if.25.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 909, "filename": "if.26.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 915, "filename": "if.27.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 921, "filename": "if.28.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 928, "filename": "if.29.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 934, "filename": "if.30.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 940, "filename": "if.31.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 947, "filename": "if.32.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 953, "filename": "if.33.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 959, "filename": "if.34.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 966, "filename": "if.35.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 972, "filename": "if.36.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 979, "filename": "if.37.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 985, "filename": "if.38.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 991, "filename": "if.39.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 998, "filename": "if.40.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 1004, "filename": "if.41.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 1010, "filename": "if.42.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 1017, "filename": "if.43.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 1023, "filename": "if.44.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 1029, "filename": "if.45.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 1036, "filename": "if.46.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 1042, "filename": "if.47.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 1048, "filename": "if.48.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 1055, "filename": "if.49.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 1062, "filename": "if.50.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 1069, "filename": "if.51.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 1077, "filename": "if.52.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 1083, "filename": "if.53.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 1089, "filename": "if.54.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 1096, "filename": "if.55.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 1102, "filename": "if.56.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 1109, "filename": "if.57.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 1119, "filename": "if.58.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 1129, "filename": "if.59.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 1140, "filename": "if.60.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 1146, "filename": "if.61.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 1152, "filename": "if.62.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 1158, "filename": "if.63.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 1165, "filename": "if.64.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 1174, "filename": "if.65.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 1183, "filename": "if.66.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 1192, "filename": "if.67.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 1202, "filename": "if.68.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 1211, "filename": "if.69.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 1220, "filename": "if.70.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 1229, "filename": "if.71.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 1239, "filename": "if.72.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 1248, "filename": "if.73.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 1257, "filename": "if.74.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 1266, "filename": "if.75.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 1275, "filename": "if.76.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 1285, "filename": "if.77.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 1296, "filename": "if.78.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 1304, "filename": "if.79.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 1313, "filename": "if.80.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 1322, "filename": "if.81.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 1331, "filename": "if.82.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 1341, "filename": "if.83.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 1350, "filename": "if.84.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 1359, "filename": "if.85.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 1368, "filename": "if.86.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 1376, "filename": "if.87.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 1384, "filename": "if.88.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 1393, "filename": "if.89.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 1409, "filename": "if.90.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 1418, "filename": "if.91.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 1427, "filename": "if.92.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 1436, "filename": "if.93.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 1445, "filename": "if.94.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 1454, "filename": "if.95.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 1464, "filename": "if.96.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 1470, "filename": "if.97.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 1476, "filename": "if.98.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 1482, "filename": "if.99.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 1488, "filename": "if.100.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 1494, "filename": "if.101.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 1500, "filename": "if.102.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_invalid", "line": 1506, "filename": "if.103.wasm", "text": "type mismatch", "module_type": "binary"}, 
  {"type": "assert_malformed", "line": 1513, "filename": "if.104.wat", "text": "unexpected token", "module_type": "text"}, 
  {"type": "assert_malformed", "line": 1517, "filename": "if.105.wat", "text": "unexpected token", "module_type": "text"}, 
  {"type": "assert_malformed", "line": 1522, "filename": "if.106.wat", "text": "mismatching label", "module_type": "text"}, 
  {"type": "assert_malformed", "line": 1526, "filename": "if.107.wat", "text": "mismatching label", "module_type": "text"}, 
  {"type": "assert_malformed", "line": 1530, "filename": "if.108.wat", "text": "mismatching label", "module_type": "text"}, 
  {"type": "assert_malformed", "line": 1534, "filename": "if.109.wat", "text": "mismatching label", "module_type": "text"}, 
  {"type": "assert_malformed", "line": 1538, "filename": "if.110.wat", "text": "mismatching label", "module_type": "text"}, 
  {"type": "assert_malformed", "line": 1542, "filename": "if.111.wat", "text": "mismatching label", "module_type": "text"}, 
  {"type": "assert_malformed", "line": 1546, "filename": "if.112.wat", "text": "mismatching label", "module_type": "text"}, 
  {"type": "assert_malformed", "line": 1550, "filename": "if.113.wat", "text": "mismatching label", "module_type": "text"}, 
  {"type": "assert_malformed", "line": 1554, "filename": "if.114.wat", "text": "mismatching label", "module_type": "text"}, 
  {"type": "assert_malformed", "line": 1558, "filename": "if.115.wat", "text": "mismatching label", "module_type": "text"}, 
  {"type": "assert_malformed", "line": 1562, "filename": "if.116.wat", "text": "unexpected token", "module_type": "text"}]},
  "code": [
    "(module (memory 1)\n  (func $dummy)\n  (func (export \"empty\") (param i32) (if (local.get 0) (then)) (if (local.get 0) (then) (else)) (if $l (local.get 0) (then)) (if $l (local.get 0) (then) (else)) )\n  (func (export \"singular\") (param i32) (result i32) (if (local.get 0) (then (nop))) (if (local.get 0) (then (nop)) (else (nop))) (if (result i32) (local.get 0) (then (i32.const 7)) (else (i32.const 8))) )\n  (func (export \"multi\") (param i32) (result i32 i32) (if (local.get 0) (then (call $dummy) (call $dummy) (call $dummy))) (if (local.get 0) (then) (else (call $dummy) (call $dummy) (call $dummy))) (if (result i32) (local.get 0) (then (call $dummy) (call $dummy) (i32.const 8) (call $dummy)) (else (call $dummy) (call $dummy) (i32.const 9) (call $dummy)) ) (if (result i32 i64 i32) (local.get 0) (then (call $dummy) (call $dummy) (i32.const 1) (call $dummy) (call $dummy) (call $dummy) (i64.const 2) (call $dummy) (call $dummy) (call $dummy) (i32.const 3) (call $dummy) ) (else (call $dummy) (call $dummy) (i32.const -1) (call $dummy) (call $dummy) (call $dummy) (i64.const -2) (call $dummy) (call $dummy) (call $dummy) (i32.const -3) (call $dummy) ) ) (drop) (drop) )\n  (func (export \"nested\") (param i32 i32) (result i32) (if (result i32) (local.get 0) (then (if (local.get 1) (then (call $dummy) (block) (nop))) (if (local.get 1) (then) (else (call $dummy) (block) (nop))) (if (result i32) (local.get 1) (then (call $dummy) (i32.const 9)) (else (call $dummy) (i32.const 10)) ) ) (else (if (local.get 1) (then (call $dummy) (block) (nop))) (if (local.get 1) (then) (else (call $dummy) (block) (nop))) (if (result i32) (local.get 1) (then (call $dummy) (i32.const 10)) (else (call $dummy) (i32.const 11)) ) ) ) )\n  (func (export \"as-select-first\") (param i32) (result i32) (select (if (result i32) (local.get 0) (then (call $dummy) (i32.const 1)) (else (call $dummy) (i32.const 0)) ) (i32.const 2) (i32.const 3) ) )\n  (func (export \"as-select-mid\") (param i32) (result i32) (select (i32.const 2) (if (result i32) (local.get 0) (then (call $dummy) (i32.const 1)) (else (call $dummy) (i32.const 0)) ) (i32.const 3) ) )\n  (func (export \"as-select-last\") (param i32) (result i32) (select (i32.const 2) (i32.const 3) (if (result i32) (local.get 0) (then (call $dummy) (i32.const 1)) (else (call $dummy) (i32.const 0)) ) ) )\n  (func (export \"as-loop-first\") (param i32) (result i32) (loop (result i32) (if (result i32) (local.get 0) (then (call $dummy) (i32.const 1)) (else (call $dummy) (i32.const 0)) ) (call $dummy) (call $dummy) ) )\n  (func (export \"as-loop-mid\") (param i32) (result i32) (loop (result i32) (call $dummy) (if (result i32) (local.get 0) (then (call $dummy) (i32.const 1)) (else (call $dummy) (i32.const 0)) ) (call $dummy) ) )\n  (func (export \"as-loop-last\") (param i32) (result i32) (loop (result i32) (call $dummy) (call $dummy) (if (result i32) (local.get 0) (then (call $dummy) (i32.const 1)) (else (call $dummy) (i32.const 0)) ) ) )\n  (func (export \"as-if-condition\") (param i32) (result i32) (if (result i32) (if (result i32) (local.get 0) (then (i32.const 1)) (else (i32.const 0)) ) (then (call $dummy) (i32.const 2)) (else (call $dummy) (i32.const 3)) ) )\n  (func (export \"as-br_if-first\") (param i32) (result i32) (block (result i32) (br_if 0 (if (result i32) (local.get 0) (then (call $dummy) (i32.const 1)) (else (call $dummy) (i32.const 0)) ) (i32.const 2) ) (return (i32.const 3)) ) )\n  (func (export \"as-br_if-last\") (param i32) (result i32) (block (result i32) (br_if 0 (i32.const 2) (if (result i32) (local.get 0) (then (call $dummy) (i32.const 1)) (else (call $dummy) (i32.const 0)) ) ) (return (i32.const 3)) ) )\n  (func (export \"as-br_table-first\") (param i32) (result i32) (block (result i32) (if (result i32) (local.get 0) (then (call $dummy) (i32.const 1)) (else (call $dummy) (i32.const 0)) ) (i32.const 2) (br_table 0 0) ) )\n  (func (export \"as-br_table-last\") (param i32) (result i32) (block (result i32) (i32.const 2) (if (result i32) (local.get 0) (then (call $dummy) (i32.const 1)) (else (call $dummy) (i32.const 0)) ) (br_table 0 0) ) )\n  (func $ (param i32 i32) (result i32) (local.get 0)) (type $check (func (param i32 i32) (result i32))) (table funcref (elem $func))\n  (func (export \"as-call_indirect-first\") (param i32) (result i32) (block (result i32) (call_indirect (type $check) (if (result i32) (local.get 0) (then (call $dummy) (i32.const 1)) (else (call $dummy) (i32.const 0)) ) (i32.const 2) (i32.const 0) ) ) )\n  (func (export \"as-call_indirect-mid\") (param i32) (result i32) (block (result i32) (call_indirect (type $check) (i32.const 2) (if (result i32) (local.get 0) (then (call $dummy) (i32.const 1)) (else (call $dummy) (i32.const 0)) ) (i32.const 0) ) ) )\n  (func (export \"as-call_indirect-last\") (param i32) (result i32) (block (result i32) (call_indirect (type $check) (i32.const 2) (i32.const 0) (if (result i32) (local.get 0) (then (call $dummy) (i32.const 1)) (else (call $dummy) (i32.const 0)) ) ) ) )\n  (func (export \"as-store-first\") (param i32) (if (result i32) (local.get 0) (then (call $dummy) (i32.const 1)) (else (call $dummy) (i32.const 0)) ) (i32.const 2) (i32.store) )\n  (func (export \"as-store-last\") (param i32) (i32.const 2) (if (result i32) (local.get 0) (then (call $dummy) (i32.const 1)) (else (call $dummy) (i32.const 0)) ) (i32.store) )\n  (func (export \"as-memory.grow-value\") (param i32) (result i32) (memory.grow (if (result i32) (local.get 0) (then (i32.const 1)) (else (i32.const 0)) ) ) )\n  (func $f (param i32) (result i32) (local.get 0))\n  (func (export \"as-call-value\") (param i32) (result i32) (call $f (if (result i32) (local.get 0) (then (i32.const 1)) (else (i32.const 0)) ) ) )\n  (func (export \"as-return-value\") (param i32) (result i32) (if (result i32) (local.get 0) (then (i32.const 1)) (else (i32.const 0))) (return) )\n  (func (export \"as-drop-operand\") (param i32) (drop (if (result i32) (local.get 0) (then (i32.const 1)) (else (i32.const 0)) ) ) )\n  (func (export \"as-br-value\") (param i32) (result i32) (block (result i32) (br 0 (if (result i32) (local.get 0) (then (i32.const 1)) (else (i32.const 0)) ) ) ) )\n  (func (export \"as-local.set-value\") (param i32) (result i32) (local i32) (local.set 0 (if (result i32) (local.get 0) (then (i32.const 1)) (else (i32.const 0)) ) ) (local.get 0) )\n  (func (export \"as-local.tee-value\") (param i32) (result i32) (local.tee 0 (if (result i32) (local.get 0) (then (i32.const 1)) (else (i32.const 0)) ) ) ) (global $a (mut i32) (i32.const 10))\n  (func (export \"as-global.set-value\") (param i32) (result i32) (global.set $a (if (result i32) (local.get 0) (then (i32.const 1)) (else (i32.const 0)) ) ) (global.get $a) )\n  (func (export \"as-load-operand\") (param i32) (result i32) (i32.load (if (result i32) (local.get 0) (then (i32.const 11)) (else (i32.const 10)) ) ) )\n  (func (export \"as-unary-operand\") (param i32) (result i32) (i32.ctz (if (result i32) (local.get 0) (then (call $dummy) (i32.const 13)) (else (call $dummy) (i32.const -13)) ) ) )\n  (func (export \"as-binary-operand\") (param i32 i32) (result i32) (i32.mul (if (result i32) (local.get 0) (then (call $dummy) (i32.const 3)) (else (call $dummy) (i32.const -3)) ) (if (result i32) (local.get 1) (then (call $dummy) (i32.const 4)) (else (call $dummy) (i32.const -5)) ) ) )\n  (func (export \"as-test-operand\") (param i32) (result i32) (i32.eqz (if (result i32) (local.get 0) (then (call $dummy) (i32.const 13)) (else (call $dummy) (i32.const 0)) ) ) )\n  (func (export \"as-compare-operand\") (param i32 i32) (result i32) (f32.gt (if (result f32) (local.get 0) (then (call $dummy) (f32.const 3)) (else (call $dummy) (f32.const -3)) ) (if (result f32) (local.get 1) (then (call $dummy) (f32.const 4)) (else (call $dummy) (f32.const -4)) ) ) )\n  (func (export \"as-binary-operands\") (param i32) (result i32) (i32.mul (if (result i32 i32) (local.get 0) (then (call $dummy) (i32.const 3) (call $dummy) (i32.const 4)) (else (call $dummy) (i32.const 3) (call $dummy) (i32.const -4)) ) ) )\n  (func (export \"as-compare-operands\") (param i32) (result i32) (f32.gt (if (result f32 f32) (local.get 0) (then (call $dummy) (f32.const 3) (call $dummy) (f32.const 3)) (else (call $dummy) (f32.const -2) (call $dummy) (f32.const -3)) ) ) )\n  (func (export \"as-mixed-operands\") (param i32) (result i32) (if (result i32 i32) (local.get 0) (then (call $dummy) (i32.const 3) (call $dummy) (i32.const 4)) (else (call $dummy) (i32.const -3) (call $dummy) (i32.const -4)) ) (i32.const 5) (i32.add) (i32.mul) )\n  (func (export \"break-bare\") (result i32) (if (i32.const 1) (then (br 0) (unreachable))) (if (i32.const 1) (then (br 0) (unreachable)) (else (unreachable))) (if (i32.const 0) (then (unreachable)) (else (br 0) (unreachable))) (if (i32.const 1) (then (br_if 0 (i32.const 1)) (unreachable))) (if (i32.const 1) (then (br_if 0 (i32.const 1)) (unreachable)) (else (unreachable))) (if (i32.const 0) (then (unreachable)) (else (br_if 0 (i32.const 1)) (unreachable))) (if (i32.const 1) (then (br_table 0 (i32.const 0)) (unreachable))) (if (i32.const 1) (then (br_table 0 (i32.const 0)) (unreachable)) (else (unreachable))) (if (i32.const 0) (then (unreachable)) (else (br_table 0 (i32.const 0)) (unreachable))) (i32.const 19) )\n  (func (export \"break-value\") (param i32) (result i32) (if (result i32) (local.get 0) (then (br 0 (i32.const 18)) (i32.const 19)) (else (br 0 (i32.const 21)) (i32.const 20)) ) )\n  (func (export \"break-multi-value\") (param i32) (result i32 i32 i64) (if (result i32 i32 i64) (local.get 0) (then (br 0 (i32.const 18) (i32.const -18) (i64.const 18)) (i32.const 19) (i32.const -19) (i64.const 19) ) (else (br 0 (i32.const -18) (i32.const 18) (i64.const -18)) (i32.const -19) (i32.const 19) (i64.const -19) ) ) )\n  (func (export \"param\") (param i32) (result i32) (i32.const 1) (if (param i32) (result i32) (local.get 0) (then (i32.const 2) (i32.add)) (else (i32.const -2) (i32.add)) ) )\n  (func (export \"params\") (param i32) (result i32) (i32.const 1) (i32.const 2) (if (param i32 i32) (result i32) (local.get 0) (then (i32.add)) (else (i32.sub)) ) )\n  (func (export \"params-id\") (param i32) (result i32) (i32.const 1) (i32.const 2) (if (param i32 i32) (result i32 i32) (local.get 0) (then)) (i32.add) )\n  (func (export \"param-break\") (param i32) (result i32) (i32.const 1) (if (param i32) (result i32) (local.get 0) (then (i32.const 2) (i32.add) (br 0)) (else (i32.const -2) (i32.add) (br 0)) ) )\n  (func (export \"params-break\") (param i32) (result i32) (i32.const 1) (i32.const 2) (if (param i32 i32) (result i32) (local.get 0) (then (i32.add) (br 0)) (else (i32.sub) (br 0)) ) )\n  (func (export \"params-id-break\") (param i32) (result i32) (i32.const 1) (i32.const 2) (if (param i32 i32) (result i32 i32) (local.get 0) (then (br 0))) (i32.add) )\n  (func (export \"effects\") (param i32) (result i32) (local i32) (if (block (result i32) (local.set 1 (i32.const 1)) (local.get 0)) (then (local.set 1 (i32.mul (local.get 1) (i32.const 3))) (local.set 1 (i32.sub (local.get 1) (i32.const 5))) (local.set 1 (i32.mul (local.get 1) (i32.const 7))) (br 0) (local.set 1 (i32.mul (local.get 1) (i32.const 100))) ) (else (local.set 1 (i32.mul (local.get 1) (i32.const 5))) (local.set 1 (i32.sub (local.get 1) (i32.const 7))) (local.set 1 (i32.mul (local.get 1) (i32.const 3))) (br 0) (local.set 1 (i32.mul (local.get 1) (i32.const 1000))) ) ) (local.get 1) )\n  (func $add64_u_with_carry (export \"add64_u_with_carry\") (param $i i64) (param $j i64) (param $c i32) (result i64 i32) (local $k i64) (local.set $k (i64.add (i64.add (local.get $i) (local.get $j)) (i64.extend_i32_u (local.get $c)) ) ) (return (local.get $k) (i64.lt_u (local.get $k) (local.get $i))) )\n  (func $add64_u_saturated (export \"add64_u_saturated\") (param i64 i64) (result i64) (call $add64_u_with_carry (local.get 0) (local.get 1) (i32.const 0)) (if (param i64) (result i64) (then (drop) (i64.const -1)) ) ) (type $block-sig-1 (func)) (type $block-sig-2 (func (result i32))) (type $block-sig-3 (func (param $x i32))) (type $block-sig-4 (func (param i32 f64 i32) (result i32 f64 i32)))\n  (func (export \"type-use\") (if (type $block-sig-1) (i32.const 1) (then)) (if (type $block-sig-2) (i32.const 1) (then (i32.const 0)) (else (i32.const 2)) ) (if (type $block-sig-3) (i32.const 1) (then (drop)) (else (drop))) (i32.const 0) (f64.const 0) (i32.const 0) (if (type $block-sig-4) (i32.const 1) (then)) (drop) (drop) (drop) (if (type $block-sig-2) (result i32) (i32.const 1) (then (i32.const 0)) (else (i32.const 2)) ) (if (type $block-sig-3) (param i32) (i32.const 1) (then (drop)) (else (drop)) ) (i32.const 0) (f64.const 0) (i32.const 0) (if (type $block-sig-4) (param i32) (param f64 i32) (result i32 f64) (result i32) (i32.const 1) (then) ) (drop) (drop) (drop) )\n  (func (export \"atypical-condition\") i32.const 0 (if (then) (else)) (if (i32.const 1) (i32.eqz) (then) (else)) ))",
    "(assert_return (invoke \"empty\" (i32.const 0)))",
    "(assert_return (invoke \"empty\" (i32.const 1)))",
    "(assert_return (invoke \"empty\" (i32.const 100)))",
    "(assert_return (invoke \"empty\" (i32.const -2)))",
    "(assert_return (invoke \"singular\" (i32.const 0)) (i32.const 8))",
    "(assert_return (invoke \"singular\" (i32.const 1)) (i32.const 7))",
    "(assert_return (invoke \"singular\" (i32.const 10)) (i32.const 7))",
    "(assert_return (invoke \"singular\" (i32.const -10)) (i32.const 7))",
    "(assert_return (invoke \"multi\" (i32.const 0)) (i32.const 9) (i32.const -1))",
    "(assert_return (invoke \"multi\" (i32.const 1)) (i32.const 8) (i32.const 1))",
    "(assert_return (invoke \"multi\" (i32.const 13)) (i32.const 8) (i32.const 1))",
    "(assert_return (invoke \"multi\" (i32.const -5)) (i32.const 8) (i32.const 1))",
    "(assert_return (invoke \"nested\" (i32.const 0) (i32.const 0)) (i32.const 11))",
    "(assert_return (invoke \"nested\" (i32.const 1) (i32.const 0)) (i32.const 10))",
    "(assert_return (invoke \"nested\" (i32.const 0) (i32.const 1)) (i32.const 10))",
    "(assert_return (invoke \"nested\" (i32.const 3) (i32.const 2)) (i32.const 9))",
    "(assert_return (invoke \"nested\" (i32.const 0) (i32.const -100)) (i32.const 10))",
    "(assert_return (invoke \"nested\" (i32.const 10) (i32.const 10)) (i32.const 9))",
    "(assert_return (invoke \"nested\" (i32.const 0) (i32.const -1)) (i32.const 10))",
    "(assert_return (invoke \"nested\" (i32.const -111) (i32.const -2)) (i32.const 9))",
    "(assert_return (invoke \"as-select-first\" (i32.const 0)) (i32.const 0))",
    "(assert_return (invoke \"as-select-first\" (i32.const 1)) (i32.const 1))",
    "(assert_return (invoke \"as-select-mid\" (i32.const 0)) (i32.const 2))",
    "(assert_return (invoke \"as-select-mid\" (i32.const 1)) (i32.const 2))",
    "(assert_return (invoke \"as-select-last\" (i32.const 0)) (i32.const 3))",
    "(assert_return (invoke \"as-select-last\" (i32.const 1)) (i32.const 2))",
    "(assert_return (invoke \"as-loop-first\" (i32.const 0)) (i32.const 0))",
    "(assert_return (invoke \"as-loop-first\" (i32.const 1)) (i32.const 1))",
    "(assert_return (invoke \"as-loop-mid\" (i32.const 0)) (i32.const 0))",
    "(assert_return (invoke \"as-loop-mid\" (i32.const 1)) (i32.const 1))",
    "(assert_return (invoke \"as-loop-last\" (i32.const 0)) (i32.const 0))",
    "(assert_return (invoke \"as-loop-last\" (i32.const 1)) (i32.const 1))",
    "(assert_return (invoke \"as-if-condition\" (i32.const 0)) (i32.const 3))",
    "(assert_return (invoke \"as-if-condition\" (i32.const 1)) (i32.const 2))",
    "(assert_return (invoke \"as-br_if-first\" (i32.const 0)) (i32.const 0))",
    "(assert_return (invoke \"as-br_if-first\" (i32.const 1)) (i32.const 1))",
    "(assert_return (invoke \"as-br_if-last\" (i32.const 0)) (i32.const 3))",
    "(assert_return (invoke \"as-br_if-last\" (i32.const 1)) (i32.const 2))",
    "(assert_return (invoke \"as-br_table-first\" (i32.const 0)) (i32.const 0))",
    "(assert_return (invoke \"as-br_table-first\" (i32.const 1)) (i32.const 1))",
    "(assert_return (invoke \"as-br_table-last\" (i32.const 0)) (i32.const 2))",
    "(assert_return (invoke \"as-br_table-last\" (i32.const 1)) (i32.const 2))",
    "(assert_return (invoke \"as-call_indirect-first\" (i32.const 0)) (i32.const 0))",
    "(assert_return (invoke \"as-call_indirect-first\" (i32.const 1)) (i32.const 1))",
    "(assert_return (invoke \"as-call_indirect-mid\" (i32.const 0)) (i32.const 2))",
    "(assert_return (invoke \"as-call_indirect-mid\" (i32.const 1)) (i32.const 2))",
    "(assert_return (invoke \"as-call_indirect-last\" (i32.const 0)) (i32.const 2))",
    "(assert_trap (invoke \"as-call_indirect-last\" (i32.const 1)) \"undefined element\")",
    "(assert_return (invoke \"as-store-first\" (i32.const 0)))",
    "(assert_return (invoke \"as-store-first\" (i32.const 1)))",
    "(assert_return (invoke \"as-store-last\" (i32.const 0)))",
    "(assert_return (invoke \"as-store-last\" (i32.const 1)))",
    "(assert_return (invoke \"as-memory.grow-value\" (i32.const 0)) (i32.const 1))",
    "(assert_return (invoke \"as-memory.grow-value\" (i32.const 1)) (i32.const 1))",
    "(assert_return (invoke \"as-call-value\" (i32.const 0)) (i32.const 0))",
    "(assert_return (invoke \"as-call-value\" (i32.const 1)) (i32.const 1))",
    "(assert_return (invoke \"as-return-value\" (i32.const 0)) (i32.const 0))",
    "(assert_return (invoke \"as-return-value\" (i32.const 1)) (i32.const 1))",
    "(assert_return (invoke \"as-drop-operand\" (i32.const 0)))",
    "(assert_return (invoke \"as-drop-operand\" (i32.const 1)))",
    "(assert_return (invoke \"as-br-value\" (i32.const 0)) (i32.const 0))",
    "(assert_return (invoke \"as-br-value\" (i32.const 1)) (i32.const 1))",
    "(assert_return (invoke \"as-local.set-value\" (i32.const 0)) (i32.const 0))",
    "(assert_return (invoke \"as-local.set-value\" (i32.const 1)) (i32.const 1))",
    "(assert_return (invoke \"as-local.tee-value\" (i32.const 0)) (i32.const 0))",
    "(assert_return (invoke \"as-local.tee-value\" (i32.const 1)) (i32.const 1))",
    "(assert_return (invoke \"as-global.set-value\" (i32.const 0)) (i32.const 0))",
    "(assert_return (invoke \"as-global.set-value\" (i32.const 1)) (i32.const 1))",
    "(assert_return (invoke \"as-load-operand\" (i32.const 0)) (i32.const 0))",
    "(assert_return (invoke \"as-load-operand\" (i32.const 1)) (i32.const 0))",
    "(assert_return (invoke \"as-unary-operand\" (i32.const 0)) (i32.const 0))",
    "(assert_return (invoke \"as-unary-operand\" (i32.const 1)) (i32.const 0))",
    "(assert_return (invoke \"as-unary-operand\" (i32.const -1)) (i32.const 0))",
    "(assert_return (invoke \"as-binary-operand\" (i32.const 0) (i32.const 0)) (i32.const 15))",
    "(assert_return (invoke \"as-binary-operand\" (i32.const 0) (i32.const 1)) (i32.const -12))",
    "(assert_return (invoke \"as-binary-operand\" (i32.const 1) (i32.const 0)) (i32.const -15))",
    "(assert_return (invoke \"as-binary-operand\" (i32.const 1) (i32.const 1)) (i32.const 12))",
    "(assert_return (invoke \"as-test-operand\" (i32.const 0)) (i32.const 1))",
    "(assert_return (invoke \"as-test-operand\" (i32.const 1)) (i32.const 0))",
    "(assert_return (invoke \"as-compare-operand\" (i32.const 0) (i32.const 0)) (i32.const 1))",
    "(assert_return (invoke \"as-compare-operand\" (i32.const 0) (i32.const 1)) (i32.const 0))",
    "(assert_return (invoke \"as-compare-operand\" (i32.const 1) (i32.const 0)) (i32.const 1))",
    "(assert_return (invoke \"as-compare-operand\" (i32.const 1) (i32.const 1)) (i32.const 0))",
    "(assert_return (invoke \"as-binary-operands\" (i32.const 0)) (i32.const -12))",
    "(assert_return (invoke \"as-binary-operands\" (i32.const 1)) (i32.const 12))",
    "(assert_return (invoke \"as-compare-operands\" (i32.const 0)) (i32.const 1))",
    "(assert_return (invoke \"as-compare-operands\" (i32.const 1)) (i32.const 0))",
    "(assert_return (invoke \"as-mixed-operands\" (i32.const 0)) (i32.const -3))",
    "(assert_return (invoke \"as-mixed-operands\" (i32.const 1)) (i32.const 27))",
    "(assert_return (invoke \"break-bare\") (i32.const 19))",
    "(assert_return (invoke \"break-value\" (i32.const 1)) (i32.const 18))",
    "(assert_return (invoke \"break-value\" (i32.const 0)) (i32.const 21))",
    "(assert_return (invoke \"break-multi-value\" (i32.const 0)) (i32.const -18) (i32.const 18) (i64.const -18))",
    "(assert_return (invoke \"break-multi-value\" (i32.const 1)) (i32.const 18) (i32.const -18) (i64.const 18))",
    "(assert_return (invoke \"param\" (i32.const 0)) (i32.const -1))",
    "(assert_return (invoke \"param\" (i32.const 1)) (i32.const 3))",
    "(assert_return (invoke \"params\" (i32.const 0)) (i32.const -1))",
    "(assert_return (invoke \"params\" (i32.const 1)) (i32.const 3))",
    "(assert_return (invoke \"params-id\" (i32.const 0)) (i32.const 3))",
    "(assert_return (invoke \"params-id\" (i32.const 1)) (i32.const 3))",
    "(assert_return (invoke \"param-break\" (i32.const 0)) (i32.const -1))",
    "(assert_return (invoke \"param-break\" (i32.const 1)) (i32.const 3))",
    "(assert_return (invoke \"params-break\" (i32.const 0)) (i32.const -1))",
    "(assert_return (invoke \"params-break\" (i32.const 1)) (i32.const 3))",
    "(assert_return (invoke \"params-id-break\" (i32.const 0)) (i32.const 3))",
    "(assert_return (invoke \"params-id-break\" (i32.const 1)) (i32.const 3))",
    "(assert_return (invoke \"effects\" (i32.const 1)) (i32.const -14))",
    "(assert_return (invoke \"effects\" (i32.const 0)) (i32.const -6))",
    "(assert_return (invoke \"add64_u_with_carry\" (i64.const 0) (i64.const 0) (i32.const 0)) (i64.const 0) (i32.const 0))",
    "(assert_return (invoke \"add64_u_with_carry\" (i64.const 100) (i64.const 124) (i32.const 0)) (i64.const 224) (i32.const 0))",
    "(assert_return (invoke \"add64_u_with_carry\" (i64.const -1) (i64.const 0) (i32.const 0)) (i64.const -1) (i32.const 0))",
    "(assert_return (invoke \"add64_u_with_carry\" (i64.const -1) (i64.const 1) (i32.const 0)) (i64.const 0) (i32.const 1))",
    "(assert_return (invoke \"add64_u_with_carry\" (i64.const -1) (i64.const -1) (i32.const 0)) (i64.const -2) (i32.const 1))",
    "(assert_return (invoke \"add64_u_with_carry\" (i64.const -1) (i64.const 0) (i32.const 1)) (i64.const 0) (i32.const 1))",
    "(assert_return (invoke \"add64_u_with_carry\" (i64.const -1) (i64.const 1) (i32.const 1)) (i64.const 1) (i32.const 1))",
    "(assert_return (invoke \"add64_u_with_carry\" (i64.const 0x8000000000000000) (i64.const 0x8000000000000000) (i32.const 0)) (i64.const 0) (i32.const 1))",
    "(assert_return (invoke \"add64_u_saturated\" (i64.const 0) (i64.const 0)) (i64.const 0))",
    "(assert_return (invoke \"add64_u_saturated\" (i64.const 1230) (i64.const 23)) (i64.const 1253))",
    "(assert_return (invoke \"add64_u_saturated\" (i64.const -1) (i64.const 0)) (i64.const -1))",
    "(assert_return (invoke \"add64_u_saturated\" (i64.const -1) (i64.const 1)) (i64.const -1))",
    "(assert_return (invoke \"add64_u_saturated\" (i64.const -1) (i64.const -1)) (i64.const -1))",
    "(assert_return (invoke \"add64_u_saturated\" (i64.const 0x8000000000000000) (i64.const 0x8000000000000000)) (i64.const -1))",
    "(assert_return (invoke \"type-use\"))",
    "(assert_return (invoke \"atypical-condition\"))",
    "(assert_malformed (module quote \"(type $sig (func (param i32) (result i32)))\" \"(func (i32.const 0)\" \" (if (type $sig) (result i32) (param i32) (i32.const 1) (then))\" \")\" ) \"unexpected token\")",
    "(assert_malformed (module quote \"(type $sig (func (param i32) (result i32)))\" \"(func (i32.const 0)\" \" (if (param i32) (type $sig) (result i32) (i32.const 1) (then))\" \")\" ) \"unexpected token\")",
    "(assert_malformed (module quote \"(type $sig (func (param i32) (result i32)))\" \"(func (i32.const 0)\" \" (if (param i32) (result i32) (type $sig) (i32.const 1) (then))\" \")\" ) \"unexpected token\")",
    "(assert_malformed (module quote \"(type $sig (func (param i32) (result i32)))\" \"(func (i32.const 0)\" \" (if (result i32) (type $sig) (param i32) (i32.const 1) (then))\" \")\" ) \"unexpected token\")",
    "(assert_malformed (module quote \"(type $sig (func (param i32) (result i32)))\" \"(func (i32.const 0)\" \" (if (result i32) (param i32) (type $sig) (i32.const 1) (then))\" \")\" ) \"unexpected token\")",
    "(assert_malformed (module quote \"(func (i32.const 0) (if (result i32) (param i32) (i32.const 1) (then)))\" ) \"unexpected token\")",
    "(assert_malformed (module quote \"(func (i32.const 0) (i32.const 1)\" \" (if (param $x i32) (then (drop)) (else (drop)))\" \")\" ) \"unexpected token\")",
    "(assert_malformed (module quote \"(type $sig (func))\" \"(func (i32.const 1)\" \" (if (type $sig) (result i32) (then (i32.const 0)) (else (i32.const 2)))\" \" (unreachable)\" \")\" ) \"inline function type\")",
    "(assert_malformed (module quote \"(type $sig (func (param i32) (result i32)))\" \"(func (i32.const 1)\" \" (if (type $sig) (result i32) (then (i32.const 0)) (else (i32.const 2)))\" \" (unreachable)\" \")\" ) \"inline function type\")",
    "(assert_malformed (module quote \"(type $sig (func (param i32) (result i32)))\" \"(func (i32.const 0) (i32.const 1)\" \" (if (type $sig) (param i32) (then (drop)) (else (drop)))\" \" (unreachable)\" \")\" ) \"inline function type\")",
    "(assert_malformed (module quote \"(type $sig (func (param i32 i32) (result i32)))\" \"(func (i32.const 0) (i32.const 1)\" \" (if (type $sig) (param i32) (result i32) (then)) (unreachable)\" \")\" ) \"inline function type\")",
    "(assert_invalid (module (type $sig (func)) (func (i32.const 1) (if (type $sig) (i32.const 0) (then))) ) \"type mismatch\")",
    "(assert_invalid (module (func $type-empty-i32 (result i32) (if (i32.const 0) (then)))) \"type mismatch\")",
    "(assert_invalid (module (func $type-empty-i64 (result i64) (if (i32.const 0) (then)))) \"type mismatch\")",
    "(assert_invalid (module (func $type-empty-f32 (result f32) (if (i32.const 0) (then)))) \"type mismatch\")",
    "(assert_invalid (module (func $type-empty-f64 (result f64) (if (i32.const 0) (then)))) \"type mismatch\")",
    "(assert_invalid (module (func $type-empty-i32 (result i32) (if (i32.const 0) (then) (else)))) \"type mismatch\")",
    "(assert_invalid (module (func $type-empty-i64 (result i64) (if (i32.const 0) (then) (else)))) \"type mismatch\")",
    "(assert_invalid (module (func $type-empty-f32 (result f32) (if (i32.const 0) (then) (else)))) \"type mismatch\")",
    "(assert_invalid (module (func $type-empty-f64 (result f64) (if (i32.const 0) (then) (else)))) \"type mismatch\")",
    "(assert_invalid (module (func $type-then-value-num-vs-void (if (i32.const 1) (then (i32.const 1))) )) \"type mismatch\")",
    "(assert_invalid (module (func $type-then-value-num-vs-void-else (if (i32.const 1) (then (i32.const 1)) (else)) )) \"type mismatch\")",
    "(assert_invalid (module (func $type-else-value-num-vs-void (if (i32.const 1) (then) (else (i32.const 1))) )) \"type mismatch\")",
    "(assert_invalid (module (func $type-both-value-num-vs-void (if (i32.const 1) (then (i32.const 1)) (else (i32.const 1))) )) \"type mismatch\")",
    "(assert_invalid (module (func $type-then-value-nums-vs-void (if (i32.const 1) (then (i32.const 1) (i32.const 2))) )) \"type mismatch\")",
    "(assert_invalid (module (func $type-then-value-nums-vs-void-else (if (i32.const 1) (then (i32.const 1) (i32.const 2)) (else)) )) \"type mismatch\")",
    "(assert_invalid (module (func $type-else-value-nums-vs-void (if (i32.const 1) (then) (else (i32.const 1) (i32.const 2))) )) \"type mismatch\")",
    "(assert_invalid (module (func $type-both-value-nums-vs-void (if (i32.const 1) (then (i32.const 1) (i32.const 2)) (else (i32.const 2) (i32.const 1))) )) \"type mismatch\")",
    "(assert_invalid (module (func $type-then-value-empty-vs-num (result i32) (if (result i32) (i32.const 1) (then) (else (i32.const 0))) )) \"type mismatch\")",
    "(assert_invalid (module (func $type-else-value-empty-vs-num (result i32) (if (result i32) (i32.const 1) (then (i32.const 0)) (else)) )) \"type mismatch\")",
    "(assert_invalid (module (func $type-both-value-empty-vs-num (result i32) (if (result i32) (i32.const 1) (then) (else)) )) \"type mismatch\")",
    "(assert_invalid (module (func $type-then-value-empty-vs-nums (result i32 i32) (if (result i32 i32) (i32.const 1) (then) (else (i32.const 0) (i32.const 2))) )) \"type mismatch\")",
    "(assert_invalid (module (func $type-else-value-empty-vs-nums (result i32 i32) (if (result i32 i32) (i32.const 1) (then (i32.const 0) (i32.const 1)) (else)) )) \"type mismatch\")",
    "(assert_invalid (module (func $type-both-value-empty-vs-nums (result i32 i32) (if (result i32 i32) (i32.const 1) (then) (else)) )) \"type mismatch\")",
    "(assert_invalid (module (func $type-no-else-vs-num (result i32) (if (result i32) (i32.const 1) (then (i32.const 1))) )) \"type mismatch\")",
    "(assert_invalid (module (func $type-no-else-vs-nums (result i32 i32) (if (result i32 i32) (i32.const 1) (then (i32.const 1) (i32.const 1))) )) \"type mismatch\")",
    "(assert_invalid (module (func $type-then-value-void-vs-num (result i32) (if (result i32) (i32.const 1) (then (nop)) (else (i32.const 0))) )) \"type mismatch\")",
    "(assert_invalid (module (func $type-else-value-void-vs-num (result i32) (if (result i32) (i32.const 1) (then (i32.const 0)) (else (nop))) )) \"type mismatch\")",
    "(assert_invalid (module (func $type-both-value-void-vs-num (result i32) (if (result i32) (i32.const 1) (then (nop)) (else (nop))) )) \"type mismatch\")",
    "(assert_invalid (module (func $type-then-value-void-vs-nums (result i32 i32) (if (result i32 i32) (i32.const 1) (then (nop)) (else (i32.const 0) (i32.const 0))) )) \"type mismatch\")",
    "(assert_invalid (module (func $type-else-value-void-vs-nums (result i32 i32) (if (result i32 i32) (i32.const 1) (then (i32.const 0) (i32.const 0)) (else (nop))) )) \"type mismatch\")",
    "(assert_invalid (module (func $type-both-value-void-vs-nums (result i32 i32) (if (result i32 i32) (i32.const 1) (then (nop)) (else (nop))) )) \"type mismatch\")",
    "(assert_invalid (module (func $type-then-value-num-vs-num (result i32) (if (result i32) (i32.const 1) (then (i64.const 1)) (else (i32.const 1))) )) \"type mismatch\")",
    "(assert_invalid (module (func $type-else-value-num-vs-num (result i32) (if (result i32) (i32.const 1) (then (i32.const 1)) (else (i64.const 1))) )) \"type mismatch\")",
    "(assert_invalid (module (func $type-both-value-num-vs-num (result i32) (if (result i32) (i32.const 1) (then (i64.const 1)) (else (i64.const 1))) )) \"type mismatch\")",
    "(assert_invalid (module (func $type-then-value-num-vs-nums (result i32 i32) (if (result i32 i32) (i32.const 1) (then (i32.const 1)) (else (i32.const 1) (i32.const 1))) )) \"type mismatch\")",
    "(assert_invalid (module (func $type-else-value-num-vs-nums (result i32 i32) (if (result i32 i32) (i32.const 1) (then (i32.const 1) (i32.const 1)) (else (i32.const 1))) )) \"type mismatch\")",
    "(assert_invalid (module (func $type-both-value-num-vs-nums (result i32 i32) (if (result i32 i32) (i32.const 1) (then (i32.const 1)) (else (i32.const 1))) )) \"type mismatch\")",
    "(assert_invalid (module (func $type-then-value-partial-vs-nums (result i32 i32) (i32.const 0) (if (result i32 i32) (i32.const 1) (then (i32.const 1)) (else (i32.const 1) (i32.const 1))) )) \"type mismatch\")",
    "(assert_invalid (module (func $type-else-value-partial-vs-nums (result i32 i32) (i32.const 0) (if (result i32 i32) (i32.const 1) (then (i32.const 1) (i32.const 1)) (else (i32.const 1))) )) \"type mismatch\")",
    "(assert_invalid (module (func $type-both-value-partial-vs-nums (result i32 i32) (i32.const 0) (if (result i32 i32) (i32.const 1) (then (i32.const 1)) (else (i32.const 1))) )) \"type mismatch\")",
    "(assert_invalid (module (func $type-then-value-nums-vs-num (result i32) (if (result i32) (i32.const 1) (then (i32.const 1) (i32.const 1)) (else (i32.const 1))) )) \"type mismatch\")",
    "(assert_invalid (module (func $type-else-value-nums-vs-num (result i32) (if (result i32) (i32.const 1) (then (i32.const 1)) (else (i32.const 1) (i32.const 1))) )) \"type mismatch\")",
    "(assert_invalid (module (func $type-both-value-nums-vs-num (result i32) (if (result i32) (i32.const 1) (then (i32.const 1) (i32.const 1)) (else (i32.const 1) (i32.const 1))) )) \"type mismatch\")",
    "(assert_invalid (module (func $type-both-different-value-num-vs-num (result i32) (if (result i32) (i32.const 1) (then (i64.const 1)) (else (f64.const 1))) )) \"type mismatch\")",
    "(assert_invalid (module (func $type-both-different-value-nums-vs-nums (result i32 i32) (if (result i32 i32) (i32.const 1) (then (i32.const 1) (i32.const 1) (i32.const 1)) (else (i32.const 1))) )) \"type mismatch\")",
    "(assert_invalid (module (func $type-then-value-unreached-select (result i32) (if (result i64) (i32.const 0) (then (select (unreachable) (unreachable) (unreachable))) (else (i64.const 0)) ) )) \"type mismatch\")",
    "(assert_invalid (module (func $type-else-value-unreached-select (result i32) (if (result i64) (i32.const 1) (then (i64.const 0)) (else (select (unreachable) (unreachable) (unreachable))) ) )) \"type mismatch\")",
    "(assert_invalid (module (func $type-else-value-unreached-select (result i32) (if (result i64) (i32.const 1) (then (select (unreachable) (unreachable) (unreachable))) (else (select (unreachable) (unreachable) (unreachable))) ) )) \"type mismatch\")",
    "(assert_invalid (module (func $type-then-break-last-void-vs-num (result i32) (if (result i32) (i32.const 1) (then (br 0)) (else (i32.const 1))) )) \"type mismatch\")",
    "(assert_invalid (module (func $type-else-break-last-void-vs-num (result i32) (if (result i32) (i32.const 1) (then (i32.const 1)) (else (br 0))) )) \"type mismatch\")",
    "(assert_invalid (module (func $type-then-break-last-void-vs-nums (result i32 i32) (if (result i32 i32) (i32.const 1) (then (br 0)) (else (i32.const 1) (i32.const 1))) )) \"type mismatch\")",
    "(assert_invalid (module (func $type-else-break-last-void-vs-nums (result i32 i32) (if (result i32 i32) (i32.const 1) (then (i32.const 1) (i32.const 1)) (else (br 0))) )) \"type mismatch\")",
    "(assert_invalid (module (func $type-then-break-empty-vs-num (result i32) (if (result i32) (i32.const 1) (then (br 0) (i32.const 1)) (else (i32.const 1)) ) )) \"type mismatch\")",
    "(assert_invalid (module (func $type-else-break-empty-vs-num (result i32) (if (result i32) (i32.const 1) (then (i32.const 1)) (else (br 0) (i32.const 1)) ) )) \"type mismatch\")",
    "(assert_invalid (module (func $type-then-break-empty-vs-nums (result i32 i32) (if (result i32 i32) (i32.const 1) (then (br 0) (i32.const 1) (i32.const 1)) (else (i32.const 1) (i32.const 1)) ) )) \"type mismatch\")",
    "(assert_invalid (module (func $type-else-break-empty-vs-nums (result i32 i32) (if (result i32 i32) (i32.const 1) (then (i32.const 1) (i32.const 1)) (else (br 0) (i32.const 1) (i32.const 1)) ) )) \"type mismatch\")",
    "(assert_invalid (module (func $type-then-break-void-vs-num (result i32) (if (result i32) (i32.const 1) (then (br 0 (nop)) (i32.const 1)) (else (i32.const 1)) ) )) \"type mismatch\")",
    "(assert_invalid (module (func $type-else-break-void-vs-num (result i32) (if (result i32) (i32.const 1) (then (i32.const 1)) (else (br 0 (nop)) (i32.const 1)) ) )) \"type mismatch\")",
    "(assert_invalid (module (func $type-then-break-void-vs-nums (result i32 i32) (if (result i32 i32) (i32.const 1) (then (br 0 (nop)) (i32.const 1) (i32.const 1)) (else (i32.const 1) (i32.const 1)) ) )) \"type mismatch\")",
    "(assert_invalid (module (func $type-else-break-void-vs-nums (result i32 i32) (if (result i32 i32) (i32.const 1) (then (i32.const 1) (i32.const 1)) (else (br 0 (nop)) (i32.const 1) (i32.const 1)) ) )) \"type mismatch\")",
    "(assert_invalid (module (func $type-then-break-num-vs-num (result i32) (if (result i32) (i32.const 1) (then (br 0 (i64.const 1)) (i32.const 1)) (else (i32.const 1)) ) )) \"type mismatch\")",
    "(assert_invalid (module (func $type-else-break-num-vs-num (result i32) (if (result i32) (i32.const 1) (then (i32.const 1)) (else (br 0 (i64.const 1)) (i32.const 1)) ) )) \"type mismatch\")",
    "(assert_invalid (module (func $type-then-break-num-vs-nums (result i32 i32) (if (result i32 i32) (i32.const 1) (then (br 0 (i64.const 1)) (i32.const 1) (i32.const 1)) (else (i32.const 1) (i32.const 1)) ) )) \"type mismatch\")",
    "(assert_invalid (module (func $type-else-break-num-vs-nums (result i32 i32) (if (result i32 i32) (i32.const 1) (then (i32.const 1) (i32.const 1)) (else (br 0 (i64.const 1)) (i32.const 1) (i32.const 1)) ) )) \"type mismatch\")",
    "(assert_invalid (module (func $type-then-break-partial-vs-nums (result i32 i32) (i32.const 1) (if (result i32 i32) (i32.const 1) (then (br 0 (i64.const 1)) (i32.const 1)) (else (i32.const 1)) ) )) \"type mismatch\")",
    "(assert_invalid (module (func $type-else-break-partial-vs-nums (result i32 i32) (i32.const 1) (if (result i32 i32) (i32.const 1) (then (i32.const 1)) (else (br 0 (i64.const 1)) (i32.const 1)) ) )) \"type mismatch\")",
    "(assert_invalid (module (func $type-condition-empty (if (then)) ) ) \"type mismatch\")",
    "(assert_invalid (module (func $type-condition-empty-in-block (i32.const 0) (block (if (then))) ) ) \"type mismatch\")",
    "(assert_invalid (module (func $type-condition-empty-in-loop (i32.const 0) (loop (if (then))) ) ) \"type mismatch\")",
    "(assert_invalid (module (func $type-condition-empty-in-then (i32.const 0) (i32.const 0) (if (then (if (then)))) ) ) \"type mismatch\")",
    "(assert_invalid (module (func $type-condition-empty-in-else (i32.const 0) (i32.const 0) (if (result i32) (then (i32.const 0)) (else (if (then)) (i32.const 0))) (drop) ) ) \"type mismatch\")",
    "(assert_invalid (module (func $type-condition-empty-in-br (i32.const 0) (block (br 0 (if(then))) (drop)) ) ) \"type mismatch\")",
    "(assert_invalid (module (func $type-condition-empty-in-br_if (i32.const 0) (block (br_if 0 (if(then)) (i32.const 1)) (drop)) ) ) \"type mismatch\")",
    "(assert_invalid (module (func $type-condition-empty-in-br_table (i32.const 0) (block (br_table 0 (if(then))) (drop)) ) ) \"type mismatch\")",
    "(assert_invalid (module (func $type-condition-empty-in-return (return (if(then))) (drop) ) ) \"type mismatch\")",
    "(assert_invalid (module (func $type-condition-empty-in-select (select (if(then)) (i32.const 1) (i32.const 2)) (drop) ) ) \"type mismatch\")",
    "(assert_invalid (module (func $type-condition-empty-in-call (call 1 (if(then))) (drop) ) (func (param i32) (result i32) (local.get 0)) ) \"type mismatch\")",
    "(assert_invalid (module (func $f (param i32) (result i32) (local.get 0)) (type $sig (func (param i32) (result i32))) (table funcref (elem $f)) (func $type-condition-empty-in-call_indirect (block (result i32) (call_indirect (type $sig) (if(then)) (i32.const 0) ) (drop) ) ) ) \"type mismatch\")",
    "(assert_invalid (module (func $type-condition-empty-in-local.set (local i32) (local.set 0 (if(then))) (local.get 0) (drop) ) ) \"type mismatch\")",
    "(assert_invalid (module (func $type-condition-empty-in-local.tee (local i32) (local.tee 0 (if(then))) (drop) ) ) \"type mismatch\")",
    "(assert_invalid (module (global $x (mut i32) (i32.const 0)) (func $type-condition-empty-in-global.set (global.set $x (if(then))) (global.get $x) (drop) ) ) \"type mismatch\")",
    "(assert_invalid (module (memory 0) (func $type-condition-empty-in-memory.grow (memory.grow (if(then))) (drop) ) ) \"type mismatch\")",
    "(assert_invalid (module (memory 0) (func $type-condition-empty-in-load (i32.load (if(then))) (drop) ) ) \"type mismatch\")",
    "(assert_invalid (module (memory 1) (func $type-condition-empty-in-store (i32.store (if(then)) (i32.const 1)) ) ) \"type mismatch\")",
    "(assert_invalid (module (func $type-param-void-vs-num (if (param i32) (i32.const 1) (then (drop))) )) \"type mismatch\")",
    "(assert_invalid (module (func $type-param-void-vs-nums (if (param i32 f64) (i32.const 1) (then (drop) (drop))) )) \"type mismatch\")",
    "(assert_invalid (module (func $type-param-num-vs-num (f32.const 0) (if (param i32) (i32.const 1) (then (drop))) )) \"type mismatch\")",
    "(assert_invalid (module (func $type-param-num-vs-nums (f32.const 0) (if (param f32 i32) (i32.const 1) (then (drop) (drop))) )) \"type mismatch\")",
    "(assert_invalid (module (func $type-param-nested-void-vs-num (block (if (param i32) (i32.const 1) (then (drop)))) )) \"type mismatch\")",
    "(assert_invalid (module (func $type-param-void-vs-nums (block (if (param i32 f64) (i32.const 1) (then (drop) (drop)))) )) \"type mismatch\")",
    "(assert_invalid (module (func $type-param-num-vs-num (block (f32.const 0) (if (param i32) (i32.const 1) (then (drop)))) )) \"type mismatch\")",
    "(assert_invalid (module (func $type-param-num-vs-nums (block (f32.const 0) (if (param f32 i32) (i32.const 1) (then (drop) (drop)))) )) \"type mismatch\")",
    "(assert_malformed (module quote \"(func (param i32) (result i32) if (param $x i32) end)\") \"unexpected token\")",
    "(assert_malformed (module quote \"(func (param i32) (result i32) (if (param $x i32) (then)))\") \"unexpected token\")",
    "(assert_malformed (module quote \"(func i32.const 0 if end $l)\") \"mismatching label\")",
    "(assert_malformed (module quote \"(func i32.const 0 if $a end $l)\") \"mismatching label\")",
    "(assert_malformed (module quote \"(func i32.const 0 if else $l end)\") \"mismatching label\")",
    "(assert_malformed (module quote \"(func i32.const 0 if $a else $l end)\") \"mismatching label\")",
    "(assert_malformed (module quote \"(func i32.const 0 if else end $l)\") \"mismatching label\")",
    "(assert_malformed (module quote \"(func i32.const 0 if else $l end $l)\") \"mismatching label\")",
    "(assert_malformed (module quote \"(func i32.const 0 if else $l1 end $l2)\") \"mismatching label\")",
    "(assert_malformed (module quote \"(func i32.const 0 if $a else end $l)\") \"mismatching label\")",
    "(assert_malformed (module quote \"(func i32.const 0 if $a else $a end $l)\") \"mismatching label\")",
    "(assert_malformed (module quote \"(func i32.const 0 if $a else $l end $l)\") \"mismatching label\")",
    "(assert_malformed (module quote \"(func (if i32.const 0 (then) (else)))\") \"unexpected token\")"
  ],
  "dump": {
    "if.0.wasm": {
      "header": "\nif.0.wasm:\tfile format wasm 0x1\n\nSections:\n\n     Type start=0x0000000a end=0x00000067 (size=0x0000005d) count: 16\n Function start=0x00000069 end=0x0000009f (size=0x00000036) count: 53\n    Table start=0x000000a1 end=0x000000a6 (size=0x00000005) count: 1\n   Memory start=0x000000a8 end=0x000000ab (size=0x00000003) count: 1\n   Global start=0x000000ad end=0x000000b3 (size=0x00000006) count: 1\n   Export start=0x000000b6 end=0x00000404 (size=0x0000034e) count: 50\n     Elem start=0x00000406 end=0x0000040d (size=0x00000007) count: 1\n     Code start=0x00000410 end=0x000009d6 (size=0x000005c6) count: 53\n",
      "details": "\nif.0.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nType[16]:\n - type[0] (i32, i32) -> i32\n - type[1] () -> nil\n - type[2] () -> i32\n - type[3] (i32) -> nil\n - type[4] (i32, f64, i32) -> (i32, f64, i32)\n - type[5] (i32) -> i32\n - type[6] (i32) -> (i32, i32)\n - type[7] () -> (i32, i64, i32)\n - type[8] () -> (i32, i32)\n - type[9] () -> (f32, f32)\n - type[10] (i32) -> (i32, i32, i64)\n - type[11] () -> (i32, i32, i64)\n - type[12] (i32, i32) -> (i32, i32)\n - type[13] (i64, i64, i32) -> (i64, i32)\n - type[14] (i64, i64) -> i64\n - type[15] (i64) -> i64\nFunction[53]:\n - func[0] sig=1\n - func[1] sig=3 <empty>\n - func[2] sig=5 <singular>\n - func[3] sig=6 <multi>\n - func[4] sig=0 <nested>\n - func[5] sig=5 <as-select-first>\n - func[6] sig=5 <as-select-mid>\n - func[7] sig=5 <as-select-last>\n - func[8] sig=5 <as-loop-first>\n - func[9] sig=5 <as-loop-mid>\n - func[10] sig=5 <as-loop-last>\n - func[11] sig=5 <as-if-condition>\n - func[12] sig=5 <as-br_if-first>\n - func[13] sig=5 <as-br_if-last>\n - func[14] sig=5 <as-br_table-first>\n - func[15] sig=5 <as-br_table-last>\n - func[16] sig=0\n - func[17] sig=5 <as-call_indirect-first>\n - func[18] sig=5 <as-call_indirect-mid>\n - func[19] sig=5 <as-call_indirect-last>\n - func[20] sig=3 <as-store-first>\n - func[21] sig=3 <as-store-last>\n - func[22] sig=5 <as-memory.grow-value>\n - func[23] sig=5\n - func[24] sig=5 <as-call-value>\n - func[25] sig=5 <as-return-value>\n - func[26] sig=3 <as-drop-operand>\n - func[27] sig=5 <as-br-value>\n - func[28] sig=5 <as-local.set-value>\n - func[29] sig=5 <as-local.tee-value>\n - func[30] sig=5 <as-global.set-value>\n - func[31] sig=5 <as-load-operand>\n - func[32] sig=5 <as-unary-operand>\n - func[33] sig=0 <as-binary-operand>\n - func[34] sig=5 <as-test-operand>\n - func[35] sig=0 <as-compare-operand>\n - func[36] sig=5 <as-binary-operands>\n - func[37] sig=5 <as-compare-operands>\n - func[38] sig=5 <as-mixed-operands>\n - func[39] sig=2 <break-bare>\n - func[40] sig=5 <break-value>\n - func[41] sig=10 <break-multi-value>\n - func[42] sig=5 <param>\n - func[43] sig=5 <params>\n - func[44] sig=5 <params-id>\n - func[45] sig=5 <param-break>\n - func[46] sig=5 <params-break>\n - func[47] sig=5 <params-id-break>\n - func[48] sig=5 <effects>\n - func[49] sig=13 <add64_u_with_carry>\n - func[50] sig=14 <add64_u_saturated>\n - func[51] sig=1 <type-use>\n - func[52] sig=1 <atypical-condition>\nTable[1]:\n - table[0] type=funcref initial=1 max=1\nMemory[1]:\n - memory[0] pages: initial=1\nGlobal[1]:\n - global[0] i32 mutable=1 - init i32=10\nExport[50]:\n - func[1] <empty> -> \"empty\"\n - func[2] <singular> -> \"singular\"\n - func[3] <multi> -> \"multi\"\n - func[4] <nested> -> \"nested\"\n - func[5] <as-select-first> -> \"as-select-first\"\n - func[6] <as-select-mid> -> \"as-select-mid\"\n - func[7] <as-select-last> -> \"as-select-last\"\n - func[8] <as-loop-first> -> \"as-loop-first\"\n - func[9] <as-loop-mid> -> \"as-loop-mid\"\n - func[10] <as-loop-last> -> \"as-loop-last\"\n - func[11] <as-if-condition> -> \"as-if-condition\"\n - func[12] <as-br_if-first> -> \"as-br_if-first\"\n - func[13] <as-br_if-last> -> \"as-br_if-last\"\n - func[14] <as-br_table-first> -> \"as-br_table-first\"\n - func[15] <as-br_table-last> -> \"as-br_table-last\"\n - func[17] <as-call_indirect-first> -> \"as-call_indirect-first\"\n - func[18] <as-call_indirect-mid> -> \"as-call_indirect-mid\"\n - func[19] <as-call_indirect-last> -> \"as-call_indirect-last\"\n - func[20] <as-store-first> -> \"as-store-first\"\n - func[21] <as-store-last> -> \"as-store-last\"\n - func[22] <as-memory.grow-value> -> \"as-memory.grow-value\"\n - func[24] <as-call-value> -> \"as-call-value\"\n - func[25] <as-return-value> -> \"as-return-value\"\n - func[26] <as-drop-operand> -> \"as-drop-operand\"\n - func[27] <as-br-value> -> \"as-br-value\"\n - func[28] <as-local.set-value> -> \"as-local.set-value\"\n - func[29] <as-local.tee-value> -> \"as-local.tee-value\"\n - func[30] <as-global.set-value> -> \"as-global.set-value\"\n - func[31] <as-load-operand> -> \"as-load-operand\"\n - func[32] <as-unary-operand> -> \"as-unary-operand\"\n - func[33] <as-binary-operand> -> \"as-binary-operand\"\n - func[34] <as-test-operand> -> \"as-test-operand\"\n - func[35] <as-compare-operand> -> \"as-compare-operand\"\n - func[36] <as-binary-operands> -> \"as-binary-operands\"\n - func[37] <as-compare-operands> -> \"as-compare-operands\"\n - func[38] <as-mixed-operands> -> \"as-mixed-operands\"\n - func[39] <break-bare> -> \"break-bare\"\n - func[40] <break-value> -> \"break-value\"\n - func[41] <break-multi-value> -> \"break-multi-value\"\n - func[42] <param> -> \"param\"\n - func[43] <params> -> \"params\"\n - func[44] <params-id> -> \"params-id\"\n - func[45] <param-break> -> \"param-break\"\n - func[46] <params-break> -> \"params-break\"\n - func[47] <params-id-break> -> \"params-id-break\"\n - func[48] <effects> -> \"effects\"\n - func[49] <add64_u_with_carry> -> \"add64_u_with_carry\"\n - func[50] <add64_u_saturated> -> \"add64_u_saturated\"\n - func[51] <type-use> -> \"type-use\"\n - func[52] <atypical-condition> -> \"atypical-condition\"\nElem[1]:\n - segment[0] flags=0 table=0 count=1 - init i32=0\n  - elem[0] = ref.func:16\nCode[53]:\n - func[0] size=2\n - func[1] size=22 <empty>\n - func[2] size=26 <singular>\n - func[3] size=103 <multi>\n - func[4] size=82 <nested>\n - func[5] size=21 <as-select-first>\n - func[6] size=21 <as-select-mid>\n - func[7] size=21 <as-select-last>\n - func[8] size=23 <as-loop-first>\n - func[9] size=23 <as-loop-mid>\n - func[10] size=23 <as-loop-last>\n - func[11] size=24 <as-if-condition>\n - func[12] size=26 <as-br_if-first>\n - func[13] size=26 <as-br_if-last>\n - func[14] size=25 <as-br_table-first>\n - func[15] size=25 <as-br_table-last>\n - func[16] size=4\n - func[17] size=26 <as-call_indirect-first>\n - func[18] size=26 <as-call_indirect-mid>\n - func[19] size=26 <as-call_indirect-last>\n - func[20] size=21 <as-store-first>\n - func[21] size=21 <as-store-last>\n - func[22] size=14 <as-memory.grow-value>\n - func[23] size=4\n - func[24] size=14 <as-call-value>\n - func[25] size=13 <as-return-value>\n - func[26] size=13 <as-drop-operand>\n - func[27] size=17 <as-br-value>\n - func[28] size=18 <as-local.set-value>\n - func[29] size=14 <as-local.tee-value>\n - func[30] size=16 <as-global.set-value>\n - func[31] size=15 <as-load-operand>\n - func[32] size=17 <as-unary-operand>\n - func[33] size=31 <as-binary-operand>\n - func[34] size=17 <as-test-operand>\n - func[35] size=43 <as-compare-operand>\n - func[36] size=25 <as-binary-operands>\n - func[37] size=37 <as-compare-operands>\n - func[38] size=28 <as-mixed-operands>\n - func[39] size=103 <break-bare>\n - func[40] size=20 <break-value>\n - func[41] size=36 <break-multi-value>\n - func[42] size=16 <param>\n - func[43] size=14 <params>\n - func[44] size=12 <params-id>\n - func[45] size=20 <param-break>\n - func[46] size=18 <params-break>\n - func[47] size=14 <params-id-break>\n - func[48] size=81 <effects>\n - func[49] size=23 <add64_u_with_carry>\n - func[50] size=16 <add64_u_saturated>\n - func[51] size=85 <type-use>\n - func[52] size=13 <atypical-condition>\n",
      "disassemble": "\nif.0.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n000412 func[0]:\n 000413: 0b                         | end\n000415 func[1] <empty>:\n 000416: 20 00                      | local.get 0\n 000418: 04 40                      | if\n 00041a: 0b                         | end\n 00041b: 20 00                      | local.get 0\n 00041d: 04 40                      | if\n 00041f: 0b                         | end\n 000420: 20 00                      | local.get 0\n 000422: 04 40                      | if\n 000424: 0b                         | end\n 000425: 20 00                      | local.get 0\n 000427: 04 40                      | if\n 000429: 0b                         | end\n 00042a: 0b                         | end\n00042c func[2] <singular>:\n 00042d: 20 00                      | local.get 0\n 00042f: 04 40                      | if\n 000431: 01                         |   nop\n 000432: 0b                         | end\n 000433: 20 00                      | local.get 0\n 000435: 04 40                      | if\n 000437: 01                         |   nop\n 000438: 05                         | else\n 000439: 01                         |   nop\n 00043a: 0b                         | end\n 00043b: 20 00                      | local.get 0\n 00043d: 04 7f                      | if i32\n 00043f: 41 07                      |   i32.const 7\n 000441: 05                         | else\n 000442: 41 08                      |   i32.const 8\n 000444: 0b                         | end\n 000445: 0b                         | end\n000447 func[3] <multi>:\n 000448: 20 00                      | local.get 0\n 00044a: 04 40                      | if\n 00044c: 10 00                      |   call 0\n 00044e: 10 00                      |   call 0\n 000450: 10 00                      |   call 0\n 000452: 0b                         | end\n 000453: 20 00                      | local.get 0\n 000455: 04 40                      | if\n 000457: 05                         | else\n 000458: 10 00                      |   call 0\n 00045a: 10 00                      |   call 0\n 00045c: 10 00                      |   call 0\n 00045e: 0b                         | end\n 00045f: 20 00                      | local.get 0\n 000461: 04 7f                      | if i32\n 000463: 10 00                      |   call 0\n 000465: 10 00                      |   call 0\n 000467: 41 08                      |   i32.const 8\n 000469: 10 00                      |   call 0\n 00046b: 05                         | else\n 00046c: 10 00                      |   call 0\n 00046e: 10 00                      |   call 0\n 000470: 41 09                      |   i32.const 9\n 000472: 10 00                      |   call 0\n 000474: 0b                         | end\n 000475: 20 00                      | local.get 0\n 000477: 04 07                      | if type[7]\n 000479: 10 00                      |   call 0\n 00047b: 10 00                      |   call 0\n 00047d: 41 01                      |   i32.const 1\n 00047f: 10 00                      |   call 0\n 000481: 10 00                      |   call 0\n 000483: 10 00                      |   call 0\n 000485: 42 02                      |   i64.const 2\n 000487: 10 00                      |   call 0\n 000489: 10 00                      |   call 0\n 00048b: 10 00                      |   call 0\n 00048d: 41 03                      |   i32.const 3\n 00048f: 10 00                      |   call 0\n 000491: 05                         | else\n 000492: 10 00                      |   call 0\n 000494: 10 00                      |   call 0\n 000496: 41 7f                      |   i32.const 4294967295\n 000498: 10 00                      |   call 0\n 00049a: 10 00                      |   call 0\n 00049c: 10 00                      |   call 0\n 00049e: 42 7e                      |   i64.const 18446744073709551614\n 0004a0: 10 00                      |   call 0\n 0004a2: 10 00                      |   call 0\n 0004a4: 10 00                      |   call 0\n 0004a6: 41 7d                      |   i32.const 4294967293\n 0004a8: 10 00                      |   call 0\n 0004aa: 0b                         | end\n 0004ab: 1a                         | drop\n 0004ac: 1a                         | drop\n 0004ad: 0b                         | end\n0004af func[4] <nested>:\n 0004b0: 20 00                      | local.get 0\n 0004b2: 04 7f                      | if i32\n 0004b4: 20 01                      |   local.get 1\n 0004b6: 04 40                      |   if\n 0004b8: 10 00                      |     call 0\n 0004ba: 02 40                      |     block\n 0004bc: 0b                         |     end\n 0004bd: 01                         |     nop\n 0004be: 0b                         |   end\n 0004bf: 20 01                      |   local.get 1\n 0004c1: 04 40                      |   if\n 0004c3: 05                         |   else\n 0004c4: 10 00                      |     call 0\n 0004c6: 02 40                      |     block\n 0004c8: 0b                         |     end\n 0004c9: 01                         |     nop\n 0004ca: 0b                         |   end\n 0004cb: 20 01                      |   local.get 1\n 0004cd: 04 7f                      |   if i32\n 0004cf: 10 00                      |     call 0\n 0004d1: 41 09                      |     i32.const 9\n 0004d3: 05                         |   else\n 0004d4: 10 00                      |     call 0\n 0004d6: 41 0a                      |     i32.const 10\n 0004d8: 0b                         |   end\n 0004d9: 05                         | else\n 0004da: 20 01                      |   local.get 1\n 0004dc: 04 40                      |   if\n 0004de: 10 00                      |     call 0\n 0004e0: 02 40                      |     block\n 0004e2: 0b                         |     end\n 0004e3: 01                         |     nop\n 0004e4: 0b                         |   end\n 0004e5: 20 01                      |   local.get 1\n 0004e7: 04 40                      |   if\n 0004e9: 05                         |   else\n 0004ea: 10 00                      |     call 0\n 0004ec: 02 40                      |     block\n 0004ee: 0b                         |     end\n 0004ef: 01                         |     nop\n 0004f0: 0b                         |   end\n 0004f1: 20 01                      |   local.get 1\n 0004f3: 04 7f                      |   if i32\n 0004f5: 10 00                      |     call 0\n 0004f7: 41 0a                      |     i32.const 10\n 0004f9: 05                         |   else\n 0004fa: 10 00                      |     call 0\n 0004fc: 41 0b                      |     i32.const 11\n 0004fe: 0b                         |   end\n 0004ff: 0b                         | end\n 000500: 0b                         | end\n000502 func[5] <as-select-first>:\n 000503: 20 00                      | local.get 0\n 000505: 04 7f                      | if i32\n 000507: 10 00                      |   call 0\n 000509: 41 01                      |   i32.const 1\n 00050b: 05                         | else\n 00050c: 10 00                      |   call 0\n 00050e: 41 00                      |   i32.const 0\n 000510: 0b                         | end\n 000511: 41 02                      | i32.const 2\n 000513: 41 03                      | i32.const 3\n 000515: 1b                         | select\n 000516: 0b                         | end\n000518 func[6] <as-select-mid>:\n 000519: 41 02                      | i32.const 2\n 00051b: 20 00                      | local.get 0\n 00051d: 04 7f                      | if i32\n 00051f: 10 00                      |   call 0\n 000521: 41 01                      |   i32.const 1\n 000523: 05                         | else\n 000524: 10 00                      |   call 0\n 000526: 41 00                      |   i32.const 0\n 000528: 0b                         | end\n 000529: 41 03                      | i32.const 3\n 00052b: 1b                         | select\n 00052c: 0b                         | end\n00052e func[7] <as-select-last>:\n 00052f: 41 02                      | i32.const 2\n 000531: 41 03                      | i32.const 3\n 000533: 20 00                      | local.get 0\n 000535: 04 7f                      | if i32\n 000537: 10 00                      |   call 0\n 000539: 41 01                      |   i32.const 1\n 00053b: 05                         | else\n 00053c: 10 00                      |   call 0\n 00053e: 41 00                      |   i32.const 0\n 000540: 0b                         | end\n 000541: 1b                         | select\n 000542: 0b                         | end\n000544 func[8] <as-loop-first>:\n 000545: 03 7f                      | loop i32\n 000547: 20 00                      |   local.get 0\n 000549: 04 7f                      |   if i32\n 00054b: 10 00                      |     call 0\n 00054d: 41 01                      |     i32.const 1\n 00054f: 05                         |   else\n 000550: 10 00                      |     call 0\n 000552: 41 00                      |     i32.const 0\n 000554: 0b                         |   end\n 000555: 10 00                      |   call 0\n 000557: 10 00                      |   call 0\n 000559: 0b                         | end\n 00055a: 0b                         | end\n00055c func[9] <as-loop-mid>:\n 00055d: 03 7f                      | loop i32\n 00055f: 10 00                      |   call 0\n 000561: 20 00                      |   local.get 0\n 000563: 04 7f                      |   if i32\n 000565: 10 00                      |     call 0\n 000567: 41 01                      |     i32.const 1\n 000569: 05                         |   else\n 00056a: 10 00                      |     call 0\n 00056c: 41 00                      |     i32.const 0\n 00056e: 0b                         |   end\n 00056f: 10 00                      |   call 0\n 000571: 0b                         | end\n 000572: 0b                         | end\n000574 func[10] <as-loop-last>:\n 000575: 03 7f                      | loop i32\n 000577: 10 00                      |   call 0\n 000579: 10 00                      |   call 0\n 00057b: 20 00                      |   local.get 0\n 00057d: 04 7f                      |   if i32\n 00057f: 10 00                      |     call 0\n 000581: 41 01                      |     i32.const 1\n 000583: 05                         |   else\n 000584: 10 00                      |     call 0\n 000586: 41 00                      |     i32.const 0\n 000588: 0b                         |   end\n 000589: 0b                         | end\n 00058a: 0b                         | end\n00058c func[11] <as-if-condition>:\n 00058d: 20 00                      | local.get 0\n 00058f: 04 7f                      | if i32\n 000591: 41 01                      |   i32.const 1\n 000593: 05                         | else\n 000594: 41 00                      |   i32.const 0\n 000596: 0b                         | end\n 000597: 04 7f                      | if i32\n 000599: 10 00                      |   call 0\n 00059b: 41 02                      |   i32.const 2\n 00059d: 05                         | else\n 00059e: 10 00                      |   call 0\n 0005a0: 41 03                      |   i32.const 3\n 0005a2: 0b                         | end\n 0005a3: 0b                         | end\n0005a5 func[12] <as-br_if-first>:\n 0005a6: 02 7f                      | block i32\n 0005a8: 20 00                      |   local.get 0\n 0005aa: 04 7f                      |   if i32\n 0005ac: 10 00                      |     call 0\n 0005ae: 41 01                      |     i32.const 1\n 0005b0: 05                         |   else\n 0005b1: 10 00                      |     call 0\n 0005b3: 41 00                      |     i32.const 0\n 0005b5: 0b                         |   end\n 0005b6: 41 02                      |   i32.const 2\n 0005b8: 0d 00                      |   br_if 0\n 0005ba: 41 03                      |   i32.const 3\n 0005bc: 0f                         |   return\n 0005bd: 0b                         | end\n 0005be: 0b                         | end\n0005c0 func[13] <as-br_if-last>:\n 0005c1: 02 7f                      | block i32\n 0005c3: 41 02                      |   i32.const 2\n 0005c5: 20 00                      |   local.get 0\n 0005c7: 04 7f                      |   if i32\n 0005c9: 10 00                      |     call 0\n 0005cb: 41 01                      |     i32.const 1\n 0005cd: 05                         |   else\n 0005ce: 10 00                      |     call 0\n 0005d0: 41 00                      |     i32.const 0\n 0005d2: 0b                         |   end\n 0005d3: 0d 00                      |   br_if 0\n 0005d5: 41 03                      |   i32.const 3\n 0005d7: 0f                         |   return\n 0005d8: 0b                         | end\n 0005d9: 0b                         | end\n0005db func[14] <as-br_table-first>:\n 0005dc: 02 7f                      | block i32\n 0005de: 20 00                      |   local.get 0\n 0005e0: 04 7f                      |   if i32\n 0005e2: 10 00                      |     call 0\n 0005e4: 41 01                      |     i32.const 1\n 0005e6: 05                         |   else\n 0005e7: 10 00                      |     call 0\n 0005e9: 41 00                      |     i32.const 0\n 0005eb: 0b                         |   end\n 0005ec: 41 02                      |   i32.const 2\n 0005ee: 0e 01 00 00                |   br_table 0 0\n 0005f2: 0b                         | end\n 0005f3: 0b                         | end\n0005f5 func[15] <as-br_table-last>:\n 0005f6: 02 7f                      | block i32\n 0005f8: 41 02                      |   i32.const 2\n 0005fa: 20 00                      |   local.get 0\n 0005fc: 04 7f                      |   if i32\n 0005fe: 10 00                      |     call 0\n 000600: 41 01                      |     i32.const 1\n 000602: 05                         |   else\n 000603: 10 00                      |     call 0\n 000605: 41 00                      |     i32.const 0\n 000607: 0b                         |   end\n 000608: 0e 01 00 00                |   br_table 0 0\n 00060c: 0b                         | end\n 00060d: 0b                         | end\n00060f func[16]:\n 000610: 20 00                      | local.get 0\n 000612: 0b                         | end\n000614 func[17] <as-call_indirect-first>:\n 000615: 02 7f                      | block i32\n 000617: 20 00                      |   local.get 0\n 000619: 04 7f                      |   if i32\n 00061b: 10 00                      |     call 0\n 00061d: 41 01                      |     i32.const 1\n 00061f: 05                         |   else\n 000620: 10 00                      |     call 0\n 000622: 41 00                      |     i32.const 0\n 000624: 0b                         |   end\n 000625: 41 02                      |   i32.const 2\n 000627: 41 00                      |   i32.const 0\n 000629: 11 00 00                   |   call_indirect 0 (type 0)\n 00062c: 0b                         | end\n 00062d: 0b                         | end\n00062f func[18] <as-call_indirect-mid>:\n 000630: 02 7f                      | block i32\n 000632: 41 02                      |   i32.const 2\n 000634: 20 00                      |   local.get 0\n 000636: 04 7f                      |   if i32\n 000638: 10 00                      |     call 0\n 00063a: 41 01                      |     i32.const 1\n 00063c: 05                         |   else\n 00063d: 10 00                      |     call 0\n 00063f: 41 00                      |     i32.const 0\n 000641: 0b                         |   end\n 000642: 41 00                      |   i32.const 0\n 000644: 11 00 00                   |   call_indirect 0 (type 0)\n 000647: 0b                         | end\n 000648: 0b                         | end\n00064a func[19] <as-call_indirect-last>:\n 00064b: 02 7f                      | block i32\n 00064d: 41 02                      |   i32.const 2\n 00064f: 41 00                      |   i32.const 0\n 000651: 20 00                      |   local.get 0\n 000653: 04 7f                      |   if i32\n 000655: 10 00                      |     call 0\n 000657: 41 01                      |     i32.const 1\n 000659: 05                         |   else\n 00065a: 10 00                      |     call 0\n 00065c: 41 00                      |     i32.const 0\n 00065e: 0b                         |   end\n 00065f: 11 00 00                   |   call_indirect 0 (type 0)\n 000662: 0b                         | end\n 000663: 0b                         | end\n000665 func[20] <as-store-first>:\n 000666: 20 00                      | local.get 0\n 000668: 04 7f                      | if i32\n 00066a: 10 00                      |   call 0\n 00066c: 41 01                      |   i32.const 1\n 00066e: 05                         | else\n 00066f: 10 00                      |   call 0\n 000671: 41 00                      |   i32.const 0\n 000673: 0b                         | end\n 000674: 41 02                      | i32.const 2\n 000676: 36 02 00                   | i32.store 2 0\n 000679: 0b                         | end\n00067b func[21] <as-store-last>:\n 00067c: 41 02                      | i32.const 2\n 00067e: 20 00                      | local.get 0\n 000680: 04 7f                      | if i32\n 000682: 10 00                      |   call 0\n 000684: 41 01                      |   i32.const 1\n 000686: 05                         | else\n 000687: 10 00                      |   call 0\n 000689: 41 00                      |   i32.const 0\n 00068b: 0b                         | end\n 00068c: 36 02 00                   | i32.store 2 0\n 00068f: 0b                         | end\n000691 func[22] <as-memory.grow-value>:\n 000692: 20 00                      | local.get 0\n 000694: 04 7f                      | if i32\n 000696: 41 01                      |   i32.const 1\n 000698: 05                         | else\n 000699: 41 00                      |   i32.const 0\n 00069b: 0b                         | end\n 00069c: 40 00                      | memory.grow 0\n 00069e: 0b                         | end\n0006a0 func[23]:\n 0006a1: 20 00                      | local.get 0\n 0006a3: 0b                         | end\n0006a5 func[24] <as-call-value>:\n 0006a6: 20 00                      | local.get 0\n 0006a8: 04 7f                      | if i32\n 0006aa: 41 01                      |   i32.const 1\n 0006ac: 05                         | else\n 0006ad: 41 00                      |   i32.const 0\n 0006af: 0b                         | end\n 0006b0: 10 17                      | call 23\n 0006b2: 0b                         | end\n0006b4 func[25] <as-return-value>:\n 0006b5: 20 00                      | local.get 0\n 0006b7: 04 7f                      | if i32\n 0006b9: 41 01                      |   i32.const 1\n 0006bb: 05                         | else\n 0006bc: 41 00                      |   i32.const 0\n 0006be: 0b                         | end\n 0006bf: 0f                         | return\n 0006c0: 0b                         | end\n0006c2 func[26] <as-drop-operand>:\n 0006c3: 20 00                      | local.get 0\n 0006c5: 04 7f                      | if i32\n 0006c7: 41 01                      |   i32.const 1\n 0006c9: 05                         | else\n 0006ca: 41 00                      |   i32.const 0\n 0006cc: 0b                         | end\n 0006cd: 1a                         | drop\n 0006ce: 0b                         | end\n0006d0 func[27] <as-br-value>:\n 0006d1: 02 7f                      | block i32\n 0006d3: 20 00                      |   local.get 0\n 0006d5: 04 7f                      |   if i32\n 0006d7: 41 01                      |     i32.const 1\n 0006d9: 05                         |   else\n 0006da: 41 00                      |     i32.const 0\n 0006dc: 0b                         |   end\n 0006dd: 0c 00                      |   br 0\n 0006df: 0b                         | end\n 0006e0: 0b                         | end\n0006e2 func[28] <as-local.set-value>:\n 0006e3: 01 7f                      | local[1] type=i32\n 0006e5: 20 00                      | local.get 0\n 0006e7: 04 7f                      | if i32\n 0006e9: 41 01                      |   i32.const 1\n 0006eb: 05                         | else\n 0006ec: 41 00                      |   i32.const 0\n 0006ee: 0b                         | end\n 0006ef: 21 00                      | local.set 0\n 0006f1: 20 00                      | local.get 0\n 0006f3: 0b                         | end\n0006f5 func[29] <as-local.tee-value>:\n 0006f6: 20 00                      | local.get 0\n 0006f8: 04 7f                      | if i32\n 0006fa: 41 01                      |   i32.const 1\n 0006fc: 05                         | else\n 0006fd: 41 00                      |   i32.const 0\n 0006ff: 0b                         | end\n 000700: 22 00                      | local.tee 0\n 000702: 0b                         | end\n000704 func[30] <as-global.set-value>:\n 000705: 20 00                      | local.get 0\n 000707: 04 7f                      | if i32\n 000709: 41 01                      |   i32.const 1\n 00070b: 05                         | else\n 00070c: 41 00                      |   i32.const 0\n 00070e: 0b                         | end\n 00070f: 24 00                      | global.set 0\n 000711: 23 00                      | global.get 0\n 000713: 0b                         | end\n000715 func[31] <as-load-operand>:\n 000716: 20 00                      | local.get 0\n 000718: 04 7f                      | if i32\n 00071a: 41 0b                      |   i32.const 11\n 00071c: 05                         | else\n 00071d: 41 0a                      |   i32.const 10\n 00071f: 0b                         | end\n 000720: 28 02 00                   | i32.load 2 0\n 000723: 0b                         | end\n000725 func[32] <as-unary-operand>:\n 000726: 20 00                      | local.get 0\n 000728: 04 7f                      | if i32\n 00072a: 10 00                      |   call 0\n 00072c: 41 0d                      |   i32.const 13\n 00072e: 05                         | else\n 00072f: 10 00                      |   call 0\n 000731: 41 73                      |   i32.const 4294967283\n 000733: 0b                         | end\n 000734: 68                         | i32.ctz\n 000735: 0b                         | end\n000737 func[33] <as-binary-operand>:\n 000738: 20 00                      | local.get 0\n 00073a: 04 7f                      | if i32\n 00073c: 10 00                      |   call 0\n 00073e: 41 03                      |   i32.const 3\n 000740: 05                         | else\n 000741: 10 00                      |   call 0\n 000743: 41 7d                      |   i32.const 4294967293\n 000745: 0b                         | end\n 000746: 20 01                      | local.get 1\n 000748: 04 7f                      | if i32\n 00074a: 10 00                      |   call 0\n 00074c: 41 04                      |   i32.const 4\n 00074e: 05                         | else\n 00074f: 10 00                      |   call 0\n 000751: 41 7b                      |   i32.const 4294967291\n 000753: 0b                         | end\n 000754: 6c                         | i32.mul\n 000755: 0b                         | end\n000757 func[34] <as-test-operand>:\n 000758: 20 00                      | local.get 0\n 00075a: 04 7f                      | if i32\n 00075c: 10 00                      |   call 0\n 00075e: 41 0d                      |   i32.const 13\n 000760: 05                         | else\n 000761: 10 00                      |   call 0\n 000763: 41 00                      |   i32.const 0\n 000765: 0b                         | end\n 000766: 45                         | i32.eqz\n 000767: 0b                         | end\n000769 func[35] <as-compare-operand>:\n 00076a: 20 00                      | local.get 0\n 00076c: 04 7d                      | if f32\n 00076e: 10 00                      |   call 0\n 000770: 43 00 00 40 40             |   f32.const 0x1.8p+1\n 000775: 05                         | else\n 000776: 10 00                      |   call 0\n 000778: 43 00 00 40 c0             |   f32.const -0x1.8p+1\n 00077d: 0b                         | end\n 00077e: 20 01                      | local.get 1\n 000780: 04 7d                      | if f32\n 000782: 10 00                      |   call 0\n 000784: 43 00 00 80 40             |   f32.const 0x1p+2\n 000789: 05                         | else\n 00078a: 10 00                      |   call 0\n 00078c: 43 00 00 80 c0             |   f32.const -0x1p+2\n 000791: 0b                         | end\n 000792: 5e                         | f32.gt\n 000793: 0b                         | end\n000795 func[36] <as-binary-operands>:\n 000796: 20 00                      | local.get 0\n 000798: 04 08                      | if type[8]\n 00079a: 10 00                      |   call 0\n 00079c: 41 03                      |   i32.const 3\n 00079e: 10 00                      |   call 0\n 0007a0: 41 04                      |   i32.const 4\n 0007a2: 05                         | else\n 0007a3: 10 00                      |   call 0\n 0007a5: 41 03                      |   i32.const 3\n 0007a7: 10 00                      |   call 0\n 0007a9: 41 7c                      |   i32.const 4294967292\n 0007ab: 0b                         | end\n 0007ac: 6c                         | i32.mul\n 0007ad: 0b                         | end\n0007af func[37] <as-compare-operands>:\n 0007b0: 20 00                      | local.get 0\n 0007b2: 04 09                      | if type[9]\n 0007b4: 10 00                      |   call 0\n 0007b6: 43 00 00 40 40             |   f32.const 0x1.8p+1\n 0007bb: 10 00                      |   call 0\n 0007bd: 43 00 00 40 40             |   f32.const 0x1.8p+1\n 0007c2: 05                         | else\n 0007c3: 10 00                      |   call 0\n 0007c5: 43 00 00 00 c0             |   f32.const -0x1p+1\n 0007ca: 10 00                      |   call 0\n 0007cc: 43 00 00 40 c0             |   f32.const -0x1.8p+1\n 0007d1: 0b                         | end\n 0007d2: 5e                         | f32.gt\n 0007d3: 0b                         | end\n0007d5 func[38] <as-mixed-operands>:\n 0007d6: 20 00                      | local.get 0\n 0007d8: 04 08                      | if type[8]\n 0007da: 10 00                      |   call 0\n 0007dc: 41 03                      |   i32.const 3\n 0007de: 10 00                      |   call 0\n 0007e0: 41 04                      |   i32.const 4\n 0007e2: 05                         | else\n 0007e3: 10 00                      |   call 0\n 0007e5: 41 7d                      |   i32.const 4294967293\n 0007e7: 10 00                      |   call 0\n 0007e9: 41 7c                      |   i32.const 4294967292\n 0007eb: 0b                         | end\n 0007ec: 41 05                      | i32.const 5\n 0007ee: 6a                         | i32.add\n 0007ef: 6c                         | i32.mul\n 0007f0: 0b                         | end\n0007f2 func[39] <break-bare>:\n 0007f3: 41 01                      | i32.const 1\n 0007f5: 04 40                      | if\n 0007f7: 0c 00                      |   br 0\n 0007f9: 00                         |   unreachable\n 0007fa: 0b                         | end\n 0007fb: 41 01                      | i32.const 1\n 0007fd: 04 40                      | if\n 0007ff: 0c 00                      |   br 0\n 000801: 00                         |   unreachable\n 000802: 05                         | else\n 000803: 00                         |   unreachable\n 000804: 0b                         | end\n 000805: 41 00                      | i32.const 0\n 000807: 04 40                      | if\n 000809: 00                         |   unreachable\n 00080a: 05                         | else\n 00080b: 0c 00                      |   br 0\n 00080d: 00                         |   unreachable\n 00080e: 0b                         | end\n 00080f: 41 01                      | i32.const 1\n 000811: 04 40                      | if\n 000813: 41 01                      |   i32.const 1\n 000815: 0d 00                      |   br_if 0\n 000817: 00                         |   unreachable\n 000818: 0b                         | end\n 000819: 41 01                      | i32.const 1\n 00081b: 04 40                      | if\n 00081d: 41 01                      |   i32.const 1\n 00081f: 0d 00                      |   br_if 0\n 000821: 00                         |   unreachable\n 000822: 05                         | else\n 000823: 00                         |   unreachable\n 000824: 0b                         | end\n 000825: 41 00                      | i32.const 0\n 000827: 04 40                      | if\n 000829: 00                         |   unreachable\n 00082a: 05                         | else\n 00082b: 41 01                      |   i32.const 1\n 00082d: 0d 00                      |   br_if 0\n 00082f: 00                         |   unreachable\n 000830: 0b                         | end\n 000831: 41 01                      | i32.const 1\n 000833: 04 40                      | if\n 000835: 41 00                      |   i32.const 0\n 000837: 0e 00 00                   |   br_table 0\n 00083a: 00                         |   unreachable\n 00083b: 0b                         | end\n 00083c: 41 01                      | i32.const 1\n 00083e: 04 40                      | if\n 000840: 41 00                      |   i32.const 0\n 000842: 0e 00 00                   |   br_table 0\n 000845: 00                         |   unreachable\n 000846: 05                         | else\n 000847: 00                         |   unreachable\n 000848: 0b                         | end\n 000849: 41 00                      | i32.const 0\n 00084b: 04 40                      | if\n 00084d: 00                         |   unreachable\n 00084e: 05                         | else\n 00084f: 41 00                      |   i32.const 0\n 000851: 0e 00 00                   |   br_table 0\n 000854: 00                         |   unreachable\n 000855: 0b                         | end\n 000856: 41 13                      | i32.const 19\n 000858: 0b                         | end\n00085a func[40] <break-value>:\n 00085b: 20 00                      | local.get 0\n 00085d: 04 7f                      | if i32\n 00085f: 41 12                      |   i32.const 18\n 000861: 0c 00                      |   br 0\n 000863: 41 13                      |   i32.const 19\n 000865: 05                         | else\n 000866: 41 15                      |   i32.const 21\n 000868: 0c 00                      |   br 0\n 00086a: 41 14                      |   i32.const 20\n 00086c: 0b                         | end\n 00086d: 0b                         | end\n00086f func[41] <break-multi-value>:\n 000870: 20 00                      | local.get 0\n 000872: 04 0b                      | if type[11]\n 000874: 41 12                      |   i32.const 18\n 000876: 41 6e                      |   i32.const 4294967278\n 000878: 42 12                      |   i64.const 18\n 00087a: 0c 00                      |   br 0\n 00087c: 41 13                      |   i32.const 19\n 00087e: 41 6d                      |   i32.const 4294967277\n 000880: 42 13                      |   i64.const 19\n 000882: 05                         | else\n 000883: 41 6e                      |   i32.const 4294967278\n 000885: 41 12                      |   i32.const 18\n 000887: 42 6e                      |   i64.const 18446744073709551598\n 000889: 0c 00                      |   br 0\n 00088b: 41 6d                      |   i32.const 4294967277\n 00088d: 41 13                      |   i32.const 19\n 00088f: 42 6d                      |   i64.const 18446744073709551597\n 000891: 0b                         | end\n 000892: 0b                         | end\n000894 func[42] <param>:\n 000895: 41 01                      | i32.const 1\n 000897: 20 00                      | local.get 0\n 000899: 04 05                      | if type[5]\n 00089b: 41 02                      |   i32.const 2\n 00089d: 6a                         |   i32.add\n 00089e: 05                         | else\n 00089f: 41 7e                      |   i32.const 4294967294\n 0008a1: 6a                         |   i32.add\n 0008a2: 0b                         | end\n 0008a3: 0b                         | end\n0008a5 func[43] <params>:\n 0008a6: 41 01                      | i32.const 1\n 0008a8: 41 02                      | i32.const 2\n 0008aa: 20 00                      | local.get 0\n 0008ac: 04 00                      | if type[0]\n 0008ae: 6a                         |   i32.add\n 0008af: 05                         | else\n 0008b0: 6b                         |   i32.sub\n 0008b1: 0b                         | end\n 0008b2: 0b                         | end\n0008b4 func[44] <params-id>:\n 0008b5: 41 01                      | i32.const 1\n 0008b7: 41 02                      | i32.const 2\n 0008b9: 20 00                      | local.get 0\n 0008bb: 04 0c                      | if type[12]\n 0008bd: 0b                         | end\n 0008be: 6a                         | i32.add\n 0008bf: 0b                         | end\n0008c1 func[45] <param-break>:\n 0008c2: 41 01                      | i32.const 1\n 0008c4: 20 00                      | local.get 0\n 0008c6: 04 05                      | if type[5]\n 0008c8: 41 02                      |   i32.const 2\n 0008ca: 6a                         |   i32.add\n 0008cb: 0c 00                      |   br 0\n 0008cd: 05                         | else\n 0008ce: 41 7e                      |   i32.const 4294967294\n 0008d0: 6a                         |   i32.add\n 0008d1: 0c 00                      |   br 0\n 0008d3: 0b                         | end\n 0008d4: 0b                         | end\n0008d6 func[46] <params-break>:\n 0008d7: 41 01                      | i32.const 1\n 0008d9: 41 02                      | i32.const 2\n 0008db: 20 00                      | local.get 0\n 0008dd: 04 00                      | if type[0]\n 0008df: 6a                         |   i32.add\n 0008e0: 0c 00                      |   br 0\n 0008e2: 05                         | else\n 0008e3: 6b                         |   i32.sub\n 0008e4: 0c 00                      |   br 0\n 0008e6: 0b                         | end\n 0008e7: 0b                         | end\n0008e9 func[47] <params-id-break>:\n 0008ea: 41 01                      | i32.const 1\n 0008ec: 41 02                      | i32.const 2\n 0008ee: 20 00                      | local.get 0\n 0008f0: 04 0c                      | if type[12]\n 0008f2: 0c 00                      |   br 0\n 0008f4: 0b                         | end\n 0008f5: 6a                         | i32.add\n 0008f6: 0b                         | end\n0008f8 func[48] <effects>:\n 0008f9: 01 7f                      | local[1] type=i32\n 0008fb: 02 7f                      | block i32\n 0008fd: 41 01                      |   i32.const 1\n 0008ff: 21 01                      |   local.set 1\n 000901: 20 00                      |   local.get 0\n 000903: 0b                         | end\n 000904: 04 40                      | if\n 000906: 20 01                      |   local.get 1\n 000908: 41 03                      |   i32.const 3\n 00090a: 6c                         |   i32.mul\n 00090b: 21 01                      |   local.set 1\n 00090d: 20 01                      |   local.get 1\n 00090f: 41 05                      |   i32.const 5\n 000911: 6b                         |   i32.sub\n 000912: 21 01                      |   local.set 1\n 000914: 20 01                      |   local.get 1\n 000916: 41 07                      |   i32.const 7\n 000918: 6c                         |   i32.mul\n 000919: 21 01                      |   local.set 1\n 00091b: 0c 00                      |   br 0\n 00091d: 20 01                      |   local.get 1\n 00091f: 41 e4 00                   |   i32.const 100\n 000922: 6c                         |   i32.mul\n 000923: 21 01                      |   local.set 1\n 000925: 05                         | else\n 000926: 20 01                      |   local.get 1\n 000928: 41 05                      |   i32.const 5\n 00092a: 6c                         |   i32.mul\n 00092b: 21 01                      |   local.set 1\n 00092d: 20 01                      |   local.get 1\n 00092f: 41 07                      |   i32.const 7\n 000931: 6b                         |   i32.sub\n 000932: 21 01                      |   local.set 1\n 000934: 20 01                      |   local.get 1\n 000936: 41 03                      |   i32.const 3\n 000938: 6c                         |   i32.mul\n 000939: 21 01                      |   local.set 1\n 00093b: 0c 00                      |   br 0\n 00093d: 20 01                      |   local.get 1\n 00093f: 41 e8 07                   |   i32.const 1000\n 000942: 6c                         |   i32.mul\n 000943: 21 01                      |   local.set 1\n 000945: 0b                         | end\n 000946: 20 01                      | local.get 1\n 000948: 0b                         | end\n00094a func[49] <add64_u_with_carry>:\n 00094b: 01 7e                      | local[3] type=i64\n 00094d: 20 00                      | local.get 0\n 00094f: 20 01                      | local.get 1\n 000951: 7c                         | i64.add\n 000952: 20 02                      | local.get 2\n 000954: ad                         | i64.extend_i32_u\n 000955: 7c                         | i64.add\n 000956: 21 03                      | local.set 3\n 000958: 20 03                      | local.get 3\n 00095a: 20 03                      | local.get 3\n 00095c: 20 00                      | local.get 0\n 00095e: 54                         | i64.lt_u\n 00095f: 0f                         | return\n 000960: 0b                         | end\n000962 func[50] <add64_u_saturated>:\n 000963: 20 00                      | local.get 0\n 000965: 20 01                      | local.get 1\n 000967: 41 00                      | i32.const 0\n 000969: 10 31                      | call 49 <add64_u_with_carry>\n 00096b: 04 0f                      | if type[15]\n 00096d: 1a                         |   drop\n 00096e: 42 7f                      |   i64.const 18446744073709551615\n 000970: 0b                         | end\n 000971: 0b                         | end\n000973 func[51] <type-use>:\n 000974: 41 01                      | i32.const 1\n 000976: 04 40                      | if\n 000978: 0b                         | end\n 000979: 41 01                      | i32.const 1\n 00097b: 04 7f                      | if i32\n 00097d: 41 00                      |   i32.const 0\n 00097f: 05                         | else\n 000980: 41 02                      |   i32.const 2\n 000982: 0b                         | end\n 000983: 41 01                      | i32.const 1\n 000985: 04 03                      | if type[3]\n 000987: 1a                         |   drop\n 000988: 05                         | else\n 000989: 1a                         |   drop\n 00098a: 0b                         | end\n 00098b: 41 00                      | i32.const 0\n 00098d: 44 00 00 00 00 00 00 00 00 | f64.const 0x0p+0\n 000996: 41 00                      | i32.const 0\n 000998: 41 01                      | i32.const 1\n 00099a: 04 04                      | if type[4]\n 00099c: 0b                         | end\n 00099d: 1a                         | drop\n 00099e: 1a                         | drop\n 00099f: 1a                         | drop\n 0009a0: 41 01                      | i32.const 1\n 0009a2: 04 7f                      | if i32\n 0009a4: 41 00                      |   i32.const 0\n 0009a6: 05                         | else\n 0009a7: 41 02                      |   i32.const 2\n 0009a9: 0b                         | end\n 0009aa: 41 01                      | i32.const 1\n 0009ac: 04 03                      | if type[3]\n 0009ae: 1a                         |   drop\n 0009af: 05                         | else\n 0009b0: 1a                         |   drop\n 0009b1: 0b                         | end\n 0009b2: 41 00                      | i32.const 0\n 0009b4: 44 00 00 00 00 00 00 00 00 | f64.const 0x0p+0\n 0009bd: 41 00                      | i32.const 0\n 0009bf: 41 01                      | i32.const 1\n 0009c1: 04 04                      | if type[4]\n 0009c3: 0b                         | end\n 0009c4: 1a                         | drop\n 0009c5: 1a                         | drop\n 0009c6: 1a                         | drop\n 0009c7: 0b                         | end\n0009c9 func[52] <atypical-condition>:\n 0009ca: 41 00                      | i32.const 0\n 0009cc: 04 40                      | if\n 0009ce: 0b                         | end\n 0009cf: 41 01                      | i32.const 1\n 0009d1: 45                         | i32.eqz\n 0009d2: 04 40                      | if\n 0009d4: 0b                         | end\n 0009d5: 0b                         | end\n"
    }
  }
}
