{
  "bin": {
    "float_exprs.0.wasm": "AGFzbQEAAAABCAFgA3x8fAF8AwIBAAcWARJmNjQubm9fY29udHJhY3Rpb24AAAoMAQoAIAAgAaIgAqAL",
    "float_exprs.1.wasm": "AGFzbQEAAAABDwJgA319fQF9YAN8fHwBfAMDAgABBxsCCmYzMi5ub19mbWEAAApmNjQubm9fZm1hAAEKFwIKACAAIAGUIAKSCwoAIAAgAaIgAqAL",
    "float_exprs.10.wasm": "AGFzbQEAAAABCwJgAX0BfWABfAF8AwMCAAEHLwIUZjMyLm5vX2ZvbGRfbmVnMF9zdWIAABRmNjQubm9fZm9sZF9uZWcwX3N1YgABChsCCgBDAAAAgCAAkwsOAEQAAAAAAAAAgCAAoQs=",
    "float_exprs.11.wasm": "AGFzbQEAAAABCwJgAX0BfWABfAF8AwMCAAEHLwIUZjMyLm5vX2ZvbGRfbmVnMV9tdWwAABRmNjQubm9fZm9sZF9uZWcxX211bAABChsCCgBDAACAvyAAlAsOAEQAAAAAAADwvyAAogs=",
    "float_exprs.12.wasm": "AGFzbQEAAAABCwJgAX0Bf2ABfAF/AwMCAAEHLQITZjMyLm5vX2ZvbGRfZXFfc2VsZgAAE2Y2NC5ub19mb2xkX2VxX3NlbGYAAQoRAgcAIAAgAFsLBwAgACAAYQs=",
    "float_exprs.13.wasm": "AGFzbQEAAAABCwJgAX0Bf2ABfAF/AwMCAAEHLQITZjMyLm5vX2ZvbGRfbmVfc2VsZgAAE2Y2NC5ub19mb2xkX25lX3NlbGYAAQoRAgcAIAAgAFwLBwAgACAAYgs=",
    "float_exprs.14.wasm": "AGFzbQEAAAABCwJgAX0BfWABfAF8AwMCAAEHLwIUZjMyLm5vX2ZvbGRfc3ViX3NlbGYAABRmNjQubm9fZm9sZF9zdWJfc2VsZgABChECBwAgACAAkwsHACAAIAChCw==",
    "float_exprs.15.wasm": "AGFzbQEAAAABCwJgAX0BfWABfAF8AwMCAAEHLwIUZjMyLm5vX2ZvbGRfZGl2X3NlbGYAABRmNjQubm9fZm9sZF9kaXZfc2VsZgABChECBwAgACAAlQsHACAAIACjCw==",
    "float_exprs.16.wasm": "AGFzbQEAAAABCwJgAX0BfWABfAF8AwMCAAEHKQIRZjMyLm5vX2ZvbGRfZGl2XzMAABFmNjQubm9fZm9sZF9kaXZfMwABChsCCgAgAEMAAEBAlQsOACAARAAAAAAAAAhAows=",
    "float_exprs.17.wasm": "AGFzbQEAAAABDwJgA319fQF9YAN8fHwBfAMDAgABByECDWYzMi5ub19mYWN0b3IAAA1mNjQubm9fZmFjdG9yAAEKHQINACAAIAKUIAEgApSSCw0AIAAgAqIgASACoqAL",
    "float_exprs.18.wasm": "AGFzbQEAAAABDwJgA319fQF9YAN8fHwBfAMDAgABBykCEWYzMi5ub19kaXN0cmlidXRlAAARZjY0Lm5vX2Rpc3RyaWJ1dGUAAQoXAgoAIAAgAZIgApQLCgAgACABoCACogs=",
    "float_exprs.19.wasm": "AGFzbQEAAAABDwJgA319fQF9YAN8fHwBfAMDAgABBzMCFmYzMi5ub19yZWdyb3VwX2Rpdl9tdWwAABZmNjQubm9fcmVncm91cF9kaXZfbXVsAAEKFwIKACAAIAEgApWUCwoAIAAgASACo6IL",
    "float_exprs.2.wasm": "AGFzbQEAAAABCwJgAX0BfWABfAF8AwMCAAEHLwIUZjMyLm5vX2ZvbGRfYWRkX3plcm8AABRmNjQubm9fZm9sZF9hZGRfemVybwABChsCCgAgAEMAAAAAkgsOACAARAAAAAAAAAAAoAs=",
    "float_exprs.20.wasm": "AGFzbQEAAAABDwJgA319fQF9YAN8fHwBfAMDAgABBzMCFmYzMi5ub19yZWdyb3VwX211bF9kaXYAABZmNjQubm9fcmVncm91cF9tdWxfZGl2AAEKFwIKACAAIAGUIAKVCwoAIAAgAaIgAqML",
    "float_exprs.21.wasm": "AGFzbQEAAAABEQJgBH19fX0BfWAEfHx8fAF8AwMCAAEHMwIWZjMyLm5vX3JlYXNzb2NpYXRlX2FkZAAAFmY2NC5ub19yZWFzc29jaWF0ZV9hZGQAAQodAg0AIAAgAZIgApIgA5ILDQAgACABoCACoCADoAs=",
    "float_exprs.22.wasm": "AGFzbQEAAAABEQJgBH19fX0BfWAEfHx8fAF8AwMCAAEHMwIWZjMyLm5vX3JlYXNzb2NpYXRlX211bAAAFmY2NC5ub19yZWFzc29jaWF0ZV9tdWwAAQodAg0AIAAgAZQgApQgA5QLDQAgACABoiACoiADogs=",
    "float_exprs.23.wasm": "AGFzbQEAAAABCwJgAX0BfWABfAF8AwMCAAEHKQIRZjMyLm5vX2ZvbGRfZGl2XzAAABFmNjQubm9fZm9sZF9kaXZfMAABChsCCgAgAEMAAAAAlQsOACAARAAAAAAAAAAAows=",
    "float_exprs.24.wasm": "AGFzbQEAAAABCwJgAX0BfWABfAF8AwMCAAEHLwIUZjMyLm5vX2ZvbGRfZGl2X25lZzAAABRmNjQubm9fZm9sZF9kaXZfbmVnMAABChsCCgAgAEMAAACAlQsOACAARAAAAAAAAACAows=",
    "float_exprs.25.wasm": "AGFzbQEAAAABDQJgAn19AX1gAnx8AXwDAwIAAQcvAhRmMzIubm9fZm9sZF90b19oeXBvdAAAFGY2NC5ub19mb2xkX3RvX2h5cG90AAEKHwIOACAAIACUIAEgAZSSkQsOACAAIACiIAEgAaKgnws=",
    "float_exprs.26.wasm": "AGFzbQEAAAABBgFgAX0BfQMCAQAHIQEdZjMyLm5vX2FwcHJveGltYXRlX3JlY2lwcm9jYWwAAAoMAQoAQwAAgD8gAJUL",
    "float_exprs.27.wasm": "AGFzbQEAAAABCwJgAX0BfWABfAF8AwMCAAEHRAIiZjMyLm5vX2FwcHJveGltYXRlX3JlY2lwcm9jYWxfc3FydAAAG2Y2NC5ub19mdXNlX3JlY2lwcm9jYWxfc3FydAABCh0CCwBDAACAPyAAkZULDwBEAAAAAAAA8D8gAJ+jCw==",
    "float_exprs.28.wasm": "AGFzbQEAAAABBgFgAX0BfQMCAQAHJgEiZjMyLm5vX2FwcHJveGltYXRlX3NxcnRfcmVjaXByb2NhbAAACg0BCwBDAACAPyAAlZEL",
    "float_exprs.29.wasm": "AGFzbQEAAAABCwJgAX8Bf2ABfgF+AwUEAAABAQdRBBFpMzIubm9fZm9sZF9mMzJfcwAAEWkzMi5ub19mb2xkX2YzMl91AAERaTY0Lm5vX2ZvbGRfZjY0X3MAAhFpNjQubm9fZm9sZF9mNjRfdQADCh0EBgAgALKoCwYAIACzqQsGACAAubALBgAgALqxCw==",
    "float_exprs.3.wasm": "AGFzbQEAAAABCwJgAX0BfWABfAF8AwMCAAEHLwIUZjMyLm5vX2ZvbGRfemVyb19zdWIAABRmNjQubm9fZm9sZF96ZXJvX3N1YgABChsCCgBDAAAAACAAkwsOAEQAAAAAAAAAACAAoQs=",
    "float_exprs.30.wasm": "AGFzbQEAAAABDQJgAn19AX1gAnx8AXwDAwIAAQctAhNmMzIubm9fZm9sZF9hZGRfc3ViAAATZjY0Lm5vX2ZvbGRfYWRkX3N1YgABChcCCgAgACABkiABkwsKACAAIAGgIAGhCw==",
    "float_exprs.31.wasm": "AGFzbQEAAAABDQJgAn19AX1gAnx8AXwDAwIAAQctAhNmMzIubm9fZm9sZF9zdWJfYWRkAAATZjY0Lm5vX2ZvbGRfc3ViX2FkZAABChcCCgAgACABkyABkgsKACAAIAGhIAGgCw==",
    "float_exprs.32.wasm": "AGFzbQEAAAABDQJgAn19AX1gAnx8AXwDAwIAAQctAhNmMzIubm9fZm9sZF9tdWxfZGl2AAATZjY0Lm5vX2ZvbGRfbXVsX2RpdgABChcCCgAgACABlCABlQsKACAAIAGiIAGjCw==",
    "float_exprs.33.wasm": "AGFzbQEAAAABDQJgAn19AX1gAnx8AXwDAwIAAQctAhNmMzIubm9fZm9sZF9kaXZfbXVsAAATZjY0Lm5vX2ZvbGRfZGl2X211bAABChcCCgAgACABlSABlAsKACAAIAGjIAGiCw==",
    "float_exprs.34.wasm": "AGFzbQEAAAABCwJgAX0BfWABfAF8AwMCAAEHMQIVZjMyLm5vX2ZvbGRfZGl2Ml9tdWwyAAAVZjY0Lm5vX2ZvbGRfZGl2Ml9tdWwyAAEKKwIQACAAQwAAAECVQwAAAECUCxgAIABEAAAAAAAAAECjRAAAAAAAAABAogs=",
    "float_exprs.35.wasm": "AGFzbQEAAAABBgFgAXwBfAMCAQAHGgEWbm9fZm9sZF9kZW1vdGVfcHJvbW90ZQAACggBBgAgALa7Cw==",
    "float_exprs.36.wasm": "AGFzbQEAAAABBgFgAX0BfQMCAQAHGgEWbm9fZm9sZF9wcm9tb3RlX2RlbW90ZQAACggBBgAgALu2Cw==",
    "float_exprs.37.wasm": "AGFzbQEAAAABDQJgAnx9AX1gAn18AX0DAwIAAQc2AhNub19kZW1vdGVfbWl4ZWRfYWRkAAAcbm9fZGVtb3RlX21peGVkX2FkZF9jb21tdXRlZAABChUCCQAgACABu6C2CwkAIAC7IAGgtgs=",
    "float_exprs.38.wasm": "AGFzbQEAAAABBwFgAnx9AX0DAgEABxcBE25vX2RlbW90ZV9taXhlZF9zdWIAAAoLAQkAIAAgAbuhtgs=",
    "float_exprs.39.wasm": "AGFzbQEAAAABCwJgAX0BfWABfAF8AxEQAAAAAAEBAQEAAAAAAQEBAQfBBBAhZjMyLmkzMi5ub19mb2xkX3RydW5jX3NfY29udmVydF9zAAAhZjMyLmkzMi5ub19mb2xkX3RydW5jX3VfY29udmVydF9zAAEhZjMyLmkzMi5ub19mb2xkX3RydW5jX3NfY29udmVydF91AAIhZjMyLmkzMi5ub19mb2xkX3RydW5jX3VfY29udmVydF91AAMhZjY0LmkzMi5ub19mb2xkX3RydW5jX3NfY29udmVydF9zAAQhZjY0LmkzMi5ub19mb2xkX3RydW5jX3VfY29udmVydF9zAAUhZjY0LmkzMi5ub19mb2xkX3RydW5jX3NfY29udmVydF91AAYhZjY0LmkzMi5ub19mb2xkX3RydW5jX3VfY29udmVydF91AAchZjMyLmk2NC5ub19mb2xkX3RydW5jX3NfY29udmVydF9zAAghZjMyLmk2NC5ub19mb2xkX3RydW5jX3VfY29udmVydF9zAAkhZjMyLmk2NC5ub19mb2xkX3RydW5jX3NfY29udmVydF91AAohZjMyLmk2NC5ub19mb2xkX3RydW5jX3VfY29udmVydF91AAshZjY0Lmk2NC5ub19mb2xkX3RydW5jX3NfY29udmVydF9zAAwhZjY0Lmk2NC5ub19mb2xkX3RydW5jX3VfY29udmVydF9zAA0hZjY0Lmk2NC5ub19mb2xkX3RydW5jX3NfY29udmVydF91AA4hZjY0Lmk2NC5ub19mb2xkX3RydW5jX3VfY29udmVydF91AA8KcRAGACAAqLILBgAgAKmyCwYAIACoswsGACAAqbMLBgAgAKq3CwYAIACrtwsGACAAqrgLBgAgAKu4CwYAIACutAsGACAAr7QLBgAgAK61CwYAIACvtQsGACAAsLkLBgAgALG5CwYAIACwugsGACAAsboL",
    "float_exprs.4.wasm": "AGFzbQEAAAABCwJgAX0BfWABfAF8AwMCAAEHLwIUZjMyLm5vX2ZvbGRfc3ViX3plcm8AABRmNjQubm9fZm9sZF9zdWJfemVybwABChsCCgAgAEMAAAAAkwsOACAARAAAAAAAAAAAoQs=",
    "float_exprs.40.wasm": "AGFzbQEAAAABCwJgAn99AGABfwF9AwQDAAABBQQBAQEBBxYDBGluaXQAAANydW4AAQVjaGVjawACCjkDCQAgACABOAIACyUBAX8CQANAIAIgAioCACABlTgCACACQQRqIQIgAiAASQ0ACwsLBwAgACoCAAs=",
    "float_exprs.41.wasm": "AGFzbQEAAAABCwJgAn98AGABfwF8AwQDAAABBQQBAQEBBxYDBGluaXQAAANydW4AAQVjaGVjawACCjkDCQAgACABOQMACyUBAX8CQANAIAIgAisDACABozkDACACQQhqIQIgAiAASQ0ACwsLBwAgACsDAAs=",
    "float_exprs.42.wasm": "AGFzbQEAAAABDQJgAn19AX9gAnx8AX8DCQgAAAAAAQEBAQdRCAdmMzIudWx0AAAHZjMyLnVsZQABB2YzMi51Z3QAAgdmMzIudWdlAAMHZjY0LnVsdAAEB2Y2NC51bGUABQdmNjQudWd0AAYHZjY0LnVnZQAHCkkICAAgACABYEULCAAgACABXkULCAAgACABX0ULCAAgACABXUULCAAgACABZkULCAAgACABZEULCAAgACABZUULCAAgACABY0UL",
    "float_exprs.43.wasm": "AGFzbQEAAAABDQJgAn19AX1gAnx8AXwDCQgAAAAAAQEBAQfBAQgVZjMyLm5vX2ZvbGRfbHRfc2VsZWN0AAAVZjMyLm5vX2ZvbGRfbGVfc2VsZWN0AAEVZjMyLm5vX2ZvbGRfZ3Rfc2VsZWN0AAIVZjMyLm5vX2ZvbGRfZ2Vfc2VsZWN0AAMVZjY0Lm5vX2ZvbGRfbHRfc2VsZWN0AAQVZjY0Lm5vX2ZvbGRfbGVfc2VsZWN0AAUVZjY0Lm5vX2ZvbGRfZ3Rfc2VsZWN0AAYVZjY0Lm5vX2ZvbGRfZ2Vfc2VsZWN0AAcKaQgMACAAIAEgACABXRsLDAAgACABIAAgAV8bCwwAIAAgASAAIAFeGwsMACAAIAEgACABYBsLDAAgACABIAAgAWMbCwwAIAAgASAAIAFlGwsMACAAIAEgACABZBsLDAAgACABIAAgAWYbCw==",
    "float_exprs.44.wasm": "AGFzbQEAAAABDQJgAn19AX1gAnx8AXwDCQgAAAAAAQEBAQehAQgRZjMyLm5vX2ZvbGRfbHRfaWYAABFmMzIubm9fZm9sZF9sZV9pZgABEWYzMi5ub19mb2xkX2d0X2lmAAIRZjMyLm5vX2ZvbGRfZ2VfaWYAAxFmNjQubm9fZm9sZF9sdF9pZgAEEWY2NC5ub19mb2xkX2xlX2lmAAURZjY0Lm5vX2ZvbGRfZ3RfaWYABhFmNjQubm9fZm9sZF9nZV9pZgAHCoEBCA8AIAAgAV0EfSAABSABCwsPACAAIAFfBH0gAAUgAQsLDwAgACABXgR9IAAFIAELCw8AIAAgAWAEfSAABSABCwsPACAAIAFjBHwgAAUgAQsLDwAgACABZQR8IAAFIAELCw8AIAAgAWQEfCAABSABCwsPACAAIAFmBHwgAAUgAQsL",
    "float_exprs.45.wasm": "AGFzbQEAAAABCwJgAX0BfWABfAF8AwkIAAAAAAEBAQEH+QEIHGYzMi5ub19mb2xkX2x0X3NlbGVjdF90b19hYnMAABxmMzIubm9fZm9sZF9sZV9zZWxlY3RfdG9fYWJzAAEcZjMyLm5vX2ZvbGRfZ3Rfc2VsZWN0X3RvX2FicwACHGYzMi5ub19mb2xkX2dlX3NlbGVjdF90b19hYnMAAxxmNjQubm9fZm9sZF9sdF9zZWxlY3RfdG9fYWJzAAQcZjY0Lm5vX2ZvbGRfbGVfc2VsZWN0X3RvX2FicwAFHGY2NC5ub19mb2xkX2d0X3NlbGVjdF90b19hYnMABhxmNjQubm9fZm9sZF9nZV9zZWxlY3RfdG9fYWJzAAcKmQEIEAAgAIwgACAAQwAAAABdGwsQACAAjCAAIABDAAAAgF8bCxAAIAAgAIwgAEMAAACAXhsLEAAgACAAjCAAQwAAAABgGwsUACAAmiAAIABEAAAAAAAAAABjGwsUACAAmiAAIABEAAAAAAAAAIBlGwsUACAAIACaIABEAAAAAAAAAIBkGwsUACAAIACaIABEAAAAAAAAAABmGws=",
    "float_exprs.46.wasm": "AGFzbQEAAAABCwJgAX0BfWABfAF8AwkIAAAAAAEBAQEH2QEIGGYzMi5ub19mb2xkX2x0X2lmX3RvX2FicwAAGGYzMi5ub19mb2xkX2xlX2lmX3RvX2FicwABGGYzMi5ub19mb2xkX2d0X2lmX3RvX2FicwACGGYzMi5ub19mb2xkX2dlX2lmX3RvX2FicwADGGY2NC5ub19mb2xkX2x0X2lmX3RvX2FicwAEGGY2NC5ub19mb2xkX2xlX2lmX3RvX2FicwAFGGY2NC5ub19mb2xkX2d0X2lmX3RvX2FicwAGGGY2NC5ub19mb2xkX2dlX2lmX3RvX2FicwAHCrEBCBMAIABDAAAAAF0EfSAAjAUgAAsLEwAgAEMAAACAXwR9IACMBSAACwsTACAAQwAAAIBeBH0gAAUgAIwLCxMAIABDAAAAAGAEfSAABSAAjAsLFwAgAEQAAAAAAAAAAGMEfCAAmgUgAAsLFwAgAEQAAAAAAAAAgGUEfCAAmgUgAAsLFwAgAEQAAAAAAAAAgGQEfCAABSAAmgsLFwAgAEQAAAAAAAAAAGYEfCAABSAAmgsL",
    "float_exprs.47.wasm": "AGFzbQEAAAABCQJgAAF9YAABfAMDAgABBzcCGGYzMi5pbmNvcnJlY3RfY29ycmVjdGlvbgAAGGY2NC5pbmNvcnJlY3RfY29ycmVjdGlvbgABCkUCGQBDvp+qP0PNzJw/kkO+n6o/k0PNzJw/kwspAESHFtnO91P1P0SamZmZmZnzP6BEhxbZzvdT9T+hRJqZmZmZmfM/oQs=",
    "float_exprs.48.wasm": "AGFzbQEAAAABBQFgAAF9AwIBAAcNAQljYWxjdWxhdGUAAApKAUgBBX1DAEAcQyEAQ1VVUEMhAUMVx+M/IQIgAYwgAJQgACAClCABk5UhAyABjCAAlCAAIAKUIAGTlSEEAkAgAyAEWw0AAAsgBAs=",
    "float_exprs.49.wasm": "AGFzbQEAAAABBQFgAAF8AwIBAAcNAQljYWxjdWxhdGUAAApWAVQBBXxEAAAAAACIY0AhAERLBquqqgpqQCEBRJbQ46riePw/IQIgAZogAKIgACACoiABoaMhAyABmiAAoiAAIAKiIAGhoyEEAkAgAyAEYQ0AAAsgBAs=",
    "float_exprs.5.wasm": "AGFzbQEAAAABCwJgAX0BfWABfAF8AwMCAAEHLwIUZjMyLm5vX2ZvbGRfbXVsX3plcm8AABRmNjQubm9fZm9sZF9tdWxfemVybwABChsCCgAgAEMAAAAAlAsOACAARAAAAAAAAAAAogs=",
    "float_exprs.50.wasm": "AGFzbQEAAAABBgFgAX0BfQMCAQAHEAEMbGx2bV9wcjI2NzQ2AAAKEgEQAEMAAAAAQwAAAIAgAJOTCw==",
    "float_exprs.51.wasm": "AGFzbQEAAAABBgFgAX8BfQMCAQAHEAEMbGx2bV9wcjI3MTUzAAAKFAESACAAQf////8AcbJDAAAAy5IL",
    "float_exprs.52.wasm": "AGFzbQEAAAABBwFgAn9/AX0DAgEABxABDGxsdm1fcHIyNzAzNgAAChcBFQAgAEHL/4d0crIgAUGAgJAHcbKSCw==",
    "float_exprs.53.wasm": "AGFzbQEAAAABFwNgBHx8fHwBfGADfHx8AXxgA319fQF9AwQDAAECByIDCHRoZXBhc3QwAAAIdGhlcGFzdDEAAQh0aGVwYXN0MgACCiUDDQAgACABoiACIAOiowsKACAAIAGiIAKhCwoAIAAgAZQgApQL",
    "float_exprs.54.wasm": "AGFzbQEAAAABBgFgAX0BfQMCAQAHCwEHaW52ZXJzZQAACgwBCgBDAACAPyAAlQs=",
    "float_exprs.55.wasm": "AGFzbQEAAAABCwJgAX0BfWABfAF8AwMCAAEHJwIQZjMyX3NxcnRfbWludXNfMgAAEGY2NF9zcXJ0X21pbnVzXzIAAQodAgsAIACRQwAAAECTCw8AIACfRAAAAAAAAABAoQs=",
    "float_exprs.56.wasm": "AGFzbQEAAAABCwJgAX0BfWABfAF8AwMCAAEHNQIXZjMyLm5vX2ZvbGRfcmVjaXBfcmVjaXAAABdmNjQubm9fZm9sZF9yZWNpcF9yZWNpcAABCisCEABDAACAP0MAAIA/IACVlQsYAEQAAAAAAADwP0QAAAAAAADwPyAAo6ML",
    "float_exprs.57.wasm": "AGFzbQEAAAABDQJgAn19AX1gAnx8AXwDAwIAAQc7AhpmMzIubm9fYWxnZWJyYWljX2ZhY3RvcmluZwAAGmY2NC5ub19hbGdlYnJhaWNfZmFjdG9yaW5nAAEKHQINACAAIAGSIAAgAZOUCw0AIAAgAaAgACABoaIL",
    "float_exprs.58.wasm": "AGFzbQEAAAABDQJgAn19AX1gAnx8AXwDAwIAAQc7AhpmMzIubm9fYWxnZWJyYWljX2ZhY3RvcmluZwAAGmY2NC5ub19hbGdlYnJhaWNfZmFjdG9yaW5nAAEKHQINACAAIACUIAEgAZSTCw0AIAAgAKIgASABoqEL",
    "float_exprs.59.wasm": "AGFzbQEAAAABDAJgA39/fwBgAX8BfQMDAgABBQQBAQEBByACEWYzMi5zaW1wbGVfeDRfc3VtAAAIZjMyLmxvYWQAAQpuAmQBCH0gACoCACEDIAAqAgQhBCAAKgIIIQUgACoCDCEGIAEqAgAhByABKgIEIQggASoCCCEJIAEqAgwhCiACIAMgB5I4AgAgAiAEIAiSOAIEIAIgBSAJkjgCCCACIAYgCpI4AgwLBwAgACoCAAsLNgEAQQALMAEAAAABAACAAQAAAAEAAIABAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==",
    "float_exprs.6.wasm": "AGFzbQEAAAABCwJgAX0BfWABfAF8AwMCAAEHLQITZjMyLm5vX2ZvbGRfbXVsX29uZQAAE2Y2NC5ub19mb2xkX211bF9vbmUAAQobAgoAIABDAACAP5QLDgAgAEQAAAAAAADwP6IL",
    "float_exprs.60.wasm": "AGFzbQEAAAABDAJgA39/fwBgAX8BfAMDAgABBQQBAQEBByACEWY2NC5zaW1wbGVfeDRfc3VtAAAIZjY0LmxvYWQAAQpuAmQBCHwgACsDACEDIAArAwghBCAAKwMQIQUgACsDGCEGIAErAwAhByABKwMIIQggASsDECEJIAErAxghCiACIAMgB6A5AwAgAiAEIAigOQMIIAIgBSAJoDkDECACIAYgCqA5AxgLBwAgACsDAAsLZgEAQQALYAEAAAAAAAAAAQAAAAAAAIABAAAAAAAAAAEAAAAAAACAAQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==",
    "float_exprs.61.wasm": "AGFzbQEAAAABBwFgAn9/AX0DAwIAAAUEAQEBAQchAg1mMzIua2FoYW5fc3VtAAANZjMyLnBsYWluX3N1bQABCmICNwEDfQJAA0AgAyAAKgIAIASTIgSSIgIgA5MgBJMhBCAAQQRqIQAgAiEDIAFBf2oiAQ0ACwsgAgsoAQF9AkADQCACIAAqAgCSIQIgAEEEaiEAIAFBf2ohASABDQALCyACCwuHCAEAQQALgAjExVckpYTIC224Sy7ydhccykpWHhtucSJdFx5uv80UXMchVVE5nB+yUfCjk9fBLK5+qCg6ASH0CliT+EJ3n4M5al+69wrYUWo0yq3GNA7YJtxMMxztKZCoeA/RznYxI4O4NejyRLDTofy7MuGwumlECdbZff8uwFo2FDMUPqn6h22LvM6dp/3E6YU/3dfhGKZQJnJuP3MP+BKTIzRhdhJIwJsFk+usht6UPlXojOjd5PyVR75WAyEgTOa/e/Z/1bpzHMEUj8QnlrO9M/94QV/AWs72Z25zmhdmcAP4ziejUrKfO7/7ru3TWvg3V/D1bu+xTXA9VKcBmoUISJH1nQxgh1vZVB5RbYiOCIylcTpWCGdGj48TKizsLB+0YitvQQrEZUKiMWssfT67dayGlzDZSM2aH1bExuQSwJ377gKMzhzyHqF4I9vEHkkD03HMCFDF2Fzt1bVlrLXJIdLJKXbe8DAaWzzyO9s6OYI6FghvqPG+aWmZcaYF0xSTKhbyLxHHfiC7kUTu+OQBU8C5f/C/8AOcbbHfokQBbWtxK1yzIRlGXo/bkdN8eGu3EgCP672K9dQuxMEe33NjWUdJAwq3zyTPnA5Eep4U+0K/nTkwnqCrL9GunmqDQ+NVfYW/Y4r4lhAf/m3nIhvhaUaKRMjI+QwrGQelAj7yMBCahYpf74FFoHexAxBzS66YnUe/mi061Q8DZuM9U9lAzh9vMi8hKyMhbGLUpz6ozigxLQA9Z16voM8u0rlrhOtpCDxiNr4S/TZ/iD6tvAvAQcRQtuNQMejO4pZlVZwWRuawLTrogQWwvzT3vBAc+8w88YWXQp/rFI08v9cXiEmdiyuyOoPRTwSeoQ+tCJ1Ur9GCw+wyLwKPBSEtorfk9G8ugSsLnPzL/nQC+dv08+oAqOzRmXQm3dY01SWxRt2cqnH1YLCIyOALWVolTylm+eMu/una5RhPJ2L0zqQhlXTHV2Qnmkz9VH1hzsOsh0ac+v8JynmXZyR0ytQhgyYlGRI3ZBnlZeB0dY7dyO90x9ghK3kEUUZlYANd+tj0ZaSeXSPa14qSgKTeeDzxV0Jtzckv1aSeq0D0yxvXo8r866cBspppTkabGE7deaeqplI5Hu8wzJu9W+5MIW0wAHKwRl8Iz8W54D7CswzcjmTeGUJ5z0PqQ12OiPerFdw/yGcg27hksUcf3vLLP1mf2EaQ3K4vIvniMYnZnBxM06lKV4Scn+osPK48wx6L5U4XASXbNEZfFeoFDHzZRYwZ0HOKlhbdRPkFt1txsOYhNl91iZFzdat9rtNz7DfG6lV17+qri3sR3G0asmrEJc+q459JSYnLN5sKpwFgcNy3yIPhQvW+rWKUrY2h",
    "float_exprs.62.wasm": "AGFzbQEAAAABBwFgAn9/AXwDAwIAAAUEAQEBAQchAg1mNjQua2FoYW5fc3VtAAANZjY0LnBsYWluX3N1bQABCmICNwEDfAJAA0AgAyAAKwMAIAShIgSgIgIgA6EgBKEhBCAAQQhqIQAgAiEDIAFBf2oiAQ0ACwsgAgsoAQF8AkADQCACIAArAwCgIQIgAEEIaiEAIAFBf2ohASABDQALCyACCwuHEAEAQQALgBATBYRCXaIsxkPbVanN2lXjc/xY1rrVAP2DNUKIixNdOEpHDXJzoRrvxEUXV9jJRuCNbOE3cMiDW1VeWi1zHlbI4W1pFHgKilpkOgnHqIfF8NNd5gP8k74mytapkWC9sO2u9zB+kjpvp1mOqn2/Z1gqVPhO/u01WKZRv0LlS2YnJG1/Qi0okhjsCK7nVdqxpmWlclBHG7ipVNemBlsPQliDiheCxhBDoMAubbxahVNyf61EvDA8VbIkmnQ6nuHYD3D8qTrNk0vs437dXSfN+KCdHBHAVy79yBMyzDoafaNBVe3DgkkqBB7vc7kuLuNf9N/msjMMOT9vRGoDwUK5+rHI7aVYmX/ttHKeeev7Q4JFqruV0v8onvahrZXWVZUNb2ARx3g+SfJ+SPSicdATjrPemVLjRXTqdg4bKsjuFAHEUFs2PO+6cqKmCPh7Np357wvHVi1c8J1d3vy4rQ9kDpcVMibCMeYFHu/LFxttFQt0XdMu+GuGtLpzUlOZqXYgRclAgGsU7aH6gEbmJtLmmMRXv8QcpJB6NpQUuhWJbuacN4z03hIiXaF5UGcNPXrp1Koufyp6MD3qXRJI/uEYzaRXooc+tpqL29qdeJzPjbFPkLQ04J32yv5MO3htClwYn2G53bTgD3bgG2kNXlhzcF4OLaF9/yDrkTSSrDhyKh+OcS5q8a/HJ3DZxFf30jwduPDwZM/crr6jzD4ifU5pIWMX7QMCVJoPUE4TWjWhIqTfhsJ0eRa4aWmgUl0RZL1bk/xpoPQT0IFR3foMFcN6yWJ6qR3J5lqzW5cCPGQiEjwikGQtMFRMtKEiCVciXo44KwKorva+DSvyA636EAFxdyowApX2AD7QxI00GVAhCrxQ2jww1joxlI06/u8UV51LkwCWJAxv/bwjdgJs61JygBF+gDoTEjgdOEmVQCeKRHvo3G2MjI48tbMYDvYIGoRBNf+LuJNA6uFRHYmljUJoKeovwXpS65BdTdaA49d1SM7t0wEcjVullA14z/EGEy+YAqRtLmzy1XQpiUz5A/XHGK168Gj4XNZZh27WPwa+hiDjQZEi826L8GgcV6f8sHyemQuWGolf5g18CFGgomeaRwCTa/ko8GjbYvHgZSxTM+CnyhFCMPavAcFlPTIBb6suvtOLvhTD/+z78PnFDAVvAQlr4zQxDB9mpkK8GodJFhaMsJANNIwK4QleEKRrVszwybvcuFzO9syNdX6zB4gEL7ReyeNKI3MZYmyaA3ZEhpxg/Ntyjyeg3bPF2v/57Gqxe9PPUDfJengM5Dq29eb0mG5CfTVzi0XAVpfNbc7PrTGzw1T679XA9GpfVOdJPjMKMDj92QX/pT9XRhS1kRfKa5gjemWzbAK0zHldWNiz1ZSu9G11ZfeSv35HTDzu26zxMl37b0EcNMiDT8JYAb4FPmYWpgRtXU+GCSeCJRLNOs3Oa7zKrCib7molhp5FcMbSvTt9QuUnr8cd9IHIs3aKqDajrirmGOE2Iq32JXKwOYsBmiJ7hMMtX3KkmKwVcOfUGOJ90jB8MwjNysQihYh1gcZKdFiN4Oisxat1WvQoEvAYRVLyl7KTQW+Nf9tw+6NdH6eNmCArIp86AbWLG9LLFAMOFBTSGVofzl7NgXkVAcrec3SMViCfdy0lFvZhUR2kjpuYpcbsqEVXgll4DZC031Gww4KUzLNTCRVtlmw6QEe3SnoFL6EejJ2gIIj7Uref8/O7X+eKYachsaz6CaqkbLwkgLoq6WX/cP/M+mWHdvPFFc7L6EIxAAyRV9ngnTVUJK2k2PkIZ2PIz4HdkKLXxAdK5hBvZ+cn1CNZGPKonV/YlDCqVIZPh52CtSbKppa/z1X5nTcBGUhDxZRs83SXWEw8nQjoBMJYMHbhoPjq6cWuz3ieqQyss0RC4LxdG5xJWEocGUnBOur16zuBqUtwDMyeGtMvt1IvIDvrZFEdoC2yPr4ThUiSMi7bXKHnjEWRNQEKk8LrCc7z0iIk0IzMHZ04yE3jgsxkFQYt5wEvq7u1BEySHHrWP+hfMRUM3OQxtMQlPiqqAJ7I5SF6fynxwK8dXuhjOa34fmzIxX/CqJcnCtn0IWrqAwn795Y7g3lffEswn1Y13rRz1JXwFMN0Lw2jHU6NMSSzGoSFYlp7PBQ5F+Zt6zfCAFhbC+M8imLh+DVLVuKHYIu+pziRd1SpWiQlkJ+lQnfzXDnf/3QHdqHNH2ILgYForwXBwH8m7sCRo2p9KWFFJ+VXiNwNlwQaM6lEitoCEEU/jlWmdoxN4/GJg8jQ+JtQd59H30ycZg2qGLhfT8QBztyErEaeaeF2RWthieRdlLsRg5942ArS9X5dQ+q8EPE6yeJk+1Nl0Me0p/vUBVMl0M0piABWJSR9XbTzQZ/ptfeuZCzjyW3VhDpyErh62RsJ6DjaJk8EzgNxbopEe1yBWZzS5MO6WablKKePmuTVTrnKf8t1uCtDPrMVRrGlvJ2eOBXxvRshqvGCAJX8p3dHOaczQ5LXUkBLBoGKoL3xa5mEQlviO8VeElwoTbYOTshc6AGKxefknULuXZzE6+toCSeSlZoRVHPEEoD7ff7FCGB/NkHgELrWK2zxtBf+JjTjS/io45G+Tyr82oG45/7VJlBH8xplMoHgBbhPMjEmAEpTl8LDDi6hJlSrBY5WL32vIoRopYuX9qT9qMx1QZaG/Sc9KYaNf0zUjnNB9B7i3Vgnl86clM96BC/c7Q==",
    "float_exprs.63.wasm": "AGFzbQEAAAABDQJgAn19AX1gAnx8AXwDAwIAAQctAhNmMzIubm9fZm9sZF9uZWdfc3ViAAATZjY0Lm5vX2ZvbGRfbmVnX3N1YgABChMCCAAgACABk4wLCAAgACABoZoL",
    "float_exprs.64.wasm": "AGFzbQEAAAABDQJgAn19AX1gAnx8AXwDAwIAAQctAhNmMzIubm9fZm9sZF9uZWdfYWRkAAATZjY0Lm5vX2ZvbGRfbmVnX2FkZAABChMCCAAgACABkowLCAAgACABoJoL",
    "float_exprs.65.wasm": "AGFzbQEAAAABDQJgAn19AX1gAnx8AXwDAwIAAQc1AhdmMzIubm9fZm9sZF9hZGRfbmVnX25lZwAAF2Y2NC5ub19mb2xkX2FkZF9uZWdfbmVnAAEKFQIJACAAjCABjJILCQAgAJogAZqgCw==",
    "float_exprs.66.wasm": "AGFzbQEAAAABCwJgAX0BfWABfAF8AwMCAAEHLQITZjMyLm5vX2ZvbGRfYWRkX25lZwAAE2Y2NC5ub19mb2xkX2FkZF9uZWcAAQoTAggAIACMIACSCwgAIACaIACgCw==",
    "float_exprs.67.wasm": "AGFzbQEAAAABCwJgAX0BfWABfAF8AwMCAAEHMwIWZjMyLm5vX2ZvbGRfNnhfdmlhX2FkZAAAFmY2NC5ub19mb2xkXzZ4X3ZpYV9hZGQAAQopAhMAIAAgAJIgAJIgAJIgAJIgAJILEwAgACAAoCAAoCAAoCAAoCAAoAs=",
    "float_exprs.68.wasm": "AGFzbQEAAAABDwJgA319fQF9YAN8fHwBfAMDAgABBy0CE2YzMi5ub19mb2xkX2Rpdl9kaXYAABNmNjQubm9fZm9sZF9kaXZfZGl2AAEKFwIKACAAIAGVIAKVCwoAIAAgAaMgAqML",
    "float_exprs.69.wasm": "AGFzbQEAAAABEQJgBH19fX0BfWAEfHx8fAF8AwMCAAEHLwIUZjMyLm5vX2ZvbGRfbXVsX2RpdnMAABRmNjQubm9fZm9sZF9tdWxfZGl2cwABCh0CDQAgACABlSACIAOVlAsNACAAIAGjIAIgA6OiCw==",
    "float_exprs.7.wasm": "AGFzbQEAAAABCwJgAX0BfWABfAF8AwMCAAEHLwIUZjMyLm5vX2ZvbGRfemVyb19kaXYAABRmNjQubm9fZm9sZF96ZXJvX2RpdgABChsCCgBDAAAAACAAlQsOAEQAAAAAAAAAACAAows=",
    "float_exprs.70.wasm": "AGFzbQEAAAABDwJgA319fQF9YAN8fHwBfAMDAgABBy8CFGYzMi5ub19mb2xkX2FkZF9kaXZzAAAUZjY0Lm5vX2ZvbGRfYWRkX2RpdnMAAQodAg0AIAAgApUgASAClZILDQAgACACoyABIAKjoAs=",
    "float_exprs.71.wasm": "AGFzbQEAAAABCwJgAX0BfWABfAF8AwMCAAEHNQIXZjMyLm5vX2ZvbGRfc3FydF9zcXVhcmUAABdmNjQubm9fZm9sZF9zcXJ0X3NxdWFyZQABChMCCAAgACAAlJELCAAgACAAop8L",
    "float_exprs.72.wasm": "AGFzbQEAAAABDQJgAn19AX1gAnx8AXwDAwIAAQcxAhVmMzIubm9fZm9sZF9tdWxfc3FydHMAABVmNjQubm9fZm9sZF9tdWxfc3FydHMAAQoVAgkAIACRIAGRlAsJACAAnyABn6IL",
    "float_exprs.73.wasm": "AGFzbQEAAAABDQJgAn19AX1gAnx8AXwDAwIAAQcxAhVmMzIubm9fZm9sZF9kaXZfc3FydHMAABVmNjQubm9fZm9sZF9kaXZfc3FydHMAAQoVAgkAIACRIAGRlQsJACAAnyABn6ML",
    "float_exprs.74.wasm": "AGFzbQEAAAABDQJgAn19AX1gAnx8AXwDAwIAAQc3AhhmMzIubm9fZm9sZF9tdWxfc3FydF9kaXYAABhmNjQubm9fZm9sZF9tdWxfc3FydF9kaXYAAQoZAgsAIAAgAZGUIAGVCwsAIAAgAZ+iIAGjCw==",
    "float_exprs.75.wasm": "AGFzbQEAAAABDwJgA319fQF9YAN8fHwBfAMDAgABB00CI2YzMi5ub19mbHVzaF9pbnRlcm1lZGlhdGVfc3Vibm9ybWFsAAAjZjY0Lm5vX2ZsdXNoX2ludGVybWVkaWF0ZV9zdWJub3JtYWwAAQoXAgoAIAAgAZQgApQLCgAgACABoiACogs=",
    "float_exprs.76.wasm": "AGFzbQEAAAABEwNgAn19AX9gAnx8AX9gAnx9AX0DCAcAAAABAQECB38HD2YzMi5yZWNvZGluZ19lcQAAD2YzMi5yZWNvZGluZ19sZQABD2YzMi5yZWNvZGluZ19sdAACD2Y2NC5yZWNvZGluZ19lcQADD2Y2NC5yZWNvZGluZ19sZQAED2Y2NC5yZWNvZGluZ19sdAAFD3JlY29kaW5nX2RlbW90ZQAGCkwHCgAgACABlCAAWwsKACAAIAGUIABfCwoAIAAgAZQgAF0LCgAgACABoiAAYQsKACAAIAGiIABlCwoAIAAgAaIgAGMLCAAgALYgAZQL",
    "float_exprs.77.wasm": "AGFzbQEAAAABDwJgA319fQF/YAN8fHwBfwMDAgABB0ECHWYzMi5ub19leHRlbmRlZF9wcmVjaXNpb25fZGl2AAAdZjY0Lm5vX2V4dGVuZGVkX3ByZWNpc2lvbl9kaXYAAQoXAgoAIAAgAZUgAlsLCgAgACABoyACYQs=",
    "float_exprs.78.wasm": "AGFzbQEAAAABCwJgAX0BfWABfAF8AwMCAAEHNQIXZjMyLm5vX2Rpc3RyaWJ1dGVfZXhhY3QAABdmNjQubm9fZGlzdHJpYnV0ZV9leGFjdAABCjECEwBDAAAAwSAAlEMAAABBIACUkgsbAEQAAAAAAAAgwCAAokQAAAAAAAAgQCAAoqAL",
    "float_exprs.79.wasm": "AGFzbQEAAAABKQZgAX0BfWAEfX19fQF9YAN9fX0BfWABfAF8YAR8fHx8AXxgA3x8fAF8AwsKAAECAgEDBAUFBAe1AQoIZjMyLnNxcnQAAA9mMzIueGtjZF9zcXJ0XzIAAQ9mMzIueGtjZF9zcXJ0XzMAAg9mMzIueGtjZF9zcXJ0XzUAAxZmMzIueGtjZF9iZXR0ZXJfc3FydF81AAQIZjY0LnNxcnQABQ9mNjQueGtjZF9zcXJ0XzIABg9mNjQueGtjZF9zcXJ0XzMABw9mNjQueGtjZF9zcXJ0XzUACBZmNjQueGtjZF9iZXR0ZXJfc3FydF81AAkKiQEKBQAgAJELEAAgACABlSACIAMgApOVkgsKACAAIAGUIAKVCw0AIAAgAZUgAiAAlZILEwAgACABIAKUkiADIAEgApSTlQsFACAAnwsQACAAIAGjIAIgAyACoaOgCwoAIAAgAaIgAqMLDQAgACABoyACIACjoAsTACAAIAEgAqKgIAMgASACoqGjCw==",
    "float_exprs.8.wasm": "AGFzbQEAAAABCwJgAX0BfWABfAF8AwMCAAEHLQITZjMyLm5vX2ZvbGRfZGl2X29uZQAAE2Y2NC5ub19mb2xkX2Rpdl9vbmUAAQobAgoAIABDAACAP5ULDgAgAEQAAAAAAADwP6ML",
    "float_exprs.80.wasm": "AGFzbQEAAAABDQJgAn19AX1gAnx8AXwDAwIAAQcpAhFmMzIuY29tcHV0ZV9yYWRpeAAAEWY2NC5jb21wdXRlX3JhZGl4AAEKnQECQwADQCAAIACSIgBDAACAP5IgAJNDAACAv5JDAAAAAFsNAAsDQCAAIAFDAACAP5IiAZIgAJMgAZNDAAAAAFwNAAsgAQtXAANAIAAgAKAiAEQAAAAAAADwP6AgAKFEAAAAAAAA8L+gRAAAAAAAAAAAYQ0ACwNAIAAgAUQAAAAAAADwP6AiAaAgAKEgAaFEAAAAAAAAAABiDQALIAEL",
    "float_exprs.81.wasm": "AGFzbQEAAAABDQJgAn19AX1gAnx8AXwDAwIAAQc3AhhmMzIubm9fZm9sZF9zdWIxX211bF9hZGQAABhmNjQubm9fZm9sZF9zdWIxX211bF9hZGQAAQonAhAAIABDAACAP5MgAZQgAZILFAAgAEQAAAAAAADwP6EgAaIgAaAL",
    "float_exprs.82.wasm": "AGFzbQEAAAABDwJgA319fQF/YAN8fHwBfwMFBAAAAQEHiQEEH2YzMi5ub19mb2xkX2FkZF9sZV9tb25vdG9uaWNpdHkAAB9mMzIubm9fZm9sZF9hZGRfZ2VfbW9ub3RvbmljaXR5AAEfZjY0Lm5vX2ZvbGRfYWRkX2xlX21vbm90b25pY2l0eQACH2Y2NC5ub19mb2xkX2FkZF9nZV9tb25vdG9uaWNpdHkAAwo5BA0AIAAgApIgASACkl8LDQAgACACkiABIAKSYAsNACAAIAKgIAEgAqBlCw0AIAAgAqAgASACoGYL",
    "float_exprs.83.wasm": "AGFzbQEAAAABDQJgAn19AX9gAnx8AX8DCQgAAAAAAQEBAQdpCApmMzIubm90X2x0AAAKZjMyLm5vdF9sZQABCmYzMi5ub3RfZ3QAAgpmMzIubm90X2dlAAMKZjY0Lm5vdF9sdAAECmY2NC5ub3RfbGUABQpmNjQubm90X2d0AAYKZjY0Lm5vdF9nZQAHCkkICAAgACABXUULCAAgACABX0ULCAAgACABXkULCAAgACABYEULCAAgACABY0ULCAAgACABZUULCAAgACABZEULCAAgACABZkUL",
    "float_exprs.84.wasm": "AGFzbQEAAAABCQJgAAF9YAABfAMDAgABBx0CC2YzMi5lcHNpbG9uAAALZjY0LmVwc2lsb24AAQpVAh8AQwAAgD9DAABAQEMAAIBAQwAAQECVQwAAgD+TlJMLMwBEAAAAAAAA8D9EAAAAAAAACEBEAAAAAAAAEEBEAAAAAAAACECjRAAAAAAAAPA/oaKhCw==",
    "float_exprs.85.wasm": "AGFzbQEAAAABCQJgAAF9YAABfAMDAgABBx0CC2YzMi5lcHNpbG9uAAALZjY0LmVwc2lsb24AAQpnAioBAn1DAACAPyEAA0AgACIBQwAAAD+UIgBDAACAP5JDAACAP14NAAsgAQs6AQJ8RAAAAAAAAPA/IQADQCAAIgFEAAAAAAAA4D+iIgBEAAAAAAAA8D+gRAAAAAAAAPA/ZA0ACyABCw==",
    "float_exprs.86.wasm": "AGFzbQEAAAABDQJgAn19AX9gAnx8AX8DCQgAAAAAAQEBAQe5AQgUZjMyLm5vX3RyaWNob3RvbXlfbHQAABRmMzIubm9fdHJpY2hvdG9teV9sZQABFGYzMi5ub190cmljaG90b215X2d0AAIUZjMyLm5vX3RyaWNob3RvbXlfZ2UAAxRmNjQubm9fdHJpY2hvdG9teV9sdAAEFGY2NC5ub190cmljaG90b215X2xlAAUUZjY0Lm5vX3RyaWNob3RvbXlfZ3QABhRmNjQubm9fdHJpY2hvdG9teV9nZQAHCnEIDQAgACABXSAAIAFgcgsNACAAIAFfIAAgAV5yCw0AIAAgAV4gACABX3ILDQAgACABYCAAIAFdcgsNACAAIAFjIAAgAWZyCw0AIAAgAWUgACABZHILDQAgACABZCAAIAFlcgsNACAAIAFmIAAgAWNyCw==",
    "float_exprs.87.wasm": "AGFzbQEAAAABFwRgAn9/AX9gAX8Bf2ACfn4BfmABfgF+AxQTAAABAgIDAQEBAQEBAwMDAwMDAQfuAxMdZjMyLmFyaXRobWV0aWNfbmFuX2JpdHBhdHRlcm4AABxmMzIuY2Fub25pY2FsX25hbl9iaXRwYXR0ZXJuAAEgZjMyLm5vbmFyaXRobWV0aWNfbmFuX2JpdHBhdHRlcm4AAh1mNjQuYXJpdGhtZXRpY19uYW5fYml0cGF0dGVybgADHGY2NC5jYW5vbmljYWxfbmFuX2JpdHBhdHRlcm4ABCBmNjQubm9uYXJpdGhtZXRpY19uYW5fYml0cGF0dGVybgAFFGYzMi5ub19mb2xkX3N1Yl96ZXJvAAYUZjMyLm5vX2ZvbGRfbmVnMF9zdWIABxNmMzIubm9fZm9sZF9tdWxfb25lAAgUZjMyLm5vX2ZvbGRfbmVnMV9tdWwACRNmMzIubm9fZm9sZF9kaXZfb25lAAoUZjMyLm5vX2ZvbGRfZGl2X25lZzEACxRmNjQubm9fZm9sZF9zdWJfemVybwAMFGY2NC5ub19mb2xkX25lZzBfc3ViAA0TZjY0Lm5vX2ZvbGRfbXVsX29uZQAOFGY2NC5ub19mb2xkX25lZzFfbXVsAA8TZjY0Lm5vX2ZvbGRfZGl2X29uZQAQFGY2NC5ub19mb2xkX2Rpdl9uZWcxABEWbm9fZm9sZF9wcm9tb3RlX2RlbW90ZQASCpkDExEAIAC+IAG+lbxBgICA/gdxCxEAIAC+IAG+lbxB/////wdxCwcAIAC+jLwLFgAgAL8gAb+jvUKAgICAgICA/P8AgwsWACAAvyABv6O9Qv///////////wCDCwcAIAC/mr0LEwAgAL5DAAAAAJO8QYCAgP4HcQsTAEMAAACAIAC+k7xBgICA/gdxCxMAIAC+QwAAgD+UvEGAgID+B3ELEwBDAACAvyAAvpS8QYCAgP4HcQsTACAAvkMAAIA/lbxBgICA/gdxCxMAIAC+QwAAgL+VvEGAgID+B3ELHAAgAL9EAAAAAAAAAAChvUKAgICAgICA/P8AgwscAEQAAAAAAAAAgCAAv6G9QoCAgICAgID8/wCDCxwAIAC/RAAAAAAAAPA/or1CgICAgICAgPz/AIMLHABEAAAAAAAA8L8gAL+ivUKAgICAgICA/P8AgwscACAAv0QAAAAAAADwP6O9QoCAgICAgID8/wCDCxwAIAC/RAAAAAAAAPC/o71CgICAgICAgPz/AIMLDwAgAL67trxBgICA/gdxCw==",
    "float_exprs.88.wasm": "AGFzbQEAAAABDQFgCHx8fHx8fHx8AXwDAwIAAAcyAhNkb3RfcHJvZHVjdF9leGFtcGxlAAAYd2l0aF9iaW5hcnlfc3VtX2NvbGxhcHNlAAEKNQIZACAAIASiIAEgBaKgIAIgBqKgIAMgB6KgCxkAIAAgBKIgASAFoqAgAiAGoiADIAeioKAL",
    "float_exprs.89.wasm": "AGFzbQEAAAABDQJgAn19AX1gAnx8AXwDAwIAAQcnAhBmMzIuY29udHJhY3QyZm1hAAAQZjY0LmNvbnRyYWN0MmZtYQABCh8CDgAgACAAlCABIAGUk5ELDgAgACAAoiABIAGioZ8L",
    "float_exprs.9.wasm": "AGFzbQEAAAABCwJgAX0BfWABfAF8AwMCAAEHLwIUZjMyLm5vX2ZvbGRfZGl2X25lZzEAABRmNjQubm9fZm9sZF9kaXZfbmVnMQABChsCCgAgAEMAAIC/lQsOACAARAAAAAAAAPC/ows=",
    "float_exprs.90.wasm": "AGFzbQEAAAABDwJgA319fQF9YAN8fHwBfAMDAgABBz8CHGYzMi5kaXZpc2lvbl9ieV9zbWFsbF9udW1iZXIAABxmNjQuZGl2aXNpb25fYnlfc21hbGxfbnVtYmVyAAEKFwIKACAAIAEgApWTCwoAIAAgASACo6EL",
    "float_exprs.91.wasm": "AGFzbQEAAAABDwJgA319fQF9YAN8fHwBfAMDAgABBycCEGYzMi5nb2xkZW5fcmF0aW8AABBmNjQuZ29sZGVuX3JhdGlvAAEKGQILACAAIAEgApGSlAsLACAAIAEgAp+gogs=",
    "float_exprs.92.wasm": "AGFzbQEAAAABCwJgAX0BfWABfAF8AwMCAAEHJwIQZjMyLnNpbHZlcl9tZWFucwAAEGY2NC5zaWx2ZXJfbWVhbnMAAQo5AhcAQwAAAD8gACAAIACUQwAAgECSkZKUCx8ARAAAAAAAAOA/IAAgACAAokQAAAAAAAAQQKCfoKIL",
    "float_exprs.93.wasm": "AGFzbQEAAAABBwFgAnx8AX8DAgEABw4BCnBvaW50X2ZvdXIAAAoTAREAIAAgAaNEmpmZmZmZ2T9jCw==",
    "float_exprs.94.wasm": "AGFzbQEAAAABBgFgAX8BfAMCAQAHBwEDdGF1AAAKywEByAEBBHxEAAAAAAAAAAAhAQJAIABBAUgNAEQAAAAAAADwPyECRAAAAAAAAAAAIQMDQCABIAJEAAAAAAAAIEAgA0QAAAAAAAAgQKIiBEQAAAAAAADwP6CjRAAAAAAAABBAIAREAAAAAAAAEECgo6FEAAAAAAAAAEAgBEQAAAAAAAAUQKCjoUQAAAAAAAAAQCAERAAAAAAAABhAoKOhoqAhASADRAAAAAAAAPA/oCEDIAJEAAAAAAAAsD+iIQIgAEF/aiIADQALCyABCw==",
    "float_exprs.95.wasm": "AGFzbQEAAAABDQJgAn19AX1gAnx8AXwDAwIAAQc9AhtmMzIubm9fZm9sZF9jb25kaXRpb25hbF9pbmMAABtmNjQubm9fZm9sZF9jb25kaXRpb25hbF9pbmMAAQo1AhUAIAAgAEMAAIA/kiABQwAAAABdGwsdACAAIABEAAAAAAAA8D+gIAFEAAAAAAAAAABjGws="
  },
  "spec": {"source_filename": "/home/rvagg/git/webassembly/spec/test/core/float_exprs.wast",
 "commands": [
  {"type": "module", "line": 6, "filename": "float_exprs.0.wasm"}, 
  {"type": "assert_return", "line": 11, "action": {"type": "invoke", "field": "f64.no_contraction", "args": [{"type": "f64", "value": "13369472591878845359"}, {"type": "f64", "value": "7598224971858294334"}, {"type": "f64", "value": "7009968021366006149"}]}, "expected": [{"type": "f64", "value": "16360919150252594323"}]}, 
  {"type": "assert_return", "line": 12, "action": {"type": "invoke", "field": "f64.no_contraction", "args": [{"type": "f64", "value": "4845207016438394692"}, {"type": "f64", "value": "3163224970157846858"}, {"type": "f64", "value": "3251145870828527841"}]}, "expected": [{"type": "f64", "value": "3401457070760597396"}]}, 
  {"type": "assert_return", "line": 13, "action": {"type": "invoke", "field": "f64.no_contraction", "args": [{"type": "f64", "value": "11159707324127586240"}, {"type": "f64", "value": "7011538096610110295"}, {"type": "f64", "value": "4140382893275160737"}]}, "expected": [{"type": "f64", "value": "13564076370790560102"}]}, 
  {"type": "assert_return", "line": 14, "action": {"type": "invoke", "field": "f64.no_contraction", "args": [{"type": "f64", "value": "4300281701552927458"}, {"type": "f64", "value": "13379479906516703876"}, {"type": "f64", "value": "3629658278272971302"}]}, "expected": [{"type": "f64", "value": "13072631228492738408"}]}, 
  {"type": "assert_return", "line": 15, "action": {"type": "invoke", "field": "f64.no_contraction", "args": [{"type": "f64", "value": "9554523352352050493"}, {"type": "f64", "value": "18042841594766434431"}, {"type": "f64", "value": "4368037109959396445"}]}, "expected": [{"type": "f64", "value": "4544162191519938727"}]}, 
  {"type": "module", "line": 19, "filename": "float_exprs.1.wasm"}, 
  {"type": "assert_return", "line": 26, "action": {"type": "invoke", "field": "f32.no_fma", "args": [{"type": "f32", "value": "2111029761"}, {"type": "f32", "value": "879215268"}, {"type": "f32", "value": "1967953261"}]}, "expected": [{"type": "f32", "value": "1968345878"}]}, 
  {"type": "assert_return", "line": 27, "action": {"type": "invoke", "field": "f32.no_fma", "args": [{"type": "f32", "value": "838240978"}, {"type": "f32", "value": "2796592697"}, {"type": "f32", "value": "329493464"}]}, "expected": [{"type": "f32", "value": "2569667420"}]}, 
  {"type": "assert_return", "line": 28, "action": {"type": "invoke", "field": "f32.no_fma", "args": [{"type": "f32", "value": "1381446097"}, {"type": "f32", "value": "962187981"}, {"type": "f32", "value": "1155576972"}]}, "expected": [{"type": "f32", "value": "1278680110"}]}, 
  {"type": "assert_return", "line": 29, "action": {"type": "invoke", "field": "f32.no_fma", "args": [{"type": "f32", "value": "999635965"}, {"type": "f32", "value": "3403528619"}, {"type": "f32", "value": "3222888213"}]}, "expected": [{"type": "f32", "value": "3338748778"}]}, 
  {"type": "assert_return", "line": 30, "action": {"type": "invoke", "field": "f32.no_fma", "args": [{"type": "f32", "value": "2123679707"}, {"type": "f32", "value": "2625733638"}, {"type": "f32", "value": "3500197619"}]}, "expected": [{"type": "f32", "value": "3684076259"}]}, 
  {"type": "assert_return", "line": 31, "action": {"type": "invoke", "field": "f64.no_fma", "args": [{"type": "f64", "value": "7118716943724900052"}, {"type": "f64", "value": "6546073043412611735"}, {"type": "f64", "value": "18275705786238687882"}]}, "expected": [{"type": "f64", "value": "9054581441422375136"}]}, 
  {"type": "assert_return", "line": 32, "action": {"type": "invoke", "field": "f64.no_fma", "args": [{"type": "f64", "value": "7984371788751700236"}, {"type": "f64", "value": "4021745400549737956"}, {"type": "f64", "value": "7188568268293775252"}]}, "expected": [{"type": "f64", "value": "7398962198428541884"}]}, 
  {"type": "assert_return", "line": 33, "action": {"type": "invoke", "field": "f64.no_fma", "args": [{"type": "f64", "value": "1362668175782178275"}, {"type": "f64", "value": "18385570095786966502"}, {"type": "f64", "value": "5677031731722859914"}]}, "expected": [{"type": "f64", "value": "15141616602947129037"}]}, 
  {"type": "assert_return", "line": 34, "action": {"type": "invoke", "field": "f64.no_fma", "args": [{"type": "f64", "value": "12093403956019835987"}, {"type": "f64", "value": "15826077508588652458"}, {"type": "f64", "value": "4856562394320338043"}]}, "expected": [{"type": "f64", "value": "4867219230351674394"}]}, 
  {"type": "assert_return", "line": 35, "action": {"type": "invoke", "field": "f64.no_fma", "args": [{"type": "f64", "value": "4843589256781277081"}, {"type": "f64", "value": "7695653093478086834"}, {"type": "f64", "value": "16938438850771988744"}]}, "expected": [{"type": "f64", "value": "7932313162666085329"}]}, 
  {"type": "module", "line": 40, "filename": "float_exprs.2.wasm"}, 
  {"type": "assert_return", "line": 47, "action": {"type": "invoke", "field": "f32.no_fold_add_zero", "args": [{"type": "f32", "value": "2147483648"}]}, "expected": [{"type": "f32", "value": "0"}]}, 
  {"type": "assert_return", "line": 48, "action": {"type": "invoke", "field": "f64.no_fold_add_zero", "args": [{"type": "f64", "value": "9223372036854775808"}]}, "expected": [{"type": "f64", "value": "0"}]}, 
  {"type": "assert_return", "line": 49, "action": {"type": "invoke", "field": "f32.no_fold_add_zero", "args": [{"type": "f32", "value": "2141192192"}]}, "expected": [{"type": "f32", "value": "nan:arithmetic"}]}, 
  {"type": "assert_return", "line": 50, "action": {"type": "invoke", "field": "f64.no_fold_add_zero", "args": [{"type": "f64", "value": "9219994337134247936"}]}, "expected": [{"type": "f64", "value": "nan:arithmetic"}]}, 
  {"type": "module", "line": 54, "filename": "float_exprs.3.wasm"}, 
  {"type": "assert_return", "line": 61, "action": {"type": "invoke", "field": "f32.no_fold_zero_sub", "args": [{"type": "f32", "value": "0"}]}, "expected": [{"type": "f32", "value": "0"}]}, 
  {"type": "assert_return", "line": 62, "action": {"type": "invoke", "field": "f64.no_fold_zero_sub", "args": [{"type": "f64", "value": "0"}]}, "expected": [{"type": "f64", "value": "0"}]}, 
  {"type": "assert_return", "line": 63, "action": {"type": "invoke", "field": "f32.no_fold_zero_sub", "args": [{"type": "f32", "value": "2141192192"}]}, "expected": [{"type": "f32", "value": "nan:arithmetic"}]}, 
  {"type": "assert_return", "line": 64, "action": {"type": "invoke", "field": "f64.no_fold_zero_sub", "args": [{"type": "f64", "value": "9219994337134247936"}]}, "expected": [{"type": "f64", "value": "nan:arithmetic"}]}, 
  {"type": "module", "line": 68, "filename": "float_exprs.4.wasm"}, 
  {"type": "assert_return", "line": 75, "action": {"type": "invoke", "field": "f32.no_fold_sub_zero", "args": [{"type": "f32", "value": "2141192192"}]}, "expected": [{"type": "f32", "value": "nan:arithmetic"}]}, 
  {"type": "assert_return", "line": 76, "action": {"type": "invoke", "field": "f64.no_fold_sub_zero", "args": [{"type": "f64", "value": "9219994337134247936"}]}, "expected": [{"type": "f64", "value": "nan:arithmetic"}]}, 
  {"type": "module", "line": 80, "filename": "float_exprs.5.wasm"}, 
  {"type": "assert_return", "line": 87, "action": {"type": "invoke", "field": "f32.no_fold_mul_zero", "args": [{"type": "f32", "value": "2147483648"}]}, "expected": [{"type": "f32", "value": "2147483648"}]}, 
  {"type": "assert_return", "line": 88, "action": {"type": "invoke", "field": "f32.no_fold_mul_zero", "args": [{"type": "f32", "value": "3212836864"}]}, "expected": [{"type": "f32", "value": "2147483648"}]}, 
  {"type": "assert_return", "line": 89, "action": {"type": "invoke", "field": "f32.no_fold_mul_zero", "args": [{"type": "f32", "value": "3221225472"}]}, "expected": [{"type": "f32", "value": "2147483648"}]}, 
  {"type": "assert_return", "line": 90, "action": {"type": "invoke", "field": "f32.no_fold_mul_zero", "args": [{"type": "f32", "value": "2141192192"}]}, "expected": [{"type": "f32", "value": "nan:arithmetic"}]}, 
  {"type": "assert_return", "line": 91, "action": {"type": "invoke", "field": "f64.no_fold_mul_zero", "args": [{"type": "f64", "value": "9223372036854775808"}]}, "expected": [{"type": "f64", "value": "9223372036854775808"}]}, 
  {"type": "assert_return", "line": 92, "action": {"type": "invoke", "field": "f64.no_fold_mul_zero", "args": [{"type": "f64", "value": "13830554455654793216"}]}, "expected": [{"type": "f64", "value": "9223372036854775808"}]}, 
  {"type": "assert_return", "line": 93, "action": {"type": "invoke", "field": "f64.no_fold_mul_zero", "args": [{"type": "f64", "value": "13835058055282163712"}]}, "expected": [{"type": "f64", "value": "9223372036854775808"}]}, 
  {"type": "assert_return", "line": 94, "action": {"type": "invoke", "field": "f64.no_fold_mul_zero", "args": [{"type": "f64", "value": "9219994337134247936"}]}, "expected": [{"type": "f64", "value": "nan:arithmetic"}]}, 
  {"type": "module", "line": 99, "filename": "float_exprs.6.wasm"}, 
  {"type": "assert_return", "line": 106, "action": {"type": "invoke", "field": "f32.no_fold_mul_one", "args": [{"type": "f32", "value": "2141192192"}]}, "expected": [{"type": "f32", "value": "nan:arithmetic"}]}, 
  {"type": "assert_return", "line": 107, "action": {"type": "invoke", "field": "f64.no_fold_mul_one", "args": [{"type": "f64", "value": "9219994337134247936"}]}, "expected": [{"type": "f64", "value": "nan:arithmetic"}]}, 
  {"type": "module", "line": 111, "filename": "float_exprs.7.wasm"}, 
  {"type": "assert_return", "line": 118, "action": {"type": "invoke", "field": "f32.no_fold_zero_div", "args": [{"type": "f32", "value": "0"}]}, "expected": [{"type": "f32", "value": "nan:canonical"}]}, 
  {"type": "assert_return", "line": 119, "action": {"type": "invoke", "field": "f32.no_fold_zero_div", "args": [{"type": "f32", "value": "2147483648"}]}, "expected": [{"type": "f32", "value": "nan:canonical"}]}, 
  {"type": "assert_return", "line": 120, "action": {"type": "invoke", "field": "f32.no_fold_zero_div", "args": [{"type": "f32", "value": "2143289344"}]}, "expected": [{"type": "f32", "value": "nan:canonical"}]}, 
  {"type": "assert_return", "line": 121, "action": {"type": "invoke", "field": "f32.no_fold_zero_div", "args": [{"type": "f32", "value": "2141192192"}]}, "expected": [{"type": "f32", "value": "nan:arithmetic"}]}, 
  {"type": "assert_return", "line": 122, "action": {"type": "invoke", "field": "f64.no_fold_zero_div", "args": [{"type": "f64", "value": "0"}]}, "expected": [{"type": "f64", "value": "nan:canonical"}]}, 
  {"type": "assert_return", "line": 123, "action": {"type": "invoke", "field": "f64.no_fold_zero_div", "args": [{"type": "f64", "value": "9223372036854775808"}]}, "expected": [{"type": "f64", "value": "nan:canonical"}]}, 
  {"type": "assert_return", "line": 124, "action": {"type": "invoke", "field": "f64.no_fold_zero_div", "args": [{"type": "f64", "value": "9221120237041090560"}]}, "expected": [{"type": "f64", "value": "nan:canonical"}]}, 
  {"type": "assert_return", "line": 125, "action": {"type": "invoke", "field": "f64.no_fold_zero_div", "args": [{"type": "f64", "value": "9219994337134247936"}]}, "expected": [{"type": "f64", "value": "nan:arithmetic"}]}, 
  {"type": "module", "line": 129, "filename": "float_exprs.8.wasm"}, 
  {"type": "assert_return", "line": 136, "action": {"type": "invoke", "field": "f32.no_fold_div_one", "args": [{"type": "f32", "value": "2141192192"}]}, "expected": [{"type": "f32", "value": "nan:arithmetic"}]}, 
  {"type": "assert_return", "line": 137, "action": {"type": "invoke", "field": "f64.no_fold_div_one", "args": [{"type": "f64", "value": "9219994337134247936"}]}, "expected": [{"type": "f64", "value": "nan:arithmetic"}]}, 
  {"type": "module", "line": 141, "filename": "float_exprs.9.wasm"}, 
  {"type": "assert_return", "line": 148, "action": {"type": "invoke", "field": "f32.no_fold_div_neg1", "args": [{"type": "f32", "value": "2141192192"}]}, "expected": [{"type": "f32", "value": "nan:arithmetic"}]}, 
  {"type": "assert_return", "line": 149, "action": {"type": "invoke", "field": "f64.no_fold_div_neg1", "args": [{"type": "f64", "value": "9219994337134247936"}]}, "expected": [{"type": "f64", "value": "nan:arithmetic"}]}, 
  {"type": "module", "line": 153, "filename": "float_exprs.10.wasm"}, 
  {"type": "assert_return", "line": 160, "action": {"type": "invoke", "field": "f32.no_fold_neg0_sub", "args": [{"type": "f32", "value": "2141192192"}]}, "expected": [{"type": "f32", "value": "nan:arithmetic"}]}, 
  {"type": "assert_return", "line": 161, "action": {"type": "invoke", "field": "f64.no_fold_neg0_sub", "args": [{"type": "f64", "value": "9219994337134247936"}]}, "expected": [{"type": "f64", "value": "nan:arithmetic"}]}, 
  {"type": "module", "line": 165, "filename": "float_exprs.11.wasm"}, 
  {"type": "assert_return", "line": 172, "action": {"type": "invoke", "field": "f32.no_fold_neg1_mul", "args": [{"type": "f32", "value": "2141192192"}]}, "expected": [{"type": "f32", "value": "nan:arithmetic"}]}, 
  {"type": "assert_return", "line": 173, "action": {"type": "invoke", "field": "f64.no_fold_neg1_mul", "args": [{"type": "f64", "value": "9219994337134247936"}]}, "expected": [{"type": "f64", "value": "nan:arithmetic"}]}, 
  {"type": "module", "line": 177, "filename": "float_exprs.12.wasm"}, 
  {"type": "assert_return", "line": 184, "action": {"type": "invoke", "field": "f32.no_fold_eq_self", "args": [{"type": "f32", "value": "2143289344"}]}, "expected": [{"type": "i32", "value": "0"}]}, 
  {"type": "assert_return", "line": 185, "action": {"type": "invoke", "field": "f64.no_fold_eq_self", "args": [{"type": "f64", "value": "9221120237041090560"}]}, "expected": [{"type": "i32", "value": "0"}]}, 
  {"type": "module", "line": 189, "filename": "float_exprs.13.wasm"}, 
  {"type": "assert_return", "line": 196, "action": {"type": "invoke", "field": "f32.no_fold_ne_self", "args": [{"type": "f32", "value": "2143289344"}]}, "expected": [{"type": "i32", "value": "1"}]}, 
  {"type": "assert_return", "line": 197, "action": {"type": "invoke", "field": "f64.no_fold_ne_self", "args": [{"type": "f64", "value": "9221120237041090560"}]}, "expected": [{"type": "i32", "value": "1"}]}, 
  {"type": "module", "line": 201, "filename": "float_exprs.14.wasm"}, 
  {"type": "assert_return", "line": 208, "action": {"type": "invoke", "field": "f32.no_fold_sub_self", "args": [{"type": "f32", "value": "2139095040"}]}, "expected": [{"type": "f32", "value": "nan:canonical"}]}, 
  {"type": "assert_return", "line": 209, "action": {"type": "invoke", "field": "f32.no_fold_sub_self", "args": [{"type": "f32", "value": "2143289344"}]}, "expected": [{"type": "f32", "value": "nan:canonical"}]}, 
  {"type": "assert_return", "line": 210, "action": {"type": "invoke", "field": "f64.no_fold_sub_self", "args": [{"type": "f64", "value": "9218868437227405312"}]}, "expected": [{"type": "f64", "value": "nan:canonical"}]}, 
  {"type": "assert_return", "line": 211, "action": {"type": "invoke", "field": "f64.no_fold_sub_self", "args": [{"type": "f64", "value": "9221120237041090560"}]}, "expected": [{"type": "f64", "value": "nan:canonical"}]}, 
  {"type": "module", "line": 215, "filename": "float_exprs.15.wasm"}, 
  {"type": "assert_return", "line": 222, "action": {"type": "invoke", "field": "f32.no_fold_div_self", "args": [{"type": "f32", "value": "2139095040"}]}, "expected": [{"type": "f32", "value": "nan:canonical"}]}, 
  {"type": "assert_return", "line": 223, "action": {"type": "invoke", "field": "f32.no_fold_div_self", "args": [{"type": "f32", "value": "2143289344"}]}, "expected": [{"type": "f32", "value": "nan:canonical"}]}, 
  {"type": "assert_return", "line": 224, "action": {"type": "invoke", "field": "f32.no_fold_div_self", "args": [{"type": "f32", "value": "0"}]}, "expected": [{"type": "f32", "value": "nan:canonical"}]}, 
  {"type": "assert_return", "line": 225, "action": {"type": "invoke", "field": "f32.no_fold_div_self", "args": [{"type": "f32", "value": "2147483648"}]}, "expected": [{"type": "f32", "value": "nan:canonical"}]}, 
  {"type": "assert_return", "line": 226, "action": {"type": "invoke", "field": "f64.no_fold_div_self", "args": [{"type": "f64", "value": "9218868437227405312"}]}, "expected": [{"type": "f64", "value": "nan:canonical"}]}, 
  {"type": "assert_return", "line": 227, "action": {"type": "invoke", "field": "f64.no_fold_div_self", "args": [{"type": "f64", "value": "9221120237041090560"}]}, "expected": [{"type": "f64", "value": "nan:canonical"}]}, 
  {"type": "assert_return", "line": 228, "action": {"type": "invoke", "field": "f64.no_fold_div_self", "args": [{"type": "f64", "value": "0"}]}, "expected": [{"type": "f64", "value": "nan:canonical"}]}, 
  {"type": "assert_return", "line": 229, "action": {"type": "invoke", "field": "f64.no_fold_div_self", "args": [{"type": "f64", "value": "9223372036854775808"}]}, "expected": [{"type": "f64", "value": "nan:canonical"}]}, 
  {"type": "module", "line": 233, "filename": "float_exprs.16.wasm"}, 
  {"type": "assert_return", "line": 240, "action": {"type": "invoke", "field": "f32.no_fold_div_3", "args": [{"type": "f32", "value": "3634023955"}]}, "expected": [{"type": "f32", "value": "3620628505"}]}, 
  {"type": "assert_return", "line": 241, "action": {"type": "invoke", "field": "f32.no_fold_div_3", "args": [{"type": "f32", "value": "4000459555"}]}, "expected": [{"type": "f32", "value": "3986780695"}]}, 
  {"type": "assert_return", "line": 242, "action": {"type": "invoke", "field": "f32.no_fold_div_3", "args": [{"type": "f32", "value": "2517965963"}]}, "expected": [{"type": "f32", "value": "2504446137"}]}, 
  {"type": "assert_return", "line": 243, "action": {"type": "invoke", "field": "f32.no_fold_div_3", "args": [{"type": "f32", "value": "2173683100"}]}, "expected": [{"type": "f32", "value": "2160046629"}]}, 
  {"type": "assert_return", "line": 244, "action": {"type": "invoke", "field": "f32.no_fold_div_3", "args": [{"type": "f32", "value": "2750097330"}]}, "expected": [{"type": "f32", "value": "2736571681"}]}, 
  {"type": "assert_return", "line": 245, "action": {"type": "invoke", "field": "f64.no_fold_div_3", "args": [{"type": "f64", "value": "16679796490173820099"}]}, "expected": [{"type": "f64", "value": "16672802667330368301"}]}, 
  {"type": "assert_return", "line": 246, "action": {"type": "invoke", "field": "f64.no_fold_div_3", "args": [{"type": "f64", "value": "13081777497422760306"}]}, "expected": [{"type": "f64", "value": "13074664638073319671"}]}, 
  {"type": "assert_return", "line": 247, "action": {"type": "invoke", "field": "f64.no_fold_div_3", "args": [{"type": "f64", "value": "674365394458900388"}]}, "expected": [{"type": "f64", "value": "667250911628840899"}]}, 
  {"type": "assert_return", "line": 248, "action": {"type": "invoke", "field": "f64.no_fold_div_3", "args": [{"type": "f64", "value": "18365700772251870524"}]}, "expected": [{"type": "f64", "value": "18358201936817915643"}]}, 
  {"type": "assert_return", "line": 249, "action": {"type": "invoke", "field": "f64.no_fold_div_3", "args": [{"type": "f64", "value": "6476267216527259981"}]}, "expected": [{"type": "f64", "value": "6468791534604471399"}]}, 
  {"type": "module", "line": 253, "filename": "float_exprs.17.wasm"}, 
  {"type": "assert_return", "line": 260, "action": {"type": "invoke", "field": "f32.no_factor", "args": [{"type": "f32", "value": "3550941609"}, {"type": "f32", "value": "3628209942"}, {"type": "f32", "value": "1568101121"}]}, "expected": [{"type": "f32", "value": "4131116008"}]}, 
  {"type": "assert_return", "line": 261, "action": {"type": "invoke", "field": "f32.no_factor", "args": [{"type": "f32", "value": "3168433147"}, {"type": "f32", "value": "1028017286"}, {"type": "f32", "value": "3141035521"}]}, "expected": [{"type": "f32", "value": "3095417249"}]}, 
  {"type": "assert_return", "line": 262, "action": {"type": "invoke", "field": "f32.no_factor", "args": [{"type": "f32", "value": "2869115159"}, {"type": "f32", "value": "536308199"}, {"type": "f32", "value": "2100177580"}]}, "expected": [{"type": "f32", "value": "3904015703"}]}, 
  {"type": "assert_return", "line": 263, "action": {"type": "invoke", "field": "f32.no_factor", "args": [{"type": "f32", "value": "2684117842"}, {"type": "f32", "value": "369386499"}, {"type": "f32", "value": "2061166438"}]}, "expected": [{"type": "f32", "value": "3679965352"}]}, 
  {"type": "assert_return", "line": 264, "action": {"type": "invoke", "field": "f32.no_factor", "args": [{"type": "f32", "value": "2510116111"}, {"type": "f32", "value": "476277495"}, {"type": "f32", "value": "1237750930"}]}, "expected": [{"type": "f32", "value": "649094375"}]}, 
  {"type": "assert_return", "line": 265, "action": {"type": "invoke", "field": "f64.no_factor", "args": [{"type": "f64", "value": "2698691837980592503"}, {"type": "f64", "value": "2529920934327896545"}, {"type": "f64", "value": "12819783413251458936"}]}, "expected": [{"type": "f64", "value": "10911876679403600666"}]}, 
  {"type": "assert_return", "line": 266, "action": {"type": "invoke", "field": "f64.no_factor", "args": [{"type": "f64", "value": "1626864102540432200"}, {"type": "f64", "value": "9287829620889669687"}, {"type": "f64", "value": "9524500187773169472"}]}, "expected": [{"type": "f64", "value": "0"}]}, 
  {"type": "assert_return", "line": 267, "action": {"type": "invoke", "field": "f64.no_factor", "args": [{"type": "f64", "value": "12326480769054961745"}, {"type": "f64", "value": "12563546453737163926"}, {"type": "f64", "value": "15990519985875741037"}]}, "expected": [{"type": "f64", "value": "5500432744005058080"}]}, 
  {"type": "assert_return", "line": 268, "action": {"type": "invoke", "field": "f64.no_factor", "args": [{"type": "f64", "value": "12532477544855171977"}, {"type": "f64", "value": "3439526350000314825"}, {"type": "f64", "value": "12694541248380731909"}]}, "expected": [{"type": "f64", "value": "11527035460272583044"}]}, 
  {"type": "assert_return", "line": 269, "action": {"type": "invoke", "field": "f64.no_factor", "args": [{"type": "f64", "value": "1871759566187673434"}, {"type": "f64", "value": "2002968319587025494"}, {"type": "f64", "value": "16033202089880281080"}]}, "expected": [{"type": "f64", "value": "13429277897969282899"}]}, 
  {"type": "module", "line": 273, "filename": "float_exprs.18.wasm"}, 
  {"type": "assert_return", "line": 280, "action": {"type": "invoke", "field": "f32.no_distribute", "args": [{"type": "f32", "value": "3550941609"}, {"type": "f32", "value": "3628209942"}, {"type": "f32", "value": "1568101121"}]}, "expected": [{"type": "f32", "value": "4131116009"}]}, 
  {"type": "assert_return", "line": 281, "action": {"type": "invoke", "field": "f32.no_distribute", "args": [{"type": "f32", "value": "3168433147"}, {"type": "f32", "value": "1028017286"}, {"type": "f32", "value": "3141035521"}]}, "expected": [{"type": "f32", "value": "3095417248"}]}, 
  {"type": "assert_return", "line": 282, "action": {"type": "invoke", "field": "f32.no_distribute", "args": [{"type": "f32", "value": "2869115159"}, {"type": "f32", "value": "536308199"}, {"type": "f32", "value": "2100177580"}]}, "expected": [{"type": "f32", "value": "3904015704"}]}, 
  {"type": "assert_return", "line": 283, "action": {"type": "invoke", "field": "f32.no_distribute", "args": [{"type": "f32", "value": "2684117842"}, {"type": "f32", "value": "369386499"}, {"type": "f32", "value": "2061166438"}]}, "expected": [{"type": "f32", "value": "3679965351"}]}, 
  {"type": "assert_return", "line": 284, "action": {"type": "invoke", "field": "f32.no_distribute", "args": [{"type": "f32", "value": "2510116111"}, {"type": "f32", "value": "476277495"}, {"type": "f32", "value": "1237750930"}]}, "expected": [{"type": "f32", "value": "649094374"}]}, 
  {"type": "assert_return", "line": 285, "action": {"type": "invoke", "field": "f64.no_distribute", "args": [{"type": "f64", "value": "2698691837980592503"}, {"type": "f64", "value": "2529920934327896545"}, {"type": "f64", "value": "12819783413251458936"}]}, "expected": [{"type": "f64", "value": "10911876679403600667"}]}, 
  {"type": "assert_return", "line": 286, "action": {"type": "invoke", "field": "f64.no_distribute", "args": [{"type": "f64", "value": "1626864102540432200"}, {"type": "f64", "value": "9287829620889669687"}, {"type": "f64", "value": "9524500187773169472"}]}, "expected": [{"type": "f64", "value": "9223372036854775808"}]}, 
  {"type": "assert_return", "line": 287, "action": {"type": "invoke", "field": "f64.no_distribute", "args": [{"type": "f64", "value": "12326480769054961745"}, {"type": "f64", "value": "12563546453737163926"}, {"type": "f64", "value": "15990519985875741037"}]}, "expected": [{"type": "f64", "value": "5500432744005058079"}]}, 
  {"type": "assert_return", "line": 288, "action": {"type": "invoke", "field": "f64.no_distribute", "args": [{"type": "f64", "value": "12532477544855171977"}, {"type": "f64", "value": "3439526350000314825"}, {"type": "f64", "value": "12694541248380731909"}]}, "expected": [{"type": "f64", "value": "11527035460272583043"}]}, 
  {"type": "assert_return", "line": 289, "action": {"type": "invoke", "field": "f64.no_distribute", "args": [{"type": "f64", "value": "1871759566187673434"}, {"type": "f64", "value": "2002968319587025494"}, {"type": "f64", "value": "16033202089880281080"}]}, "expected": [{"type": "f64", "value": "13429277897969282898"}]}, 
  {"type": "module", "line": 293, "filename": "float_exprs.19.wasm"}, 
  {"type": "assert_return", "line": 300, "action": {"type": "invoke", "field": "f32.no_regroup_div_mul", "args": [{"type": "f32", "value": "2249624147"}, {"type": "f32", "value": "2678828342"}, {"type": "f32", "value": "95319815"}]}, "expected": [{"type": "f32", "value": "538190437"}]}, 
  {"type": "assert_return", "line": 301, "action": {"type": "invoke", "field": "f32.no_regroup_div_mul", "args": [{"type": "f32", "value": "3978470300"}, {"type": "f32", "value": "2253997363"}, {"type": "f32", "value": "3824852100"}]}, "expected": [{"type": "f32", "value": "2147483648"}]}, 
  {"type": "assert_return", "line": 302, "action": {"type": "invoke", "field": "f32.no_regroup_div_mul", "args": [{"type": "f32", "value": "3350590135"}, {"type": "f32", "value": "3042588643"}, {"type": "f32", "value": "2186448635"}]}, "expected": [{"type": "f32", "value": "4206661932"}]}, 
  {"type": "assert_return", "line": 303, "action": {"type": "invoke", "field": "f32.no_regroup_div_mul", "args": [{"type": "f32", "value": "2430706172"}, {"type": "f32", "value": "1685220483"}, {"type": "f32", "value": "1642018044"}]}, "expected": [{"type": "f32", "value": "2473922297"}]}, 
  {"type": "assert_return", "line": 304, "action": {"type": "invoke", "field": "f32.no_regroup_div_mul", "args": [{"type": "f32", "value": "2011387707"}, {"type": "f32", "value": "1274956446"}, {"type": "f32", "value": "3811596788"}]}, "expected": [{"type": "f32", "value": "3768838261"}]}, 
  {"type": "assert_return", "line": 305, "action": {"type": "invoke", "field": "f64.no_regroup_div_mul", "args": [{"type": "f64", "value": "2703215631877943472"}, {"type": "f64", "value": "13295603997208052007"}, {"type": "f64", "value": "1719211436532588593"}]}, "expected": [{"type": "f64", "value": "14279677686886620461"}]}, 
  {"type": "assert_return", "line": 306, "action": {"type": "invoke", "field": "f64.no_regroup_div_mul", "args": [{"type": "f64", "value": "6126139291059848917"}, {"type": "f64", "value": "2596039250849921421"}, {"type": "f64", "value": "17423258659719899654"}]}, "expected": [{"type": "f64", "value": "9223372036854775808"}]}, 
  {"type": "assert_return", "line": 307, "action": {"type": "invoke", "field": "f64.no_regroup_div_mul", "args": [{"type": "f64", "value": "2451868557331674239"}, {"type": "f64", "value": "8672326445062988097"}, {"type": "f64", "value": "2593279393835739385"}]}, "expected": [{"type": "f64", "value": "9218868437227405312"}]}, 
  {"type": "assert_return", "line": 308, "action": {"type": "invoke", "field": "f64.no_regroup_div_mul", "args": [{"type": "f64", "value": "15994259208199847538"}, {"type": "f64", "value": "16584156163346075677"}, {"type": "f64", "value": "17596923907238870430"}]}, "expected": [{"type": "f64", "value": "14981548491626301009"}]}, 
  {"type": "assert_return", "line": 309, "action": {"type": "invoke", "field": "f64.no_regroup_div_mul", "args": [{"type": "f64", "value": "1912002771029783751"}, {"type": "f64", "value": "655387110450354003"}, {"type": "f64", "value": "10060746190138762841"}]}, "expected": [{"type": "f64", "value": "10953754119023888080"}]}, 
  {"type": "module", "line": 313, "filename": "float_exprs.20.wasm"}, 
  {"type": "assert_return", "line": 320, "action": {"type": "invoke", "field": "f32.no_regroup_mul_div", "args": [{"type": "f32", "value": "2249624147"}, {"type": "f32", "value": "2678828342"}, {"type": "f32", "value": "95319815"}]}, "expected": [{"type": "f32", "value": "0"}]}, 
  {"type": "assert_return", "line": 321, "action": {"type": "invoke", "field": "f32.no_regroup_mul_div", "args": [{"type": "f32", "value": "3978470300"}, {"type": "f32", "value": "2253997363"}, {"type": "f32", "value": "3824852100"}]}, "expected": [{"type": "f32", "value": "2408382580"}]}, 
  {"type": "assert_return", "line": 322, "action": {"type": "invoke", "field": "f32.no_regroup_mul_div", "args": [{"type": "f32", "value": "3350590135"}, {"type": "f32", "value": "3042588643"}, {"type": "f32", "value": "2186448635"}]}, "expected": [{"type": "f32", "value": "4206661933"}]}, 
  {"type": "assert_return", "line": 323, "action": {"type": "invoke", "field": "f32.no_regroup_mul_div", "args": [{"type": "f32", "value": "2430706172"}, {"type": "f32", "value": "1685220483"}, {"type": "f32", "value": "1642018044"}]}, "expected": [{"type": "f32", "value": "2473922298"}]}, 
  {"type": "assert_return", "line": 324, "action": {"type": "invoke", "field": "f32.no_regroup_mul_div", "args": [{"type": "f32", "value": "2011387707"}, {"type": "f32", "value": "1274956446"}, {"type": "f32", "value": "3811596788"}]}, "expected": [{"type": "f32", "value": "4286578688"}]}, 
  {"type": "assert_return", "line": 325, "action": {"type": "invoke", "field": "f64.no_regroup_mul_div", "args": [{"type": "f64", "value": "2703215631877943472"}, {"type": "f64", "value": "13295603997208052007"}, {"type": "f64", "value": "1719211436532588593"}]}, "expected": [{"type": "f64", "value": "14279677686886620462"}]}, 
  {"type": "assert_return", "line": 326, "action": {"type": "invoke", "field": "f64.no_regroup_mul_div", "args": [{"type": "f64", "value": "6126139291059848917"}, {"type": "f64", "value": "2596039250849921421"}, {"type": "f64", "value": "17423258659719899654"}]}, "expected": [{"type": "f64", "value": "9746029336072872080"}]}, 
  {"type": "assert_return", "line": 327, "action": {"type": "invoke", "field": "f64.no_regroup_mul_div", "args": [{"type": "f64", "value": "2451868557331674239"}, {"type": "f64", "value": "8672326445062988097"}, {"type": "f64", "value": "2593279393835739385"}]}, "expected": [{"type": "f64", "value": "8531093589128288889"}]}, 
  {"type": "assert_return", "line": 328, "action": {"type": "invoke", "field": "f64.no_regroup_mul_div", "args": [{"type": "f64", "value": "15994259208199847538"}, {"type": "f64", "value": "16584156163346075677"}, {"type": "f64", "value": "17596923907238870430"}]}, "expected": [{"type": "f64", "value": "18442240474082181120"}]}, 
  {"type": "assert_return", "line": 329, "action": {"type": "invoke", "field": "f64.no_regroup_mul_div", "args": [{"type": "f64", "value": "1912002771029783751"}, {"type": "f64", "value": "655387110450354003"}, {"type": "f64", "value": "10060746190138762841"}]}, "expected": [{"type": "f64", "value": "9223372036854775808"}]}, 
  {"type": "module", "line": 333, "filename": "float_exprs.21.wasm"}, 
  {"type": "assert_return", "line": 340, "action": {"type": "invoke", "field": "f32.no_reassociate_add", "args": [{"type": "f32", "value": "3585064686"}, {"type": "f32", "value": "1354934024"}, {"type": "f32", "value": "3612934982"}, {"type": "f32", "value": "3557837641"}]}, "expected": [{"type": "f32", "value": "3614520891"}]}, 
  {"type": "assert_return", "line": 341, "action": {"type": "invoke", "field": "f32.no_reassociate_add", "args": [{"type": "f32", "value": "997006780"}, {"type": "f32", "value": "3156314493"}, {"type": "f32", "value": "1031916275"}, {"type": "f32", "value": "3157700435"}]}, "expected": [{"type": "f32", "value": "1027365261"}]}, 
  {"type": "assert_return", "line": 342, "action": {"type": "invoke", "field": "f32.no_reassociate_add", "args": [{"type": "f32", "value": "3506363549"}, {"type": "f32", "value": "3562765939"}, {"type": "f32", "value": "1440782572"}, {"type": "f32", "value": "1388583643"}]}, "expected": [{"type": "f32", "value": "1439168977"}]}, 
  {"type": "assert_return", "line": 343, "action": {"type": "invoke", "field": "f32.no_reassociate_add", "args": [{"type": "f32", "value": "1460378878"}, {"type": "f32", "value": "1481791683"}, {"type": "f32", "value": "3506843934"}, {"type": "f32", "value": "1493913729"}]}, "expected": [{"type": "f32", "value": "1497931771"}]}, 
  {"type": "assert_return", "line": 344, "action": {"type": "invoke", "field": "f32.no_reassociate_add", "args": [{"type": "f32", "value": "1975099005"}, {"type": "f32", "value": "4120668550"}, {"type": "f32", "value": "1947708458"}, {"type": "f32", "value": "4008073260"}]}, "expected": [{"type": "f32", "value": "1958779787"}]}, 
  {"type": "assert_return", "line": 345, "action": {"type": "invoke", "field": "f64.no_reassociate_add", "args": [{"type": "f64", "value": "17619937326421449126"}, {"type": "f64", "value": "8424880666975634327"}, {"type": "f64", "value": "8461713040394112626"}, {"type": "f64", "value": "17692076622886930107"}]}, "expected": [{"type": "f64", "value": "17689770886425413754"}]}, 
  {"type": "assert_return", "line": 346, "action": {"type": "invoke", "field": "f64.no_reassociate_add", "args": [{"type": "f64", "value": "2161744272815763681"}, {"type": "f64", "value": "2160815018984030177"}, {"type": "f64", "value": "11389452991481170854"}, {"type": "f64", "value": "11158554735757873927"}]}, "expected": [{"type": "f64", "value": "11367213592018398582"}]}, 
  {"type": "assert_return", "line": 347, "action": {"type": "invoke", "field": "f64.no_reassociate_add", "args": [{"type": "f64", "value": "15816220208145029204"}, {"type": "f64", "value": "6443786499090728432"}, {"type": "f64", "value": "15798639273395365185"}, {"type": "f64", "value": "6395820899158300605"}]}, "expected": [{"type": "f64", "value": "15816713260997571051"}]}, 
  {"type": "assert_return", "line": 348, "action": {"type": "invoke", "field": "f64.no_reassociate_add", "args": [{"type": "f64", "value": "12406188505172681730"}, {"type": "f64", "value": "3227622722685619614"}, {"type": "f64", "value": "12653209142287077985"}, {"type": "f64", "value": "3439058911346459774"}]}, "expected": [{"type": "f64", "value": "3437283564188778523"}]}, 
  {"type": "assert_return", "line": 349, "action": {"type": "invoke", "field": "f64.no_reassociate_add", "args": [{"type": "f64", "value": "16720963389015391005"}, {"type": "f64", "value": "16597092572968550980"}, {"type": "f64", "value": "7518944085377596897"}, {"type": "f64", "value": "16733407756820198530"}]}, "expected": [{"type": "f64", "value": "7516931113564586278"}]}, 
  {"type": "module", "line": 353, "filename": "float_exprs.22.wasm"}, 
  {"type": "assert_return", "line": 360, "action": {"type": "invoke", "field": "f32.no_reassociate_mul", "args": [{"type": "f32", "value": "97158612"}, {"type": "f32", "value": "796388711"}, {"type": "f32", "value": "4071607776"}, {"type": "f32", "value": "603464324"}]}, "expected": [{"type": "f32", "value": "2373950135"}]}, 
  {"type": "assert_return", "line": 361, "action": {"type": "invoke", "field": "f32.no_reassociate_mul", "args": [{"type": "f32", "value": "598526039"}, {"type": "f32", "value": "4072603010"}, {"type": "f32", "value": "2166864805"}, {"type": "f32", "value": "3802968051"}]}, "expected": [{"type": "f32", "value": "3152274558"}]}, 
  {"type": "assert_return", "line": 362, "action": {"type": "invoke", "field": "f32.no_reassociate_mul", "args": [{"type": "f32", "value": "666201298"}, {"type": "f32", "value": "3678968917"}, {"type": "f32", "value": "2879732647"}, {"type": "f32", "value": "1703934016"}]}, "expected": [{"type": "f32", "value": "1439591542"}]}, 
  {"type": "assert_return", "line": 363, "action": {"type": "invoke", "field": "f32.no_reassociate_mul", "args": [{"type": "f32", "value": "191948150"}, {"type": "f32", "value": "1717012201"}, {"type": "f32", "value": "3682645872"}, {"type": "f32", "value": "3713382507"}]}, "expected": [{"type": "f32", "value": "1814709127"}]}, 
  {"type": "assert_return", "line": 364, "action": {"type": "invoke", "field": "f32.no_reassociate_mul", "args": [{"type": "f32", "value": "2384301792"}, {"type": "f32", "value": "656878874"}, {"type": "f32", "value": "3239861549"}, {"type": "f32", "value": "1564466295"}]}, "expected": [{"type": "f32", "value": "355327948"}]}, 
  {"type": "assert_return", "line": 365, "action": {"type": "invoke", "field": "f64.no_reassociate_mul", "args": [{"type": "f64", "value": "10830726381612138752"}, {"type": "f64", "value": "18293529276079591087"}, {"type": "f64", "value": "12137662286027993114"}, {"type": "f64", "value": "16821646709291069775"}]}, "expected": [{"type": "f64", "value": "7368793799369880819"}]}, 
  {"type": "assert_return", "line": 366, "action": {"type": "invoke", "field": "f64.no_reassociate_mul", "args": [{"type": "f64", "value": "6653164799371160764"}, {"type": "f64", "value": "2285295038358358170"}, {"type": "f64", "value": "9783304669150272403"}, {"type": "f64", "value": "16266005085991502709"}]}, "expected": [{"type": "f64", "value": "2720645287366687760"}]}, 
  {"type": "assert_return", "line": 367, "action": {"type": "invoke", "field": "f64.no_reassociate_mul", "args": [{"type": "f64", "value": "2352911459797566465"}, {"type": "f64", "value": "17379873157362463143"}, {"type": "f64", "value": "1179129869275935356"}, {"type": "f64", "value": "14228398113747850351"}]}, "expected": [{"type": "f64", "value": "2873103656912958703"}]}, 
  {"type": "assert_return", "line": 368, "action": {"type": "invoke", "field": "f64.no_reassociate_mul", "args": [{"type": "f64", "value": "7724499817746503804"}, {"type": "f64", "value": "2704005046640722176"}, {"type": "f64", "value": "5612860422806321751"}, {"type": "f64", "value": "13727818095548724091"}]}, "expected": [{"type": "f64", "value": "15948568678460814092"}]}, 
  {"type": "assert_return", "line": 369, "action": {"type": "invoke", "field": "f64.no_reassociate_mul", "args": [{"type": "f64", "value": "3553622953022765407"}, {"type": "f64", "value": "1044040287824900408"}, {"type": "f64", "value": "17112762794520509437"}, {"type": "f64", "value": "11134095486440145773"}]}, "expected": [{"type": "f64", "value": "576919682754813073"}]}, 
  {"type": "module", "line": 373, "filename": "float_exprs.23.wasm"}, 
  {"type": "assert_return", "line": 380, "action": {"type": "invoke", "field": "f32.no_fold_div_0", "args": [{"type": "f32", "value": "1065353216"}]}, "expected": [{"type": "f32", "value": "2139095040"}]}, 
  {"type": "assert_return", "line": 381, "action": {"type": "invoke", "field": "f32.no_fold_div_0", "args": [{"type": "f32", "value": "3212836864"}]}, "expected": [{"type": "f32", "value": "4286578688"}]}, 
  {"type": "assert_return", "line": 382, "action": {"type": "invoke", "field": "f32.no_fold_div_0", "args": [{"type": "f32", "value": "2139095040"}]}, "expected": [{"type": "f32", "value": "2139095040"}]}, 
  {"type": "assert_return", "line": 383, "action": {"type": "invoke", "field": "f32.no_fold_div_0", "args": [{"type": "f32", "value": "4286578688"}]}, "expected": [{"type": "f32", "value": "4286578688"}]}, 
  {"type": "assert_return", "line": 384, "action": {"type": "invoke", "field": "f32.no_fold_div_0", "args": [{"type": "f32", "value": "0"}]}, "expected": [{"type": "f32", "value": "nan:canonical"}]}, 
  {"type": "assert_return", "line": 385, "action": {"type": "invoke", "field": "f32.no_fold_div_0", "args": [{"type": "f32", "value": "2147483648"}]}, "expected": [{"type": "f32", "value": "nan:canonical"}]}, 
  {"type": "assert_return", "line": 386, "action": {"type": "invoke", "field": "f32.no_fold_div_0", "args": [{"type": "f32", "value": "2141192192"}]}, "expected": [{"type": "f32", "value": "nan:arithmetic"}]}, 
  {"type": "assert_return", "line": 387, "action": {"type": "invoke", "field": "f32.no_fold_div_0", "args": [{"type": "f32", "value": "2143289344"}]}, "expected": [{"type": "f32", "value": "nan:canonical"}]}, 
  {"type": "assert_return", "line": 388, "action": {"type": "invoke", "field": "f64.no_fold_div_0", "args": [{"type": "f64", "value": "4607182418800017408"}]}, "expected": [{"type": "f64", "value": "9218868437227405312"}]}, 
  {"type": "assert_return", "line": 389, "action": {"type": "invoke", "field": "f64.no_fold_div_0", "args": [{"type": "f64", "value": "13830554455654793216"}]}, "expected": [{"type": "f64", "value": "18442240474082181120"}]}, 
  {"type": "assert_return", "line": 390, "action": {"type": "invoke", "field": "f64.no_fold_div_0", "args": [{"type": "f64", "value": "9218868437227405312"}]}, "expected": [{"type": "f64", "value": "9218868437227405312"}]}, 
  {"type": "assert_return", "line": 391, "action": {"type": "invoke", "field": "f64.no_fold_div_0", "args": [{"type": "f64", "value": "18442240474082181120"}]}, "expected": [{"type": "f64", "value": "18442240474082181120"}]}, 
  {"type": "assert_return", "line": 392, "action": {"type": "invoke", "field": "f64.no_fold_div_0", "args": [{"type": "f64", "value": "0"}]}, "expected": [{"type": "f64", "value": "nan:canonical"}]}, 
  {"type": "assert_return", "line": 393, "action": {"type": "invoke", "field": "f64.no_fold_div_0", "args": [{"type": "f64", "value": "9223372036854775808"}]}, "expected": [{"type": "f64", "value": "nan:canonical"}]}, 
  {"type": "assert_return", "line": 394, "action": {"type": "invoke", "field": "f64.no_fold_div_0", "args": [{"type": "f64", "value": "9221120237041090560"}]}, "expected": [{"type": "f64", "value": "nan:canonical"}]}, 
  {"type": "assert_return", "line": 395, "action": {"type": "invoke", "field": "f64.no_fold_div_0", "args": [{"type": "f64", "value": "9219994337134247936"}]}, "expected": [{"type": "f64", "value": "nan:arithmetic"}]}, 
  {"type": "module", "line": 399, "filename": "float_exprs.24.wasm"}, 
  {"type": "assert_return", "line": 406, "action": {"type": "invoke", "field": "f32.no_fold_div_neg0", "args": [{"type": "f32", "value": "1065353216"}]}, "expected": [{"type": "f32", "value": "4286578688"}]}, 
  {"type": "assert_return", "line": 407, "action": {"type": "invoke", "field": "f32.no_fold_div_neg0", "args": [{"type": "f32", "value": "3212836864"}]}, "expected": [{"type": "f32", "value": "2139095040"}]}, 
  {"type": "assert_return", "line": 408, "action": {"type": "invoke", "field": "f32.no_fold_div_neg0", "args": [{"type": "f32", "value": "2139095040"}]}, "expected": [{"type": "f32", "value": "4286578688"}]}, 
  {"type": "assert_return", "line": 409, "action": {"type": "invoke", "field": "f32.no_fold_div_neg0", "args": [{"type": "f32", "value": "4286578688"}]}, "expected": [{"type": "f32", "value": "2139095040"}]}, 
  {"type": "assert_return", "line": 410, "action": {"type": "invoke", "field": "f32.no_fold_div_neg0", "args": [{"type": "f32", "value": "0"}]}, "expected": [{"type": "f32", "value": "nan:canonical"}]}, 
  {"type": "assert_return", "line": 411, "action": {"type": "invoke", "field": "f32.no_fold_div_neg0", "args": [{"type": "f32", "value": "2147483648"}]}, "expected": [{"type": "f32", "value": "nan:canonical"}]}, 
  {"type": "assert_return", "line": 412, "action": {"type": "invoke", "field": "f32.no_fold_div_neg0", "args": [{"type": "f32", "value": "2141192192"}]}, "expected": [{"type": "f32", "value": "nan:arithmetic"}]}, 
  {"type": "assert_return", "line": 413, "action": {"type": "invoke", "field": "f32.no_fold_div_neg0", "args": [{"type": "f32", "value": "2143289344"}]}, "expected": [{"type": "f32", "value": "nan:canonical"}]}, 
  {"type": "assert_return", "line": 414, "action": {"type": "invoke", "field": "f64.no_fold_div_neg0", "args": [{"type": "f64", "value": "4607182418800017408"}]}, "expected": [{"type": "f64", "value": "18442240474082181120"}]}, 
  {"type": "assert_return", "line": 415, "action": {"type": "invoke", "field": "f64.no_fold_div_neg0", "args": [{"type": "f64", "value": "13830554455654793216"}]}, "expected": [{"type": "f64", "value": "9218868437227405312"}]}, 
  {"type": "assert_return", "line": 416, "action": {"type": "invoke", "field": "f64.no_fold_div_neg0", "args": [{"type": "f64", "value": "9218868437227405312"}]}, "expected": [{"type": "f64", "value": "18442240474082181120"}]}, 
  {"type": "assert_return", "line": 417, "action": {"type": "invoke", "field": "f64.no_fold_div_neg0", "args": [{"type": "f64", "value": "18442240474082181120"}]}, "expected": [{"type": "f64", "value": "9218868437227405312"}]}, 
  {"type": "assert_return", "line": 418, "action": {"type": "invoke", "field": "f64.no_fold_div_neg0", "args": [{"type": "f64", "value": "0"}]}, "expected": [{"type": "f64", "value": "nan:canonical"}]}, 
  {"type": "assert_return", "line": 419, "action": {"type": "invoke", "field": "f64.no_fold_div_neg0", "args": [{"type": "f64", "value": "9223372036854775808"}]}, "expected": [{"type": "f64", "value": "nan:canonical"}]}, 
  {"type": "assert_return", "line": 420, "action": {"type": "invoke", "field": "f64.no_fold_div_neg0", "args": [{"type": "f64", "value": "9221120237041090560"}]}, "expected": [{"type": "f64", "value": "nan:canonical"}]}, 
  {"type": "assert_return", "line": 421, "action": {"type": "invoke", "field": "f64.no_fold_div_neg0", "args": [{"type": "f64", "value": "9219994337134247936"}]}, "expected": [{"type": "f64", "value": "nan:arithmetic"}]}, 
  {"type": "module", "line": 425, "filename": "float_exprs.25.wasm"}, 
  {"type": "assert_return", "line": 434, "action": {"type": "invoke", "field": "f32.no_fold_to_hypot", "args": [{"type": "f32", "value": "392264092"}, {"type": "f32", "value": "497028527"}]}, "expected": [{"type": "f32", "value": "497028710"}]}, 
  {"type": "assert_return", "line": 435, "action": {"type": "invoke", "field": "f32.no_fold_to_hypot", "args": [{"type": "f32", "value": "2623653512"}, {"type": "f32", "value": "2317012712"}]}, "expected": [{"type": "f32", "value": "476165425"}]}, 
  {"type": "assert_return", "line": 436, "action": {"type": "invoke", "field": "f32.no_fold_to_hypot", "args": [{"type": "f32", "value": "2261577829"}, {"type": "f32", "value": "2641790518"}]}, "expected": [{"type": "f32", "value": "494307108"}]}, 
  {"type": "assert_return", "line": 437, "action": {"type": "invoke", "field": "f32.no_fold_to_hypot", "args": [{"type": "f32", "value": "3255678581"}, {"type": "f32", "value": "1210720351"}]}, "expected": [{"type": "f32", "value": "1210720352"}]}, 
  {"type": "assert_return", "line": 438, "action": {"type": "invoke", "field": "f32.no_fold_to_hypot", "args": [{"type": "f32", "value": "432505039"}, {"type": "f32", "value": "2618036612"}]}, "expected": [{"type": "f32", "value": "470544734"}]}, 
  {"type": "assert_return", "line": 439, "action": {"type": "invoke", "field": "f64.no_fold_to_hypot", "args": [{"type": "f64", "value": "1743351192697472785"}, {"type": "f64", "value": "2202602366606243153"}]}, "expected": [{"type": "f64", "value": "2202599296765198670"}]}, 
  {"type": "assert_return", "line": 440, "action": {"type": "invoke", "field": "f64.no_fold_to_hypot", "args": [{"type": "f64", "value": "6389333765198869657"}, {"type": "f64", "value": "15677343373020056630"}]}, "expected": [{"type": "f64", "value": "6453971336171062178"}]}, 
  {"type": "assert_return", "line": 441, "action": {"type": "invoke", "field": "f64.no_fold_to_hypot", "args": [{"type": "f64", "value": "2195337108264055819"}, {"type": "f64", "value": "10384237061545402288"}]}, "expected": [{"type": "f64", "value": "2195504818343116800"}]}, 
  {"type": "assert_return", "line": 442, "action": {"type": "invoke", "field": "f64.no_fold_to_hypot", "args": [{"type": "f64", "value": "11486582223361829725"}, {"type": "f64", "value": "1308532122426122043"}]}, "expected": [{"type": "f64", "value": "2263210186506929210"}]}, 
  {"type": "assert_return", "line": 443, "action": {"type": "invoke", "field": "f64.no_fold_to_hypot", "args": [{"type": "f64", "value": "1591440107418864392"}, {"type": "f64", "value": "11515806374387309036"}]}, "expected": [{"type": "f64", "value": "2292434337532533215"}]}, 
  {"type": "module", "line": 447, "filename": "float_exprs.26.wasm"}, 
  {"type": "assert_return", "line": 452, "action": {"type": "invoke", "field": "f32.no_approximate_reciprocal", "args": [{"type": "f32", "value": "3130294363"}]}, "expected": [{"type": "f32", "value": "3294406762"}]}, 
  {"type": "assert_return", "line": 453, "action": {"type": "invoke", "field": "f32.no_approximate_reciprocal", "args": [{"type": "f32", "value": "2138280080"}]}, "expected": [{"type": "f32", "value": "2204223"}]}, 
  {"type": "assert_return", "line": 454, "action": {"type": "invoke", "field": "f32.no_approximate_reciprocal", "args": [{"type": "f32", "value": "2434880051"}]}, "expected": [{"type": "f32", "value": "3989512051"}]}, 
  {"type": "assert_return", "line": 455, "action": {"type": "invoke", "field": "f32.no_approximate_reciprocal", "args": [{"type": "f32", "value": "1705936409"}]}, "expected": [{"type": "f32", "value": "423346609"}]}, 
  {"type": "assert_return", "line": 456, "action": {"type": "invoke", "field": "f32.no_approximate_reciprocal", "args": [{"type": "f32", "value": "2528120561"}]}, "expected": [{"type": "f32", "value": "3896123071"}]}, 
  {"type": "module", "line": 460, "filename": "float_exprs.27.wasm"}, 
  {"type": "assert_return", "line": 467, "action": {"type": "invoke", "field": "f32.no_approximate_reciprocal_sqrt", "args": [{"type": "f32", "value": "708147349"}]}, "expected": [{"type": "f32", "value": "1243088746"}]}, 
  {"type": "assert_return", "line": 468, "action": {"type": "invoke", "field": "f32.no_approximate_reciprocal_sqrt", "args": [{"type": "f32", "value": "1005852643"}]}, "expected": [{"type": "f32", "value": "1094279611"}]}, 
  {"type": "assert_return", "line": 469, "action": {"type": "invoke", "field": "f32.no_approximate_reciprocal_sqrt", "args": [{"type": "f32", "value": "517799246"}]}, "expected": [{"type": "f32", "value": "1338168541"}]}, 
  {"type": "assert_return", "line": 470, "action": {"type": "invoke", "field": "f32.no_approximate_reciprocal_sqrt", "args": [{"type": "f32", "value": "704281251"}]}, "expected": [{"type": "f32", "value": "1245118689"}]}, 
  {"type": "assert_return", "line": 471, "action": {"type": "invoke", "field": "f32.no_approximate_reciprocal_sqrt", "args": [{"type": "f32", "value": "347001813"}]}, "expected": [{"type": "f32", "value": "1423641701"}]}, 
  {"type": "assert_return", "line": 473, "action": {"type": "invoke", "field": "f64.no_fuse_reciprocal_sqrt", "args": [{"type": "f64", "value": "8611259114887405475"}]}, "expected": [{"type": "f64", "value": "2604695339663988000"}]}, 
  {"type": "assert_return", "line": 474, "action": {"type": "invoke", "field": "f64.no_fuse_reciprocal_sqrt", "args": [{"type": "f64", "value": "6008428610859539631"}]}, "expected": [{"type": "f64", "value": "3906084647186679832"}]}, 
  {"type": "assert_return", "line": 475, "action": {"type": "invoke", "field": "f64.no_fuse_reciprocal_sqrt", "args": [{"type": "f64", "value": "5077495674931581012"}]}, "expected": [{"type": "f64", "value": "4371518865190387497"}]}, 
  {"type": "assert_return", "line": 476, "action": {"type": "invoke", "field": "f64.no_fuse_reciprocal_sqrt", "args": [{"type": "f64", "value": "7616219057857077123"}]}, "expected": [{"type": "f64", "value": "3102407657946187309"}]}, 
  {"type": "assert_return", "line": 477, "action": {"type": "invoke", "field": "f64.no_fuse_reciprocal_sqrt", "args": [{"type": "f64", "value": "5267858027841559467"}]}, "expected": [{"type": "f64", "value": "4276321761661248681"}]}, 
  {"type": "module", "line": 481, "filename": "float_exprs.28.wasm"}, 
  {"type": "assert_return", "line": 486, "action": {"type": "invoke", "field": "f32.no_approximate_sqrt_reciprocal", "args": [{"type": "f32", "value": "1574069443"}]}, "expected": [{"type": "f32", "value": "810003811"}]}, 
  {"type": "assert_return", "line": 487, "action": {"type": "invoke", "field": "f32.no_approximate_sqrt_reciprocal", "args": [{"type": "f32", "value": "992487567"}]}, "expected": [{"type": "f32", "value": "1100869283"}]}, 
  {"type": "assert_return", "line": 488, "action": {"type": "invoke", "field": "f32.no_approximate_sqrt_reciprocal", "args": [{"type": "f32", "value": "1644769121"}]}, "expected": [{"type": "f32", "value": "774822585"}]}, 
  {"type": "assert_return", "line": 489, "action": {"type": "invoke", "field": "f32.no_approximate_sqrt_reciprocal", "args": [{"type": "f32", "value": "1180509736"}]}, "expected": [{"type": "f32", "value": "1007269771"}]}, 
  {"type": "assert_return", "line": 490, "action": {"type": "invoke", "field": "f32.no_approximate_sqrt_reciprocal", "args": [{"type": "f32", "value": "1940205041"}]}, "expected": [{"type": "f32", "value": "627137240"}]}, 
  {"type": "module", "line": 494, "filename": "float_exprs.29.wasm"}, 
  {"type": "assert_return", "line": 505, "action": {"type": "invoke", "field": "i32.no_fold_f32_s", "args": [{"type": "i32", "value": "16777216"}]}, "expected": [{"type": "i32", "value": "16777216"}]}, 
  {"type": "assert_return", "line": 506, "action": {"type": "invoke", "field": "i32.no_fold_f32_s", "args": [{"type": "i32", "value": "16777217"}]}, "expected": [{"type": "i32", "value": "16777216"}]}, 
  {"type": "assert_return", "line": 507, "action": {"type": "invoke", "field": "i32.no_fold_f32_s", "args": [{"type": "i32", "value": "4026531856"}]}, "expected": [{"type": "i32", "value": "4026531856"}]}, 
  {"type": "assert_return", "line": 509, "action": {"type": "invoke", "field": "i32.no_fold_f32_u", "args": [{"type": "i32", "value": "16777216"}]}, "expected": [{"type": "i32", "value": "16777216"}]}, 
  {"type": "assert_return", "line": 510, "action": {"type": "invoke", "field": "i32.no_fold_f32_u", "args": [{"type": "i32", "value": "16777217"}]}, "expected": [{"type": "i32", "value": "16777216"}]}, 
  {"type": "assert_return", "line": 511, "action": {"type": "invoke", "field": "i32.no_fold_f32_u", "args": [{"type": "i32", "value": "4026531856"}]}, "expected": [{"type": "i32", "value": "4026531840"}]}, 
  {"type": "assert_return", "line": 513, "action": {"type": "invoke", "field": "i64.no_fold_f64_s", "args": [{"type": "i64", "value": "9007199254740992"}]}, "expected": [{"type": "i64", "value": "9007199254740992"}]}, 
  {"type": "assert_return", "line": 514, "action": {"type": "invoke", "field": "i64.no_fold_f64_s", "args": [{"type": "i64", "value": "9007199254740993"}]}, "expected": [{"type": "i64", "value": "9007199254740992"}]}, 
  {"type": "assert_return", "line": 515, "action": {"type": "invoke", "field": "i64.no_fold_f64_s", "args": [{"type": "i64", "value": "17293822569102705664"}]}, "expected": [{"type": "i64", "value": "17293822569102705664"}]}, 
  {"type": "assert_return", "line": 517, "action": {"type": "invoke", "field": "i64.no_fold_f64_u", "args": [{"type": "i64", "value": "9007199254740992"}]}, "expected": [{"type": "i64", "value": "9007199254740992"}]}, 
  {"type": "assert_return", "line": 518, "action": {"type": "invoke", "field": "i64.no_fold_f64_u", "args": [{"type": "i64", "value": "9007199254740993"}]}, "expected": [{"type": "i64", "value": "9007199254740992"}]}, 
  {"type": "assert_return", "line": 519, "action": {"type": "invoke", "field": "i64.no_fold_f64_u", "args": [{"type": "i64", "value": "17293822569102705664"}]}, "expected": [{"type": "i64", "value": "17293822569102704640"}]}, 
  {"type": "module", "line": 523, "filename": "float_exprs.30.wasm"}, 
  {"type": "assert_return", "line": 530, "action": {"type": "invoke", "field": "f32.no_fold_add_sub", "args": [{"type": "f32", "value": "677030386"}, {"type": "f32", "value": "2998136214"}]}, "expected": [{"type": "f32", "value": "677380096"}]}, 
  {"type": "assert_return", "line": 531, "action": {"type": "invoke", "field": "f32.no_fold_add_sub", "args": [{"type": "f32", "value": "3025420904"}, {"type": "f32", "value": "913921807"}]}, "expected": [{"type": "f32", "value": "3025420912"}]}, 
  {"type": "assert_return", "line": 532, "action": {"type": "invoke", "field": "f32.no_fold_add_sub", "args": [{"type": "f32", "value": "3908960888"}, {"type": "f32", "value": "4063404061"}]}, "expected": [{"type": "f32", "value": "3909091328"}]}, 
  {"type": "assert_return", "line": 533, "action": {"type": "invoke", "field": "f32.no_fold_add_sub", "args": [{"type": "f32", "value": "415467473"}, {"type": "f32", "value": "602055819"}]}, "expected": [{"type": "f32", "value": "415236096"}]}, 
  {"type": "assert_return", "line": 534, "action": {"type": "invoke", "field": "f32.no_fold_add_sub", "args": [{"type": "f32", "value": "2307650739"}, {"type": "f32", "value": "2511328013"}]}, "expected": [{"type": "f32", "value": "2315255808"}]}, 
  {"type": "assert_return", "line": 536, "action": {"type": "invoke", "field": "f64.no_fold_add_sub", "args": [{"type": "f64", "value": "9894695622864460712"}, {"type": "f64", "value": "747900745977727688"}]}, "expected": [{"type": "f64", "value": "9894695622864404480"}]}, 
  {"type": "assert_return", "line": 537, "action": {"type": "invoke", "field": "f64.no_fold_add_sub", "args": [{"type": "f64", "value": "2152218683357821298"}, {"type": "f64", "value": "2238360073507307376"}]}, "expected": [{"type": "f64", "value": "2152218683357790208"}]}, 
  {"type": "assert_return", "line": 538, "action": {"type": "invoke", "field": "f64.no_fold_add_sub", "args": [{"type": "f64", "value": "13697521605206502242"}, {"type": "f64", "value": "13818850255013161909"}]}, "expected": [{"type": "f64", "value": "13697521605247238144"}]}, 
  {"type": "assert_return", "line": 539, "action": {"type": "invoke", "field": "f64.no_fold_add_sub", "args": [{"type": "f64", "value": "12298280617237492384"}, {"type": "f64", "value": "3233965342858558382"}]}, "expected": [{"type": "f64", "value": "12298280617463775232"}]}, 
  {"type": "assert_return", "line": 540, "action": {"type": "invoke", "field": "f64.no_fold_add_sub", "args": [{"type": "f64", "value": "11043298296128683688"}, {"type": "f64", "value": "11182857345495207592"}]}, "expected": [{"type": "f64", "value": "11043298296775835648"}]}, 
  {"type": "module", "line": 544, "filename": "float_exprs.31.wasm"}, 
  {"type": "assert_return", "line": 551, "action": {"type": "invoke", "field": "f32.no_fold_sub_add", "args": [{"type": "f32", "value": "3291029084"}, {"type": "f32", "value": "1137280182"}]}, "expected": [{"type": "f32", "value": "3291029085"}]}, 
  {"type": "assert_return", "line": 552, "action": {"type": "invoke", "field": "f32.no_fold_sub_add", "args": [{"type": "f32", "value": "2287045896"}, {"type": "f32", "value": "272248696"}]}, "expected": [{"type": "f32", "value": "2287075328"}]}, 
  {"type": "assert_return", "line": 553, "action": {"type": "invoke", "field": "f32.no_fold_sub_add", "args": [{"type": "f32", "value": "1285466516"}, {"type": "f32", "value": "1361849144"}]}, "expected": [{"type": "f32", "value": "1285466624"}]}, 
  {"type": "assert_return", "line": 554, "action": {"type": "invoke", "field": "f32.no_fold_sub_add", "args": [{"type": "f32", "value": "740009747"}, {"type": "f32", "value": "2989707904"}]}, "expected": [{"type": "f32", "value": "740007936"}]}, 
  {"type": "assert_return", "line": 555, "action": {"type": "invoke", "field": "f32.no_fold_sub_add", "args": [{"type": "f32", "value": "1041827798"}, {"type": "f32", "value": "3335914317"}]}, "expected": [{"type": "f32", "value": "1041891328"}]}, 
  {"type": "assert_return", "line": 557, "action": {"type": "invoke", "field": "f64.no_fold_sub_add", "args": [{"type": "f64", "value": "5758126085282503565"}, {"type": "f64", "value": "14997141603873875659"}]}, "expected": [{"type": "f64", "value": "5758126085282503568"}]}, 
  {"type": "assert_return", "line": 558, "action": {"type": "invoke", "field": "f64.no_fold_sub_add", "args": [{"type": "f64", "value": "1609380455481879691"}, {"type": "f64", "value": "1695875689930159213"}]}, "expected": [{"type": "f64", "value": "1609380455482130432"}]}, 
  {"type": "assert_return", "line": 559, "action": {"type": "invoke", "field": "f64.no_fold_sub_add", "args": [{"type": "f64", "value": "5738179408840599949"}, {"type": "f64", "value": "15186085143903012996"}]}, "expected": [{"type": "f64", "value": "5738148875223433216"}]}, 
  {"type": "assert_return", "line": 560, "action": {"type": "invoke", "field": "f64.no_fold_sub_add", "args": [{"type": "f64", "value": "4492841470376833908"}, {"type": "f64", "value": "13773869588765591068"}]}, "expected": [{"type": "f64", "value": "4492841470376837120"}]}, 
  {"type": "assert_return", "line": 561, "action": {"type": "invoke", "field": "f64.no_fold_sub_add", "args": [{"type": "f64", "value": "2955729038738127538"}, {"type": "f64", "value": "12208627806665035010"}]}, "expected": [{"type": "f64", "value": "2955729038738127552"}]}, 
  {"type": "module", "line": 565, "filename": "float_exprs.32.wasm"}, 
  {"type": "assert_return", "line": 572, "action": {"type": "invoke", "field": "f32.no_fold_mul_div", "args": [{"type": "f32", "value": "3672556237"}, {"type": "f32", "value": "674649243"}]}, "expected": [{"type": "f32", "value": "3672556236"}]}, 
  {"type": "assert_return", "line": 573, "action": {"type": "invoke", "field": "f32.no_fold_mul_div", "args": [{"type": "f32", "value": "2995104604"}, {"type": "f32", "value": "178524966"}]}, "expected": [{"type": "f32", "value": "2995104594"}]}, 
  {"type": "assert_return", "line": 574, "action": {"type": "invoke", "field": "f32.no_fold_mul_div", "args": [{"type": "f32", "value": "2817764014"}, {"type": "f32", "value": "3620253920"}]}, "expected": [{"type": "f32", "value": "2817764013"}]}, 
  {"type": "assert_return", "line": 575, "action": {"type": "invoke", "field": "f32.no_fold_mul_div", "args": [{"type": "f32", "value": "1507152519"}, {"type": "f32", "value": "3723483599"}]}, "expected": [{"type": "f32", "value": "1507152518"}]}, 
  {"type": "assert_return", "line": 576, "action": {"type": "invoke", "field": "f32.no_fold_mul_div", "args": [{"type": "f32", "value": "2442510077"}, {"type": "f32", "value": "2906531411"}]}, "expected": [{"type": "f32", "value": "2442510079"}]}, 
  {"type": "assert_return", "line": 578, "action": {"type": "invoke", "field": "f64.no_fold_mul_div", "args": [{"type": "f64", "value": "10062123074470382106"}, {"type": "f64", "value": "12910565991996555404"}]}, "expected": [{"type": "f64", "value": "10062123074470422078"}]}, 
  {"type": "assert_return", "line": 579, "action": {"type": "invoke", "field": "f64.no_fold_mul_div", "args": [{"type": "f64", "value": "6340937764684870564"}, {"type": "f64", "value": "7244253720027059594"}]}, "expected": [{"type": "f64", "value": "6340937764684870565"}]}, 
  {"type": "assert_return", "line": 580, "action": {"type": "invoke", "field": "f64.no_fold_mul_div", "args": [{"type": "f64", "value": "14905228263410157971"}, {"type": "f64", "value": "11346251643264732732"}]}, "expected": [{"type": "f64", "value": "14905228263410157970"}]}, 
  {"type": "assert_return", "line": 581, "action": {"type": "invoke", "field": "f64.no_fold_mul_div", "args": [{"type": "f64", "value": "3862352046163709780"}, {"type": "f64", "value": "531112307488385734"}]}, "expected": [{"type": "f64", "value": "3862079437827029803"}]}, 
  {"type": "assert_return", "line": 582, "action": {"type": "invoke", "field": "f64.no_fold_mul_div", "args": [{"type": "f64", "value": "16807035693954817236"}, {"type": "f64", "value": "12360222454864961326"}]}, "expected": [{"type": "f64", "value": "16807035693954817237"}]}, 
  {"type": "module", "line": 586, "filename": "float_exprs.33.wasm"}, 
  {"type": "assert_return", "line": 593, "action": {"type": "invoke", "field": "f32.no_fold_div_mul", "args": [{"type": "f32", "value": "3538825650"}, {"type": "f32", "value": "1315641462"}]}, "expected": [{"type": "f32", "value": "3538825649"}]}, 
  {"type": "assert_return", "line": 594, "action": {"type": "invoke", "field": "f32.no_fold_div_mul", "args": [{"type": "f32", "value": "2777664539"}, {"type": "f32", "value": "3062588018"}]}, "expected": [{"type": "f32", "value": "2777664540"}]}, 
  {"type": "assert_return", "line": 595, "action": {"type": "invoke", "field": "f32.no_fold_div_mul", "args": [{"type": "f32", "value": "14863254"}, {"type": "f32", "value": "3278582479"}]}, "expected": [{"type": "f32", "value": "14863367"}]}, 
  {"type": "assert_return", "line": 596, "action": {"type": "invoke", "field": "f32.no_fold_div_mul", "args": [{"type": "f32", "value": "2593594703"}, {"type": "f32", "value": "3709508810"}]}, "expected": [{"type": "f32", "value": "2593594656"}]}, 
  {"type": "assert_return", "line": 597, "action": {"type": "invoke", "field": "f32.no_fold_div_mul", "args": [{"type": "f32", "value": "250394049"}, {"type": "f32", "value": "1296755844"}]}, "expected": [{"type": "f32", "value": "250394050"}]}, 
  {"type": "assert_return", "line": 599, "action": {"type": "invoke", "field": "f64.no_fold_div_mul", "args": [{"type": "f64", "value": "665690489208775809"}, {"type": "f64", "value": "14660005164454413124"}]}, "expected": [{"type": "f64", "value": "665690577722002880"}]}, 
  {"type": "assert_return", "line": 600, "action": {"type": "invoke", "field": "f64.no_fold_div_mul", "args": [{"type": "f64", "value": "10617267697387344269"}, {"type": "f64", "value": "4370684778829606254"}]}, "expected": [{"type": "f64", "value": "10617267697387344270"}]}, 
  {"type": "assert_return", "line": 601, "action": {"type": "invoke", "field": "f64.no_fold_div_mul", "args": [{"type": "f64", "value": "13179336828827425934"}, {"type": "f64", "value": "6536345148565138764"}]}, "expected": [{"type": "f64", "value": "13179336828827425933"}]}, 
  {"type": "assert_return", "line": 602, "action": {"type": "invoke", "field": "f64.no_fold_div_mul", "args": [{"type": "f64", "value": "12582623625647949669"}, {"type": "f64", "value": "15106746174896642041"}]}, "expected": [{"type": "f64", "value": "12582623625647949668"}]}, 
  {"type": "assert_return", "line": 603, "action": {"type": "invoke", "field": "f64.no_fold_div_mul", "args": [{"type": "f64", "value": "16624217782795067216"}, {"type": "f64", "value": "9062205521150975866"}]}, "expected": [{"type": "f64", "value": "16624217782795067215"}]}, 
  {"type": "module", "line": 607, "filename": "float_exprs.34.wasm"}, 
  {"type": "assert_return", "line": 614, "action": {"type": "invoke", "field": "f32.no_fold_div2_mul2", "args": [{"type": "f32", "value": "16777215"}]}, "expected": [{"type": "f32", "value": "16777216"}]}, 
  {"type": "assert_return", "line": 615, "action": {"type": "invoke", "field": "f64.no_fold_div2_mul2", "args": [{"type": "f64", "value": "9007199254740991"}]}, "expected": [{"type": "f64", "value": "9007199254740992"}]}, 
  {"type": "module", "line": 619, "filename": "float_exprs.35.wasm"}, 
  {"type": "assert_return", "line": 624, "action": {"type": "invoke", "field": "no_fold_demote_promote", "args": [{"type": "f64", "value": "13235495337234861917"}]}, "expected": [{"type": "f64", "value": "13235495326728585216"}]}, 
  {"type": "assert_return", "line": 625, "action": {"type": "invoke", "field": "no_fold_demote_promote", "args": [{"type": "f64", "value": "13448204151038380655"}]}, "expected": [{"type": "f64", "value": "13448204151146151936"}]}, 
  {"type": "assert_return", "line": 626, "action": {"type": "invoke", "field": "no_fold_demote_promote", "args": [{"type": "f64", "value": "5090364081358261697"}]}, "expected": [{"type": "f64", "value": "5090364081378951168"}]}, 
  {"type": "assert_return", "line": 627, "action": {"type": "invoke", "field": "no_fold_demote_promote", "args": [{"type": "f64", "value": "13436295269174285872"}]}, "expected": [{"type": "f64", "value": "13436295269301878784"}]}, 
  {"type": "assert_return", "line": 628, "action": {"type": "invoke", "field": "no_fold_demote_promote", "args": [{"type": "f64", "value": "5076240020598306430"}]}, "expected": [{"type": "f64", "value": "5076240020759642112"}]}, 
  {"type": "module", "line": 633, "filename": "float_exprs.36.wasm"}, 
  {"type": "assert_return", "line": 638, "action": {"type": "invoke", "field": "no_fold_promote_demote", "args": [{"type": "f32", "value": "2141192192"}]}, "expected": [{"type": "f32", "value": "nan:arithmetic"}]}, 
  {"type": "assert_return", "line": 639, "action": {"type": "invoke", "field": "no_fold_promote_demote", "args": [{"type": "f32", "value": "0"}]}, "expected": [{"type": "f32", "value": "0"}]}, 
  {"type": "assert_return", "line": 640, "action": {"type": "invoke", "field": "no_fold_promote_demote", "args": [{"type": "f32", "value": "2147483648"}]}, "expected": [{"type": "f32", "value": "2147483648"}]}, 
  {"type": "assert_return", "line": 641, "action": {"type": "invoke", "field": "no_fold_promote_demote", "args": [{"type": "f32", "value": "1"}]}, "expected": [{"type": "f32", "value": "1"}]}, 
  {"type": "assert_return", "line": 642, "action": {"type": "invoke", "field": "no_fold_promote_demote", "args": [{"type": "f32", "value": "2147483649"}]}, "expected": [{"type": "f32", "value": "2147483649"}]}, 
  {"type": "assert_return", "line": 643, "action": {"type": "invoke", "field": "no_fold_promote_demote", "args": [{"type": "f32", "value": "8388607"}]}, "expected": [{"type": "f32", "value": "8388607"}]}, 
  {"type": "assert_return", "line": 644, "action": {"type": "invoke", "field": "no_fold_promote_demote", "args": [{"type": "f32", "value": "2155872255"}]}, "expected": [{"type": "f32", "value": "2155872255"}]}, 
  {"type": "assert_return", "line": 645, "action": {"type": "invoke", "field": "no_fold_promote_demote", "args": [{"type": "f32", "value": "8388608"}]}, "expected": [{"type": "f32", "value": "8388608"}]}, 
  {"type": "assert_return", "line": 646, "action": {"type": "invoke", "field": "no_fold_promote_demote", "args": [{"type": "f32", "value": "2155872256"}]}, "expected": [{"type": "f32", "value": "2155872256"}]}, 
  {"type": "assert_return", "line": 647, "action": {"type": "invoke", "field": "no_fold_promote_demote", "args": [{"type": "f32", "value": "2139095039"}]}, "expected": [{"type": "f32", "value": "2139095039"}]}, 
  {"type": "assert_return", "line": 648, "action": {"type": "invoke", "field": "no_fold_promote_demote", "args": [{"type": "f32", "value": "4286578687"}]}, "expected": [{"type": "f32", "value": "4286578687"}]}, 
  {"type": "assert_return", "line": 649, "action": {"type": "invoke", "field": "no_fold_promote_demote", "args": [{"type": "f32", "value": "2139095040"}]}, "expected": [{"type": "f32", "value": "2139095040"}]}, 
  {"type": "assert_return", "line": 650, "action": {"type": "invoke", "field": "no_fold_promote_demote", "args": [{"type": "f32", "value": "4286578688"}]}, "expected": [{"type": "f32", "value": "4286578688"}]}, 
  {"type": "module", "line": 654, "filename": "float_exprs.37.wasm"}, 
  {"type": "assert_return", "line": 661, "action": {"type": "invoke", "field": "no_demote_mixed_add", "args": [{"type": "f64", "value": "4183652368636204281"}, {"type": "f32", "value": "69183310"}]}, "expected": [{"type": "f32", "value": "276467023"}]}, 
  {"type": "assert_return", "line": 662, "action": {"type": "invoke", "field": "no_demote_mixed_add", "args": [{"type": "f64", "value": "4773927428111915216"}, {"type": "f32", "value": "1387972204"}]}, "expected": [{"type": "f32", "value": "1392270651"}]}, 
  {"type": "assert_return", "line": 663, "action": {"type": "invoke", "field": "no_demote_mixed_add", "args": [{"type": "f64", "value": "4072985553596038423"}, {"type": "f32", "value": "2202918851"}]}, "expected": [{"type": "f32", "value": "66813087"}]}, 
  {"type": "assert_return", "line": 664, "action": {"type": "invoke", "field": "no_demote_mixed_add", "args": [{"type": "f64", "value": "13740716732336801211"}, {"type": "f32", "value": "822392741"}]}, "expected": [{"type": "f32", "value": "3045484077"}]}, 
  {"type": "assert_return", "line": 665, "action": {"type": "invoke", "field": "no_demote_mixed_add", "args": [{"type": "f64", "value": "13742514716462174325"}, {"type": "f32", "value": "2870112826"}]}, "expected": [{"type": "f32", "value": "3048850075"}]}, 
  {"type": "assert_return", "line": 667, "action": {"type": "invoke", "field": "no_demote_mixed_add_commuted", "args": [{"type": "f32", "value": "69183310"}, {"type": "f64", "value": "4183652368636204281"}]}, "expected": [{"type": "f32", "value": "276467023"}]}, 
  {"type": "assert_return", "line": 668, "action": {"type": "invoke", "field": "no_demote_mixed_add_commuted", "args": [{"type": "f32", "value": "1387972204"}, {"type": "f64", "value": "4773927428111915216"}]}, "expected": [{"type": "f32", "value": "1392270651"}]}, 
  {"type": "assert_return", "line": 669, "action": {"type": "invoke", "field": "no_demote_mixed_add_commuted", "args": [{"type": "f32", "value": "2202918851"}, {"type": "f64", "value": "4072985553596038423"}]}, "expected": [{"type": "f32", "value": "66813087"}]}, 
  {"type": "assert_return", "line": 670, "action": {"type": "invoke", "field": "no_demote_mixed_add_commuted", "args": [{"type": "f32", "value": "822392741"}, {"type": "f64", "value": "13740716732336801211"}]}, "expected": [{"type": "f32", "value": "3045484077"}]}, 
  {"type": "assert_return", "line": 671, "action": {"type": "invoke", "field": "no_demote_mixed_add_commuted", "args": [{"type": "f32", "value": "2870112826"}, {"type": "f64", "value": "13742514716462174325"}]}, "expected": [{"type": "f32", "value": "3048850075"}]}, 
  {"type": "module", "line": 675, "filename": "float_exprs.38.wasm"}, 
  {"type": "assert_return", "line": 680, "action": {"type": "invoke", "field": "no_demote_mixed_sub", "args": [{"type": "f64", "value": "4979303437048015281"}, {"type": "f32", "value": "1583535740"}]}, "expected": [{"type": "f32", "value": "1758482618"}]}, 
  {"type": "assert_return", "line": 681, "action": {"type": "invoke", "field": "no_demote_mixed_sub", "args": [{"type": "f64", "value": "13967600632962086462"}, {"type": "f32", "value": "1214924370"}]}, "expected": [{"type": "f32", "value": "3468107136"}]}, 
  {"type": "assert_return", "line": 682, "action": {"type": "invoke", "field": "no_demote_mixed_sub", "args": [{"type": "f64", "value": "13860263758943608426"}, {"type": "f32", "value": "969848030"}]}, "expected": [{"type": "f32", "value": "3268174805"}]}, 
  {"type": "assert_return", "line": 683, "action": {"type": "invoke", "field": "no_demote_mixed_sub", "args": [{"type": "f64", "value": "4364064588997139903"}, {"type": "f32", "value": "472962692"}]}, "expected": [{"type": "f32", "value": "612510881"}]}, 
  {"type": "assert_return", "line": 684, "action": {"type": "invoke", "field": "no_demote_mixed_sub", "args": [{"type": "f64", "value": "4673175763235896759"}, {"type": "f32", "value": "1198952676"}]}, "expected": [{"type": "f32", "value": "3339501185"}]}, 
  {"type": "module", "line": 688, "filename": "float_exprs.39.wasm"}, 
  {"type": "assert_return", "line": 723, "action": {"type": "invoke", "field": "f32.i32.no_fold_trunc_s_convert_s", "args": [{"type": "f32", "value": "1069547520"}]}, "expected": [{"type": "f32", "value": "1065353216"}]}, 
  {"type": "assert_return", "line": 724, "action": {"type": "invoke", "field": "f32.i32.no_fold_trunc_s_convert_s", "args": [{"type": "f32", "value": "3217031168"}]}, "expected": [{"type": "f32", "value": "3212836864"}]}, 
  {"type": "assert_return", "line": 725, "action": {"type": "invoke", "field": "f32.i32.no_fold_trunc_u_convert_s", "args": [{"type": "f32", "value": "1069547520"}]}, "expected": [{"type": "f32", "value": "1065353216"}]}, 
  {"type": "assert_return", "line": 726, "action": {"type": "invoke", "field": "f32.i32.no_fold_trunc_u_convert_s", "args": [{"type": "f32", "value": "3204448256"}]}, "expected": [{"type": "f32", "value": "0"}]}, 
  {"type": "assert_return", "line": 727, "action": {"type": "invoke", "field": "f32.i32.no_fold_trunc_s_convert_u", "args": [{"type": "f32", "value": "1069547520"}]}, "expected": [{"type": "f32", "value": "1065353216"}]}, 
  {"type": "assert_return", "line": 728, "action": {"type": "invoke", "field": "f32.i32.no_fold_trunc_s_convert_u", "args": [{"type": "f32", "value": "3217031168"}]}, "expected": [{"type": "f32", "value": "1333788672"}]}, 
  {"type": "assert_return", "line": 729, "action": {"type": "invoke", "field": "f32.i32.no_fold_trunc_u_convert_u", "args": [{"type": "f32", "value": "1069547520"}]}, "expected": [{"type": "f32", "value": "1065353216"}]}, 
  {"type": "assert_return", "line": 730, "action": {"type": "invoke", "field": "f32.i32.no_fold_trunc_u_convert_u", "args": [{"type": "f32", "value": "3204448256"}]}, "expected": [{"type": "f32", "value": "0"}]}, 
  {"type": "assert_return", "line": 732, "action": {"type": "invoke", "field": "f64.i32.no_fold_trunc_s_convert_s", "args": [{"type": "f64", "value": "4609434218613702656"}]}, "expected": [{"type": "f64", "value": "4607182418800017408"}]}, 
  {"type": "assert_return", "line": 733, "action": {"type": "invoke", "field": "f64.i32.no_fold_trunc_s_convert_s", "args": [{"type": "f64", "value": "13832806255468478464"}]}, "expected": [{"type": "f64", "value": "13830554455654793216"}]}, 
  {"type": "assert_return", "line": 734, "action": {"type": "invoke", "field": "f64.i32.no_fold_trunc_u_convert_s", "args": [{"type": "f64", "value": "4609434218613702656"}]}, "expected": [{"type": "f64", "value": "4607182418800017408"}]}, 
  {"type": "assert_return", "line": 735, "action": {"type": "invoke", "field": "f64.i32.no_fold_trunc_u_convert_s", "args": [{"type": "f64", "value": "13826050856027422720"}]}, "expected": [{"type": "f64", "value": "0"}]}, 
  {"type": "assert_return", "line": 736, "action": {"type": "invoke", "field": "f64.i32.no_fold_trunc_s_convert_u", "args": [{"type": "f64", "value": "4609434218613702656"}]}, "expected": [{"type": "f64", "value": "4607182418800017408"}]}, 
  {"type": "assert_return", "line": 737, "action": {"type": "invoke", "field": "f64.i32.no_fold_trunc_s_convert_u", "args": [{"type": "f64", "value": "13832806255468478464"}]}, "expected": [{"type": "f64", "value": "4751297606873776128"}]}, 
  {"type": "assert_return", "line": 738, "action": {"type": "invoke", "field": "f64.i32.no_fold_trunc_u_convert_u", "args": [{"type": "f64", "value": "4609434218613702656"}]}, "expected": [{"type": "f64", "value": "4607182418800017408"}]}, 
  {"type": "assert_return", "line": 739, "action": {"type": "invoke", "field": "f64.i32.no_fold_trunc_u_convert_u", "args": [{"type": "f64", "value": "13826050856027422720"}]}, "expected": [{"type": "f64", "value": "0"}]}, 
  {"type": "assert_return", "line": 741, "action": {"type": "invoke", "field": "f32.i64.no_fold_trunc_s_convert_s", "args": [{"type": "f32", "value": "1069547520"}]}, "expected": [{"type": "f32", "value": "1065353216"}]}, 
  {"type": "assert_return", "line": 742, "action": {"type": "invoke", "field": "f32.i64.no_fold_trunc_s_convert_s", "args": [{"type": "f32", "value": "3217031168"}]}, "expected": [{"type": "f32", "value": "3212836864"}]}, 
  {"type": "assert_return", "line": 743, "action": {"type": "invoke", "field": "f32.i64.no_fold_trunc_u_convert_s", "args": [{"type": "f32", "value": "1069547520"}]}, "expected": [{"type": "f32", "value": "1065353216"}]}, 
  {"type": "assert_return", "line": 744, "action": {"type": "invoke", "field": "f32.i64.no_fold_trunc_u_convert_s", "args": [{"type": "f32", "value": "3204448256"}]}, "expected": [{"type": "f32", "value": "0"}]}, 
  {"type": "assert_return", "line": 745, "action": {"type": "invoke", "field": "f32.i64.no_fold_trunc_s_convert_u", "args": [{"type": "f32", "value": "1069547520"}]}, "expected": [{"type": "f32", "value": "1065353216"}]}, 
  {"type": "assert_return", "line": 746, "action": {"type": "invoke", "field": "f32.i64.no_fold_trunc_s_convert_u", "args": [{"type": "f32", "value": "3217031168"}]}, "expected": [{"type": "f32", "value": "1602224128"}]}, 
  {"type": "assert_return", "line": 747, "action": {"type": "invoke", "field": "f32.i64.no_fold_trunc_u_convert_u", "args": [{"type": "f32", "value": "1069547520"}]}, "expected": [{"type": "f32", "value": "1065353216"}]}, 
  {"type": "assert_return", "line": 748, "action": {"type": "invoke", "field": "f32.i64.no_fold_trunc_u_convert_u", "args": [{"type": "f32", "value": "3204448256"}]}, "expected": [{"type": "f32", "value": "0"}]}, 
  {"type": "assert_return", "line": 750, "action": {"type": "invoke", "field": "f64.i64.no_fold_trunc_s_convert_s", "args": [{"type": "f64", "value": "4609434218613702656"}]}, "expected": [{"type": "f64", "value": "4607182418800017408"}]}, 
  {"type": "assert_return", "line": 751, "action": {"type": "invoke", "field": "f64.i64.no_fold_trunc_s_convert_s", "args": [{"type": "f64", "value": "13832806255468478464"}]}, "expected": [{"type": "f64", "value": "13830554455654793216"}]}, 
  {"type": "assert_return", "line": 752, "action": {"type": "invoke", "field": "f64.i64.no_fold_trunc_u_convert_s", "args": [{"type": "f64", "value": "4609434218613702656"}]}, "expected": [{"type": "f64", "value": "4607182418800017408"}]}, 
  {"type": "assert_return", "line": 753, "action": {"type": "invoke", "field": "f64.i64.no_fold_trunc_u_convert_s", "args": [{"type": "f64", "value": "13826050856027422720"}]}, "expected": [{"type": "f64", "value": "0"}]}, 
  {"type": "assert_return", "line": 754, "action": {"type": "invoke", "field": "f64.i64.no_fold_trunc_s_convert_u", "args": [{"type": "f64", "value": "4609434218613702656"}]}, "expected": [{"type": "f64", "value": "4607182418800017408"}]}, 
  {"type": "assert_return", "line": 755, "action": {"type": "invoke", "field": "f64.i64.no_fold_trunc_s_convert_u", "args": [{"type": "f64", "value": "13832806255468478464"}]}, "expected": [{"type": "f64", "value": "4895412794951729152"}]}, 
  {"type": "assert_return", "line": 756, "action": {"type": "invoke", "field": "f64.i64.no_fold_trunc_u_convert_u", "args": [{"type": "f64", "value": "4609434218613702656"}]}, "expected": [{"type": "f64", "value": "4607182418800017408"}]}, 
  {"type": "assert_return", "line": 757, "action": {"type": "invoke", "field": "f64.i64.no_fold_trunc_u_convert_u", "args": [{"type": "f64", "value": "13826050856027422720"}]}, "expected": [{"type": "f64", "value": "0"}]}, 
  {"type": "module", "line": 763, "filename": "float_exprs.40.wasm"}, 
  {"type": "action", "line": 784, "action": {"type": "invoke", "field": "init", "args": [{"type": "i32", "value": "0"}, {"type": "f32", "value": "1097963930"}]}, "expected": []}, 
  {"type": "action", "line": 785, "action": {"type": "invoke", "field": "init", "args": [{"type": "i32", "value": "4"}, {"type": "f32", "value": "1098068787"}]}, "expected": []}, 
  {"type": "action", "line": 786, "action": {"type": "invoke", "field": "init", "args": [{"type": "i32", "value": "8"}, {"type": "f32", "value": "1098173645"}]}, "expected": []}, 
  {"type": "action", "line": 787, "action": {"type": "invoke", "field": "init", "args": [{"type": "i32", "value": "12"}, {"type": "f32", "value": "1098278502"}]}, "expected": []}, 
  {"type": "assert_return", "line": 788, "action": {"type": "invoke", "field": "check", "args": [{"type": "i32", "value": "0"}]}, "expected": [{"type": "f32", "value": "1097963930"}]}, 
  {"type": "assert_return", "line": 789, "action": {"type": "invoke", "field": "check", "args": [{"type": "i32", "value": "4"}]}, "expected": [{"type": "f32", "value": "1098068787"}]}, 
  {"type": "assert_return", "line": 790, "action": {"type": "invoke", "field": "check", "args": [{"type": "i32", "value": "8"}]}, "expected": [{"type": "f32", "value": "1098173645"}]}, 
  {"type": "assert_return", "line": 791, "action": {"type": "invoke", "field": "check", "args": [{"type": "i32", "value": "12"}]}, "expected": [{"type": "f32", "value": "1098278502"}]}, 
  {"type": "action", "line": 792, "action": {"type": "invoke", "field": "run", "args": [{"type": "i32", "value": "16"}, {"type": "f32", "value": "1077936128"}]}, "expected": []}, 
  {"type": "assert_return", "line": 793, "action": {"type": "invoke", "field": "check", "args": [{"type": "i32", "value": "0"}]}, "expected": [{"type": "f32", "value": "1084297489"}]}, 
  {"type": "assert_return", "line": 794, "action": {"type": "invoke", "field": "check", "args": [{"type": "i32", "value": "4"}]}, "expected": [{"type": "f32", "value": "1084367394"}]}, 
  {"type": "assert_return", "line": 795, "action": {"type": "invoke", "field": "check", "args": [{"type": "i32", "value": "8"}]}, "expected": [{"type": "f32", "value": "1084437299"}]}, 
  {"type": "assert_return", "line": 796, "action": {"type": "invoke", "field": "check", "args": [{"type": "i32", "value": "12"}]}, "expected": [{"type": "f32", "value": "1084507204"}]}, 
  {"type": "module", "line": 798, "filename": "float_exprs.41.wasm"}, 
  {"type": "action", "line": 819, "action": {"type": "invoke", "field": "init", "args": [{"type": "i32", "value": "0"}, {"type": "f64", "value": "4624690162351420211"}]}, "expected": []}, 
  {"type": "action", "line": 820, "action": {"type": "invoke", "field": "init", "args": [{"type": "i32", "value": "8"}, {"type": "f64", "value": "4624746457346762342"}]}, "expected": []}, 
  {"type": "action", "line": 821, "action": {"type": "invoke", "field": "init", "args": [{"type": "i32", "value": "16"}, {"type": "f64", "value": "4624802752342104474"}]}, "expected": []}, 
  {"type": "action", "line": 822, "action": {"type": "invoke", "field": "init", "args": [{"type": "i32", "value": "24"}, {"type": "f64", "value": "4624859047337446605"}]}, "expected": []}, 
  {"type": "assert_return", "line": 823, "action": {"type": "invoke", "field": "check", "args": [{"type": "i32", "value": "0"}]}, "expected": [{"type": "f64", "value": "4624690162351420211"}]}, 
  {"type": "assert_return", "line": 824, "action": {"type": "invoke", "field": "check", "args": [{"type": "i32", "value": "8"}]}, "expected": [{"type": "f64", "value": "4624746457346762342"}]}, 
  {"type": "assert_return", "line": 825, "action": {"type": "invoke", "field": "check", "args": [{"type": "i32", "value": "16"}]}, "expected": [{"type": "f64", "value": "4624802752342104474"}]}, 
  {"type": "assert_return", "line": 826, "action": {"type": "invoke", "field": "check", "args": [{"type": "i32", "value": "24"}]}, "expected": [{"type": "f64", "value": "4624859047337446605"}]}, 
  {"type": "action", "line": 827, "action": {"type": "invoke", "field": "run", "args": [{"type": "i32", "value": "32"}, {"type": "f64", "value": "4613937818241073152"}]}, "expected": []}, 
  {"type": "assert_return", "line": 828, "action": {"type": "invoke", "field": "check", "args": [{"type": "i32", "value": "0"}]}, "expected": [{"type": "f64", "value": "4617353047958495778"}]}, 
  {"type": "assert_return", "line": 829, "action": {"type": "invoke", "field": "check", "args": [{"type": "i32", "value": "8"}]}, "expected": [{"type": "f64", "value": "4617390577955390532"}]}, 
  {"type": "assert_return", "line": 830, "action": {"type": "invoke", "field": "check", "args": [{"type": "i32", "value": "16"}]}, "expected": [{"type": "f64", "value": "4617428107952285287"}]}, 
  {"type": "assert_return", "line": 831, "action": {"type": "invoke", "field": "check", "args": [{"type": "i32", "value": "24"}]}, "expected": [{"type": "f64", "value": "4617465637949180041"}]}, 
  {"type": "module", "line": 835, "filename": "float_exprs.42.wasm"}, 
  {"type": "assert_return", "line": 847, "action": {"type": "invoke", "field": "f32.ult", "args": [{"type": "f32", "value": "1077936128"}, {"type": "f32", "value": "1073741824"}]}, "expected": [{"type": "i32", "value": "0"}]}, 
  {"type": "assert_return", "line": 848, "action": {"type": "invoke", "field": "f32.ult", "args": [{"type": "f32", "value": "1073741824"}, {"type": "f32", "value": "1073741824"}]}, "expected": [{"type": "i32", "value": "0"}]}, 
  {"type": "assert_return", "line": 849, "action": {"type": "invoke", "field": "f32.ult", "args": [{"type": "f32", "value": "1073741824"}, {"type": "f32", "value": "1077936128"}]}, "expected": [{"type": "i32", "value": "1"}]}, 
  {"type": "assert_return", "line": 850, "action": {"type": "invoke", "field": "f32.ult", "args": [{"type": "f32", "value": "1073741824"}, {"type": "f32", "value": "2143289344"}]}, "expected": [{"type": "i32", "value": "1"}]}, 
  {"type": "assert_return", "line": 851, "action": {"type": "invoke", "field": "f32.ule", "args": [{"type": "f32", "value": "1077936128"}, {"type": "f32", "value": "1073741824"}]}, "expected": [{"type": "i32", "value": "0"}]}, 
  {"type": "assert_return", "line": 852, "action": {"type": "invoke", "field": "f32.ule", "args": [{"type": "f32", "value": "1073741824"}, {"type": "f32", "value": "1073741824"}]}, "expected": [{"type": "i32", "value": "1"}]}, 
  {"type": "assert_return", "line": 853, "action": {"type": "invoke", "field": "f32.ule", "args": [{"type": "f32", "value": "1073741824"}, {"type": "f32", "value": "1077936128"}]}, "expected": [{"type": "i32", "value": "1"}]}, 
  {"type": "assert_return", "line": 854, "action": {"type": "invoke", "field": "f32.ule", "args": [{"type": "f32", "value": "1073741824"}, {"type": "f32", "value": "2143289344"}]}, "expected": [{"type": "i32", "value": "1"}]}, 
  {"type": "assert_return", "line": 855, "action": {"type": "invoke", "field": "f32.ugt", "args": [{"type": "f32", "value": "1077936128"}, {"type": "f32", "value": "1073741824"}]}, "expected": [{"type": "i32", "value": "1"}]}, 
  {"type": "assert_return", "line": 856, "action": {"type": "invoke", "field": "f32.ugt", "args": [{"type": "f32", "value": "1073741824"}, {"type": "f32", "value": "1073741824"}]}, "expected": [{"type": "i32", "value": "0"}]}, 
  {"type": "assert_return", "line": 857, "action": {"type": "invoke", "field": "f32.ugt", "args": [{"type": "f32", "value": "1073741824"}, {"type": "f32", "value": "1077936128"}]}, "expected": [{"type": "i32", "value": "0"}]}, 
  {"type": "assert_return", "line": 858, "action": {"type": "invoke", "field": "f32.ugt", "args": [{"type": "f32", "value": "1073741824"}, {"type": "f32", "value": "2143289344"}]}, "expected": [{"type": "i32", "value": "1"}]}, 
  {"type": "assert_return", "line": 859, "action": {"type": "invoke", "field": "f32.uge", "args": [{"type": "f32", "value": "1077936128"}, {"type": "f32", "value": "1073741824"}]}, "expected": [{"type": "i32", "value": "1"}]}, 
  {"type": "assert_return", "line": 860, "action": {"type": "invoke", "field": "f32.uge", "args": [{"type": "f32", "value": "1073741824"}, {"type": "f32", "value": "1073741824"}]}, "expected": [{"type": "i32", "value": "1"}]}, 
  {"type": "assert_return", "line": 861, "action": {"type": "invoke", "field": "f32.uge", "args": [{"type": "f32", "value": "1073741824"}, {"type": "f32", "value": "1077936128"}]}, "expected": [{"type": "i32", "value": "0"}]}, 
  {"type": "assert_return", "line": 862, "action": {"type": "invoke", "field": "f32.uge", "args": [{"type": "f32", "value": "1073741824"}, {"type": "f32", "value": "2143289344"}]}, "expected": [{"type": "i32", "value": "1"}]}, 
  {"type": "assert_return", "line": 863, "action": {"type": "invoke", "field": "f64.ult", "args": [{"type": "f64", "value": "4613937818241073152"}, {"type": "f64", "value": "4611686018427387904"}]}, "expected": [{"type": "i32", "value": "0"}]}, 
  {"type": "assert_return", "line": 864, "action": {"type": "invoke", "field": "f64.ult", "args": [{"type": "f64", "value": "4611686018427387904"}, {"type": "f64", "value": "4611686018427387904"}]}, "expected": [{"type": "i32", "value": "0"}]}, 
  {"type": "assert_return", "line": 865, "action": {"type": "invoke", "field": "f64.ult", "args": [{"type": "f64", "value": "4611686018427387904"}, {"type": "f64", "value": "4613937818241073152"}]}, "expected": [{"type": "i32", "value": "1"}]}, 
  {"type": "assert_return", "line": 866, "action": {"type": "invoke", "field": "f64.ult", "args": [{"type": "f64", "value": "4611686018427387904"}, {"type": "f64", "value": "9221120237041090560"}]}, "expected": [{"type": "i32", "value": "1"}]}, 
  {"type": "assert_return", "line": 867, "action": {"type": "invoke", "field": "f64.ule", "args": [{"type": "f64", "value": "4613937818241073152"}, {"type": "f64", "value": "4611686018427387904"}]}, "expected": [{"type": "i32", "value": "0"}]}, 
  {"type": "assert_return", "line": 868, "action": {"type": "invoke", "field": "f64.ule", "args": [{"type": "f64", "value": "4611686018427387904"}, {"type": "f64", "value": "4611686018427387904"}]}, "expected": [{"type": "i32", "value": "1"}]}, 
  {"type": "assert_return", "line": 869, "action": {"type": "invoke", "field": "f64.ule", "args": [{"type": "f64", "value": "4611686018427387904"}, {"type": "f64", "value": "4613937818241073152"}]}, "expected": [{"type": "i32", "value": "1"}]}, 
  {"type": "assert_return", "line": 870, "action": {"type": "invoke", "field": "f64.ule", "args": [{"type": "f64", "value": "4611686018427387904"}, {"type": "f64", "value": "9221120237041090560"}]}, "expected": [{"type": "i32", "value": "1"}]}, 
  {"type": "assert_return", "line": 871, "action": {"type": "invoke", "field": "f64.ugt", "args": [{"type": "f64", "value": "4613937818241073152"}, {"type": "f64", "value": "4611686018427387904"}]}, "expected": [{"type": "i32", "value": "1"}]}, 
  {"type": "assert_return", "line": 872, "action": {"type": "invoke", "field": "f64.ugt", "args": [{"type": "f64", "value": "4611686018427387904"}, {"type": "f64", "value": "4611686018427387904"}]}, "expected": [{"type": "i32", "value": "0"}]}, 
  {"type": "assert_return", "line": 873, "action": {"type": "invoke", "field": "f64.ugt", "args": [{"type": "f64", "value": "4611686018427387904"}, {"type": "f64", "value": "4613937818241073152"}]}, "expected": [{"type": "i32", "value": "0"}]}, 
  {"type": "assert_return", "line": 874, "action": {"type": "invoke", "field": "f64.ugt", "args": [{"type": "f64", "value": "4611686018427387904"}, {"type": "f64", "value": "9221120237041090560"}]}, "expected": [{"type": "i32", "value": "1"}]}, 
  {"type": "assert_return", "line": 875, "action": {"type": "invoke", "field": "f64.uge", "args": [{"type": "f64", "value": "4613937818241073152"}, {"type": "f64", "value": "4611686018427387904"}]}, "expected": [{"type": "i32", "value": "1"}]}, 
  {"type": "assert_return", "line": 876, "action": {"type": "invoke", "field": "f64.uge", "args": [{"type": "f64", "value": "4611686018427387904"}, {"type": "f64", "value": "4611686018427387904"}]}, "expected": [{"type": "i32", "value": "1"}]}, 
  {"type": "assert_return", "line": 877, "action": {"type": "invoke", "field": "f64.uge", "args": [{"type": "f64", "value": "4611686018427387904"}, {"type": "f64", "value": "4613937818241073152"}]}, "expected": [{"type": "i32", "value": "0"}]}, 
  {"type": "assert_return", "line": 878, "action": {"type": "invoke", "field": "f64.uge", "args": [{"type": "f64", "value": "4611686018427387904"}, {"type": "f64", "value": "9221120237041090560"}]}, "expected": [{"type": "i32", "value": "1"}]}, 
  {"type": "module", "line": 882, "filename": "float_exprs.43.wasm"}, 
  {"type": "assert_return", "line": 894, "action": {"type": "invoke", "field": "f32.no_fold_lt_select", "args": [{"type": "f32", "value": "0"}, {"type": "f32", "value": "2143289344"}]}, "expected": [{"type": "f32", "value": "2143289344"}]}, 
  {"type": "assert_return", "line": 895, "action": {"type": "invoke", "field": "f32.no_fold_lt_select", "args": [{"type": "f32", "value": "2143289344"}, {"type": "f32", "value": "0"}]}, "expected": [{"type": "f32", "value": "0"}]}, 
  {"type": "assert_return", "line": 896, "action": {"type": "invoke", "field": "f32.no_fold_lt_select", "args": [{"type": "f32", "value": "0"}, {"type": "f32", "value": "2147483648"}]}, "expected": [{"type": "f32", "value": "2147483648"}]}, 
  {"type": "assert_return", "line": 897, "action": {"type": "invoke", "field": "f32.no_fold_lt_select", "args": [{"type": "f32", "value": "2147483648"}, {"type": "f32", "value": "0"}]}, "expected": [{"type": "f32", "value": "0"}]}, 
  {"type": "assert_return", "line": 898, "action": {"type": "invoke", "field": "f32.no_fold_le_select", "args": [{"type": "f32", "value": "0"}, {"type": "f32", "value": "2143289344"}]}, "expected": [{"type": "f32", "value": "2143289344"}]}, 
  {"type": "assert_return", "line": 899, "action": {"type": "invoke", "field": "f32.no_fold_le_select", "args": [{"type": "f32", "value": "2143289344"}, {"type": "f32", "value": "0"}]}, "expected": [{"type": "f32", "value": "0"}]}, 
  {"type": "assert_return", "line": 900, "action": {"type": "invoke", "field": "f32.no_fold_le_select", "args": [{"type": "f32", "value": "0"}, {"type": "f32", "value": "2147483648"}]}, "expected": [{"type": "f32", "value": "0"}]}, 
  {"type": "assert_return", "line": 901, "action": {"type": "invoke", "field": "f32.no_fold_le_select", "args": [{"type": "f32", "value": "2147483648"}, {"type": "f32", "value": "0"}]}, "expected": [{"type": "f32", "value": "2147483648"}]}, 
  {"type": "assert_return", "line": 902, "action": {"type": "invoke", "field": "f32.no_fold_gt_select", "args": [{"type": "f32", "value": "0"}, {"type": "f32", "value": "2143289344"}]}, "expected": [{"type": "f32", "value": "2143289344"}]}, 
  {"type": "assert_return", "line": 903, "action": {"type": "invoke", "field": "f32.no_fold_gt_select", "args": [{"type": "f32", "value": "2143289344"}, {"type": "f32", "value": "0"}]}, "expected": [{"type": "f32", "value": "0"}]}, 
  {"type": "assert_return", "line": 904, "action": {"type": "invoke", "field": "f32.no_fold_gt_select", "args": [{"type": "f32", "value": "0"}, {"type": "f32", "value": "2147483648"}]}, "expected": [{"type": "f32", "value": "2147483648"}]}, 
  {"type": "assert_return", "line": 905, "action": {"type": "invoke", "field": "f32.no_fold_gt_select", "args": [{"type": "f32", "value": "2147483648"}, {"type": "f32", "value": "0"}]}, "expected": [{"type": "f32", "value": "0"}]}, 
  {"type": "assert_return", "line": 906, "action": {"type": "invoke", "field": "f32.no_fold_ge_select", "args": [{"type": "f32", "value": "0"}, {"type": "f32", "value": "2143289344"}]}, "expected": [{"type": "f32", "value": "2143289344"}]}, 
  {"type": "assert_return", "line": 907, "action": {"type": "invoke", "field": "f32.no_fold_ge_select", "args": [{"type": "f32", "value": "2143289344"}, {"type": "f32", "value": "0"}]}, "expected": [{"type": "f32", "value": "0"}]}, 
  {"type": "assert_return", "line": 908, "action": {"type": "invoke", "field": "f32.no_fold_ge_select", "args": [{"type": "f32", "value": "0"}, {"type": "f32", "value": "2147483648"}]}, "expected": [{"type": "f32", "value": "0"}]}, 
  {"type": "assert_return", "line": 909, "action": {"type": "invoke", "field": "f32.no_fold_ge_select", "args": [{"type": "f32", "value": "2147483648"}, {"type": "f32", "value": "0"}]}, "expected": [{"type": "f32", "value": "2147483648"}]}, 
  {"type": "assert_return", "line": 910, "action": {"type": "invoke", "field": "f64.no_fold_lt_select", "args": [{"type": "f64", "value": "0"}, {"type": "f64", "value": "9221120237041090560"}]}, "expected": [{"type": "f64", "value": "9221120237041090560"}]}, 
  {"type": "assert_return", "line": 911, "action": {"type": "invoke", "field": "f64.no_fold_lt_select", "args": [{"type": "f64", "value": "9221120237041090560"}, {"type": "f64", "value": "0"}]}, "expected": [{"type": "f64", "value": "0"}]}, 
  {"type": "assert_return", "line": 912, "action": {"type": "invoke", "field": "f64.no_fold_lt_select", "args": [{"type": "f64", "value": "0"}, {"type": "f64", "value": "9223372036854775808"}]}, "expected": [{"type": "f64", "value": "9223372036854775808"}]}, 
  {"type": "assert_return", "line": 913, "action": {"type": "invoke", "field": "f64.no_fold_lt_select", "args": [{"type": "f64", "value": "9223372036854775808"}, {"type": "f64", "value": "0"}]}, "expected": [{"type": "f64", "value": "0"}]}, 
  {"type": "assert_return", "line": 914, "action": {"type": "invoke", "field": "f64.no_fold_le_select", "args": [{"type": "f64", "value": "0"}, {"type": "f64", "value": "9221120237041090560"}]}, "expected": [{"type": "f64", "value": "9221120237041090560"}]}, 
  {"type": "assert_return", "line": 915, "action": {"type": "invoke", "field": "f64.no_fold_le_select", "args": [{"type": "f64", "value": "9221120237041090560"}, {"type": "f64", "value": "0"}]}, "expected": [{"type": "f64", "value": "0"}]}, 
  {"type": "assert_return", "line": 916, "action": {"type": "invoke", "field": "f64.no_fold_le_select", "args": [{"type": "f64", "value": "0"}, {"type": "f64", "value": "9223372036854775808"}]}, "expected": [{"type": "f64", "value": "0"}]}, 
  {"type": "assert_return", "line": 917, "action": {"type": "invoke", "field": "f64.no_fold_le_select", "args": [{"type": "f64", "value": "9223372036854775808"}, {"type": "f64", "value": "0"}]}, "expected": [{"type": "f64", "value": "9223372036854775808"}]}, 
  {"type": "assert_return", "line": 918, "action": {"type": "invoke", "field": "f64.no_fold_gt_select", "args": [{"type": "f64", "value": "0"}, {"type": "f64", "value": "9221120237041090560"}]}, "expected": [{"type": "f64", "value": "9221120237041090560"}]}, 
  {"type": "assert_return", "line": 919, "action": {"type": "invoke", "field": "f64.no_fold_gt_select", "args": [{"type": "f64", "value": "9221120237041090560"}, {"type": "f64", "value": "0"}]}, "expected": [{"type": "f64", "value": "0"}]}, 
  {"type": "assert_return", "line": 920, "action": {"type": "invoke", "field": "f64.no_fold_gt_select", "args": [{"type": "f64", "value": "0"}, {"type": "f64", "value": "9223372036854775808"}]}, "expected": [{"type": "f64", "value": "9223372036854775808"}]}, 
  {"type": "assert_return", "line": 921, "action": {"type": "invoke", "field": "f64.no_fold_gt_select", "args": [{"type": "f64", "value": "9223372036854775808"}, {"type": "f64", "value": "0"}]}, "expected": [{"type": "f64", "value": "0"}]}, 
  {"type": "assert_return", "line": 922, "action": {"type": "invoke", "field": "f64.no_fold_ge_select", "args": [{"type": "f64", "value": "0"}, {"type": "f64", "value": "9221120237041090560"}]}, "expected": [{"type": "f64", "value": "9221120237041090560"}]}, 
  {"type": "assert_return", "line": 923, "action": {"type": "invoke", "field": "f64.no_fold_ge_select", "args": [{"type": "f64", "value": "9221120237041090560"}, {"type": "f64", "value": "0"}]}, "expected": [{"type": "f64", "value": "0"}]}, 
  {"type": "assert_return", "line": 924, "action": {"type": "invoke", "field": "f64.no_fold_ge_select", "args": [{"type": "f64", "value": "0"}, {"type": "f64", "value": "9223372036854775808"}]}, "expected": [{"type": "f64", "value": "0"}]}, 
  {"type": "assert_return", "line": 925, "action": {"type": "invoke", "field": "f64.no_fold_ge_select", "args": [{"type": "f64", "value": "9223372036854775808"}, {"type": "f64", "value": "0"}]}, "expected": [{"type": "f64", "value": "9223372036854775808"}]}, 
  {"type": "module", "line": 929, "filename": "float_exprs.44.wasm"}, 
  {"type": "assert_return", "line": 973, "action": {"type": "invoke", "field": "f32.no_fold_lt_if", "args": [{"type": "f32", "value": "0"}, {"type": "f32", "value": "2143289344"}]}, "expected": [{"type": "f32", "value": "2143289344"}]}, 
  {"type": "assert_return", "line": 974, "action": {"type": "invoke", "field": "f32.no_fold_lt_if", "args": [{"type": "f32", "value": "2143289344"}, {"type": "f32", "value": "0"}]}, "expected": [{"type": "f32", "value": "0"}]}, 
  {"type": "assert_return", "line": 975, "action": {"type": "invoke", "field": "f32.no_fold_lt_if", "args": [{"type": "f32", "value": "0"}, {"type": "f32", "value": "2147483648"}]}, "expected": [{"type": "f32", "value": "2147483648"}]}, 
  {"type": "assert_return", "line": 976, "action": {"type": "invoke", "field": "f32.no_fold_lt_if", "args": [{"type": "f32", "value": "2147483648"}, {"type": "f32", "value": "0"}]}, "expected": [{"type": "f32", "value": "0"}]}, 
  {"type": "assert_return", "line": 977, "action": {"type": "invoke", "field": "f32.no_fold_le_if", "args": [{"type": "f32", "value": "0"}, {"type": "f32", "value": "2143289344"}]}, "expected": [{"type": "f32", "value": "2143289344"}]}, 
  {"type": "assert_return", "line": 978, "action": {"type": "invoke", "field": "f32.no_fold_le_if", "args": [{"type": "f32", "value": "2143289344"}, {"type": "f32", "value": "0"}]}, "expected": [{"type": "f32", "value": "0"}]}, 
  {"type": "assert_return", "line": 979, "action": {"type": "invoke", "field": "f32.no_fold_le_if", "args": [{"type": "f32", "value": "0"}, {"type": "f32", "value": "2147483648"}]}, "expected": [{"type": "f32", "value": "0"}]}, 
  {"type": "assert_return", "line": 980, "action": {"type": "invoke", "field": "f32.no_fold_le_if", "args": [{"type": "f32", "value": "2147483648"}, {"type": "f32", "value": "0"}]}, "expected": [{"type": "f32", "value": "2147483648"}]}, 
  {"type": "assert_return", "line": 981, "action": {"type": "invoke", "field": "f32.no_fold_gt_if", "args": [{"type": "f32", "value": "0"}, {"type": "f32", "value": "2143289344"}]}, "expected": [{"type": "f32", "value": "2143289344"}]}, 
  {"type": "assert_return", "line": 982, "action": {"type": "invoke", "field": "f32.no_fold_gt_if", "args": [{"type": "f32", "value": "2143289344"}, {"type": "f32", "value": "0"}]}, "expected": [{"type": "f32", "value": "0"}]}, 
  {"type": "assert_return", "line": 983, "action": {"type": "invoke", "field": "f32.no_fold_gt_if", "args": [{"type": "f32", "value": "0"}, {"type": "f32", "value": "2147483648"}]}, "expected": [{"type": "f32", "value": "2147483648"}]}, 
  {"type": "assert_return", "line": 984, "action": {"type": "invoke", "field": "f32.no_fold_gt_if", "args": [{"type": "f32", "value": "2147483648"}, {"type": "f32", "value": "0"}]}, "expected": [{"type": "f32", "value": "0"}]}, 
  {"type": "assert_return", "line": 985, "action": {"type": "invoke", "field": "f32.no_fold_ge_if", "args": [{"type": "f32", "value": "0"}, {"type": "f32", "value": "2143289344"}]}, "expected": [{"type": "f32", "value": "2143289344"}]}, 
  {"type": "assert_return", "line": 986, "action": {"type": "invoke", "field": "f32.no_fold_ge_if", "args": [{"type": "f32", "value": "2143289344"}, {"type": "f32", "value": "0"}]}, "expected": [{"type": "f32", "value": "0"}]}, 
  {"type": "assert_return", "line": 987, "action": {"type": "invoke", "field": "f32.no_fold_ge_if", "args": [{"type": "f32", "value": "0"}, {"type": "f32", "value": "2147483648"}]}, "expected": [{"type": "f32", "value": "0"}]}, 
  {"type": "assert_return", "line": 988, "action": {"type": "invoke", "field": "f32.no_fold_ge_if", "args": [{"type": "f32", "value": "2147483648"}, {"type": "f32", "value": "0"}]}, "expected": [{"type": "f32", "value": "2147483648"}]}, 
  {"type": "assert_return", "line": 989, "action": {"type": "invoke", "field": "f64.no_fold_lt_if", "args": [{"type": "f64", "value": "0"}, {"type": "f64", "value": "9221120237041090560"}]}, "expected": [{"type": "f64", "value": "9221120237041090560"}]}, 
  {"type": "assert_return", "line": 990, "action": {"type": "invoke", "field": "f64.no_fold_lt_if", "args": [{"type": "f64", "value": "9221120237041090560"}, {"type": "f64", "value": "0"}]}, "expected": [{"type": "f64", "value": "0"}]}, 
  {"type": "assert_return", "line": 991, "action": {"type": "invoke", "field": "f64.no_fold_lt_if", "args": [{"type": "f64", "value": "0"}, {"type": "f64", "value": "9223372036854775808"}]}, "expected": [{"type": "f64", "value": "9223372036854775808"}]}, 
  {"type": "assert_return", "line": 992, "action": {"type": "invoke", "field": "f64.no_fold_lt_if", "args": [{"type": "f64", "value": "9223372036854775808"}, {"type": "f64", "value": "0"}]}, "expected": [{"type": "f64", "value": "0"}]}, 
  {"type": "assert_return", "line": 993, "action": {"type": "invoke", "field": "f64.no_fold_le_if", "args": [{"type": "f64", "value": "0"}, {"type": "f64", "value": "9221120237041090560"}]}, "expected": [{"type": "f64", "value": "9221120237041090560"}]}, 
  {"type": "assert_return", "line": 994, "action": {"type": "invoke", "field": "f64.no_fold_le_if", "args": [{"type": "f64", "value": "9221120237041090560"}, {"type": "f64", "value": "0"}]}, "expected": [{"type": "f64", "value": "0"}]}, 
  {"type": "assert_return", "line": 995, "action": {"type": "invoke", "field": "f64.no_fold_le_if", "args": [{"type": "f64", "value": "0"}, {"type": "f64", "value": "9223372036854775808"}]}, "expected": [{"type": "f64", "value": "0"}]}, 
  {"type": "assert_return", "line": 996, "action": {"type": "invoke", "field": "f64.no_fold_le_if", "args": [{"type": "f64", "value": "9223372036854775808"}, {"type": "f64", "value": "0"}]}, "expected": [{"type": "f64", "value": "9223372036854775808"}]}, 
  {"type": "assert_return", "line": 997, "action": {"type": "invoke", "field": "f64.no_fold_gt_if", "args": [{"type": "f64", "value": "0"}, {"type": "f64", "value": "9221120237041090560"}]}, "expected": [{"type": "f64", "value": "9221120237041090560"}]}, 
  {"type": "assert_return", "line": 998, "action": {"type": "invoke", "field": "f64.no_fold_gt_if", "args": [{"type": "f64", "value": "9221120237041090560"}, {"type": "f64", "value": "0"}]}, "expected": [{"type": "f64", "value": "0"}]}, 
  {"type": "assert_return", "line": 999, "action": {"type": "invoke", "field": "f64.no_fold_gt_if", "args": [{"type": "f64", "value": "0"}, {"type": "f64", "value": "9223372036854775808"}]}, "expected": [{"type": "f64", "value": "9223372036854775808"}]}, 
  {"type": "assert_return", "line": 1000, "action": {"type": "invoke", "field": "f64.no_fold_gt_if", "args": [{"type": "f64", "value": "9223372036854775808"}, {"type": "f64", "value": "0"}]}, "expected": [{"type": "f64", "value": "0"}]}, 
  {"type": "assert_return", "line": 1001, "action": {"type": "invoke", "field": "f64.no_fold_ge_if", "args": [{"type": "f64", "value": "0"}, {"type": "f64", "value": "9221120237041090560"}]}, "expected": [{"type": "f64", "value": "9221120237041090560"}]}, 
  {"type": "assert_return", "line": 1002, "action": {"type": "invoke", "field": "f64.no_fold_ge_if", "args": [{"type": "f64", "value": "9221120237041090560"}, {"type": "f64", "value": "0"}]}, "expected": [{"type": "f64", "value": "0"}]}, 
  {"type": "assert_return", "line": 1003, "action": {"type": "invoke", "field": "f64.no_fold_ge_if", "args": [{"type": "f64", "value": "0"}, {"type": "f64", "value": "9223372036854775808"}]}, "expected": [{"type": "f64", "value": "0"}]}, 
  {"type": "assert_return", "line": 1004, "action": {"type": "invoke", "field": "f64.no_fold_ge_if", "args": [{"type": "f64", "value": "9223372036854775808"}, {"type": "f64", "value": "0"}]}, "expected": [{"type": "f64", "value": "9223372036854775808"}]}, 
  {"type": "module", "line": 1008, "filename": "float_exprs.45.wasm"}, 
  {"type": "assert_return", "line": 1020, "action": {"type": "invoke", "field": "f32.no_fold_lt_select_to_abs", "args": [{"type": "f32", "value": "2141192192"}]}, "expected": [{"type": "f32", "value": "2141192192"}]}, 
  {"type": "assert_return", "line": 1021, "action": {"type": "invoke", "field": "f32.no_fold_lt_select_to_abs", "args": [{"type": "f32", "value": "4290772992"}]}, "expected": [{"type": "f32", "value": "4290772992"}]}, 
  {"type": "assert_return", "line": 1022, "action": {"type": "invoke", "field": "f32.no_fold_lt_select_to_abs", "args": [{"type": "f32", "value": "0"}]}, "expected": [{"type": "f32", "value": "0"}]}, 
  {"type": "assert_return", "line": 1023, "action": {"type": "invoke", "field": "f32.no_fold_lt_select_to_abs", "args": [{"type": "f32", "value": "2147483648"}]}, "expected": [{"type": "f32", "value": "2147483648"}]}, 
  {"type": "assert_return", "line": 1024, "action": {"type": "invoke", "field": "f32.no_fold_le_select_to_abs", "args": [{"type": "f32", "value": "2141192192"}]}, "expected": [{"type": "f32", "value": "2141192192"}]}, 
  {"type": "assert_return", "line": 1025, "action": {"type": "invoke", "field": "f32.no_fold_le_select_to_abs", "args": [{"type": "f32", "value": "4290772992"}]}, "expected": [{"type": "f32", "value": "4290772992"}]}, 
  {"type": "assert_return", "line": 1026, "action": {"type": "invoke", "field": "f32.no_fold_le_select_to_abs", "args": [{"type": "f32", "value": "0"}]}, "expected": [{"type": "f32", "value": "2147483648"}]}, 
  {"type": "assert_return", "line": 1027, "action": {"type": "invoke", "field": "f32.no_fold_le_select_to_abs", "args": [{"type": "f32", "value": "2147483648"}]}, "expected": [{"type": "f32", "value": "0"}]}, 
  {"type": "assert_return", "line": 1028, "action": {"type": "invoke", "field": "f32.no_fold_gt_select_to_abs", "args": [{"type": "f32", "value": "2141192192"}]}, "expected": [{"type": "f32", "value": "4288675840"}]}, 
  {"type": "assert_return", "line": 1029, "action": {"type": "invoke", "field": "f32.no_fold_gt_select_to_abs", "args": [{"type": "f32", "value": "4290772992"}]}, "expected": [{"type": "f32", "value": "2143289344"}]}, 
  {"type": "assert_return", "line": 1030, "action": {"type": "invoke", "field": "f32.no_fold_gt_select_to_abs", "args": [{"type": "f32", "value": "0"}]}, "expected": [{"type": "f32", "value": "2147483648"}]}, 
  {"type": "assert_return", "line": 1031, "action": {"type": "invoke", "field": "f32.no_fold_gt_select_to_abs", "args": [{"type": "f32", "value": "2147483648"}]}, "expected": [{"type": "f32", "value": "0"}]}, 
  {"type": "assert_return", "line": 1032, "action": {"type": "invoke", "field": "f32.no_fold_ge_select_to_abs", "args": [{"type": "f32", "value": "2141192192"}]}, "expected": [{"type": "f32", "value": "4288675840"}]}, 
  {"type": "assert_return", "line": 1033, "action": {"type": "invoke", "field": "f32.no_fold_ge_select_to_abs", "args": [{"type": "f32", "value": "4290772992"}]}, "expected": [{"type": "f32", "value": "2143289344"}]}, 
  {"type": "assert_return", "line": 1034, "action": {"type": "invoke", "field": "f32.no_fold_ge_select_to_abs", "args": [{"type": "f32", "value": "0"}]}, "expected": [{"type": "f32", "value": "0"}]}, 
  {"type": "assert_return", "line": 1035, "action": {"type": "invoke", "field": "f32.no_fold_ge_select_to_abs", "args": [{"type": "f32", "value": "2147483648"}]}, "expected": [{"type": "f32", "value": "2147483648"}]}, 
  {"type": "assert_return", "line": 1036, "action": {"type": "invoke", "field": "f64.no_fold_lt_select_to_abs", "args": [{"type": "f64", "value": "9219994337134247936"}]}, "expected": [{"type": "f64", "value": "9219994337134247936"}]}, 
  {"type": "assert_return", "line": 1037, "action": {"type": "invoke", "field": "f64.no_fold_lt_select_to_abs", "args": [{"type": "f64", "value": "18444492273895866368"}]}, "expected": [{"type": "f64", "value": "18444492273895866368"}]}, 
  {"type": "assert_return", "line": 1038, "action": {"type": "invoke", "field": "f64.no_fold_lt_select_to_abs", "args": [{"type": "f64", "value": "0"}]}, "expected": [{"type": "f64", "value": "0"}]}, 
  {"type": "assert_return", "line": 1039, "action": {"type": "invoke", "field": "f64.no_fold_lt_select_to_abs", "args": [{"type": "f64", "value": "9223372036854775808"}]}, "expected": [{"type": "f64", "value": "9223372036854775808"}]}, 
  {"type": "assert_return", "line": 1040, "action": {"type": "invoke", "field": "f64.no_fold_le_select_to_abs", "args": [{"type": "f64", "value": "9219994337134247936"}]}, "expected": [{"type": "f64", "value": "9219994337134247936"}]}, 
  {"type": "assert_return", "line": 1041, "action": {"type": "invoke", "field": "f64.no_fold_le_select_to_abs", "args": [{"type": "f64", "value": "18444492273895866368"}]}, "expected": [{"type": "f64", "value": "18444492273895866368"}]}, 
  {"type": "assert_return", "line": 1042, "action": {"type": "invoke", "field": "f64.no_fold_le_select_to_abs", "args": [{"type": "f64", "value": "0"}]}, "expected": [{"type": "f64", "value": "9223372036854775808"}]}, 
  {"type": "assert_return", "line": 1043, "action": {"type": "invoke", "field": "f64.no_fold_le_select_to_abs", "args": [{"type": "f64", "value": "9223372036854775808"}]}, "expected": [{"type": "f64", "value": "0"}]}, 
  {"type": "assert_return", "line": 1044, "action": {"type": "invoke", "field": "f64.no_fold_gt_select_to_abs", "args": [{"type": "f64", "value": "9219994337134247936"}]}, "expected": [{"type": "f64", "value": "18443366373989023744"}]}, 
  {"type": "assert_return", "line": 1045, "action": {"type": "invoke", "field": "f64.no_fold_gt_select_to_abs", "args": [{"type": "f64", "value": "18444492273895866368"}]}, "expected": [{"type": "f64", "value": "9221120237041090560"}]}, 
  {"type": "assert_return", "line": 1046, "action": {"type": "invoke", "field": "f64.no_fold_gt_select_to_abs", "args": [{"type": "f64", "value": "0"}]}, "expected": [{"type": "f64", "value": "9223372036854775808"}]}, 
  {"type": "assert_return", "line": 1047, "action": {"type": "invoke", "field": "f64.no_fold_gt_select_to_abs", "args": [{"type": "f64", "value": "9223372036854775808"}]}, "expected": [{"type": "f64", "value": "0"}]}, 
  {"type": "assert_return", "line": 1048, "action": {"type": "invoke", "field": "f64.no_fold_ge_select_to_abs", "args": [{"type": "f64", "value": "9219994337134247936"}]}, "expected": [{"type": "f64", "value": "18443366373989023744"}]}, 
  {"type": "assert_return", "line": 1049, "action": {"type": "invoke", "field": "f64.no_fold_ge_select_to_abs", "args": [{"type": "f64", "value": "18444492273895866368"}]}, "expected": [{"type": "f64", "value": "9221120237041090560"}]}, 
  {"type": "assert_return", "line": 1050, "action": {"type": "invoke", "field": "f64.no_fold_ge_select_to_abs", "args": [{"type": "f64", "value": "0"}]}, "expected": [{"type": "f64", "value": "0"}]}, 
  {"type": "assert_return", "line": 1051, "action": {"type": "invoke", "field": "f64.no_fold_ge_select_to_abs", "args": [{"type": "f64", "value": "9223372036854775808"}]}, "expected": [{"type": "f64", "value": "9223372036854775808"}]}, 
  {"type": "module", "line": 1055, "filename": "float_exprs.46.wasm"}, 
  {"type": "assert_return", "line": 1099, "action": {"type": "invoke", "field": "f32.no_fold_lt_if_to_abs", "args": [{"type": "f32", "value": "2141192192"}]}, "expected": [{"type": "f32", "value": "2141192192"}]}, 
  {"type": "assert_return", "line": 1100, "action": {"type": "invoke", "field": "f32.no_fold_lt_if_to_abs", "args": [{"type": "f32", "value": "4290772992"}]}, "expected": [{"type": "f32", "value": "4290772992"}]}, 
  {"type": "assert_return", "line": 1101, "action": {"type": "invoke", "field": "f32.no_fold_lt_if_to_abs", "args": [{"type": "f32", "value": "0"}]}, "expected": [{"type": "f32", "value": "0"}]}, 
  {"type": "assert_return", "line": 1102, "action": {"type": "invoke", "field": "f32.no_fold_lt_if_to_abs", "args": [{"type": "f32", "value": "2147483648"}]}, "expected": [{"type": "f32", "value": "2147483648"}]}, 
  {"type": "assert_return", "line": 1103, "action": {"type": "invoke", "field": "f32.no_fold_le_if_to_abs", "args": [{"type": "f32", "value": "2141192192"}]}, "expected": [{"type": "f32", "value": "2141192192"}]}, 
  {"type": "assert_return", "line": 1104, "action": {"type": "invoke", "field": "f32.no_fold_le_if_to_abs", "args": [{"type": "f32", "value": "4290772992"}]}, "expected": [{"type": "f32", "value": "4290772992"}]}, 
  {"type": "assert_return", "line": 1105, "action": {"type": "invoke", "field": "f32.no_fold_le_if_to_abs", "args": [{"type": "f32", "value": "0"}]}, "expected": [{"type": "f32", "value": "2147483648"}]}, 
  {"type": "assert_return", "line": 1106, "action": {"type": "invoke", "field": "f32.no_fold_le_if_to_abs", "args": [{"type": "f32", "value": "2147483648"}]}, "expected": [{"type": "f32", "value": "0"}]}, 
  {"type": "assert_return", "line": 1107, "action": {"type": "invoke", "field": "f32.no_fold_gt_if_to_abs", "args": [{"type": "f32", "value": "2141192192"}]}, "expected": [{"type": "f32", "value": "4288675840"}]}, 
  {"type": "assert_return", "line": 1108, "action": {"type": "invoke", "field": "f32.no_fold_gt_if_to_abs", "args": [{"type": "f32", "value": "4290772992"}]}, "expected": [{"type": "f32", "value": "2143289344"}]}, 
  {"type": "assert_return", "line": 1109, "action": {"type": "invoke", "field": "f32.no_fold_gt_if_to_abs", "args": [{"type": "f32", "value": "0"}]}, "expected": [{"type": "f32", "value": "2147483648"}]}, 
  {"type": "assert_return", "line": 1110, "action": {"type": "invoke", "field": "f32.no_fold_gt_if_to_abs", "args": [{"type": "f32", "value": "2147483648"}]}, "expected": [{"type": "f32", "value": "0"}]}, 
  {"type": "assert_return", "line": 1111, "action": {"type": "invoke", "field": "f32.no_fold_ge_if_to_abs", "args": [{"type": "f32", "value": "2141192192"}]}, "expected": [{"type": "f32", "value": "4288675840"}]}, 
  {"type": "assert_return", "line": 1112, "action": {"type": "invoke", "field": "f32.no_fold_ge_if_to_abs", "args": [{"type": "f32", "value": "4290772992"}]}, "expected": [{"type": "f32", "value": "2143289344"}]}, 
  {"type": "assert_return", "line": 1113, "action": {"type": "invoke", "field": "f32.no_fold_ge_if_to_abs", "args": [{"type": "f32", "value": "0"}]}, "expected": [{"type": "f32", "value": "0"}]}, 
  {"type": "assert_return", "line": 1114, "action": {"type": "invoke", "field": "f32.no_fold_ge_if_to_abs", "args": [{"type": "f32", "value": "2147483648"}]}, "expected": [{"type": "f32", "value": "2147483648"}]}, 
  {"type": "assert_return", "line": 1115, "action": {"type": "invoke", "field": "f64.no_fold_lt_if_to_abs", "args": [{"type": "f64", "value": "9219994337134247936"}]}, "expected": [{"type": "f64", "value": "9219994337134247936"}]}, 
  {"type": "assert_return", "line": 1116, "action": {"type": "invoke", "field": "f64.no_fold_lt_if_to_abs", "args": [{"type": "f64", "value": "18444492273895866368"}]}, "expected": [{"type": "f64", "value": "18444492273895866368"}]}, 
  {"type": "assert_return", "line": 1117, "action": {"type": "invoke", "field": "f64.no_fold_lt_if_to_abs", "args": [{"type": "f64", "value": "0"}]}, "expected": [{"type": "f64", "value": "0"}]}, 
  {"type": "assert_return", "line": 1118, "action": {"type": "invoke", "field": "f64.no_fold_lt_if_to_abs", "args": [{"type": "f64", "value": "9223372036854775808"}]}, "expected": [{"type": "f64", "value": "9223372036854775808"}]}, 
  {"type": "assert_return", "line": 1119, "action": {"type": "invoke", "field": "f64.no_fold_le_if_to_abs", "args": [{"type": "f64", "value": "9219994337134247936"}]}, "expected": [{"type": "f64", "value": "9219994337134247936"}]}, 
  {"type": "assert_return", "line": 1120, "action": {"type": "invoke", "field": "f64.no_fold_le_if_to_abs", "args": [{"type": "f64", "value": "18444492273895866368"}]}, "expected": [{"type": "f64", "value": "18444492273895866368"}]}, 
  {"type": "assert_return", "line": 1121, "action": {"type": "invoke", "field": "f64.no_fold_le_if_to_abs", "args": [{"type": "f64", "value": "0"}]}, "expected": [{"type": "f64", "value": "9223372036854775808"}]}, 
  {"type": "assert_return", "line": 1122, "action": {"type": "invoke", "field": "f64.no_fold_le_if_to_abs", "args": [{"type": "f64", "value": "9223372036854775808"}]}, "expected": [{"type": "f64", "value": "0"}]}, 
  {"type": "assert_return", "line": 1123, "action": {"type": "invoke", "field": "f64.no_fold_gt_if_to_abs", "args": [{"type": "f64", "value": "9219994337134247936"}]}, "expected": [{"type": "f64", "value": "18443366373989023744"}]}, 
  {"type": "assert_return", "line": 1124, "action": {"type": "invoke", "field": "f64.no_fold_gt_if_to_abs", "args": [{"type": "f64", "value": "18444492273895866368"}]}, "expected": [{"type": "f64", "value": "9221120237041090560"}]}, 
  {"type": "assert_return", "line": 1125, "action": {"type": "invoke", "field": "f64.no_fold_gt_if_to_abs", "args": [{"type": "f64", "value": "0"}]}, "expected": [{"type": "f64", "value": "9223372036854775808"}]}, 
  {"type": "assert_return", "line": 1126, "action": {"type": "invoke", "field": "f64.no_fold_gt_if_to_abs", "args": [{"type": "f64", "value": "9223372036854775808"}]}, "expected": [{"type": "f64", "value": "0"}]}, 
  {"type": "assert_return", "line": 1127, "action": {"type": "invoke", "field": "f64.no_fold_ge_if_to_abs", "args": [{"type": "f64", "value": "9219994337134247936"}]}, "expected": [{"type": "f64", "value": "18443366373989023744"}]}, 
  {"type": "assert_return", "line": 1128, "action": {"type": "invoke", "field": "f64.no_fold_ge_if_to_abs", "args": [{"type": "f64", "value": "18444492273895866368"}]}, "expected": [{"type": "f64", "value": "9221120237041090560"}]}, 
  {"type": "assert_return", "line": 1129, "action": {"type": "invoke", "field": "f64.no_fold_ge_if_to_abs", "args": [{"type": "f64", "value": "0"}]}, "expected": [{"type": "f64", "value": "0"}]}, 
  {"type": "assert_return", "line": 1130, "action": {"type": "invoke", "field": "f64.no_fold_ge_if_to_abs", "args": [{"type": "f64", "value": "9223372036854775808"}]}, "expected": [{"type": "f64", "value": "9223372036854775808"}]}, 
  {"type": "module", "line": 1135, "filename": "float_exprs.47.wasm"}, 
  {"type": "assert_return", "line": 1144, "action": {"type": "invoke", "field": "f32.incorrect_correction", "args": []}, "expected": [{"type": "f32", "value": "872415232"}]}, 
  {"type": "assert_return", "line": 1145, "action": {"type": "invoke", "field": "f64.incorrect_correction", "args": []}, "expected": [{"type": "f64", "value": "13596367275031527424"}]}, 
  {"type": "module", "line": 1150, "filename": "float_exprs.48.wasm"}, 
  {"type": "assert_return", "line": 1167, "action": {"type": "invoke", "field": "calculate", "args": []}, "expected": [{"type": "f32", "value": "3286857379"}]}, 
  {"type": "module", "line": 1169, "filename": "float_exprs.49.wasm"}, 
  {"type": "assert_return", "line": 1186, "action": {"type": "invoke", "field": "calculate", "args": []}, "expected": [{"type": "f64", "value": "13870293918930799763"}]}, 
  {"type": "module", "line": 1191, "filename": "float_exprs.50.wasm"}, 
  {"type": "assert_return", "line": 1197, "action": {"type": "invoke", "field": "llvm_pr26746", "args": [{"type": "f32", "value": "2147483648"}]}, "expected": [{"type": "f32", "value": "0"}]}, 
  {"type": "module", "line": 1202, "filename": "float_exprs.51.wasm"}, 
  {"type": "assert_return", "line": 1208, "action": {"type": "invoke", "field": "llvm_pr27153", "args": [{"type": "i32", "value": "33554434"}]}, "expected": [{"type": "f32", "value": "1270874112"}]}, 
  {"type": "module", "line": 1213, "filename": "float_exprs.52.wasm"}, 
  {"type": "assert_return", "line": 1220, "action": {"type": "invoke", "field": "llvm_pr27036", "args": [{"type": "i32", "value": "4269932491"}, {"type": "i32", "value": "14942208"}]}, "expected": [{"type": "f32", "value": "3407478836"}]}, 
  {"type": "module", "line": 1230, "filename": "float_exprs.53.wasm"}, 
  {"type": "assert_return", "line": 1244, "action": {"type": "invoke", "field": "thepast0", "args": [{"type": "f64", "value": "9007199254740992"}, {"type": "f64", "value": "4607182418800017407"}, {"type": "f64", "value": "4611686018427387904"}, {"type": "f64", "value": "4602678819172646912"}]}, "expected": [{"type": "f64", "value": "9007199254740991"}]}, 
  {"type": "assert_return", "line": 1245, "action": {"type": "invoke", "field": "thepast1", "args": [{"type": "f64", "value": "4363988038922010624"}, {"type": "f64", "value": "4607182418800017407"}, {"type": "f64", "value": "4363988038922010624"}]}, "expected": [{"type": "f64", "value": "13348669295526150144"}]}, 
  {"type": "assert_return", "line": 1246, "action": {"type": "invoke", "field": "thepast2", "args": [{"type": "f32", "value": "16777216"}, {"type": "f32", "value": "1056964608"}, {"type": "f32", "value": "1065353216"}]}, "expected": [{"type": "f32", "value": "8388608"}]}, 
  {"type": "module", "line": 1251, "filename": "float_exprs.54.wasm"}, 
  {"type": "assert_return", "line": 1257, "action": {"type": "invoke", "field": "inverse", "args": [{"type": "f32", "value": "1119879168"}]}, "expected": [{"type": "f32", "value": "1009429163"}]}, 
  {"type": "module", "line": 1262, "filename": "float_exprs.55.wasm"}, 
  {"type": "assert_return", "line": 1272, "action": {"type": "invoke", "field": "f32_sqrt_minus_2", "args": [{"type": "f32", "value": "1082130432"}]}, "expected": [{"type": "f32", "value": "0"}]}, 
  {"type": "assert_return", "line": 1273, "action": {"type": "invoke", "field": "f64_sqrt_minus_2", "args": [{"type": "f64", "value": "4616189618054758400"}]}, "expected": [{"type": "f64", "value": "0"}]}, 
  {"type": "module", "line": 1277, "filename": "float_exprs.56.wasm"}, 
  {"type": "assert_return", "line": 1285, "action": {"type": "invoke", "field": "f32.no_fold_recip_recip", "args": [{"type": "f32", "value": "3765723020"}]}, "expected": [{"type": "f32", "value": "3765723019"}]}, 
  {"type": "assert_return", "line": 1286, "action": {"type": "invoke", "field": "f32.no_fold_recip_recip", "args": [{"type": "f32", "value": "426844452"}]}, "expected": [{"type": "f32", "value": "426844451"}]}, 
  {"type": "assert_return", "line": 1287, "action": {"type": "invoke", "field": "f32.no_fold_recip_recip", "args": [{"type": "f32", "value": "535132276"}]}, "expected": [{"type": "f32", "value": "535132277"}]}, 
  {"type": "assert_return", "line": 1288, "action": {"type": "invoke", "field": "f32.no_fold_recip_recip", "args": [{"type": "f32", "value": "3253941441"}]}, "expected": [{"type": "f32", "value": "3253941442"}]}, 
  {"type": "assert_return", "line": 1289, "action": {"type": "invoke", "field": "f32.no_fold_recip_recip", "args": [{"type": "f32", "value": "1660734603"}]}, "expected": [{"type": "f32", "value": "1660734602"}]}, 
  {"type": "assert_return", "line": 1291, "action": {"type": "invoke", "field": "f32.no_fold_recip_recip", "args": [{"type": "f32", "value": "2147483648"}]}, "expected": [{"type": "f32", "value": "2147483648"}]}, 
  {"type": "assert_return", "line": 1292, "action": {"type": "invoke", "field": "f32.no_fold_recip_recip", "args": [{"type": "f32", "value": "0"}]}, "expected": [{"type": "f32", "value": "0"}]}, 
  {"type": "assert_return", "line": 1293, "action": {"type": "invoke", "field": "f32.no_fold_recip_recip", "args": [{"type": "f32", "value": "4286578688"}]}, "expected": [{"type": "f32", "value": "4286578688"}]}, 
  {"type": "assert_return", "line": 1294, "action": {"type": "invoke", "field": "f32.no_fold_recip_recip", "args": [{"type": "f32", "value": "2139095040"}]}, "expected": [{"type": "f32", "value": "2139095040"}]}, 
  {"type": "assert_return", "line": 1296, "action": {"type": "invoke", "field": "f64.no_fold_recip_recip", "args": [{"type": "f64", "value": "14500888369201570768"}]}, "expected": [{"type": "f64", "value": "14500888369201570769"}]}, 
  {"type": "assert_return", "line": 1297, "action": {"type": "invoke", "field": "f64.no_fold_recip_recip", "args": [{"type": "f64", "value": "14132092565459057123"}]}, "expected": [{"type": "f64", "value": "14132092565459057122"}]}, 
  {"type": "assert_return", "line": 1298, "action": {"type": "invoke", "field": "f64.no_fold_recip_recip", "args": [{"type": "f64", "value": "5359183527603521526"}]}, "expected": [{"type": "f64", "value": "5359183527603521525"}]}, 
  {"type": "assert_return", "line": 1299, "action": {"type": "invoke", "field": "f64.no_fold_recip_recip", "args": [{"type": "f64", "value": "1521566147669375634"}]}, "expected": [{"type": "f64", "value": "1521566147669375633"}]}, 
  {"type": "assert_return", "line": 1300, "action": {"type": "invoke", "field": "f64.no_fold_recip_recip", "args": [{"type": "f64", "value": "8671785631545870379"}]}, "expected": [{"type": "f64", "value": "8671785631545870378"}]}, 
  {"type": "assert_return", "line": 1302, "action": {"type": "invoke", "field": "f64.no_fold_recip_recip", "args": [{"type": "f64", "value": "9223372036854775808"}]}, "expected": [{"type": "f64", "value": "9223372036854775808"}]}, 
  {"type": "assert_return", "line": 1303, "action": {"type": "invoke", "field": "f64.no_fold_recip_recip", "args": [{"type": "f64", "value": "0"}]}, "expected": [{"type": "f64", "value": "0"}]}, 
  {"type": "assert_return", "line": 1304, "action": {"type": "invoke", "field": "f64.no_fold_recip_recip", "args": [{"type": "f64", "value": "18442240474082181120"}]}, "expected": [{"type": "f64", "value": "18442240474082181120"}]}, 
  {"type": "assert_return", "line": 1305, "action": {"type": "invoke", "field": "f64.no_fold_recip_recip", "args": [{"type": "f64", "value": "9218868437227405312"}]}, "expected": [{"type": "f64", "value": "9218868437227405312"}]}, 
  {"type": "module", "line": 1309, "filename": "float_exprs.57.wasm"}, 
  {"type": "assert_return", "line": 1319, "action": {"type": "invoke", "field": "f32.no_algebraic_factoring", "args": [{"type": "f32", "value": "2759308231"}, {"type": "f32", "value": "618704988"}]}, "expected": [{"type": "f32", "value": "2315864577"}]}, 
  {"type": "assert_return", "line": 1320, "action": {"type": "invoke", "field": "f32.no_algebraic_factoring", "args": [{"type": "f32", "value": "3415653214"}, {"type": "f32", "value": "1274676302"}]}, "expected": [{"type": "f32", "value": "3625675853"}]}, 
  {"type": "assert_return", "line": 1321, "action": {"type": "invoke", "field": "f32.no_algebraic_factoring", "args": [{"type": "f32", "value": "1446924633"}, {"type": "f32", "value": "3607373982"}]}, "expected": [{"type": "f32", "value": "4000155759"}]}, 
  {"type": "assert_return", "line": 1322, "action": {"type": "invoke", "field": "f32.no_algebraic_factoring", "args": [{"type": "f32", "value": "1212067608"}, {"type": "f32", "value": "3278094810"}]}, "expected": [{"type": "f32", "value": "1359874131"}]}, 
  {"type": "assert_return", "line": 1323, "action": {"type": "invoke", "field": "f32.no_algebraic_factoring", "args": [{"type": "f32", "value": "3278732464"}, {"type": "f32", "value": "3379389272"}]}, "expected": [{"type": "f32", "value": "3546030359"}]}, 
  {"type": "assert_return", "line": 1325, "action": {"type": "invoke", "field": "f64.no_algebraic_factoring", "args": [{"type": "f64", "value": "2467435761933928117"}, {"type": "f64", "value": "2526113756828458004"}]}, "expected": [{"type": "f64", "value": "9668435399096543331"}]}, 
  {"type": "assert_return", "line": 1326, "action": {"type": "invoke", "field": "f64.no_algebraic_factoring", "args": [{"type": "f64", "value": "2911983657790464931"}, {"type": "f64", "value": "2814431682419759911"}]}, "expected": [{"type": "f64", "value": "1217162942843921803"}]}, 
  {"type": "assert_return", "line": 1327, "action": {"type": "invoke", "field": "f64.no_algebraic_factoring", "args": [{"type": "f64", "value": "12131637044948792058"}, {"type": "f64", "value": "12170782965730311956"}]}, "expected": [{"type": "f64", "value": "10511676135434922533"}]}, 
  {"type": "assert_return", "line": 1328, "action": {"type": "invoke", "field": "f64.no_algebraic_factoring", "args": [{"type": "f64", "value": "14639789466354372633"}, {"type": "f64", "value": "5456963169336729236"}]}, "expected": [{"type": "f64", "value": "15530333405173431543"}]}, 
  {"type": "assert_return", "line": 1329, "action": {"type": "invoke", "field": "f64.no_algebraic_factoring", "args": [{"type": "f64", "value": "5121779675912507154"}, {"type": "f64", "value": "14237286623175920791"}]}, "expected": [{"type": "f64", "value": "5636689734063865714"}]}, 
  {"type": "module", "line": 1333, "filename": "float_exprs.58.wasm"}, 
  {"type": "assert_return", "line": 1343, "action": {"type": "invoke", "field": "f32.no_algebraic_factoring", "args": [{"type": "f32", "value": "684135946"}, {"type": "f32", "value": "744319693"}]}, "expected": [{"type": "f32", "value": "2571075368"}]}, 
  {"type": "assert_return", "line": 1344, "action": {"type": "invoke", "field": "f32.no_algebraic_factoring", "args": [{"type": "f32", "value": "3560929481"}, {"type": "f32", "value": "3496840229"}]}, "expected": [{"type": "f32", "value": "1762604185"}]}, 
  {"type": "assert_return", "line": 1345, "action": {"type": "invoke", "field": "f32.no_algebraic_factoring", "args": [{"type": "f32", "value": "968841772"}, {"type": "f32", "value": "3106497100"}]}, "expected": [{"type": "f32", "value": "870712803"}]}, 
  {"type": "assert_return", "line": 1346, "action": {"type": "invoke", "field": "f32.no_algebraic_factoring", "args": [{"type": "f32", "value": "697514723"}, {"type": "f32", "value": "2834753933"}]}, "expected": [{"type": "f32", "value": "327914662"}]}, 
  {"type": "assert_return", "line": 1347, "action": {"type": "invoke", "field": "f32.no_algebraic_factoring", "args": [{"type": "f32", "value": "1498230729"}, {"type": "f32", "value": "3650453580"}]}, "expected": [{"type": "f32", "value": "4080583891"}]}, 
  {"type": "assert_return", "line": 1349, "action": {"type": "invoke", "field": "f64.no_algebraic_factoring", "args": [{"type": "f64", "value": "6212515167506370409"}, {"type": "f64", "value": "15348474890798978273"}]}, "expected": [{"type": "f64", "value": "7818515589337550196"}]}, 
  {"type": "assert_return", "line": 1350, "action": {"type": "invoke", "field": "f64.no_algebraic_factoring", "args": [{"type": "f64", "value": "15222970140370015722"}, {"type": "f64", "value": "15325207139996136125"}]}, "expected": [{"type": "f64", "value": "16819892485880140289"}]}, 
  {"type": "assert_return", "line": 1351, "action": {"type": "invoke", "field": "f64.no_algebraic_factoring", "args": [{"type": "f64", "value": "4797439202963874050"}, {"type": "f64", "value": "14009643534571442918"}]}, "expected": [{"type": "f64", "value": "4987747999326390045"}]}, 
  {"type": "assert_return", "line": 1352, "action": {"type": "invoke", "field": "f64.no_algebraic_factoring", "args": [{"type": "f64", "value": "14653559129294038194"}, {"type": "f64", "value": "14581996260169223461"}]}, "expected": [{"type": "f64", "value": "6253339631158964222"}]}, 
  {"type": "assert_return", "line": 1353, "action": {"type": "invoke", "field": "f64.no_algebraic_factoring", "args": [{"type": "f64", "value": "12768321634751930140"}, {"type": "f64", "value": "12767602092732820937"}]}, "expected": [{"type": "f64", "value": "2473652960990319032"}]}, 
  {"type": "module", "line": 1358, "filename": "float_exprs.59.wasm"}, 
  {"type": "assert_return", "line": 1391, "action": {"type": "invoke", "field": "f32.simple_x4_sum", "args": [{"type": "i32", "value": "0"}, {"type": "i32", "value": "16"}, {"type": "i32", "value": "32"}]}, "expected": []}, 
  {"type": "assert_return", "line": 1392, "action": {"type": "invoke", "field": "f32.load", "args": [{"type": "i32", "value": "32"}]}, "expected": [{"type": "f32", "value": "2"}]}, 
  {"type": "assert_return", "line": 1393, "action": {"type": "invoke", "field": "f32.load", "args": [{"type": "i32", "value": "36"}]}, "expected": [{"type": "f32", "value": "0"}]}, 
  {"type": "assert_return", "line": 1394, "action": {"type": "invoke", "field": "f32.load", "args": [{"type": "i32", "value": "40"}]}, "expected": [{"type": "f32", "value": "1"}]}, 
  {"type": "assert_return", "line": 1395, "action": {"type": "invoke", "field": "f32.load", "args": [{"type": "i32", "value": "44"}]}, "expected": [{"type": "f32", "value": "2147483649"}]}, 
  {"type": "module", "line": 1397, "filename": "float_exprs.60.wasm"}, 
  {"type": "assert_return", "line": 1430, "action": {"type": "invoke", "field": "f64.simple_x4_sum", "args": [{"type": "i32", "value": "0"}, {"type": "i32", "value": "32"}, {"type": "i32", "value": "64"}]}, "expected": []}, 
  {"type": "assert_return", "line": 1431, "action": {"type": "invoke", "field": "f64.load", "args": [{"type": "i32", "value": "64"}]}, "expected": [{"type": "f64", "value": "2"}]}, 
  {"type": "assert_return", "line": 1432, "action": {"type": "invoke", "field": "f64.load", "args": [{"type": "i32", "value": "72"}]}, "expected": [{"type": "f64", "value": "0"}]}, 
  {"type": "assert_return", "line": 1433, "action": {"type": "invoke", "field": "f64.load", "args": [{"type": "i32", "value": "80"}]}, "expected": [{"type": "f64", "value": "1"}]}, 
  {"type": "assert_return", "line": 1434, "action": {"type": "invoke", "field": "f64.load", "args": [{"type": "i32", "value": "88"}]}, "expected": [{"type": "f64", "value": "9223372036854775809"}]}, 
  {"type": "module", "line": 1439, "filename": "float_exprs.61.wasm"}, 
  {"type": "assert_return", "line": 1530, "action": {"type": "invoke", "field": "f32.kahan_sum", "args": [{"type": "i32", "value": "0"}, {"type": "i32", "value": "256"}]}, "expected": [{"type": "f32", "value": "4085779725"}]}, 
  {"type": "assert_return", "line": 1531, "action": {"type": "invoke", "field": "f32.plain_sum", "args": [{"type": "i32", "value": "0"}, {"type": "i32", "value": "256"}]}, "expected": [{"type": "f32", "value": "4082113053"}]}, 
  {"type": "module", "line": 1533, "filename": "float_exprs.62.wasm"}, 
  {"type": "assert_return", "line": 1581, "action": {"type": "invoke", "field": "f64.kahan_sum", "args": [{"type": "i32", "value": "0"}, {"type": "i32", "value": "256"}]}, "expected": [{"type": "f64", "value": "9105671289202277512"}]}, 
  {"type": "assert_return", "line": 1582, "action": {"type": "invoke", "field": "f64.plain_sum", "args": [{"type": "i32", "value": "0"}, {"type": "i32", "value": "256"}]}, "expected": [{"type": "f64", "value": "9105671289202539655"}]}, 
  {"type": "module", "line": 1586, "filename": "float_exprs.63.wasm"}, 
  {"type": "assert_return", "line": 1594, "action": {"type": "invoke", "field": "f32.no_fold_neg_sub", "args": [{"type": "f32", "value": "2147483648"}, {"type": "f32", "value": "2147483648"}]}, "expected": [{"type": "f32", "value": "2147483648"}]}, 
  {"type": "assert_return", "line": 1595, "action": {"type": "invoke", "field": "f32.no_fold_neg_sub", "args": [{"type": "f32", "value": "0"}, {"type": "f32", "value": "2147483648"}]}, "expected": [{"type": "f32", "value": "2147483648"}]}, 
  {"type": "assert_return", "line": 1596, "action": {"type": "invoke", "field": "f32.no_fold_neg_sub", "args": [{"type": "f32", "value": "2147483648"}, {"type": "f32", "value": "0"}]}, "expected": [{"type": "f32", "value": "0"}]}, 
  {"type": "assert_return", "line": 1597, "action": {"type": "invoke", "field": "f32.no_fold_neg_sub", "args": [{"type": "f32", "value": "0"}, {"type": "f32", "value": "0"}]}, "expected": [{"type": "f32", "value": "2147483648"}]}, 
  {"type": "assert_return", "line": 1599, "action": {"type": "invoke", "field": "f64.no_fold_neg_sub", "args": [{"type": "f64", "value": "9223372036854775808"}, {"type": "f64", "value": "9223372036854775808"}]}, "expected": [{"type": "f64", "value": "9223372036854775808"}]}, 
  {"type": "assert_return", "line": 1600, "action": {"type": "invoke", "field": "f64.no_fold_neg_sub", "args": [{"type": "f64", "value": "0"}, {"type": "f64", "value": "9223372036854775808"}]}, "expected": [{"type": "f64", "value": "9223372036854775808"}]}, 
  {"type": "assert_return", "line": 1601, "action": {"type": "invoke", "field": "f64.no_fold_neg_sub", "args": [{"type": "f64", "value": "9223372036854775808"}, {"type": "f64", "value": "0"}]}, "expected": [{"type": "f64", "value": "0"}]}, 
  {"type": "assert_return", "line": 1602, "action": {"type": "invoke", "field": "f64.no_fold_neg_sub", "args": [{"type": "f64", "value": "0"}, {"type": "f64", "value": "0"}]}, "expected": [{"type": "f64", "value": "9223372036854775808"}]}, 
  {"type": "module", "line": 1606, "filename": "float_exprs.64.wasm"}, 
  {"type": "assert_return", "line": 1614, "action": {"type": "invoke", "field": "f32.no_fold_neg_add", "args": [{"type": "f32", "value": "2147483648"}, {"type": "f32", "value": "2147483648"}]}, "expected": [{"type": "f32", "value": "0"}]}, 
  {"type": "assert_return", "line": 1615, "action": {"type": "invoke", "field": "f32.no_fold_neg_add", "args": [{"type": "f32", "value": "0"}, {"type": "f32", "value": "2147483648"}]}, "expected": [{"type": "f32", "value": "2147483648"}]}, 
  {"type": "assert_return", "line": 1616, "action": {"type": "invoke", "field": "f32.no_fold_neg_add", "args": [{"type": "f32", "value": "2147483648"}, {"type": "f32", "value": "0"}]}, "expected": [{"type": "f32", "value": "2147483648"}]}, 
  {"type": "assert_return", "line": 1617, "action": {"type": "invoke", "field": "f32.no_fold_neg_add", "args": [{"type": "f32", "value": "0"}, {"type": "f32", "value": "0"}]}, "expected": [{"type": "f32", "value": "2147483648"}]}, 
  {"type": "assert_return", "line": 1619, "action": {"type": "invoke", "field": "f64.no_fold_neg_add", "args": [{"type": "f64", "value": "9223372036854775808"}, {"type": "f64", "value": "9223372036854775808"}]}, "expected": [{"type": "f64", "value": "0"}]}, 
  {"type": "assert_return", "line": 1620, "action": {"type": "invoke", "field": "f64.no_fold_neg_add", "args": [{"type": "f64", "value": "0"}, {"type": "f64", "value": "9223372036854775808"}]}, "expected": [{"type": "f64", "value": "9223372036854775808"}]}, 
  {"type": "assert_return", "line": 1621, "action": {"type": "invoke", "field": "f64.no_fold_neg_add", "args": [{"type": "f64", "value": "9223372036854775808"}, {"type": "f64", "value": "0"}]}, "expected": [{"type": "f64", "value": "9223372036854775808"}]}, 
  {"type": "assert_return", "line": 1622, "action": {"type": "invoke", "field": "f64.no_fold_neg_add", "args": [{"type": "f64", "value": "0"}, {"type": "f64", "value": "0"}]}, "expected": [{"type": "f64", "value": "9223372036854775808"}]}, 
  {"type": "module", "line": 1626, "filename": "float_exprs.65.wasm"}, 
  {"type": "assert_return", "line": 1634, "action": {"type": "invoke", "field": "f32.no_fold_add_neg_neg", "args": [{"type": "f32", "value": "2147483648"}, {"type": "f32", "value": "2147483648"}]}, "expected": [{"type": "f32", "value": "0"}]}, 
  {"type": "assert_return", "line": 1635, "action": {"type": "invoke", "field": "f32.no_fold_add_neg_neg", "args": [{"type": "f32", "value": "0"}, {"type": "f32", "value": "2147483648"}]}, "expected": [{"type": "f32", "value": "0"}]}, 
  {"type": "assert_return", "line": 1636, "action": {"type": "invoke", "field": "f32.no_fold_add_neg_neg", "args": [{"type": "f32", "value": "2147483648"}, {"type": "f32", "value": "0"}]}, "expected": [{"type": "f32", "value": "0"}]}, 
  {"type": "assert_return", "line": 1637, "action": {"type": "invoke", "field": "f32.no_fold_add_neg_neg", "args": [{"type": "f32", "value": "0"}, {"type": "f32", "value": "0"}]}, "expected": [{"type": "f32", "value": "2147483648"}]}, 
  {"type": "assert_return", "line": 1639, "action": {"type": "invoke", "field": "f64.no_fold_add_neg_neg", "args": [{"type": "f64", "value": "9223372036854775808"}, {"type": "f64", "value": "9223372036854775808"}]}, "expected": [{"type": "f64", "value": "0"}]}, 
  {"type": "assert_return", "line": 1640, "action": {"type": "invoke", "field": "f64.no_fold_add_neg_neg", "args": [{"type": "f64", "value": "0"}, {"type": "f64", "value": "9223372036854775808"}]}, "expected": [{"type": "f64", "value": "0"}]}, 
  {"type": "assert_return", "line": 1641, "action": {"type": "invoke", "field": "f64.no_fold_add_neg_neg", "args": [{"type": "f64", "value": "9223372036854775808"}, {"type": "f64", "value": "0"}]}, "expected": [{"type": "f64", "value": "0"}]}, 
  {"type": "assert_return", "line": 1642, "action": {"type": "invoke", "field": "f64.no_fold_add_neg_neg", "args": [{"type": "f64", "value": "0"}, {"type": "f64", "value": "0"}]}, "expected": [{"type": "f64", "value": "9223372036854775808"}]}, 
  {"type": "module", "line": 1646, "filename": "float_exprs.66.wasm"}, 
  {"type": "assert_return", "line": 1654, "action": {"type": "invoke", "field": "f32.no_fold_add_neg", "args": [{"type": "f32", "value": "0"}]}, "expected": [{"type": "f32", "value": "0"}]}, 
  {"type": "assert_return", "line": 1655, "action": {"type": "invoke", "field": "f32.no_fold_add_neg", "args": [{"type": "f32", "value": "2147483648"}]}, "expected": [{"type": "f32", "value": "0"}]}, 
  {"type": "assert_return", "line": 1656, "action": {"type": "invoke", "field": "f32.no_fold_add_neg", "args": [{"type": "f32", "value": "2139095040"}]}, "expected": [{"type": "f32", "value": "nan:canonical"}]}, 
  {"type": "assert_return", "line": 1657, "action": {"type": "invoke", "field": "f32.no_fold_add_neg", "args": [{"type": "f32", "value": "4286578688"}]}, "expected": [{"type": "f32", "value": "nan:canonical"}]}, 
  {"type": "assert_return", "line": 1659, "action": {"type": "invoke", "field": "f64.no_fold_add_neg", "args": [{"type": "f64", "value": "0"}]}, "expected": [{"type": "f64", "value": "0"}]}, 
  {"type": "assert_return", "line": 1660, "action": {"type": "invoke", "field": "f64.no_fold_add_neg", "args": [{"type": "f64", "value": "9223372036854775808"}]}, "expected": [{"type": "f64", "value": "0"}]}, 
  {"type": "assert_return", "line": 1661, "action": {"type": "invoke", "field": "f64.no_fold_add_neg", "args": [{"type": "f64", "value": "9218868437227405312"}]}, "expected": [{"type": "f64", "value": "nan:canonical"}]}, 
  {"type": "assert_return", "line": 1662, "action": {"type": "invoke", "field": "f64.no_fold_add_neg", "args": [{"type": "f64", "value": "18442240474082181120"}]}, "expected": [{"type": "f64", "value": "nan:canonical"}]}, 
  {"type": "module", "line": 1666, "filename": "float_exprs.67.wasm"}, 
  {"type": "assert_return", "line": 1680, "action": {"type": "invoke", "field": "f32.no_fold_6x_via_add", "args": [{"type": "f32", "value": "4046243078"}]}, "expected": [{"type": "f32", "value": "4068578245"}]}, 
  {"type": "assert_return", "line": 1681, "action": {"type": "invoke", "field": "f32.no_fold_6x_via_add", "args": [{"type": "f32", "value": "2573857750"}]}, "expected": [{"type": "f32", "value": "2595190497"}]}, 
  {"type": "assert_return", "line": 1682, "action": {"type": "invoke", "field": "f32.no_fold_6x_via_add", "args": [{"type": "f32", "value": "419462401"}]}, "expected": [{"type": "f32", "value": "440449921"}]}, 
  {"type": "assert_return", "line": 1683, "action": {"type": "invoke", "field": "f32.no_fold_6x_via_add", "args": [{"type": "f32", "value": "2955475482"}]}, "expected": [{"type": "f32", "value": "2977789734"}]}, 
  {"type": "assert_return", "line": 1684, "action": {"type": "invoke", "field": "f32.no_fold_6x_via_add", "args": [{"type": "f32", "value": "3883931973"}]}, "expected": [{"type": "f32", "value": "3904906727"}]}, 
  {"type": "assert_return", "line": 1686, "action": {"type": "invoke", "field": "f64.no_fold_6x_via_add", "args": [{"type": "f64", "value": "14137662215323058150"}]}, "expected": [{"type": "f64", "value": "14149352706895019994"}]}, 
  {"type": "assert_return", "line": 1687, "action": {"type": "invoke", "field": "f64.no_fold_6x_via_add", "args": [{"type": "f64", "value": "11424134044545165748"}]}, "expected": [{"type": "f64", "value": "11435767596137037638"}]}, 
  {"type": "assert_return", "line": 1688, "action": {"type": "invoke", "field": "f64.no_fold_6x_via_add", "args": [{"type": "f64", "value": "15055410132664937138"}]}, "expected": [{"type": "f64", "value": "15066699987142021125"}]}, 
  {"type": "assert_return", "line": 1689, "action": {"type": "invoke", "field": "f64.no_fold_6x_via_add", "args": [{"type": "f64", "value": "7991451501228919438"}]}, "expected": [{"type": "f64", "value": "8003319959635773419"}]}, 
  {"type": "assert_return", "line": 1690, "action": {"type": "invoke", "field": "f64.no_fold_6x_via_add", "args": [{"type": "f64", "value": "14886926859367497770"}]}, "expected": [{"type": "f64", "value": "14898679235615764511"}]}, 
  {"type": "module", "line": 1695, "filename": "float_exprs.68.wasm"}, 
  {"type": "assert_return", "line": 1703, "action": {"type": "invoke", "field": "f32.no_fold_div_div", "args": [{"type": "f32", "value": "3875242260"}, {"type": "f32", "value": "3086869257"}, {"type": "f32", "value": "3301317576"}]}, "expected": [{"type": "f32", "value": "3911440926"}]}, 
  {"type": "assert_return", "line": 1704, "action": {"type": "invoke", "field": "f32.no_fold_div_div", "args": [{"type": "f32", "value": "485052055"}, {"type": "f32", "value": "1996083391"}, {"type": "f32", "value": "2276616712"}]}, "expected": [{"type": "f32", "value": "2147483648"}]}, 
  {"type": "assert_return", "line": 1705, "action": {"type": "invoke", "field": "f32.no_fold_div_div", "args": [{"type": "f32", "value": "1430470604"}, {"type": "f32", "value": "186144382"}, {"type": "f32", "value": "1953564780"}]}, "expected": [{"type": "f32", "value": "2139095040"}]}, 
  {"type": "assert_return", "line": 1706, "action": {"type": "invoke", "field": "f32.no_fold_div_div", "args": [{"type": "f32", "value": "3101818893"}, {"type": "f32", "value": "4258133430"}, {"type": "f32", "value": "2855958950"}]}, "expected": [{"type": "f32", "value": "2411777082"}]}, 
  {"type": "assert_return", "line": 1707, "action": {"type": "invoke", "field": "f32.no_fold_div_div", "args": [{"type": "f32", "value": "1458407223"}, {"type": "f32", "value": "1537931089"}, {"type": "f32", "value": "4260989344"}]}, "expected": [{"type": "f32", "value": "2147507000"}]}, 
  {"type": "assert_return", "line": 1709, "action": {"type": "invoke", "field": "f64.no_fold_div_div", "args": [{"type": "f64", "value": "6128077243319875447"}, {"type": "f64", "value": "7240092044185667120"}, {"type": "f64", "value": "10312472494987686942"}]}, "expected": [{"type": "f64", "value": "16236150182064455170"}]}, 
  {"type": "assert_return", "line": 1710, "action": {"type": "invoke", "field": "f64.no_fold_div_div", "args": [{"type": "f64", "value": "17395933367696573535"}, {"type": "f64", "value": "4478922858584402707"}, {"type": "f64", "value": "6032094754408482817"}]}, "expected": [{"type": "f64", "value": "16098470347548634769"}]}, 
  {"type": "assert_return", "line": 1711, "action": {"type": "invoke", "field": "f64.no_fold_div_div", "args": [{"type": "f64", "value": "13843263185226986279"}, {"type": "f64", "value": "17796742619038211051"}, {"type": "f64", "value": "5375701731263473827"}]}, "expected": [{"type": "f64", "value": "44472927"}]}, 
  {"type": "assert_return", "line": 1712, "action": {"type": "invoke", "field": "f64.no_fold_div_div", "args": [{"type": "f64", "value": "17547288444310957340"}, {"type": "f64", "value": "911654786857739111"}, {"type": "f64", "value": "8937284546802896640"}]}, "expected": [{"type": "f64", "value": "18442240474082181120"}]}, 
  {"type": "assert_return", "line": 1713, "action": {"type": "invoke", "field": "f64.no_fold_div_div", "args": [{"type": "f64", "value": "9835707468114203513"}, {"type": "f64", "value": "1924400690116523912"}, {"type": "f64", "value": "13208934041167870811"}]}, "expected": [{"type": "f64", "value": "3916014548332337260"}]}, 
  {"type": "module", "line": 1719, "filename": "float_exprs.69.wasm"}, 
  {"type": "assert_return", "line": 1727, "action": {"type": "invoke", "field": "f32.no_fold_mul_divs", "args": [{"type": "f32", "value": "2304917983"}, {"type": "f32", "value": "301403678"}, {"type": "f32", "value": "331350955"}, {"type": "f32", "value": "3251297465"}]}, "expected": [{"type": "f32", "value": "148760966"}]}, 
  {"type": "assert_return", "line": 1728, "action": {"type": "invoke", "field": "f32.no_fold_mul_divs", "args": [{"type": "f32", "value": "4068974897"}, {"type": "f32", "value": "1276265036"}, {"type": "f32", "value": "930821438"}, {"type": "f32", "value": "1044692964"}]}, "expected": [{"type": "f32", "value": "3742862674"}]}, 
  {"type": "assert_return", "line": 1729, "action": {"type": "invoke", "field": "f32.no_fold_mul_divs", "args": [{"type": "f32", "value": "3496980369"}, {"type": "f32", "value": "3548280607"}, {"type": "f32", "value": "3461305482"}, {"type": "f32", "value": "3298174616"}]}, "expected": [{"type": "f32", "value": "1176926862"}]}, 
  {"type": "assert_return", "line": 1730, "action": {"type": "invoke", "field": "f32.no_fold_mul_divs", "args": [{"type": "f32", "value": "4135236702"}, {"type": "f32", "value": "787270424"}, {"type": "f32", "value": "932959293"}, {"type": "f32", "value": "1724950821"}]}, "expected": [{"type": "f32", "value": "4286578688"}]}, 
  {"type": "assert_return", "line": 1731, "action": {"type": "invoke", "field": "f32.no_fold_mul_divs", "args": [{"type": "f32", "value": "622783177"}, {"type": "f32", "value": "2677642769"}, {"type": "f32", "value": "307759154"}, {"type": "f32", "value": "768171421"}]}, "expected": [{"type": "f32", "value": "2844661464"}]}, 
  {"type": "assert_return", "line": 1733, "action": {"type": "invoke", "field": "f64.no_fold_mul_divs", "args": [{"type": "f64", "value": "10143060558527560466"}, {"type": "f64", "value": "11745059379675007839"}, {"type": "f64", "value": "16295837305232663584"}, {"type": "f64", "value": "5444961058358534642"}]}, "expected": [{"type": "f64", "value": "13856326607560224491"}]}, 
  {"type": "assert_return", "line": 1734, "action": {"type": "invoke", "field": "f64.no_fold_mul_divs", "args": [{"type": "f64", "value": "14349445329289351080"}, {"type": "f64", "value": "468238185841254727"}, {"type": "f64", "value": "15463559257629249878"}, {"type": "f64", "value": "15937497686185055572"}]}, "expected": [{"type": "f64", "value": "18442240474082181120"}]}, 
  {"type": "assert_return", "line": 1735, "action": {"type": "invoke", "field": "f64.no_fold_mul_divs", "args": [{"type": "f64", "value": "15220380342429201729"}, {"type": "f64", "value": "14697937818549468616"}, {"type": "f64", "value": "13203624158275174657"}, {"type": "f64", "value": "17131104131485469546"}]}, "expected": [{"type": "f64", "value": "1202126128702318245"}]}, 
  {"type": "assert_return", "line": 1736, "action": {"type": "invoke", "field": "f64.no_fold_mul_divs", "args": [{"type": "f64", "value": "14414969397981384765"}, {"type": "f64", "value": "12269327994486371199"}, {"type": "f64", "value": "298707625567048656"}, {"type": "f64", "value": "5613107161545919917"}]}, "expected": [{"type": "f64", "value": "0"}]}, 
  {"type": "assert_return", "line": 1737, "action": {"type": "invoke", "field": "f64.no_fold_mul_divs", "args": [{"type": "f64", "value": "4529089342618677929"}, {"type": "f64", "value": "3361245300043094097"}, {"type": "f64", "value": "1815899012046749567"}, {"type": "f64", "value": "15418396504351552390"}]}, "expected": [{"type": "f64", "value": "10619033301585441215"}]}, 
  {"type": "module", "line": 1741, "filename": "float_exprs.70.wasm"}, 
  {"type": "assert_return", "line": 1749, "action": {"type": "invoke", "field": "f32.no_fold_add_divs", "args": [{"type": "f32", "value": "1136439096"}, {"type": "f32", "value": "3173274359"}, {"type": "f32", "value": "4274852390"}]}, "expected": [{"type": "f32", "value": "2221638875"}]}, 
  {"type": "assert_return", "line": 1750, "action": {"type": "invoke", "field": "f32.no_fold_add_divs", "args": [{"type": "f32", "value": "2690073844"}, {"type": "f32", "value": "2809448479"}, {"type": "f32", "value": "3608905030"}]}, "expected": [{"type": "f32", "value": "264862203"}]}, 
  {"type": "assert_return", "line": 1751, "action": {"type": "invoke", "field": "f32.no_fold_add_divs", "args": [{"type": "f32", "value": "2830184964"}, {"type": "f32", "value": "530019033"}, {"type": "f32", "value": "3623253973"}]}, "expected": [{"type": "f32", "value": "272108594"}]}, 
  {"type": "assert_return", "line": 1752, "action": {"type": "invoke", "field": "f32.no_fold_add_divs", "args": [{"type": "f32", "value": "2365787800"}, {"type": "f32", "value": "245111369"}, {"type": "f32", "value": "3952003433"}]}, "expected": [{"type": "f32", "value": "0"}]}, 
  {"type": "assert_return", "line": 1753, "action": {"type": "invoke", "field": "f32.no_fold_add_divs", "args": [{"type": "f32", "value": "982471119"}, {"type": "f32", "value": "1045692415"}, {"type": "f32", "value": "37216954"}]}, "expected": [{"type": "f32", "value": "2073319791"}]}, 
  {"type": "assert_return", "line": 1755, "action": {"type": "invoke", "field": "f64.no_fold_add_divs", "args": [{"type": "f64", "value": "15770585325769044278"}, {"type": "f64", "value": "6564157675451289455"}, {"type": "f64", "value": "8712254759989822359"}]}, "expected": [{"type": "f64", "value": "2458462832069881218"}]}, 
  {"type": "assert_return", "line": 1756, "action": {"type": "invoke", "field": "f64.no_fold_add_divs", "args": [{"type": "f64", "value": "14069844870254671283"}, {"type": "f64", "value": "4634122757084803708"}, {"type": "f64", "value": "9524897388132352235"}]}, "expected": [{"type": "f64", "value": "9152039358940941283"}]}, 
  {"type": "assert_return", "line": 1757, "action": {"type": "invoke", "field": "f64.no_fold_add_divs", "args": [{"type": "f64", "value": "9479648703296052622"}, {"type": "f64", "value": "214573661502224386"}, {"type": "f64", "value": "6877551490107761946"}]}, "expected": [{"type": "f64", "value": "0"}]}, 
  {"type": "assert_return", "line": 1758, "action": {"type": "invoke", "field": "f64.no_fold_add_divs", "args": [{"type": "f64", "value": "6019502660029506228"}, {"type": "f64", "value": "15316513033818836241"}, {"type": "f64", "value": "4039967192182502935"}]}, "expected": [{"type": "f64", "value": "15883525310425977300"}]}, 
  {"type": "assert_return", "line": 1759, "action": {"type": "invoke", "field": "f64.no_fold_add_divs", "args": [{"type": "f64", "value": "10555667216821129841"}, {"type": "f64", "value": "1207418919037494573"}, {"type": "f64", "value": "4296330408727545598"}]}, "expected": [{"type": "f64", "value": "10866511466898347555"}]}, 
  {"type": "module", "line": 1763, "filename": "float_exprs.71.wasm"}, 
  {"type": "assert_return", "line": 1771, "action": {"type": "invoke", "field": "f32.no_fold_sqrt_square", "args": [{"type": "f32", "value": "2662226315"}]}, "expected": [{"type": "f32", "value": "514742673"}]}, 
  {"type": "assert_return", "line": 1772, "action": {"type": "invoke", "field": "f32.no_fold_sqrt_square", "args": [{"type": "f32", "value": "2606267634"}]}, "expected": [{"type": "f32", "value": "458819801"}]}, 
  {"type": "assert_return", "line": 1773, "action": {"type": "invoke", "field": "f32.no_fold_sqrt_square", "args": [{"type": "f32", "value": "2624528574"}]}, "expected": [{"type": "f32", "value": "477049564"}]}, 
  {"type": "assert_return", "line": 1774, "action": {"type": "invoke", "field": "f32.no_fold_sqrt_square", "args": [{"type": "f32", "value": "347235385"}]}, "expected": [{"type": "f32", "value": "0"}]}, 
  {"type": "assert_return", "line": 1775, "action": {"type": "invoke", "field": "f32.no_fold_sqrt_square", "args": [{"type": "f32", "value": "1978715378"}]}, "expected": [{"type": "f32", "value": "2139095040"}]}, 
  {"type": "assert_return", "line": 1777, "action": {"type": "invoke", "field": "f64.no_fold_sqrt_square", "args": [{"type": "f64", "value": "2225189009770021885"}]}, "expected": [{"type": "f64", "value": "2225189011649283571"}]}, 
  {"type": "assert_return", "line": 1778, "action": {"type": "invoke", "field": "f64.no_fold_sqrt_square", "args": [{"type": "f64", "value": "11517048459773840771"}]}, "expected": [{"type": "f64", "value": "2293676422919064961"}]}, 
  {"type": "assert_return", "line": 1779, "action": {"type": "invoke", "field": "f64.no_fold_sqrt_square", "args": [{"type": "f64", "value": "11484764485761855006"}]}, "expected": [{"type": "f64", "value": "2261392448906973069"}]}, 
  {"type": "assert_return", "line": 1780, "action": {"type": "invoke", "field": "f64.no_fold_sqrt_square", "args": [{"type": "f64", "value": "11056484744549647728"}]}, "expected": [{"type": "f64", "value": "0"}]}, 
  {"type": "assert_return", "line": 1781, "action": {"type": "invoke", "field": "f64.no_fold_sqrt_square", "args": [{"type": "f64", "value": "8465406758332488378"}]}, "expected": [{"type": "f64", "value": "9218868437227405312"}]}, 
  {"type": "module", "line": 1785, "filename": "float_exprs.72.wasm"}, 
  {"type": "assert_return", "line": 1793, "action": {"type": "invoke", "field": "f32.no_fold_mul_sqrts", "args": [{"type": "f32", "value": "24047316"}, {"type": "f32", "value": "2517821717"}]}, "expected": [{"type": "f32", "value": "nan:canonical"}]}, 
  {"type": "assert_return", "line": 1794, "action": {"type": "invoke", "field": "f32.no_fold_mul_sqrts", "args": [{"type": "f32", "value": "295749258"}, {"type": "f32", "value": "803416494"}]}, "expected": [{"type": "f32", "value": "549395357"}]}, 
  {"type": "assert_return", "line": 1795, "action": {"type": "invoke", "field": "f32.no_fold_mul_sqrts", "args": [{"type": "f32", "value": "329708528"}, {"type": "f32", "value": "1120042892"}]}, "expected": [{"type": "f32", "value": "724841268"}]}, 
  {"type": "assert_return", "line": 1796, "action": {"type": "invoke", "field": "f32.no_fold_mul_sqrts", "args": [{"type": "f32", "value": "1916535951"}, {"type": "f32", "value": "994115420"}]}, "expected": [{"type": "f32", "value": "1455324620"}]}, 
  {"type": "assert_return", "line": 1797, "action": {"type": "invoke", "field": "f32.no_fold_mul_sqrts", "args": [{"type": "f32", "value": "598482176"}, {"type": "f32", "value": "990534933"}]}, "expected": [{"type": "f32", "value": "794443079"}]}, 
  {"type": "assert_return", "line": 1799, "action": {"type": "invoke", "field": "f64.no_fold_mul_sqrts", "args": [{"type": "f64", "value": "10974446854152441278"}, {"type": "f64", "value": "13797896470155574122"}]}, "expected": [{"type": "f64", "value": "nan:canonical"}]}, 
  {"type": "assert_return", "line": 1800, "action": {"type": "invoke", "field": "f64.no_fold_mul_sqrts", "args": [{"type": "f64", "value": "1712959863583927241"}, {"type": "f64", "value": "2792003944717853898"}]}, "expected": [{"type": "f64", "value": "2252469008297979510"}]}, 
  {"type": "assert_return", "line": 1801, "action": {"type": "invoke", "field": "f64.no_fold_mul_sqrts", "args": [{"type": "f64", "value": "4208351758938831157"}, {"type": "f64", "value": "497361189565243603"}]}, "expected": [{"type": "f64", "value": "2352856462697312748"}]}, 
  {"type": "assert_return", "line": 1802, "action": {"type": "invoke", "field": "f64.no_fold_mul_sqrts", "args": [{"type": "f64", "value": "2976792199849816182"}, {"type": "f64", "value": "2030444188042608984"}]}, "expected": [{"type": "f64", "value": "2503613111125550255"}]}, 
  {"type": "assert_return", "line": 1803, "action": {"type": "invoke", "field": "f64.no_fold_mul_sqrts", "args": [{"type": "f64", "value": "4717634334691577101"}, {"type": "f64", "value": "6919598687070693285"}]}, "expected": [{"type": "f64", "value": "5818898567902921651"}]}, 
  {"type": "module", "line": 1807, "filename": "float_exprs.73.wasm"}, 
  {"type": "assert_return", "line": 1815, "action": {"type": "invoke", "field": "f32.no_fold_div_sqrts", "args": [{"type": "f32", "value": "3428799709"}, {"type": "f32", "value": "2733489079"}]}, "expected": [{"type": "f32", "value": "nan:canonical"}]}, 
  {"type": "assert_return", "line": 1816, "action": {"type": "invoke", "field": "f32.no_fold_div_sqrts", "args": [{"type": "f32", "value": "1339867611"}, {"type": "f32", "value": "1296568207"}]}, "expected": [{"type": "f32", "value": "1086203643"}]}, 
  {"type": "assert_return", "line": 1817, "action": {"type": "invoke", "field": "f32.no_fold_div_sqrts", "args": [{"type": "f32", "value": "65679161"}, {"type": "f32", "value": "1196795110"}]}, "expected": [{"type": "f32", "value": "498959746"}]}, 
  {"type": "assert_return", "line": 1818, "action": {"type": "invoke", "field": "f32.no_fold_div_sqrts", "args": [{"type": "f32", "value": "1566143010"}, {"type": "f32", "value": "816694667"}]}, "expected": [{"type": "f32", "value": "1439333972"}]}, 
  {"type": "assert_return", "line": 1819, "action": {"type": "invoke", "field": "f32.no_fold_div_sqrts", "args": [{"type": "f32", "value": "130133331"}, {"type": "f32", "value": "208189588"}]}, "expected": [{"type": "f32", "value": "1025844032"}]}, 
  {"type": "assert_return", "line": 1821, "action": {"type": "invoke", "field": "f64.no_fold_div_sqrts", "args": [{"type": "f64", "value": "10629913473787695463"}, {"type": "f64", "value": "12991130264919696663"}]}, "expected": [{"type": "f64", "value": "nan:canonical"}]}, 
  {"type": "assert_return", "line": 1822, "action": {"type": "invoke", "field": "f64.no_fold_div_sqrts", "args": [{"type": "f64", "value": "1966780663211935584"}, {"type": "f64", "value": "7043916066229883379"}]}, "expected": [{"type": "f64", "value": "2068364230648818889"}]}, 
  {"type": "assert_return", "line": 1823, "action": {"type": "invoke", "field": "f64.no_fold_div_sqrts", "args": [{"type": "f64", "value": "6965599900716272009"}, {"type": "f64", "value": "4118781927977980600"}]}, "expected": [{"type": "f64", "value": "6030491425828883991"}]}, 
  {"type": "assert_return", "line": 1824, "action": {"type": "invoke", "field": "f64.no_fold_div_sqrts", "args": [{"type": "f64", "value": "962551478168675351"}, {"type": "f64", "value": "5918292176617055751"}]}, "expected": [{"type": "f64", "value": "2129092583060403799"}]}, 
  {"type": "assert_return", "line": 1825, "action": {"type": "invoke", "field": "f64.no_fold_div_sqrts", "args": [{"type": "f64", "value": "1056821405580891413"}, {"type": "f64", "value": "8865548665903786673"}]}, "expected": [{"type": "f64", "value": "702724841785532050"}]}, 
  {"type": "module", "line": 1829, "filename": "float_exprs.74.wasm"}, 
  {"type": "assert_return", "line": 1837, "action": {"type": "invoke", "field": "f32.no_fold_mul_sqrt_div", "args": [{"type": "f32", "value": "3900330981"}, {"type": "f32", "value": "1843416431"}]}, "expected": [{"type": "f32", "value": "4286578688"}]}, 
  {"type": "assert_return", "line": 1838, "action": {"type": "invoke", "field": "f32.no_fold_mul_sqrt_div", "args": [{"type": "f32", "value": "2210946958"}, {"type": "f32", "value": "256302916"}]}, "expected": [{"type": "f32", "value": "2147483648"}]}, 
  {"type": "assert_return", "line": 1839, "action": {"type": "invoke", "field": "f32.no_fold_mul_sqrt_div", "args": [{"type": "f32", "value": "1312995444"}, {"type": "f32", "value": "2371494"}]}, "expected": [{"type": "f32", "value": "1849105549"}]}, 
  {"type": "assert_return", "line": 1840, "action": {"type": "invoke", "field": "f32.no_fold_mul_sqrt_div", "args": [{"type": "f32", "value": "3576537897"}, {"type": "f32", "value": "2010442638"}]}, "expected": [{"type": "f32", "value": "3104219421"}]}, 
  {"type": "assert_return", "line": 1841, "action": {"type": "invoke", "field": "f32.no_fold_mul_sqrt_div", "args": [{"type": "f32", "value": "3284697858"}, {"type": "f32", "value": "1124488329"}]}, "expected": [{"type": "f32", "value": "3255461622"}]}, 
  {"type": "assert_return", "line": 1843, "action": {"type": "invoke", "field": "f64.no_fold_mul_sqrt_div", "args": [{"type": "f64", "value": "7751219282814906463"}, {"type": "f64", "value": "8023732701704228537"}]}, "expected": [{"type": "f64", "value": "9218868437227405312"}]}, 
  {"type": "assert_return", "line": 1844, "action": {"type": "invoke", "field": "f64.no_fold_mul_sqrt_div", "args": [{"type": "f64", "value": "10108528314069607083"}, {"type": "f64", "value": "1595930056995453707"}]}, "expected": [{"type": "f64", "value": "9223372036854775808"}]}, 
  {"type": "assert_return", "line": 1845, "action": {"type": "invoke", "field": "f64.no_fold_mul_sqrt_div", "args": [{"type": "f64", "value": "2695209648295623224"}, {"type": "f64", "value": "7133480874314061811"}]}, "expected": [{"type": "f64", "value": "1432338140829931582"}]}, 
  {"type": "assert_return", "line": 1846, "action": {"type": "invoke", "field": "f64.no_fold_mul_sqrt_div", "args": [{"type": "f64", "value": "15416524255949334213"}, {"type": "f64", "value": "2434442666062773630"}]}, "expected": [{"type": "f64", "value": "16502590179898118478"}]}, 
  {"type": "assert_return", "line": 1847, "action": {"type": "invoke", "field": "f64.no_fold_mul_sqrt_div", "args": [{"type": "f64", "value": "5076901024782455083"}, {"type": "f64", "value": "8399438310541178654"}]}, "expected": [{"type": "f64", "value": "3180744754328846996"}]}, 
  {"type": "module", "line": 1852, "filename": "float_exprs.75.wasm"}, 
  {"type": "assert_return", "line": 1860, "action": {"type": "invoke", "field": "f32.no_flush_intermediate_subnormal", "args": [{"type": "f32", "value": "8388608"}, {"type": "f32", "value": "872415232"}, {"type": "f32", "value": "1258291200"}]}, "expected": [{"type": "f32", "value": "8388608"}]}, 
  {"type": "assert_return", "line": 1861, "action": {"type": "invoke", "field": "f64.no_flush_intermediate_subnormal", "args": [{"type": "f64", "value": "4503599627370496"}, {"type": "f64", "value": "4372995238176751616"}, {"type": "f64", "value": "4841369599423283200"}]}, "expected": [{"type": "f64", "value": "4503599627370496"}]}, 
  {"type": "module", "line": 1866, "filename": "float_exprs.76.wasm"}, 
  {"type": "assert_return", "line": 1889, "action": {"type": "invoke", "field": "f32.recoding_eq", "args": [{"type": "f32", "value": "4286578688"}, {"type": "f32", "value": "1077936128"}]}, "expected": [{"type": "i32", "value": "1"}]}, 
  {"type": "assert_return", "line": 1890, "action": {"type": "invoke", "field": "f32.recoding_le", "args": [{"type": "f32", "value": "4286578688"}, {"type": "f32", "value": "1077936128"}]}, "expected": [{"type": "i32", "value": "1"}]}, 
  {"type": "assert_return", "line": 1891, "action": {"type": "invoke", "field": "f32.recoding_lt", "args": [{"type": "f32", "value": "4286578688"}, {"type": "f32", "value": "1077936128"}]}, "expected": [{"type": "i32", "value": "0"}]}, 
  {"type": "assert_return", "line": 1893, "action": {"type": "invoke", "field": "f32.recoding_eq", "args": [{"type": "f32", "value": "0"}, {"type": "f32", "value": "1065353216"}]}, "expected": [{"type": "i32", "value": "1"}]}, 
  {"type": "assert_return", "line": 1894, "action": {"type": "invoke", "field": "f32.recoding_le", "args": [{"type": "f32", "value": "0"}, {"type": "f32", "value": "1065353216"}]}, "expected": [{"type": "i32", "value": "1"}]}, 
  {"type": "assert_return", "line": 1895, "action": {"type": "invoke", "field": "f32.recoding_lt", "args": [{"type": "f32", "value": "0"}, {"type": "f32", "value": "1065353216"}]}, "expected": [{"type": "i32", "value": "0"}]}, 
  {"type": "assert_return", "line": 1897, "action": {"type": "invoke", "field": "f64.recoding_eq", "args": [{"type": "f64", "value": "18442240474082181120"}, {"type": "f64", "value": "4613937818241073152"}]}, "expected": [{"type": "i32", "value": "1"}]}, 
  {"type": "assert_return", "line": 1898, "action": {"type": "invoke", "field": "f64.recoding_le", "args": [{"type": "f64", "value": "18442240474082181120"}, {"type": "f64", "value": "4613937818241073152"}]}, "expected": [{"type": "i32", "value": "1"}]}, 
  {"type": "assert_return", "line": 1899, "action": {"type": "invoke", "field": "f64.recoding_lt", "args": [{"type": "f64", "value": "18442240474082181120"}, {"type": "f64", "value": "4613937818241073152"}]}, "expected": [{"type": "i32", "value": "0"}]}, 
  {"type": "assert_return", "line": 1901, "action": {"type": "invoke", "field": "f64.recoding_eq", "args": [{"type": "f64", "value": "0"}, {"type": "f64", "value": "4607182418800017408"}]}, "expected": [{"type": "i32", "value": "1"}]}, 
  {"type": "assert_return", "line": 1902, "action": {"type": "invoke", "field": "f64.recoding_le", "args": [{"type": "f64", "value": "0"}, {"type": "f64", "value": "4607182418800017408"}]}, "expected": [{"type": "i32", "value": "1"}]}, 
  {"type": "assert_return", "line": 1903, "action": {"type": "invoke", "field": "f64.recoding_lt", "args": [{"type": "f64", "value": "0"}, {"type": "f64", "value": "4607182418800017408"}]}, "expected": [{"type": "i32", "value": "0"}]}, 
  {"type": "assert_return", "line": 1905, "action": {"type": "invoke", "field": "recoding_demote", "args": [{"type": "f64", "value": "4014054135371399168"}, {"type": "f32", "value": "1150853120"}]}, "expected": [{"type": "f32", "value": "46548238"}]}, 
  {"type": "module", "line": 1910, "filename": "float_exprs.77.wasm"}, 
  {"type": "assert_return", "line": 1918, "action": {"type": "invoke", "field": "f32.no_extended_precision_div", "args": [{"type": "f32", "value": "1077936128"}, {"type": "f32", "value": "1088421888"}, {"type": "f32", "value": "1054567863"}]}, "expected": [{"type": "i32", "value": "1"}]}, 
  {"type": "assert_return", "line": 1919, "action": {"type": "invoke", "field": "f64.no_extended_precision_div", "args": [{"type": "f64", "value": "4613937818241073152"}, {"type": "f64", "value": "4619567317775286272"}, {"type": "f64", "value": "4601392076421969627"}]}, "expected": [{"type": "i32", "value": "1"}]}, 
  {"type": "module", "line": 1926, "filename": "float_exprs.78.wasm"}, 
  {"type": "assert_return", "line": 1934, "action": {"type": "invoke", "field": "f32.no_distribute_exact", "args": [{"type": "f32", "value": "2147483648"}]}, "expected": [{"type": "f32", "value": "0"}]}, 
  {"type": "assert_return", "line": 1935, "action": {"type": "invoke", "field": "f64.no_distribute_exact", "args": [{"type": "f64", "value": "9223372036854775808"}]}, "expected": [{"type": "f64", "value": "0"}]}, 
  {"type": "module", "line": 1940, "filename": "float_exprs.79.wasm"}, 
  {"type": "assert_return", "line": 1972, "action": {"type": "invoke", "field": "f32.sqrt", "args": [{"type": "f32", "value": "1073741824"}]}, "expected": [{"type": "f32", "value": "1068827891"}]}, 
  {"type": "assert_return", "line": 1973, "action": {"type": "invoke", "field": "f32.xkcd_sqrt_2", "args": [{"type": "f32", "value": "1077936128"}, {"type": "f32", "value": "1084227584"}, {"type": "f32", "value": "1078530011"}, {"type": "f32", "value": "1088421888"}]}, "expected": [{"type": "f32", "value": "1068827946"}]}, 
  {"type": "assert_return", "line": 1974, "action": {"type": "invoke", "field": "f32.sqrt", "args": [{"type": "f32", "value": "1077936128"}]}, "expected": [{"type": "f32", "value": "1071494103"}]}, 
  {"type": "assert_return", "line": 1975, "action": {"type": "invoke", "field": "f32.xkcd_sqrt_3", "args": [{"type": "f32", "value": "1073741824"}, {"type": "f32", "value": "1076754516"}, {"type": "f32", "value": "1078530011"}]}, "expected": [{"type": "f32", "value": "1071481194"}]}, 
  {"type": "assert_return", "line": 1976, "action": {"type": "invoke", "field": "f32.sqrt", "args": [{"type": "f32", "value": "1084227584"}]}, "expected": [{"type": "f32", "value": "1074731965"}]}, 
  {"type": "assert_return", "line": 1977, "action": {"type": "invoke", "field": "f32.xkcd_sqrt_5", "args": [{"type": "f32", "value": "1073741824"}, {"type": "f32", "value": "1076754516"}, {"type": "f32", "value": "1077936128"}]}, "expected": [{"type": "f32", "value": "1074730668"}]}, 
  {"type": "assert_return", "line": 1978, "action": {"type": "invoke", "field": "f32.xkcd_better_sqrt_5", "args": [{"type": "f32", "value": "1095761920"}, {"type": "f32", "value": "1082130432"}, {"type": "f32", "value": "1078530011"}, {"type": "f32", "value": "1103101952"}]}, "expected": [{"type": "f32", "value": "1074731965"}]}, 
  {"type": "assert_return", "line": 1980, "action": {"type": "invoke", "field": "f64.sqrt", "args": [{"type": "f64", "value": "4611686018427387904"}]}, "expected": [{"type": "f64", "value": "4609047870845172685"}]}, 
  {"type": "assert_return", "line": 1981, "action": {"type": "invoke", "field": "f64.xkcd_sqrt_2", "args": [{"type": "f64", "value": "4613937818241073152"}, {"type": "f64", "value": "4617315517961601024"}, {"type": "f64", "value": "4614256656552045848"}, {"type": "f64", "value": "4619567317775286272"}]}, "expected": [{"type": "f64", "value": "4609047900099118431"}]}, 
  {"type": "assert_return", "line": 1982, "action": {"type": "invoke", "field": "f64.sqrt", "args": [{"type": "f64", "value": "4613937818241073152"}]}, "expected": [{"type": "f64", "value": "4610479282544200874"}]}, 
  {"type": "assert_return", "line": 1983, "action": {"type": "invoke", "field": "f64.xkcd_sqrt_3", "args": [{"type": "f64", "value": "4611686018427387904"}, {"type": "f64", "value": "4613303445314885481"}, {"type": "f64", "value": "4614256656552045848"}]}, "expected": [{"type": "f64", "value": "4610472352185749397"}]}, 
  {"type": "assert_return", "line": 1984, "action": {"type": "invoke", "field": "f64.sqrt", "args": [{"type": "f64", "value": "4617315517961601024"}]}, "expected": [{"type": "f64", "value": "4612217596255138984"}]}, 
  {"type": "assert_return", "line": 1985, "action": {"type": "invoke", "field": "f64.xkcd_sqrt_5", "args": [{"type": "f64", "value": "4611686018427387904"}, {"type": "f64", "value": "4613303445314885481"}, {"type": "f64", "value": "4613937818241073152"}]}, "expected": [{"type": "f64", "value": "4612216900234722254"}]}, 
  {"type": "assert_return", "line": 1986, "action": {"type": "invoke", "field": "f64.xkcd_better_sqrt_5", "args": [{"type": "f64", "value": "4623507967449235456"}, {"type": "f64", "value": "4616189618054758400"}, {"type": "f64", "value": "4614256656552045848"}, {"type": "f64", "value": "4627448617123184640"}]}, "expected": [{"type": "f64", "value": "4612217595876713891"}]}, 
  {"type": "module", "line": 1991, "filename": "float_exprs.80.wasm"}, 
  {"type": "assert_return", "line": 2069, "action": {"type": "invoke", "field": "f32.compute_radix", "args": [{"type": "f32", "value": "1065353216"}, {"type": "f32", "value": "1065353216"}]}, "expected": [{"type": "f32", "value": "1073741824"}]}, 
  {"type": "assert_return", "line": 2070, "action": {"type": "invoke", "field": "f64.compute_radix", "args": [{"type": "f64", "value": "4607182418800017408"}, {"type": "f64", "value": "4607182418800017408"}]}, "expected": [{"type": "f64", "value": "4611686018427387904"}]}, 
  {"type": "module", "line": 2075, "filename": "float_exprs.81.wasm"}, 
  {"type": "assert_return", "line": 2083, "action": {"type": "invoke", "field": "f32.no_fold_sub1_mul_add", "args": [{"type": "f32", "value": "796917760"}, {"type": "f32", "value": "1065353216"}]}, "expected": [{"type": "f32", "value": "0"}]}, 
  {"type": "assert_return", "line": 2084, "action": {"type": "invoke", "field": "f64.no_fold_sub1_mul_add", "args": [{"type": "f64", "value": "4318952042648305664"}, {"type": "f64", "value": "4607182418800017408"}]}, "expected": [{"type": "f64", "value": "0"}]}, 
  {"type": "module", "line": 2089, "filename": "float_exprs.82.wasm"}, 
  {"type": "assert_return", "line": 2103, "action": {"type": "invoke", "field": "f32.no_fold_add_le_monotonicity", "args": [{"type": "f32", "value": "0"}, {"type": "f32", "value": "0"}, {"type": "f32", "value": "2143289344"}]}, "expected": [{"type": "i32", "value": "0"}]}, 
  {"type": "assert_return", "line": 2104, "action": {"type": "invoke", "field": "f32.no_fold_add_le_monotonicity", "args": [{"type": "f32", "value": "2139095040"}, {"type": "f32", "value": "4286578688"}, {"type": "f32", "value": "2139095040"}]}, "expected": [{"type": "i32", "value": "0"}]}, 
  {"type": "assert_return", "line": 2105, "action": {"type": "invoke", "field": "f64.no_fold_add_le_monotonicity", "args": [{"type": "f64", "value": "0"}, {"type": "f64", "value": "0"}, {"type": "f64", "value": "9221120237041090560"}]}, "expected": [{"type": "i32", "value": "0"}]}, 
  {"type": "assert_return", "line": 2106, "action": {"type": "invoke", "field": "f64.no_fold_add_le_monotonicity", "args": [{"type": "f64", "value": "9218868437227405312"}, {"type": "f64", "value": "18442240474082181120"}, {"type": "f64", "value": "9218868437227405312"}]}, "expected": [{"type": "i32", "value": "0"}]}, 
  {"type": "module", "line": 2110, "filename": "float_exprs.83.wasm"}, 
  {"type": "assert_return", "line": 2136, "action": {"type": "invoke", "field": "f32.not_lt", "args": [{"type": "f32", "value": "2143289344"}, {"type": "f32", "value": "0"}]}, "expected": [{"type": "i32", "value": "1"}]}, 
  {"type": "assert_return", "line": 2137, "action": {"type": "invoke", "field": "f32.not_le", "args": [{"type": "f32", "value": "2143289344"}, {"type": "f32", "value": "0"}]}, "expected": [{"type": "i32", "value": "1"}]}, 
  {"type": "assert_return", "line": 2138, "action": {"type": "invoke", "field": "f32.not_gt", "args": [{"type": "f32", "value": "2143289344"}, {"type": "f32", "value": "0"}]}, "expected": [{"type": "i32", "value": "1"}]}, 
  {"type": "assert_return", "line": 2139, "action": {"type": "invoke", "field": "f32.not_ge", "args": [{"type": "f32", "value": "2143289344"}, {"type": "f32", "value": "0"}]}, "expected": [{"type": "i32", "value": "1"}]}, 
  {"type": "assert_return", "line": 2140, "action": {"type": "invoke", "field": "f64.not_lt", "args": [{"type": "f64", "value": "9221120237041090560"}, {"type": "f64", "value": "0"}]}, "expected": [{"type": "i32", "value": "1"}]}, 
  {"type": "assert_return", "line": 2141, "action": {"type": "invoke", "field": "f64.not_le", "args": [{"type": "f64", "value": "9221120237041090560"}, {"type": "f64", "value": "0"}]}, "expected": [{"type": "i32", "value": "1"}]}, 
  {"type": "assert_return", "line": 2142, "action": {"type": "invoke", "field": "f64.not_gt", "args": [{"type": "f64", "value": "9221120237041090560"}, {"type": "f64", "value": "0"}]}, "expected": [{"type": "i32", "value": "1"}]}, 
  {"type": "assert_return", "line": 2143, "action": {"type": "invoke", "field": "f64.not_ge", "args": [{"type": "f64", "value": "9221120237041090560"}, {"type": "f64", "value": "0"}]}, "expected": [{"type": "i32", "value": "1"}]}, 
  {"type": "module", "line": 2149, "filename": "float_exprs.84.wasm"}, 
  {"type": "assert_return", "line": 2157, "action": {"type": "invoke", "field": "f32.epsilon", "args": []}, "expected": [{"type": "f32", "value": "3019898880"}]}, 
  {"type": "assert_return", "line": 2158, "action": {"type": "invoke", "field": "f64.epsilon", "args": []}, "expected": [{"type": "f64", "value": "4372995238176751616"}]}, 
  {"type": "module", "line": 2164, "filename": "float_exprs.85.wasm"}, 
  {"type": "assert_return", "line": 2212, "action": {"type": "invoke", "field": "f32.epsilon", "args": []}, "expected": [{"type": "f32", "value": "872415232"}]}, 
  {"type": "assert_return", "line": 2213, "action": {"type": "invoke", "field": "f64.epsilon", "args": []}, "expected": [{"type": "f64", "value": "4372995238176751616"}]}, 
  {"type": "module", "line": 2218, "filename": "float_exprs.86.wasm"}, 
  {"type": "assert_return", "line": 2238, "action": {"type": "invoke", "field": "f32.no_trichotomy_lt", "args": [{"type": "f32", "value": "0"}, {"type": "f32", "value": "2143289344"}]}, "expected": [{"type": "i32", "value": "0"}]}, 
  {"type": "assert_return", "line": 2239, "action": {"type": "invoke", "field": "f32.no_trichotomy_le", "args": [{"type": "f32", "value": "0"}, {"type": "f32", "value": "2143289344"}]}, "expected": [{"type": "i32", "value": "0"}]}, 
  {"type": "assert_return", "line": 2240, "action": {"type": "invoke", "field": "f32.no_trichotomy_gt", "args": [{"type": "f32", "value": "0"}, {"type": "f32", "value": "2143289344"}]}, "expected": [{"type": "i32", "value": "0"}]}, 
  {"type": "assert_return", "line": 2241, "action": {"type": "invoke", "field": "f32.no_trichotomy_ge", "args": [{"type": "f32", "value": "0"}, {"type": "f32", "value": "2143289344"}]}, "expected": [{"type": "i32", "value": "0"}]}, 
  {"type": "assert_return", "line": 2242, "action": {"type": "invoke", "field": "f64.no_trichotomy_lt", "args": [{"type": "f64", "value": "0"}, {"type": "f64", "value": "9221120237041090560"}]}, "expected": [{"type": "i32", "value": "0"}]}, 
  {"type": "assert_return", "line": 2243, "action": {"type": "invoke", "field": "f64.no_trichotomy_le", "args": [{"type": "f64", "value": "0"}, {"type": "f64", "value": "9221120237041090560"}]}, "expected": [{"type": "i32", "value": "0"}]}, 
  {"type": "assert_return", "line": 2244, "action": {"type": "invoke", "field": "f64.no_trichotomy_gt", "args": [{"type": "f64", "value": "0"}, {"type": "f64", "value": "9221120237041090560"}]}, "expected": [{"type": "i32", "value": "0"}]}, 
  {"type": "assert_return", "line": 2245, "action": {"type": "invoke", "field": "f64.no_trichotomy_ge", "args": [{"type": "f64", "value": "0"}, {"type": "f64", "value": "9221120237041090560"}]}, "expected": [{"type": "i32", "value": "0"}]}, 
  {"type": "module", "line": 2250, "filename": "float_exprs.87.wasm"}, 
  {"type": "assert_return", "line": 2329, "action": {"type": "invoke", "field": "f32.arithmetic_nan_bitpattern", "args": [{"type": "i32", "value": "2139107856"}, {"type": "i32", "value": "2139107856"}]}, "expected": [{"type": "i32", "value": "2143289344"}]}, 
  {"type": "assert_return", "line": 2330, "action": {"type": "invoke", "field": "f32.canonical_nan_bitpattern", "args": [{"type": "i32", "value": "0"}, {"type": "i32", "value": "0"}]}, "expected": [{"type": "i32", "value": "2143289344"}]}, 
  {"type": "assert_return", "line": 2331, "action": {"type": "invoke", "field": "f32.canonical_nan_bitpattern", "args": [{"type": "i32", "value": "2143289344"}, {"type": "i32", "value": "2143289344"}]}, "expected": [{"type": "i32", "value": "2143289344"}]}, 
  {"type": "assert_return", "line": 2332, "action": {"type": "invoke", "field": "f32.canonical_nan_bitpattern", "args": [{"type": "i32", "value": "4290772992"}, {"type": "i32", "value": "2143289344"}]}, "expected": [{"type": "i32", "value": "2143289344"}]}, 
  {"type": "assert_return", "line": 2333, "action": {"type": "invoke", "field": "f32.canonical_nan_bitpattern", "args": [{"type": "i32", "value": "2143289344"}, {"type": "i32", "value": "4290772992"}]}, "expected": [{"type": "i32", "value": "2143289344"}]}, 
  {"type": "assert_return", "line": 2334, "action": {"type": "invoke", "field": "f32.canonical_nan_bitpattern", "args": [{"type": "i32", "value": "4290772992"}, {"type": "i32", "value": "4290772992"}]}, "expected": [{"type": "i32", "value": "2143289344"}]}, 
  {"type": "assert_return", "line": 2335, "action": {"type": "invoke", "field": "f32.nonarithmetic_nan_bitpattern", "args": [{"type": "i32", "value": "2143302160"}]}, "expected": [{"type": "i32", "value": "4290785808"}]}, 
  {"type": "assert_return", "line": 2336, "action": {"type": "invoke", "field": "f32.nonarithmetic_nan_bitpattern", "args": [{"type": "i32", "value": "4290785808"}]}, "expected": [{"type": "i32", "value": "2143302160"}]}, 
  {"type": "assert_return", "line": 2337, "action": {"type": "invoke", "field": "f32.nonarithmetic_nan_bitpattern", "args": [{"type": "i32", "value": "2139107856"}]}, "expected": [{"type": "i32", "value": "4286591504"}]}, 
  {"type": "assert_return", "line": 2338, "action": {"type": "invoke", "field": "f32.nonarithmetic_nan_bitpattern", "args": [{"type": "i32", "value": "4286591504"}]}, "expected": [{"type": "i32", "value": "2139107856"}]}, 
  {"type": "assert_return", "line": 2339, "action": {"type": "invoke", "field": "f64.arithmetic_nan_bitpattern", "args": [{"type": "i64", "value": "9218868437227418128"}, {"type": "i64", "value": "9218868437227418128"}]}, "expected": [{"type": "i64", "value": "9221120237041090560"}]}, 
  {"type": "assert_return", "line": 2340, "action": {"type": "invoke", "field": "f64.canonical_nan_bitpattern", "args": [{"type": "i64", "value": "0"}, {"type": "i64", "value": "0"}]}, "expected": [{"type": "i64", "value": "9221120237041090560"}]}, 
  {"type": "assert_return", "line": 2341, "action": {"type": "invoke", "field": "f64.canonical_nan_bitpattern", "args": [{"type": "i64", "value": "9221120237041090560"}, {"type": "i64", "value": "9221120237041090560"}]}, "expected": [{"type": "i64", "value": "9221120237041090560"}]}, 
  {"type": "assert_return", "line": 2342, "action": {"type": "invoke", "field": "f64.canonical_nan_bitpattern", "args": [{"type": "i64", "value": "18444492273895866368"}, {"type": "i64", "value": "9221120237041090560"}]}, "expected": [{"type": "i64", "value": "9221120237041090560"}]}, 
  {"type": "assert_return", "line": 2343, "action": {"type": "invoke", "field": "f64.canonical_nan_bitpattern", "args": [{"type": "i64", "value": "9221120237041090560"}, {"type": "i64", "value": "18444492273895866368"}]}, "expected": [{"type": "i64", "value": "9221120237041090560"}]}, 
  {"type": "assert_return", "line": 2344, "action": {"type": "invoke", "field": "f64.canonical_nan_bitpattern", "args": [{"type": "i64", "value": "18444492273895866368"}, {"type": "i64", "value": "18444492273895866368"}]}, "expected": [{"type": "i64", "value": "9221120237041090560"}]}, 
  {"type": "assert_return", "line": 2345, "action": {"type": "invoke", "field": "f64.nonarithmetic_nan_bitpattern", "args": [{"type": "i64", "value": "9221120237041103376"}]}, "expected": [{"type": "i64", "value": "18444492273895879184"}]}, 
  {"type": "assert_return", "line": 2346, "action": {"type": "invoke", "field": "f64.nonarithmetic_nan_bitpattern", "args": [{"type": "i64", "value": "18444492273895879184"}]}, "expected": [{"type": "i64", "value": "9221120237041103376"}]}, 
  {"type": "assert_return", "line": 2347, "action": {"type": "invoke", "field": "f64.nonarithmetic_nan_bitpattern", "args": [{"type": "i64", "value": "9218868437227418128"}]}, "expected": [{"type": "i64", "value": "18442240474082193936"}]}, 
  {"type": "assert_return", "line": 2348, "action": {"type": "invoke", "field": "f64.nonarithmetic_nan_bitpattern", "args": [{"type": "i64", "value": "18442240474082193936"}]}, "expected": [{"type": "i64", "value": "9218868437227418128"}]}, 
  {"type": "assert_return", "line": 2349, "action": {"type": "invoke", "field": "f32.no_fold_sub_zero", "args": [{"type": "i32", "value": "2141192192"}]}, "expected": [{"type": "i32", "value": "2143289344"}]}, 
  {"type": "assert_return", "line": 2350, "action": {"type": "invoke", "field": "f32.no_fold_neg0_sub", "args": [{"type": "i32", "value": "2141192192"}]}, "expected": [{"type": "i32", "value": "2143289344"}]}, 
  {"type": "assert_return", "line": 2351, "action": {"type": "invoke", "field": "f32.no_fold_mul_one", "args": [{"type": "i32", "value": "2141192192"}]}, "expected": [{"type": "i32", "value": "2143289344"}]}, 
  {"type": "assert_return", "line": 2352, "action": {"type": "invoke", "field": "f32.no_fold_neg1_mul", "args": [{"type": "i32", "value": "2141192192"}]}, "expected": [{"type": "i32", "value": "2143289344"}]}, 
  {"type": "assert_return", "line": 2353, "action": {"type": "invoke", "field": "f32.no_fold_div_one", "args": [{"type": "i32", "value": "2141192192"}]}, "expected": [{"type": "i32", "value": "2143289344"}]}, 
  {"type": "assert_return", "line": 2354, "action": {"type": "invoke", "field": "f32.no_fold_div_neg1", "args": [{"type": "i32", "value": "2141192192"}]}, "expected": [{"type": "i32", "value": "2143289344"}]}, 
  {"type": "assert_return", "line": 2355, "action": {"type": "invoke", "field": "f64.no_fold_sub_zero", "args": [{"type": "i64", "value": "9219994337134247936"}]}, "expected": [{"type": "i64", "value": "9221120237041090560"}]}, 
  {"type": "assert_return", "line": 2356, "action": {"type": "invoke", "field": "f64.no_fold_neg0_sub", "args": [{"type": "i64", "value": "9219994337134247936"}]}, "expected": [{"type": "i64", "value": "9221120237041090560"}]}, 
  {"type": "assert_return", "line": 2357, "action": {"type": "invoke", "field": "f64.no_fold_mul_one", "args": [{"type": "i64", "value": "9219994337134247936"}]}, "expected": [{"type": "i64", "value": "9221120237041090560"}]}, 
  {"type": "assert_return", "line": 2358, "action": {"type": "invoke", "field": "f64.no_fold_neg1_mul", "args": [{"type": "i64", "value": "9219994337134247936"}]}, "expected": [{"type": "i64", "value": "9221120237041090560"}]}, 
  {"type": "assert_return", "line": 2359, "action": {"type": "invoke", "field": "f64.no_fold_div_one", "args": [{"type": "i64", "value": "9219994337134247936"}]}, "expected": [{"type": "i64", "value": "9221120237041090560"}]}, 
  {"type": "assert_return", "line": 2360, "action": {"type": "invoke", "field": "f64.no_fold_div_neg1", "args": [{"type": "i64", "value": "9219994337134247936"}]}, "expected": [{"type": "i64", "value": "9221120237041090560"}]}, 
  {"type": "assert_return", "line": 2361, "action": {"type": "invoke", "field": "no_fold_promote_demote", "args": [{"type": "i32", "value": "2141192192"}]}, "expected": [{"type": "i32", "value": "2143289344"}]}, 
  {"type": "module", "line": 2366, "filename": "float_exprs.88.wasm"}, 
  {"type": "assert_return", "line": 2389, "action": {"type": "invoke", "field": "dot_product_example", "args": [{"type": "f64", "value": "4719355144821538816"}, {"type": "f64", "value": "4607182418800017408"}, {"type": "f64", "value": "13830554455654793216"}, {"type": "f64", "value": "4725141118604279808"}, {"type": "f64", "value": "4720637518976909312"}, {"type": "f64", "value": "4607182418800017408"}, {"type": "f64", "value": "13830554455654793216"}, {"type": "f64", "value": "13938223582048944128"}]}, "expected": [{"type": "f64", "value": "4611686018427387904"}]}, 
  {"type": "assert_return", "line": 2393, "action": {"type": "invoke", "field": "with_binary_sum_collapse", "args": [{"type": "f64", "value": "4719355144821538816"}, {"type": "f64", "value": "4607182418800017408"}, {"type": "f64", "value": "13830554455654793216"}, {"type": "f64", "value": "4725141118604279808"}, {"type": "f64", "value": "4720637518976909312"}, {"type": "f64", "value": "4607182418800017408"}, {"type": "f64", "value": "13830554455654793216"}, {"type": "f64", "value": "13938223582048944128"}]}, "expected": [{"type": "f64", "value": "4611686018427387904"}]}, 
  {"type": "module", "line": 2400, "filename": "float_exprs.89.wasm"}, 
  {"type": "assert_return", "line": 2411, "action": {"type": "invoke", "field": "f32.contract2fma", "args": [{"type": "f32", "value": "1065353216"}, {"type": "f32", "value": "1065353216"}]}, "expected": [{"type": "f32", "value": "0"}]}, 
  {"type": "assert_return", "line": 2412, "action": {"type": "invoke", "field": "f32.contract2fma", "args": [{"type": "f32", "value": "1066192077"}, {"type": "f32", "value": "1066192077"}]}, "expected": [{"type": "f32", "value": "0"}]}, 
  {"type": "assert_return", "line": 2413, "action": {"type": "invoke", "field": "f32.contract2fma", "args": [{"type": "f32", "value": "1067030937"}, {"type": "f32", "value": "1067030937"}]}, "expected": [{"type": "f32", "value": "0"}]}, 
  {"type": "assert_return", "line": 2414, "action": {"type": "invoke", "field": "f64.contract2fma", "args": [{"type": "f64", "value": "4607182418800017408"}, {"type": "f64", "value": "4607182418800017408"}]}, "expected": [{"type": "f64", "value": "0"}]}, 
  {"type": "assert_return", "line": 2415, "action": {"type": "invoke", "field": "f64.contract2fma", "args": [{"type": "f64", "value": "4607632778762754458"}, {"type": "f64", "value": "4607632778762754458"}]}, "expected": [{"type": "f64", "value": "0"}]}, 
  {"type": "assert_return", "line": 2416, "action": {"type": "invoke", "field": "f64.contract2fma", "args": [{"type": "f64", "value": "4608083138725491507"}, {"type": "f64", "value": "4608083138725491507"}]}, "expected": [{"type": "f64", "value": "0"}]}, 
  {"type": "module", "line": 2421, "filename": "float_exprs.90.wasm"}, 
  {"type": "assert_return", "line": 2430, "action": {"type": "invoke", "field": "f32.division_by_small_number", "args": [{"type": "f32", "value": "1289068416"}, {"type": "f32", "value": "1203982336"}, {"type": "f32", "value": "980151802"}]}, "expected": [{"type": "f32", "value": "1230570368"}]}, 
  {"type": "assert_return", "line": 2431, "action": {"type": "invoke", "field": "f64.division_by_small_number", "args": [{"type": "f64", "value": "4727288602252279808"}, {"type": "f64", "value": "4681608360884174848"}, {"type": "f64", "value": "4561440258104740754"}]}, "expected": [{"type": "f64", "value": "4695882709507797376"}]}, 
  {"type": "module", "line": 2436, "filename": "float_exprs.91.wasm"}, 
  {"type": "assert_return", "line": 2443, "action": {"type": "invoke", "field": "f32.golden_ratio", "args": [{"type": "f32", "value": "1056964608"}, {"type": "f32", "value": "1065353216"}, {"type": "f32", "value": "1084227584"}]}, "expected": [{"type": "f32", "value": "1070537661"}]}, 
  {"type": "assert_return", "line": 2444, "action": {"type": "invoke", "field": "f64.golden_ratio", "args": [{"type": "f64", "value": "4602678819172646912"}, {"type": "f64", "value": "4607182418800017408"}, {"type": "f64", "value": "4617315517961601024"}]}, "expected": [{"type": "f64", "value": "4609965796441453736"}]}, 
  {"type": "module", "line": 2449, "filename": "float_exprs.92.wasm"}, 
  {"type": "assert_return", "line": 2462, "action": {"type": "invoke", "field": "f32.silver_means", "args": [{"type": "f32", "value": "0"}]}, "expected": [{"type": "f32", "value": "1065353216"}]}, 
  {"type": "assert_return", "line": 2463, "action": {"type": "invoke", "field": "f32.silver_means", "args": [{"type": "f32", "value": "1065353216"}]}, "expected": [{"type": "f32", "value": "1070537661"}]}, 
  {"type": "assert_return", "line": 2464, "action": {"type": "invoke", "field": "f32.silver_means", "args": [{"type": "f32", "value": "1073741824"}]}, "expected": [{"type": "f32", "value": "1075479162"}]}, 
  {"type": "assert_return", "line": 2465, "action": {"type": "invoke", "field": "f32.silver_means", "args": [{"type": "f32", "value": "1077936128"}]}, "expected": [{"type": "f32", "value": "1079206061"}]}, 
  {"type": "assert_return", "line": 2466, "action": {"type": "invoke", "field": "f32.silver_means", "args": [{"type": "f32", "value": "1082130432"}]}, "expected": [{"type": "f32", "value": "1082625502"}]}, 
  {"type": "assert_return", "line": 2467, "action": {"type": "invoke", "field": "f32.silver_means", "args": [{"type": "f32", "value": "1084227584"}]}, "expected": [{"type": "f32", "value": "1084631458"}]}, 
  {"type": "assert_return", "line": 2468, "action": {"type": "invoke", "field": "f64.silver_means", "args": [{"type": "f64", "value": "0"}]}, "expected": [{"type": "f64", "value": "4607182418800017408"}]}, 
  {"type": "assert_return", "line": 2469, "action": {"type": "invoke", "field": "f64.silver_means", "args": [{"type": "f64", "value": "4607182418800017408"}]}, "expected": [{"type": "f64", "value": "4609965796441453736"}]}, 
  {"type": "assert_return", "line": 2470, "action": {"type": "invoke", "field": "f64.silver_means", "args": [{"type": "f64", "value": "4611686018427387904"}]}, "expected": [{"type": "f64", "value": "4612618744449965542"}]}, 
  {"type": "assert_return", "line": 2471, "action": {"type": "invoke", "field": "f64.silver_means", "args": [{"type": "f64", "value": "4613937818241073152"}]}, "expected": [{"type": "f64", "value": "4614619608365706490"}]}, 
  {"type": "assert_return", "line": 2472, "action": {"type": "invoke", "field": "f64.silver_means", "args": [{"type": "f64", "value": "4616189618054758400"}]}, "expected": [{"type": "f64", "value": "4616455406968633940"}]}, 
  {"type": "assert_return", "line": 2473, "action": {"type": "invoke", "field": "f64.silver_means", "args": [{"type": "f64", "value": "4617315517961601024"}]}, "expected": [{"type": "f64", "value": "4617532346471836922"}]}, 
  {"type": "module", "line": 2478, "filename": "float_exprs.93.wasm"}, 
  {"type": "assert_return", "line": 2483, "action": {"type": "invoke", "field": "point_four", "args": [{"type": "f64", "value": "4616189618054758400"}, {"type": "f64", "value": "4621819117588971520"}]}, "expected": [{"type": "i32", "value": "0"}]}, 
  {"type": "module", "line": 2488, "filename": "float_exprs.94.wasm"}, 
  {"type": "assert_return", "line": 2553, "action": {"type": "invoke", "field": "tau", "args": [{"type": "i32", "value": "10"}]}, "expected": [{"type": "f64", "value": "4618760256179416340"}]}, 
  {"type": "assert_return", "line": 2554, "action": {"type": "invoke", "field": "tau", "args": [{"type": "i32", "value": "11"}]}, "expected": [{"type": "f64", "value": "4618760256179416344"}]}, 
  {"type": "module", "line": 2558, "filename": "float_exprs.95.wasm"}, 
  {"type": "assert_return", "line": 2569, "action": {"type": "invoke", "field": "f32.no_fold_conditional_inc", "args": [{"type": "f32", "value": "2147483648"}, {"type": "f32", "value": "3212836864"}]}, "expected": [{"type": "f32", "value": "2147483648"}]}, 
  {"type": "assert_return", "line": 2570, "action": {"type": "invoke", "field": "f64.no_fold_conditional_inc", "args": [{"type": "f64", "value": "9223372036854775808"}, {"type": "f64", "value": "13830554455654793216"}]}, "expected": [{"type": "f64", "value": "9223372036854775808"}]}]},
  "code": [
    "(module \n  (func (export \"f64.no_contraction\") (param $x f64) (param $y f64) (param $z f64) (result f64) (f64.add (f64.mul (local.get $x) (local.get $y)) (local.get $z))))",
    "(assert_return (invoke \"f64.no_contraction\" (f64.const -0x1.9e87ce14273afp-103) (f64.const 0x1.2515ad31db63ep+664) (f64.const 0x1.868c6685e6185p+533)) (f64.const -0x1.da94885b11493p+561))",
    "(assert_return (invoke \"f64.no_contraction\" (f64.const 0x1.da21c460a6f44p+52) (f64.const 0x1.60859d2e7714ap-321) (f64.const 0x1.e63f1b7b660e1p-302)) (f64.const 0x1.4672f256d1794p-268))",
    "(assert_return (invoke \"f64.no_contraction\" (f64.const -0x1.f3eaf43f327cp-594) (f64.const 0x1.dfcc009906b57p+533) (f64.const 0x1.5984e03c520a1p-104)) (f64.const -0x1.d4797fb3db166p-60))",
    "(assert_return (invoke \"f64.no_contraction\" (f64.const 0x1.dab6c772cb2e2p-69) (f64.const -0x1.d761663679a84p-101) (f64.const 0x1.f22f92c843226p-218)) (f64.const -0x1.b50d72dfcef68p-169))",
    "(assert_return (invoke \"f64.no_contraction\" (f64.const -0x1.87c5def1e4d3dp-950) (f64.const -0x1.50cd5dab2207fp+935) (f64.const 0x1.e629bd0da8c5dp-54)) (f64.const 0x1.01b6feb4e78a7p-14))",
    "(module \n  (func (export \"f32.no_fma\") (param $x f32) (param $y f32) (param $z f32) (result f32) (f32.add (f32.mul (local.get $x) (local.get $y)) (local.get $z)))\n  (func (export \"f64.no_fma\") (param $x f64) (param $y f64) (param $z f64) (result f64) (f64.add (f64.mul (local.get $x) (local.get $y)) (local.get $z))))",
    "(assert_return (invoke \"f32.no_fma\" (f32.const 0x1.a78402p+124) (f32.const 0x1.cf8548p-23) (f32.const 0x1.992adap+107)) (f32.const 0x1.a5262cp+107))",
    "(assert_return (invoke \"f32.no_fma\" (f32.const 0x1.ed15a4p-28) (f32.const -0x1.613c72p-50) (f32.const 0x1.4757bp-88)) (f32.const -0x1.5406b8p-77))",
    "(assert_return (invoke \"f32.no_fma\" (f32.const 0x1.ae63a2p+37) (f32.const 0x1.b3a59ap-13) (f32.const 0x1.c16918p+10)) (f32.const 0x1.6e385cp+25))",
    "(assert_return (invoke \"f32.no_fma\" (f32.const 0x1.2a77fap-8) (f32.const -0x1.bb7356p+22) (f32.const -0x1.32be2ap+1)) (f32.const -0x1.0286d4p+15))",
    "(assert_return (invoke \"f32.no_fma\" (f32.const 0x1.298fb6p+126) (f32.const -0x1.03080cp-70) (f32.const -0x1.418de6p+34)) (f32.const -0x1.2d15c6p+56))",
    "(assert_return (invoke \"f64.no_fma\" (f64.const 0x1.ac357ff46eed4p+557) (f64.const 0x1.852c01a5e7297p+430) (f64.const -0x1.05995704eda8ap+987)) (f64.const 0x1.855d905d338ep+987))",
    "(assert_return (invoke \"f64.no_fma\" (f64.const 0x1.e2fd6bf32010cp+749) (f64.const 0x1.01c2238d405e4p-130) (f64.const 0x1.2ecc0db4b9f94p+573)) (f64.const 0x1.e64eb07e063bcp+619))",
    "(assert_return (invoke \"f64.no_fma\" (f64.const 0x1.92b7c7439ede3p-721) (f64.const -0x1.6aa97586d3de6p+1011) (f64.const 0x1.8de4823f6358ap+237)) (f64.const -0x1.1d4139fd20ecdp+291))",
    "(assert_return (invoke \"f64.no_fma\" (f64.const -0x1.466d30bddb453p-386) (f64.const -0x1.185a4d739c7aap+443) (f64.const 0x1.5f9c436fbfc7bp+55)) (f64.const 0x1.bd61a350fcc1ap+57))",
    "(assert_return (invoke \"f64.no_fma\" (f64.const 0x1.7e2c44058a799p+52) (f64.const 0x1.c73b71765b8b2p+685) (f64.const -0x1.16c641df0b108p+690)) (f64.const 0x1.53ccb53de0bd1p+738))",
    "(module \n  (func (export \"f32.no_fold_add_zero\") (param $x f32) (result f32) (f32.add (local.get $x) (f32.const 0.0)))\n  (func (export \"f64.no_fold_add_zero\") (param $x f64) (result f64) (f64.add (local.get $x) (f64.const 0.0))))",
    "(assert_return (invoke \"f32.no_fold_add_zero\" (f32.const -0.0)) (f32.const 0.0))",
    "(assert_return (invoke \"f64.no_fold_add_zero\" (f64.const -0.0)) (f64.const 0.0))",
    "(assert_return (invoke \"f32.no_fold_add_zero\" (f32.const nan:0x200000)) (f32.const nan:arithmetic))",
    "(assert_return (invoke \"f64.no_fold_add_zero\" (f64.const nan:0x4000000000000)) (f64.const nan:arithmetic))",
    "(module \n  (func (export \"f32.no_fold_zero_sub\") (param $x f32) (result f32) (f32.sub (f32.const 0.0) (local.get $x)))\n  (func (export \"f64.no_fold_zero_sub\") (param $x f64) (result f64) (f64.sub (f64.const 0.0) (local.get $x))))",
    "(assert_return (invoke \"f32.no_fold_zero_sub\" (f32.const 0.0)) (f32.const 0.0))",
    "(assert_return (invoke \"f64.no_fold_zero_sub\" (f64.const 0.0)) (f64.const 0.0))",
    "(assert_return (invoke \"f32.no_fold_zero_sub\" (f32.const nan:0x200000)) (f32.const nan:arithmetic))",
    "(assert_return (invoke \"f64.no_fold_zero_sub\" (f64.const nan:0x4000000000000)) (f64.const nan:arithmetic))",
    "(module \n  (func (export \"f32.no_fold_sub_zero\") (param $x f32) (result f32) (f32.sub (local.get $x) (f32.const 0.0)))\n  (func (export \"f64.no_fold_sub_zero\") (param $x f64) (result f64) (f64.sub (local.get $x) (f64.const 0.0))))",
    "(assert_return (invoke \"f32.no_fold_sub_zero\" (f32.const nan:0x200000)) (f32.const nan:arithmetic))",
    "(assert_return (invoke \"f64.no_fold_sub_zero\" (f64.const nan:0x4000000000000)) (f64.const nan:arithmetic))",
    "(module \n  (func (export \"f32.no_fold_mul_zero\") (param $x f32) (result f32) (f32.mul (local.get $x) (f32.const 0.0)))\n  (func (export \"f64.no_fold_mul_zero\") (param $x f64) (result f64) (f64.mul (local.get $x) (f64.const 0.0))))",
    "(assert_return (invoke \"f32.no_fold_mul_zero\" (f32.const -0.0)) (f32.const -0.0))",
    "(assert_return (invoke \"f32.no_fold_mul_zero\" (f32.const -1.0)) (f32.const -0.0))",
    "(assert_return (invoke \"f32.no_fold_mul_zero\" (f32.const -2.0)) (f32.const -0.0))",
    "(assert_return (invoke \"f32.no_fold_mul_zero\" (f32.const nan:0x200000)) (f32.const nan:arithmetic))",
    "(assert_return (invoke \"f64.no_fold_mul_zero\" (f64.const -0.0)) (f64.const -0.0))",
    "(assert_return (invoke \"f64.no_fold_mul_zero\" (f64.const -1.0)) (f64.const -0.0))",
    "(assert_return (invoke \"f64.no_fold_mul_zero\" (f64.const -2.0)) (f64.const -0.0))",
    "(assert_return (invoke \"f64.no_fold_mul_zero\" (f64.const nan:0x4000000000000)) (f64.const nan:arithmetic))",
    "(module \n  (func (export \"f32.no_fold_mul_one\") (param $x f32) (result f32) (f32.mul (local.get $x) (f32.const 1.0)))\n  (func (export \"f64.no_fold_mul_one\") (param $x f64) (result f64) (f64.mul (local.get $x) (f64.const 1.0))))",
    "(assert_return (invoke \"f32.no_fold_mul_one\" (f32.const nan:0x200000)) (f32.const nan:arithmetic))",
    "(assert_return (invoke \"f64.no_fold_mul_one\" (f64.const nan:0x4000000000000)) (f64.const nan:arithmetic))",
    "(module \n  (func (export \"f32.no_fold_zero_div\") (param $x f32) (result f32) (f32.div (f32.const 0.0) (local.get $x)))\n  (func (export \"f64.no_fold_zero_div\") (param $x f64) (result f64) (f64.div (f64.const 0.0) (local.get $x))))",
    "(assert_return (invoke \"f32.no_fold_zero_div\" (f32.const 0.0)) (f32.const nan:canonical))",
    "(assert_return (invoke \"f32.no_fold_zero_div\" (f32.const -0.0)) (f32.const nan:canonical))",
    "(assert_return (invoke \"f32.no_fold_zero_div\" (f32.const nan)) (f32.const nan:canonical))",
    "(assert_return (invoke \"f32.no_fold_zero_div\" (f32.const nan:0x200000)) (f32.const nan:arithmetic))",
    "(assert_return (invoke \"f64.no_fold_zero_div\" (f64.const 0.0)) (f64.const nan:canonical))",
    "(assert_return (invoke \"f64.no_fold_zero_div\" (f64.const -0.0)) (f64.const nan:canonical))",
    "(assert_return (invoke \"f64.no_fold_zero_div\" (f64.const nan)) (f64.const nan:canonical))",
    "(assert_return (invoke \"f64.no_fold_zero_div\" (f64.const nan:0x4000000000000)) (f64.const nan:arithmetic))",
    "(module \n  (func (export \"f32.no_fold_div_one\") (param $x f32) (result f32) (f32.div (local.get $x) (f32.const 1.0)))\n  (func (export \"f64.no_fold_div_one\") (param $x f64) (result f64) (f64.div (local.get $x) (f64.const 1.0))))",
    "(assert_return (invoke \"f32.no_fold_div_one\" (f32.const nan:0x200000)) (f32.const nan:arithmetic))",
    "(assert_return (invoke \"f64.no_fold_div_one\" (f64.const nan:0x4000000000000)) (f64.const nan:arithmetic))",
    "(module \n  (func (export \"f32.no_fold_div_neg1\") (param $x f32) (result f32) (f32.div (local.get $x) (f32.const -1.0)))\n  (func (export \"f64.no_fold_div_neg1\") (param $x f64) (result f64) (f64.div (local.get $x) (f64.const -1.0))))",
    "(assert_return (invoke \"f32.no_fold_div_neg1\" (f32.const nan:0x200000)) (f32.const nan:arithmetic))",
    "(assert_return (invoke \"f64.no_fold_div_neg1\" (f64.const nan:0x4000000000000)) (f64.const nan:arithmetic))",
    "(module \n  (func (export \"f32.no_fold_neg0_sub\") (param $x f32) (result f32) (f32.sub (f32.const -0.0) (local.get $x)))\n  (func (export \"f64.no_fold_neg0_sub\") (param $x f64) (result f64) (f64.sub (f64.const -0.0) (local.get $x))))",
    "(assert_return (invoke \"f32.no_fold_neg0_sub\" (f32.const nan:0x200000)) (f32.const nan:arithmetic))",
    "(assert_return (invoke \"f64.no_fold_neg0_sub\" (f64.const nan:0x4000000000000)) (f64.const nan:arithmetic))",
    "(module \n  (func (export \"f32.no_fold_neg1_mul\") (param $x f32) (result f32) (f32.mul (f32.const -1.0) (local.get $x)))\n  (func (export \"f64.no_fold_neg1_mul\") (param $x f64) (result f64) (f64.mul (f64.const -1.0) (local.get $x))))",
    "(assert_return (invoke \"f32.no_fold_neg1_mul\" (f32.const nan:0x200000)) (f32.const nan:arithmetic))",
    "(assert_return (invoke \"f64.no_fold_neg1_mul\" (f64.const nan:0x4000000000000)) (f64.const nan:arithmetic))",
    "(module \n  (func (export \"f32.no_fold_eq_self\") (param $x f32) (result i32) (f32.eq (local.get $x) (local.get $x)))\n  (func (export \"f64.no_fold_eq_self\") (param $x f64) (result i32) (f64.eq (local.get $x) (local.get $x))))",
    "(assert_return (invoke \"f32.no_fold_eq_self\" (f32.const nan)) (i32.const 0))",
    "(assert_return (invoke \"f64.no_fold_eq_self\" (f64.const nan)) (i32.const 0))",
    "(module \n  (func (export \"f32.no_fold_ne_self\") (param $x f32) (result i32) (f32.ne (local.get $x) (local.get $x)))\n  (func (export \"f64.no_fold_ne_self\") (param $x f64) (result i32) (f64.ne (local.get $x) (local.get $x))))",
    "(assert_return (invoke \"f32.no_fold_ne_self\" (f32.const nan)) (i32.const 1))",
    "(assert_return (invoke \"f64.no_fold_ne_self\" (f64.const nan)) (i32.const 1))",
    "(module \n  (func (export \"f32.no_fold_sub_self\") (param $x f32) (result f32) (f32.sub (local.get $x) (local.get $x)))\n  (func (export \"f64.no_fold_sub_self\") (param $x f64) (result f64) (f64.sub (local.get $x) (local.get $x))))",
    "(assert_return (invoke \"f32.no_fold_sub_self\" (f32.const inf)) (f32.const nan:canonical))",
    "(assert_return (invoke \"f32.no_fold_sub_self\" (f32.const nan)) (f32.const nan:canonical))",
    "(assert_return (invoke \"f64.no_fold_sub_self\" (f64.const inf)) (f64.const nan:canonical))",
    "(assert_return (invoke \"f64.no_fold_sub_self\" (f64.const nan)) (f64.const nan:canonical))",
    "(module \n  (func (export \"f32.no_fold_div_self\") (param $x f32) (result f32) (f32.div (local.get $x) (local.get $x)))\n  (func (export \"f64.no_fold_div_self\") (param $x f64) (result f64) (f64.div (local.get $x) (local.get $x))))",
    "(assert_return (invoke \"f32.no_fold_div_self\" (f32.const inf)) (f32.const nan:canonical))",
    "(assert_return (invoke \"f32.no_fold_div_self\" (f32.const nan)) (f32.const nan:canonical))",
    "(assert_return (invoke \"f32.no_fold_div_self\" (f32.const 0.0)) (f32.const nan:canonical))",
    "(assert_return (invoke \"f32.no_fold_div_self\" (f32.const -0.0)) (f32.const nan:canonical))",
    "(assert_return (invoke \"f64.no_fold_div_self\" (f64.const inf)) (f64.const nan:canonical))",
    "(assert_return (invoke \"f64.no_fold_div_self\" (f64.const nan)) (f64.const nan:canonical))",
    "(assert_return (invoke \"f64.no_fold_div_self\" (f64.const 0.0)) (f64.const nan:canonical))",
    "(assert_return (invoke \"f64.no_fold_div_self\" (f64.const -0.0)) (f64.const nan:canonical))",
    "(module \n  (func (export \"f32.no_fold_div_3\") (param $x f32) (result f32) (f32.div (local.get $x) (f32.const 3.0)))\n  (func (export \"f64.no_fold_div_3\") (param $x f64) (result f64) (f64.div (local.get $x) (f64.const 3.0))))",
    "(assert_return (invoke \"f32.no_fold_div_3\" (f32.const -0x1.359c26p+50)) (f32.const -0x1.9cd032p+48))",
    "(assert_return (invoke \"f32.no_fold_div_3\" (f32.const -0x1.e45646p+93)) (f32.const -0x1.42e42ep+92))",
    "(assert_return (invoke \"f32.no_fold_div_3\" (f32.const -0x1.2a3916p-83)) (f32.const -0x1.8da172p-85))",
    "(assert_return (invoke \"f32.no_fold_div_3\" (f32.const -0x1.1f8b38p-124)) (f32.const -0x1.7f644ap-126))",
    "(assert_return (invoke \"f32.no_fold_div_3\" (f32.const -0x1.d64f64p-56)) (f32.const -0x1.398a42p-57))",
    "(assert_return (invoke \"f64.no_fold_div_3\" (f64.const -0x1.a8a88d29e2cc3p+632)) (f64.const -0x1.1b1b08c69732dp+631))",
    "(assert_return (invoke \"f64.no_fold_div_3\" (f64.const -0x1.bcf52dc950972p-167)) (f64.const -0x1.28a373db8b0f7p-168))",
    "(assert_return (invoke \"f64.no_fold_div_3\" (f64.const 0x1.bd3c0d989f7a4p-874)) (f64.const 0x1.28d2b3bb14fc3p-875))",
    "(assert_return (invoke \"f64.no_fold_div_3\" (f64.const -0x1.0138bf530a53cp+1007)) (f64.const -0x1.56f6546eb86fbp+1005))",
    "(assert_return (invoke \"f64.no_fold_div_3\" (f64.const 0x1.052b87f9d794dp+415)) (f64.const 0x1.5c3a0aa274c67p+413))",
    "(module \n  (func (export \"f32.no_factor\") (param $x f32) (param $y f32) (param $z f32) (result f32) (f32.add (f32.mul (local.get $x) (local.get $z)) (f32.mul (local.get $y) (local.get $z))))\n  (func (export \"f64.no_factor\") (param $x f64) (param $y f64) (param $z f64) (result f64) (f64.add (f64.mul (local.get $x) (local.get $z)) (f64.mul (local.get $y) (local.get $z)))))",
    "(assert_return (invoke \"f32.no_factor\" (f32.const -0x1.4e2352p+40) (f32.const -0x1.842e2cp+49) (f32.const 0x1.eea602p+59)) (f32.const -0x1.77a7dp+109))",
    "(assert_return (invoke \"f32.no_factor\" (f32.const -0x1.b4e7f6p-6) (f32.const 0x1.8c990cp-5) (f32.const -0x1.70cc02p-9)) (f32.const -0x1.00a342p-14))",
    "(assert_return (invoke \"f32.no_factor\" (f32.const -0x1.06722ep-41) (f32.const 0x1.eed3cep-64) (f32.const 0x1.5c5558p+123)) (f32.const -0x1.651aaep+82))",
    "(assert_return (invoke \"f32.no_factor\" (f32.const -0x1.f8c6a4p-64) (f32.const 0x1.08c806p-83) (f32.const 0x1.b5ceccp+118)) (f32.const -0x1.afa15p+55))",
    "(assert_return (invoke \"f32.no_factor\" (f32.const -0x1.3aaa1ep-84) (f32.const 0x1.c6d5eep-71) (f32.const 0x1.8d2924p+20)) (f32.const 0x1.60c9cep-50))",
    "(assert_return (invoke \"f64.no_factor\" (f64.const 0x1.3adeda9144977p-424) (f64.const 0x1.c15af887049e1p-462) (f64.const -0x1.905179c4c4778p-225)) (f64.const -0x1.ec606bcb87b1ap-649))",
    "(assert_return (invoke \"f64.no_factor\" (f64.const 0x1.3c84821c1d348p-662) (f64.const -0x1.4ffd4c77ad037p-1009) (f64.const -0x1.dd275335c6f4p-957)) (f64.const 0x0p+0))",
    "(assert_return (invoke \"f64.no_factor\" (f64.const -0x1.074f372347051p-334) (f64.const -0x1.aaeef661f4c96p-282) (f64.const -0x1.9bd34abe8696dp+479)) (f64.const 0x1.5767029593e2p+198))",
    "(assert_return (invoke \"f64.no_factor\" (f64.const -0x1.c4ded58a6f389p-289) (f64.const 0x1.ba6fdef5d59c9p-260) (f64.const -0x1.c1201c0470205p-253)) (f64.const -0x1.841ada2e0f184p-512))",
    "(assert_return (invoke \"f64.no_factor\" (f64.const 0x1.9d3688f8e375ap-608) (f64.const 0x1.bf91311588256p-579) (f64.const -0x1.1605a6b5d5ff8p+489)) (f64.const -0x1.e6118ca76af53p-90))",
    "(module \n  (func (export \"f32.no_distribute\") (param $x f32) (param $y f32) (param $z f32) (result f32) (f32.mul (f32.add (local.get $x) (local.get $y)) (local.get $z)))\n  (func (export \"f64.no_distribute\") (param $x f64) (param $y f64) (param $z f64) (result f64) (f64.mul (f64.add (local.get $x) (local.get $y)) (local.get $z))))",
    "(assert_return (invoke \"f32.no_distribute\" (f32.const -0x1.4e2352p+40) (f32.const -0x1.842e2cp+49) (f32.const 0x1.eea602p+59)) (f32.const -0x1.77a7d2p+109))",
    "(assert_return (invoke \"f32.no_distribute\" (f32.const -0x1.b4e7f6p-6) (f32.const 0x1.8c990cp-5) (f32.const -0x1.70cc02p-9)) (f32.const -0x1.00a34p-14))",
    "(assert_return (invoke \"f32.no_distribute\" (f32.const -0x1.06722ep-41) (f32.const 0x1.eed3cep-64) (f32.const 0x1.5c5558p+123)) (f32.const -0x1.651abp+82))",
    "(assert_return (invoke \"f32.no_distribute\" (f32.const -0x1.f8c6a4p-64) (f32.const 0x1.08c806p-83) (f32.const 0x1.b5ceccp+118)) (f32.const -0x1.afa14ep+55))",
    "(assert_return (invoke \"f32.no_distribute\" (f32.const -0x1.3aaa1ep-84) (f32.const 0x1.c6d5eep-71) (f32.const 0x1.8d2924p+20)) (f32.const 0x1.60c9ccp-50))",
    "(assert_return (invoke \"f64.no_distribute\" (f64.const 0x1.3adeda9144977p-424) (f64.const 0x1.c15af887049e1p-462) (f64.const -0x1.905179c4c4778p-225)) (f64.const -0x1.ec606bcb87b1bp-649))",
    "(assert_return (invoke \"f64.no_distribute\" (f64.const 0x1.3c84821c1d348p-662) (f64.const -0x1.4ffd4c77ad037p-1009) (f64.const -0x1.dd275335c6f4p-957)) (f64.const -0x0p+0))",
    "(assert_return (invoke \"f64.no_distribute\" (f64.const -0x1.074f372347051p-334) (f64.const -0x1.aaeef661f4c96p-282) (f64.const -0x1.9bd34abe8696dp+479)) (f64.const 0x1.5767029593e1fp+198))",
    "(assert_return (invoke \"f64.no_distribute\" (f64.const -0x1.c4ded58a6f389p-289) (f64.const 0x1.ba6fdef5d59c9p-260) (f64.const -0x1.c1201c0470205p-253)) (f64.const -0x1.841ada2e0f183p-512))",
    "(assert_return (invoke \"f64.no_distribute\" (f64.const 0x1.9d3688f8e375ap-608) (f64.const 0x1.bf91311588256p-579) (f64.const -0x1.1605a6b5d5ff8p+489)) (f64.const -0x1.e6118ca76af52p-90))",
    "(module \n  (func (export \"f32.no_regroup_div_mul\") (param $x f32) (param $y f32) (param $z f32) (result f32) (f32.mul (local.get $x) (f32.div (local.get $y) (local.get $z))))\n  (func (export \"f64.no_regroup_div_mul\") (param $x f64) (param $y f64) (param $z f64) (result f64) (f64.mul (local.get $x) (f64.div (local.get $y) (local.get $z)))))",
    "(assert_return (invoke \"f32.no_regroup_div_mul\" (f32.const -0x1.2d14a6p-115) (f32.const -0x1.575a6cp-64) (f32.const 0x1.5cee0ep-116)) (f32.const 0x1.2844cap-63))",
    "(assert_return (invoke \"f32.no_regroup_div_mul\" (f32.const -0x1.454738p+91) (f32.const -0x1.b28a66p-115) (f32.const -0x1.f53908p+72)) (f32.const -0x0p+0))",
    "(assert_return (invoke \"f32.no_regroup_div_mul\" (f32.const -0x1.6be56ep+16) (f32.const -0x1.b46fc6p-21) (f32.const -0x1.a51df6p-123)) (f32.const -0x1.792258p+118))",
    "(assert_return (invoke \"f32.no_regroup_div_mul\" (f32.const -0x1.c343f8p-94) (f32.const 0x1.e4d906p+73) (f32.const 0x1.be69f8p+68)) (f32.const -0x1.ea1df2p-89))",
    "(assert_return (invoke \"f32.no_regroup_div_mul\" (f32.const 0x1.c6ae76p+112) (f32.const 0x1.fc953cp+24) (f32.const -0x1.60b3e8p+71)) (f32.const -0x1.47d0eap+66))",
    "(assert_return (invoke \"f64.no_regroup_div_mul\" (f64.const 0x1.3c04b815e30bp-423) (f64.const -0x1.379646fd98127p-119) (f64.const 0x1.bddb158506031p-642)) (f64.const -0x1.b9b3301f2dd2dp+99))",
    "(assert_return (invoke \"f64.no_regroup_div_mul\" (f64.const 0x1.46b3a402f86d5p+337) (f64.const 0x1.6fbf1b9e1798dp-447) (f64.const -0x1.bd9704a5a6a06p+797)) (f64.const -0x0p+0))",
    "(assert_return (invoke \"f64.no_regroup_div_mul\" (f64.const 0x1.6c9765bb4347fp-479) (f64.const 0x1.a4af42e34a141p+902) (f64.const 0x1.d2dde70eb68f9p-448)) (f64.const inf))",
    "(assert_return (invoke \"f64.no_regroup_div_mul\" (f64.const -0x1.706023645be72p+480) (f64.const -0x1.6c229f7d9101dp+611) (f64.const -0x1.4d50fa68d3d9ep+836)) (f64.const -0x1.926fa3cacc651p+255))",
    "(assert_return (invoke \"f64.no_regroup_div_mul\" (f64.const 0x1.8cc63d8caf4c7p-599) (f64.const 0x1.8671ac4c35753p-878) (f64.const -0x1.ef35b1695e659p-838)) (f64.const -0x1.38d55f56406dp-639))",
    "(module \n  (func (export \"f32.no_regroup_mul_div\") (param $x f32) (param $y f32) (param $z f32) (result f32) (f32.div (f32.mul (local.get $x) (local.get $y)) (local.get $z)))\n  (func (export \"f64.no_regroup_mul_div\") (param $x f64) (param $y f64) (param $z f64) (result f64) (f64.div (f64.mul (local.get $x) (local.get $y)) (local.get $z))))",
    "(assert_return (invoke \"f32.no_regroup_mul_div\" (f32.const -0x1.2d14a6p-115) (f32.const -0x1.575a6cp-64) (f32.const 0x1.5cee0ep-116)) (f32.const 0x0p+0))",
    "(assert_return (invoke \"f32.no_regroup_mul_div\" (f32.const -0x1.454738p+91) (f32.const -0x1.b28a66p-115) (f32.const -0x1.f53908p+72)) (f32.const -0x1.1a00e8p-96))",
    "(assert_return (invoke \"f32.no_regroup_mul_div\" (f32.const -0x1.6be56ep+16) (f32.const -0x1.b46fc6p-21) (f32.const -0x1.a51df6p-123)) (f32.const -0x1.79225ap+118))",
    "(assert_return (invoke \"f32.no_regroup_mul_div\" (f32.const -0x1.c343f8p-94) (f32.const 0x1.e4d906p+73) (f32.const 0x1.be69f8p+68)) (f32.const -0x1.ea1df4p-89))",
    "(assert_return (invoke \"f32.no_regroup_mul_div\" (f32.const 0x1.c6ae76p+112) (f32.const 0x1.fc953cp+24) (f32.const -0x1.60b3e8p+71)) (f32.const -inf))",
    "(assert_return (invoke \"f64.no_regroup_mul_div\" (f64.const 0x1.3c04b815e30bp-423) (f64.const -0x1.379646fd98127p-119) (f64.const 0x1.bddb158506031p-642)) (f64.const -0x1.b9b3301f2dd2ep+99))",
    "(assert_return (invoke \"f64.no_regroup_mul_div\" (f64.const 0x1.46b3a402f86d5p+337) (f64.const 0x1.6fbf1b9e1798dp-447) (f64.const -0x1.bd9704a5a6a06p+797)) (f64.const -0x1.0da0b6328e09p-907))",
    "(assert_return (invoke \"f64.no_regroup_mul_div\" (f64.const 0x1.6c9765bb4347fp-479) (f64.const 0x1.a4af42e34a141p+902) (f64.const 0x1.d2dde70eb68f9p-448)) (f64.const 0x1.4886b6d9a9a79p+871))",
    "(assert_return (invoke \"f64.no_regroup_mul_div\" (f64.const -0x1.706023645be72p+480) (f64.const -0x1.6c229f7d9101dp+611) (f64.const -0x1.4d50fa68d3d9ep+836)) (f64.const -inf))",
    "(assert_return (invoke \"f64.no_regroup_mul_div\" (f64.const 0x1.8cc63d8caf4c7p-599) (f64.const 0x1.8671ac4c35753p-878) (f64.const -0x1.ef35b1695e659p-838)) (f64.const -0x0p+0))",
    "(module \n  (func (export \"f32.no_reassociate_add\") (param $x f32) (param $y f32) (param $z f32) (param $w f32) (result f32) (f32.add (f32.add (f32.add (local.get $x) (local.get $y)) (local.get $z)) (local.get $w)))\n  (func (export \"f64.no_reassociate_add\") (param $x f64) (param $y f64) (param $z f64) (param $w f64) (result f64) (f64.add (f64.add (f64.add (local.get $x) (local.get $y)) (local.get $z)) (local.get $w))))",
    "(assert_return (invoke \"f32.no_reassociate_add\" (f32.const -0x1.5f7ddcp+44) (f32.const 0x1.854e1p+34) (f32.const -0x1.b2068cp+47) (f32.const -0x1.209692p+41)) (f32.const -0x1.e26c76p+47))",
    "(assert_return (invoke \"f32.no_reassociate_add\" (f32.const 0x1.da3b78p-9) (f32.const -0x1.4312fap-7) (f32.const 0x1.0395e6p-4) (f32.const -0x1.6d5ea6p-7)) (f32.const 0x1.78b31ap-5))",
    "(assert_return (invoke \"f32.no_reassociate_add\" (f32.const -0x1.fdb93ap+34) (f32.const -0x1.b6fce6p+41) (f32.const 0x1.c131d8p+44) (f32.const 0x1.8835b6p+38)) (f32.const 0x1.8ff3a2p+44))",
    "(assert_return (invoke \"f32.no_reassociate_add\" (f32.const 0x1.1739fcp+47) (f32.const 0x1.a4b186p+49) (f32.const -0x1.0c623cp+35) (f32.const 0x1.16a102p+51)) (f32.const 0x1.913ff6p+51))",
    "(assert_return (invoke \"f32.no_reassociate_add\" (f32.const 0x1.733cfap+108) (f32.const -0x1.38d30cp+108) (f32.const 0x1.2f5854p+105) (f32.const -0x1.ccb058p+94)) (f32.const 0x1.813716p+106))",
    "(assert_return (invoke \"f64.no_reassociate_add\" (f64.const -0x1.697a4d9ff19a6p+841) (f64.const 0x1.b305466238397p+847) (f64.const 0x1.e0b2d9bfb4e72p+855) (f64.const -0x1.6e1f3ae2b06bbp+857)) (f64.const -0x1.eb0e5936f087ap+856))",
    "(assert_return (invoke \"f64.no_reassociate_add\" (f64.const 0x1.00ef6746b30e1p-543) (f64.const 0x1.cc1cfafdf3fe1p-544) (f64.const -0x1.f7726df3ecba6p-543) (f64.const -0x1.b26695f99d307p-594)) (f64.const -0x1.074892e3fad76p-547))",
    "(assert_return (invoke \"f64.no_reassociate_add\" (f64.const -0x1.e807b3bd6d854p+440) (f64.const 0x1.cedae26c2c5fp+407) (f64.const -0x1.00ab6e1442541p+437) (f64.const 0x1.28538a55997bdp+397)) (f64.const -0x1.040e90bf871ebp+441))",
    "(assert_return (invoke \"f64.no_reassociate_add\" (f64.const -0x1.ba2b6f35a2402p-317) (f64.const 0x1.ad1c3fea7cd9ep-307) (f64.const -0x1.93aace2bf1261p-262) (f64.const 0x1.9fddbe472847ep-260)) (f64.const 0x1.3af30abc2c01bp-260))",
    "(assert_return (invoke \"f64.no_reassociate_add\" (f64.const -0x1.ccb9c6092fb1dp+641) (f64.const -0x1.4b7c28c108244p+614) (f64.const 0x1.8a7cefef4bde1p+646) (f64.const -0x1.901b28b08b482p+644)) (f64.const 0x1.1810579194126p+646))",
    "(module \n  (func (export \"f32.no_reassociate_mul\") (param $x f32) (param $y f32) (param $z f32) (param $w f32) (result f32) (f32.mul (f32.mul (f32.mul (local.get $x) (local.get $y)) (local.get $z)) (local.get $w)))\n  (func (export \"f64.no_reassociate_mul\") (param $x f64) (param $y f64) (param $z f64) (param $w f64) (result f64) (f64.mul (f64.mul (f64.mul (local.get $x) (local.get $y)) (local.get $z)) (local.get $w))))",
    "(assert_return (invoke \"f32.no_reassociate_mul\" (f32.const 0x1.950ba8p-116) (f32.const 0x1.efdacep-33) (f32.const -0x1.5f9bcp+102) (f32.const 0x1.f04508p-56)) (f32.const -0x1.ff356ep-101))",
    "(assert_return (invoke \"f32.no_reassociate_mul\" (f32.const 0x1.5990aep-56) (f32.const -0x1.7dfb04p+102) (f32.const -0x1.4f774ap-125) (f32.const -0x1.595fe6p+70)) (f32.const -0x1.c7c8fcp-8))",
    "(assert_return (invoke \"f32.no_reassociate_mul\" (f32.const 0x1.6ad9a4p-48) (f32.const -0x1.9138aap+55) (f32.const -0x1.4a774ep-40) (f32.const 0x1.1ff08p+76)) (f32.const 0x1.9cd8ecp+44))",
    "(assert_return (invoke \"f32.no_reassociate_mul\" (f32.const 0x1.e1caecp-105) (f32.const 0x1.af0dd2p+77) (f32.const -0x1.016eep+56) (f32.const -0x1.ab70d6p+59)) (f32.const 0x1.54870ep+89))",
    "(assert_return (invoke \"f32.no_reassociate_mul\" (f32.const -0x1.3b1dcp-99) (f32.const 0x1.4e5a34p-49) (f32.const -0x1.38ba5ap+3) (f32.const 0x1.7fb8eep+59)) (f32.const 0x1.5bbf98p-85))",
    "(assert_return (invoke \"f64.no_reassociate_mul\" (f64.const -0x1.e7842ab7181p-667) (f64.const -0x1.fabf40ceeceafp+990) (f64.const -0x1.1a38a825ab01ap-376) (f64.const -0x1.27e8ea469b14fp+664)) (f64.const 0x1.336eb428af4f3p+613))",
    "(assert_return (invoke \"f64.no_reassociate_mul\" (f64.const 0x1.4ca2292a6acbcp+454) (f64.const 0x1.6ffbab850089ap-516) (f64.const -0x1.547c32e1f5b93p-899) (f64.const -0x1.c7571d9388375p+540)) (f64.const 0x1.1ac796954fc1p-419))",
    "(assert_return (invoke \"f64.no_reassociate_mul\" (f64.const 0x1.73881a52e0401p-501) (f64.const -0x1.1b68dd9efb1a7p+788) (f64.const 0x1.d1c5e6a3eb27cp-762) (f64.const -0x1.56cb2fcc7546fp+88)) (f64.const 0x1.f508db92c34efp-386))",
    "(assert_return (invoke \"f64.no_reassociate_mul\" (f64.const 0x1.2efa87859987cp+692) (f64.const 0x1.68e4373e241p-423) (f64.const 0x1.4e2d0fb383a57p+223) (f64.const -0x1.301d3265c737bp-23)) (f64.const -0x1.4b2b6c393f30cp+470))",
    "(assert_return (invoke \"f64.no_reassociate_mul\" (f64.const 0x1.1013f7498b95fp-234) (f64.const 0x1.d2d1c36fff138p-792) (f64.const -0x1.cbf1824ea7bfdp+728) (f64.const -0x1.440da9c8b836dp-599)) (f64.const 0x1.1a16512881c91p-895))",
    "(module \n  (func (export \"f32.no_fold_div_0\") (param $x f32) (result f32) (f32.div (local.get $x) (f32.const 0.0)))\n  (func (export \"f64.no_fold_div_0\") (param $x f64) (result f64) (f64.div (local.get $x) (f64.const 0.0))))",
    "(assert_return (invoke \"f32.no_fold_div_0\" (f32.const 1.0)) (f32.const inf))",
    "(assert_return (invoke \"f32.no_fold_div_0\" (f32.const -1.0)) (f32.const -inf))",
    "(assert_return (invoke \"f32.no_fold_div_0\" (f32.const inf)) (f32.const inf))",
    "(assert_return (invoke \"f32.no_fold_div_0\" (f32.const -inf)) (f32.const -inf))",
    "(assert_return (invoke \"f32.no_fold_div_0\" (f32.const 0)) (f32.const nan:canonical))",
    "(assert_return (invoke \"f32.no_fold_div_0\" (f32.const -0)) (f32.const nan:canonical))",
    "(assert_return (invoke \"f32.no_fold_div_0\" (f32.const nan:0x200000)) (f32.const nan:arithmetic))",
    "(assert_return (invoke \"f32.no_fold_div_0\" (f32.const nan)) (f32.const nan:canonical))",
    "(assert_return (invoke \"f64.no_fold_div_0\" (f64.const 1.0)) (f64.const inf))",
    "(assert_return (invoke \"f64.no_fold_div_0\" (f64.const -1.0)) (f64.const -inf))",
    "(assert_return (invoke \"f64.no_fold_div_0\" (f64.const inf)) (f64.const inf))",
    "(assert_return (invoke \"f64.no_fold_div_0\" (f64.const -inf)) (f64.const -inf))",
    "(assert_return (invoke \"f64.no_fold_div_0\" (f64.const 0)) (f64.const nan:canonical))",
    "(assert_return (invoke \"f64.no_fold_div_0\" (f64.const -0)) (f64.const nan:canonical))",
    "(assert_return (invoke \"f64.no_fold_div_0\" (f64.const nan)) (f64.const nan:canonical))",
    "(assert_return (invoke \"f64.no_fold_div_0\" (f64.const nan:0x4000000000000)) (f64.const nan:arithmetic))",
    "(module \n  (func (export \"f32.no_fold_div_neg0\") (param $x f32) (result f32) (f32.div (local.get $x) (f32.const -0.0)))\n  (func (export \"f64.no_fold_div_neg0\") (param $x f64) (result f64) (f64.div (local.get $x) (f64.const -0.0))))",
    "(assert_return (invoke \"f32.no_fold_div_neg0\" (f32.const 1.0)) (f32.const -inf))",
    "(assert_return (invoke \"f32.no_fold_div_neg0\" (f32.const -1.0)) (f32.const inf))",
    "(assert_return (invoke \"f32.no_fold_div_neg0\" (f32.const inf)) (f32.const -inf))",
    "(assert_return (invoke \"f32.no_fold_div_neg0\" (f32.const -inf)) (f32.const inf))",
    "(assert_return (invoke \"f32.no_fold_div_neg0\" (f32.const 0)) (f32.const nan:canonical))",
    "(assert_return (invoke \"f32.no_fold_div_neg0\" (f32.const -0)) (f32.const nan:canonical))",
    "(assert_return (invoke \"f32.no_fold_div_neg0\" (f32.const nan:0x200000)) (f32.const nan:arithmetic))",
    "(assert_return (invoke \"f32.no_fold_div_neg0\" (f32.const nan)) (f32.const nan:canonical))",
    "(assert_return (invoke \"f64.no_fold_div_neg0\" (f64.const 1.0)) (f64.const -inf))",
    "(assert_return (invoke \"f64.no_fold_div_neg0\" (f64.const -1.0)) (f64.const inf))",
    "(assert_return (invoke \"f64.no_fold_div_neg0\" (f64.const inf)) (f64.const -inf))",
    "(assert_return (invoke \"f64.no_fold_div_neg0\" (f64.const -inf)) (f64.const inf))",
    "(assert_return (invoke \"f64.no_fold_div_neg0\" (f64.const 0)) (f64.const nan:canonical))",
    "(assert_return (invoke \"f64.no_fold_div_neg0\" (f64.const -0)) (f64.const nan:canonical))",
    "(assert_return (invoke \"f64.no_fold_div_neg0\" (f64.const nan)) (f64.const nan:canonical))",
    "(assert_return (invoke \"f64.no_fold_div_neg0\" (f64.const nan:0x4000000000000)) (f64.const nan:arithmetic))",
    "(module \n  (func (export \"f32.no_fold_to_hypot\") (param $x f32) (param $y f32) (result f32) (f32.sqrt (f32.add (f32.mul (local.get $x) (local.get $x)) (f32.mul (local.get $y) (local.get $y)))))\n  (func (export \"f64.no_fold_to_hypot\") (param $x f64) (param $y f64) (result f64) (f64.sqrt (f64.add (f64.mul (local.get $x) (local.get $x)) (f64.mul (local.get $y) (local.get $y))))))",
    "(assert_return (invoke \"f32.no_fold_to_hypot\" (f32.const 0x1.c2f338p-81) (f32.const 0x1.401b5ep-68)) (f32.const 0x1.401cccp-68))",
    "(assert_return (invoke \"f32.no_fold_to_hypot\" (f32.const -0x1.c38d1p-71) (f32.const -0x1.359ddp-107)) (f32.const 0x1.c36a62p-71))",
    "(assert_return (invoke \"f32.no_fold_to_hypot\" (f32.const -0x1.99e0cap-114) (f32.const -0x1.ed0c6cp-69)) (f32.const 0x1.ed0e48p-69))",
    "(assert_return (invoke \"f32.no_fold_to_hypot\" (f32.const -0x1.1b6ceap+5) (f32.const 0x1.5440bep+17)) (f32.const 0x1.5440cp+17))",
    "(assert_return (invoke \"f32.no_fold_to_hypot\" (f32.const 0x1.8f019ep-76) (f32.const -0x1.182308p-71)) (f32.const 0x1.17e2bcp-71))",
    "(assert_return (invoke \"f64.no_fold_to_hypot\" (f64.const 0x1.1a0ac4f7c8711p-636) (f64.const 0x1.1372ebafff551p-534)) (f64.const 0x1.13463fa37014ep-534))",
    "(assert_return (invoke \"f64.no_fold_to_hypot\" (f64.const 0x1.b793512167499p+395) (f64.const -0x1.11cbc52af4c36p+410)) (f64.const 0x1.11cbc530783a2p+410))",
    "(assert_return (invoke \"f64.no_fold_to_hypot\" (f64.const 0x1.76777f44ff40bp-536) (f64.const -0x1.c3896e4dc1fbp-766)) (f64.const 0x1.8p-536))",
    "(assert_return (invoke \"f64.no_fold_to_hypot\" (f64.const -0x1.889ac72cc6b5dp-521) (f64.const 0x1.8d7084e659f3bp-733)) (f64.const 0x1.889ac72ca843ap-521))",
    "(assert_return (invoke \"f64.no_fold_to_hypot\" (f64.const 0x1.5ee588c02cb08p-670) (f64.const -0x1.05ce25788d9ecp-514)) (f64.const 0x1.05ce25788d9dfp-514))",
    "(module \n  (func (export \"f32.no_approximate_reciprocal\") (param $x f32) (result f32) (f32.div (f32.const 1.0) (local.get $x))))",
    "(assert_return (invoke \"f32.no_approximate_reciprocal\" (f32.const -0x1.2900b6p-10)) (f32.const -0x1.b950d4p+9))",
    "(assert_return (invoke \"f32.no_approximate_reciprocal\" (f32.const 0x1.e7212p+127)) (f32.const 0x1.0d11f8p-128))",
    "(assert_return (invoke \"f32.no_approximate_reciprocal\" (f32.const -0x1.42a466p-93)) (f32.const -0x1.963ee6p+92))",
    "(assert_return (invoke \"f32.no_approximate_reciprocal\" (f32.const 0x1.5d0c32p+76)) (f32.const 0x1.778362p-77))",
    "(assert_return (invoke \"f32.no_approximate_reciprocal\" (f32.const -0x1.601de2p-82)) (f32.const -0x1.743d7ep+81))",
    "(module \n  (func (export \"f32.no_approximate_reciprocal_sqrt\") (param $x f32) (result f32) (f32.div (f32.const 1.0) (f32.sqrt (local.get $x))))\n  (func (export \"f64.no_fuse_reciprocal_sqrt\") (param $x f64) (result f64) (f64.div (f64.const 1.0) (f64.sqrt (local.get $x)))))",
    "(assert_return (invoke \"f32.no_approximate_reciprocal_sqrt\" (f32.const 0x1.6af12ap-43)) (f32.const 0x1.300ed4p+21))",
    "(assert_return (invoke \"f32.no_approximate_reciprocal_sqrt\" (f32.const 0x1.e82fc6p-8)) (f32.const 0x1.72c376p+3))",
    "(assert_return (invoke \"f32.no_approximate_reciprocal_sqrt\" (f32.const 0x1.b9fa9cp-66)) (f32.const 0x1.85a9bap+32))",
    "(assert_return (invoke \"f32.no_approximate_reciprocal_sqrt\" (f32.const 0x1.f4f546p-44)) (f32.const 0x1.6e01c2p+21))",
    "(assert_return (invoke \"f32.no_approximate_reciprocal_sqrt\" (f32.const 0x1.5da7aap-86)) (f32.const 0x1.b618cap+42))",
    "(assert_return (invoke \"f64.no_fuse_reciprocal_sqrt\" (f64.const 0x1.1568a63b55fa3p+889)) (f64.const 0x1.5bc9c74c9952p-445))",
    "(assert_return (invoke \"f64.no_fuse_reciprocal_sqrt\" (f64.const 0x1.239fcd0939cafp+311)) (f64.const 0x1.5334a922b4818p-156))",
    "(assert_return (invoke \"f64.no_fuse_reciprocal_sqrt\" (f64.const 0x1.6e36a24e11054p+104)) (f64.const 0x1.ac13f20977f29p-53))",
    "(assert_return (invoke \"f64.no_fuse_reciprocal_sqrt\" (f64.const 0x1.23ee173219f83p+668)) (f64.const 0x1.df753e055862dp-335))",
    "(assert_return (invoke \"f64.no_fuse_reciprocal_sqrt\" (f64.const 0x1.b30f74caf9babp+146)) (f64.const 0x1.88bfc3d1764a9p-74))",
    "(module \n  (func (export \"f32.no_approximate_sqrt_reciprocal\") (param $x f32) (result f32) (f32.sqrt (f32.div (f32.const 1.0) (local.get $x)))))",
    "(assert_return (invoke \"f32.no_approximate_sqrt_reciprocal\" (f32.const 0x1.a4c986p+60)) (f32.const 0x1.8f5ac6p-31))",
    "(assert_return (invoke \"f32.no_approximate_sqrt_reciprocal\" (f32.const 0x1.50511ep-9)) (f32.const 0x1.3bdd46p+4))",
    "(assert_return (invoke \"f32.no_approximate_sqrt_reciprocal\" (f32.const 0x1.125ec2p+69)) (f32.const 0x1.5db572p-35))",
    "(assert_return (invoke \"f32.no_approximate_sqrt_reciprocal\" (f32.const 0x1.ba4c5p+13)) (f32.const 0x1.136f16p-7))",
    "(assert_return (invoke \"f32.no_approximate_sqrt_reciprocal\" (f32.const 0x1.4a5be2p+104)) (f32.const 0x1.c2b5bp-53))",
    "(module \n  (func (export \"i32.no_fold_f32_s\") (param i32) (result i32) (i32.trunc_f32_s (f32.convert_i32_s (local.get 0))))\n  (func (export \"i32.no_fold_f32_u\") (param i32) (result i32) (i32.trunc_f32_u (f32.convert_i32_u (local.get 0))))\n  (func (export \"i64.no_fold_f64_s\") (param i64) (result i64) (i64.trunc_f64_s (f64.convert_i64_s (local.get 0))))\n  (func (export \"i64.no_fold_f64_u\") (param i64) (result i64) (i64.trunc_f64_u (f64.convert_i64_u (local.get 0)))))",
    "(assert_return (invoke \"i32.no_fold_f32_s\" (i32.const 0x1000000)) (i32.const 0x1000000))",
    "(assert_return (invoke \"i32.no_fold_f32_s\" (i32.const 0x1000001)) (i32.const 0x1000000))",
    "(assert_return (invoke \"i32.no_fold_f32_s\" (i32.const 0xf0000010)) (i32.const 0xf0000010))",
    "(assert_return (invoke \"i32.no_fold_f32_u\" (i32.const 0x1000000)) (i32.const 0x1000000))",
    "(assert_return (invoke \"i32.no_fold_f32_u\" (i32.const 0x1000001)) (i32.const 0x1000000))",
    "(assert_return (invoke \"i32.no_fold_f32_u\" (i32.const 0xf0000010)) (i32.const 0xf0000000))",
    "(assert_return (invoke \"i64.no_fold_f64_s\" (i64.const 0x20000000000000)) (i64.const 0x20000000000000))",
    "(assert_return (invoke \"i64.no_fold_f64_s\" (i64.const 0x20000000000001)) (i64.const 0x20000000000000))",
    "(assert_return (invoke \"i64.no_fold_f64_s\" (i64.const 0xf000000000000400)) (i64.const 0xf000000000000400))",
    "(assert_return (invoke \"i64.no_fold_f64_u\" (i64.const 0x20000000000000)) (i64.const 0x20000000000000))",
    "(assert_return (invoke \"i64.no_fold_f64_u\" (i64.const 0x20000000000001)) (i64.const 0x20000000000000))",
    "(assert_return (invoke \"i64.no_fold_f64_u\" (i64.const 0xf000000000000400)) (i64.const 0xf000000000000000))",
    "(module \n  (func (export \"f32.no_fold_add_sub\") (param $x f32) (param $y f32) (result f32) (f32.sub (f32.add (local.get $x) (local.get $y)) (local.get $y)))\n  (func (export \"f64.no_fold_add_sub\") (param $x f64) (param $y f64) (result f64) (f64.sub (f64.add (local.get $x) (local.get $y)) (local.get $y))))",
    "(assert_return (invoke \"f32.no_fold_add_sub\" (f32.const 0x1.b553e4p-47) (f32.const -0x1.67db2cp-26)) (f32.const 0x1.cp-47))",
    "(assert_return (invoke \"f32.no_fold_add_sub\" (f32.const -0x1.a884dp-23) (f32.const 0x1.f2ae1ep-19)) (f32.const -0x1.a884ep-23))",
    "(assert_return (invoke \"f32.no_fold_add_sub\" (f32.const -0x1.fc04fp+82) (f32.const -0x1.65403ap+101)) (f32.const -0x1p+83))",
    "(assert_return (invoke \"f32.no_fold_add_sub\" (f32.const 0x1.870fa2p-78) (f32.const 0x1.c54916p-56)) (f32.const 0x1.8p-78))",
    "(assert_return (invoke \"f32.no_fold_add_sub\" (f32.const -0x1.17e966p-108) (f32.const -0x1.5fa61ap-84)) (f32.const -0x1p-107))",
    "(assert_return (invoke \"f64.no_fold_add_sub\" (f64.const -0x1.1053ea172dba8p-874) (f64.const 0x1.113c413408ac8p-857)) (f64.const -0x1.1053ea172p-874))",
    "(assert_return (invoke \"f64.no_fold_add_sub\" (f64.const 0x1.e377d54807972p-546) (f64.const 0x1.040a0a4d1ff7p-526)) (f64.const 0x1.e377d548p-546))",
    "(assert_return (invoke \"f64.no_fold_add_sub\" (f64.const -0x1.75f53cd926b62p-30) (f64.const -0x1.66b176e602bb5p-3)) (f64.const -0x1.75f53dp-30))",
    "(assert_return (invoke \"f64.no_fold_add_sub\" (f64.const -0x1.c450ff28332ap-341) (f64.const 0x1.15a5855023baep-305)) (f64.const -0x1.c451p-341))",
    "(assert_return (invoke \"f64.no_fold_add_sub\" (f64.const -0x1.1ad4a596d3ea8p-619) (f64.const -0x1.17d81a41c0ea8p-588)) (f64.const -0x1.1ad4a8p-619))",
    "(module \n  (func (export \"f32.no_fold_sub_add\") (param $x f32) (param $y f32) (result f32) (f32.add (f32.sub (local.get $x) (local.get $y)) (local.get $y)))\n  (func (export \"f64.no_fold_sub_add\") (param $x f64) (param $y f64) (result f64) (f64.add (f64.sub (local.get $x) (local.get $y)) (local.get $y))))",
    "(assert_return (invoke \"f32.no_fold_sub_add\" (f32.const -0x1.523cb8p+9) (f32.const 0x1.93096cp+8)) (f32.const -0x1.523cbap+9))",
    "(assert_return (invoke \"f32.no_fold_sub_add\" (f32.const -0x1.a31a1p-111) (f32.const 0x1.745efp-95)) (f32.const -0x1.a4p-111))",
    "(assert_return (invoke \"f32.no_fold_sub_add\" (f32.const 0x1.3d5328p+26) (f32.const 0x1.58567p+35)) (f32.const 0x1.3d54p+26))",
    "(assert_return (invoke \"f32.no_fold_sub_add\" (f32.const 0x1.374e26p-39) (f32.const -0x1.66a5p-27)) (f32.const 0x1.374p-39))",
    "(assert_return (invoke \"f32.no_fold_sub_add\" (f32.const 0x1.320facp-3) (f32.const -0x1.ac069ap+14)) (f32.const 0x1.34p-3))",
    "(assert_return (invoke \"f64.no_fold_sub_add\" (f64.const 0x1.8f92aad2c9b8dp+255) (f64.const -0x1.08cd4992266cbp+259)) (f64.const 0x1.8f92aad2c9b9p+255))",
    "(assert_return (invoke \"f64.no_fold_sub_add\" (f64.const 0x1.5aaff55742c8bp-666) (f64.const 0x1.8f5f47181f46dp-647)) (f64.const 0x1.5aaff5578p-666))",
    "(assert_return (invoke \"f64.no_fold_sub_add\" (f64.const 0x1.21bc52967a98dp+251) (f64.const -0x1.fcffaa32d0884p+300)) (f64.const 0x1.2p+251))",
    "(assert_return (invoke \"f64.no_fold_sub_add\" (f64.const 0x1.9c78361f47374p-26) (f64.const -0x1.69d69f4edc61cp-13)) (f64.const 0x1.9c78361f48p-26))",
    "(assert_return (invoke \"f64.no_fold_sub_add\" (f64.const 0x1.4dbe68e4afab2p-367) (f64.const -0x1.dc24e5b39cd02p-361)) (f64.const 0x1.4dbe68e4afacp-367))",
    "(module \n  (func (export \"f32.no_fold_mul_div\") (param $x f32) (param $y f32) (result f32) (f32.div (f32.mul (local.get $x) (local.get $y)) (local.get $y)))\n  (func (export \"f64.no_fold_mul_div\") (param $x f64) (param $y f64) (result f64) (f64.div (f64.mul (local.get $x) (local.get $y)) (local.get $y))))",
    "(assert_return (invoke \"f32.no_fold_mul_div\" (f32.const -0x1.cd859ap+54) (f32.const 0x1.6ca936p-47)) (f32.const -0x1.cd8598p+54))",
    "(assert_return (invoke \"f32.no_fold_mul_div\" (f32.const -0x1.0b56b8p-26) (f32.const 0x1.48264cp-106)) (f32.const -0x1.0b56a4p-26))",
    "(assert_return (invoke \"f32.no_fold_mul_div\" (f32.const -0x1.e7555cp-48) (f32.const -0x1.9161cp+48)) (f32.const -0x1.e7555ap-48))",
    "(assert_return (invoke \"f32.no_fold_mul_div\" (f32.const 0x1.aaa50ep+52) (f32.const -0x1.dfb39ep+60)) (f32.const 0x1.aaa50cp+52))",
    "(assert_return (invoke \"f32.no_fold_mul_div\" (f32.const -0x1.2b7dfap-92) (f32.const -0x1.7c4ca6p-37)) (f32.const -0x1.2b7dfep-92))",
    "(assert_return (invoke \"f64.no_fold_mul_div\" (f64.const -0x1.3d79ff4118a1ap-837) (f64.const -0x1.b8b5dda31808cp-205)) (f64.const -0x1.3d79ff412263ep-837))",
    "(assert_return (invoke \"f64.no_fold_mul_div\" (f64.const 0x1.f894d1ee6b3a4p+384) (f64.const 0x1.8c2606d03d58ap+585)) (f64.const 0x1.f894d1ee6b3a5p+384))",
    "(assert_return (invoke \"f64.no_fold_mul_div\" (f64.const -0x1.a022260acc993p+238) (f64.const -0x1.5fbc128fc8e3cp-552)) (f64.const -0x1.a022260acc992p+238))",
    "(assert_return (invoke \"f64.no_fold_mul_div\" (f64.const 0x1.9d4b8ed174f54p-166) (f64.const 0x1.ee3d467aeeac6p-906)) (f64.const 0x1.8dcc95a053b2bp-166))",
    "(assert_return (invoke \"f64.no_fold_mul_div\" (f64.const -0x1.e95ea897cdcd4p+660) (f64.const -0x1.854d5df085f2ep-327)) (f64.const -0x1.e95ea897cdcd5p+660))",
    "(module \n  (func (export \"f32.no_fold_div_mul\") (param $x f32) (param $y f32) (result f32) (f32.mul (f32.div (local.get $x) (local.get $y)) (local.get $y)))\n  (func (export \"f64.no_fold_div_mul\") (param $x f64) (param $y f64) (result f64) (f64.mul (f64.div (local.get $x) (local.get $y)) (local.get $y))))",
    "(assert_return (invoke \"f32.no_fold_div_mul\" (f32.const -0x1.dc6364p+38) (f32.const 0x1.d630ecp+29)) (f32.const -0x1.dc6362p+38))",
    "(assert_return (invoke \"f32.no_fold_div_mul\" (f32.const -0x1.1f9836p-52) (f32.const -0x1.16c4e4p-18)) (f32.const -0x1.1f9838p-52))",
    "(assert_return (invoke \"f32.no_fold_div_mul\" (f32.const 0x1.c5972cp-126) (f32.const -0x1.d6659ep+7)) (f32.const 0x1.c5980ep-126))",
    "(assert_return (invoke \"f32.no_fold_div_mul\" (f32.const -0x1.2e3a9ep-74) (f32.const -0x1.353994p+59)) (f32.const -0x1.2e3a4p-74))",
    "(assert_return (invoke \"f32.no_fold_div_mul\" (f32.const 0x1.d96b82p-98) (f32.const 0x1.95d908p+27)) (f32.const 0x1.d96b84p-98))",
    "(assert_return (invoke \"f64.no_fold_div_mul\" (f64.const 0x1.d01f913a52481p-876) (f64.const -0x1.2cd0668b28344p+184)) (f64.const 0x1.d020daf71cdcp-876))",
    "(assert_return (invoke \"f64.no_fold_div_mul\" (f64.const -0x1.81cb7d400918dp-714) (f64.const 0x1.7caa643586d6ep-53)) (f64.const -0x1.81cb7d400918ep-714))",
    "(assert_return (invoke \"f64.no_fold_div_mul\" (f64.const -0x1.66904c97b5c8ep-145) (f64.const 0x1.5c3481592ad4cp+428)) (f64.const -0x1.66904c97b5c8dp-145))",
    "(assert_return (invoke \"f64.no_fold_div_mul\" (f64.const -0x1.e75859d2f0765p-278) (f64.const -0x1.5f19b6ab497f9p+283)) (f64.const -0x1.e75859d2f0764p-278))",
    "(assert_return (invoke \"f64.no_fold_div_mul\" (f64.const -0x1.515fe9c3b5f5p+620) (f64.const 0x1.36be869c99f7ap+989)) (f64.const -0x1.515fe9c3b5f4fp+620))",
    "(module \n  (func (export \"f32.no_fold_div2_mul2\") (param $x f32) (result f32) (f32.mul (f32.div (local.get $x) (f32.const 2.0)) (f32.const 2.0)))\n  (func (export \"f64.no_fold_div2_mul2\") (param $x f64) (result f64) (f64.mul (f64.div (local.get $x) (f64.const 2.0)) (f64.const 2.0))))",
    "(assert_return (invoke \"f32.no_fold_div2_mul2\" (f32.const 0x1.fffffep-126)) (f32.const 0x1p-125))",
    "(assert_return (invoke \"f64.no_fold_div2_mul2\" (f64.const 0x1.fffffffffffffp-1022)) (f64.const 0x1p-1021))",
    "(module \n  (func (export \"no_fold_demote_promote\") (param $x f64) (result f64) (f64.promote_f32 (f32.demote_f64 (local.get $x)))))",
    "(assert_return (invoke \"no_fold_demote_promote\" (f64.const -0x1.dece272390f5dp-133)) (f64.const -0x1.decep-133))",
    "(assert_return (invoke \"no_fold_demote_promote\" (f64.const -0x1.19e6c79938a6fp-85)) (f64.const -0x1.19e6c8p-85))",
    "(assert_return (invoke \"no_fold_demote_promote\" (f64.const 0x1.49b297ec44dc1p+107)) (f64.const 0x1.49b298p+107))",
    "(assert_return (invoke \"no_fold_demote_promote\" (f64.const -0x1.74f5bd865163p-88)) (f64.const -0x1.74f5bep-88))",
    "(assert_return (invoke \"no_fold_demote_promote\" (f64.const 0x1.26d675662367ep+104)) (f64.const 0x1.26d676p+104))",
    "(module \n  (func (export \"no_fold_promote_demote\") (param $x f32) (result f32) (f32.demote_f64 (f64.promote_f32 (local.get $x)))))",
    "(assert_return (invoke \"no_fold_promote_demote\" (f32.const nan:0x200000)) (f32.const nan:arithmetic))",
    "(assert_return (invoke \"no_fold_promote_demote\" (f32.const 0x0p+0)) (f32.const 0x0p+0))",
    "(assert_return (invoke \"no_fold_promote_demote\" (f32.const -0x0p+0)) (f32.const -0x0p+0))",
    "(assert_return (invoke \"no_fold_promote_demote\" (f32.const 0x1p-149)) (f32.const 0x1p-149))",
    "(assert_return (invoke \"no_fold_promote_demote\" (f32.const -0x1p-149)) (f32.const -0x1p-149))",
    "(assert_return (invoke \"no_fold_promote_demote\" (f32.const 0x1.fffffcp-127)) (f32.const 0x1.fffffcp-127))",
    "(assert_return (invoke \"no_fold_promote_demote\" (f32.const -0x1.fffffcp-127)) (f32.const -0x1.fffffcp-127))",
    "(assert_return (invoke \"no_fold_promote_demote\" (f32.const 0x1p-126)) (f32.const 0x1p-126))",
    "(assert_return (invoke \"no_fold_promote_demote\" (f32.const -0x1p-126)) (f32.const -0x1p-126))",
    "(assert_return (invoke \"no_fold_promote_demote\" (f32.const 0x1.fffffep+127)) (f32.const 0x1.fffffep+127))",
    "(assert_return (invoke \"no_fold_promote_demote\" (f32.const -0x1.fffffep+127)) (f32.const -0x1.fffffep+127))",
    "(assert_return (invoke \"no_fold_promote_demote\" (f32.const inf)) (f32.const inf))",
    "(assert_return (invoke \"no_fold_promote_demote\" (f32.const -inf)) (f32.const -inf))",
    "(module \n  (func (export \"no_demote_mixed_add\") (param $x f64) (param $y f32) (result f32) (f32.demote_f64 (f64.add (local.get $x) (f64.promote_f32 (local.get $y)))))\n  (func (export \"no_demote_mixed_add_commuted\") (param $y f32) (param $x f64) (result f32) (f32.demote_f64 (f64.add (f64.promote_f32 (local.get $y)) (local.get $x)))))",
    "(assert_return (invoke \"no_demote_mixed_add\" (f64.const 0x1.f51a9d04854f9p-95) (f32.const 0x1.3f4e9cp-119)) (f32.const 0x1.f51a9ep-95))",
    "(assert_return (invoke \"no_demote_mixed_add\" (f64.const 0x1.065b3d81ad8dp+37) (f32.const 0x1.758cd8p+38)) (f32.const 0x1.f8ba76p+38))",
    "(assert_return (invoke \"no_demote_mixed_add\" (f64.const 0x1.626c80963bd17p-119) (f32.const -0x1.9bbf86p-121)) (f32.const 0x1.f6f93ep-120))",
    "(assert_return (invoke \"no_demote_mixed_add\" (f64.const -0x1.0d5110e3385bbp-20) (f32.const 0x1.096f4ap-29)) (f32.const -0x1.0ccc5ap-20))",
    "(assert_return (invoke \"no_demote_mixed_add\" (f64.const -0x1.73852db4e5075p-20) (f32.const -0x1.24e474p-41)) (f32.const -0x1.738536p-20))",
    "(assert_return (invoke \"no_demote_mixed_add_commuted\" (f32.const 0x1.3f4e9cp-119) (f64.const 0x1.f51a9d04854f9p-95)) (f32.const 0x1.f51a9ep-95))",
    "(assert_return (invoke \"no_demote_mixed_add_commuted\" (f32.const 0x1.758cd8p+38) (f64.const 0x1.065b3d81ad8dp+37)) (f32.const 0x1.f8ba76p+38))",
    "(assert_return (invoke \"no_demote_mixed_add_commuted\" (f32.const -0x1.9bbf86p-121) (f64.const 0x1.626c80963bd17p-119)) (f32.const 0x1.f6f93ep-120))",
    "(assert_return (invoke \"no_demote_mixed_add_commuted\" (f32.const 0x1.096f4ap-29) (f64.const -0x1.0d5110e3385bbp-20)) (f32.const -0x1.0ccc5ap-20))",
    "(assert_return (invoke \"no_demote_mixed_add_commuted\" (f32.const -0x1.24e474p-41) (f64.const -0x1.73852db4e5075p-20)) (f32.const -0x1.738536p-20))",
    "(module \n  (func (export \"no_demote_mixed_sub\") (param $x f64) (param $y f32) (result f32) (f32.demote_f64 (f64.sub (local.get $x) (f64.promote_f32 (local.get $y))))))",
    "(assert_return (invoke \"no_demote_mixed_sub\" (f64.const 0x1.a0a183220e9b1p+82) (f32.const 0x1.c5acf8p+61)) (f32.const 0x1.a0a174p+82))",
    "(assert_return (invoke \"no_demote_mixed_sub\" (f64.const -0x1.6e2c5ac39f63ep+30) (f32.const 0x1.d48ca4p+17)) (f32.const -0x1.6e3bp+30))",
    "(assert_return (invoke \"no_demote_mixed_sub\" (f64.const -0x1.98c74350dde6ap+6) (f32.const 0x1.9d69bcp-12)) (f32.const -0x1.98c7aap+6))",
    "(assert_return (invoke \"no_demote_mixed_sub\" (f64.const 0x1.0459f34091dbfp-54) (f32.const 0x1.61ad08p-71)) (f32.const 0x1.045942p-54))",
    "(assert_return (invoke \"no_demote_mixed_sub\" (f64.const 0x1.a7498dca3fdb7p+14) (f32.const 0x1.ed21c8p+15)) (f32.const -0x1.197d02p+15))",
    "(module \n  (func (export \"f32.i32.no_fold_trunc_s_convert_s\") (param $x f32) (result f32) (f32.convert_i32_s (i32.trunc_f32_s (local.get $x))))\n  (func (export \"f32.i32.no_fold_trunc_u_convert_s\") (param $x f32) (result f32) (f32.convert_i32_s (i32.trunc_f32_u (local.get $x))))\n  (func (export \"f32.i32.no_fold_trunc_s_convert_u\") (param $x f32) (result f32) (f32.convert_i32_u (i32.trunc_f32_s (local.get $x))))\n  (func (export \"f32.i32.no_fold_trunc_u_convert_u\") (param $x f32) (result f32) (f32.convert_i32_u (i32.trunc_f32_u (local.get $x))))\n  (func (export \"f64.i32.no_fold_trunc_s_convert_s\") (param $x f64) (result f64) (f64.convert_i32_s (i32.trunc_f64_s (local.get $x))))\n  (func (export \"f64.i32.no_fold_trunc_u_convert_s\") (param $x f64) (result f64) (f64.convert_i32_s (i32.trunc_f64_u (local.get $x))))\n  (func (export \"f64.i32.no_fold_trunc_s_convert_u\") (param $x f64) (result f64) (f64.convert_i32_u (i32.trunc_f64_s (local.get $x))))\n  (func (export \"f64.i32.no_fold_trunc_u_convert_u\") (param $x f64) (result f64) (f64.convert_i32_u (i32.trunc_f64_u (local.get $x))))\n  (func (export \"f32.i64.no_fold_trunc_s_convert_s\") (param $x f32) (result f32) (f32.convert_i64_s (i64.trunc_f32_s (local.get $x))))\n  (func (export \"f32.i64.no_fold_trunc_u_convert_s\") (param $x f32) (result f32) (f32.convert_i64_s (i64.trunc_f32_u (local.get $x))))\n  (func (export \"f32.i64.no_fold_trunc_s_convert_u\") (param $x f32) (result f32) (f32.convert_i64_u (i64.trunc_f32_s (local.get $x))))\n  (func (export \"f32.i64.no_fold_trunc_u_convert_u\") (param $x f32) (result f32) (f32.convert_i64_u (i64.trunc_f32_u (local.get $x))))\n  (func (export \"f64.i64.no_fold_trunc_s_convert_s\") (param $x f64) (result f64) (f64.convert_i64_s (i64.trunc_f64_s (local.get $x))))\n  (func (export \"f64.i64.no_fold_trunc_u_convert_s\") (param $x f64) (result f64) (f64.convert_i64_s (i64.trunc_f64_u (local.get $x))))\n  (func (export \"f64.i64.no_fold_trunc_s_convert_u\") (param $x f64) (result f64) (f64.convert_i64_u (i64.trunc_f64_s (local.get $x))))\n  (func (export \"f64.i64.no_fold_trunc_u_convert_u\") (param $x f64) (result f64) (f64.convert_i64_u (i64.trunc_f64_u (local.get $x)))))",
    "(assert_return (invoke \"f32.i32.no_fold_trunc_s_convert_s\" (f32.const 1.5)) (f32.const 1.0))",
    "(assert_return (invoke \"f32.i32.no_fold_trunc_s_convert_s\" (f32.const -1.5)) (f32.const -1.0))",
    "(assert_return (invoke \"f32.i32.no_fold_trunc_u_convert_s\" (f32.const 1.5)) (f32.const 1.0))",
    "(assert_return (invoke \"f32.i32.no_fold_trunc_u_convert_s\" (f32.const -0.5)) (f32.const 0.0))",
    "(assert_return (invoke \"f32.i32.no_fold_trunc_s_convert_u\" (f32.const 1.5)) (f32.const 1.0))",
    "(assert_return (invoke \"f32.i32.no_fold_trunc_s_convert_u\" (f32.const -1.5)) (f32.const 0x1p+32))",
    "(assert_return (invoke \"f32.i32.no_fold_trunc_u_convert_u\" (f32.const 1.5)) (f32.const 1.0))",
    "(assert_return (invoke \"f32.i32.no_fold_trunc_u_convert_u\" (f32.const -0.5)) (f32.const 0.0))",
    "(assert_return (invoke \"f64.i32.no_fold_trunc_s_convert_s\" (f64.const 1.5)) (f64.const 1.0))",
    "(assert_return (invoke \"f64.i32.no_fold_trunc_s_convert_s\" (f64.const -1.5)) (f64.const -1.0))",
    "(assert_return (invoke \"f64.i32.no_fold_trunc_u_convert_s\" (f64.const 1.5)) (f64.const 1.0))",
    "(assert_return (invoke \"f64.i32.no_fold_trunc_u_convert_s\" (f64.const -0.5)) (f64.const 0.0))",
    "(assert_return (invoke \"f64.i32.no_fold_trunc_s_convert_u\" (f64.const 1.5)) (f64.const 1.0))",
    "(assert_return (invoke \"f64.i32.no_fold_trunc_s_convert_u\" (f64.const -1.5)) (f64.const 0x1.fffffffep+31))",
    "(assert_return (invoke \"f64.i32.no_fold_trunc_u_convert_u\" (f64.const 1.5)) (f64.const 1.0))",
    "(assert_return (invoke \"f64.i32.no_fold_trunc_u_convert_u\" (f64.const -0.5)) (f64.const 0.0))",
    "(assert_return (invoke \"f32.i64.no_fold_trunc_s_convert_s\" (f32.const 1.5)) (f32.const 1.0))",
    "(assert_return (invoke \"f32.i64.no_fold_trunc_s_convert_s\" (f32.const -1.5)) (f32.const -1.0))",
    "(assert_return (invoke \"f32.i64.no_fold_trunc_u_convert_s\" (f32.const 1.5)) (f32.const 1.0))",
    "(assert_return (invoke \"f32.i64.no_fold_trunc_u_convert_s\" (f32.const -0.5)) (f32.const 0.0))",
    "(assert_return (invoke \"f32.i64.no_fold_trunc_s_convert_u\" (f32.const 1.5)) (f32.const 1.0))",
    "(assert_return (invoke \"f32.i64.no_fold_trunc_s_convert_u\" (f32.const -1.5)) (f32.const 0x1p+64))",
    "(assert_return (invoke \"f32.i64.no_fold_trunc_u_convert_u\" (f32.const 1.5)) (f32.const 1.0))",
    "(assert_return (invoke \"f32.i64.no_fold_trunc_u_convert_u\" (f32.const -0.5)) (f32.const 0.0))",
    "(assert_return (invoke \"f64.i64.no_fold_trunc_s_convert_s\" (f64.const 1.5)) (f64.const 1.0))",
    "(assert_return (invoke \"f64.i64.no_fold_trunc_s_convert_s\" (f64.const -1.5)) (f64.const -1.0))",
    "(assert_return (invoke \"f64.i64.no_fold_trunc_u_convert_s\" (f64.const 1.5)) (f64.const 1.0))",
    "(assert_return (invoke \"f64.i64.no_fold_trunc_u_convert_s\" (f64.const -0.5)) (f64.const 0.0))",
    "(assert_return (invoke \"f64.i64.no_fold_trunc_s_convert_u\" (f64.const 1.5)) (f64.const 1.0))",
    "(assert_return (invoke \"f64.i64.no_fold_trunc_s_convert_u\" (f64.const -1.5)) (f64.const 0x1p+64))",
    "(assert_return (invoke \"f64.i64.no_fold_trunc_u_convert_u\" (f64.const 1.5)) (f64.const 1.0))",
    "(assert_return (invoke \"f64.i64.no_fold_trunc_u_convert_u\" (f64.const -0.5)) (f64.const 0.0))",
    "(module (memory 1 1)\n  (func (export \"init\") (param $i i32) (param $x f32) (f32.store (local.get $i) (local.get $x)))\n  (func (export \"run\") (param $n i32) (param $z f32) (local $i i32) (block $exit (loop $cont (f32.store (local.get $i) (f32.div (f32.load (local.get $i)) (local.get $z)) ) (local.set $i (i32.add (local.get $i) (i32.const 4))) (br_if $cont (i32.lt_u (local.get $i) (local.get $n))) ) ) )\n  (func (export \"check\") (param $i i32) (result f32) (f32.load (local.get $i))))",
    "(invoke \"init\" (i32.const 0) (f32.const 15.1))",
    "(invoke \"init\" (i32.const 4) (f32.const 15.2))",
    "(invoke \"init\" (i32.const 8) (f32.const 15.3))",
    "(invoke \"init\" (i32.const 12) (f32.const 15.4))",
    "(assert_return (invoke \"check\" (i32.const 0)) (f32.const 15.1))",
    "(assert_return (invoke \"check\" (i32.const 4)) (f32.const 15.2))",
    "(assert_return (invoke \"check\" (i32.const 8)) (f32.const 15.3))",
    "(assert_return (invoke \"check\" (i32.const 12)) (f32.const 15.4))",
    "(invoke \"run\" (i32.const 16) (f32.const 3.0))",
    "(assert_return (invoke \"check\" (i32.const 0)) (f32.const 0x1.422222p+2))",
    "(assert_return (invoke \"check\" (i32.const 4)) (f32.const 0x1.444444p+2))",
    "(assert_return (invoke \"check\" (i32.const 8)) (f32.const 0x1.466666p+2))",
    "(assert_return (invoke \"check\" (i32.const 12)) (f32.const 0x1.488888p+2))",
    "(module (memory 1 1)\n  (func (export \"init\") (param $i i32) (param $x f64) (f64.store (local.get $i) (local.get $x)))\n  (func (export \"run\") (param $n i32) (param $z f64) (local $i i32) (block $exit (loop $cont (f64.store (local.get $i) (f64.div (f64.load (local.get $i)) (local.get $z)) ) (local.set $i (i32.add (local.get $i) (i32.const 8))) (br_if $cont (i32.lt_u (local.get $i) (local.get $n))) ) ) )\n  (func (export \"check\") (param $i i32) (result f64) (f64.load (local.get $i))))",
    "(invoke \"init\" (i32.const 0) (f64.const 15.1))",
    "(invoke \"init\" (i32.const 8) (f64.const 15.2))",
    "(invoke \"init\" (i32.const 16) (f64.const 15.3))",
    "(invoke \"init\" (i32.const 24) (f64.const 15.4))",
    "(assert_return (invoke \"check\" (i32.const 0)) (f64.const 15.1))",
    "(assert_return (invoke \"check\" (i32.const 8)) (f64.const 15.2))",
    "(assert_return (invoke \"check\" (i32.const 16)) (f64.const 15.3))",
    "(assert_return (invoke \"check\" (i32.const 24)) (f64.const 15.4))",
    "(invoke \"run\" (i32.const 32) (f64.const 3.0))",
    "(assert_return (invoke \"check\" (i32.const 0)) (f64.const 0x1.4222222222222p+2))",
    "(assert_return (invoke \"check\" (i32.const 8)) (f64.const 0x1.4444444444444p+2))",
    "(assert_return (invoke \"check\" (i32.const 16)) (f64.const 0x1.4666666666667p+2))",
    "(assert_return (invoke \"check\" (i32.const 24)) (f64.const 0x1.4888888888889p+2))",
    "(module \n  (func (export \"f32.ult\") (param $x f32) (param $y f32) (result i32) (i32.eqz (f32.ge (local.get $x) (local.get $y))))\n  (func (export \"f32.ule\") (param $x f32) (param $y f32) (result i32) (i32.eqz (f32.gt (local.get $x) (local.get $y))))\n  (func (export \"f32.ugt\") (param $x f32) (param $y f32) (result i32) (i32.eqz (f32.le (local.get $x) (local.get $y))))\n  (func (export \"f32.uge\") (param $x f32) (param $y f32) (result i32) (i32.eqz (f32.lt (local.get $x) (local.get $y))))\n  (func (export \"f64.ult\") (param $x f64) (param $y f64) (result i32) (i32.eqz (f64.ge (local.get $x) (local.get $y))))\n  (func (export \"f64.ule\") (param $x f64) (param $y f64) (result i32) (i32.eqz (f64.gt (local.get $x) (local.get $y))))\n  (func (export \"f64.ugt\") (param $x f64) (param $y f64) (result i32) (i32.eqz (f64.le (local.get $x) (local.get $y))))\n  (func (export \"f64.uge\") (param $x f64) (param $y f64) (result i32) (i32.eqz (f64.lt (local.get $x) (local.get $y)))))",
    "(assert_return (invoke \"f32.ult\" (f32.const 3.0) (f32.const 2.0)) (i32.const 0))",
    "(assert_return (invoke \"f32.ult\" (f32.const 2.0) (f32.const 2.0)) (i32.const 0))",
    "(assert_return (invoke \"f32.ult\" (f32.const 2.0) (f32.const 3.0)) (i32.const 1))",
    "(assert_return (invoke \"f32.ult\" (f32.const 2.0) (f32.const nan)) (i32.const 1))",
    "(assert_return (invoke \"f32.ule\" (f32.const 3.0) (f32.const 2.0)) (i32.const 0))",
    "(assert_return (invoke \"f32.ule\" (f32.const 2.0) (f32.const 2.0)) (i32.const 1))",
    "(assert_return (invoke \"f32.ule\" (f32.const 2.0) (f32.const 3.0)) (i32.const 1))",
    "(assert_return (invoke \"f32.ule\" (f32.const 2.0) (f32.const nan)) (i32.const 1))",
    "(assert_return (invoke \"f32.ugt\" (f32.const 3.0) (f32.const 2.0)) (i32.const 1))",
    "(assert_return (invoke \"f32.ugt\" (f32.const 2.0) (f32.const 2.0)) (i32.const 0))",
    "(assert_return (invoke \"f32.ugt\" (f32.const 2.0) (f32.const 3.0)) (i32.const 0))",
    "(assert_return (invoke \"f32.ugt\" (f32.const 2.0) (f32.const nan)) (i32.const 1))",
    "(assert_return (invoke \"f32.uge\" (f32.const 3.0) (f32.const 2.0)) (i32.const 1))",
    "(assert_return (invoke \"f32.uge\" (f32.const 2.0) (f32.const 2.0)) (i32.const 1))",
    "(assert_return (invoke \"f32.uge\" (f32.const 2.0) (f32.const 3.0)) (i32.const 0))",
    "(assert_return (invoke \"f32.uge\" (f32.const 2.0) (f32.const nan)) (i32.const 1))",
    "(assert_return (invoke \"f64.ult\" (f64.const 3.0) (f64.const 2.0)) (i32.const 0))",
    "(assert_return (invoke \"f64.ult\" (f64.const 2.0) (f64.const 2.0)) (i32.const 0))",
    "(assert_return (invoke \"f64.ult\" (f64.const 2.0) (f64.const 3.0)) (i32.const 1))",
    "(assert_return (invoke \"f64.ult\" (f64.const 2.0) (f64.const nan)) (i32.const 1))",
    "(assert_return (invoke \"f64.ule\" (f64.const 3.0) (f64.const 2.0)) (i32.const 0))",
    "(assert_return (invoke \"f64.ule\" (f64.const 2.0) (f64.const 2.0)) (i32.const 1))",
    "(assert_return (invoke \"f64.ule\" (f64.const 2.0) (f64.const 3.0)) (i32.const 1))",
    "(assert_return (invoke \"f64.ule\" (f64.const 2.0) (f64.const nan)) (i32.const 1))",
    "(assert_return (invoke \"f64.ugt\" (f64.const 3.0) (f64.const 2.0)) (i32.const 1))",
    "(assert_return (invoke \"f64.ugt\" (f64.const 2.0) (f64.const 2.0)) (i32.const 0))",
    "(assert_return (invoke \"f64.ugt\" (f64.const 2.0) (f64.const 3.0)) (i32.const 0))",
    "(assert_return (invoke \"f64.ugt\" (f64.const 2.0) (f64.const nan)) (i32.const 1))",
    "(assert_return (invoke \"f64.uge\" (f64.const 3.0) (f64.const 2.0)) (i32.const 1))",
    "(assert_return (invoke \"f64.uge\" (f64.const 2.0) (f64.const 2.0)) (i32.const 1))",
    "(assert_return (invoke \"f64.uge\" (f64.const 2.0) (f64.const 3.0)) (i32.const 0))",
    "(assert_return (invoke \"f64.uge\" (f64.const 2.0) (f64.const nan)) (i32.const 1))",
    "(module \n  (func (export \"f32.no_fold_lt_select\") (param $x f32) (param $y f32) (result f32) (select (local.get $x) (local.get $y) (f32.lt (local.get $x) (local.get $y))))\n  (func (export \"f32.no_fold_le_select\") (param $x f32) (param $y f32) (result f32) (select (local.get $x) (local.get $y) (f32.le (local.get $x) (local.get $y))))\n  (func (export \"f32.no_fold_gt_select\") (param $x f32) (param $y f32) (result f32) (select (local.get $x) (local.get $y) (f32.gt (local.get $x) (local.get $y))))\n  (func (export \"f32.no_fold_ge_select\") (param $x f32) (param $y f32) (result f32) (select (local.get $x) (local.get $y) (f32.ge (local.get $x) (local.get $y))))\n  (func (export \"f64.no_fold_lt_select\") (param $x f64) (param $y f64) (result f64) (select (local.get $x) (local.get $y) (f64.lt (local.get $x) (local.get $y))))\n  (func (export \"f64.no_fold_le_select\") (param $x f64) (param $y f64) (result f64) (select (local.get $x) (local.get $y) (f64.le (local.get $x) (local.get $y))))\n  (func (export \"f64.no_fold_gt_select\") (param $x f64) (param $y f64) (result f64) (select (local.get $x) (local.get $y) (f64.gt (local.get $x) (local.get $y))))\n  (func (export \"f64.no_fold_ge_select\") (param $x f64) (param $y f64) (result f64) (select (local.get $x) (local.get $y) (f64.ge (local.get $x) (local.get $y)))))",
    "(assert_return (invoke \"f32.no_fold_lt_select\" (f32.const 0.0) (f32.const nan)) (f32.const nan))",
    "(assert_return (invoke \"f32.no_fold_lt_select\" (f32.const nan) (f32.const 0.0)) (f32.const 0.0))",
    "(assert_return (invoke \"f32.no_fold_lt_select\" (f32.const 0.0) (f32.const -0.0)) (f32.const -0.0))",
    "(assert_return (invoke \"f32.no_fold_lt_select\" (f32.const -0.0) (f32.const 0.0)) (f32.const 0.0))",
    "(assert_return (invoke \"f32.no_fold_le_select\" (f32.const 0.0) (f32.const nan)) (f32.const nan))",
    "(assert_return (invoke \"f32.no_fold_le_select\" (f32.const nan) (f32.const 0.0)) (f32.const 0.0))",
    "(assert_return (invoke \"f32.no_fold_le_select\" (f32.const 0.0) (f32.const -0.0)) (f32.const 0.0))",
    "(assert_return (invoke \"f32.no_fold_le_select\" (f32.const -0.0) (f32.const 0.0)) (f32.const -0.0))",
    "(assert_return (invoke \"f32.no_fold_gt_select\" (f32.const 0.0) (f32.const nan)) (f32.const nan))",
    "(assert_return (invoke \"f32.no_fold_gt_select\" (f32.const nan) (f32.const 0.0)) (f32.const 0.0))",
    "(assert_return (invoke \"f32.no_fold_gt_select\" (f32.const 0.0) (f32.const -0.0)) (f32.const -0.0))",
    "(assert_return (invoke \"f32.no_fold_gt_select\" (f32.const -0.0) (f32.const 0.0)) (f32.const 0.0))",
    "(assert_return (invoke \"f32.no_fold_ge_select\" (f32.const 0.0) (f32.const nan)) (f32.const nan))",
    "(assert_return (invoke \"f32.no_fold_ge_select\" (f32.const nan) (f32.const 0.0)) (f32.const 0.0))",
    "(assert_return (invoke \"f32.no_fold_ge_select\" (f32.const 0.0) (f32.const -0.0)) (f32.const 0.0))",
    "(assert_return (invoke \"f32.no_fold_ge_select\" (f32.const -0.0) (f32.const 0.0)) (f32.const -0.0))",
    "(assert_return (invoke \"f64.no_fold_lt_select\" (f64.const 0.0) (f64.const nan)) (f64.const nan))",
    "(assert_return (invoke \"f64.no_fold_lt_select\" (f64.const nan) (f64.const 0.0)) (f64.const 0.0))",
    "(assert_return (invoke \"f64.no_fold_lt_select\" (f64.const 0.0) (f64.const -0.0)) (f64.const -0.0))",
    "(assert_return (invoke \"f64.no_fold_lt_select\" (f64.const -0.0) (f64.const 0.0)) (f64.const 0.0))",
    "(assert_return (invoke \"f64.no_fold_le_select\" (f64.const 0.0) (f64.const nan)) (f64.const nan))",
    "(assert_return (invoke \"f64.no_fold_le_select\" (f64.const nan) (f64.const 0.0)) (f64.const 0.0))",
    "(assert_return (invoke \"f64.no_fold_le_select\" (f64.const 0.0) (f64.const -0.0)) (f64.const 0.0))",
    "(assert_return (invoke \"f64.no_fold_le_select\" (f64.const -0.0) (f64.const 0.0)) (f64.const -0.0))",
    "(assert_return (invoke \"f64.no_fold_gt_select\" (f64.const 0.0) (f64.const nan)) (f64.const nan))",
    "(assert_return (invoke \"f64.no_fold_gt_select\" (f64.const nan) (f64.const 0.0)) (f64.const 0.0))",
    "(assert_return (invoke \"f64.no_fold_gt_select\" (f64.const 0.0) (f64.const -0.0)) (f64.const -0.0))",
    "(assert_return (invoke \"f64.no_fold_gt_select\" (f64.const -0.0) (f64.const 0.0)) (f64.const 0.0))",
    "(assert_return (invoke \"f64.no_fold_ge_select\" (f64.const 0.0) (f64.const nan)) (f64.const nan))",
    "(assert_return (invoke \"f64.no_fold_ge_select\" (f64.const nan) (f64.const 0.0)) (f64.const 0.0))",
    "(assert_return (invoke \"f64.no_fold_ge_select\" (f64.const 0.0) (f64.const -0.0)) (f64.const 0.0))",
    "(assert_return (invoke \"f64.no_fold_ge_select\" (f64.const -0.0) (f64.const 0.0)) (f64.const -0.0))",
    "(module \n  (func (export \"f32.no_fold_lt_if\") (param $x f32) (param $y f32) (result f32) (if (result f32) (f32.lt (local.get $x) (local.get $y)) (then (local.get $x)) (else (local.get $y)) ) )\n  (func (export \"f32.no_fold_le_if\") (param $x f32) (param $y f32) (result f32) (if (result f32) (f32.le (local.get $x) (local.get $y)) (then (local.get $x)) (else (local.get $y)) ) )\n  (func (export \"f32.no_fold_gt_if\") (param $x f32) (param $y f32) (result f32) (if (result f32) (f32.gt (local.get $x) (local.get $y)) (then (local.get $x)) (else (local.get $y)) ) )\n  (func (export \"f32.no_fold_ge_if\") (param $x f32) (param $y f32) (result f32) (if (result f32) (f32.ge (local.get $x) (local.get $y)) (then (local.get $x)) (else (local.get $y)) ) )\n  (func (export \"f64.no_fold_lt_if\") (param $x f64) (param $y f64) (result f64) (if (result f64) (f64.lt (local.get $x) (local.get $y)) (then (local.get $x)) (else (local.get $y)) ) )\n  (func (export \"f64.no_fold_le_if\") (param $x f64) (param $y f64) (result f64) (if (result f64) (f64.le (local.get $x) (local.get $y)) (then (local.get $x)) (else (local.get $y)) ) )\n  (func (export \"f64.no_fold_gt_if\") (param $x f64) (param $y f64) (result f64) (if (result f64) (f64.gt (local.get $x) (local.get $y)) (then (local.get $x)) (else (local.get $y)) ) )\n  (func (export \"f64.no_fold_ge_if\") (param $x f64) (param $y f64) (result f64) (if (result f64) (f64.ge (local.get $x) (local.get $y)) (then (local.get $x)) (else (local.get $y)) ) ))",
    "(assert_return (invoke \"f32.no_fold_lt_if\" (f32.const 0.0) (f32.const nan)) (f32.const nan))",
    "(assert_return (invoke \"f32.no_fold_lt_if\" (f32.const nan) (f32.const 0.0)) (f32.const 0.0))",
    "(assert_return (invoke \"f32.no_fold_lt_if\" (f32.const 0.0) (f32.const -0.0)) (f32.const -0.0))",
    "(assert_return (invoke \"f32.no_fold_lt_if\" (f32.const -0.0) (f32.const 0.0)) (f32.const 0.0))",
    "(assert_return (invoke \"f32.no_fold_le_if\" (f32.const 0.0) (f32.const nan)) (f32.const nan))",
    "(assert_return (invoke \"f32.no_fold_le_if\" (f32.const nan) (f32.const 0.0)) (f32.const 0.0))",
    "(assert_return (invoke \"f32.no_fold_le_if\" (f32.const 0.0) (f32.const -0.0)) (f32.const 0.0))",
    "(assert_return (invoke \"f32.no_fold_le_if\" (f32.const -0.0) (f32.const 0.0)) (f32.const -0.0))",
    "(assert_return (invoke \"f32.no_fold_gt_if\" (f32.const 0.0) (f32.const nan)) (f32.const nan))",
    "(assert_return (invoke \"f32.no_fold_gt_if\" (f32.const nan) (f32.const 0.0)) (f32.const 0.0))",
    "(assert_return (invoke \"f32.no_fold_gt_if\" (f32.const 0.0) (f32.const -0.0)) (f32.const -0.0))",
    "(assert_return (invoke \"f32.no_fold_gt_if\" (f32.const -0.0) (f32.const 0.0)) (f32.const 0.0))",
    "(assert_return (invoke \"f32.no_fold_ge_if\" (f32.const 0.0) (f32.const nan)) (f32.const nan))",
    "(assert_return (invoke \"f32.no_fold_ge_if\" (f32.const nan) (f32.const 0.0)) (f32.const 0.0))",
    "(assert_return (invoke \"f32.no_fold_ge_if\" (f32.const 0.0) (f32.const -0.0)) (f32.const 0.0))",
    "(assert_return (invoke \"f32.no_fold_ge_if\" (f32.const -0.0) (f32.const 0.0)) (f32.const -0.0))",
    "(assert_return (invoke \"f64.no_fold_lt_if\" (f64.const 0.0) (f64.const nan)) (f64.const nan))",
    "(assert_return (invoke \"f64.no_fold_lt_if\" (f64.const nan) (f64.const 0.0)) (f64.const 0.0))",
    "(assert_return (invoke \"f64.no_fold_lt_if\" (f64.const 0.0) (f64.const -0.0)) (f64.const -0.0))",
    "(assert_return (invoke \"f64.no_fold_lt_if\" (f64.const -0.0) (f64.const 0.0)) (f64.const 0.0))",
    "(assert_return (invoke \"f64.no_fold_le_if\" (f64.const 0.0) (f64.const nan)) (f64.const nan))",
    "(assert_return (invoke \"f64.no_fold_le_if\" (f64.const nan) (f64.const 0.0)) (f64.const 0.0))",
    "(assert_return (invoke \"f64.no_fold_le_if\" (f64.const 0.0) (f64.const -0.0)) (f64.const 0.0))",
    "(assert_return (invoke \"f64.no_fold_le_if\" (f64.const -0.0) (f64.const 0.0)) (f64.const -0.0))",
    "(assert_return (invoke \"f64.no_fold_gt_if\" (f64.const 0.0) (f64.const nan)) (f64.const nan))",
    "(assert_return (invoke \"f64.no_fold_gt_if\" (f64.const nan) (f64.const 0.0)) (f64.const 0.0))",
    "(assert_return (invoke \"f64.no_fold_gt_if\" (f64.const 0.0) (f64.const -0.0)) (f64.const -0.0))",
    "(assert_return (invoke \"f64.no_fold_gt_if\" (f64.const -0.0) (f64.const 0.0)) (f64.const 0.0))",
    "(assert_return (invoke \"f64.no_fold_ge_if\" (f64.const 0.0) (f64.const nan)) (f64.const nan))",
    "(assert_return (invoke \"f64.no_fold_ge_if\" (f64.const nan) (f64.const 0.0)) (f64.const 0.0))",
    "(assert_return (invoke \"f64.no_fold_ge_if\" (f64.const 0.0) (f64.const -0.0)) (f64.const 0.0))",
    "(assert_return (invoke \"f64.no_fold_ge_if\" (f64.const -0.0) (f64.const 0.0)) (f64.const -0.0))",
    "(module \n  (func (export \"f32.no_fold_lt_select_to_abs\") (param $x f32) (result f32) (select (f32.neg (local.get $x)) (local.get $x) (f32.lt (local.get $x) (f32.const 0.0))))\n  (func (export \"f32.no_fold_le_select_to_abs\") (param $x f32) (result f32) (select (f32.neg (local.get $x)) (local.get $x) (f32.le (local.get $x) (f32.const -0.0))))\n  (func (export \"f32.no_fold_gt_select_to_abs\") (param $x f32) (result f32) (select (local.get $x) (f32.neg (local.get $x)) (f32.gt (local.get $x) (f32.const -0.0))))\n  (func (export \"f32.no_fold_ge_select_to_abs\") (param $x f32) (result f32) (select (local.get $x) (f32.neg (local.get $x)) (f32.ge (local.get $x) (f32.const 0.0))))\n  (func (export \"f64.no_fold_lt_select_to_abs\") (param $x f64) (result f64) (select (f64.neg (local.get $x)) (local.get $x) (f64.lt (local.get $x) (f64.const 0.0))))\n  (func (export \"f64.no_fold_le_select_to_abs\") (param $x f64) (result f64) (select (f64.neg (local.get $x)) (local.get $x) (f64.le (local.get $x) (f64.const -0.0))))\n  (func (export \"f64.no_fold_gt_select_to_abs\") (param $x f64) (result f64) (select (local.get $x) (f64.neg (local.get $x)) (f64.gt (local.get $x) (f64.const -0.0))))\n  (func (export \"f64.no_fold_ge_select_to_abs\") (param $x f64) (result f64) (select (local.get $x) (f64.neg (local.get $x)) (f64.ge (local.get $x) (f64.const 0.0)))))",
    "(assert_return (invoke \"f32.no_fold_lt_select_to_abs\" (f32.const nan:0x200000)) (f32.const nan:0x200000))",
    "(assert_return (invoke \"f32.no_fold_lt_select_to_abs\" (f32.const -nan)) (f32.const -nan))",
    "(assert_return (invoke \"f32.no_fold_lt_select_to_abs\" (f32.const 0.0)) (f32.const 0.0))",
    "(assert_return (invoke \"f32.no_fold_lt_select_to_abs\" (f32.const -0.0)) (f32.const -0.0))",
    "(assert_return (invoke \"f32.no_fold_le_select_to_abs\" (f32.const nan:0x200000)) (f32.const nan:0x200000))",
    "(assert_return (invoke \"f32.no_fold_le_select_to_abs\" (f32.const -nan)) (f32.const -nan))",
    "(assert_return (invoke \"f32.no_fold_le_select_to_abs\" (f32.const 0.0)) (f32.const -0.0))",
    "(assert_return (invoke \"f32.no_fold_le_select_to_abs\" (f32.const -0.0)) (f32.const 0.0))",
    "(assert_return (invoke \"f32.no_fold_gt_select_to_abs\" (f32.const nan:0x200000)) (f32.const -nan:0x200000))",
    "(assert_return (invoke \"f32.no_fold_gt_select_to_abs\" (f32.const -nan)) (f32.const nan))",
    "(assert_return (invoke \"f32.no_fold_gt_select_to_abs\" (f32.const 0.0)) (f32.const -0.0))",
    "(assert_return (invoke \"f32.no_fold_gt_select_to_abs\" (f32.const -0.0)) (f32.const 0.0))",
    "(assert_return (invoke \"f32.no_fold_ge_select_to_abs\" (f32.const nan:0x200000)) (f32.const -nan:0x200000))",
    "(assert_return (invoke \"f32.no_fold_ge_select_to_abs\" (f32.const -nan)) (f32.const nan))",
    "(assert_return (invoke \"f32.no_fold_ge_select_to_abs\" (f32.const 0.0)) (f32.const 0.0))",
    "(assert_return (invoke \"f32.no_fold_ge_select_to_abs\" (f32.const -0.0)) (f32.const -0.0))",
    "(assert_return (invoke \"f64.no_fold_lt_select_to_abs\" (f64.const nan:0x4000000000000)) (f64.const nan:0x4000000000000))",
    "(assert_return (invoke \"f64.no_fold_lt_select_to_abs\" (f64.const -nan)) (f64.const -nan))",
    "(assert_return (invoke \"f64.no_fold_lt_select_to_abs\" (f64.const 0.0)) (f64.const 0.0))",
    "(assert_return (invoke \"f64.no_fold_lt_select_to_abs\" (f64.const -0.0)) (f64.const -0.0))",
    "(assert_return (invoke \"f64.no_fold_le_select_to_abs\" (f64.const nan:0x4000000000000)) (f64.const nan:0x4000000000000))",
    "(assert_return (invoke \"f64.no_fold_le_select_to_abs\" (f64.const -nan)) (f64.const -nan))",
    "(assert_return (invoke \"f64.no_fold_le_select_to_abs\" (f64.const 0.0)) (f64.const -0.0))",
    "(assert_return (invoke \"f64.no_fold_le_select_to_abs\" (f64.const -0.0)) (f64.const 0.0))",
    "(assert_return (invoke \"f64.no_fold_gt_select_to_abs\" (f64.const nan:0x4000000000000)) (f64.const -nan:0x4000000000000))",
    "(assert_return (invoke \"f64.no_fold_gt_select_to_abs\" (f64.const -nan)) (f64.const nan))",
    "(assert_return (invoke \"f64.no_fold_gt_select_to_abs\" (f64.const 0.0)) (f64.const -0.0))",
    "(assert_return (invoke \"f64.no_fold_gt_select_to_abs\" (f64.const -0.0)) (f64.const 0.0))",
    "(assert_return (invoke \"f64.no_fold_ge_select_to_abs\" (f64.const nan:0x4000000000000)) (f64.const -nan:0x4000000000000))",
    "(assert_return (invoke \"f64.no_fold_ge_select_to_abs\" (f64.const -nan)) (f64.const nan))",
    "(assert_return (invoke \"f64.no_fold_ge_select_to_abs\" (f64.const 0.0)) (f64.const 0.0))",
    "(assert_return (invoke \"f64.no_fold_ge_select_to_abs\" (f64.const -0.0)) (f64.const -0.0))",
    "(module \n  (func (export \"f32.no_fold_lt_if_to_abs\") (param $x f32) (result f32) (if (result f32) (f32.lt (local.get $x) (f32.const 0.0)) (then (f32.neg (local.get $x))) (else (local.get $x)) ) )\n  (func (export \"f32.no_fold_le_if_to_abs\") (param $x f32) (result f32) (if (result f32) (f32.le (local.get $x) (f32.const -0.0)) (then (f32.neg (local.get $x))) (else (local.get $x)) ) )\n  (func (export \"f32.no_fold_gt_if_to_abs\") (param $x f32) (result f32) (if (result f32) (f32.gt (local.get $x) (f32.const -0.0)) (then (local.get $x)) (else (f32.neg (local.get $x))) ) )\n  (func (export \"f32.no_fold_ge_if_to_abs\") (param $x f32) (result f32) (if (result f32) (f32.ge (local.get $x) (f32.const 0.0)) (then (local.get $x)) (else (f32.neg (local.get $x))) ) )\n  (func (export \"f64.no_fold_lt_if_to_abs\") (param $x f64) (result f64) (if (result f64) (f64.lt (local.get $x) (f64.const 0.0)) (then (f64.neg (local.get $x))) (else (local.get $x)) ) )\n  (func (export \"f64.no_fold_le_if_to_abs\") (param $x f64) (result f64) (if (result f64) (f64.le (local.get $x) (f64.const -0.0)) (then (f64.neg (local.get $x))) (else (local.get $x)) ) )\n  (func (export \"f64.no_fold_gt_if_to_abs\") (param $x f64) (result f64) (if (result f64) (f64.gt (local.get $x) (f64.const -0.0)) (then (local.get $x)) (else (f64.neg (local.get $x))) ) )\n  (func (export \"f64.no_fold_ge_if_to_abs\") (param $x f64) (result f64) (if (result f64) (f64.ge (local.get $x) (f64.const 0.0)) (then (local.get $x)) (else (f64.neg (local.get $x))) ) ))",
    "(assert_return (invoke \"f32.no_fold_lt_if_to_abs\" (f32.const nan:0x200000)) (f32.const nan:0x200000))",
    "(assert_return (invoke \"f32.no_fold_lt_if_to_abs\" (f32.const -nan)) (f32.const -nan))",
    "(assert_return (invoke \"f32.no_fold_lt_if_to_abs\" (f32.const 0.0)) (f32.const 0.0))",
    "(assert_return (invoke \"f32.no_fold_lt_if_to_abs\" (f32.const -0.0)) (f32.const -0.0))",
    "(assert_return (invoke \"f32.no_fold_le_if_to_abs\" (f32.const nan:0x200000)) (f32.const nan:0x200000))",
    "(assert_return (invoke \"f32.no_fold_le_if_to_abs\" (f32.const -nan)) (f32.const -nan))",
    "(assert_return (invoke \"f32.no_fold_le_if_to_abs\" (f32.const 0.0)) (f32.const -0.0))",
    "(assert_return (invoke \"f32.no_fold_le_if_to_abs\" (f32.const -0.0)) (f32.const 0.0))",
    "(assert_return (invoke \"f32.no_fold_gt_if_to_abs\" (f32.const nan:0x200000)) (f32.const -nan:0x200000))",
    "(assert_return (invoke \"f32.no_fold_gt_if_to_abs\" (f32.const -nan)) (f32.const nan))",
    "(assert_return (invoke \"f32.no_fold_gt_if_to_abs\" (f32.const 0.0)) (f32.const -0.0))",
    "(assert_return (invoke \"f32.no_fold_gt_if_to_abs\" (f32.const -0.0)) (f32.const 0.0))",
    "(assert_return (invoke \"f32.no_fold_ge_if_to_abs\" (f32.const nan:0x200000)) (f32.const -nan:0x200000))",
    "(assert_return (invoke \"f32.no_fold_ge_if_to_abs\" (f32.const -nan)) (f32.const nan))",
    "(assert_return (invoke \"f32.no_fold_ge_if_to_abs\" (f32.const 0.0)) (f32.const 0.0))",
    "(assert_return (invoke \"f32.no_fold_ge_if_to_abs\" (f32.const -0.0)) (f32.const -0.0))",
    "(assert_return (invoke \"f64.no_fold_lt_if_to_abs\" (f64.const nan:0x4000000000000)) (f64.const nan:0x4000000000000))",
    "(assert_return (invoke \"f64.no_fold_lt_if_to_abs\" (f64.const -nan)) (f64.const -nan))",
    "(assert_return (invoke \"f64.no_fold_lt_if_to_abs\" (f64.const 0.0)) (f64.const 0.0))",
    "(assert_return (invoke \"f64.no_fold_lt_if_to_abs\" (f64.const -0.0)) (f64.const -0.0))",
    "(assert_return (invoke \"f64.no_fold_le_if_to_abs\" (f64.const nan:0x4000000000000)) (f64.const nan:0x4000000000000))",
    "(assert_return (invoke \"f64.no_fold_le_if_to_abs\" (f64.const -nan)) (f64.const -nan))",
    "(assert_return (invoke \"f64.no_fold_le_if_to_abs\" (f64.const 0.0)) (f64.const -0.0))",
    "(assert_return (invoke \"f64.no_fold_le_if_to_abs\" (f64.const -0.0)) (f64.const 0.0))",
    "(assert_return (invoke \"f64.no_fold_gt_if_to_abs\" (f64.const nan:0x4000000000000)) (f64.const -nan:0x4000000000000))",
    "(assert_return (invoke \"f64.no_fold_gt_if_to_abs\" (f64.const -nan)) (f64.const nan))",
    "(assert_return (invoke \"f64.no_fold_gt_if_to_abs\" (f64.const 0.0)) (f64.const -0.0))",
    "(assert_return (invoke \"f64.no_fold_gt_if_to_abs\" (f64.const -0.0)) (f64.const 0.0))",
    "(assert_return (invoke \"f64.no_fold_ge_if_to_abs\" (f64.const nan:0x4000000000000)) (f64.const -nan:0x4000000000000))",
    "(assert_return (invoke \"f64.no_fold_ge_if_to_abs\" (f64.const -nan)) (f64.const nan))",
    "(assert_return (invoke \"f64.no_fold_ge_if_to_abs\" (f64.const 0.0)) (f64.const 0.0))",
    "(assert_return (invoke \"f64.no_fold_ge_if_to_abs\" (f64.const -0.0)) (f64.const -0.0))",
    "(module \n  (func (export \"f32.incorrect_correction\") (result f32) (f32.sub (f32.sub (f32.add (f32.const 1.333) (f32.const 1.225)) (f32.const 1.333)) (f32.const 1.225)) )\n  (func (export \"f64.incorrect_correction\") (result f64) (f64.sub (f64.sub (f64.add (f64.const 1.333) (f64.const 1.225)) (f64.const 1.333)) (f64.const 1.225)) ))",
    "(assert_return (invoke \"f32.incorrect_correction\") (f32.const 0x1p-23))",
    "(assert_return (invoke \"f64.incorrect_correction\") (f64.const -0x1p-52))",
    "(module \n  (func (export \"calculate\") (result f32) (local $x f32) (local $r f32) (local $q f32) (local $z0 f32) (local $z1 f32) (local.set $x (f32.const 156.25)) (local.set $r (f32.const 208.333333334)) (local.set $q (f32.const 1.77951304201)) (local.set $z0 (f32.div (f32.mul (f32.neg (local.get $r)) (local.get $x)) (f32.sub (f32.mul (local.get $x) (local.get $q)) (local.get $r)))) (local.set $z1 (f32.div (f32.mul (f32.neg (local.get $r)) (local.get $x)) (f32.sub (f32.mul (local.get $x) (local.get $q)) (local.get $r)))) (block (br_if 0 (f32.eq (local.get $z0) (local.get $z1))) (unreachable)) (local.get $z1) ))",
    "(assert_return (invoke \"calculate\") (f32.const -0x1.d2ed46p+8))",
    "(module \n  (func (export \"calculate\") (result f64) (local $x f64) (local $r f64) (local $q f64) (local $z0 f64) (local $z1 f64) (local.set $x (f64.const 156.25)) (local.set $r (f64.const 208.333333334)) (local.set $q (f64.const 1.77951304201)) (local.set $z0 (f64.div (f64.mul (f64.neg (local.get $r)) (local.get $x)) (f64.sub (f64.mul (local.get $x) (local.get $q)) (local.get $r)))) (local.set $z1 (f64.div (f64.mul (f64.neg (local.get $r)) (local.get $x)) (f64.sub (f64.mul (local.get $x) (local.get $q)) (local.get $r)))) (block (br_if 0 (f64.eq (local.get $z0) (local.get $z1))) (unreachable)) (local.get $z1) ))",
    "(assert_return (invoke \"calculate\") (f64.const -0x1.d2ed4d0218c93p+8))",
    "(module \n  (func (export \"llvm_pr26746\") (param $x f32) (result f32) (f32.sub (f32.const 0.0) (f32.sub (f32.const -0.0) (local.get $x))) ))",
    "(assert_return (invoke \"llvm_pr26746\" (f32.const -0.0)) (f32.const 0.0))",
    "(module \n  (func (export \"llvm_pr27153\") (param $x i32) (result f32) (f32.add (f32.convert_i32_s (i32.and (local.get $x) (i32.const 268435455))) (f32.const -8388608.0)) ))",
    "(assert_return (invoke \"llvm_pr27153\" (i32.const 33554434)) (f32.const 25165824.000000))",
    "(module \n  (func (export \"llvm_pr27036\") (param $x i32) (param $y i32) (result f32) (f32.add (f32.convert_i32_s (i32.or (local.get $x) (i32.const -25034805))) (f32.convert_i32_s (i32.and (local.get $y) (i32.const 14942208)))) ))",
    "(assert_return (invoke \"llvm_pr27036\" (i32.const -25034805) (i32.const 14942208)) (f32.const -0x1.340068p+23))",
    "(module \n  (func (export \"thepast0\") (param $a f64) (param $b f64) (param $c f64) (param $d f64) (result f64) (f64.div (f64.mul (local.get $a) (local.get $b)) (f64.mul (local.get $c) (local.get $d))) )\n  (func (export \"thepast1\") (param $a f64) (param $b f64) (param $c f64) (result f64) (f64.sub (f64.mul (local.get $a) (local.get $b)) (local.get $c)) )\n  (func (export \"thepast2\") (param $a f32) (param $b f32) (param $c f32) (result f32) (f32.mul (f32.mul (local.get $a) (local.get $b)) (local.get $c)) ))",
    "(assert_return (invoke \"thepast0\" (f64.const 0x1p-1021) (f64.const 0x1.fffffffffffffp-1) (f64.const 0x1p1) (f64.const 0x1p-1)) (f64.const 0x1.fffffffffffffp-1022))",
    "(assert_return (invoke \"thepast1\" (f64.const 0x1p-54) (f64.const 0x1.fffffffffffffp-1) (f64.const 0x1p-54)) (f64.const -0x1p-107))",
    "(assert_return (invoke \"thepast2\" (f32.const 0x1p-125) (f32.const 0x1p-1) (f32.const 0x1p0)) (f32.const 0x1p-126))",
    "(module \n  (func (export \"inverse\") (param $x f32) (result f32) (f32.div (f32.const 1.0) (local.get $x)) ))",
    "(assert_return (invoke \"inverse\" (f32.const 96.0)) (f32.const 0x1.555556p-7))",
    "(module \n  (func (export \"f32_sqrt_minus_2\") (param $x f32) (result f32) (f32.sub (f32.sqrt (local.get $x)) (f32.const 2.0)) )\n  (func (export \"f64_sqrt_minus_2\") (param $x f64) (result f64) (f64.sub (f64.sqrt (local.get $x)) (f64.const 2.0)) ))",
    "(assert_return (invoke \"f32_sqrt_minus_2\" (f32.const 4.0)) (f32.const 0.0))",
    "(assert_return (invoke \"f64_sqrt_minus_2\" (f64.const 4.0)) (f64.const 0.0))",
    "(module \n  (func (export \"f32.no_fold_recip_recip\") (param $x f32) (result f32) (f32.div (f32.const 1.0) (f32.div (f32.const 1.0) (local.get $x))))\n  (func (export \"f64.no_fold_recip_recip\") (param $x f64) (result f64) (f64.div (f64.const 1.0) (f64.div (f64.const 1.0) (local.get $x)))))",
    "(assert_return (invoke \"f32.no_fold_recip_recip\" (f32.const -0x1.e8bf18p+65)) (f32.const -0x1.e8bf16p+65))",
    "(assert_return (invoke \"f32.no_fold_recip_recip\" (f32.const 0x1.e24248p-77)) (f32.const 0x1.e24246p-77))",
    "(assert_return (invoke \"f32.no_fold_recip_recip\" (f32.const 0x1.caf0e8p-64)) (f32.const 0x1.caf0eap-64))",
    "(assert_return (invoke \"f32.no_fold_recip_recip\" (f32.const -0x1.e66982p+4)) (f32.const -0x1.e66984p+4))",
    "(assert_return (invoke \"f32.no_fold_recip_recip\" (f32.const 0x1.f99916p+70)) (f32.const 0x1.f99914p+70))",
    "(assert_return (invoke \"f32.no_fold_recip_recip\" (f32.const -0x0p+0)) (f32.const -0x0p+0))",
    "(assert_return (invoke \"f32.no_fold_recip_recip\" (f32.const 0x0p+0)) (f32.const 0x0p+0))",
    "(assert_return (invoke \"f32.no_fold_recip_recip\" (f32.const -inf)) (f32.const -inf))",
    "(assert_return (invoke \"f32.no_fold_recip_recip\" (f32.const inf)) (f32.const inf))",
    "(assert_return (invoke \"f64.no_fold_recip_recip\" (f64.const -0x1.d81248dda63dp+148)) (f64.const -0x1.d81248dda63d1p+148))",
    "(assert_return (invoke \"f64.no_fold_recip_recip\" (f64.const -0x1.f4750312039e3p+66)) (f64.const -0x1.f4750312039e2p+66))",
    "(assert_return (invoke \"f64.no_fold_recip_recip\" (f64.const 0x1.fa50630eec7f6p+166)) (f64.const 0x1.fa50630eec7f5p+166))",
    "(assert_return (invoke \"f64.no_fold_recip_recip\" (f64.const 0x1.db0598617ba92p-686)) (f64.const 0x1.db0598617ba91p-686))",
    "(assert_return (invoke \"f64.no_fold_recip_recip\" (f64.const 0x1.85f1638a0c82bp+902)) (f64.const 0x1.85f1638a0c82ap+902))",
    "(assert_return (invoke \"f64.no_fold_recip_recip\" (f64.const -0x0p+0)) (f64.const -0x0p+0))",
    "(assert_return (invoke \"f64.no_fold_recip_recip\" (f64.const 0x0p+0)) (f64.const 0x0p+0))",
    "(assert_return (invoke \"f64.no_fold_recip_recip\" (f64.const -inf)) (f64.const -inf))",
    "(assert_return (invoke \"f64.no_fold_recip_recip\" (f64.const inf)) (f64.const inf))",
    "(module \n  (func (export \"f32.no_algebraic_factoring\") (param $x f32) (param $y f32) (result f32) (f32.mul (f32.add (local.get $x) (local.get $y)) (f32.sub (local.get $x) (local.get $y))))\n  (func (export \"f64.no_algebraic_factoring\") (param $x f64) (param $y f64) (result f64) (f64.mul (f64.add (local.get $x) (local.get $y)) (f64.sub (local.get $x) (local.get $y)))))",
    "(assert_return (invoke \"f32.no_algebraic_factoring\" (f32.const -0x1.ef678ep-55) (f32.const 0x1.c160b8p-54)) (f32.const -0x1.129402p-107))",
    "(assert_return (invoke \"f32.no_algebraic_factoring\" (f32.const -0x1.2d76bcp+24) (f32.const 0x1.f4089cp+24)) (f32.const -0x1.36d89ap+49))",
    "(assert_return (invoke \"f32.no_algebraic_factoring\" (f32.const 0x1.7ca2b2p+45) (f32.const -0x1.08513cp+47)) (f32.const -0x1.db10dep+93))",
    "(assert_return (invoke \"f32.no_algebraic_factoring\" (f32.const 0x1.7d5e3p+17) (f32.const -0x1.c783b4p+7)) (f32.const 0x1.1c10a6p+35))",
    "(assert_return (invoke \"f32.no_algebraic_factoring\" (f32.const -0x1.daf96p+7) (f32.const -0x1.dac6bp+19)) (f32.const -0x1.b8422ep+39))",
    "(assert_return (invoke \"f64.no_algebraic_factoring\" (f64.const 0x1.e17c0a02ac6b5p-476) (f64.const 0x1.e8f13f1fcdc14p-463)) (f64.const -0x1.d2ec518f62863p-925))",
    "(assert_return (invoke \"f64.no_algebraic_factoring\" (f64.const 0x1.971b55a57e3a3p-377) (f64.const 0x1.edeb4233c1b27p-399)) (f64.const 0x1.43b3f69fb258bp-753))",
    "(assert_return (invoke \"f64.no_algebraic_factoring\" (f64.const -0x1.c3b9dc02472fap-378) (f64.const -0x1.74e9faebaff14p-369)) (f64.const -0x1.0f9c07e8caa25p-737))",
    "(assert_return (invoke \"f64.no_algebraic_factoring\" (f64.const -0x1.afaf4688ed019p+179) (f64.const 0x1.b07171cb49e94p+188)) (f64.const -0x1.6d3f2e2bebcf7p+377))",
    "(assert_return (invoke \"f64.no_algebraic_factoring\" (f64.const 0x1.4377a98948f12p+114) (f64.const -0x1.500c05bd24c97p+90)) (f64.const 0x1.98b72dbf7bf72p+228))",
    "(module \n  (func (export \"f32.no_algebraic_factoring\") (param $x f32) (param $y f32) (result f32) (f32.sub (f32.mul (local.get $x) (local.get $x)) (f32.mul (local.get $y) (local.get $y))))\n  (func (export \"f64.no_algebraic_factoring\") (param $x f64) (param $y f64) (result f64) (f64.sub (f64.mul (local.get $x) (local.get $x)) (f64.mul (local.get $y) (local.get $y)))))",
    "(assert_return (invoke \"f32.no_algebraic_factoring\" (f32.const 0x1.8e2c14p-46) (f32.const 0x1.bad59ap-39)) (f32.const -0x1.7efe5p-77))",
    "(assert_return (invoke \"f32.no_algebraic_factoring\" (f32.const -0x1.7ef192p+41) (f32.const -0x1.db184ap+33)) (f32.const 0x1.1e6932p+83))",
    "(assert_return (invoke \"f32.no_algebraic_factoring\" (f32.const 0x1.7eb458p-12) (f32.const -0x1.52c498p-13)) (f32.const 0x1.cc0bc6p-24))",
    "(assert_return (invoke \"f32.no_algebraic_factoring\" (f32.const 0x1.2675c6p-44) (f32.const -0x1.edd31ap-46)) (f32.const 0x1.17294cp-88))",
    "(assert_return (invoke \"f32.no_algebraic_factoring\" (f32.const 0x1.9a5f92p+51) (f32.const -0x1.2b0098p+52)) (f32.const -0x1.7189a6p+103))",
    "(assert_return (invoke \"f64.no_algebraic_factoring\" (f64.const 0x1.749a128f18f69p+356) (f64.const -0x1.0bc97ee1354e1p+337)) (f64.const 0x1.0f28115518d74p+713))",
    "(assert_return (invoke \"f64.no_algebraic_factoring\" (f64.const -0x1.2dab01b2215eap+309) (f64.const -0x1.e12b288bff2bdp+331)) (f64.const -0x1.c4319ad25d201p+663))",
    "(assert_return (invoke \"f64.no_algebraic_factoring\" (f64.const 0x1.3ed898431e102p+42) (f64.const -0x1.c409183fa92e6p+39)) (f64.const 0x1.80a611103c71dp+84))",
    "(assert_return (invoke \"f64.no_algebraic_factoring\" (f64.const -0x1.be663e4c0e4b2p+182) (f64.const -0x1.da85703760d25p+166)) (f64.const 0x1.853434f1a2ffep+365))",
    "(assert_return (invoke \"f64.no_algebraic_factoring\" (f64.const -0x1.230e09952df1cp-236) (f64.const -0x1.fa2752adfadc9p-237)) (f64.const 0x1.42e43156bd1b8p-474))",
    "(module (memory (data \"\\01\\00\\00\\00\\01\\00\\00\\80\\01\\00\\00\\00\\01\\00\\00\\80\" \"\\01\\00\\00\\00\\01\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00\" \"\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00\" ))\n  (func (export \"f32.simple_x4_sum\") (param $i i32) (param $j i32) (param $k i32) (local $x0 f32) (local $x1 f32) (local $x2 f32) (local $x3 f32) (local $y0 f32) (local $y1 f32) (local $y2 f32) (local $y3 f32) (local.set $x0 (f32.load offset=0 (local.get $i))) (local.set $x1 (f32.load offset=4 (local.get $i))) (local.set $x2 (f32.load offset=8 (local.get $i))) (local.set $x3 (f32.load offset=12 (local.get $i))) (local.set $y0 (f32.load offset=0 (local.get $j))) (local.set $y1 (f32.load offset=4 (local.get $j))) (local.set $y2 (f32.load offset=8 (local.get $j))) (local.set $y3 (f32.load offset=12 (local.get $j))) (f32.store offset=0 (local.get $k) (f32.add (local.get $x0) (local.get $y0))) (f32.store offset=4 (local.get $k) (f32.add (local.get $x1) (local.get $y1))) (f32.store offset=8 (local.get $k) (f32.add (local.get $x2) (local.get $y2))) (f32.store offset=12 (local.get $k) (f32.add (local.get $x3) (local.get $y3))) )\n  (func (export \"f32.load\") (param $k i32) (result f32) (f32.load (local.get $k)) ))",
    "(assert_return (invoke \"f32.simple_x4_sum\" (i32.const 0) (i32.const 16) (i32.const 32)))",
    "(assert_return (invoke \"f32.load\" (i32.const 32)) (f32.const 0x1p-148))",
    "(assert_return (invoke \"f32.load\" (i32.const 36)) (f32.const 0x0p+0))",
    "(assert_return (invoke \"f32.load\" (i32.const 40)) (f32.const 0x1p-149))",
    "(assert_return (invoke \"f32.load\" (i32.const 44)) (f32.const -0x1p-149))",
    "(module (memory (data \"\\01\\00\\00\\00\\00\\00\\00\\00\\01\\00\\00\\00\\00\\00\\00\\80\\01\\00\\00\\00\\00\\00\\00\\00\\01\\00\\00\\00\\00\\00\\00\\80\" \"\\01\\00\\00\\00\\00\\00\\00\\00\\01\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00\" \"\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00\" ))\n  (func (export \"f64.simple_x4_sum\") (param $i i32) (param $j i32) (param $k i32) (local $x0 f64) (local $x1 f64) (local $x2 f64) (local $x3 f64) (local $y0 f64) (local $y1 f64) (local $y2 f64) (local $y3 f64) (local.set $x0 (f64.load offset=0 (local.get $i))) (local.set $x1 (f64.load offset=8 (local.get $i))) (local.set $x2 (f64.load offset=16 (local.get $i))) (local.set $x3 (f64.load offset=24 (local.get $i))) (local.set $y0 (f64.load offset=0 (local.get $j))) (local.set $y1 (f64.load offset=8 (local.get $j))) (local.set $y2 (f64.load offset=16 (local.get $j))) (local.set $y3 (f64.load offset=24 (local.get $j))) (f64.store offset=0 (local.get $k) (f64.add (local.get $x0) (local.get $y0))) (f64.store offset=8 (local.get $k) (f64.add (local.get $x1) (local.get $y1))) (f64.store offset=16 (local.get $k) (f64.add (local.get $x2) (local.get $y2))) (f64.store offset=24 (local.get $k) (f64.add (local.get $x3) (local.get $y3))) )\n  (func (export \"f64.load\") (param $k i32) (result f64) (f64.load (local.get $k)) ))",
    "(assert_return (invoke \"f64.simple_x4_sum\" (i32.const 0) (i32.const 32) (i32.const 64)))",
    "(assert_return (invoke \"f64.load\" (i32.const 64)) (f64.const 0x0.0000000000001p-1021))",
    "(assert_return (invoke \"f64.load\" (i32.const 72)) (f64.const 0x0p+0))",
    "(assert_return (invoke \"f64.load\" (i32.const 80)) (f64.const 0x0.0000000000001p-1022))",
    "(assert_return (invoke \"f64.load\" (i32.const 88)) (f64.const -0x0.0000000000001p-1022))",
    "(module (memory (data \"\\c4\\c5\\57\\24\\a5\\84\\c8\\0b\\6d\\b8\\4b\\2e\\f2\\76\\17\\1c\\ca\\4a\\56\\1e\\1b\\6e\\71\\22\" \"\\5d\\17\\1e\\6e\\bf\\cd\\14\\5c\\c7\\21\\55\\51\\39\\9c\\1f\\b2\\51\\f0\\a3\\93\\d7\\c1\\2c\\ae\" \"\\7e\\a8\\28\\3a\\01\\21\\f4\\0a\\58\\93\\f8\\42\\77\\9f\\83\\39\\6a\\5f\\ba\\f7\\0a\\d8\\51\\6a\" \"\\34\\ca\\ad\\c6\\34\\0e\\d8\\26\\dc\\4c\\33\\1c\\ed\\29\\90\\a8\\78\\0f\\d1\\ce\\76\\31\\23\\83\" \"\\b8\\35\\e8\\f2\\44\\b0\\d3\\a1\\fc\\bb\\32\\e1\\b0\\ba\\69\\44\\09\\d6\\d9\\7d\\ff\\2e\\c0\\5a\" \"\\36\\14\\33\\14\\3e\\a9\\fa\\87\\6d\\8b\\bc\\ce\\9d\\a7\\fd\\c4\\e9\\85\\3f\\dd\\d7\\e1\\18\\a6\" \"\\50\\26\\72\\6e\\3f\\73\\0f\\f8\\12\\93\\23\\34\\61\\76\\12\\48\\c0\\9b\\05\\93\\eb\\ac\\86\\de\" \"\\94\\3e\\55\\e8\\8c\\e8\\dd\\e4\\fc\\95\\47\\be\\56\\03\\21\\20\\4c\\e6\\bf\\7b\\f6\\7f\\d5\\ba\" \"\\73\\1c\\c1\\14\\8f\\c4\\27\\96\\b3\\bd\\33\\ff\\78\\41\\5f\\c0\\5a\\ce\\f6\\67\\6e\\73\\9a\\17\" \"\\66\\70\\03\\f8\\ce\\27\\a3\\52\\b2\\9f\\3b\\bf\\fb\\ae\\ed\\d3\\5a\\f8\\37\\57\\f0\\f5\\6e\\ef\" \"\\b1\\4d\\70\\3d\\54\\a7\\01\\9a\\85\\08\\48\\91\\f5\\9d\\0c\\60\\87\\5b\\d9\\54\\1e\\51\\6d\\88\" \"\\8e\\08\\8c\\a5\\71\\3a\\56\\08\\67\\46\\8f\\8f\\13\\2a\\2c\\ec\\2c\\1f\\b4\\62\\2b\\6f\\41\\0a\" \"\\c4\\65\\42\\a2\\31\\6b\\2c\\7d\\3e\\bb\\75\\ac\\86\\97\\30\\d9\\48\\cd\\9a\\1f\\56\\c4\\c6\\e4\" \"\\12\\c0\\9d\\fb\\ee\\02\\8c\\ce\\1c\\f2\\1e\\a1\\78\\23\\db\\c4\\1e\\49\\03\\d3\\71\\cc\\08\\50\" \"\\c5\\d8\\5c\\ed\\d5\\b5\\65\\ac\\b5\\c9\\21\\d2\\c9\\29\\76\\de\\f0\\30\\1a\\5b\\3c\\f2\\3b\\db\" \"\\3a\\39\\82\\3a\\16\\08\\6f\\a8\\f1\\be\\69\\69\\99\\71\\a6\\05\\d3\\14\\93\\2a\\16\\f2\\2f\\11\" \"\\c7\\7e\\20\\bb\\91\\44\\ee\\f8\\e4\\01\\53\\c0\\b9\\7f\\f0\\bf\\f0\\03\\9c\\6d\\b1\\df\\a2\\44\" \"\\01\\6d\\6b\\71\\2b\\5c\\b3\\21\\19\\46\\5e\\8f\\db\\91\\d3\\7c\\78\\6b\\b7\\12\\00\\8f\\eb\\bd\" \"\\8a\\f5\\d4\\2e\\c4\\c1\\1e\\df\\73\\63\\59\\47\\49\\03\\0a\\b7\\cf\\24\\cf\\9c\\0e\\44\\7a\\9e\" \"\\14\\fb\\42\\bf\\9d\\39\\30\\9e\\a0\\ab\\2f\\d1\\ae\\9e\\6a\\83\\43\\e3\\55\\7d\\85\\bf\\63\\8a\" \"\\f8\\96\\10\\1f\\fe\\6d\\e7\\22\\1b\\e1\\69\\46\\8a\\44\\c8\\c8\\f9\\0c\\2b\\19\\07\\a5\\02\\3e\" \"\\f2\\30\\10\\9a\\85\\8a\\5f\\ef\\81\\45\\a0\\77\\b1\\03\\10\\73\\4b\\ae\\98\\9d\\47\\bf\\9a\\2d\" \"\\3a\\d5\\0f\\03\\66\\e3\\3d\\53\\d9\\40\\ce\\1f\\6f\\32\\2f\\21\\2b\\23\\21\\6c\\62\\d4\\a7\\3e\" \"\\a8\\ce\\28\\31\\2d\\00\\3d\\67\\5e\\af\\a0\\cf\\2e\\d2\\b9\\6b\\84\\eb\\69\\08\\3c\\62\\36\\be\" \"\\12\\fd\\36\\7f\\88\\3e\\ad\\bc\\0b\\c0\\41\\c4\\50\\b6\\e3\\50\\31\\e8\\ce\\e2\\96\\65\\55\\9c\" \"\\16\\46\\e6\\b0\\2d\\3a\\e8\\81\\05\\b0\\bf\\34\\f7\\bc\\10\\1c\\fb\\cc\\3c\\f1\\85\\97\\42\\9f\" \"\\eb\\14\\8d\\3c\\bf\\d7\\17\\88\\49\\9d\\8b\\2b\\b2\\3a\\83\\d1\\4f\\04\\9e\\a1\\0f\\ad\\08\\9d\" \"\\54\\af\\d1\\82\\c3\\ec\\32\\2f\\02\\8f\\05\\21\\2d\\a2\\b7\\e4\\f4\\6f\\2e\\81\\2b\\0b\\9c\\fc\" \"\\cb\\fe\\74\\02\\f9\\db\\f4\\f3\\ea\\00\\a8\\ec\\d1\\99\\74\\26\\dd\\d6\\34\\d5\\25\\b1\\46\\dd\" \"\\9c\\aa\\71\\f5\\60\\b0\\88\\c8\\e0\\0b\\59\\5a\\25\\4f\\29\\66\\f9\\e3\\2e\\fe\\e9\\da\\e5\\18\" \"\\4f\\27\\62\\f4\\ce\\a4\\21\\95\\74\\c7\\57\\64\\27\\9a\\4c\\fd\\54\\7d\\61\\ce\\c3\\ac\\87\\46\" \"\\9c\\fa\\ff\\09\\ca\\79\\97\\67\\24\\74\\ca\\d4\\21\\83\\26\\25\\19\\12\\37\\64\\19\\e5\\65\\e0\" \"\\74\\75\\8e\\dd\\c8\\ef\\74\\c7\\d8\\21\\2b\\79\\04\\51\\46\\65\\60\\03\\5d\\fa\\d8\\f4\\65\\a4\" \"\\9e\\5d\\23\\da\\d7\\8a\\92\\80\\a4\\de\\78\\3c\\f1\\57\\42\\6d\\cd\\c9\\2f\\d5\\a4\\9e\\ab\\40\" \"\\f4\\cb\\1b\\d7\\a3\\ca\\fc\\eb\\a7\\01\\b2\\9a\\69\\4e\\46\\9b\\18\\4e\\dd\\79\\a7\\aa\\a6\\52\" \"\\39\\1e\\ef\\30\\cc\\9b\\bd\\5b\\ee\\4c\\21\\6d\\30\\00\\72\\b0\\46\\5f\\08\\cf\\c5\\b9\\e0\\3e\" \"\\c2\\b3\\0c\\dc\\8e\\64\\de\\19\\42\\79\\cf\\43\\ea\\43\\5d\\8e\\88\\f7\\ab\\15\\dc\\3f\\c8\\67\" \"\\20\\db\\b8\\64\\b1\\47\\1f\\de\\f2\\cb\\3f\\59\\9f\\d8\\46\\90\\dc\\ae\\2f\\22\\f9\\e2\\31\\89\" \"\\d9\\9c\\1c\\4c\\d3\\a9\\4a\\57\\84\\9c\\9f\\ea\\2c\\3c\\ae\\3c\\c3\\1e\\8b\\e5\\4e\\17\\01\\25\" \"\\db\\34\\46\\5f\\15\\ea\\05\\0c\\7c\\d9\\45\\8c\\19\\d0\\73\\8a\\96\\16\\dd\\44\\f9\\05\\b7\\5b\" \"\\71\\b0\\e6\\21\\36\\5f\\75\\89\\91\\73\\75\\ab\\7d\\ae\\d3\\73\\ec\\37\\c6\\ea\\55\\75\\ef\\ea\" \"\\ab\\8b\\7b\\11\\dc\\6d\\1a\\b2\\6a\\c4\\25\\cf\\aa\\e3\\9f\\49\\49\\89\\cb\\37\\9b\\0a\\a7\\01\" \"\\60\\70\\dc\\b7\\c8\\83\\e1\\42\\f5\\be\\ad\\62\\94\\ad\\8d\\a1\" ))\n  (func (export \"f32.kahan_sum\") (param $p i32) (param $n i32) (result f32) (local $sum f32) (local $c f32) (local $t f32) (block $exit (loop $top (local.set $t (f32.sub (f32.sub (local.tee $sum (f32.add (local.get $c) (local.tee $t (f32.sub (f32.load (local.get $p)) (local.get $t)) ) ) ) (local.get $c) ) (local.get $t) ) ) (local.set $p (i32.add (local.get $p) (i32.const 4))) (local.set $c (local.get $sum)) (br_if $top (local.tee $n (i32.add (local.get $n) (i32.const -1)))) ) ) (local.get $sum) )\n  (func (export \"f32.plain_sum\") (param $p i32) (param $n i32) (result f32) (local $sum f32) (block $exit (loop $top (local.set $sum (f32.add (local.get $sum) (f32.load (local.get $p)))) (local.set $p (i32.add (local.get $p) (i32.const 4))) (local.set $n (i32.add (local.get $n) (i32.const -1))) (br_if $top (local.get $n)) ) ) (local.get $sum) ))",
    "(assert_return (invoke \"f32.kahan_sum\" (i32.const 0) (i32.const 256)) (f32.const -0x1.101a1ap+104))",
    "(assert_return (invoke \"f32.plain_sum\" (i32.const 0) (i32.const 256)) (f32.const -0x1.a0343ap+103))",
    "(module (memory (data \"\\13\\05\\84\\42\\5d\\a2\\2c\\c6\\43\\db\\55\\a9\\cd\\da\\55\\e3\\73\\fc\\58\\d6\\ba\\d5\\00\\fd\\83\\35\\42\\88\\8b\\13\\5d\\38\\4a\\47\\0d\\72\\73\\a1\\1a\\ef\\c4\\45\\17\\57\\d8\\c9\\46\\e0\\8d\\6c\\e1\\37\\70\\c8\\83\\5b\\55\\5e\\5a\\2d\\73\\1e\\56\\c8\\e1\\6d\\69\\14\\78\\0a\\8a\\5a\\64\\3a\\09\\c7\\a8\\87\\c5\\f0\\d3\\5d\\e6\\03\\fc\\93\\be\\26\\ca\\d6\\a9\\91\\60\\bd\\b0\\ed\\ae\\f7\\30\\7e\\92\\3a\\6f\\a7\\59\\8e\\aa\\7d\\bf\\67\\58\\2a\\54\\f8\\4e\\fe\\ed\\35\\58\\a6\\51\\bf\\42\\e5\\4b\\66\\27\\24\\6d\\7f\\42\\2d\\28\\92\\18\\ec\\08\\ae\\e7\\55\\da\\b1\\a6\\65\\a5\\72\\50\\47\\1b\\b8\\a9\\54\\d7\\a6\\06\\5b\\0f\\42\\58\\83\\8a\\17\\82\\c6\\10\\43\\a0\\c0\\2e\\6d\\bc\\5a\\85\\53\\72\\7f\\ad\\44\\bc\\30\\3c\\55\\b2\\24\\9a\\74\\3a\\9e\\e1\\d8\\0f\\70\\fc\\a9\\3a\\cd\\93\\4b\\ec\\e3\\7e\\dd\\5d\\27\\cd\\f8\\a0\\9d\\1c\\11\\c0\\57\\2e\\fd\\c8\\13\\32\\cc\\3a\\1a\\7d\\a3\\41\\55\\ed\\c3\\82\\49\\2a\\04\\1e\\ef\\73\\b9\\2e\\2e\\e3\\5f\\f4\\df\\e6\\b2\\33\\0c\\39\\3f\\6f\\44\\6a\\03\\c1\\42\\b9\\fa\\b1\\c8\\ed\\a5\\58\\99\\7f\\ed\\b4\\72\\9e\\79\\eb\\fb\\43\\82\\45\\aa\\bb\\95\\d2\\ff\\28\\9e\\f6\\a1\\ad\\95\\d6\\55\\95\\0d\\6f\\60\\11\\c7\\78\\3e\\49\\f2\\7e\\48\\f4\\a2\\71\\d0\\13\\8e\\b3\\de\\99\\52\\e3\\45\\74\\ea\\76\\0e\\1b\\2a\\c8\\ee\\14\\01\\c4\\50\\5b\\36\\3c\\ef\\ba\\72\\a2\\a6\\08\\f8\\7b\\36\\9d\\f9\\ef\\0b\\c7\\56\\2d\\5c\\f0\\9d\\5d\\de\\fc\\b8\\ad\\0f\\64\\0e\\97\\15\\32\\26\\c2\\31\\e6\\05\\1e\\ef\\cb\\17\\1b\\6d\\15\\0b\\74\\5d\\d3\\2e\\f8\\6b\\86\\b4\\ba\\73\\52\\53\\99\\a9\\76\\20\\45\\c9\\40\\80\\6b\\14\\ed\\a1\\fa\\80\\46\\e6\\26\\d2\\e6\\98\\c4\\57\\bf\\c4\\1c\\a4\\90\\7a\\36\\94\\14\\ba\\15\\89\\6e\\e6\\9c\\37\\8c\\f4\\de\\12\\22\\5d\\a1\\79\\50\\67\\0d\\3d\\7a\\e9\\d4\\aa\\2e\\7f\\2a\\7a\\30\\3d\\ea\\5d\\12\\48\\fe\\e1\\18\\cd\\a4\\57\\a2\\87\\3e\\b6\\9a\\8b\\db\\da\\9d\\78\\9c\\cf\\8d\\b1\\4f\\90\\b4\\34\\e0\\9d\\f6\\ca\\fe\\4c\\3b\\78\\6d\\0a\\5c\\18\\9f\\61\\b9\\dd\\b4\\e0\\0f\\76\\e0\\1b\\69\\0d\\5e\\58\\73\\70\\5e\\0e\\2d\\a1\\7d\\ff\\20\\eb\\91\\34\\92\\ac\\38\\72\\2a\\1f\\8e\\71\\2e\\6a\\f1\\af\\c7\\27\\70\\d9\\c4\\57\\f7\\d2\\3c\\1d\\b8\\f0\\f0\\64\\cf\\dc\\ae\\be\\a3\\cc\\3e\\22\\7d\\4e\\69\\21\\63\\17\\ed\\03\\02\\54\\9a\\0f\\50\\4e\\13\\5a\\35\\a1\\22\\a4\\df\\86\\c2\\74\\79\\16\\b8\\69\\69\\a0\\52\\5d\\11\\64\\bd\\5b\\93\\fc\\69\\a0\\f4\\13\\d0\\81\\51\\dd\\fa\\0c\\15\\c3\\7a\\c9\\62\\7a\\a9\\1d\\c9\\e6\\5a\\b3\\5b\\97\\02\\3c\\64\\22\\12\\3c\\22\\90\\64\\2d\\30\\54\\4c\\b4\\a1\\22\\09\\57\\22\\5e\\8e\\38\\2b\\02\\a8\\ae\\f6\\be\\0d\\2b\\f2\\03\\ad\\fa\\10\\01\\71\\77\\2a\\30\\02\\95\\f6\\00\\3e\\d0\\c4\\8d\\34\\19\\50\\21\\0a\\bc\\50\\da\\3c\\30\\d6\\3a\\31\\94\\8d\\3a\\fe\\ef\\14\\57\\9d\\4b\\93\\00\\96\\24\\0c\\6f\\fd\\bc\\23\\76\\02\\6c\\eb\\52\\72\\80\\11\\7e\\80\\3a\\13\\12\\38\\1d\\38\\49\\95\\40\\27\\8a\\44\\7b\\e8\\dc\\6d\\8c\\8c\\8e\\3c\\b5\\b3\\18\\0e\\f6\\08\\1a\\84\\41\\35\\ff\\8b\\b8\\93\\40\\ea\\e1\\51\\1d\\89\\a5\\8d\\42\\68\\29\\ea\\2f\\c1\\7a\\52\\eb\\90\\5d\\4d\\d6\\80\\e3\\d7\\75\\48\\ce\\ed\\d3\\01\\1c\\8d\\5b\\a5\\94\\0d\\78\\cf\\f1\\06\\13\\2f\\98\\02\\a4\\6d\\2e\\6c\\f2\\d5\\74\\29\\89\\4c\\f9\\03\\f5\\c7\\18\\ad\\7a\\f0\\68\\f8\\5c\\d6\\59\\87\\6e\\d6\\3f\\06\\be\\86\\20\\e3\\41\\91\\22\\f3\\6e\\8b\\f0\\68\\1c\\57\\a7\\fc\\b0\\7c\\9e\\99\\0b\\96\\1a\\89\\5f\\e6\\0d\\7c\\08\\51\\a0\\a2\\67\\9a\\47\\00\\93\\6b\\f9\\28\\f0\\68\\db\\62\\f1\\e0\\65\\2c\\53\\33\\e0\\a7\\ca\\11\\42\\30\\f6\\af\\01\\c1\\65\\3d\\32\\01\\6f\\ab\\2e\\be\\d3\\8b\\be\\14\\c3\\ff\\ec\\fb\\f0\\f9\\c5\\0c\\05\\6f\\01\\09\\6b\\e3\\34\\31\\0c\\1f\\66\\a6\\42\\bc\\1a\\87\\49\\16\\16\\8c\\b0\\90\\0d\\34\\8c\\0a\\e1\\09\\5e\\10\\a4\\6b\\56\\cc\\f0\\c9\\bb\\dc\\b8\\5c\\ce\\f6\\cc\\8d\\75\\7e\\b3\\07\\88\\04\\2f\\b4\\5e\\c9\\e3\\4a\\23\\73\\19\\62\\6c\\9a\\03\\76\\44\\86\\9c\\60\\fc\\db\\72\\8f\\27\\a0\\dd\\b3\\c5\\da\\ff\\f9\\ec\\6a\\b1\\7b\\d3\\cf\\50\\37\\c9\\7a\\78\\0c\\e4\\3a\\b6\\f5\\e6\\f4\\98\\6e\\42\\7d\\35\\73\\8b\\45\\c0\\56\\97\\cd\\6d\\ce\\cf\\ad\\31\\b3\\c3\\54\\fa\\ef\\d5\\c0\\f4\\6a\\5f\\54\\e7\\49\\3e\\33\\0a\\30\\38\\fd\\d9\\05\\ff\\a5\\3f\\57\\46\\14\\b5\\91\\17\\ca\\6b\\98\\23\\7a\\65\\b3\\6c\\02\\b4\\cc\\79\\5d\\58\\d8\\b3\\d5\\94\\ae\\f4\\6d\\75\\65\\f7\\92\\bf\\7e\\47\\4c\\3c\\ee\\db\\ac\\f1\\32\\5d\\fb\\6f\\41\\1c\\34\\c8\\83\\4f\\c2\\58\\01\\be\\05\\3e\\66\\16\\a6\\04\\6d\\5d\\4f\\86\\09\\27\\82\\25\\12\\cd\\3a\\cd\\ce\\6b\\bc\\ca\\ac\\28\\9b\\ee\\6a\\25\\86\\9e\\45\\70\\c6\\d2\\bd\\3b\\7d\\42\\e5\\27\\af\\c7\\1d\\f4\\81\\c8\\b3\\76\\8a\\a8\\36\\a3\\ae\\2a\\e6\\18\\e1\\36\\22\\ad\\f6\\25\\72\\b0\\39\\8b\\01\\9a\\22\\7b\\84\\c3\\2d\\5f\\72\\a4\\98\\ac\\15\\70\\e7\\d4\\18\\e2\\7d\\d2\\30\\7c\\33\\08\\cd\\ca\\c4\\22\\85\\88\\75\\81\\c6\\4a\\74\\58\\8d\\e0\\e8\\ac\\c5\\ab\\75\\5a\\f4\\28\\12\\f0\\18\\45\\52\\f2\\97\\b2\\93\\41\\6f\\8d\\7f\\db\\70\\fb\\a3\\5d\\1f\\a7\\8d\\98\\20\\2b\\22\\9f\\3a\\01\\b5\\8b\\1b\\d2\\cb\\14\\03\\0e\\14\\14\\d2\\19\\5a\\1f\\ce\\5e\\cd\\81\\79\\15\\01\\ca\\de\\73\\74\\8c\\56\\20\\9f\\77\\2d\\25\\16\\f6\\61\\51\\1d\\a4\\8e\\9b\\98\\a5\\c6\\ec\\a8\\45\\57\\82\\59\\78\\0d\\90\\b4\\df\\51\\b0\\c3\\82\\94\\cc\\b3\\53\\09\\15\\6d\\96\\6c\\3a\\40\\47\\b7\\4a\\7a\\05\\2f\\a1\\1e\\8c\\9d\\a0\\20\\88\\fb\\52\\b7\\9f\\f3\\f3\\bb\\5f\\e7\\8a\\61\\a7\\21\\b1\\ac\\fa\\09\\aa\\a4\\6c\\bc\\24\\80\\ba\\2a\\e9\\65\\ff\\70\\ff\\cc\\fa\\65\\87\\76\\f3\\c5\\15\\ce\\cb\\e8\\42\\31\\00\\0c\\91\\57\\d9\\e0\\9d\\35\\54\\24\\ad\\a4\\d8\\f9\\08\\67\\63\\c8\\cf\\81\\dd\\90\\a2\\d7\\c4\\07\\4a\\e6\\10\\6f\\67\\e7\\27\\d4\\23\\59\\18\\f2\\a8\\9d\\5f\\d8\\94\\30\\aa\\54\\86\\4f\\87\\9d\\82\\b5\\26\\ca\\a6\\96\\bf\\cf\\55\\f9\\9d\\37\\01\\19\\48\\43\\c5\\94\\6c\\f3\\74\\97\\58\\4c\\3c\\9d\\08\\e8\\04\\c2\\58\\30\\76\\e1\\a0\\f8\\ea\\e9\\c5\\ae\\cf\\78\\9e\\a9\\0c\\ac\\b3\\44\\42\\e0\\bc\\5d\\1b\\9c\\49\\58\\4a\\1c\\19\\49\\c1\\3a\\ea\\f5\\eb\\3b\\81\\a9\\4b\\70\\0c\\cc\\9e\\1a\\d3\\2f\\b7\\52\\2f\\20\\3b\\eb\\64\\51\\1d\\a0\\2d\\b2\\3e\\be\\13\\85\\48\\92\\32\\2e\\db\\5c\\a1\\e7\\8c\\45\\91\\35\\01\\0a\\93\\c2\\eb\\09\\ce\\f3\\d2\\22\\24\\d0\\8c\\cc\\1d\\9d\\38\\c8\\4d\\e3\\82\\cc\\64\\15\\06\\2d\\e7\\01\\2f\\ab\\bb\\b5\\04\\4c\\92\\1c\\7a\\d6\\3f\\e8\\5f\\31\\15\\0c\\dc\\e4\\31\\b4\\c4\\25\\3e\\2a\\aa\\00\\9e\\c8\\e5\\21\\7a\\7f\\29\\f1\\c0\\af\\1d\\5e\\e8\\63\\39\\ad\\f8\\7e\\6c\\c8\\c5\\7f\\c2\\a8\\97\\27\\0a\\d9\\f4\\21\\6a\\ea\\03\\09\\fb\\f7\\96\\3b\\83\\79\\5f\\7c\\4b\\30\\9f\\56\\35\\de\\b4\\73\\d4\\95\\f0\\14\\c3\\74\\2f\\0d\\a3\\1d\\4e\\8d\\31\\24\\b3\\1a\\84\\85\\62\\5a\\7b\\3c\\14\\39\\17\\e6\\6d\\eb\\37\\c2\\00\\58\\5b\\0b\\e3\\3c\\8a\\62\\e1\\f8\\35\\4b\\56\\e2\\87\\60\\8b\\be\\a7\\38\\91\\77\\54\\a9\\5a\\24\\25\\90\\9f\\a5\\42\\77\\f3\\5c\\39\\df\\ff\\74\\07\\76\\a1\\cd\\1f\\62\\0b\\81\\81\\68\\af\\05\\c1\\c0\\7f\\26\\ee\\c0\\91\\a3\\6a\\7d\\29\\61\\45\\27\\e5\\57\\88\\dc\\0d\\97\\04\\1a\\33\\a9\\44\\8a\\da\\02\\10\\45\\3f\\8e\\55\\a6\\76\\8c\\4d\\e3\\f1\\89\\83\\c8\\d0\\f8\\9b\\50\\77\\9f\\47\\df\\4c\\9c\\66\\0d\\aa\\18\\b8\\5f\\4f\\c4\\01\\ce\\dc\\84\\ac\\46\\9e\\69\\e1\\76\\45\\6b\\61\\89\\e4\\5d\\94\\bb\\11\\83\\9f\\78\\d8\\0a\\d2\\f5\\7e\\5d\\43\\ea\\bc\\10\\f1\\3a\\c9\\e2\\64\\fb\\53\\65\\d0\\c7\\b4\\a7\\fb\\d4\\05\\53\\25\\d0\\cd\\29\\88\\00\\56\\25\\24\\7d\\5d\\b4\\f3\\41\\9f\\e9\\b5\\f7\\ae\\64\\2c\\e3\\c9\\6d\\d5\\84\\3a\\72\\12\\b8\\7a\\d9\\1b\\09\\e8\\38\\da\\26\\4f\\04\\ce\\03\\71\\6e\\8a\\44\\7b\\5c\\81\\59\\9c\\d2\\e4\\c3\\ba\\59\\a6\\e5\\28\\a7\\8f\\9a\\e4\\d5\\4e\\b9\\ca\\7f\\cb\\75\\b8\\2b\\43\\3e\\b3\\15\\46\\b1\\a5\\bc\\9d\\9e\\38\\15\\f1\\bd\\1b\\21\\aa\\f1\\82\\00\\95\\fc\\a7\\77\\47\\39\\a7\\33\\43\\92\\d7\\52\\40\\4b\\06\\81\\8a\\a0\\bd\\f1\\6b\\99\\84\\42\\5b\\e2\\3b\\c5\\5e\\12\\5c\\28\\4d\\b6\\0e\\4e\\c8\\5c\\e8\\01\\8a\\c5\\e7\\e4\\9d\\42\\ee\\5d\\9c\\c4\\eb\\eb\\68\\09\\27\\92\\95\\9a\\11\\54\\73\\c4\\12\\80\\fb\\7d\\fe\\c5\\08\\60\\7f\\36\\41\\e0\\10\\ba\\d6\\2b\\6c\\f1\\b4\\17\\fe\\26\\34\\e3\\4b\\f8\\a8\\e3\\91\\be\\4f\\2a\\fc\\da\\81\\b8\\e7\\fe\\d5\\26\\50\\47\\f3\\1a\\65\\32\\81\\e0\\05\\b8\\4f\\32\\31\\26\\00\\4a\\53\\97\\c2\\c3\\0e\\2e\\a1\\26\\54\\ab\\05\\8e\\56\\2f\\7d\\af\\22\\84\\68\\a5\\8b\\97\\f6\\a4\\fd\\a8\\cc\\75\\41\\96\\86\\fd\\27\\3d\\29\\86\\8d\\7f\\4c\\d4\\8e\\73\\41\\f4\\1e\\e2\\dd\\58\\27\\97\\ce\\9c\\94\\cf\\7a\\04\\2f\\dc\\ed\" ))\n  (func (export \"f64.kahan_sum\") (param $p i32) (param $n i32) (result f64) (local $sum f64) (local $c f64) (local $t f64) (block $exit (loop $top (local.set $t (f64.sub (f64.sub (local.tee $sum (f64.add (local.get $c) (local.tee $t (f64.sub (f64.load (local.get $p)) (local.get $t)) ) ) ) (local.get $c) ) (local.get $t) ) ) (local.set $p (i32.add (local.get $p) (i32.const 8))) (local.set $c (local.get $sum)) (br_if $top (local.tee $n (i32.add (local.get $n) (i32.const -1)))) ) ) (local.get $sum) )\n  (func (export \"f64.plain_sum\") (param $p i32) (param $n i32) (result f64) (local $sum f64) (block $exit (loop $top (local.set $sum (f64.add (local.get $sum) (f64.load (local.get $p)))) (local.set $p (i32.add (local.get $p) (i32.const 8))) (local.set $n (i32.add (local.get $n) (i32.const -1))) (br_if $top (local.get $n)) ) ) (local.get $sum) ))",
    "(assert_return (invoke \"f64.kahan_sum\" (i32.const 0) (i32.const 256)) (f64.const 0x1.dd7cb2a5ffc88p+998))",
    "(assert_return (invoke \"f64.plain_sum\" (i32.const 0) (i32.const 256)) (f64.const 0x1.dd7cb2a63fc87p+998))",
    "(module \n  (func (export \"f32.no_fold_neg_sub\") (param $x f32) (param $y f32) (result f32) (f32.neg (f32.sub (local.get $x) (local.get $y))))\n  (func (export \"f64.no_fold_neg_sub\") (param $x f64) (param $y f64) (result f64) (f64.neg (f64.sub (local.get $x) (local.get $y)))))",
    "(assert_return (invoke \"f32.no_fold_neg_sub\" (f32.const -0.0) (f32.const -0.0)) (f32.const -0.0))",
    "(assert_return (invoke \"f32.no_fold_neg_sub\" (f32.const 0.0) (f32.const -0.0)) (f32.const -0.0))",
    "(assert_return (invoke \"f32.no_fold_neg_sub\" (f32.const -0.0) (f32.const 0.0)) (f32.const 0.0))",
    "(assert_return (invoke \"f32.no_fold_neg_sub\" (f32.const 0.0) (f32.const 0.0)) (f32.const -0.0))",
    "(assert_return (invoke \"f64.no_fold_neg_sub\" (f64.const -0.0) (f64.const -0.0)) (f64.const -0.0))",
    "(assert_return (invoke \"f64.no_fold_neg_sub\" (f64.const 0.0) (f64.const -0.0)) (f64.const -0.0))",
    "(assert_return (invoke \"f64.no_fold_neg_sub\" (f64.const -0.0) (f64.const 0.0)) (f64.const 0.0))",
    "(assert_return (invoke \"f64.no_fold_neg_sub\" (f64.const 0.0) (f64.const 0.0)) (f64.const -0.0))",
    "(module \n  (func (export \"f32.no_fold_neg_add\") (param $x f32) (param $y f32) (result f32) (f32.neg (f32.add (local.get $x) (local.get $y))))\n  (func (export \"f64.no_fold_neg_add\") (param $x f64) (param $y f64) (result f64) (f64.neg (f64.add (local.get $x) (local.get $y)))))",
    "(assert_return (invoke \"f32.no_fold_neg_add\" (f32.const -0.0) (f32.const -0.0)) (f32.const 0.0))",
    "(assert_return (invoke \"f32.no_fold_neg_add\" (f32.const 0.0) (f32.const -0.0)) (f32.const -0.0))",
    "(assert_return (invoke \"f32.no_fold_neg_add\" (f32.const -0.0) (f32.const 0.0)) (f32.const -0.0))",
    "(assert_return (invoke \"f32.no_fold_neg_add\" (f32.const 0.0) (f32.const 0.0)) (f32.const -0.0))",
    "(assert_return (invoke \"f64.no_fold_neg_add\" (f64.const -0.0) (f64.const -0.0)) (f64.const 0.0))",
    "(assert_return (invoke \"f64.no_fold_neg_add\" (f64.const 0.0) (f64.const -0.0)) (f64.const -0.0))",
    "(assert_return (invoke \"f64.no_fold_neg_add\" (f64.const -0.0) (f64.const 0.0)) (f64.const -0.0))",
    "(assert_return (invoke \"f64.no_fold_neg_add\" (f64.const 0.0) (f64.const 0.0)) (f64.const -0.0))",
    "(module \n  (func (export \"f32.no_fold_add_neg_neg\") (param $x f32) (param $y f32) (result f32) (f32.add (f32.neg (local.get $x)) (f32.neg (local.get $y))))\n  (func (export \"f64.no_fold_add_neg_neg\") (param $x f64) (param $y f64) (result f64) (f64.add (f64.neg (local.get $x)) (f64.neg (local.get $y)))))",
    "(assert_return (invoke \"f32.no_fold_add_neg_neg\" (f32.const -0.0) (f32.const -0.0)) (f32.const 0.0))",
    "(assert_return (invoke \"f32.no_fold_add_neg_neg\" (f32.const 0.0) (f32.const -0.0)) (f32.const 0.0))",
    "(assert_return (invoke \"f32.no_fold_add_neg_neg\" (f32.const -0.0) (f32.const 0.0)) (f32.const 0.0))",
    "(assert_return (invoke \"f32.no_fold_add_neg_neg\" (f32.const 0.0) (f32.const 0.0)) (f32.const -0.0))",
    "(assert_return (invoke \"f64.no_fold_add_neg_neg\" (f64.const -0.0) (f64.const -0.0)) (f64.const 0.0))",
    "(assert_return (invoke \"f64.no_fold_add_neg_neg\" (f64.const 0.0) (f64.const -0.0)) (f64.const 0.0))",
    "(assert_return (invoke \"f64.no_fold_add_neg_neg\" (f64.const -0.0) (f64.const 0.0)) (f64.const 0.0))",
    "(assert_return (invoke \"f64.no_fold_add_neg_neg\" (f64.const 0.0) (f64.const 0.0)) (f64.const -0.0))",
    "(module \n  (func (export \"f32.no_fold_add_neg\") (param $x f32) (result f32) (f32.add (f32.neg (local.get $x)) (local.get $x)))\n  (func (export \"f64.no_fold_add_neg\") (param $x f64) (result f64) (f64.add (f64.neg (local.get $x)) (local.get $x))))",
    "(assert_return (invoke \"f32.no_fold_add_neg\" (f32.const 0.0)) (f32.const 0.0))",
    "(assert_return (invoke \"f32.no_fold_add_neg\" (f32.const -0.0)) (f32.const 0.0))",
    "(assert_return (invoke \"f32.no_fold_add_neg\" (f32.const inf)) (f32.const nan:canonical))",
    "(assert_return (invoke \"f32.no_fold_add_neg\" (f32.const -inf)) (f32.const nan:canonical))",
    "(assert_return (invoke \"f64.no_fold_add_neg\" (f64.const 0.0)) (f64.const 0.0))",
    "(assert_return (invoke \"f64.no_fold_add_neg\" (f64.const -0.0)) (f64.const 0.0))",
    "(assert_return (invoke \"f64.no_fold_add_neg\" (f64.const inf)) (f64.const nan:canonical))",
    "(assert_return (invoke \"f64.no_fold_add_neg\" (f64.const -inf)) (f64.const nan:canonical))",
    "(module \n  (func (export \"f32.no_fold_6x_via_add\") (param $x f32) (result f32) (f32.add (f32.add (f32.add (f32.add (f32.add (local.get $x) (local.get $x)) (local.get $x)) (local.get $x)) (local.get $x)) (local.get $x)))\n  (func (export \"f64.no_fold_6x_via_add\") (param $x f64) (result f64) (f64.add (f64.add (f64.add (f64.add (f64.add (local.get $x) (local.get $x)) (local.get $x)) (local.get $x)) (local.get $x)) (local.get $x))))",
    "(assert_return (invoke \"f32.no_fold_6x_via_add\" (f32.const -0x1.598a0cp+99)) (f32.const -0x1.03278ap+102))",
    "(assert_return (invoke \"f32.no_fold_6x_via_add\" (f32.const -0x1.d3e7acp-77)) (f32.const -0x1.5eedc2p-74))",
    "(assert_return (invoke \"f32.no_fold_6x_via_add\" (f32.const 0x1.00fa02p-77)) (f32.const 0x1.817702p-75))",
    "(assert_return (invoke \"f32.no_fold_6x_via_add\" (f32.const -0x1.51f434p-31)) (f32.const -0x1.faee4cp-29))",
    "(assert_return (invoke \"f32.no_fold_6x_via_add\" (f32.const -0x1.00328ap+80)) (f32.const -0x1.804bcep+82))",
    "(assert_return (invoke \"f64.no_fold_6x_via_add\" (f64.const -0x1.310e15acaffe6p+68)) (f64.const -0x1.c995208307fdap+70))",
    "(assert_return (invoke \"f64.no_fold_6x_via_add\" (f64.const -0x1.aad62c78fa9b4p-535)) (f64.const -0x1.4020a15abbf46p-532))",
    "(assert_return (invoke \"f64.no_fold_6x_via_add\" (f64.const -0x1.f8fbfa94f6ab2p+271)) (f64.const -0x1.7abcfbefb9005p+274))",
    "(assert_return (invoke \"f64.no_fold_6x_via_add\" (f64.const 0x1.756ccc2830a8ep+751)) (f64.const 0x1.1811991e247ebp+754))",
    "(assert_return (invoke \"f64.no_fold_6x_via_add\" (f64.const -0x1.8fd1ab1d2402ap+234)) (f64.const -0x1.2bdd4055db01fp+237))",
    "(module \n  (func (export \"f32.no_fold_div_div\") (param $x f32) (param $y f32) (param $z f32) (result f32) (f32.div (f32.div (local.get $x) (local.get $y)) (local.get $z)))\n  (func (export \"f64.no_fold_div_div\") (param $x f64) (param $y f64) (param $z f64) (result f64) (f64.div (f64.div (local.get $x) (local.get $y)) (local.get $z))))",
    "(assert_return (invoke \"f32.no_fold_div_div\" (f32.const -0x1.f70228p+78) (f32.const -0x1.fbc612p-16) (f32.const -0x1.8c379p+10)) (f32.const -0x1.47b43cp+83))",
    "(assert_return (invoke \"f32.no_fold_div_div\" (f32.const 0x1.d29d2ep-70) (f32.const 0x1.f3a17ep+110) (f32.const -0x1.64d41p-112)) (f32.const -0x0p+0))",
    "(assert_return (invoke \"f32.no_fold_div_div\" (f32.const 0x1.867f98p+43) (f32.const 0x1.30acfcp-105) (f32.const 0x1.e210d8p+105)) (f32.const inf))",
    "(assert_return (invoke \"f32.no_fold_div_div\" (f32.const -0x1.c4001ap-14) (f32.const -0x1.9beb6cp+124) (f32.const -0x1.74f34cp-43)) (f32.const -0x1.819874p-96))",
    "(assert_return (invoke \"f32.no_fold_div_div\" (f32.const 0x1.db0e6ep+46) (f32.const 0x1.55eea2p+56) (f32.const -0x1.f3134p+124)) (f32.const -0x1.6cep-135))",
    "(assert_return (invoke \"f64.no_fold_div_div\" (f64.const 0x1.b4dc8ec3c7777p+337) (f64.const 0x1.9f95ac2d1863p+584) (f64.const -0x1.d4318abba341ep-782)) (f64.const -0x1.2649159d87e02p+534))",
    "(assert_return (invoke \"f64.no_fold_div_div\" (f64.const -0x1.ac53af5eb445fp+791) (f64.const 0x1.8549c0a4ceb13p-29) (f64.const 0x1.64e384003c801p+316)) (f64.const -0x1.9417cdccbae91p+503))",
    "(assert_return (invoke \"f64.no_fold_div_div\" (f64.const -0x1.d2685afb27327p+2) (f64.const -0x1.abb1eeed3dbebp+880) (f64.const 0x1.a543e2e6968a3p+170)) (f64.const 0x0.0000002a69a5fp-1022))",
    "(assert_return (invoke \"f64.no_fold_div_div\" (f64.const -0x1.47ddede78ad1cp+825) (f64.const 0x1.6d932d070a367p-821) (f64.const 0x1.79cf18cc64fp+961)) (f64.const -inf))",
    "(assert_return (invoke \"f64.no_fold_div_div\" (f64.const -0x1.f73d4979a9379p-888) (f64.const 0x1.4d83b53e97788p-596) (f64.const -0x1.f8f86c9603b5bp-139)) (f64.const 0x1.87a7bd89c586cp-154))",
    "(module \n  (func (export \"f32.no_fold_mul_divs\") (param $x f32) (param $y f32) (param $z f32) (param $w f32) (result f32) (f32.mul (f32.div (local.get $x) (local.get $y)) (f32.div (local.get $z) (local.get $w))))\n  (func (export \"f64.no_fold_mul_divs\") (param $x f64) (param $y f64) (param $z f64) (param $w f64) (result f64) (f64.mul (f64.div (local.get $x) (local.get $y)) (f64.div (local.get $z) (local.get $w)))))",
    "(assert_return (invoke \"f32.no_fold_mul_divs\" (f32.const -0x1.c483bep-109) (f32.const 0x1.ee1c3cp-92) (f32.const 0x1.800756p-88) (f32.const -0x1.95b972p+4)) (f32.const 0x1.bbd30cp-110))",
    "(assert_return (invoke \"f32.no_fold_mul_divs\" (f32.const -0x1.0f4262p+102) (f32.const 0x1.248498p+25) (f32.const 0x1.f66a7cp-17) (f32.const 0x1.897fc8p-3)) (f32.const -0x1.2f1aa4p+63))",
    "(assert_return (invoke \"f32.no_fold_mul_divs\" (f32.const -0x1.df5f22p+33) (f32.const -0x1.fcee3ep+39) (f32.const -0x1.9ea914p+29) (f32.const -0x1.2c4d3p+10)) (f32.const 0x1.4cf51cp+13))",
    "(assert_return (invoke \"f32.no_fold_mul_divs\" (f32.const -0x1.f568bcp+109) (f32.const 0x1.d9963p-34) (f32.const 0x1.37a87ap-16) (f32.const 0x1.a1524ap+78)) (f32.const -inf))",
    "(assert_return (invoke \"f32.no_fold_mul_divs\" (f32.const 0x1.3dd592p-53) (f32.const -0x1.332c22p-64) (f32.const 0x1.b01064p-91) (f32.const 0x1.92bb3ap-36)) (f32.const -0x1.1c2dbp-44))",
    "(assert_return (invoke \"f64.no_fold_mul_divs\" (f64.const -0x1.363d6764f7b12p-819) (f64.const -0x1.ed5471f660b5fp-464) (f64.const -0x1.671b0a7f3a42p+547) (f64.const 0x1.0633be34ba1f2p+186)) (f64.const -0x1.b8fa2b76baeebp+5))",
    "(assert_return (invoke \"f64.no_fold_mul_divs\" (f64.const -0x1.37880182e0fa8p+115) (f64.const 0x1.f842631576147p-920) (f64.const -0x1.999372231d156p+362) (f64.const -0x1.d5db481ab9554p+467)) (f64.const -inf))",
    "(assert_return (invoke \"f64.no_fold_mul_divs\" (f64.const -0x1.9a747c8d4b541p+308) (f64.const -0x1.99092ad6bbdc8p+192) (f64.const -0x1.cb23755c20101p-140) (f64.const -0x1.de8716f6b0b6ap+732)) (f64.const 0x1.ecf584c8466a5p-757))",
    "(assert_return (invoke \"f64.no_fold_mul_divs\" (f64.const -0x1.c424b2ece903dp+129) (f64.const -0x1.568ce281db37fp-347) (f64.const 0x1.53900b99fd3dp-957) (f64.const 0x1.5c33952254dadp+223)) (f64.const 0x0p+0))",
    "(assert_return (invoke \"f64.no_fold_mul_divs\" (f64.const 0x1.a8ec2cecb32a9p-18) (f64.const 0x1.58acab0051851p-277) (f64.const 0x1.35e87c9077f7fp-620) (f64.const -0x1.925ee37ffb386p+352)) (f64.const -0x1.e6286970b31bfp-714))",
    "(module \n  (func (export \"f32.no_fold_add_divs\") (param $x f32) (param $y f32) (param $z f32) (result f32) (f32.add (f32.div (local.get $x) (local.get $z)) (f32.div (local.get $y) (local.get $z))))\n  (func (export \"f64.no_fold_add_divs\") (param $x f64) (param $y f64) (param $z f64) (result f64) (f64.add (f64.div (local.get $x) (local.get $z)) (f64.div (local.get $y) (local.get $z)))))",
    "(assert_return (invoke \"f32.no_fold_add_divs\" (f32.const 0x1.795e7p+8) (f32.const -0x1.48a5eep-5) (f32.const -0x1.9a244cp+126)) (f32.const -0x1.d709b6p-119))",
    "(assert_return (invoke \"f32.no_fold_add_divs\" (f32.const -0x1.ae89e8p-63) (f32.const -0x1.e9903ep-49) (f32.const -0x1.370a8cp+47)) (f32.const 0x1.92f3f6p-96))",
    "(assert_return (invoke \"f32.no_fold_add_divs\" (f32.const -0x1.626408p-46) (f32.const 0x1.2ee5b2p-64) (f32.const -0x1.ecefaap+48)) (f32.const 0x1.701864p-95))",
    "(assert_return (invoke \"f32.no_fold_add_divs\" (f32.const -0x1.061d3p-101) (f32.const 0x1.383492p-98) (f32.const -0x1.1d92d2p+88)) (f32.const 0x0p+0))",
    "(assert_return (invoke \"f32.no_fold_add_divs\" (f32.const 0x1.1ea39ep-10) (f32.const 0x1.a7fffep-3) (f32.const 0x1.6fc574p-123)) (f32.const 0x1.28b2dep+120))",
    "(assert_return (invoke \"f64.no_fold_add_divs\" (f64.const -0x1.c5fcc3273b136p+430) (f64.const 0x1.892a09eed8f6fp+434) (f64.const 0x1.8258b71e64397p+911)) (f64.const 0x1.e36eb9706ad82p-478))",
    "(assert_return (invoke \"f64.no_fold_add_divs\" (f64.const -0x1.2215d4061b5b3p+53) (f64.const 0x1.fb6184d97f27cp+5) (f64.const -0x1.f3bb59dacc0ebp-957)) (f64.const 0x1.2934eb0118be3p+1009))",
    "(assert_return (invoke \"f64.no_fold_add_divs\" (f64.const -0x1.e7a4533741d8ep-967) (f64.const 0x1.a519bb7feb802p-976) (f64.const 0x1.1f8a43454e51ap+504)) (f64.const 0x0p+0))",
    "(assert_return (invoke \"f64.no_fold_add_divs\" (f64.const 0x1.991c6cf93e2b4p+313) (f64.const -0x1.f2f7432698d11p+329) (f64.const 0x1.0d8c1b2453617p-126)) (f64.const -0x1.d9e1d84ddd1d4p+455))",
    "(assert_return (invoke \"f64.no_fold_add_divs\" (f64.const -0x1.d436849dc1271p-728) (f64.const 0x1.19d1c1450e52dp-755) (f64.const 0x1.fa1be69ea06fep-70)) (f64.const -0x1.d9a9b1c2f5623p-659))",
    "(module \n  (func (export \"f32.no_fold_sqrt_square\") (param $x f32) (result f32) (f32.sqrt (f32.mul (local.get $x) (local.get $x))))\n  (func (export \"f64.no_fold_sqrt_square\") (param $x f64) (result f64) (f64.sqrt (f64.mul (local.get $x) (local.get $x)))))",
    "(assert_return (invoke \"f32.no_fold_sqrt_square\" (f32.const -0x1.5cb316p-66)) (f32.const 0x1.5cb322p-66))",
    "(assert_return (invoke \"f32.no_fold_sqrt_square\" (f32.const -0x1.b0f9e4p-73)) (f32.const 0x1.b211b2p-73))",
    "(assert_return (invoke \"f32.no_fold_sqrt_square\" (f32.const -0x1.de417cp-71)) (f32.const 0x1.de65b8p-71))",
    "(assert_return (invoke \"f32.no_fold_sqrt_square\" (f32.const 0x1.64c872p-86)) (f32.const 0x0p+0))",
    "(assert_return (invoke \"f32.no_fold_sqrt_square\" (f32.const 0x1.e199e4p+108)) (f32.const inf))",
    "(assert_return (invoke \"f64.no_fold_sqrt_square\" (f64.const 0x1.1759d657203fdp-529)) (f64.const 0x1.1759dd57545f3p-529))",
    "(assert_return (invoke \"f64.no_fold_sqrt_square\" (f64.const -0x1.4c68de1c78d83p-514)) (f64.const 0x1.4c68de1c78d81p-514))",
    "(assert_return (invoke \"f64.no_fold_sqrt_square\" (f64.const -0x1.214736edb6e1ep-521)) (f64.const 0x1.214736ed9cf8dp-521))",
    "(assert_return (invoke \"f64.no_fold_sqrt_square\" (f64.const -0x1.0864b9f68457p-616)) (f64.const 0x0p+0))",
    "(assert_return (invoke \"f64.no_fold_sqrt_square\" (f64.const 0x1.b2a9855995abap+856)) (f64.const inf))",
    "(module \n  (func (export \"f32.no_fold_mul_sqrts\") (param $x f32) (param $y f32) (result f32) (f32.mul (f32.sqrt (local.get $x)) (f32.sqrt (local.get $y))))\n  (func (export \"f64.no_fold_mul_sqrts\") (param $x f64) (param $y f64) (result f64) (f64.mul (f64.sqrt (local.get $x)) (f64.sqrt (local.get $y)))))",
    "(assert_return (invoke \"f32.no_fold_mul_sqrts\" (f32.const 0x1.dddda8p-125) (f32.const -0x1.25d22ap-83)) (f32.const nan:canonical))",
    "(assert_return (invoke \"f32.no_fold_mul_sqrts\" (f32.const 0x1.418d14p-92) (f32.const 0x1.c6535cp-32)) (f32.const 0x1.7e373ap-62))",
    "(assert_return (invoke \"f32.no_fold_mul_sqrts\" (f32.const 0x1.4de7ep-88) (f32.const 0x1.84ff18p+6)) (f32.const 0x1.686668p-41))",
    "(assert_return (invoke \"f32.no_fold_mul_sqrts\" (f32.const 0x1.78091ep+101) (f32.const 0x1.81feb8p-9)) (f32.const 0x1.7cfb98p+46))",
    "(assert_return (invoke \"f32.no_fold_mul_sqrts\" (f32.const 0x1.583ap-56) (f32.const 0x1.14ba2ap-9)) (f32.const 0x1.b47a8ep-33))",
    "(assert_return (invoke \"f64.no_fold_mul_sqrts\" (f64.const -0x1.d1144cc28cdbep-635) (f64.const -0x1.bf9bc373d3b6ap-8)) (f64.const nan:canonical))",
    "(assert_return (invoke \"f64.no_fold_mul_sqrts\" (f64.const 0x1.5a7eb976bebc9p-643) (f64.const 0x1.f30cb8865a4cap-404)) (f64.const 0x1.260a1032d6e76p-523))",
    "(assert_return (invoke \"f64.no_fold_mul_sqrts\" (f64.const 0x1.711a0c1707935p-89) (f64.const 0x1.6fb5de51a20d3p-913)) (f64.const 0x1.7067ca28e31ecp-501))",
    "(assert_return (invoke \"f64.no_fold_mul_sqrts\" (f64.const 0x1.fb0bbea33b076p-363) (f64.const 0x1.d963b34894158p-573)) (f64.const 0x1.e9edc1fa624afp-468))",
    "(assert_return (invoke \"f64.no_fold_mul_sqrts\" (f64.const 0x1.8676eab7a4d0dp+24) (f64.const 0x1.75a58231ba7a5p+513)) (f64.const 0x1.0e16aebe203b3p+269))",
    "(module \n  (func (export \"f32.no_fold_div_sqrts\") (param $x f32) (param $y f32) (result f32) (f32.div (f32.sqrt (local.get $x)) (f32.sqrt (local.get $y))))\n  (func (export \"f64.no_fold_div_sqrts\") (param $x f64) (param $y f64) (result f64) (f64.div (f64.sqrt (local.get $x)) (f64.sqrt (local.get $y)))))",
    "(assert_return (invoke \"f32.no_fold_div_sqrts\" (f32.const -0x1.bea9bap+25) (f32.const -0x1.db776ep-58)) (f32.const nan:canonical))",
    "(assert_return (invoke \"f32.no_fold_div_sqrts\" (f32.const 0x1.b983b6p+32) (f32.const 0x1.901f1ep+27)) (f32.const 0x1.7c4df6p+2))",
    "(assert_return (invoke \"f32.no_fold_div_sqrts\" (f32.const 0x1.d45e72p-120) (f32.const 0x1.ab49ccp+15)) (f32.const 0x1.7b0b04p-68))",
    "(assert_return (invoke \"f32.no_fold_div_sqrts\" (f32.const 0x1.b2e444p+59) (f32.const 0x1.5b8b16p-30)) (f32.const 0x1.94fca8p+44))",
    "(assert_return (invoke \"f32.no_fold_div_sqrts\" (f32.const 0x1.835aa6p-112) (f32.const 0x1.d17128p-103)) (f32.const 0x1.4a468p-5))",
    "(assert_return (invoke \"f64.no_fold_div_sqrts\" (f64.const -0x1.509fc16411167p-711) (f64.const -0x1.9c4255f5d6517p-187)) (f64.const nan:canonical))",
    "(assert_return (invoke \"f64.no_fold_div_sqrts\" (f64.const 0x1.b6897bddac76p-587) (f64.const 0x1.104578b4c91f3p+541)) (f64.const 0x1.44e4f21f26cc9p-564))",
    "(assert_return (invoke \"f64.no_fold_div_sqrts\" (f64.const 0x1.ac83451b08989p+523) (f64.const 0x1.8da575c6d12b8p-109)) (f64.const 0x1.09c003991ce17p+316))",
    "(assert_return (invoke \"f64.no_fold_div_sqrts\" (f64.const 0x1.bab7836456417p-810) (f64.const 0x1.1ff60d03ba607p+291)) (f64.const 0x1.c0e6c833bf657p-551))",
    "(assert_return (invoke \"f64.no_fold_div_sqrts\" (f64.const 0x1.a957816ad9515p-789) (f64.const 0x1.8c18a3a222ab1p+945)) (f64.const 0x1.0948539781e92p-867))",
    "(module \n  (func (export \"f32.no_fold_mul_sqrt_div\") (param $x f32) (param $y f32) (result f32) (f32.div (f32.mul (local.get $x) (f32.sqrt (local.get $y))) (local.get $y)))\n  (func (export \"f64.no_fold_mul_sqrt_div\") (param $x f64) (param $y f64) (result f64) (f64.div (f64.mul (local.get $x) (f64.sqrt (local.get $y))) (local.get $y))))",
    "(assert_return (invoke \"f32.no_fold_mul_sqrt_div\" (f32.const -0x1.f4a7cap+81) (f32.const 0x1.c09adep+92)) (f32.const -inf))",
    "(assert_return (invoke \"f32.no_fold_mul_sqrt_div\" (f32.const -0x1.90bf1cp-120) (f32.const 0x1.8dbe88p-97)) (f32.const -0x0p+0))",
    "(assert_return (invoke \"f32.no_fold_mul_sqrt_div\" (f32.const 0x1.8570e8p+29) (f32.const 0x1.217d3p-128)) (f32.const 0x1.6e391ap+93))",
    "(assert_return (invoke \"f32.no_fold_mul_sqrt_div\" (f32.const -0x1.5b4652p+43) (f32.const 0x1.a9d71cp+112)) (f32.const -0x1.0d423ap-13))",
    "(assert_return (invoke \"f32.no_fold_mul_sqrt_div\" (f32.const -0x1.910604p+8) (f32.const 0x1.0ca912p+7)) (f32.const -0x1.14cdecp+5))",
    "(assert_return (invoke \"f64.no_fold_mul_sqrt_div\" (f64.const 0x1.1dcdeb857305fp+698) (f64.const 0x1.a066171c40eb9p+758)) (f64.const inf))",
    "(assert_return (invoke \"f64.no_fold_mul_sqrt_div\" (f64.const -0x1.8b4f1c218e2abp-827) (f64.const 0x1.5e1ee65953b0bp-669)) (f64.const -0x0p+0))",
    "(assert_return (invoke \"f64.no_fold_mul_sqrt_div\" (f64.const 0x1.74ee531ddba38p-425) (f64.const 0x1.f370f758857f3p+560)) (f64.const 0x1.0aff34269583ep-705))",
    "(assert_return (invoke \"f64.no_fold_mul_sqrt_div\" (f64.const -0x1.27f216b0da6c5p+352) (f64.const 0x1.8e0b4e0b9fd7ep-483)) (f64.const -0x1.4fa558aad514ep+593))",
    "(assert_return (invoke \"f64.no_fold_mul_sqrt_div\" (f64.const 0x1.4c6955df9912bp+104) (f64.const 0x1.0cca42c9d371ep+842)) (f64.const 0x1.4468072f54294p-317))",
    "(module \n  (func (export \"f32.no_flush_intermediate_subnormal\") (param $x f32) (param $y f32) (param $z f32) (result f32) (f32.mul (f32.mul (local.get $x) (local.get $y)) (local.get $z)))\n  (func (export \"f64.no_flush_intermediate_subnormal\") (param $x f64) (param $y f64) (param $z f64) (result f64) (f64.mul (f64.mul (local.get $x) (local.get $y)) (local.get $z))))",
    "(assert_return (invoke \"f32.no_flush_intermediate_subnormal\" (f32.const 0x1p-126) (f32.const 0x1p-23) (f32.const 0x1p23)) (f32.const 0x1p-126))",
    "(assert_return (invoke \"f64.no_flush_intermediate_subnormal\" (f64.const 0x1p-1022) (f64.const 0x1p-52) (f64.const 0x1p52)) (f64.const 0x1p-1022))",
    "(module \n  (func (export \"f32.recoding_eq\") (param $x f32) (param $y f32) (result i32) (f32.eq (f32.mul (local.get $x) (local.get $y)) (local.get $x)))\n  (func (export \"f32.recoding_le\") (param $x f32) (param $y f32) (result i32) (f32.le (f32.mul (local.get $x) (local.get $y)) (local.get $x)))\n  (func (export \"f32.recoding_lt\") (param $x f32) (param $y f32) (result i32) (f32.lt (f32.mul (local.get $x) (local.get $y)) (local.get $x)))\n  (func (export \"f64.recoding_eq\") (param $x f64) (param $y f64) (result i32) (f64.eq (f64.mul (local.get $x) (local.get $y)) (local.get $x)))\n  (func (export \"f64.recoding_le\") (param $x f64) (param $y f64) (result i32) (f64.le (f64.mul (local.get $x) (local.get $y)) (local.get $x)))\n  (func (export \"f64.recoding_lt\") (param $x f64) (param $y f64) (result i32) (f64.lt (f64.mul (local.get $x) (local.get $y)) (local.get $x)))\n  (func (export \"recoding_demote\") (param $x f64) (param $y f32) (result f32) (f32.mul (f32.demote_f64 (local.get $x)) (local.get $y))))",
    "(assert_return (invoke \"f32.recoding_eq\" (f32.const -inf) (f32.const 3.0)) (i32.const 1))",
    "(assert_return (invoke \"f32.recoding_le\" (f32.const -inf) (f32.const 3.0)) (i32.const 1))",
    "(assert_return (invoke \"f32.recoding_lt\" (f32.const -inf) (f32.const 3.0)) (i32.const 0))",
    "(assert_return (invoke \"f32.recoding_eq\" (f32.const 0x0p+0) (f32.const 0x1p+0)) (i32.const 1))",
    "(assert_return (invoke \"f32.recoding_le\" (f32.const 0x0p+0) (f32.const 0x1p+0)) (i32.const 1))",
    "(assert_return (invoke \"f32.recoding_lt\" (f32.const 0x0p+0) (f32.const 0x1p+0)) (i32.const 0))",
    "(assert_return (invoke \"f64.recoding_eq\" (f64.const -inf) (f64.const 3.0)) (i32.const 1))",
    "(assert_return (invoke \"f64.recoding_le\" (f64.const -inf) (f64.const 3.0)) (i32.const 1))",
    "(assert_return (invoke \"f64.recoding_lt\" (f64.const -inf) (f64.const 3.0)) (i32.const 0))",
    "(assert_return (invoke \"f64.recoding_eq\" (f64.const 0x0p+0) (f64.const 0x1p+0)) (i32.const 1))",
    "(assert_return (invoke \"f64.recoding_le\" (f64.const 0x0p+0) (f64.const 0x1p+0)) (i32.const 1))",
    "(assert_return (invoke \"f64.recoding_lt\" (f64.const 0x0p+0) (f64.const 0x1p+0)) (i32.const 0))",
    "(assert_return (invoke \"recoding_demote\" (f64.const 0x1.4c8f8p-132) (f32.const 1221)) (f32.const 0x1.8c8a1cp-122))",
    "(module \n  (func (export \"f32.no_extended_precision_div\") (param $x f32) (param $y f32) (param $z f32) (result i32) (f32.eq (f32.div (local.get $x) (local.get $y)) (local.get $z)))\n  (func (export \"f64.no_extended_precision_div\") (param $x f64) (param $y f64) (param $z f64) (result i32) (f64.eq (f64.div (local.get $x) (local.get $y)) (local.get $z))))",
    "(assert_return (invoke \"f32.no_extended_precision_div\" (f32.const 3.0) (f32.const 7.0) (f32.const 0x1.b6db6ep-2)) (i32.const 1))",
    "(assert_return (invoke \"f64.no_extended_precision_div\" (f64.const 3.0) (f64.const 7.0) (f64.const 0x1.b6db6db6db6dbp-2)) (i32.const 1))",
    "(module \n  (func (export \"f32.no_distribute_exact\") (param $x f32) (result f32) (f32.add (f32.mul (f32.const -8.0) (local.get $x)) (f32.mul (f32.const 8.0) (local.get $x))))\n  (func (export \"f64.no_distribute_exact\") (param $x f64) (result f64) (f64.add (f64.mul (f64.const -8.0) (local.get $x)) (f64.mul (f64.const 8.0) (local.get $x)))))",
    "(assert_return (invoke \"f32.no_distribute_exact\" (f32.const -0.0)) (f32.const 0.0))",
    "(assert_return (invoke \"f64.no_distribute_exact\" (f64.const -0.0)) (f64.const 0.0))",
    "(module \n  (func (export \"f32.sqrt\") (param f32) (result f32) (f32.sqrt (local.get 0)))\n  (func (export \"f32.xkcd_sqrt_2\") (param f32) (param f32) (param f32) (param f32) (result f32) (f32.add (f32.div (local.get 0) (local.get 1)) (f32.div (local.get 2) (f32.sub (local.get 3) (local.get 2)))))\n  (func (export \"f32.xkcd_sqrt_3\") (param f32) (param f32) (param f32) (result f32) (f32.div (f32.mul (local.get 0) (local.get 1)) (local.get 2)))\n  (func (export \"f32.xkcd_sqrt_5\") (param f32) (param f32) (param f32) (result f32) (f32.add (f32.div (local.get 0) (local.get 1)) (f32.div (local.get 2) (local.get 0))))\n  (func (export \"f32.xkcd_better_sqrt_5\") (param f32) (param f32) (param f32) (param f32) (result f32) (f32.div (f32.add (local.get 0) (f32.mul (local.get 1) (local.get 2))) (f32.sub (local.get 3) (f32.mul (local.get 1) (local.get 2)))))\n  (func (export \"f64.sqrt\") (param f64) (result f64) (f64.sqrt (local.get 0)))\n  (func (export \"f64.xkcd_sqrt_2\") (param f64) (param f64) (param f64) (param f64) (result f64) (f64.add (f64.div (local.get 0) (local.get 1)) (f64.div (local.get 2) (f64.sub (local.get 3) (local.get 2)))))\n  (func (export \"f64.xkcd_sqrt_3\") (param f64) (param f64) (param f64) (result f64) (f64.div (f64.mul (local.get 0) (local.get 1)) (local.get 2)))\n  (func (export \"f64.xkcd_sqrt_5\") (param f64) (param f64) (param f64) (result f64) (f64.add (f64.div (local.get 0) (local.get 1)) (f64.div (local.get 2) (local.get 0))))\n  (func (export \"f64.xkcd_better_sqrt_5\") (param f64) (param f64) (param f64) (param f64) (result f64) (f64.div (f64.add (local.get 0) (f64.mul (local.get 1) (local.get 2))) (f64.sub (local.get 3) (f64.mul (local.get 1) (local.get 2))))))",
    "(assert_return (invoke \"f32.sqrt\" (f32.const 2.0)) (f32.const 0x1.6a09e6p+0))",
    "(assert_return (invoke \"f32.xkcd_sqrt_2\" (f32.const 3.0) (f32.const 5.0) (f32.const 0x1.921fb6p+1) (f32.const 7.0)) (f32.const 0x1.6a0a54p+0))",
    "(assert_return (invoke \"f32.sqrt\" (f32.const 3.0)) (f32.const 0x1.bb67aep+0))",
    "(assert_return (invoke \"f32.xkcd_sqrt_3\" (f32.const 2.0) (f32.const 0x1.5bf0a8p+1) (f32.const 0x1.921fb6p+1)) (f32.const 0x1.bb02d4p+0))",
    "(assert_return (invoke \"f32.sqrt\" (f32.const 5.0)) (f32.const 0x1.1e377ap+1))",
    "(assert_return (invoke \"f32.xkcd_sqrt_5\" (f32.const 2.0) (f32.const 0x1.5bf0a8p+1) (f32.const 3.0)) (f32.const 0x1.1e2d58p+1))",
    "(assert_return (invoke \"f32.xkcd_better_sqrt_5\" (f32.const 13.0) (f32.const 4.0) (f32.const 0x1.921fb6p+1) (f32.const 24.0)) (f32.const 0x1.1e377ap+1))",
    "(assert_return (invoke \"f64.sqrt\" (f64.const 2.0)) (f64.const 0x1.6a09e667f3bcdp+0))",
    "(assert_return (invoke \"f64.xkcd_sqrt_2\" (f64.const 3.0) (f64.const 5.0) (f64.const 0x1.921fb54442d18p+1) (f64.const 7.0)) (f64.const 0x1.6a0a5362b055fp+0))",
    "(assert_return (invoke \"f64.sqrt\" (f64.const 3.0)) (f64.const 0x1.bb67ae8584caap+0))",
    "(assert_return (invoke \"f64.xkcd_sqrt_3\" (f64.const 2.0) (f64.const 0x1.5bf0a8b145769p+1) (f64.const 0x1.921fb54442d18p+1)) (f64.const 0x1.bb02d4eca8f95p+0))",
    "(assert_return (invoke \"f64.sqrt\" (f64.const 5.0)) (f64.const 0x1.1e3779b97f4a8p+1))",
    "(assert_return (invoke \"f64.xkcd_sqrt_5\" (f64.const 2.0) (f64.const 0x1.5bf0a8b145769p+1) (f64.const 3.0)) (f64.const 0x1.1e2d58d8b3bcep+1))",
    "(assert_return (invoke \"f64.xkcd_better_sqrt_5\" (f64.const 13.0) (f64.const 4.0) (f64.const 0x1.921fb54442d18p+1) (f64.const 24.0)) (f64.const 0x1.1e3778509a5a3p+1))",
    "(module \n  (func (export \"f32.compute_radix\") (param $0 f32) (param $1 f32) (result f32) (loop $label$0 (br_if $label$0 (f32.eq (f32.add (f32.sub (f32.add (local.tee $0 (f32.add (local.get $0) (local.get $0))) (f32.const 1) ) (local.get $0) ) (f32.const -1) ) (f32.const 0) ) ) ) (loop $label$2 (br_if $label$2 (f32.ne (f32.sub (f32.sub (f32.add (local.get $0) (local.tee $1 (f32.add (local.get $1) (f32.const 1))) ) (local.get $0) ) (local.get $1) ) (f32.const 0) ) ) ) (local.get $1) )\n  (func (export \"f64.compute_radix\") (param $0 f64) (param $1 f64) (result f64) (loop $label$0 (br_if $label$0 (f64.eq (f64.add (f64.sub (f64.add (local.tee $0 (f64.add (local.get $0) (local.get $0))) (f64.const 1) ) (local.get $0) ) (f64.const -1) ) (f64.const 0) ) ) ) (loop $label$2 (br_if $label$2 (f64.ne (f64.sub (f64.sub (f64.add (local.get $0) (local.tee $1 (f64.add (local.get $1) (f64.const 1))) ) (local.get $0) ) (local.get $1) ) (f64.const 0) ) ) ) (local.get $1) ))",
    "(assert_return (invoke \"f32.compute_radix\" (f32.const 1.0) (f32.const 1.0)) (f32.const 2.0))",
    "(assert_return (invoke \"f64.compute_radix\" (f64.const 1.0) (f64.const 1.0)) (f64.const 2.0))",
    "(module \n  (func (export \"f32.no_fold_sub1_mul_add\") (param $x f32) (param $y f32) (result f32) (f32.add (f32.mul (f32.sub (local.get $x) (f32.const 1.0)) (local.get $y)) (local.get $y)))\n  (func (export \"f64.no_fold_sub1_mul_add\") (param $x f64) (param $y f64) (result f64) (f64.add (f64.mul (f64.sub (local.get $x) (f64.const 1.0)) (local.get $y)) (local.get $y))))",
    "(assert_return (invoke \"f32.no_fold_sub1_mul_add\" (f32.const 0x1p-32) (f32.const 1.0)) (f32.const 0x0p+0))",
    "(assert_return (invoke \"f64.no_fold_sub1_mul_add\" (f64.const 0x1p-64) (f64.const 1.0)) (f64.const 0x0p+0))",
    "(module \n  (func (export \"f32.no_fold_add_le_monotonicity\") (param $x f32) (param $y f32) (param $z f32) (result i32) (f32.le (f32.add (local.get $x) (local.get $z)) (f32.add (local.get $y) (local.get $z))))\n  (func (export \"f32.no_fold_add_ge_monotonicity\") (param $x f32) (param $y f32) (param $z f32) (result i32) (f32.ge (f32.add (local.get $x) (local.get $z)) (f32.add (local.get $y) (local.get $z))))\n  (func (export \"f64.no_fold_add_le_monotonicity\") (param $x f64) (param $y f64) (param $z f64) (result i32) (f64.le (f64.add (local.get $x) (local.get $z)) (f64.add (local.get $y) (local.get $z))))\n  (func (export \"f64.no_fold_add_ge_monotonicity\") (param $x f64) (param $y f64) (param $z f64) (result i32) (f64.ge (f64.add (local.get $x) (local.get $z)) (f64.add (local.get $y) (local.get $z)))))",
    "(assert_return (invoke \"f32.no_fold_add_le_monotonicity\" (f32.const 0.0) (f32.const 0.0) (f32.const nan)) (i32.const 0))",
    "(assert_return (invoke \"f32.no_fold_add_le_monotonicity\" (f32.const inf) (f32.const -inf) (f32.const inf)) (i32.const 0))",
    "(assert_return (invoke \"f64.no_fold_add_le_monotonicity\" (f64.const 0.0) (f64.const 0.0) (f64.const nan)) (i32.const 0))",
    "(assert_return (invoke \"f64.no_fold_add_le_monotonicity\" (f64.const inf) (f64.const -inf) (f64.const inf)) (i32.const 0))",
    "(module \n  (func (export \"f32.not_lt\") (param $x f32) (param $y f32) (result i32) (i32.eqz (f32.lt (local.get $x) (local.get $y))))\n  (func (export \"f32.not_le\") (param $x f32) (param $y f32) (result i32) (i32.eqz (f32.le (local.get $x) (local.get $y))))\n  (func (export \"f32.not_gt\") (param $x f32) (param $y f32) (result i32) (i32.eqz (f32.gt (local.get $x) (local.get $y))))\n  (func (export \"f32.not_ge\") (param $x f32) (param $y f32) (result i32) (i32.eqz (f32.ge (local.get $x) (local.get $y))))\n  (func (export \"f64.not_lt\") (param $x f64) (param $y f64) (result i32) (i32.eqz (f64.lt (local.get $x) (local.get $y))))\n  (func (export \"f64.not_le\") (param $x f64) (param $y f64) (result i32) (i32.eqz (f64.le (local.get $x) (local.get $y))))\n  (func (export \"f64.not_gt\") (param $x f64) (param $y f64) (result i32) (i32.eqz (f64.gt (local.get $x) (local.get $y))))\n  (func (export \"f64.not_ge\") (param $x f64) (param $y f64) (result i32) (i32.eqz (f64.ge (local.get $x) (local.get $y)))))",
    "(assert_return (invoke \"f32.not_lt\" (f32.const nan) (f32.const 0.0)) (i32.const 1))",
    "(assert_return (invoke \"f32.not_le\" (f32.const nan) (f32.const 0.0)) (i32.const 1))",
    "(assert_return (invoke \"f32.not_gt\" (f32.const nan) (f32.const 0.0)) (i32.const 1))",
    "(assert_return (invoke \"f32.not_ge\" (f32.const nan) (f32.const 0.0)) (i32.const 1))",
    "(assert_return (invoke \"f64.not_lt\" (f64.const nan) (f64.const 0.0)) (i32.const 1))",
    "(assert_return (invoke \"f64.not_le\" (f64.const nan) (f64.const 0.0)) (i32.const 1))",
    "(assert_return (invoke \"f64.not_gt\" (f64.const nan) (f64.const 0.0)) (i32.const 1))",
    "(assert_return (invoke \"f64.not_ge\" (f64.const nan) (f64.const 0.0)) (i32.const 1))",
    "(module \n  (func (export \"f32.epsilon\") (result f32) (f32.sub (f32.const 1.0) (f32.mul (f32.const 3.0) (f32.sub (f32.div (f32.const 4.0) (f32.const 3.0)) (f32.const 1.0)))))\n  (func (export \"f64.epsilon\") (result f64) (f64.sub (f64.const 1.0) (f64.mul (f64.const 3.0) (f64.sub (f64.div (f64.const 4.0) (f64.const 3.0)) (f64.const 1.0))))))",
    "(assert_return (invoke \"f32.epsilon\") (f32.const -0x1p-23))",
    "(assert_return (invoke \"f64.epsilon\") (f64.const 0x1p-52))",
    "(module \n  (func (export \"f32.epsilon\") (result f32) (local $x f32) (local $result f32) (local.set $x (f32.const 1)) (loop $loop (br_if $loop (f32.gt (f32.add (local.tee $x (f32.mul (local.tee $result (local.get $x)) (f32.const 0.5) ) ) (f32.const 1) ) (f32.const 1) ) ) ) (local.get $result) )\n  (func (export \"f64.epsilon\") (result f64) (local $x f64) (local $result f64) (local.set $x (f64.const 1)) (loop $loop (br_if $loop (f64.gt (f64.add (local.tee $x (f64.mul (local.tee $result (local.get $x)) (f64.const 0.5) ) ) (f64.const 1) ) (f64.const 1) ) ) ) (local.get $result) ))",
    "(assert_return (invoke \"f32.epsilon\") (f32.const 0x1p-23))",
    "(assert_return (invoke \"f64.epsilon\") (f64.const 0x1p-52))",
    "(module \n  (func (export \"f32.no_trichotomy_lt\") (param $x f32) (param $y f32) (result i32) (i32.or (f32.lt (local.get $x) (local.get $y)) (f32.ge (local.get $x) (local.get $y))))\n  (func (export \"f32.no_trichotomy_le\") (param $x f32) (param $y f32) (result i32) (i32.or (f32.le (local.get $x) (local.get $y)) (f32.gt (local.get $x) (local.get $y))))\n  (func (export \"f32.no_trichotomy_gt\") (param $x f32) (param $y f32) (result i32) (i32.or (f32.gt (local.get $x) (local.get $y)) (f32.le (local.get $x) (local.get $y))))\n  (func (export \"f32.no_trichotomy_ge\") (param $x f32) (param $y f32) (result i32) (i32.or (f32.ge (local.get $x) (local.get $y)) (f32.lt (local.get $x) (local.get $y))))\n  (func (export \"f64.no_trichotomy_lt\") (param $x f64) (param $y f64) (result i32) (i32.or (f64.lt (local.get $x) (local.get $y)) (f64.ge (local.get $x) (local.get $y))))\n  (func (export \"f64.no_trichotomy_le\") (param $x f64) (param $y f64) (result i32) (i32.or (f64.le (local.get $x) (local.get $y)) (f64.gt (local.get $x) (local.get $y))))\n  (func (export \"f64.no_trichotomy_gt\") (param $x f64) (param $y f64) (result i32) (i32.or (f64.gt (local.get $x) (local.get $y)) (f64.le (local.get $x) (local.get $y))))\n  (func (export \"f64.no_trichotomy_ge\") (param $x f64) (param $y f64) (result i32) (i32.or (f64.ge (local.get $x) (local.get $y)) (f64.lt (local.get $x) (local.get $y)))))",
    "(assert_return (invoke \"f32.no_trichotomy_lt\" (f32.const 0.0) (f32.const nan)) (i32.const 0))",
    "(assert_return (invoke \"f32.no_trichotomy_le\" (f32.const 0.0) (f32.const nan)) (i32.const 0))",
    "(assert_return (invoke \"f32.no_trichotomy_gt\" (f32.const 0.0) (f32.const nan)) (i32.const 0))",
    "(assert_return (invoke \"f32.no_trichotomy_ge\" (f32.const 0.0) (f32.const nan)) (i32.const 0))",
    "(assert_return (invoke \"f64.no_trichotomy_lt\" (f64.const 0.0) (f64.const nan)) (i32.const 0))",
    "(assert_return (invoke \"f64.no_trichotomy_le\" (f64.const 0.0) (f64.const nan)) (i32.const 0))",
    "(assert_return (invoke \"f64.no_trichotomy_gt\" (f64.const 0.0) (f64.const nan)) (i32.const 0))",
    "(assert_return (invoke \"f64.no_trichotomy_ge\" (f64.const 0.0) (f64.const nan)) (i32.const 0))",
    "(module \n  (func (export \"f32.arithmetic_nan_bitpattern\") (param $x i32) (param $y i32) (result i32) (i32.and (i32.reinterpret_f32 (f32.div (f32.reinterpret_i32 (local.get $x)) (f32.reinterpret_i32 (local.get $y)))) (i32.const 0x7fc00000)))\n  (func (export \"f32.canonical_nan_bitpattern\") (param $x i32) (param $y i32) (result i32) (i32.and (i32.reinterpret_f32 (f32.div (f32.reinterpret_i32 (local.get $x)) (f32.reinterpret_i32 (local.get $y)))) (i32.const 0x7fffffff)))\n  (func (export \"f32.nonarithmetic_nan_bitpattern\") (param $x i32) (result i32) (i32.reinterpret_f32 (f32.neg (f32.reinterpret_i32 (local.get $x)))))\n  (func (export \"f64.arithmetic_nan_bitpattern\") (param $x i64) (param $y i64) (result i64) (i64.and (i64.reinterpret_f64 (f64.div (f64.reinterpret_i64 (local.get $x)) (f64.reinterpret_i64 (local.get $y)))) (i64.const 0x7ff8000000000000)))\n  (func (export \"f64.canonical_nan_bitpattern\") (param $x i64) (param $y i64) (result i64) (i64.and (i64.reinterpret_f64 (f64.div (f64.reinterpret_i64 (local.get $x)) (f64.reinterpret_i64 (local.get $y)))) (i64.const 0x7fffffffffffffff)))\n  (func (export \"f64.nonarithmetic_nan_bitpattern\") (param $x i64) (result i64) (i64.reinterpret_f64 (f64.neg (f64.reinterpret_i64 (local.get $x)))))\n  (func (export \"f32.no_fold_sub_zero\") (param $x i32) (result i32) (i32.and (i32.reinterpret_f32 (f32.sub (f32.reinterpret_i32 (local.get $x)) (f32.const 0.0))) (i32.const 0x7fc00000)))\n  (func (export \"f32.no_fold_neg0_sub\") (param $x i32) (result i32) (i32.and (i32.reinterpret_f32 (f32.sub (f32.const -0.0) (f32.reinterpret_i32 (local.get $x)))) (i32.const 0x7fc00000)))\n  (func (export \"f32.no_fold_mul_one\") (param $x i32) (result i32) (i32.and (i32.reinterpret_f32 (f32.mul (f32.reinterpret_i32 (local.get $x)) (f32.const 1.0))) (i32.const 0x7fc00000)))\n  (func (export \"f32.no_fold_neg1_mul\") (param $x i32) (result i32) (i32.and (i32.reinterpret_f32 (f32.mul (f32.const -1.0) (f32.reinterpret_i32 (local.get $x)))) (i32.const 0x7fc00000)))\n  (func (export \"f32.no_fold_div_one\") (param $x i32) (result i32) (i32.and (i32.reinterpret_f32 (f32.div (f32.reinterpret_i32 (local.get $x)) (f32.const 1.0))) (i32.const 0x7fc00000)))\n  (func (export \"f32.no_fold_div_neg1\") (param $x i32) (result i32) (i32.and (i32.reinterpret_f32 (f32.div (f32.reinterpret_i32 (local.get $x)) (f32.const -1.0))) (i32.const 0x7fc00000)))\n  (func (export \"f64.no_fold_sub_zero\") (param $x i64) (result i64) (i64.and (i64.reinterpret_f64 (f64.sub (f64.reinterpret_i64 (local.get $x)) (f64.const 0.0))) (i64.const 0x7ff8000000000000)))\n  (func (export \"f64.no_fold_neg0_sub\") (param $x i64) (result i64) (i64.and (i64.reinterpret_f64 (f64.sub (f64.const -0.0) (f64.reinterpret_i64 (local.get $x)))) (i64.const 0x7ff8000000000000)))\n  (func (export \"f64.no_fold_mul_one\") (param $x i64) (result i64) (i64.and (i64.reinterpret_f64 (f64.mul (f64.reinterpret_i64 (local.get $x)) (f64.const 1.0))) (i64.const 0x7ff8000000000000)))\n  (func (export \"f64.no_fold_neg1_mul\") (param $x i64) (result i64) (i64.and (i64.reinterpret_f64 (f64.mul (f64.const -1.0) (f64.reinterpret_i64 (local.get $x)))) (i64.const 0x7ff8000000000000)))\n  (func (export \"f64.no_fold_div_one\") (param $x i64) (result i64) (i64.and (i64.reinterpret_f64 (f64.div (f64.reinterpret_i64 (local.get $x)) (f64.const 1.0))) (i64.const 0x7ff8000000000000)))\n  (func (export \"f64.no_fold_div_neg1\") (param $x i64) (result i64) (i64.and (i64.reinterpret_f64 (f64.div (f64.reinterpret_i64 (local.get $x)) (f64.const -1.0))) (i64.const 0x7ff8000000000000)))\n  (func (export \"no_fold_promote_demote\") (param $x i32) (result i32) (i32.and (i32.reinterpret_f32 (f32.demote_f64 (f64.promote_f32 (f32.reinterpret_i32 (local.get $x))))) (i32.const 0x7fc00000))))",
    "(assert_return (invoke \"f32.arithmetic_nan_bitpattern\" (i32.const 0x7f803210) (i32.const 0x7f803210)) (i32.const 0x7fc00000))",
    "(assert_return (invoke \"f32.canonical_nan_bitpattern\" (i32.const 0) (i32.const 0)) (i32.const 0x7fc00000))",
    "(assert_return (invoke \"f32.canonical_nan_bitpattern\" (i32.const 0x7fc00000) (i32.const 0x7fc00000)) (i32.const 0x7fc00000))",
    "(assert_return (invoke \"f32.canonical_nan_bitpattern\" (i32.const 0xffc00000) (i32.const 0x7fc00000)) (i32.const 0x7fc00000))",
    "(assert_return (invoke \"f32.canonical_nan_bitpattern\" (i32.const 0x7fc00000) (i32.const 0xffc00000)) (i32.const 0x7fc00000))",
    "(assert_return (invoke \"f32.canonical_nan_bitpattern\" (i32.const 0xffc00000) (i32.const 0xffc00000)) (i32.const 0x7fc00000))",
    "(assert_return (invoke \"f32.nonarithmetic_nan_bitpattern\" (i32.const 0x7fc03210)) (i32.const 0xffc03210))",
    "(assert_return (invoke \"f32.nonarithmetic_nan_bitpattern\" (i32.const 0xffc03210)) (i32.const 0x7fc03210))",
    "(assert_return (invoke \"f32.nonarithmetic_nan_bitpattern\" (i32.const 0x7f803210)) (i32.const 0xff803210))",
    "(assert_return (invoke \"f32.nonarithmetic_nan_bitpattern\" (i32.const 0xff803210)) (i32.const 0x7f803210))",
    "(assert_return (invoke \"f64.arithmetic_nan_bitpattern\" (i64.const 0x7ff0000000003210) (i64.const 0x7ff0000000003210)) (i64.const 0x7ff8000000000000))",
    "(assert_return (invoke \"f64.canonical_nan_bitpattern\" (i64.const 0) (i64.const 0)) (i64.const 0x7ff8000000000000))",
    "(assert_return (invoke \"f64.canonical_nan_bitpattern\" (i64.const 0x7ff8000000000000) (i64.const 0x7ff8000000000000)) (i64.const 0x7ff8000000000000))",
    "(assert_return (invoke \"f64.canonical_nan_bitpattern\" (i64.const 0xfff8000000000000) (i64.const 0x7ff8000000000000)) (i64.const 0x7ff8000000000000))",
    "(assert_return (invoke \"f64.canonical_nan_bitpattern\" (i64.const 0x7ff8000000000000) (i64.const 0xfff8000000000000)) (i64.const 0x7ff8000000000000))",
    "(assert_return (invoke \"f64.canonical_nan_bitpattern\" (i64.const 0xfff8000000000000) (i64.const 0xfff8000000000000)) (i64.const 0x7ff8000000000000))",
    "(assert_return (invoke \"f64.nonarithmetic_nan_bitpattern\" (i64.const 0x7ff8000000003210)) (i64.const 0xfff8000000003210))",
    "(assert_return (invoke \"f64.nonarithmetic_nan_bitpattern\" (i64.const 0xfff8000000003210)) (i64.const 0x7ff8000000003210))",
    "(assert_return (invoke \"f64.nonarithmetic_nan_bitpattern\" (i64.const 0x7ff0000000003210)) (i64.const 0xfff0000000003210))",
    "(assert_return (invoke \"f64.nonarithmetic_nan_bitpattern\" (i64.const 0xfff0000000003210)) (i64.const 0x7ff0000000003210))",
    "(assert_return (invoke \"f32.no_fold_sub_zero\" (i32.const 0x7fa00000)) (i32.const 0x7fc00000))",
    "(assert_return (invoke \"f32.no_fold_neg0_sub\" (i32.const 0x7fa00000)) (i32.const 0x7fc00000))",
    "(assert_return (invoke \"f32.no_fold_mul_one\" (i32.const 0x7fa00000)) (i32.const 0x7fc00000))",
    "(assert_return (invoke \"f32.no_fold_neg1_mul\" (i32.const 0x7fa00000)) (i32.const 0x7fc00000))",
    "(assert_return (invoke \"f32.no_fold_div_one\" (i32.const 0x7fa00000)) (i32.const 0x7fc00000))",
    "(assert_return (invoke \"f32.no_fold_div_neg1\" (i32.const 0x7fa00000)) (i32.const 0x7fc00000))",
    "(assert_return (invoke \"f64.no_fold_sub_zero\" (i64.const 0x7ff4000000000000)) (i64.const 0x7ff8000000000000))",
    "(assert_return (invoke \"f64.no_fold_neg0_sub\" (i64.const 0x7ff4000000000000)) (i64.const 0x7ff8000000000000))",
    "(assert_return (invoke \"f64.no_fold_mul_one\" (i64.const 0x7ff4000000000000)) (i64.const 0x7ff8000000000000))",
    "(assert_return (invoke \"f64.no_fold_neg1_mul\" (i64.const 0x7ff4000000000000)) (i64.const 0x7ff8000000000000))",
    "(assert_return (invoke \"f64.no_fold_div_one\" (i64.const 0x7ff4000000000000)) (i64.const 0x7ff8000000000000))",
    "(assert_return (invoke \"f64.no_fold_div_neg1\" (i64.const 0x7ff4000000000000)) (i64.const 0x7ff8000000000000))",
    "(assert_return (invoke \"no_fold_promote_demote\" (i32.const 0x7fa00000)) (i32.const 0x7fc00000))",
    "(module \n  (func (export \"dot_product_example\") (param $x0 f64) (param $x1 f64) (param $x2 f64) (param $x3 f64) (param $y0 f64) (param $y1 f64) (param $y2 f64) (param $y3 f64) (result f64) (f64.add (f64.add (f64.add (f64.mul (local.get $x0) (local.get $y0)) (f64.mul (local.get $x1) (local.get $y1))) (f64.mul (local.get $x2) (local.get $y2))) (f64.mul (local.get $x3) (local.get $y3))) )\n  (func (export \"with_binary_sum_collapse\") (param $x0 f64) (param $x1 f64) (param $x2 f64) (param $x3 f64) (param $y0 f64) (param $y1 f64) (param $y2 f64) (param $y3 f64) (result f64) (f64.add (f64.add (f64.mul (local.get $x0) (local.get $y0)) (f64.mul (local.get $x1) (local.get $y1))) (f64.add (f64.mul (local.get $x2) (local.get $y2)) (f64.mul (local.get $x3) (local.get $y3)))) ))",
    "(assert_return (invoke \"dot_product_example\" (f64.const 3.2e7) (f64.const 1.0) (f64.const -1.0) (f64.const 8.0e7) (f64.const 4.0e7) (f64.const 1.0) (f64.const -1.0) (f64.const -1.6e7)) (f64.const 2.0))",
    "(assert_return (invoke \"with_binary_sum_collapse\" (f64.const 3.2e7) (f64.const 1.0) (f64.const -1.0) (f64.const 8.0e7) (f64.const 4.0e7) (f64.const 1.0) (f64.const -1.0) (f64.const -1.6e7)) (f64.const 2.0))",
    "(module \n  (func (export \"f32.contract2fma\") (param $x f32) (param $y f32) (result f32) (f32.sqrt (f32.sub (f32.mul (local.get $x) (local.get $x)) (f32.mul (local.get $y) (local.get $y)))))\n  (func (export \"f64.contract2fma\") (param $x f64) (param $y f64) (result f64) (f64.sqrt (f64.sub (f64.mul (local.get $x) (local.get $x)) (f64.mul (local.get $y) (local.get $y))))))",
    "(assert_return (invoke \"f32.contract2fma\" (f32.const 1.0) (f32.const 1.0)) (f32.const 0.0))",
    "(assert_return (invoke \"f32.contract2fma\" (f32.const 0x1.19999ap+0) (f32.const 0x1.19999ap+0)) (f32.const 0.0))",
    "(assert_return (invoke \"f32.contract2fma\" (f32.const 0x1.333332p+0) (f32.const 0x1.333332p+0)) (f32.const 0.0))",
    "(assert_return (invoke \"f64.contract2fma\" (f64.const 1.0) (f64.const 1.0)) (f64.const 0.0))",
    "(assert_return (invoke \"f64.contract2fma\" (f64.const 0x1.199999999999ap+0) (f64.const 0x1.199999999999ap+0)) (f64.const 0.0))",
    "(assert_return (invoke \"f64.contract2fma\" (f64.const 0x1.3333333333333p+0) (f64.const 0x1.3333333333333p+0)) (f64.const 0.0))",
    "(module \n  (func (export \"f32.division_by_small_number\") (param $a f32) (param $b f32) (param $c f32) (result f32) (f32.sub (local.get $a) (f32.div (local.get $b) (local.get $c))))\n  (func (export \"f64.division_by_small_number\") (param $a f64) (param $b f64) (param $c f64) (result f64) (f64.sub (local.get $a) (f64.div (local.get $b) (local.get $c)))))",
    "(assert_return (invoke \"f32.division_by_small_number\" (f32.const 112000000) (f32.const 100000) (f32.const 0.0009)) (f32.const 888888))",
    "(assert_return (invoke \"f64.division_by_small_number\" (f64.const 112000000) (f64.const 100000) (f64.const 0.0009)) (f64.const 888888.8888888806))",
    "(module \n  (func (export \"f32.golden_ratio\") (param $a f32) (param $b f32) (param $c f32) (result f32) (f32.mul (local.get 0) (f32.add (local.get 1) (f32.sqrt (local.get 2)))))\n  (func (export \"f64.golden_ratio\") (param $a f64) (param $b f64) (param $c f64) (result f64) (f64.mul (local.get 0) (f64.add (local.get 1) (f64.sqrt (local.get 2))))))",
    "(assert_return (invoke \"f32.golden_ratio\" (f32.const 0.5) (f32.const 1.0) (f32.const 5.0)) (f32.const 1.618034))",
    "(assert_return (invoke \"f64.golden_ratio\" (f64.const 0.5) (f64.const 1.0) (f64.const 5.0)) (f64.const 1.618033988749895))",
    "(module \n  (func (export \"f32.silver_means\") (param $n f32) (result f32) (f32.mul (f32.const 0.5) (f32.add (local.get $n) (f32.sqrt (f32.add (f32.mul (local.get $n) (local.get $n)) (f32.const 4.0))))))\n  (func (export \"f64.silver_means\") (param $n f64) (result f64) (f64.mul (f64.const 0.5) (f64.add (local.get $n) (f64.sqrt (f64.add (f64.mul (local.get $n) (local.get $n)) (f64.const 4.0)))))))",
    "(assert_return (invoke \"f32.silver_means\" (f32.const 0.0)) (f32.const 1.0))",
    "(assert_return (invoke \"f32.silver_means\" (f32.const 1.0)) (f32.const 1.6180340))",
    "(assert_return (invoke \"f32.silver_means\" (f32.const 2.0)) (f32.const 2.4142136))",
    "(assert_return (invoke \"f32.silver_means\" (f32.const 3.0)) (f32.const 3.3027756))",
    "(assert_return (invoke \"f32.silver_means\" (f32.const 4.0)) (f32.const 4.2360680))",
    "(assert_return (invoke \"f32.silver_means\" (f32.const 5.0)) (f32.const 5.1925821))",
    "(assert_return (invoke \"f64.silver_means\" (f64.const 0.0)) (f64.const 1.0))",
    "(assert_return (invoke \"f64.silver_means\" (f64.const 1.0)) (f64.const 1.618033988749895))",
    "(assert_return (invoke \"f64.silver_means\" (f64.const 2.0)) (f64.const 2.414213562373095))",
    "(assert_return (invoke \"f64.silver_means\" (f64.const 3.0)) (f64.const 3.302775637731995))",
    "(assert_return (invoke \"f64.silver_means\" (f64.const 4.0)) (f64.const 4.236067977499790))",
    "(assert_return (invoke \"f64.silver_means\" (f64.const 5.0)) (f64.const 5.192582403567252))",
    "(module \n  (func (export \"point_four\") (param $four f64) (param $ten f64) (result i32) (f64.lt (f64.div (local.get $four) (local.get $ten)) (f64.const 0.4))))",
    "(assert_return (invoke \"point_four\" (f64.const 4.0) (f64.const 10.0)) (i32.const 0))",
    "(module \n  (func (export \"tau\") (param i32) (result f64) (local f64 f64 f64 f64) f64.const 0x0p+0 local.set 1 block local.get 0 i32.const 1 i32.lt_s br_if 0 f64.const 0x1p+0 local.set 2 f64.const 0x0p+0 local.set 3 loop local.get 1 local.get 2 f64.const 0x1p+3 local.get 3 f64.const 0x1p+3 f64.mul local.tee 4 f64.const 0x1p+0 f64.add f64.div f64.const 0x1p+2 local.get 4 f64.const 0x1p+2 f64.add f64.div f64.sub f64.const 0x1p+1 local.get 4 f64.const 0x1.4p+2 f64.add f64.div f64.sub f64.const 0x1p+1 local.get 4 f64.const 0x1.8p+2 f64.add f64.div f64.sub f64.mul f64.add local.set 1 local.get 3 f64.const 0x1p+0 f64.add local.set 3 local.get 2 f64.const 0x1p-4 f64.mul local.set 2 local.get 0 i32.const -1 i32.add local.tee 0 br_if 0 end end local.get 1 ))",
    "(assert_return (invoke \"tau\" (i32.const 10)) (f64.const 0x1.921fb54442d14p+2))",
    "(assert_return (invoke \"tau\" (i32.const 11)) (f64.const 0x1.921fb54442d18p+2))",
    "(module \n  (func (export \"f32.no_fold_conditional_inc\") (param $x f32) (param $y f32) (result f32) (select (local.get $x) (f32.add (local.get $x) (f32.const 1.0)) (f32.lt (local.get $y) (f32.const 0.0))))\n  (func (export \"f64.no_fold_conditional_inc\") (param $x f64) (param $y f64) (result f64) (select (local.get $x) (f64.add (local.get $x) (f64.const 1.0)) (f64.lt (local.get $y) (f64.const 0.0)))))",
    "(assert_return (invoke \"f32.no_fold_conditional_inc\" (f32.const -0.0) (f32.const -1.0)) (f32.const -0.0))",
    "(assert_return (invoke \"f64.no_fold_conditional_inc\" (f64.const -0.0) (f64.const -1.0)) (f64.const -0.0))"
  ],
  "dump": {
    "float_exprs.0.wasm": {
      "header": "\nfloat_exprs.0.wasm:\tfile format wasm 0x1\n\nSections:\n\n     Type start=0x0000000a end=0x00000012 (size=0x00000008) count: 1\n Function start=0x00000014 end=0x00000016 (size=0x00000002) count: 1\n   Export start=0x00000018 end=0x0000002e (size=0x00000016) count: 1\n     Code start=0x00000030 end=0x0000003c (size=0x0000000c) count: 1\n",
      "details": "\nfloat_exprs.0.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nType[1]:\n - type[0] (f64, f64, f64) -> f64\nFunction[1]:\n - func[0] sig=0 <f64.no_contraction>\nExport[1]:\n - func[0] <f64.no_contraction> -> \"f64.no_contraction\"\nCode[1]:\n - func[0] size=10 <f64.no_contraction>\n",
      "disassemble": "\nfloat_exprs.0.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n000032 func[0] <f64.no_contraction>:\n 000033: 20 00                      | local.get 0\n 000035: 20 01                      | local.get 1\n 000037: a2                         | f64.mul\n 000038: 20 02                      | local.get 2\n 00003a: a0                         | f64.add\n 00003b: 0b                         | end\n"
    },
    "float_exprs.1.wasm": {
      "header": "\nfloat_exprs.1.wasm:\tfile format wasm 0x1\n\nSections:\n\n     Type start=0x0000000a end=0x00000019 (size=0x0000000f) count: 2\n Function start=0x0000001b end=0x0000001e (size=0x00000003) count: 2\n   Export start=0x00000020 end=0x0000003b (size=0x0000001b) count: 2\n     Code start=0x0000003d end=0x00000054 (size=0x00000017) count: 2\n",
      "details": "\nfloat_exprs.1.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nType[2]:\n - type[0] (f32, f32, f32) -> f32\n - type[1] (f64, f64, f64) -> f64\nFunction[2]:\n - func[0] sig=0 <f32.no_fma>\n - func[1] sig=1 <f64.no_fma>\nExport[2]:\n - func[0] <f32.no_fma> -> \"f32.no_fma\"\n - func[1] <f64.no_fma> -> \"f64.no_fma\"\nCode[2]:\n - func[0] size=10 <f32.no_fma>\n - func[1] size=10 <f64.no_fma>\n",
      "disassemble": "\nfloat_exprs.1.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n00003f func[0] <f32.no_fma>:\n 000040: 20 00                      | local.get 0\n 000042: 20 01                      | local.get 1\n 000044: 94                         | f32.mul\n 000045: 20 02                      | local.get 2\n 000047: 92                         | f32.add\n 000048: 0b                         | end\n00004a func[1] <f64.no_fma>:\n 00004b: 20 00                      | local.get 0\n 00004d: 20 01                      | local.get 1\n 00004f: a2                         | f64.mul\n 000050: 20 02                      | local.get 2\n 000052: a0                         | f64.add\n 000053: 0b                         | end\n"
    },
    "float_exprs.2.wasm": {
      "header": "\nfloat_exprs.2.wasm:\tfile format wasm 0x1\n\nSections:\n\n     Type start=0x0000000a end=0x00000015 (size=0x0000000b) count: 2\n Function start=0x00000017 end=0x0000001a (size=0x00000003) count: 2\n   Export start=0x0000001c end=0x0000004b (size=0x0000002f) count: 2\n     Code start=0x0000004d end=0x00000068 (size=0x0000001b) count: 2\n",
      "details": "\nfloat_exprs.2.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nType[2]:\n - type[0] (f32) -> f32\n - type[1] (f64) -> f64\nFunction[2]:\n - func[0] sig=0 <f32.no_fold_add_zero>\n - func[1] sig=1 <f64.no_fold_add_zero>\nExport[2]:\n - func[0] <f32.no_fold_add_zero> -> \"f32.no_fold_add_zero\"\n - func[1] <f64.no_fold_add_zero> -> \"f64.no_fold_add_zero\"\nCode[2]:\n - func[0] size=10 <f32.no_fold_add_zero>\n - func[1] size=14 <f64.no_fold_add_zero>\n",
      "disassemble": "\nfloat_exprs.2.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n00004f func[0] <f32.no_fold_add_zero>:\n 000050: 20 00                      | local.get 0\n 000052: 43 00 00 00 00             | f32.const 0x0p+0\n 000057: 92                         | f32.add\n 000058: 0b                         | end\n00005a func[1] <f64.no_fold_add_zero>:\n 00005b: 20 00                      | local.get 0\n 00005d: 44 00 00 00 00 00 00 00 00 | f64.const 0x0p+0\n 000066: a0                         | f64.add\n 000067: 0b                         | end\n"
    },
    "float_exprs.3.wasm": {
      "header": "\nfloat_exprs.3.wasm:\tfile format wasm 0x1\n\nSections:\n\n     Type start=0x0000000a end=0x00000015 (size=0x0000000b) count: 2\n Function start=0x00000017 end=0x0000001a (size=0x00000003) count: 2\n   Export start=0x0000001c end=0x0000004b (size=0x0000002f) count: 2\n     Code start=0x0000004d end=0x00000068 (size=0x0000001b) count: 2\n",
      "details": "\nfloat_exprs.3.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nType[2]:\n - type[0] (f32) -> f32\n - type[1] (f64) -> f64\nFunction[2]:\n - func[0] sig=0 <f32.no_fold_zero_sub>\n - func[1] sig=1 <f64.no_fold_zero_sub>\nExport[2]:\n - func[0] <f32.no_fold_zero_sub> -> \"f32.no_fold_zero_sub\"\n - func[1] <f64.no_fold_zero_sub> -> \"f64.no_fold_zero_sub\"\nCode[2]:\n - func[0] size=10 <f32.no_fold_zero_sub>\n - func[1] size=14 <f64.no_fold_zero_sub>\n",
      "disassemble": "\nfloat_exprs.3.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n00004f func[0] <f32.no_fold_zero_sub>:\n 000050: 43 00 00 00 00             | f32.const 0x0p+0\n 000055: 20 00                      | local.get 0\n 000057: 93                         | f32.sub\n 000058: 0b                         | end\n00005a func[1] <f64.no_fold_zero_sub>:\n 00005b: 44 00 00 00 00 00 00 00 00 | f64.const 0x0p+0\n 000064: 20 00                      | local.get 0\n 000066: a1                         | f64.sub\n 000067: 0b                         | end\n"
    },
    "float_exprs.4.wasm": {
      "header": "\nfloat_exprs.4.wasm:\tfile format wasm 0x1\n\nSections:\n\n     Type start=0x0000000a end=0x00000015 (size=0x0000000b) count: 2\n Function start=0x00000017 end=0x0000001a (size=0x00000003) count: 2\n   Export start=0x0000001c end=0x0000004b (size=0x0000002f) count: 2\n     Code start=0x0000004d end=0x00000068 (size=0x0000001b) count: 2\n",
      "details": "\nfloat_exprs.4.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nType[2]:\n - type[0] (f32) -> f32\n - type[1] (f64) -> f64\nFunction[2]:\n - func[0] sig=0 <f32.no_fold_sub_zero>\n - func[1] sig=1 <f64.no_fold_sub_zero>\nExport[2]:\n - func[0] <f32.no_fold_sub_zero> -> \"f32.no_fold_sub_zero\"\n - func[1] <f64.no_fold_sub_zero> -> \"f64.no_fold_sub_zero\"\nCode[2]:\n - func[0] size=10 <f32.no_fold_sub_zero>\n - func[1] size=14 <f64.no_fold_sub_zero>\n",
      "disassemble": "\nfloat_exprs.4.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n00004f func[0] <f32.no_fold_sub_zero>:\n 000050: 20 00                      | local.get 0\n 000052: 43 00 00 00 00             | f32.const 0x0p+0\n 000057: 93                         | f32.sub\n 000058: 0b                         | end\n00005a func[1] <f64.no_fold_sub_zero>:\n 00005b: 20 00                      | local.get 0\n 00005d: 44 00 00 00 00 00 00 00 00 | f64.const 0x0p+0\n 000066: a1                         | f64.sub\n 000067: 0b                         | end\n"
    },
    "float_exprs.5.wasm": {
      "header": "\nfloat_exprs.5.wasm:\tfile format wasm 0x1\n\nSections:\n\n     Type start=0x0000000a end=0x00000015 (size=0x0000000b) count: 2\n Function start=0x00000017 end=0x0000001a (size=0x00000003) count: 2\n   Export start=0x0000001c end=0x0000004b (size=0x0000002f) count: 2\n     Code start=0x0000004d end=0x00000068 (size=0x0000001b) count: 2\n",
      "details": "\nfloat_exprs.5.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nType[2]:\n - type[0] (f32) -> f32\n - type[1] (f64) -> f64\nFunction[2]:\n - func[0] sig=0 <f32.no_fold_mul_zero>\n - func[1] sig=1 <f64.no_fold_mul_zero>\nExport[2]:\n - func[0] <f32.no_fold_mul_zero> -> \"f32.no_fold_mul_zero\"\n - func[1] <f64.no_fold_mul_zero> -> \"f64.no_fold_mul_zero\"\nCode[2]:\n - func[0] size=10 <f32.no_fold_mul_zero>\n - func[1] size=14 <f64.no_fold_mul_zero>\n",
      "disassemble": "\nfloat_exprs.5.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n00004f func[0] <f32.no_fold_mul_zero>:\n 000050: 20 00                      | local.get 0\n 000052: 43 00 00 00 00             | f32.const 0x0p+0\n 000057: 94                         | f32.mul\n 000058: 0b                         | end\n00005a func[1] <f64.no_fold_mul_zero>:\n 00005b: 20 00                      | local.get 0\n 00005d: 44 00 00 00 00 00 00 00 00 | f64.const 0x0p+0\n 000066: a2                         | f64.mul\n 000067: 0b                         | end\n"
    },
    "float_exprs.6.wasm": {
      "header": "\nfloat_exprs.6.wasm:\tfile format wasm 0x1\n\nSections:\n\n     Type start=0x0000000a end=0x00000015 (size=0x0000000b) count: 2\n Function start=0x00000017 end=0x0000001a (size=0x00000003) count: 2\n   Export start=0x0000001c end=0x00000049 (size=0x0000002d) count: 2\n     Code start=0x0000004b end=0x00000066 (size=0x0000001b) count: 2\n",
      "details": "\nfloat_exprs.6.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nType[2]:\n - type[0] (f32) -> f32\n - type[1] (f64) -> f64\nFunction[2]:\n - func[0] sig=0 <f32.no_fold_mul_one>\n - func[1] sig=1 <f64.no_fold_mul_one>\nExport[2]:\n - func[0] <f32.no_fold_mul_one> -> \"f32.no_fold_mul_one\"\n - func[1] <f64.no_fold_mul_one> -> \"f64.no_fold_mul_one\"\nCode[2]:\n - func[0] size=10 <f32.no_fold_mul_one>\n - func[1] size=14 <f64.no_fold_mul_one>\n",
      "disassemble": "\nfloat_exprs.6.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n00004d func[0] <f32.no_fold_mul_one>:\n 00004e: 20 00                      | local.get 0\n 000050: 43 00 00 80 3f             | f32.const 0x1p+0\n 000055: 94                         | f32.mul\n 000056: 0b                         | end\n000058 func[1] <f64.no_fold_mul_one>:\n 000059: 20 00                      | local.get 0\n 00005b: 44 00 00 00 00 00 00 f0 3f | f64.const 0x1p+0\n 000064: a2                         | f64.mul\n 000065: 0b                         | end\n"
    },
    "float_exprs.7.wasm": {
      "header": "\nfloat_exprs.7.wasm:\tfile format wasm 0x1\n\nSections:\n\n     Type start=0x0000000a end=0x00000015 (size=0x0000000b) count: 2\n Function start=0x00000017 end=0x0000001a (size=0x00000003) count: 2\n   Export start=0x0000001c end=0x0000004b (size=0x0000002f) count: 2\n     Code start=0x0000004d end=0x00000068 (size=0x0000001b) count: 2\n",
      "details": "\nfloat_exprs.7.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nType[2]:\n - type[0] (f32) -> f32\n - type[1] (f64) -> f64\nFunction[2]:\n - func[0] sig=0 <f32.no_fold_zero_div>\n - func[1] sig=1 <f64.no_fold_zero_div>\nExport[2]:\n - func[0] <f32.no_fold_zero_div> -> \"f32.no_fold_zero_div\"\n - func[1] <f64.no_fold_zero_div> -> \"f64.no_fold_zero_div\"\nCode[2]:\n - func[0] size=10 <f32.no_fold_zero_div>\n - func[1] size=14 <f64.no_fold_zero_div>\n",
      "disassemble": "\nfloat_exprs.7.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n00004f func[0] <f32.no_fold_zero_div>:\n 000050: 43 00 00 00 00             | f32.const 0x0p+0\n 000055: 20 00                      | local.get 0\n 000057: 95                         | f32.div\n 000058: 0b                         | end\n00005a func[1] <f64.no_fold_zero_div>:\n 00005b: 44 00 00 00 00 00 00 00 00 | f64.const 0x0p+0\n 000064: 20 00                      | local.get 0\n 000066: a3                         | f64.div\n 000067: 0b                         | end\n"
    },
    "float_exprs.8.wasm": {
      "header": "\nfloat_exprs.8.wasm:\tfile format wasm 0x1\n\nSections:\n\n     Type start=0x0000000a end=0x00000015 (size=0x0000000b) count: 2\n Function start=0x00000017 end=0x0000001a (size=0x00000003) count: 2\n   Export start=0x0000001c end=0x00000049 (size=0x0000002d) count: 2\n     Code start=0x0000004b end=0x00000066 (size=0x0000001b) count: 2\n",
      "details": "\nfloat_exprs.8.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nType[2]:\n - type[0] (f32) -> f32\n - type[1] (f64) -> f64\nFunction[2]:\n - func[0] sig=0 <f32.no_fold_div_one>\n - func[1] sig=1 <f64.no_fold_div_one>\nExport[2]:\n - func[0] <f32.no_fold_div_one> -> \"f32.no_fold_div_one\"\n - func[1] <f64.no_fold_div_one> -> \"f64.no_fold_div_one\"\nCode[2]:\n - func[0] size=10 <f32.no_fold_div_one>\n - func[1] size=14 <f64.no_fold_div_one>\n",
      "disassemble": "\nfloat_exprs.8.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n00004d func[0] <f32.no_fold_div_one>:\n 00004e: 20 00                      | local.get 0\n 000050: 43 00 00 80 3f             | f32.const 0x1p+0\n 000055: 95                         | f32.div\n 000056: 0b                         | end\n000058 func[1] <f64.no_fold_div_one>:\n 000059: 20 00                      | local.get 0\n 00005b: 44 00 00 00 00 00 00 f0 3f | f64.const 0x1p+0\n 000064: a3                         | f64.div\n 000065: 0b                         | end\n"
    },
    "float_exprs.9.wasm": {
      "header": "\nfloat_exprs.9.wasm:\tfile format wasm 0x1\n\nSections:\n\n     Type start=0x0000000a end=0x00000015 (size=0x0000000b) count: 2\n Function start=0x00000017 end=0x0000001a (size=0x00000003) count: 2\n   Export start=0x0000001c end=0x0000004b (size=0x0000002f) count: 2\n     Code start=0x0000004d end=0x00000068 (size=0x0000001b) count: 2\n",
      "details": "\nfloat_exprs.9.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nType[2]:\n - type[0] (f32) -> f32\n - type[1] (f64) -> f64\nFunction[2]:\n - func[0] sig=0 <f32.no_fold_div_neg1>\n - func[1] sig=1 <f64.no_fold_div_neg1>\nExport[2]:\n - func[0] <f32.no_fold_div_neg1> -> \"f32.no_fold_div_neg1\"\n - func[1] <f64.no_fold_div_neg1> -> \"f64.no_fold_div_neg1\"\nCode[2]:\n - func[0] size=10 <f32.no_fold_div_neg1>\n - func[1] size=14 <f64.no_fold_div_neg1>\n",
      "disassemble": "\nfloat_exprs.9.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n00004f func[0] <f32.no_fold_div_neg1>:\n 000050: 20 00                      | local.get 0\n 000052: 43 00 00 80 bf             | f32.const -0x1p+0\n 000057: 95                         | f32.div\n 000058: 0b                         | end\n00005a func[1] <f64.no_fold_div_neg1>:\n 00005b: 20 00                      | local.get 0\n 00005d: 44 00 00 00 00 00 00 f0 bf | f64.const -0x1p+0\n 000066: a3                         | f64.div\n 000067: 0b                         | end\n"
    },
    "float_exprs.10.wasm": {
      "header": "\nfloat_exprs.10.wasm:\tfile format wasm 0x1\n\nSections:\n\n     Type start=0x0000000a end=0x00000015 (size=0x0000000b) count: 2\n Function start=0x00000017 end=0x0000001a (size=0x00000003) count: 2\n   Export start=0x0000001c end=0x0000004b (size=0x0000002f) count: 2\n     Code start=0x0000004d end=0x00000068 (size=0x0000001b) count: 2\n",
      "details": "\nfloat_exprs.10.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nType[2]:\n - type[0] (f32) -> f32\n - type[1] (f64) -> f64\nFunction[2]:\n - func[0] sig=0 <f32.no_fold_neg0_sub>\n - func[1] sig=1 <f64.no_fold_neg0_sub>\nExport[2]:\n - func[0] <f32.no_fold_neg0_sub> -> \"f32.no_fold_neg0_sub\"\n - func[1] <f64.no_fold_neg0_sub> -> \"f64.no_fold_neg0_sub\"\nCode[2]:\n - func[0] size=10 <f32.no_fold_neg0_sub>\n - func[1] size=14 <f64.no_fold_neg0_sub>\n",
      "disassemble": "\nfloat_exprs.10.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n00004f func[0] <f32.no_fold_neg0_sub>:\n 000050: 43 00 00 00 80             | f32.const -0x0p+0\n 000055: 20 00                      | local.get 0\n 000057: 93                         | f32.sub\n 000058: 0b                         | end\n00005a func[1] <f64.no_fold_neg0_sub>:\n 00005b: 44 00 00 00 00 00 00 00 80 | f64.const -0x0p+0\n 000064: 20 00                      | local.get 0\n 000066: a1                         | f64.sub\n 000067: 0b                         | end\n"
    },
    "float_exprs.11.wasm": {
      "header": "\nfloat_exprs.11.wasm:\tfile format wasm 0x1\n\nSections:\n\n     Type start=0x0000000a end=0x00000015 (size=0x0000000b) count: 2\n Function start=0x00000017 end=0x0000001a (size=0x00000003) count: 2\n   Export start=0x0000001c end=0x0000004b (size=0x0000002f) count: 2\n     Code start=0x0000004d end=0x00000068 (size=0x0000001b) count: 2\n",
      "details": "\nfloat_exprs.11.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nType[2]:\n - type[0] (f32) -> f32\n - type[1] (f64) -> f64\nFunction[2]:\n - func[0] sig=0 <f32.no_fold_neg1_mul>\n - func[1] sig=1 <f64.no_fold_neg1_mul>\nExport[2]:\n - func[0] <f32.no_fold_neg1_mul> -> \"f32.no_fold_neg1_mul\"\n - func[1] <f64.no_fold_neg1_mul> -> \"f64.no_fold_neg1_mul\"\nCode[2]:\n - func[0] size=10 <f32.no_fold_neg1_mul>\n - func[1] size=14 <f64.no_fold_neg1_mul>\n",
      "disassemble": "\nfloat_exprs.11.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n00004f func[0] <f32.no_fold_neg1_mul>:\n 000050: 43 00 00 80 bf             | f32.const -0x1p+0\n 000055: 20 00                      | local.get 0\n 000057: 94                         | f32.mul\n 000058: 0b                         | end\n00005a func[1] <f64.no_fold_neg1_mul>:\n 00005b: 44 00 00 00 00 00 00 f0 bf | f64.const -0x1p+0\n 000064: 20 00                      | local.get 0\n 000066: a2                         | f64.mul\n 000067: 0b                         | end\n"
    },
    "float_exprs.12.wasm": {
      "header": "\nfloat_exprs.12.wasm:\tfile format wasm 0x1\n\nSections:\n\n     Type start=0x0000000a end=0x00000015 (size=0x0000000b) count: 2\n Function start=0x00000017 end=0x0000001a (size=0x00000003) count: 2\n   Export start=0x0000001c end=0x00000049 (size=0x0000002d) count: 2\n     Code start=0x0000004b end=0x0000005c (size=0x00000011) count: 2\n",
      "details": "\nfloat_exprs.12.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nType[2]:\n - type[0] (f32) -> i32\n - type[1] (f64) -> i32\nFunction[2]:\n - func[0] sig=0 <f32.no_fold_eq_self>\n - func[1] sig=1 <f64.no_fold_eq_self>\nExport[2]:\n - func[0] <f32.no_fold_eq_self> -> \"f32.no_fold_eq_self\"\n - func[1] <f64.no_fold_eq_self> -> \"f64.no_fold_eq_self\"\nCode[2]:\n - func[0] size=7 <f32.no_fold_eq_self>\n - func[1] size=7 <f64.no_fold_eq_self>\n",
      "disassemble": "\nfloat_exprs.12.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n00004d func[0] <f32.no_fold_eq_self>:\n 00004e: 20 00                      | local.get 0\n 000050: 20 00                      | local.get 0\n 000052: 5b                         | f32.eq\n 000053: 0b                         | end\n000055 func[1] <f64.no_fold_eq_self>:\n 000056: 20 00                      | local.get 0\n 000058: 20 00                      | local.get 0\n 00005a: 61                         | f64.eq\n 00005b: 0b                         | end\n"
    },
    "float_exprs.13.wasm": {
      "header": "\nfloat_exprs.13.wasm:\tfile format wasm 0x1\n\nSections:\n\n     Type start=0x0000000a end=0x00000015 (size=0x0000000b) count: 2\n Function start=0x00000017 end=0x0000001a (size=0x00000003) count: 2\n   Export start=0x0000001c end=0x00000049 (size=0x0000002d) count: 2\n     Code start=0x0000004b end=0x0000005c (size=0x00000011) count: 2\n",
      "details": "\nfloat_exprs.13.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nType[2]:\n - type[0] (f32) -> i32\n - type[1] (f64) -> i32\nFunction[2]:\n - func[0] sig=0 <f32.no_fold_ne_self>\n - func[1] sig=1 <f64.no_fold_ne_self>\nExport[2]:\n - func[0] <f32.no_fold_ne_self> -> \"f32.no_fold_ne_self\"\n - func[1] <f64.no_fold_ne_self> -> \"f64.no_fold_ne_self\"\nCode[2]:\n - func[0] size=7 <f32.no_fold_ne_self>\n - func[1] size=7 <f64.no_fold_ne_self>\n",
      "disassemble": "\nfloat_exprs.13.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n00004d func[0] <f32.no_fold_ne_self>:\n 00004e: 20 00                      | local.get 0\n 000050: 20 00                      | local.get 0\n 000052: 5c                         | f32.ne\n 000053: 0b                         | end\n000055 func[1] <f64.no_fold_ne_self>:\n 000056: 20 00                      | local.get 0\n 000058: 20 00                      | local.get 0\n 00005a: 62                         | f64.ne\n 00005b: 0b                         | end\n"
    },
    "float_exprs.14.wasm": {
      "header": "\nfloat_exprs.14.wasm:\tfile format wasm 0x1\n\nSections:\n\n     Type start=0x0000000a end=0x00000015 (size=0x0000000b) count: 2\n Function start=0x00000017 end=0x0000001a (size=0x00000003) count: 2\n   Export start=0x0000001c end=0x0000004b (size=0x0000002f) count: 2\n     Code start=0x0000004d end=0x0000005e (size=0x00000011) count: 2\n",
      "details": "\nfloat_exprs.14.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nType[2]:\n - type[0] (f32) -> f32\n - type[1] (f64) -> f64\nFunction[2]:\n - func[0] sig=0 <f32.no_fold_sub_self>\n - func[1] sig=1 <f64.no_fold_sub_self>\nExport[2]:\n - func[0] <f32.no_fold_sub_self> -> \"f32.no_fold_sub_self\"\n - func[1] <f64.no_fold_sub_self> -> \"f64.no_fold_sub_self\"\nCode[2]:\n - func[0] size=7 <f32.no_fold_sub_self>\n - func[1] size=7 <f64.no_fold_sub_self>\n",
      "disassemble": "\nfloat_exprs.14.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n00004f func[0] <f32.no_fold_sub_self>:\n 000050: 20 00                      | local.get 0\n 000052: 20 00                      | local.get 0\n 000054: 93                         | f32.sub\n 000055: 0b                         | end\n000057 func[1] <f64.no_fold_sub_self>:\n 000058: 20 00                      | local.get 0\n 00005a: 20 00                      | local.get 0\n 00005c: a1                         | f64.sub\n 00005d: 0b                         | end\n"
    },
    "float_exprs.15.wasm": {
      "header": "\nfloat_exprs.15.wasm:\tfile format wasm 0x1\n\nSections:\n\n     Type start=0x0000000a end=0x00000015 (size=0x0000000b) count: 2\n Function start=0x00000017 end=0x0000001a (size=0x00000003) count: 2\n   Export start=0x0000001c end=0x0000004b (size=0x0000002f) count: 2\n     Code start=0x0000004d end=0x0000005e (size=0x00000011) count: 2\n",
      "details": "\nfloat_exprs.15.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nType[2]:\n - type[0] (f32) -> f32\n - type[1] (f64) -> f64\nFunction[2]:\n - func[0] sig=0 <f32.no_fold_div_self>\n - func[1] sig=1 <f64.no_fold_div_self>\nExport[2]:\n - func[0] <f32.no_fold_div_self> -> \"f32.no_fold_div_self\"\n - func[1] <f64.no_fold_div_self> -> \"f64.no_fold_div_self\"\nCode[2]:\n - func[0] size=7 <f32.no_fold_div_self>\n - func[1] size=7 <f64.no_fold_div_self>\n",
      "disassemble": "\nfloat_exprs.15.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n00004f func[0] <f32.no_fold_div_self>:\n 000050: 20 00                      | local.get 0\n 000052: 20 00                      | local.get 0\n 000054: 95                         | f32.div\n 000055: 0b                         | end\n000057 func[1] <f64.no_fold_div_self>:\n 000058: 20 00                      | local.get 0\n 00005a: 20 00                      | local.get 0\n 00005c: a3                         | f64.div\n 00005d: 0b                         | end\n"
    },
    "float_exprs.16.wasm": {
      "header": "\nfloat_exprs.16.wasm:\tfile format wasm 0x1\n\nSections:\n\n     Type start=0x0000000a end=0x00000015 (size=0x0000000b) count: 2\n Function start=0x00000017 end=0x0000001a (size=0x00000003) count: 2\n   Export start=0x0000001c end=0x00000045 (size=0x00000029) count: 2\n     Code start=0x00000047 end=0x00000062 (size=0x0000001b) count: 2\n",
      "details": "\nfloat_exprs.16.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nType[2]:\n - type[0] (f32) -> f32\n - type[1] (f64) -> f64\nFunction[2]:\n - func[0] sig=0 <f32.no_fold_div_3>\n - func[1] sig=1 <f64.no_fold_div_3>\nExport[2]:\n - func[0] <f32.no_fold_div_3> -> \"f32.no_fold_div_3\"\n - func[1] <f64.no_fold_div_3> -> \"f64.no_fold_div_3\"\nCode[2]:\n - func[0] size=10 <f32.no_fold_div_3>\n - func[1] size=14 <f64.no_fold_div_3>\n",
      "disassemble": "\nfloat_exprs.16.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n000049 func[0] <f32.no_fold_div_3>:\n 00004a: 20 00                      | local.get 0\n 00004c: 43 00 00 40 40             | f32.const 0x1.8p+1\n 000051: 95                         | f32.div\n 000052: 0b                         | end\n000054 func[1] <f64.no_fold_div_3>:\n 000055: 20 00                      | local.get 0\n 000057: 44 00 00 00 00 00 00 08 40 | f64.const 0x1.8p+1\n 000060: a3                         | f64.div\n 000061: 0b                         | end\n"
    },
    "float_exprs.17.wasm": {
      "header": "\nfloat_exprs.17.wasm:\tfile format wasm 0x1\n\nSections:\n\n     Type start=0x0000000a end=0x00000019 (size=0x0000000f) count: 2\n Function start=0x0000001b end=0x0000001e (size=0x00000003) count: 2\n   Export start=0x00000020 end=0x00000041 (size=0x00000021) count: 2\n     Code start=0x00000043 end=0x00000060 (size=0x0000001d) count: 2\n",
      "details": "\nfloat_exprs.17.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nType[2]:\n - type[0] (f32, f32, f32) -> f32\n - type[1] (f64, f64, f64) -> f64\nFunction[2]:\n - func[0] sig=0 <f32.no_factor>\n - func[1] sig=1 <f64.no_factor>\nExport[2]:\n - func[0] <f32.no_factor> -> \"f32.no_factor\"\n - func[1] <f64.no_factor> -> \"f64.no_factor\"\nCode[2]:\n - func[0] size=13 <f32.no_factor>\n - func[1] size=13 <f64.no_factor>\n",
      "disassemble": "\nfloat_exprs.17.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n000045 func[0] <f32.no_factor>:\n 000046: 20 00                      | local.get 0\n 000048: 20 02                      | local.get 2\n 00004a: 94                         | f32.mul\n 00004b: 20 01                      | local.get 1\n 00004d: 20 02                      | local.get 2\n 00004f: 94                         | f32.mul\n 000050: 92                         | f32.add\n 000051: 0b                         | end\n000053 func[1] <f64.no_factor>:\n 000054: 20 00                      | local.get 0\n 000056: 20 02                      | local.get 2\n 000058: a2                         | f64.mul\n 000059: 20 01                      | local.get 1\n 00005b: 20 02                      | local.get 2\n 00005d: a2                         | f64.mul\n 00005e: a0                         | f64.add\n 00005f: 0b                         | end\n"
    },
    "float_exprs.18.wasm": {
      "header": "\nfloat_exprs.18.wasm:\tfile format wasm 0x1\n\nSections:\n\n     Type start=0x0000000a end=0x00000019 (size=0x0000000f) count: 2\n Function start=0x0000001b end=0x0000001e (size=0x00000003) count: 2\n   Export start=0x00000020 end=0x00000049 (size=0x00000029) count: 2\n     Code start=0x0000004b end=0x00000062 (size=0x00000017) count: 2\n",
      "details": "\nfloat_exprs.18.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nType[2]:\n - type[0] (f32, f32, f32) -> f32\n - type[1] (f64, f64, f64) -> f64\nFunction[2]:\n - func[0] sig=0 <f32.no_distribute>\n - func[1] sig=1 <f64.no_distribute>\nExport[2]:\n - func[0] <f32.no_distribute> -> \"f32.no_distribute\"\n - func[1] <f64.no_distribute> -> \"f64.no_distribute\"\nCode[2]:\n - func[0] size=10 <f32.no_distribute>\n - func[1] size=10 <f64.no_distribute>\n",
      "disassemble": "\nfloat_exprs.18.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n00004d func[0] <f32.no_distribute>:\n 00004e: 20 00                      | local.get 0\n 000050: 20 01                      | local.get 1\n 000052: 92                         | f32.add\n 000053: 20 02                      | local.get 2\n 000055: 94                         | f32.mul\n 000056: 0b                         | end\n000058 func[1] <f64.no_distribute>:\n 000059: 20 00                      | local.get 0\n 00005b: 20 01                      | local.get 1\n 00005d: a0                         | f64.add\n 00005e: 20 02                      | local.get 2\n 000060: a2                         | f64.mul\n 000061: 0b                         | end\n"
    },
    "float_exprs.19.wasm": {
      "header": "\nfloat_exprs.19.wasm:\tfile format wasm 0x1\n\nSections:\n\n     Type start=0x0000000a end=0x00000019 (size=0x0000000f) count: 2\n Function start=0x0000001b end=0x0000001e (size=0x00000003) count: 2\n   Export start=0x00000020 end=0x00000053 (size=0x00000033) count: 2\n     Code start=0x00000055 end=0x0000006c (size=0x00000017) count: 2\n",
      "details": "\nfloat_exprs.19.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nType[2]:\n - type[0] (f32, f32, f32) -> f32\n - type[1] (f64, f64, f64) -> f64\nFunction[2]:\n - func[0] sig=0 <f32.no_regroup_div_mul>\n - func[1] sig=1 <f64.no_regroup_div_mul>\nExport[2]:\n - func[0] <f32.no_regroup_div_mul> -> \"f32.no_regroup_div_mul\"\n - func[1] <f64.no_regroup_div_mul> -> \"f64.no_regroup_div_mul\"\nCode[2]:\n - func[0] size=10 <f32.no_regroup_div_mul>\n - func[1] size=10 <f64.no_regroup_div_mul>\n",
      "disassemble": "\nfloat_exprs.19.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n000057 func[0] <f32.no_regroup_div_mul>:\n 000058: 20 00                      | local.get 0\n 00005a: 20 01                      | local.get 1\n 00005c: 20 02                      | local.get 2\n 00005e: 95                         | f32.div\n 00005f: 94                         | f32.mul\n 000060: 0b                         | end\n000062 func[1] <f64.no_regroup_div_mul>:\n 000063: 20 00                      | local.get 0\n 000065: 20 01                      | local.get 1\n 000067: 20 02                      | local.get 2\n 000069: a3                         | f64.div\n 00006a: a2                         | f64.mul\n 00006b: 0b                         | end\n"
    },
    "float_exprs.20.wasm": {
      "header": "\nfloat_exprs.20.wasm:\tfile format wasm 0x1\n\nSections:\n\n     Type start=0x0000000a end=0x00000019 (size=0x0000000f) count: 2\n Function start=0x0000001b end=0x0000001e (size=0x00000003) count: 2\n   Export start=0x00000020 end=0x00000053 (size=0x00000033) count: 2\n     Code start=0x00000055 end=0x0000006c (size=0x00000017) count: 2\n",
      "details": "\nfloat_exprs.20.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nType[2]:\n - type[0] (f32, f32, f32) -> f32\n - type[1] (f64, f64, f64) -> f64\nFunction[2]:\n - func[0] sig=0 <f32.no_regroup_mul_div>\n - func[1] sig=1 <f64.no_regroup_mul_div>\nExport[2]:\n - func[0] <f32.no_regroup_mul_div> -> \"f32.no_regroup_mul_div\"\n - func[1] <f64.no_regroup_mul_div> -> \"f64.no_regroup_mul_div\"\nCode[2]:\n - func[0] size=10 <f32.no_regroup_mul_div>\n - func[1] size=10 <f64.no_regroup_mul_div>\n",
      "disassemble": "\nfloat_exprs.20.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n000057 func[0] <f32.no_regroup_mul_div>:\n 000058: 20 00                      | local.get 0\n 00005a: 20 01                      | local.get 1\n 00005c: 94                         | f32.mul\n 00005d: 20 02                      | local.get 2\n 00005f: 95                         | f32.div\n 000060: 0b                         | end\n000062 func[1] <f64.no_regroup_mul_div>:\n 000063: 20 00                      | local.get 0\n 000065: 20 01                      | local.get 1\n 000067: a2                         | f64.mul\n 000068: 20 02                      | local.get 2\n 00006a: a3                         | f64.div\n 00006b: 0b                         | end\n"
    },
    "float_exprs.21.wasm": {
      "header": "\nfloat_exprs.21.wasm:\tfile format wasm 0x1\n\nSections:\n\n     Type start=0x0000000a end=0x0000001b (size=0x00000011) count: 2\n Function start=0x0000001d end=0x00000020 (size=0x00000003) count: 2\n   Export start=0x00000022 end=0x00000055 (size=0x00000033) count: 2\n     Code start=0x00000057 end=0x00000074 (size=0x0000001d) count: 2\n",
      "details": "\nfloat_exprs.21.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nType[2]:\n - type[0] (f32, f32, f32, f32) -> f32\n - type[1] (f64, f64, f64, f64) -> f64\nFunction[2]:\n - func[0] sig=0 <f32.no_reassociate_add>\n - func[1] sig=1 <f64.no_reassociate_add>\nExport[2]:\n - func[0] <f32.no_reassociate_add> -> \"f32.no_reassociate_add\"\n - func[1] <f64.no_reassociate_add> -> \"f64.no_reassociate_add\"\nCode[2]:\n - func[0] size=13 <f32.no_reassociate_add>\n - func[1] size=13 <f64.no_reassociate_add>\n",
      "disassemble": "\nfloat_exprs.21.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n000059 func[0] <f32.no_reassociate_add>:\n 00005a: 20 00                      | local.get 0\n 00005c: 20 01                      | local.get 1\n 00005e: 92                         | f32.add\n 00005f: 20 02                      | local.get 2\n 000061: 92                         | f32.add\n 000062: 20 03                      | local.get 3\n 000064: 92                         | f32.add\n 000065: 0b                         | end\n000067 func[1] <f64.no_reassociate_add>:\n 000068: 20 00                      | local.get 0\n 00006a: 20 01                      | local.get 1\n 00006c: a0                         | f64.add\n 00006d: 20 02                      | local.get 2\n 00006f: a0                         | f64.add\n 000070: 20 03                      | local.get 3\n 000072: a0                         | f64.add\n 000073: 0b                         | end\n"
    },
    "float_exprs.22.wasm": {
      "header": "\nfloat_exprs.22.wasm:\tfile format wasm 0x1\n\nSections:\n\n     Type start=0x0000000a end=0x0000001b (size=0x00000011) count: 2\n Function start=0x0000001d end=0x00000020 (size=0x00000003) count: 2\n   Export start=0x00000022 end=0x00000055 (size=0x00000033) count: 2\n     Code start=0x00000057 end=0x00000074 (size=0x0000001d) count: 2\n",
      "details": "\nfloat_exprs.22.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nType[2]:\n - type[0] (f32, f32, f32, f32) -> f32\n - type[1] (f64, f64, f64, f64) -> f64\nFunction[2]:\n - func[0] sig=0 <f32.no_reassociate_mul>\n - func[1] sig=1 <f64.no_reassociate_mul>\nExport[2]:\n - func[0] <f32.no_reassociate_mul> -> \"f32.no_reassociate_mul\"\n - func[1] <f64.no_reassociate_mul> -> \"f64.no_reassociate_mul\"\nCode[2]:\n - func[0] size=13 <f32.no_reassociate_mul>\n - func[1] size=13 <f64.no_reassociate_mul>\n",
      "disassemble": "\nfloat_exprs.22.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n000059 func[0] <f32.no_reassociate_mul>:\n 00005a: 20 00                      | local.get 0\n 00005c: 20 01                      | local.get 1\n 00005e: 94                         | f32.mul\n 00005f: 20 02                      | local.get 2\n 000061: 94                         | f32.mul\n 000062: 20 03                      | local.get 3\n 000064: 94                         | f32.mul\n 000065: 0b                         | end\n000067 func[1] <f64.no_reassociate_mul>:\n 000068: 20 00                      | local.get 0\n 00006a: 20 01                      | local.get 1\n 00006c: a2                         | f64.mul\n 00006d: 20 02                      | local.get 2\n 00006f: a2                         | f64.mul\n 000070: 20 03                      | local.get 3\n 000072: a2                         | f64.mul\n 000073: 0b                         | end\n"
    },
    "float_exprs.23.wasm": {
      "header": "\nfloat_exprs.23.wasm:\tfile format wasm 0x1\n\nSections:\n\n     Type start=0x0000000a end=0x00000015 (size=0x0000000b) count: 2\n Function start=0x00000017 end=0x0000001a (size=0x00000003) count: 2\n   Export start=0x0000001c end=0x00000045 (size=0x00000029) count: 2\n     Code start=0x00000047 end=0x00000062 (size=0x0000001b) count: 2\n",
      "details": "\nfloat_exprs.23.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nType[2]:\n - type[0] (f32) -> f32\n - type[1] (f64) -> f64\nFunction[2]:\n - func[0] sig=0 <f32.no_fold_div_0>\n - func[1] sig=1 <f64.no_fold_div_0>\nExport[2]:\n - func[0] <f32.no_fold_div_0> -> \"f32.no_fold_div_0\"\n - func[1] <f64.no_fold_div_0> -> \"f64.no_fold_div_0\"\nCode[2]:\n - func[0] size=10 <f32.no_fold_div_0>\n - func[1] size=14 <f64.no_fold_div_0>\n",
      "disassemble": "\nfloat_exprs.23.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n000049 func[0] <f32.no_fold_div_0>:\n 00004a: 20 00                      | local.get 0\n 00004c: 43 00 00 00 00             | f32.const 0x0p+0\n 000051: 95                         | f32.div\n 000052: 0b                         | end\n000054 func[1] <f64.no_fold_div_0>:\n 000055: 20 00                      | local.get 0\n 000057: 44 00 00 00 00 00 00 00 00 | f64.const 0x0p+0\n 000060: a3                         | f64.div\n 000061: 0b                         | end\n"
    },
    "float_exprs.24.wasm": {
      "header": "\nfloat_exprs.24.wasm:\tfile format wasm 0x1\n\nSections:\n\n     Type start=0x0000000a end=0x00000015 (size=0x0000000b) count: 2\n Function start=0x00000017 end=0x0000001a (size=0x00000003) count: 2\n   Export start=0x0000001c end=0x0000004b (size=0x0000002f) count: 2\n     Code start=0x0000004d end=0x00000068 (size=0x0000001b) count: 2\n",
      "details": "\nfloat_exprs.24.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nType[2]:\n - type[0] (f32) -> f32\n - type[1] (f64) -> f64\nFunction[2]:\n - func[0] sig=0 <f32.no_fold_div_neg0>\n - func[1] sig=1 <f64.no_fold_div_neg0>\nExport[2]:\n - func[0] <f32.no_fold_div_neg0> -> \"f32.no_fold_div_neg0\"\n - func[1] <f64.no_fold_div_neg0> -> \"f64.no_fold_div_neg0\"\nCode[2]:\n - func[0] size=10 <f32.no_fold_div_neg0>\n - func[1] size=14 <f64.no_fold_div_neg0>\n",
      "disassemble": "\nfloat_exprs.24.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n00004f func[0] <f32.no_fold_div_neg0>:\n 000050: 20 00                      | local.get 0\n 000052: 43 00 00 00 80             | f32.const -0x0p+0\n 000057: 95                         | f32.div\n 000058: 0b                         | end\n00005a func[1] <f64.no_fold_div_neg0>:\n 00005b: 20 00                      | local.get 0\n 00005d: 44 00 00 00 00 00 00 00 80 | f64.const -0x0p+0\n 000066: a3                         | f64.div\n 000067: 0b                         | end\n"
    },
    "float_exprs.25.wasm": {
      "header": "\nfloat_exprs.25.wasm:\tfile format wasm 0x1\n\nSections:\n\n     Type start=0x0000000a end=0x00000017 (size=0x0000000d) count: 2\n Function start=0x00000019 end=0x0000001c (size=0x00000003) count: 2\n   Export start=0x0000001e end=0x0000004d (size=0x0000002f) count: 2\n     Code start=0x0000004f end=0x0000006e (size=0x0000001f) count: 2\n",
      "details": "\nfloat_exprs.25.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nType[2]:\n - type[0] (f32, f32) -> f32\n - type[1] (f64, f64) -> f64\nFunction[2]:\n - func[0] sig=0 <f32.no_fold_to_hypot>\n - func[1] sig=1 <f64.no_fold_to_hypot>\nExport[2]:\n - func[0] <f32.no_fold_to_hypot> -> \"f32.no_fold_to_hypot\"\n - func[1] <f64.no_fold_to_hypot> -> \"f64.no_fold_to_hypot\"\nCode[2]:\n - func[0] size=14 <f32.no_fold_to_hypot>\n - func[1] size=14 <f64.no_fold_to_hypot>\n",
      "disassemble": "\nfloat_exprs.25.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n000051 func[0] <f32.no_fold_to_hypot>:\n 000052: 20 00                      | local.get 0\n 000054: 20 00                      | local.get 0\n 000056: 94                         | f32.mul\n 000057: 20 01                      | local.get 1\n 000059: 20 01                      | local.get 1\n 00005b: 94                         | f32.mul\n 00005c: 92                         | f32.add\n 00005d: 91                         | f32.sqrt\n 00005e: 0b                         | end\n000060 func[1] <f64.no_fold_to_hypot>:\n 000061: 20 00                      | local.get 0\n 000063: 20 00                      | local.get 0\n 000065: a2                         | f64.mul\n 000066: 20 01                      | local.get 1\n 000068: 20 01                      | local.get 1\n 00006a: a2                         | f64.mul\n 00006b: a0                         | f64.add\n 00006c: 9f                         | f64.sqrt\n 00006d: 0b                         | end\n"
    },
    "float_exprs.26.wasm": {
      "header": "\nfloat_exprs.26.wasm:\tfile format wasm 0x1\n\nSections:\n\n     Type start=0x0000000a end=0x00000010 (size=0x00000006) count: 1\n Function start=0x00000012 end=0x00000014 (size=0x00000002) count: 1\n   Export start=0x00000016 end=0x00000037 (size=0x00000021) count: 1\n     Code start=0x00000039 end=0x00000045 (size=0x0000000c) count: 1\n",
      "details": "\nfloat_exprs.26.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nType[1]:\n - type[0] (f32) -> f32\nFunction[1]:\n - func[0] sig=0 <f32.no_approximate_reciprocal>\nExport[1]:\n - func[0] <f32.no_approximate_reciprocal> -> \"f32.no_approximate_reciprocal\"\nCode[1]:\n - func[0] size=10 <f32.no_approximate_reciprocal>\n",
      "disassemble": "\nfloat_exprs.26.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n00003b func[0] <f32.no_approximate_reciprocal>:\n 00003c: 43 00 00 80 3f             | f32.const 0x1p+0\n 000041: 20 00                      | local.get 0\n 000043: 95                         | f32.div\n 000044: 0b                         | end\n"
    },
    "float_exprs.27.wasm": {
      "header": "\nfloat_exprs.27.wasm:\tfile format wasm 0x1\n\nSections:\n\n     Type start=0x0000000a end=0x00000015 (size=0x0000000b) count: 2\n Function start=0x00000017 end=0x0000001a (size=0x00000003) count: 2\n   Export start=0x0000001c end=0x00000060 (size=0x00000044) count: 2\n     Code start=0x00000062 end=0x0000007f (size=0x0000001d) count: 2\n",
      "details": "\nfloat_exprs.27.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nType[2]:\n - type[0] (f32) -> f32\n - type[1] (f64) -> f64\nFunction[2]:\n - func[0] sig=0 <f32.no_approximate_reciprocal_sqrt>\n - func[1] sig=1 <f64.no_fuse_reciprocal_sqrt>\nExport[2]:\n - func[0] <f32.no_approximate_reciprocal_sqrt> -> \"f32.no_approximate_reciprocal_sqrt\"\n - func[1] <f64.no_fuse_reciprocal_sqrt> -> \"f64.no_fuse_reciprocal_sqrt\"\nCode[2]:\n - func[0] size=11 <f32.no_approximate_reciprocal_sqrt>\n - func[1] size=15 <f64.no_fuse_reciprocal_sqrt>\n",
      "disassemble": "\nfloat_exprs.27.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n000064 func[0] <f32.no_approximate_reciprocal_sqrt>:\n 000065: 43 00 00 80 3f             | f32.const 0x1p+0\n 00006a: 20 00                      | local.get 0\n 00006c: 91                         | f32.sqrt\n 00006d: 95                         | f32.div\n 00006e: 0b                         | end\n000070 func[1] <f64.no_fuse_reciprocal_sqrt>:\n 000071: 44 00 00 00 00 00 00 f0 3f | f64.const 0x1p+0\n 00007a: 20 00                      | local.get 0\n 00007c: 9f                         | f64.sqrt\n 00007d: a3                         | f64.div\n 00007e: 0b                         | end\n"
    },
    "float_exprs.28.wasm": {
      "header": "\nfloat_exprs.28.wasm:\tfile format wasm 0x1\n\nSections:\n\n     Type start=0x0000000a end=0x00000010 (size=0x00000006) count: 1\n Function start=0x00000012 end=0x00000014 (size=0x00000002) count: 1\n   Export start=0x00000016 end=0x0000003c (size=0x00000026) count: 1\n     Code start=0x0000003e end=0x0000004b (size=0x0000000d) count: 1\n",
      "details": "\nfloat_exprs.28.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nType[1]:\n - type[0] (f32) -> f32\nFunction[1]:\n - func[0] sig=0 <f32.no_approximate_sqrt_reciprocal>\nExport[1]:\n - func[0] <f32.no_approximate_sqrt_reciprocal> -> \"f32.no_approximate_sqrt_reciprocal\"\nCode[1]:\n - func[0] size=11 <f32.no_approximate_sqrt_reciprocal>\n",
      "disassemble": "\nfloat_exprs.28.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n000040 func[0] <f32.no_approximate_sqrt_reciprocal>:\n 000041: 43 00 00 80 3f             | f32.const 0x1p+0\n 000046: 20 00                      | local.get 0\n 000048: 95                         | f32.div\n 000049: 91                         | f32.sqrt\n 00004a: 0b                         | end\n"
    },
    "float_exprs.29.wasm": {
      "header": "\nfloat_exprs.29.wasm:\tfile format wasm 0x1\n\nSections:\n\n     Type start=0x0000000a end=0x00000015 (size=0x0000000b) count: 2\n Function start=0x00000017 end=0x0000001c (size=0x00000005) count: 4\n   Export start=0x0000001e end=0x0000006f (size=0x00000051) count: 4\n     Code start=0x00000071 end=0x0000008e (size=0x0000001d) count: 4\n",
      "details": "\nfloat_exprs.29.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nType[2]:\n - type[0] (i32) -> i32\n - type[1] (i64) -> i64\nFunction[4]:\n - func[0] sig=0 <i32.no_fold_f32_s>\n - func[1] sig=0 <i32.no_fold_f32_u>\n - func[2] sig=1 <i64.no_fold_f64_s>\n - func[3] sig=1 <i64.no_fold_f64_u>\nExport[4]:\n - func[0] <i32.no_fold_f32_s> -> \"i32.no_fold_f32_s\"\n - func[1] <i32.no_fold_f32_u> -> \"i32.no_fold_f32_u\"\n - func[2] <i64.no_fold_f64_s> -> \"i64.no_fold_f64_s\"\n - func[3] <i64.no_fold_f64_u> -> \"i64.no_fold_f64_u\"\nCode[4]:\n - func[0] size=6 <i32.no_fold_f32_s>\n - func[1] size=6 <i32.no_fold_f32_u>\n - func[2] size=6 <i64.no_fold_f64_s>\n - func[3] size=6 <i64.no_fold_f64_u>\n",
      "disassemble": "\nfloat_exprs.29.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n000073 func[0] <i32.no_fold_f32_s>:\n 000074: 20 00                      | local.get 0\n 000076: b2                         | f32.convert_i32_s\n 000077: a8                         | i32.trunc_f32_s\n 000078: 0b                         | end\n00007a func[1] <i32.no_fold_f32_u>:\n 00007b: 20 00                      | local.get 0\n 00007d: b3                         | f32.convert_i32_u\n 00007e: a9                         | i32.trunc_f32_u\n 00007f: 0b                         | end\n000081 func[2] <i64.no_fold_f64_s>:\n 000082: 20 00                      | local.get 0\n 000084: b9                         | f64.convert_i64_s\n 000085: b0                         | i64.trunc_f64_s\n 000086: 0b                         | end\n000088 func[3] <i64.no_fold_f64_u>:\n 000089: 20 00                      | local.get 0\n 00008b: ba                         | f64.convert_i64_u\n 00008c: b1                         | i64.trunc_f64_u\n 00008d: 0b                         | end\n"
    },
    "float_exprs.30.wasm": {
      "header": "\nfloat_exprs.30.wasm:\tfile format wasm 0x1\n\nSections:\n\n     Type start=0x0000000a end=0x00000017 (size=0x0000000d) count: 2\n Function start=0x00000019 end=0x0000001c (size=0x00000003) count: 2\n   Export start=0x0000001e end=0x0000004b (size=0x0000002d) count: 2\n     Code start=0x0000004d end=0x00000064 (size=0x00000017) count: 2\n",
      "details": "\nfloat_exprs.30.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nType[2]:\n - type[0] (f32, f32) -> f32\n - type[1] (f64, f64) -> f64\nFunction[2]:\n - func[0] sig=0 <f32.no_fold_add_sub>\n - func[1] sig=1 <f64.no_fold_add_sub>\nExport[2]:\n - func[0] <f32.no_fold_add_sub> -> \"f32.no_fold_add_sub\"\n - func[1] <f64.no_fold_add_sub> -> \"f64.no_fold_add_sub\"\nCode[2]:\n - func[0] size=10 <f32.no_fold_add_sub>\n - func[1] size=10 <f64.no_fold_add_sub>\n",
      "disassemble": "\nfloat_exprs.30.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n00004f func[0] <f32.no_fold_add_sub>:\n 000050: 20 00                      | local.get 0\n 000052: 20 01                      | local.get 1\n 000054: 92                         | f32.add\n 000055: 20 01                      | local.get 1\n 000057: 93                         | f32.sub\n 000058: 0b                         | end\n00005a func[1] <f64.no_fold_add_sub>:\n 00005b: 20 00                      | local.get 0\n 00005d: 20 01                      | local.get 1\n 00005f: a0                         | f64.add\n 000060: 20 01                      | local.get 1\n 000062: a1                         | f64.sub\n 000063: 0b                         | end\n"
    },
    "float_exprs.31.wasm": {
      "header": "\nfloat_exprs.31.wasm:\tfile format wasm 0x1\n\nSections:\n\n     Type start=0x0000000a end=0x00000017 (size=0x0000000d) count: 2\n Function start=0x00000019 end=0x0000001c (size=0x00000003) count: 2\n   Export start=0x0000001e end=0x0000004b (size=0x0000002d) count: 2\n     Code start=0x0000004d end=0x00000064 (size=0x00000017) count: 2\n",
      "details": "\nfloat_exprs.31.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nType[2]:\n - type[0] (f32, f32) -> f32\n - type[1] (f64, f64) -> f64\nFunction[2]:\n - func[0] sig=0 <f32.no_fold_sub_add>\n - func[1] sig=1 <f64.no_fold_sub_add>\nExport[2]:\n - func[0] <f32.no_fold_sub_add> -> \"f32.no_fold_sub_add\"\n - func[1] <f64.no_fold_sub_add> -> \"f64.no_fold_sub_add\"\nCode[2]:\n - func[0] size=10 <f32.no_fold_sub_add>\n - func[1] size=10 <f64.no_fold_sub_add>\n",
      "disassemble": "\nfloat_exprs.31.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n00004f func[0] <f32.no_fold_sub_add>:\n 000050: 20 00                      | local.get 0\n 000052: 20 01                      | local.get 1\n 000054: 93                         | f32.sub\n 000055: 20 01                      | local.get 1\n 000057: 92                         | f32.add\n 000058: 0b                         | end\n00005a func[1] <f64.no_fold_sub_add>:\n 00005b: 20 00                      | local.get 0\n 00005d: 20 01                      | local.get 1\n 00005f: a1                         | f64.sub\n 000060: 20 01                      | local.get 1\n 000062: a0                         | f64.add\n 000063: 0b                         | end\n"
    },
    "float_exprs.32.wasm": {
      "header": "\nfloat_exprs.32.wasm:\tfile format wasm 0x1\n\nSections:\n\n     Type start=0x0000000a end=0x00000017 (size=0x0000000d) count: 2\n Function start=0x00000019 end=0x0000001c (size=0x00000003) count: 2\n   Export start=0x0000001e end=0x0000004b (size=0x0000002d) count: 2\n     Code start=0x0000004d end=0x00000064 (size=0x00000017) count: 2\n",
      "details": "\nfloat_exprs.32.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nType[2]:\n - type[0] (f32, f32) -> f32\n - type[1] (f64, f64) -> f64\nFunction[2]:\n - func[0] sig=0 <f32.no_fold_mul_div>\n - func[1] sig=1 <f64.no_fold_mul_div>\nExport[2]:\n - func[0] <f32.no_fold_mul_div> -> \"f32.no_fold_mul_div\"\n - func[1] <f64.no_fold_mul_div> -> \"f64.no_fold_mul_div\"\nCode[2]:\n - func[0] size=10 <f32.no_fold_mul_div>\n - func[1] size=10 <f64.no_fold_mul_div>\n",
      "disassemble": "\nfloat_exprs.32.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n00004f func[0] <f32.no_fold_mul_div>:\n 000050: 20 00                      | local.get 0\n 000052: 20 01                      | local.get 1\n 000054: 94                         | f32.mul\n 000055: 20 01                      | local.get 1\n 000057: 95                         | f32.div\n 000058: 0b                         | end\n00005a func[1] <f64.no_fold_mul_div>:\n 00005b: 20 00                      | local.get 0\n 00005d: 20 01                      | local.get 1\n 00005f: a2                         | f64.mul\n 000060: 20 01                      | local.get 1\n 000062: a3                         | f64.div\n 000063: 0b                         | end\n"
    },
    "float_exprs.33.wasm": {
      "header": "\nfloat_exprs.33.wasm:\tfile format wasm 0x1\n\nSections:\n\n     Type start=0x0000000a end=0x00000017 (size=0x0000000d) count: 2\n Function start=0x00000019 end=0x0000001c (size=0x00000003) count: 2\n   Export start=0x0000001e end=0x0000004b (size=0x0000002d) count: 2\n     Code start=0x0000004d end=0x00000064 (size=0x00000017) count: 2\n",
      "details": "\nfloat_exprs.33.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nType[2]:\n - type[0] (f32, f32) -> f32\n - type[1] (f64, f64) -> f64\nFunction[2]:\n - func[0] sig=0 <f32.no_fold_div_mul>\n - func[1] sig=1 <f64.no_fold_div_mul>\nExport[2]:\n - func[0] <f32.no_fold_div_mul> -> \"f32.no_fold_div_mul\"\n - func[1] <f64.no_fold_div_mul> -> \"f64.no_fold_div_mul\"\nCode[2]:\n - func[0] size=10 <f32.no_fold_div_mul>\n - func[1] size=10 <f64.no_fold_div_mul>\n",
      "disassemble": "\nfloat_exprs.33.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n00004f func[0] <f32.no_fold_div_mul>:\n 000050: 20 00                      | local.get 0\n 000052: 20 01                      | local.get 1\n 000054: 95                         | f32.div\n 000055: 20 01                      | local.get 1\n 000057: 94                         | f32.mul\n 000058: 0b                         | end\n00005a func[1] <f64.no_fold_div_mul>:\n 00005b: 20 00                      | local.get 0\n 00005d: 20 01                      | local.get 1\n 00005f: a3                         | f64.div\n 000060: 20 01                      | local.get 1\n 000062: a2                         | f64.mul\n 000063: 0b                         | end\n"
    },
    "float_exprs.34.wasm": {
      "header": "\nfloat_exprs.34.wasm:\tfile format wasm 0x1\n\nSections:\n\n     Type start=0x0000000a end=0x00000015 (size=0x0000000b) count: 2\n Function start=0x00000017 end=0x0000001a (size=0x00000003) count: 2\n   Export start=0x0000001c end=0x0000004d (size=0x00000031) count: 2\n     Code start=0x0000004f end=0x0000007a (size=0x0000002b) count: 2\n",
      "details": "\nfloat_exprs.34.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nType[2]:\n - type[0] (f32) -> f32\n - type[1] (f64) -> f64\nFunction[2]:\n - func[0] sig=0 <f32.no_fold_div2_mul2>\n - func[1] sig=1 <f64.no_fold_div2_mul2>\nExport[2]:\n - func[0] <f32.no_fold_div2_mul2> -> \"f32.no_fold_div2_mul2\"\n - func[1] <f64.no_fold_div2_mul2> -> \"f64.no_fold_div2_mul2\"\nCode[2]:\n - func[0] size=16 <f32.no_fold_div2_mul2>\n - func[1] size=24 <f64.no_fold_div2_mul2>\n",
      "disassemble": "\nfloat_exprs.34.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n000051 func[0] <f32.no_fold_div2_mul2>:\n 000052: 20 00                      | local.get 0\n 000054: 43 00 00 00 40             | f32.const 0x1p+1\n 000059: 95                         | f32.div\n 00005a: 43 00 00 00 40             | f32.const 0x1p+1\n 00005f: 94                         | f32.mul\n 000060: 0b                         | end\n000062 func[1] <f64.no_fold_div2_mul2>:\n 000063: 20 00                      | local.get 0\n 000065: 44 00 00 00 00 00 00 00 40 | f64.const 0x1p+1\n 00006e: a3                         | f64.div\n 00006f: 44 00 00 00 00 00 00 00 40 | f64.const 0x1p+1\n 000078: a2                         | f64.mul\n 000079: 0b                         | end\n"
    },
    "float_exprs.35.wasm": {
      "header": "\nfloat_exprs.35.wasm:\tfile format wasm 0x1\n\nSections:\n\n     Type start=0x0000000a end=0x00000010 (size=0x00000006) count: 1\n Function start=0x00000012 end=0x00000014 (size=0x00000002) count: 1\n   Export start=0x00000016 end=0x00000030 (size=0x0000001a) count: 1\n     Code start=0x00000032 end=0x0000003a (size=0x00000008) count: 1\n",
      "details": "\nfloat_exprs.35.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nType[1]:\n - type[0] (f64) -> f64\nFunction[1]:\n - func[0] sig=0 <no_fold_demote_promote>\nExport[1]:\n - func[0] <no_fold_demote_promote> -> \"no_fold_demote_promote\"\nCode[1]:\n - func[0] size=6 <no_fold_demote_promote>\n",
      "disassemble": "\nfloat_exprs.35.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n000034 func[0] <no_fold_demote_promote>:\n 000035: 20 00                      | local.get 0\n 000037: b6                         | f32.demote_f64\n 000038: bb                         | f64.promote_f32\n 000039: 0b                         | end\n"
    },
    "float_exprs.36.wasm": {
      "header": "\nfloat_exprs.36.wasm:\tfile format wasm 0x1\n\nSections:\n\n     Type start=0x0000000a end=0x00000010 (size=0x00000006) count: 1\n Function start=0x00000012 end=0x00000014 (size=0x00000002) count: 1\n   Export start=0x00000016 end=0x00000030 (size=0x0000001a) count: 1\n     Code start=0x00000032 end=0x0000003a (size=0x00000008) count: 1\n",
      "details": "\nfloat_exprs.36.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nType[1]:\n - type[0] (f32) -> f32\nFunction[1]:\n - func[0] sig=0 <no_fold_promote_demote>\nExport[1]:\n - func[0] <no_fold_promote_demote> -> \"no_fold_promote_demote\"\nCode[1]:\n - func[0] size=6 <no_fold_promote_demote>\n",
      "disassemble": "\nfloat_exprs.36.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n000034 func[0] <no_fold_promote_demote>:\n 000035: 20 00                      | local.get 0\n 000037: bb                         | f64.promote_f32\n 000038: b6                         | f32.demote_f64\n 000039: 0b                         | end\n"
    },
    "float_exprs.37.wasm": {
      "header": "\nfloat_exprs.37.wasm:\tfile format wasm 0x1\n\nSections:\n\n     Type start=0x0000000a end=0x00000017 (size=0x0000000d) count: 2\n Function start=0x00000019 end=0x0000001c (size=0x00000003) count: 2\n   Export start=0x0000001e end=0x00000054 (size=0x00000036) count: 2\n     Code start=0x00000056 end=0x0000006b (size=0x00000015) count: 2\n",
      "details": "\nfloat_exprs.37.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nType[2]:\n - type[0] (f64, f32) -> f32\n - type[1] (f32, f64) -> f32\nFunction[2]:\n - func[0] sig=0 <no_demote_mixed_add>\n - func[1] sig=1 <no_demote_mixed_add_commuted>\nExport[2]:\n - func[0] <no_demote_mixed_add> -> \"no_demote_mixed_add\"\n - func[1] <no_demote_mixed_add_commuted> -> \"no_demote_mixed_add_commuted\"\nCode[2]:\n - func[0] size=9 <no_demote_mixed_add>\n - func[1] size=9 <no_demote_mixed_add_commuted>\n",
      "disassemble": "\nfloat_exprs.37.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n000058 func[0] <no_demote_mixed_add>:\n 000059: 20 00                      | local.get 0\n 00005b: 20 01                      | local.get 1\n 00005d: bb                         | f64.promote_f32\n 00005e: a0                         | f64.add\n 00005f: b6                         | f32.demote_f64\n 000060: 0b                         | end\n000062 func[1] <no_demote_mixed_add_commuted>:\n 000063: 20 00                      | local.get 0\n 000065: bb                         | f64.promote_f32\n 000066: 20 01                      | local.get 1\n 000068: a0                         | f64.add\n 000069: b6                         | f32.demote_f64\n 00006a: 0b                         | end\n"
    },
    "float_exprs.38.wasm": {
      "header": "\nfloat_exprs.38.wasm:\tfile format wasm 0x1\n\nSections:\n\n     Type start=0x0000000a end=0x00000011 (size=0x00000007) count: 1\n Function start=0x00000013 end=0x00000015 (size=0x00000002) count: 1\n   Export start=0x00000017 end=0x0000002e (size=0x00000017) count: 1\n     Code start=0x00000030 end=0x0000003b (size=0x0000000b) count: 1\n",
      "details": "\nfloat_exprs.38.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nType[1]:\n - type[0] (f64, f32) -> f32\nFunction[1]:\n - func[0] sig=0 <no_demote_mixed_sub>\nExport[1]:\n - func[0] <no_demote_mixed_sub> -> \"no_demote_mixed_sub\"\nCode[1]:\n - func[0] size=9 <no_demote_mixed_sub>\n",
      "disassemble": "\nfloat_exprs.38.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n000032 func[0] <no_demote_mixed_sub>:\n 000033: 20 00                      | local.get 0\n 000035: 20 01                      | local.get 1\n 000037: bb                         | f64.promote_f32\n 000038: a1                         | f64.sub\n 000039: b6                         | f32.demote_f64\n 00003a: 0b                         | end\n"
    },
    "float_exprs.39.wasm": {
      "header": "\nfloat_exprs.39.wasm:\tfile format wasm 0x1\n\nSections:\n\n     Type start=0x0000000a end=0x00000015 (size=0x0000000b) count: 2\n Function start=0x00000017 end=0x00000028 (size=0x00000011) count: 16\n   Export start=0x0000002b end=0x0000026c (size=0x00000241) count: 16\n     Code start=0x0000026e end=0x000002df (size=0x00000071) count: 16\n",
      "details": "\nfloat_exprs.39.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nType[2]:\n - type[0] (f32) -> f32\n - type[1] (f64) -> f64\nFunction[16]:\n - func[0] sig=0 <f32.i32.no_fold_trunc_s_convert_s>\n - func[1] sig=0 <f32.i32.no_fold_trunc_u_convert_s>\n - func[2] sig=0 <f32.i32.no_fold_trunc_s_convert_u>\n - func[3] sig=0 <f32.i32.no_fold_trunc_u_convert_u>\n - func[4] sig=1 <f64.i32.no_fold_trunc_s_convert_s>\n - func[5] sig=1 <f64.i32.no_fold_trunc_u_convert_s>\n - func[6] sig=1 <f64.i32.no_fold_trunc_s_convert_u>\n - func[7] sig=1 <f64.i32.no_fold_trunc_u_convert_u>\n - func[8] sig=0 <f32.i64.no_fold_trunc_s_convert_s>\n - func[9] sig=0 <f32.i64.no_fold_trunc_u_convert_s>\n - func[10] sig=0 <f32.i64.no_fold_trunc_s_convert_u>\n - func[11] sig=0 <f32.i64.no_fold_trunc_u_convert_u>\n - func[12] sig=1 <f64.i64.no_fold_trunc_s_convert_s>\n - func[13] sig=1 <f64.i64.no_fold_trunc_u_convert_s>\n - func[14] sig=1 <f64.i64.no_fold_trunc_s_convert_u>\n - func[15] sig=1 <f64.i64.no_fold_trunc_u_convert_u>\nExport[16]:\n - func[0] <f32.i32.no_fold_trunc_s_convert_s> -> \"f32.i32.no_fold_trunc_s_convert_s\"\n - func[1] <f32.i32.no_fold_trunc_u_convert_s> -> \"f32.i32.no_fold_trunc_u_convert_s\"\n - func[2] <f32.i32.no_fold_trunc_s_convert_u> -> \"f32.i32.no_fold_trunc_s_convert_u\"\n - func[3] <f32.i32.no_fold_trunc_u_convert_u> -> \"f32.i32.no_fold_trunc_u_convert_u\"\n - func[4] <f64.i32.no_fold_trunc_s_convert_s> -> \"f64.i32.no_fold_trunc_s_convert_s\"\n - func[5] <f64.i32.no_fold_trunc_u_convert_s> -> \"f64.i32.no_fold_trunc_u_convert_s\"\n - func[6] <f64.i32.no_fold_trunc_s_convert_u> -> \"f64.i32.no_fold_trunc_s_convert_u\"\n - func[7] <f64.i32.no_fold_trunc_u_convert_u> -> \"f64.i32.no_fold_trunc_u_convert_u\"\n - func[8] <f32.i64.no_fold_trunc_s_convert_s> -> \"f32.i64.no_fold_trunc_s_convert_s\"\n - func[9] <f32.i64.no_fold_trunc_u_convert_s> -> \"f32.i64.no_fold_trunc_u_convert_s\"\n - func[10] <f32.i64.no_fold_trunc_s_convert_u> -> \"f32.i64.no_fold_trunc_s_convert_u\"\n - func[11] <f32.i64.no_fold_trunc_u_convert_u> -> \"f32.i64.no_fold_trunc_u_convert_u\"\n - func[12] <f64.i64.no_fold_trunc_s_convert_s> -> \"f64.i64.no_fold_trunc_s_convert_s\"\n - func[13] <f64.i64.no_fold_trunc_u_convert_s> -> \"f64.i64.no_fold_trunc_u_convert_s\"\n - func[14] <f64.i64.no_fold_trunc_s_convert_u> -> \"f64.i64.no_fold_trunc_s_convert_u\"\n - func[15] <f64.i64.no_fold_trunc_u_convert_u> -> \"f64.i64.no_fold_trunc_u_convert_u\"\nCode[16]:\n - func[0] size=6 <f32.i32.no_fold_trunc_s_convert_s>\n - func[1] size=6 <f32.i32.no_fold_trunc_u_convert_s>\n - func[2] size=6 <f32.i32.no_fold_trunc_s_convert_u>\n - func[3] size=6 <f32.i32.no_fold_trunc_u_convert_u>\n - func[4] size=6 <f64.i32.no_fold_trunc_s_convert_s>\n - func[5] size=6 <f64.i32.no_fold_trunc_u_convert_s>\n - func[6] size=6 <f64.i32.no_fold_trunc_s_convert_u>\n - func[7] size=6 <f64.i32.no_fold_trunc_u_convert_u>\n - func[8] size=6 <f32.i64.no_fold_trunc_s_convert_s>\n - func[9] size=6 <f32.i64.no_fold_trunc_u_convert_s>\n - func[10] size=6 <f32.i64.no_fold_trunc_s_convert_u>\n - func[11] size=6 <f32.i64.no_fold_trunc_u_convert_u>\n - func[12] size=6 <f64.i64.no_fold_trunc_s_convert_s>\n - func[13] size=6 <f64.i64.no_fold_trunc_u_convert_s>\n - func[14] size=6 <f64.i64.no_fold_trunc_s_convert_u>\n - func[15] size=6 <f64.i64.no_fold_trunc_u_convert_u>\n",
      "disassemble": "\nfloat_exprs.39.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n000270 func[0] <f32.i32.no_fold_trunc_s_convert_s>:\n 000271: 20 00                      | local.get 0\n 000273: a8                         | i32.trunc_f32_s\n 000274: b2                         | f32.convert_i32_s\n 000275: 0b                         | end\n000277 func[1] <f32.i32.no_fold_trunc_u_convert_s>:\n 000278: 20 00                      | local.get 0\n 00027a: a9                         | i32.trunc_f32_u\n 00027b: b2                         | f32.convert_i32_s\n 00027c: 0b                         | end\n00027e func[2] <f32.i32.no_fold_trunc_s_convert_u>:\n 00027f: 20 00                      | local.get 0\n 000281: a8                         | i32.trunc_f32_s\n 000282: b3                         | f32.convert_i32_u\n 000283: 0b                         | end\n000285 func[3] <f32.i32.no_fold_trunc_u_convert_u>:\n 000286: 20 00                      | local.get 0\n 000288: a9                         | i32.trunc_f32_u\n 000289: b3                         | f32.convert_i32_u\n 00028a: 0b                         | end\n00028c func[4] <f64.i32.no_fold_trunc_s_convert_s>:\n 00028d: 20 00                      | local.get 0\n 00028f: aa                         | i32.trunc_f64_s\n 000290: b7                         | f64.convert_i32_s\n 000291: 0b                         | end\n000293 func[5] <f64.i32.no_fold_trunc_u_convert_s>:\n 000294: 20 00                      | local.get 0\n 000296: ab                         | i32.trunc_f64_u\n 000297: b7                         | f64.convert_i32_s\n 000298: 0b                         | end\n00029a func[6] <f64.i32.no_fold_trunc_s_convert_u>:\n 00029b: 20 00                      | local.get 0\n 00029d: aa                         | i32.trunc_f64_s\n 00029e: b8                         | f64.convert_i32_u\n 00029f: 0b                         | end\n0002a1 func[7] <f64.i32.no_fold_trunc_u_convert_u>:\n 0002a2: 20 00                      | local.get 0\n 0002a4: ab                         | i32.trunc_f64_u\n 0002a5: b8                         | f64.convert_i32_u\n 0002a6: 0b                         | end\n0002a8 func[8] <f32.i64.no_fold_trunc_s_convert_s>:\n 0002a9: 20 00                      | local.get 0\n 0002ab: ae                         | i64.trunc_f32_s\n 0002ac: b4                         | f32.convert_i64_s\n 0002ad: 0b                         | end\n0002af func[9] <f32.i64.no_fold_trunc_u_convert_s>:\n 0002b0: 20 00                      | local.get 0\n 0002b2: af                         | i64.trunc_f32_u\n 0002b3: b4                         | f32.convert_i64_s\n 0002b4: 0b                         | end\n0002b6 func[10] <f32.i64.no_fold_trunc_s_convert_u>:\n 0002b7: 20 00                      | local.get 0\n 0002b9: ae                         | i64.trunc_f32_s\n 0002ba: b5                         | f32.convert_i64_u\n 0002bb: 0b                         | end\n0002bd func[11] <f32.i64.no_fold_trunc_u_convert_u>:\n 0002be: 20 00                      | local.get 0\n 0002c0: af                         | i64.trunc_f32_u\n 0002c1: b5                         | f32.convert_i64_u\n 0002c2: 0b                         | end\n0002c4 func[12] <f64.i64.no_fold_trunc_s_convert_s>:\n 0002c5: 20 00                      | local.get 0\n 0002c7: b0                         | i64.trunc_f64_s\n 0002c8: b9                         | f64.convert_i64_s\n 0002c9: 0b                         | end\n0002cb func[13] <f64.i64.no_fold_trunc_u_convert_s>:\n 0002cc: 20 00                      | local.get 0\n 0002ce: b1                         | i64.trunc_f64_u\n 0002cf: b9                         | f64.convert_i64_s\n 0002d0: 0b                         | end\n0002d2 func[14] <f64.i64.no_fold_trunc_s_convert_u>:\n 0002d3: 20 00                      | local.get 0\n 0002d5: b0                         | i64.trunc_f64_s\n 0002d6: ba                         | f64.convert_i64_u\n 0002d7: 0b                         | end\n0002d9 func[15] <f64.i64.no_fold_trunc_u_convert_u>:\n 0002da: 20 00                      | local.get 0\n 0002dc: b1                         | i64.trunc_f64_u\n 0002dd: ba                         | f64.convert_i64_u\n 0002de: 0b                         | end\n"
    },
    "float_exprs.40.wasm": {
      "header": "\nfloat_exprs.40.wasm:\tfile format wasm 0x1\n\nSections:\n\n     Type start=0x0000000a end=0x00000015 (size=0x0000000b) count: 2\n Function start=0x00000017 end=0x0000001b (size=0x00000004) count: 3\n   Memory start=0x0000001d end=0x00000021 (size=0x00000004) count: 1\n   Export start=0x00000023 end=0x00000039 (size=0x00000016) count: 3\n     Code start=0x0000003b end=0x00000074 (size=0x00000039) count: 3\n",
      "details": "\nfloat_exprs.40.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nType[2]:\n - type[0] (i32, f32) -> nil\n - type[1] (i32) -> f32\nFunction[3]:\n - func[0] sig=0 <init>\n - func[1] sig=0 <run>\n - func[2] sig=1 <check>\nMemory[1]:\n - memory[0] pages: initial=1 max=1\nExport[3]:\n - func[0] <init> -> \"init\"\n - func[1] <run> -> \"run\"\n - func[2] <check> -> \"check\"\nCode[3]:\n - func[0] size=9 <init>\n - func[1] size=37 <run>\n - func[2] size=7 <check>\n",
      "disassemble": "\nfloat_exprs.40.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n00003d func[0] <init>:\n 00003e: 20 00                      | local.get 0\n 000040: 20 01                      | local.get 1\n 000042: 38 02 00                   | f32.store 2 0\n 000045: 0b                         | end\n000047 func[1] <run>:\n 000048: 01 7f                      | local[2] type=i32\n 00004a: 02 40                      | block\n 00004c: 03 40                      |   loop\n 00004e: 20 02                      |     local.get 2\n 000050: 20 02                      |     local.get 2\n 000052: 2a 02 00                   |     f32.load 2 0\n 000055: 20 01                      |     local.get 1\n 000057: 95                         |     f32.div\n 000058: 38 02 00                   |     f32.store 2 0\n 00005b: 20 02                      |     local.get 2\n 00005d: 41 04                      |     i32.const 4\n 00005f: 6a                         |     i32.add\n 000060: 21 02                      |     local.set 2\n 000062: 20 02                      |     local.get 2\n 000064: 20 00                      |     local.get 0\n 000066: 49                         |     i32.lt_u\n 000067: 0d 00                      |     br_if 0\n 000069: 0b                         |   end\n 00006a: 0b                         | end\n 00006b: 0b                         | end\n00006d func[2] <check>:\n 00006e: 20 00                      | local.get 0\n 000070: 2a 02 00                   | f32.load 2 0\n 000073: 0b                         | end\n"
    },
    "float_exprs.41.wasm": {
      "header": "\nfloat_exprs.41.wasm:\tfile format wasm 0x1\n\nSections:\n\n     Type start=0x0000000a end=0x00000015 (size=0x0000000b) count: 2\n Function start=0x00000017 end=0x0000001b (size=0x00000004) count: 3\n   Memory start=0x0000001d end=0x00000021 (size=0x00000004) count: 1\n   Export start=0x00000023 end=0x00000039 (size=0x00000016) count: 3\n     Code start=0x0000003b end=0x00000074 (size=0x00000039) count: 3\n",
      "details": "\nfloat_exprs.41.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nType[2]:\n - type[0] (i32, f64) -> nil\n - type[1] (i32) -> f64\nFunction[3]:\n - func[0] sig=0 <init>\n - func[1] sig=0 <run>\n - func[2] sig=1 <check>\nMemory[1]:\n - memory[0] pages: initial=1 max=1\nExport[3]:\n - func[0] <init> -> \"init\"\n - func[1] <run> -> \"run\"\n - func[2] <check> -> \"check\"\nCode[3]:\n - func[0] size=9 <init>\n - func[1] size=37 <run>\n - func[2] size=7 <check>\n",
      "disassemble": "\nfloat_exprs.41.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n00003d func[0] <init>:\n 00003e: 20 00                      | local.get 0\n 000040: 20 01                      | local.get 1\n 000042: 39 03 00                   | f64.store 3 0\n 000045: 0b                         | end\n000047 func[1] <run>:\n 000048: 01 7f                      | local[2] type=i32\n 00004a: 02 40                      | block\n 00004c: 03 40                      |   loop\n 00004e: 20 02                      |     local.get 2\n 000050: 20 02                      |     local.get 2\n 000052: 2b 03 00                   |     f64.load 3 0\n 000055: 20 01                      |     local.get 1\n 000057: a3                         |     f64.div\n 000058: 39 03 00                   |     f64.store 3 0\n 00005b: 20 02                      |     local.get 2\n 00005d: 41 08                      |     i32.const 8\n 00005f: 6a                         |     i32.add\n 000060: 21 02                      |     local.set 2\n 000062: 20 02                      |     local.get 2\n 000064: 20 00                      |     local.get 0\n 000066: 49                         |     i32.lt_u\n 000067: 0d 00                      |     br_if 0\n 000069: 0b                         |   end\n 00006a: 0b                         | end\n 00006b: 0b                         | end\n00006d func[2] <check>:\n 00006e: 20 00                      | local.get 0\n 000070: 2b 03 00                   | f64.load 3 0\n 000073: 0b                         | end\n"
    },
    "float_exprs.42.wasm": {
      "header": "\nfloat_exprs.42.wasm:\tfile format wasm 0x1\n\nSections:\n\n     Type start=0x0000000a end=0x00000017 (size=0x0000000d) count: 2\n Function start=0x00000019 end=0x00000022 (size=0x00000009) count: 8\n   Export start=0x00000024 end=0x00000075 (size=0x00000051) count: 8\n     Code start=0x00000077 end=0x000000c0 (size=0x00000049) count: 8\n",
      "details": "\nfloat_exprs.42.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nType[2]:\n - type[0] (f32, f32) -> i32\n - type[1] (f64, f64) -> i32\nFunction[8]:\n - func[0] sig=0 <f32.ult>\n - func[1] sig=0 <f32.ule>\n - func[2] sig=0 <f32.ugt>\n - func[3] sig=0 <f32.uge>\n - func[4] sig=1 <f64.ult>\n - func[5] sig=1 <f64.ule>\n - func[6] sig=1 <f64.ugt>\n - func[7] sig=1 <f64.uge>\nExport[8]:\n - func[0] <f32.ult> -> \"f32.ult\"\n - func[1] <f32.ule> -> \"f32.ule\"\n - func[2] <f32.ugt> -> \"f32.ugt\"\n - func[3] <f32.uge> -> \"f32.uge\"\n - func[4] <f64.ult> -> \"f64.ult\"\n - func[5] <f64.ule> -> \"f64.ule\"\n - func[6] <f64.ugt> -> \"f64.ugt\"\n - func[7] <f64.uge> -> \"f64.uge\"\nCode[8]:\n - func[0] size=8 <f32.ult>\n - func[1] size=8 <f32.ule>\n - func[2] size=8 <f32.ugt>\n - func[3] size=8 <f32.uge>\n - func[4] size=8 <f64.ult>\n - func[5] size=8 <f64.ule>\n - func[6] size=8 <f64.ugt>\n - func[7] size=8 <f64.uge>\n",
      "disassemble": "\nfloat_exprs.42.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n000079 func[0] <f32.ult>:\n 00007a: 20 00                      | local.get 0\n 00007c: 20 01                      | local.get 1\n 00007e: 60                         | f32.ge\n 00007f: 45                         | i32.eqz\n 000080: 0b                         | end\n000082 func[1] <f32.ule>:\n 000083: 20 00                      | local.get 0\n 000085: 20 01                      | local.get 1\n 000087: 5e                         | f32.gt\n 000088: 45                         | i32.eqz\n 000089: 0b                         | end\n00008b func[2] <f32.ugt>:\n 00008c: 20 00                      | local.get 0\n 00008e: 20 01                      | local.get 1\n 000090: 5f                         | f32.le\n 000091: 45                         | i32.eqz\n 000092: 0b                         | end\n000094 func[3] <f32.uge>:\n 000095: 20 00                      | local.get 0\n 000097: 20 01                      | local.get 1\n 000099: 5d                         | f32.lt\n 00009a: 45                         | i32.eqz\n 00009b: 0b                         | end\n00009d func[4] <f64.ult>:\n 00009e: 20 00                      | local.get 0\n 0000a0: 20 01                      | local.get 1\n 0000a2: 66                         | f64.ge\n 0000a3: 45                         | i32.eqz\n 0000a4: 0b                         | end\n0000a6 func[5] <f64.ule>:\n 0000a7: 20 00                      | local.get 0\n 0000a9: 20 01                      | local.get 1\n 0000ab: 64                         | f64.gt\n 0000ac: 45                         | i32.eqz\n 0000ad: 0b                         | end\n0000af func[6] <f64.ugt>:\n 0000b0: 20 00                      | local.get 0\n 0000b2: 20 01                      | local.get 1\n 0000b4: 65                         | f64.le\n 0000b5: 45                         | i32.eqz\n 0000b6: 0b                         | end\n0000b8 func[7] <f64.uge>:\n 0000b9: 20 00                      | local.get 0\n 0000bb: 20 01                      | local.get 1\n 0000bd: 63                         | f64.lt\n 0000be: 45                         | i32.eqz\n 0000bf: 0b                         | end\n"
    },
    "float_exprs.43.wasm": {
      "header": "\nfloat_exprs.43.wasm:\tfile format wasm 0x1\n\nSections:\n\n     Type start=0x0000000a end=0x00000017 (size=0x0000000d) count: 2\n Function start=0x00000019 end=0x00000022 (size=0x00000009) count: 8\n   Export start=0x00000025 end=0x000000e6 (size=0x000000c1) count: 8\n     Code start=0x000000e8 end=0x00000151 (size=0x00000069) count: 8\n",
      "details": "\nfloat_exprs.43.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nType[2]:\n - type[0] (f32, f32) -> f32\n - type[1] (f64, f64) -> f64\nFunction[8]:\n - func[0] sig=0 <f32.no_fold_lt_select>\n - func[1] sig=0 <f32.no_fold_le_select>\n - func[2] sig=0 <f32.no_fold_gt_select>\n - func[3] sig=0 <f32.no_fold_ge_select>\n - func[4] sig=1 <f64.no_fold_lt_select>\n - func[5] sig=1 <f64.no_fold_le_select>\n - func[6] sig=1 <f64.no_fold_gt_select>\n - func[7] sig=1 <f64.no_fold_ge_select>\nExport[8]:\n - func[0] <f32.no_fold_lt_select> -> \"f32.no_fold_lt_select\"\n - func[1] <f32.no_fold_le_select> -> \"f32.no_fold_le_select\"\n - func[2] <f32.no_fold_gt_select> -> \"f32.no_fold_gt_select\"\n - func[3] <f32.no_fold_ge_select> -> \"f32.no_fold_ge_select\"\n - func[4] <f64.no_fold_lt_select> -> \"f64.no_fold_lt_select\"\n - func[5] <f64.no_fold_le_select> -> \"f64.no_fold_le_select\"\n - func[6] <f64.no_fold_gt_select> -> \"f64.no_fold_gt_select\"\n - func[7] <f64.no_fold_ge_select> -> \"f64.no_fold_ge_select\"\nCode[8]:\n - func[0] size=12 <f32.no_fold_lt_select>\n - func[1] size=12 <f32.no_fold_le_select>\n - func[2] size=12 <f32.no_fold_gt_select>\n - func[3] size=12 <f32.no_fold_ge_select>\n - func[4] size=12 <f64.no_fold_lt_select>\n - func[5] size=12 <f64.no_fold_le_select>\n - func[6] size=12 <f64.no_fold_gt_select>\n - func[7] size=12 <f64.no_fold_ge_select>\n",
      "disassemble": "\nfloat_exprs.43.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n0000ea func[0] <f32.no_fold_lt_select>:\n 0000eb: 20 00                      | local.get 0\n 0000ed: 20 01                      | local.get 1\n 0000ef: 20 00                      | local.get 0\n 0000f1: 20 01                      | local.get 1\n 0000f3: 5d                         | f32.lt\n 0000f4: 1b                         | select\n 0000f5: 0b                         | end\n0000f7 func[1] <f32.no_fold_le_select>:\n 0000f8: 20 00                      | local.get 0\n 0000fa: 20 01                      | local.get 1\n 0000fc: 20 00                      | local.get 0\n 0000fe: 20 01                      | local.get 1\n 000100: 5f                         | f32.le\n 000101: 1b                         | select\n 000102: 0b                         | end\n000104 func[2] <f32.no_fold_gt_select>:\n 000105: 20 00                      | local.get 0\n 000107: 20 01                      | local.get 1\n 000109: 20 00                      | local.get 0\n 00010b: 20 01                      | local.get 1\n 00010d: 5e                         | f32.gt\n 00010e: 1b                         | select\n 00010f: 0b                         | end\n000111 func[3] <f32.no_fold_ge_select>:\n 000112: 20 00                      | local.get 0\n 000114: 20 01                      | local.get 1\n 000116: 20 00                      | local.get 0\n 000118: 20 01                      | local.get 1\n 00011a: 60                         | f32.ge\n 00011b: 1b                         | select\n 00011c: 0b                         | end\n00011e func[4] <f64.no_fold_lt_select>:\n 00011f: 20 00                      | local.get 0\n 000121: 20 01                      | local.get 1\n 000123: 20 00                      | local.get 0\n 000125: 20 01                      | local.get 1\n 000127: 63                         | f64.lt\n 000128: 1b                         | select\n 000129: 0b                         | end\n00012b func[5] <f64.no_fold_le_select>:\n 00012c: 20 00                      | local.get 0\n 00012e: 20 01                      | local.get 1\n 000130: 20 00                      | local.get 0\n 000132: 20 01                      | local.get 1\n 000134: 65                         | f64.le\n 000135: 1b                         | select\n 000136: 0b                         | end\n000138 func[6] <f64.no_fold_gt_select>:\n 000139: 20 00                      | local.get 0\n 00013b: 20 01                      | local.get 1\n 00013d: 20 00                      | local.get 0\n 00013f: 20 01                      | local.get 1\n 000141: 64                         | f64.gt\n 000142: 1b                         | select\n 000143: 0b                         | end\n000145 func[7] <f64.no_fold_ge_select>:\n 000146: 20 00                      | local.get 0\n 000148: 20 01                      | local.get 1\n 00014a: 20 00                      | local.get 0\n 00014c: 20 01                      | local.get 1\n 00014e: 66                         | f64.ge\n 00014f: 1b                         | select\n 000150: 0b                         | end\n"
    },
    "float_exprs.44.wasm": {
      "header": "\nfloat_exprs.44.wasm:\tfile format wasm 0x1\n\nSections:\n\n     Type start=0x0000000a end=0x00000017 (size=0x0000000d) count: 2\n Function start=0x00000019 end=0x00000022 (size=0x00000009) count: 8\n   Export start=0x00000025 end=0x000000c6 (size=0x000000a1) count: 8\n     Code start=0x000000c9 end=0x0000014a (size=0x00000081) count: 8\n",
      "details": "\nfloat_exprs.44.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nType[2]:\n - type[0] (f32, f32) -> f32\n - type[1] (f64, f64) -> f64\nFunction[8]:\n - func[0] sig=0 <f32.no_fold_lt_if>\n - func[1] sig=0 <f32.no_fold_le_if>\n - func[2] sig=0 <f32.no_fold_gt_if>\n - func[3] sig=0 <f32.no_fold_ge_if>\n - func[4] sig=1 <f64.no_fold_lt_if>\n - func[5] sig=1 <f64.no_fold_le_if>\n - func[6] sig=1 <f64.no_fold_gt_if>\n - func[7] sig=1 <f64.no_fold_ge_if>\nExport[8]:\n - func[0] <f32.no_fold_lt_if> -> \"f32.no_fold_lt_if\"\n - func[1] <f32.no_fold_le_if> -> \"f32.no_fold_le_if\"\n - func[2] <f32.no_fold_gt_if> -> \"f32.no_fold_gt_if\"\n - func[3] <f32.no_fold_ge_if> -> \"f32.no_fold_ge_if\"\n - func[4] <f64.no_fold_lt_if> -> \"f64.no_fold_lt_if\"\n - func[5] <f64.no_fold_le_if> -> \"f64.no_fold_le_if\"\n - func[6] <f64.no_fold_gt_if> -> \"f64.no_fold_gt_if\"\n - func[7] <f64.no_fold_ge_if> -> \"f64.no_fold_ge_if\"\nCode[8]:\n - func[0] size=15 <f32.no_fold_lt_if>\n - func[1] size=15 <f32.no_fold_le_if>\n - func[2] size=15 <f32.no_fold_gt_if>\n - func[3] size=15 <f32.no_fold_ge_if>\n - func[4] size=15 <f64.no_fold_lt_if>\n - func[5] size=15 <f64.no_fold_le_if>\n - func[6] size=15 <f64.no_fold_gt_if>\n - func[7] size=15 <f64.no_fold_ge_if>\n",
      "disassemble": "\nfloat_exprs.44.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n0000cb func[0] <f32.no_fold_lt_if>:\n 0000cc: 20 00                      | local.get 0\n 0000ce: 20 01                      | local.get 1\n 0000d0: 5d                         | f32.lt\n 0000d1: 04 7d                      | if f32\n 0000d3: 20 00                      |   local.get 0\n 0000d5: 05                         | else\n 0000d6: 20 01                      |   local.get 1\n 0000d8: 0b                         | end\n 0000d9: 0b                         | end\n0000db func[1] <f32.no_fold_le_if>:\n 0000dc: 20 00                      | local.get 0\n 0000de: 20 01                      | local.get 1\n 0000e0: 5f                         | f32.le\n 0000e1: 04 7d                      | if f32\n 0000e3: 20 00                      |   local.get 0\n 0000e5: 05                         | else\n 0000e6: 20 01                      |   local.get 1\n 0000e8: 0b                         | end\n 0000e9: 0b                         | end\n0000eb func[2] <f32.no_fold_gt_if>:\n 0000ec: 20 00                      | local.get 0\n 0000ee: 20 01                      | local.get 1\n 0000f0: 5e                         | f32.gt\n 0000f1: 04 7d                      | if f32\n 0000f3: 20 00                      |   local.get 0\n 0000f5: 05                         | else\n 0000f6: 20 01                      |   local.get 1\n 0000f8: 0b                         | end\n 0000f9: 0b                         | end\n0000fb func[3] <f32.no_fold_ge_if>:\n 0000fc: 20 00                      | local.get 0\n 0000fe: 20 01                      | local.get 1\n 000100: 60                         | f32.ge\n 000101: 04 7d                      | if f32\n 000103: 20 00                      |   local.get 0\n 000105: 05                         | else\n 000106: 20 01                      |   local.get 1\n 000108: 0b                         | end\n 000109: 0b                         | end\n00010b func[4] <f64.no_fold_lt_if>:\n 00010c: 20 00                      | local.get 0\n 00010e: 20 01                      | local.get 1\n 000110: 63                         | f64.lt\n 000111: 04 7c                      | if f64\n 000113: 20 00                      |   local.get 0\n 000115: 05                         | else\n 000116: 20 01                      |   local.get 1\n 000118: 0b                         | end\n 000119: 0b                         | end\n00011b func[5] <f64.no_fold_le_if>:\n 00011c: 20 00                      | local.get 0\n 00011e: 20 01                      | local.get 1\n 000120: 65                         | f64.le\n 000121: 04 7c                      | if f64\n 000123: 20 00                      |   local.get 0\n 000125: 05                         | else\n 000126: 20 01                      |   local.get 1\n 000128: 0b                         | end\n 000129: 0b                         | end\n00012b func[6] <f64.no_fold_gt_if>:\n 00012c: 20 00                      | local.get 0\n 00012e: 20 01                      | local.get 1\n 000130: 64                         | f64.gt\n 000131: 04 7c                      | if f64\n 000133: 20 00                      |   local.get 0\n 000135: 05                         | else\n 000136: 20 01                      |   local.get 1\n 000138: 0b                         | end\n 000139: 0b                         | end\n00013b func[7] <f64.no_fold_ge_if>:\n 00013c: 20 00                      | local.get 0\n 00013e: 20 01                      | local.get 1\n 000140: 66                         | f64.ge\n 000141: 04 7c                      | if f64\n 000143: 20 00                      |   local.get 0\n 000145: 05                         | else\n 000146: 20 01                      |   local.get 1\n 000148: 0b                         | end\n 000149: 0b                         | end\n"
    },
    "float_exprs.45.wasm": {
      "header": "\nfloat_exprs.45.wasm:\tfile format wasm 0x1\n\nSections:\n\n     Type start=0x0000000a end=0x00000015 (size=0x0000000b) count: 2\n Function start=0x00000017 end=0x00000020 (size=0x00000009) count: 8\n   Export start=0x00000023 end=0x0000011c (size=0x000000f9) count: 8\n     Code start=0x0000011f end=0x000001b8 (size=0x00000099) count: 8\n",
      "details": "\nfloat_exprs.45.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nType[2]:\n - type[0] (f32) -> f32\n - type[1] (f64) -> f64\nFunction[8]:\n - func[0] sig=0 <f32.no_fold_lt_select_to_abs>\n - func[1] sig=0 <f32.no_fold_le_select_to_abs>\n - func[2] sig=0 <f32.no_fold_gt_select_to_abs>\n - func[3] sig=0 <f32.no_fold_ge_select_to_abs>\n - func[4] sig=1 <f64.no_fold_lt_select_to_abs>\n - func[5] sig=1 <f64.no_fold_le_select_to_abs>\n - func[6] sig=1 <f64.no_fold_gt_select_to_abs>\n - func[7] sig=1 <f64.no_fold_ge_select_to_abs>\nExport[8]:\n - func[0] <f32.no_fold_lt_select_to_abs> -> \"f32.no_fold_lt_select_to_abs\"\n - func[1] <f32.no_fold_le_select_to_abs> -> \"f32.no_fold_le_select_to_abs\"\n - func[2] <f32.no_fold_gt_select_to_abs> -> \"f32.no_fold_gt_select_to_abs\"\n - func[3] <f32.no_fold_ge_select_to_abs> -> \"f32.no_fold_ge_select_to_abs\"\n - func[4] <f64.no_fold_lt_select_to_abs> -> \"f64.no_fold_lt_select_to_abs\"\n - func[5] <f64.no_fold_le_select_to_abs> -> \"f64.no_fold_le_select_to_abs\"\n - func[6] <f64.no_fold_gt_select_to_abs> -> \"f64.no_fold_gt_select_to_abs\"\n - func[7] <f64.no_fold_ge_select_to_abs> -> \"f64.no_fold_ge_select_to_abs\"\nCode[8]:\n - func[0] size=16 <f32.no_fold_lt_select_to_abs>\n - func[1] size=16 <f32.no_fold_le_select_to_abs>\n - func[2] size=16 <f32.no_fold_gt_select_to_abs>\n - func[3] size=16 <f32.no_fold_ge_select_to_abs>\n - func[4] size=20 <f64.no_fold_lt_select_to_abs>\n - func[5] size=20 <f64.no_fold_le_select_to_abs>\n - func[6] size=20 <f64.no_fold_gt_select_to_abs>\n - func[7] size=20 <f64.no_fold_ge_select_to_abs>\n",
      "disassemble": "\nfloat_exprs.45.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n000121 func[0] <f32.no_fold_lt_select_to_abs>:\n 000122: 20 00                      | local.get 0\n 000124: 8c                         | f32.neg\n 000125: 20 00                      | local.get 0\n 000127: 20 00                      | local.get 0\n 000129: 43 00 00 00 00             | f32.const 0x0p+0\n 00012e: 5d                         | f32.lt\n 00012f: 1b                         | select\n 000130: 0b                         | end\n000132 func[1] <f32.no_fold_le_select_to_abs>:\n 000133: 20 00                      | local.get 0\n 000135: 8c                         | f32.neg\n 000136: 20 00                      | local.get 0\n 000138: 20 00                      | local.get 0\n 00013a: 43 00 00 00 80             | f32.const -0x0p+0\n 00013f: 5f                         | f32.le\n 000140: 1b                         | select\n 000141: 0b                         | end\n000143 func[2] <f32.no_fold_gt_select_to_abs>:\n 000144: 20 00                      | local.get 0\n 000146: 20 00                      | local.get 0\n 000148: 8c                         | f32.neg\n 000149: 20 00                      | local.get 0\n 00014b: 43 00 00 00 80             | f32.const -0x0p+0\n 000150: 5e                         | f32.gt\n 000151: 1b                         | select\n 000152: 0b                         | end\n000154 func[3] <f32.no_fold_ge_select_to_abs>:\n 000155: 20 00                      | local.get 0\n 000157: 20 00                      | local.get 0\n 000159: 8c                         | f32.neg\n 00015a: 20 00                      | local.get 0\n 00015c: 43 00 00 00 00             | f32.const 0x0p+0\n 000161: 60                         | f32.ge\n 000162: 1b                         | select\n 000163: 0b                         | end\n000165 func[4] <f64.no_fold_lt_select_to_abs>:\n 000166: 20 00                      | local.get 0\n 000168: 9a                         | f64.neg\n 000169: 20 00                      | local.get 0\n 00016b: 20 00                      | local.get 0\n 00016d: 44 00 00 00 00 00 00 00 00 | f64.const 0x0p+0\n 000176: 63                         | f64.lt\n 000177: 1b                         | select\n 000178: 0b                         | end\n00017a func[5] <f64.no_fold_le_select_to_abs>:\n 00017b: 20 00                      | local.get 0\n 00017d: 9a                         | f64.neg\n 00017e: 20 00                      | local.get 0\n 000180: 20 00                      | local.get 0\n 000182: 44 00 00 00 00 00 00 00 80 | f64.const -0x0p+0\n 00018b: 65                         | f64.le\n 00018c: 1b                         | select\n 00018d: 0b                         | end\n00018f func[6] <f64.no_fold_gt_select_to_abs>:\n 000190: 20 00                      | local.get 0\n 000192: 20 00                      | local.get 0\n 000194: 9a                         | f64.neg\n 000195: 20 00                      | local.get 0\n 000197: 44 00 00 00 00 00 00 00 80 | f64.const -0x0p+0\n 0001a0: 64                         | f64.gt\n 0001a1: 1b                         | select\n 0001a2: 0b                         | end\n0001a4 func[7] <f64.no_fold_ge_select_to_abs>:\n 0001a5: 20 00                      | local.get 0\n 0001a7: 20 00                      | local.get 0\n 0001a9: 9a                         | f64.neg\n 0001aa: 20 00                      | local.get 0\n 0001ac: 44 00 00 00 00 00 00 00 00 | f64.const 0x0p+0\n 0001b5: 66                         | f64.ge\n 0001b6: 1b                         | select\n 0001b7: 0b                         | end\n"
    },
    "float_exprs.46.wasm": {
      "header": "\nfloat_exprs.46.wasm:\tfile format wasm 0x1\n\nSections:\n\n     Type start=0x0000000a end=0x00000015 (size=0x0000000b) count: 2\n Function start=0x00000017 end=0x00000020 (size=0x00000009) count: 8\n   Export start=0x00000023 end=0x000000fc (size=0x000000d9) count: 8\n     Code start=0x000000ff end=0x000001b0 (size=0x000000b1) count: 8\n",
      "details": "\nfloat_exprs.46.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nType[2]:\n - type[0] (f32) -> f32\n - type[1] (f64) -> f64\nFunction[8]:\n - func[0] sig=0 <f32.no_fold_lt_if_to_abs>\n - func[1] sig=0 <f32.no_fold_le_if_to_abs>\n - func[2] sig=0 <f32.no_fold_gt_if_to_abs>\n - func[3] sig=0 <f32.no_fold_ge_if_to_abs>\n - func[4] sig=1 <f64.no_fold_lt_if_to_abs>\n - func[5] sig=1 <f64.no_fold_le_if_to_abs>\n - func[6] sig=1 <f64.no_fold_gt_if_to_abs>\n - func[7] sig=1 <f64.no_fold_ge_if_to_abs>\nExport[8]:\n - func[0] <f32.no_fold_lt_if_to_abs> -> \"f32.no_fold_lt_if_to_abs\"\n - func[1] <f32.no_fold_le_if_to_abs> -> \"f32.no_fold_le_if_to_abs\"\n - func[2] <f32.no_fold_gt_if_to_abs> -> \"f32.no_fold_gt_if_to_abs\"\n - func[3] <f32.no_fold_ge_if_to_abs> -> \"f32.no_fold_ge_if_to_abs\"\n - func[4] <f64.no_fold_lt_if_to_abs> -> \"f64.no_fold_lt_if_to_abs\"\n - func[5] <f64.no_fold_le_if_to_abs> -> \"f64.no_fold_le_if_to_abs\"\n - func[6] <f64.no_fold_gt_if_to_abs> -> \"f64.no_fold_gt_if_to_abs\"\n - func[7] <f64.no_fold_ge_if_to_abs> -> \"f64.no_fold_ge_if_to_abs\"\nCode[8]:\n - func[0] size=19 <f32.no_fold_lt_if_to_abs>\n - func[1] size=19 <f32.no_fold_le_if_to_abs>\n - func[2] size=19 <f32.no_fold_gt_if_to_abs>\n - func[3] size=19 <f32.no_fold_ge_if_to_abs>\n - func[4] size=23 <f64.no_fold_lt_if_to_abs>\n - func[5] size=23 <f64.no_fold_le_if_to_abs>\n - func[6] size=23 <f64.no_fold_gt_if_to_abs>\n - func[7] size=23 <f64.no_fold_ge_if_to_abs>\n",
      "disassemble": "\nfloat_exprs.46.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n000101 func[0] <f32.no_fold_lt_if_to_abs>:\n 000102: 20 00                      | local.get 0\n 000104: 43 00 00 00 00             | f32.const 0x0p+0\n 000109: 5d                         | f32.lt\n 00010a: 04 7d                      | if f32\n 00010c: 20 00                      |   local.get 0\n 00010e: 8c                         |   f32.neg\n 00010f: 05                         | else\n 000110: 20 00                      |   local.get 0\n 000112: 0b                         | end\n 000113: 0b                         | end\n000115 func[1] <f32.no_fold_le_if_to_abs>:\n 000116: 20 00                      | local.get 0\n 000118: 43 00 00 00 80             | f32.const -0x0p+0\n 00011d: 5f                         | f32.le\n 00011e: 04 7d                      | if f32\n 000120: 20 00                      |   local.get 0\n 000122: 8c                         |   f32.neg\n 000123: 05                         | else\n 000124: 20 00                      |   local.get 0\n 000126: 0b                         | end\n 000127: 0b                         | end\n000129 func[2] <f32.no_fold_gt_if_to_abs>:\n 00012a: 20 00                      | local.get 0\n 00012c: 43 00 00 00 80             | f32.const -0x0p+0\n 000131: 5e                         | f32.gt\n 000132: 04 7d                      | if f32\n 000134: 20 00                      |   local.get 0\n 000136: 05                         | else\n 000137: 20 00                      |   local.get 0\n 000139: 8c                         |   f32.neg\n 00013a: 0b                         | end\n 00013b: 0b                         | end\n00013d func[3] <f32.no_fold_ge_if_to_abs>:\n 00013e: 20 00                      | local.get 0\n 000140: 43 00 00 00 00             | f32.const 0x0p+0\n 000145: 60                         | f32.ge\n 000146: 04 7d                      | if f32\n 000148: 20 00                      |   local.get 0\n 00014a: 05                         | else\n 00014b: 20 00                      |   local.get 0\n 00014d: 8c                         |   f32.neg\n 00014e: 0b                         | end\n 00014f: 0b                         | end\n000151 func[4] <f64.no_fold_lt_if_to_abs>:\n 000152: 20 00                      | local.get 0\n 000154: 44 00 00 00 00 00 00 00 00 | f64.const 0x0p+0\n 00015d: 63                         | f64.lt\n 00015e: 04 7c                      | if f64\n 000160: 20 00                      |   local.get 0\n 000162: 9a                         |   f64.neg\n 000163: 05                         | else\n 000164: 20 00                      |   local.get 0\n 000166: 0b                         | end\n 000167: 0b                         | end\n000169 func[5] <f64.no_fold_le_if_to_abs>:\n 00016a: 20 00                      | local.get 0\n 00016c: 44 00 00 00 00 00 00 00 80 | f64.const -0x0p+0\n 000175: 65                         | f64.le\n 000176: 04 7c                      | if f64\n 000178: 20 00                      |   local.get 0\n 00017a: 9a                         |   f64.neg\n 00017b: 05                         | else\n 00017c: 20 00                      |   local.get 0\n 00017e: 0b                         | end\n 00017f: 0b                         | end\n000181 func[6] <f64.no_fold_gt_if_to_abs>:\n 000182: 20 00                      | local.get 0\n 000184: 44 00 00 00 00 00 00 00 80 | f64.const -0x0p+0\n 00018d: 64                         | f64.gt\n 00018e: 04 7c                      | if f64\n 000190: 20 00                      |   local.get 0\n 000192: 05                         | else\n 000193: 20 00                      |   local.get 0\n 000195: 9a                         |   f64.neg\n 000196: 0b                         | end\n 000197: 0b                         | end\n000199 func[7] <f64.no_fold_ge_if_to_abs>:\n 00019a: 20 00                      | local.get 0\n 00019c: 44 00 00 00 00 00 00 00 00 | f64.const 0x0p+0\n 0001a5: 66                         | f64.ge\n 0001a6: 04 7c                      | if f64\n 0001a8: 20 00                      |   local.get 0\n 0001aa: 05                         | else\n 0001ab: 20 00                      |   local.get 0\n 0001ad: 9a                         |   f64.neg\n 0001ae: 0b                         | end\n 0001af: 0b                         | end\n"
    },
    "float_exprs.47.wasm": {
      "header": "\nfloat_exprs.47.wasm:\tfile format wasm 0x1\n\nSections:\n\n     Type start=0x0000000a end=0x00000013 (size=0x00000009) count: 2\n Function start=0x00000015 end=0x00000018 (size=0x00000003) count: 2\n   Export start=0x0000001a end=0x00000051 (size=0x00000037) count: 2\n     Code start=0x00000053 end=0x00000098 (size=0x00000045) count: 2\n",
      "details": "\nfloat_exprs.47.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nType[2]:\n - type[0] () -> f32\n - type[1] () -> f64\nFunction[2]:\n - func[0] sig=0 <f32.incorrect_correction>\n - func[1] sig=1 <f64.incorrect_correction>\nExport[2]:\n - func[0] <f32.incorrect_correction> -> \"f32.incorrect_correction\"\n - func[1] <f64.incorrect_correction> -> \"f64.incorrect_correction\"\nCode[2]:\n - func[0] size=25 <f32.incorrect_correction>\n - func[1] size=41 <f64.incorrect_correction>\n",
      "disassemble": "\nfloat_exprs.47.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n000055 func[0] <f32.incorrect_correction>:\n 000056: 43 be 9f aa 3f             | f32.const 0x1.553f7cp+0\n 00005b: 43 cd cc 9c 3f             | f32.const 0x1.39999ap+0\n 000060: 92                         | f32.add\n 000061: 43 be 9f aa 3f             | f32.const 0x1.553f7cp+0\n 000066: 93                         | f32.sub\n 000067: 43 cd cc 9c 3f             | f32.const 0x1.39999ap+0\n 00006c: 93                         | f32.sub\n 00006d: 0b                         | end\n00006f func[1] <f64.incorrect_correction>:\n 000070: 44 87 16 d9 ce f7 53 f5 3f | f64.const 0x1.553f7ced91687p+0\n 000079: 44 9a 99 99 99 99 99 f3 3f | f64.const 0x1.399999999999ap+0\n 000082: a0                         | f64.add\n 000083: 44 87 16 d9 ce f7 53 f5 3f | f64.const 0x1.553f7ced91687p+0\n 00008c: a1                         | f64.sub\n 00008d: 44 9a 99 99 99 99 99 f3 3f | f64.const 0x1.399999999999ap+0\n 000096: a1                         | f64.sub\n 000097: 0b                         | end\n"
    },
    "float_exprs.48.wasm": {
      "header": "\nfloat_exprs.48.wasm:\tfile format wasm 0x1\n\nSections:\n\n     Type start=0x0000000a end=0x0000000f (size=0x00000005) count: 1\n Function start=0x00000011 end=0x00000013 (size=0x00000002) count: 1\n   Export start=0x00000015 end=0x00000022 (size=0x0000000d) count: 1\n     Code start=0x00000024 end=0x0000006e (size=0x0000004a) count: 1\n",
      "details": "\nfloat_exprs.48.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nType[1]:\n - type[0] () -> f32\nFunction[1]:\n - func[0] sig=0 <calculate>\nExport[1]:\n - func[0] <calculate> -> \"calculate\"\nCode[1]:\n - func[0] size=72 <calculate>\n",
      "disassemble": "\nfloat_exprs.48.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n000026 func[0] <calculate>:\n 000027: 05 7d                      | local[0..4] type=f32\n 000029: 43 00 40 1c 43             | f32.const 0x1.388p+7\n 00002e: 21 00                      | local.set 0\n 000030: 43 55 55 50 43             | f32.const 0x1.a0aaaap+7\n 000035: 21 01                      | local.set 1\n 000037: 43 15 c7 e3 3f             | f32.const 0x1.c78e2ap+0\n 00003c: 21 02                      | local.set 2\n 00003e: 20 01                      | local.get 1\n 000040: 8c                         | f32.neg\n 000041: 20 00                      | local.get 0\n 000043: 94                         | f32.mul\n 000044: 20 00                      | local.get 0\n 000046: 20 02                      | local.get 2\n 000048: 94                         | f32.mul\n 000049: 20 01                      | local.get 1\n 00004b: 93                         | f32.sub\n 00004c: 95                         | f32.div\n 00004d: 21 03                      | local.set 3\n 00004f: 20 01                      | local.get 1\n 000051: 8c                         | f32.neg\n 000052: 20 00                      | local.get 0\n 000054: 94                         | f32.mul\n 000055: 20 00                      | local.get 0\n 000057: 20 02                      | local.get 2\n 000059: 94                         | f32.mul\n 00005a: 20 01                      | local.get 1\n 00005c: 93                         | f32.sub\n 00005d: 95                         | f32.div\n 00005e: 21 04                      | local.set 4\n 000060: 02 40                      | block\n 000062: 20 03                      |   local.get 3\n 000064: 20 04                      |   local.get 4\n 000066: 5b                         |   f32.eq\n 000067: 0d 00                      |   br_if 0\n 000069: 00                         |   unreachable\n 00006a: 0b                         | end\n 00006b: 20 04                      | local.get 4\n 00006d: 0b                         | end\n"
    },
    "float_exprs.49.wasm": {
      "header": "\nfloat_exprs.49.wasm:\tfile format wasm 0x1\n\nSections:\n\n     Type start=0x0000000a end=0x0000000f (size=0x00000005) count: 1\n Function start=0x00000011 end=0x00000013 (size=0x00000002) count: 1\n   Export start=0x00000015 end=0x00000022 (size=0x0000000d) count: 1\n     Code start=0x00000024 end=0x0000007a (size=0x00000056) count: 1\n",
      "details": "\nfloat_exprs.49.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nType[1]:\n - type[0] () -> f64\nFunction[1]:\n - func[0] sig=0 <calculate>\nExport[1]:\n - func[0] <calculate> -> \"calculate\"\nCode[1]:\n - func[0] size=84 <calculate>\n",
      "disassemble": "\nfloat_exprs.49.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n000026 func[0] <calculate>:\n 000027: 05 7c                      | local[0..4] type=f64\n 000029: 44 00 00 00 00 00 88 63 40 | f64.const 0x1.388p+7\n 000032: 21 00                      | local.set 0\n 000034: 44 4b 06 ab aa aa 0a 6a 40 | f64.const 0x1.a0aaaaaab064bp+7\n 00003d: 21 01                      | local.set 1\n 00003f: 44 96 d0 e3 aa e2 78 fc 3f | f64.const 0x1.c78e2aae3d096p+0\n 000048: 21 02                      | local.set 2\n 00004a: 20 01                      | local.get 1\n 00004c: 9a                         | f64.neg\n 00004d: 20 00                      | local.get 0\n 00004f: a2                         | f64.mul\n 000050: 20 00                      | local.get 0\n 000052: 20 02                      | local.get 2\n 000054: a2                         | f64.mul\n 000055: 20 01                      | local.get 1\n 000057: a1                         | f64.sub\n 000058: a3                         | f64.div\n 000059: 21 03                      | local.set 3\n 00005b: 20 01                      | local.get 1\n 00005d: 9a                         | f64.neg\n 00005e: 20 00                      | local.get 0\n 000060: a2                         | f64.mul\n 000061: 20 00                      | local.get 0\n 000063: 20 02                      | local.get 2\n 000065: a2                         | f64.mul\n 000066: 20 01                      | local.get 1\n 000068: a1                         | f64.sub\n 000069: a3                         | f64.div\n 00006a: 21 04                      | local.set 4\n 00006c: 02 40                      | block\n 00006e: 20 03                      |   local.get 3\n 000070: 20 04                      |   local.get 4\n 000072: 61                         |   f64.eq\n 000073: 0d 00                      |   br_if 0\n 000075: 00                         |   unreachable\n 000076: 0b                         | end\n 000077: 20 04                      | local.get 4\n 000079: 0b                         | end\n"
    },
    "float_exprs.50.wasm": {
      "header": "\nfloat_exprs.50.wasm:\tfile format wasm 0x1\n\nSections:\n\n     Type start=0x0000000a end=0x00000010 (size=0x00000006) count: 1\n Function start=0x00000012 end=0x00000014 (size=0x00000002) count: 1\n   Export start=0x00000016 end=0x00000026 (size=0x00000010) count: 1\n     Code start=0x00000028 end=0x0000003a (size=0x00000012) count: 1\n",
      "details": "\nfloat_exprs.50.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nType[1]:\n - type[0] (f32) -> f32\nFunction[1]:\n - func[0] sig=0 <llvm_pr26746>\nExport[1]:\n - func[0] <llvm_pr26746> -> \"llvm_pr26746\"\nCode[1]:\n - func[0] size=16 <llvm_pr26746>\n",
      "disassemble": "\nfloat_exprs.50.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n00002a func[0] <llvm_pr26746>:\n 00002b: 43 00 00 00 00             | f32.const 0x0p+0\n 000030: 43 00 00 00 80             | f32.const -0x0p+0\n 000035: 20 00                      | local.get 0\n 000037: 93                         | f32.sub\n 000038: 93                         | f32.sub\n 000039: 0b                         | end\n"
    },
    "float_exprs.51.wasm": {
      "header": "\nfloat_exprs.51.wasm:\tfile format wasm 0x1\n\nSections:\n\n     Type start=0x0000000a end=0x00000010 (size=0x00000006) count: 1\n Function start=0x00000012 end=0x00000014 (size=0x00000002) count: 1\n   Export start=0x00000016 end=0x00000026 (size=0x00000010) count: 1\n     Code start=0x00000028 end=0x0000003c (size=0x00000014) count: 1\n",
      "details": "\nfloat_exprs.51.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nType[1]:\n - type[0] (i32) -> f32\nFunction[1]:\n - func[0] sig=0 <llvm_pr27153>\nExport[1]:\n - func[0] <llvm_pr27153> -> \"llvm_pr27153\"\nCode[1]:\n - func[0] size=18 <llvm_pr27153>\n",
      "disassemble": "\nfloat_exprs.51.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n00002a func[0] <llvm_pr27153>:\n 00002b: 20 00                      | local.get 0\n 00002d: 41 ff ff ff ff 00          | i32.const 268435455\n 000033: 71                         | i32.and\n 000034: b2                         | f32.convert_i32_s\n 000035: 43 00 00 00 cb             | f32.const -0x1p+23\n 00003a: 92                         | f32.add\n 00003b: 0b                         | end\n"
    },
    "float_exprs.52.wasm": {
      "header": "\nfloat_exprs.52.wasm:\tfile format wasm 0x1\n\nSections:\n\n     Type start=0x0000000a end=0x00000011 (size=0x00000007) count: 1\n Function start=0x00000013 end=0x00000015 (size=0x00000002) count: 1\n   Export start=0x00000017 end=0x00000027 (size=0x00000010) count: 1\n     Code start=0x00000029 end=0x00000040 (size=0x00000017) count: 1\n",
      "details": "\nfloat_exprs.52.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nType[1]:\n - type[0] (i32, i32) -> f32\nFunction[1]:\n - func[0] sig=0 <llvm_pr27036>\nExport[1]:\n - func[0] <llvm_pr27036> -> \"llvm_pr27036\"\nCode[1]:\n - func[0] size=21 <llvm_pr27036>\n",
      "disassemble": "\nfloat_exprs.52.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n00002b func[0] <llvm_pr27036>:\n 00002c: 20 00                      | local.get 0\n 00002e: 41 cb ff 87 74             | i32.const 4269932491\n 000033: 72                         | i32.or\n 000034: b2                         | f32.convert_i32_s\n 000035: 20 01                      | local.get 1\n 000037: 41 80 80 90 07             | i32.const 14942208\n 00003c: 71                         | i32.and\n 00003d: b2                         | f32.convert_i32_s\n 00003e: 92                         | f32.add\n 00003f: 0b                         | end\n"
    },
    "float_exprs.53.wasm": {
      "header": "\nfloat_exprs.53.wasm:\tfile format wasm 0x1\n\nSections:\n\n     Type start=0x0000000a end=0x00000021 (size=0x00000017) count: 3\n Function start=0x00000023 end=0x00000027 (size=0x00000004) count: 3\n   Export start=0x00000029 end=0x0000004b (size=0x00000022) count: 3\n     Code start=0x0000004d end=0x00000072 (size=0x00000025) count: 3\n",
      "details": "\nfloat_exprs.53.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nType[3]:\n - type[0] (f64, f64, f64, f64) -> f64\n - type[1] (f64, f64, f64) -> f64\n - type[2] (f32, f32, f32) -> f32\nFunction[3]:\n - func[0] sig=0 <thepast0>\n - func[1] sig=1 <thepast1>\n - func[2] sig=2 <thepast2>\nExport[3]:\n - func[0] <thepast0> -> \"thepast0\"\n - func[1] <thepast1> -> \"thepast1\"\n - func[2] <thepast2> -> \"thepast2\"\nCode[3]:\n - func[0] size=13 <thepast0>\n - func[1] size=10 <thepast1>\n - func[2] size=10 <thepast2>\n",
      "disassemble": "\nfloat_exprs.53.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n00004f func[0] <thepast0>:\n 000050: 20 00                      | local.get 0\n 000052: 20 01                      | local.get 1\n 000054: a2                         | f64.mul\n 000055: 20 02                      | local.get 2\n 000057: 20 03                      | local.get 3\n 000059: a2                         | f64.mul\n 00005a: a3                         | f64.div\n 00005b: 0b                         | end\n00005d func[1] <thepast1>:\n 00005e: 20 00                      | local.get 0\n 000060: 20 01                      | local.get 1\n 000062: a2                         | f64.mul\n 000063: 20 02                      | local.get 2\n 000065: a1                         | f64.sub\n 000066: 0b                         | end\n000068 func[2] <thepast2>:\n 000069: 20 00                      | local.get 0\n 00006b: 20 01                      | local.get 1\n 00006d: 94                         | f32.mul\n 00006e: 20 02                      | local.get 2\n 000070: 94                         | f32.mul\n 000071: 0b                         | end\n"
    },
    "float_exprs.54.wasm": {
      "header": "\nfloat_exprs.54.wasm:\tfile format wasm 0x1\n\nSections:\n\n     Type start=0x0000000a end=0x00000010 (size=0x00000006) count: 1\n Function start=0x00000012 end=0x00000014 (size=0x00000002) count: 1\n   Export start=0x00000016 end=0x00000021 (size=0x0000000b) count: 1\n     Code start=0x00000023 end=0x0000002f (size=0x0000000c) count: 1\n",
      "details": "\nfloat_exprs.54.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nType[1]:\n - type[0] (f32) -> f32\nFunction[1]:\n - func[0] sig=0 <inverse>\nExport[1]:\n - func[0] <inverse> -> \"inverse\"\nCode[1]:\n - func[0] size=10 <inverse>\n",
      "disassemble": "\nfloat_exprs.54.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n000025 func[0] <inverse>:\n 000026: 43 00 00 80 3f             | f32.const 0x1p+0\n 00002b: 20 00                      | local.get 0\n 00002d: 95                         | f32.div\n 00002e: 0b                         | end\n"
    },
    "float_exprs.55.wasm": {
      "header": "\nfloat_exprs.55.wasm:\tfile format wasm 0x1\n\nSections:\n\n     Type start=0x0000000a end=0x00000015 (size=0x0000000b) count: 2\n Function start=0x00000017 end=0x0000001a (size=0x00000003) count: 2\n   Export start=0x0000001c end=0x00000043 (size=0x00000027) count: 2\n     Code start=0x00000045 end=0x00000062 (size=0x0000001d) count: 2\n",
      "details": "\nfloat_exprs.55.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nType[2]:\n - type[0] (f32) -> f32\n - type[1] (f64) -> f64\nFunction[2]:\n - func[0] sig=0 <f32_sqrt_minus_2>\n - func[1] sig=1 <f64_sqrt_minus_2>\nExport[2]:\n - func[0] <f32_sqrt_minus_2> -> \"f32_sqrt_minus_2\"\n - func[1] <f64_sqrt_minus_2> -> \"f64_sqrt_minus_2\"\nCode[2]:\n - func[0] size=11 <f32_sqrt_minus_2>\n - func[1] size=15 <f64_sqrt_minus_2>\n",
      "disassemble": "\nfloat_exprs.55.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n000047 func[0] <f32_sqrt_minus_2>:\n 000048: 20 00                      | local.get 0\n 00004a: 91                         | f32.sqrt\n 00004b: 43 00 00 00 40             | f32.const 0x1p+1\n 000050: 93                         | f32.sub\n 000051: 0b                         | end\n000053 func[1] <f64_sqrt_minus_2>:\n 000054: 20 00                      | local.get 0\n 000056: 9f                         | f64.sqrt\n 000057: 44 00 00 00 00 00 00 00 40 | f64.const 0x1p+1\n 000060: a1                         | f64.sub\n 000061: 0b                         | end\n"
    },
    "float_exprs.56.wasm": {
      "header": "\nfloat_exprs.56.wasm:\tfile format wasm 0x1\n\nSections:\n\n     Type start=0x0000000a end=0x00000015 (size=0x0000000b) count: 2\n Function start=0x00000017 end=0x0000001a (size=0x00000003) count: 2\n   Export start=0x0000001c end=0x00000051 (size=0x00000035) count: 2\n     Code start=0x00000053 end=0x0000007e (size=0x0000002b) count: 2\n",
      "details": "\nfloat_exprs.56.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nType[2]:\n - type[0] (f32) -> f32\n - type[1] (f64) -> f64\nFunction[2]:\n - func[0] sig=0 <f32.no_fold_recip_recip>\n - func[1] sig=1 <f64.no_fold_recip_recip>\nExport[2]:\n - func[0] <f32.no_fold_recip_recip> -> \"f32.no_fold_recip_recip\"\n - func[1] <f64.no_fold_recip_recip> -> \"f64.no_fold_recip_recip\"\nCode[2]:\n - func[0] size=16 <f32.no_fold_recip_recip>\n - func[1] size=24 <f64.no_fold_recip_recip>\n",
      "disassemble": "\nfloat_exprs.56.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n000055 func[0] <f32.no_fold_recip_recip>:\n 000056: 43 00 00 80 3f             | f32.const 0x1p+0\n 00005b: 43 00 00 80 3f             | f32.const 0x1p+0\n 000060: 20 00                      | local.get 0\n 000062: 95                         | f32.div\n 000063: 95                         | f32.div\n 000064: 0b                         | end\n000066 func[1] <f64.no_fold_recip_recip>:\n 000067: 44 00 00 00 00 00 00 f0 3f | f64.const 0x1p+0\n 000070: 44 00 00 00 00 00 00 f0 3f | f64.const 0x1p+0\n 000079: 20 00                      | local.get 0\n 00007b: a3                         | f64.div\n 00007c: a3                         | f64.div\n 00007d: 0b                         | end\n"
    },
    "float_exprs.57.wasm": {
      "header": "\nfloat_exprs.57.wasm:\tfile format wasm 0x1\n\nSections:\n\n     Type start=0x0000000a end=0x00000017 (size=0x0000000d) count: 2\n Function start=0x00000019 end=0x0000001c (size=0x00000003) count: 2\n   Export start=0x0000001e end=0x00000059 (size=0x0000003b) count: 2\n     Code start=0x0000005b end=0x00000078 (size=0x0000001d) count: 2\n",
      "details": "\nfloat_exprs.57.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nType[2]:\n - type[0] (f32, f32) -> f32\n - type[1] (f64, f64) -> f64\nFunction[2]:\n - func[0] sig=0 <f32.no_algebraic_factoring>\n - func[1] sig=1 <f64.no_algebraic_factoring>\nExport[2]:\n - func[0] <f32.no_algebraic_factoring> -> \"f32.no_algebraic_factoring\"\n - func[1] <f64.no_algebraic_factoring> -> \"f64.no_algebraic_factoring\"\nCode[2]:\n - func[0] size=13 <f32.no_algebraic_factoring>\n - func[1] size=13 <f64.no_algebraic_factoring>\n",
      "disassemble": "\nfloat_exprs.57.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n00005d func[0] <f32.no_algebraic_factoring>:\n 00005e: 20 00                      | local.get 0\n 000060: 20 01                      | local.get 1\n 000062: 92                         | f32.add\n 000063: 20 00                      | local.get 0\n 000065: 20 01                      | local.get 1\n 000067: 93                         | f32.sub\n 000068: 94                         | f32.mul\n 000069: 0b                         | end\n00006b func[1] <f64.no_algebraic_factoring>:\n 00006c: 20 00                      | local.get 0\n 00006e: 20 01                      | local.get 1\n 000070: a0                         | f64.add\n 000071: 20 00                      | local.get 0\n 000073: 20 01                      | local.get 1\n 000075: a1                         | f64.sub\n 000076: a2                         | f64.mul\n 000077: 0b                         | end\n"
    },
    "float_exprs.58.wasm": {
      "header": "\nfloat_exprs.58.wasm:\tfile format wasm 0x1\n\nSections:\n\n     Type start=0x0000000a end=0x00000017 (size=0x0000000d) count: 2\n Function start=0x00000019 end=0x0000001c (size=0x00000003) count: 2\n   Export start=0x0000001e end=0x00000059 (size=0x0000003b) count: 2\n     Code start=0x0000005b end=0x00000078 (size=0x0000001d) count: 2\n",
      "details": "\nfloat_exprs.58.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nType[2]:\n - type[0] (f32, f32) -> f32\n - type[1] (f64, f64) -> f64\nFunction[2]:\n - func[0] sig=0 <f32.no_algebraic_factoring>\n - func[1] sig=1 <f64.no_algebraic_factoring>\nExport[2]:\n - func[0] <f32.no_algebraic_factoring> -> \"f32.no_algebraic_factoring\"\n - func[1] <f64.no_algebraic_factoring> -> \"f64.no_algebraic_factoring\"\nCode[2]:\n - func[0] size=13 <f32.no_algebraic_factoring>\n - func[1] size=13 <f64.no_algebraic_factoring>\n",
      "disassemble": "\nfloat_exprs.58.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n00005d func[0] <f32.no_algebraic_factoring>:\n 00005e: 20 00                      | local.get 0\n 000060: 20 00                      | local.get 0\n 000062: 94                         | f32.mul\n 000063: 20 01                      | local.get 1\n 000065: 20 01                      | local.get 1\n 000067: 94                         | f32.mul\n 000068: 93                         | f32.sub\n 000069: 0b                         | end\n00006b func[1] <f64.no_algebraic_factoring>:\n 00006c: 20 00                      | local.get 0\n 00006e: 20 00                      | local.get 0\n 000070: a2                         | f64.mul\n 000071: 20 01                      | local.get 1\n 000073: 20 01                      | local.get 1\n 000075: a2                         | f64.mul\n 000076: a1                         | f64.sub\n 000077: 0b                         | end\n"
    },
    "float_exprs.59.wasm": {
      "header": "\nfloat_exprs.59.wasm:\tfile format wasm 0x1\n\nSections:\n\n     Type start=0x0000000a end=0x00000016 (size=0x0000000c) count: 2\n Function start=0x00000018 end=0x0000001b (size=0x00000003) count: 2\n   Memory start=0x0000001d end=0x00000021 (size=0x00000004) count: 1\n   Export start=0x00000023 end=0x00000043 (size=0x00000020) count: 2\n     Code start=0x00000045 end=0x000000b3 (size=0x0000006e) count: 2\n     Data start=0x000000b5 end=0x000000eb (size=0x00000036) count: 1\n",
      "details": "\nfloat_exprs.59.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nType[2]:\n - type[0] (i32, i32, i32) -> nil\n - type[1] (i32) -> f32\nFunction[2]:\n - func[0] sig=0 <f32.simple_x4_sum>\n - func[1] sig=1 <f32.load>\nMemory[1]:\n - memory[0] pages: initial=1 max=1\nExport[2]:\n - func[0] <f32.simple_x4_sum> -> \"f32.simple_x4_sum\"\n - func[1] <f32.load> -> \"f32.load\"\nCode[2]:\n - func[0] size=100 <f32.simple_x4_sum>\n - func[1] size=7 <f32.load>\nData[1]:\n - segment[0] memory=0 size=48 - init i32=0\n  - 0000000: 0100 0000 0100 0080 0100 0000 0100 0080  ................\n  - 0000010: 0100 0000 0100 0000 0000 0000 0000 0000  ................\n  - 0000020: 0000 0000 0000 0000 0000 0000 0000 0000  ................\n",
      "disassemble": "\nfloat_exprs.59.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n000047 func[0] <f32.simple_x4_sum>:\n 000048: 08 7d                      | local[3..10] type=f32\n 00004a: 20 00                      | local.get 0\n 00004c: 2a 02 00                   | f32.load 2 0\n 00004f: 21 03                      | local.set 3\n 000051: 20 00                      | local.get 0\n 000053: 2a 02 04                   | f32.load 2 4\n 000056: 21 04                      | local.set 4\n 000058: 20 00                      | local.get 0\n 00005a: 2a 02 08                   | f32.load 2 8\n 00005d: 21 05                      | local.set 5\n 00005f: 20 00                      | local.get 0\n 000061: 2a 02 0c                   | f32.load 2 12\n 000064: 21 06                      | local.set 6\n 000066: 20 01                      | local.get 1\n 000068: 2a 02 00                   | f32.load 2 0\n 00006b: 21 07                      | local.set 7\n 00006d: 20 01                      | local.get 1\n 00006f: 2a 02 04                   | f32.load 2 4\n 000072: 21 08                      | local.set 8\n 000074: 20 01                      | local.get 1\n 000076: 2a 02 08                   | f32.load 2 8\n 000079: 21 09                      | local.set 9\n 00007b: 20 01                      | local.get 1\n 00007d: 2a 02 0c                   | f32.load 2 12\n 000080: 21 0a                      | local.set 10\n 000082: 20 02                      | local.get 2\n 000084: 20 03                      | local.get 3\n 000086: 20 07                      | local.get 7\n 000088: 92                         | f32.add\n 000089: 38 02 00                   | f32.store 2 0\n 00008c: 20 02                      | local.get 2\n 00008e: 20 04                      | local.get 4\n 000090: 20 08                      | local.get 8\n 000092: 92                         | f32.add\n 000093: 38 02 04                   | f32.store 2 4\n 000096: 20 02                      | local.get 2\n 000098: 20 05                      | local.get 5\n 00009a: 20 09                      | local.get 9\n 00009c: 92                         | f32.add\n 00009d: 38 02 08                   | f32.store 2 8\n 0000a0: 20 02                      | local.get 2\n 0000a2: 20 06                      | local.get 6\n 0000a4: 20 0a                      | local.get 10\n 0000a6: 92                         | f32.add\n 0000a7: 38 02 0c                   | f32.store 2 12\n 0000aa: 0b                         | end\n0000ac func[1] <f32.load>:\n 0000ad: 20 00                      | local.get 0\n 0000af: 2a 02 00                   | f32.load 2 0\n 0000b2: 0b                         | end\n"
    },
    "float_exprs.60.wasm": {
      "header": "\nfloat_exprs.60.wasm:\tfile format wasm 0x1\n\nSections:\n\n     Type start=0x0000000a end=0x00000016 (size=0x0000000c) count: 2\n Function start=0x00000018 end=0x0000001b (size=0x00000003) count: 2\n   Memory start=0x0000001d end=0x00000021 (size=0x00000004) count: 1\n   Export start=0x00000023 end=0x00000043 (size=0x00000020) count: 2\n     Code start=0x00000045 end=0x000000b3 (size=0x0000006e) count: 2\n     Data start=0x000000b5 end=0x0000011b (size=0x00000066) count: 1\n",
      "details": "\nfloat_exprs.60.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nType[2]:\n - type[0] (i32, i32, i32) -> nil\n - type[1] (i32) -> f64\nFunction[2]:\n - func[0] sig=0 <f64.simple_x4_sum>\n - func[1] sig=1 <f64.load>\nMemory[1]:\n - memory[0] pages: initial=1 max=1\nExport[2]:\n - func[0] <f64.simple_x4_sum> -> \"f64.simple_x4_sum\"\n - func[1] <f64.load> -> \"f64.load\"\nCode[2]:\n - func[0] size=100 <f64.simple_x4_sum>\n - func[1] size=7 <f64.load>\nData[1]:\n - segment[0] memory=0 size=96 - init i32=0\n  - 0000000: 0100 0000 0000 0000 0100 0000 0000 0080  ................\n  - 0000010: 0100 0000 0000 0000 0100 0000 0000 0080  ................\n  - 0000020: 0100 0000 0000 0000 0100 0000 0000 0000  ................\n  - 0000030: 0000 0000 0000 0000 0000 0000 0000 0000  ................\n  - 0000040: 0000 0000 0000 0000 0000 0000 0000 0000  ................\n  - 0000050: 0000 0000 0000 0000 0000 0000 0000 0000  ................\n",
      "disassemble": "\nfloat_exprs.60.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n000047 func[0] <f64.simple_x4_sum>:\n 000048: 08 7c                      | local[3..10] type=f64\n 00004a: 20 00                      | local.get 0\n 00004c: 2b 03 00                   | f64.load 3 0\n 00004f: 21 03                      | local.set 3\n 000051: 20 00                      | local.get 0\n 000053: 2b 03 08                   | f64.load 3 8\n 000056: 21 04                      | local.set 4\n 000058: 20 00                      | local.get 0\n 00005a: 2b 03 10                   | f64.load 3 16\n 00005d: 21 05                      | local.set 5\n 00005f: 20 00                      | local.get 0\n 000061: 2b 03 18                   | f64.load 3 24\n 000064: 21 06                      | local.set 6\n 000066: 20 01                      | local.get 1\n 000068: 2b 03 00                   | f64.load 3 0\n 00006b: 21 07                      | local.set 7\n 00006d: 20 01                      | local.get 1\n 00006f: 2b 03 08                   | f64.load 3 8\n 000072: 21 08                      | local.set 8\n 000074: 20 01                      | local.get 1\n 000076: 2b 03 10                   | f64.load 3 16\n 000079: 21 09                      | local.set 9\n 00007b: 20 01                      | local.get 1\n 00007d: 2b 03 18                   | f64.load 3 24\n 000080: 21 0a                      | local.set 10\n 000082: 20 02                      | local.get 2\n 000084: 20 03                      | local.get 3\n 000086: 20 07                      | local.get 7\n 000088: a0                         | f64.add\n 000089: 39 03 00                   | f64.store 3 0\n 00008c: 20 02                      | local.get 2\n 00008e: 20 04                      | local.get 4\n 000090: 20 08                      | local.get 8\n 000092: a0                         | f64.add\n 000093: 39 03 08                   | f64.store 3 8\n 000096: 20 02                      | local.get 2\n 000098: 20 05                      | local.get 5\n 00009a: 20 09                      | local.get 9\n 00009c: a0                         | f64.add\n 00009d: 39 03 10                   | f64.store 3 16\n 0000a0: 20 02                      | local.get 2\n 0000a2: 20 06                      | local.get 6\n 0000a4: 20 0a                      | local.get 10\n 0000a6: a0                         | f64.add\n 0000a7: 39 03 18                   | f64.store 3 24\n 0000aa: 0b                         | end\n0000ac func[1] <f64.load>:\n 0000ad: 20 00                      | local.get 0\n 0000af: 2b 03 00                   | f64.load 3 0\n 0000b2: 0b                         | end\n"
    },
    "float_exprs.61.wasm": {
      "header": "\nfloat_exprs.61.wasm:\tfile format wasm 0x1\n\nSections:\n\n     Type start=0x0000000a end=0x00000011 (size=0x00000007) count: 1\n Function start=0x00000013 end=0x00000016 (size=0x00000003) count: 2\n   Memory start=0x00000018 end=0x0000001c (size=0x00000004) count: 1\n   Export start=0x0000001e end=0x0000003f (size=0x00000021) count: 2\n     Code start=0x00000041 end=0x000000a3 (size=0x00000062) count: 2\n     Data start=0x000000a6 end=0x000004ad (size=0x00000407) count: 1\n",
      "details": "\nfloat_exprs.61.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nType[1]:\n - type[0] (i32, i32) -> f32\nFunction[2]:\n - func[0] sig=0 <f32.kahan_sum>\n - func[1] sig=0 <f32.plain_sum>\nMemory[1]:\n - memory[0] pages: initial=1 max=1\nExport[2]:\n - func[0] <f32.kahan_sum> -> \"f32.kahan_sum\"\n - func[1] <f32.plain_sum> -> \"f32.plain_sum\"\nCode[2]:\n - func[0] size=55 <f32.kahan_sum>\n - func[1] size=40 <f32.plain_sum>\nData[1]:\n - segment[0] memory=0 size=1024 - init i32=0\n  - 0000000: c4c5 5724 a584 c80b 6db8 4b2e f276 171c  ..W$....m.K..v..\n  - 0000010: ca4a 561e 1b6e 7122 5d17 1e6e bfcd 145c  .JV..nq\"]..n...\\\n  - 0000020: c721 5551 399c 1fb2 51f0 a393 d7c1 2cae  .!UQ9...Q.....,.\n  - 0000030: 7ea8 283a 0121 f40a 5893 f842 779f 8339  ~.(:.!..X..Bw..9\n  - 0000040: 6a5f baf7 0ad8 516a 34ca adc6 340e d826  j_....Qj4...4..&\n  - 0000050: dc4c 331c ed29 90a8 780f d1ce 7631 2383  .L3..)..x...v1#.\n  - 0000060: b835 e8f2 44b0 d3a1 fcbb 32e1 b0ba 6944  .5..D.....2...iD\n  - 0000070: 09d6 d97d ff2e c05a 3614 3314 3ea9 fa87  ...}...Z6.3.>...\n  - 0000080: 6d8b bcce 9da7 fdc4 e985 3fdd d7e1 18a6  m.........?.....\n  - 0000090: 5026 726e 3f73 0ff8 1293 2334 6176 1248  P&rn?s....#4av.H\n  - 00000a0: c09b 0593 ebac 86de 943e 55e8 8ce8 dde4  .........>U.....\n  - 00000b0: fc95 47be 5603 2120 4ce6 bf7b f67f d5ba  ..G.V.! L..{....\n  - 00000c0: 731c c114 8fc4 2796 b3bd 33ff 7841 5fc0  s.....'...3.xA_.\n  - 00000d0: 5ace f667 6e73 9a17 6670 03f8 ce27 a352  Z..gns..fp...'.R\n  - 00000e0: b29f 3bbf fbae edd3 5af8 3757 f0f5 6eef  ..;.....Z.7W..n.\n  - 00000f0: b14d 703d 54a7 019a 8508 4891 f59d 0c60  .Mp=T.....H....`\n  - 0000100: 875b d954 1e51 6d88 8e08 8ca5 713a 5608  .[.T.Qm.....q:V.\n  - 0000110: 6746 8f8f 132a 2cec 2c1f b462 2b6f 410a  gF...*,.,..b+oA.\n  - 0000120: c465 42a2 316b 2c7d 3ebb 75ac 8697 30d9  .eB.1k,}>.u...0.\n  - 0000130: 48cd 9a1f 56c4 c6e4 12c0 9dfb ee02 8cce  H...V...........\n  - 0000140: 1cf2 1ea1 7823 dbc4 1e49 03d3 71cc 0850  ....x#...I..q..P\n  - 0000150: c5d8 5ced d5b5 65ac b5c9 21d2 c929 76de  ..\\...e...!..)v.\n  - 0000160: f030 1a5b 3cf2 3bdb 3a39 823a 1608 6fa8  .0.[<.;.:9.:..o.\n  - 0000170: f1be 6969 9971 a605 d314 932a 16f2 2f11  ..ii.q.....*../.\n  - 0000180: c77e 20bb 9144 eef8 e401 53c0 b97f f0bf  .~ ..D....S.....\n  - 0000190: f003 9c6d b1df a244 016d 6b71 2b5c b321  ...m...D.mkq+\\.!\n  - 00001a0: 1946 5e8f db91 d37c 786b b712 008f ebbd  .F^....|xk......\n  - 00001b0: 8af5 d42e c4c1 1edf 7363 5947 4903 0ab7  ........scYGI...\n  - 00001c0: cf24 cf9c 0e44 7a9e 14fb 42bf 9d39 309e  .$...Dz...B..90.\n  - 00001d0: a0ab 2fd1 ae9e 6a83 43e3 557d 85bf 638a  ../...j.C.U}..c.\n  - 00001e0: f896 101f fe6d e722 1be1 6946 8a44 c8c8  .....m.\"..iF.D..\n  - 00001f0: f90c 2b19 07a5 023e f230 109a 858a 5fef  ..+....>.0...._.\n  - 0000200: 8145 a077 b103 1073 4bae 989d 47bf 9a2d  .E.w...sK...G..-\n  - 0000210: 3ad5 0f03 66e3 3d53 d940 ce1f 6f32 2f21  :...f.=S.@..o2/!\n  - 0000220: 2b23 216c 62d4 a73e a8ce 2831 2d00 3d67  +#!lb..>..(1-.=g\n  - 0000230: 5eaf a0cf 2ed2 b96b 84eb 6908 3c62 36be  ^......k..i.<b6.\n  - 0000240: 12fd 367f 883e adbc 0bc0 41c4 50b6 e350  ..6..>....A.P..P\n  - 0000250: 31e8 cee2 9665 559c 1646 e6b0 2d3a e881  1....eU..F..-:..\n  - 0000260: 05b0 bf34 f7bc 101c fbcc 3cf1 8597 429f  ...4......<...B.\n  - 0000270: eb14 8d3c bfd7 1788 499d 8b2b b23a 83d1  ...<....I..+.:..\n  - 0000280: 4f04 9ea1 0fad 089d 54af d182 c3ec 322f  O.......T.....2/\n  - 0000290: 028f 0521 2da2 b7e4 f46f 2e81 2b0b 9cfc  ...!-....o..+...\n  - 00002a0: cbfe 7402 f9db f4f3 ea00 a8ec d199 7426  ..t...........t&\n  - 00002b0: ddd6 34d5 25b1 46dd 9caa 71f5 60b0 88c8  ..4.%.F...q.`...\n  - 00002c0: e00b 595a 254f 2966 f9e3 2efe e9da e518  ..YZ%O)f........\n  - 00002d0: 4f27 62f4 cea4 2195 74c7 5764 279a 4cfd  O'b...!.t.Wd'.L.\n  - 00002e0: 547d 61ce c3ac 8746 9cfa ff09 ca79 9767  T}a....F.....y.g\n  - 00002f0: 2474 cad4 2183 2625 1912 3764 19e5 65e0  $t..!.&%..7d..e.\n  - 0000300: 7475 8edd c8ef 74c7 d821 2b79 0451 4665  tu....t..!+y.QFe\n  - 0000310: 6003 5dfa d8f4 65a4 9e5d 23da d78a 9280  `.]...e..]#.....\n  - 0000320: a4de 783c f157 426d cdc9 2fd5 a49e ab40  ..x<.WBm../....@\n  - 0000330: f4cb 1bd7 a3ca fceb a701 b29a 694e 469b  ............iNF.\n  - 0000340: 184e dd79 a7aa a652 391e ef30 cc9b bd5b  .N.y...R9..0...[\n  - 0000350: ee4c 216d 3000 72b0 465f 08cf c5b9 e03e  .L!m0.r.F_.....>\n  - 0000360: c2b3 0cdc 8e64 de19 4279 cf43 ea43 5d8e  .....d..By.C.C].\n  - 0000370: 88f7 ab15 dc3f c867 20db b864 b147 1fde  .....?.g ..d.G..\n  - 0000380: f2cb 3f59 9fd8 4690 dcae 2f22 f9e2 3189  ..?Y..F.../\"..1.\n  - 0000390: d99c 1c4c d3a9 4a57 849c 9fea 2c3c ae3c  ...L..JW....,<.<\n  - 00003a0: c31e 8be5 4e17 0125 db34 465f 15ea 050c  ....N..%.4F_....\n  - 00003b0: 7cd9 458c 19d0 738a 9616 dd44 f905 b75b  |.E...s....D...[\n  - 00003c0: 71b0 e621 365f 7589 9173 75ab 7dae d373  q..!6_u..su.}..s\n  - 00003d0: ec37 c6ea 5575 efea ab8b 7b11 dc6d 1ab2  .7..Uu....{..m..\n  - 00003e0: 6ac4 25cf aae3 9f49 4989 cb37 9b0a a701  j.%....II..7....\n  - 00003f0: 6070 dcb7 c883 e142 f5be ad62 94ad 8da1  `p.....B...b....\n",
      "disassemble": "\nfloat_exprs.61.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n000043 func[0] <f32.kahan_sum>:\n 000044: 03 7d                      | local[2..4] type=f32\n 000046: 02 40                      | block\n 000048: 03 40                      |   loop\n 00004a: 20 03                      |     local.get 3\n 00004c: 20 00                      |     local.get 0\n 00004e: 2a 02 00                   |     f32.load 2 0\n 000051: 20 04                      |     local.get 4\n 000053: 93                         |     f32.sub\n 000054: 22 04                      |     local.tee 4\n 000056: 92                         |     f32.add\n 000057: 22 02                      |     local.tee 2\n 000059: 20 03                      |     local.get 3\n 00005b: 93                         |     f32.sub\n 00005c: 20 04                      |     local.get 4\n 00005e: 93                         |     f32.sub\n 00005f: 21 04                      |     local.set 4\n 000061: 20 00                      |     local.get 0\n 000063: 41 04                      |     i32.const 4\n 000065: 6a                         |     i32.add\n 000066: 21 00                      |     local.set 0\n 000068: 20 02                      |     local.get 2\n 00006a: 21 03                      |     local.set 3\n 00006c: 20 01                      |     local.get 1\n 00006e: 41 7f                      |     i32.const 4294967295\n 000070: 6a                         |     i32.add\n 000071: 22 01                      |     local.tee 1\n 000073: 0d 00                      |     br_if 0\n 000075: 0b                         |   end\n 000076: 0b                         | end\n 000077: 20 02                      | local.get 2\n 000079: 0b                         | end\n00007b func[1] <f32.plain_sum>:\n 00007c: 01 7d                      | local[2] type=f32\n 00007e: 02 40                      | block\n 000080: 03 40                      |   loop\n 000082: 20 02                      |     local.get 2\n 000084: 20 00                      |     local.get 0\n 000086: 2a 02 00                   |     f32.load 2 0\n 000089: 92                         |     f32.add\n 00008a: 21 02                      |     local.set 2\n 00008c: 20 00                      |     local.get 0\n 00008e: 41 04                      |     i32.const 4\n 000090: 6a                         |     i32.add\n 000091: 21 00                      |     local.set 0\n 000093: 20 01                      |     local.get 1\n 000095: 41 7f                      |     i32.const 4294967295\n 000097: 6a                         |     i32.add\n 000098: 21 01                      |     local.set 1\n 00009a: 20 01                      |     local.get 1\n 00009c: 0d 00                      |     br_if 0\n 00009e: 0b                         |   end\n 00009f: 0b                         | end\n 0000a0: 20 02                      | local.get 2\n 0000a2: 0b                         | end\n"
    },
    "float_exprs.62.wasm": {
      "header": "\nfloat_exprs.62.wasm:\tfile format wasm 0x1\n\nSections:\n\n     Type start=0x0000000a end=0x00000011 (size=0x00000007) count: 1\n Function start=0x00000013 end=0x00000016 (size=0x00000003) count: 2\n   Memory start=0x00000018 end=0x0000001c (size=0x00000004) count: 1\n   Export start=0x0000001e end=0x0000003f (size=0x00000021) count: 2\n     Code start=0x00000041 end=0x000000a3 (size=0x00000062) count: 2\n     Data start=0x000000a6 end=0x000008ad (size=0x00000807) count: 1\n",
      "details": "\nfloat_exprs.62.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nType[1]:\n - type[0] (i32, i32) -> f64\nFunction[2]:\n - func[0] sig=0 <f64.kahan_sum>\n - func[1] sig=0 <f64.plain_sum>\nMemory[1]:\n - memory[0] pages: initial=1 max=1\nExport[2]:\n - func[0] <f64.kahan_sum> -> \"f64.kahan_sum\"\n - func[1] <f64.plain_sum> -> \"f64.plain_sum\"\nCode[2]:\n - func[0] size=55 <f64.kahan_sum>\n - func[1] size=40 <f64.plain_sum>\nData[1]:\n - segment[0] memory=0 size=2048 - init i32=0\n  - 0000000: 1305 8442 5da2 2cc6 43db 55a9 cdda 55e3  ...B].,.C.U...U.\n  - 0000010: 73fc 58d6 bad5 00fd 8335 4288 8b13 5d38  s.X......5B...]8\n  - 0000020: 4a47 0d72 73a1 1aef c445 1757 d8c9 46e0  JG.rs....E.W..F.\n  - 0000030: 8d6c e137 70c8 835b 555e 5a2d 731e 56c8  .l.7p..[U^Z-s.V.\n  - 0000040: e16d 6914 780a 8a5a 643a 09c7 a887 c5f0  .mi.x..Zd:......\n  - 0000050: d35d e603 fc93 be26 cad6 a991 60bd b0ed  .].....&....`...\n  - 0000060: aef7 307e 923a 6fa7 598e aa7d bf67 582a  ..0~.:o.Y..}.gX*\n  - 0000070: 54f8 4efe ed35 58a6 51bf 42e5 4b66 2724  T.N..5X.Q.B.Kf'$\n  - 0000080: 6d7f 422d 2892 18ec 08ae e755 dab1 a665  m.B-(......U...e\n  - 0000090: a572 5047 1bb8 a954 d7a6 065b 0f42 5883  .rPG...T...[.BX.\n  - 00000a0: 8a17 82c6 1043 a0c0 2e6d bc5a 8553 727f  .....C...m.Z.Sr.\n  - 00000b0: ad44 bc30 3c55 b224 9a74 3a9e e1d8 0f70  .D.0<U.$.t:....p\n  - 00000c0: fca9 3acd 934b ece3 7edd 5d27 cdf8 a09d  ..:..K..~.]'....\n  - 00000d0: 1c11 c057 2efd c813 32cc 3a1a 7da3 4155  ...W....2.:.}.AU\n  - 00000e0: edc3 8249 2a04 1eef 73b9 2e2e e35f f4df  ...I*...s...._..\n  - 00000f0: e6b2 330c 393f 6f44 6a03 c142 b9fa b1c8  ..3.9?oDj..B....\n  - 0000100: eda5 5899 7fed b472 9e79 ebfb 4382 45aa  ..X....r.y..C.E.\n  - 0000110: bb95 d2ff 289e f6a1 ad95 d655 950d 6f60  ....(......U..o`\n  - 0000120: 11c7 783e 49f2 7e48 f4a2 71d0 138e b3de  ..x>I.~H..q.....\n  - 0000130: 9952 e345 74ea 760e 1b2a c8ee 1401 c450  .R.Et.v..*.....P\n  - 0000140: 5b36 3cef ba72 a2a6 08f8 7b36 9df9 ef0b  [6<..r....{6....\n  - 0000150: c756 2d5c f09d 5dde fcb8 ad0f 640e 9715  .V-\\..].....d...\n  - 0000160: 3226 c231 e605 1eef cb17 1b6d 150b 745d  2&.1.......m..t]\n  - 0000170: d32e f86b 86b4 ba73 5253 99a9 7620 45c9  ...k...sRS..v E.\n  - 0000180: 4080 6b14 eda1 fa80 46e6 26d2 e698 c457  @.k.....F.&....W\n  - 0000190: bfc4 1ca4 907a 3694 14ba 1589 6ee6 9c37  .....z6.....n..7\n  - 00001a0: 8cf4 de12 225d a179 5067 0d3d 7ae9 d4aa  ....\"].yPg.=z...\n  - 00001b0: 2e7f 2a7a 303d ea5d 1248 fee1 18cd a457  ..*z0=.].H.....W\n  - 00001c0: a287 3eb6 9a8b dbda 9d78 9ccf 8db1 4f90  ..>......x....O.\n  - 00001d0: b434 e09d f6ca fe4c 3b78 6d0a 5c18 9f61  .4.....L;xm.\\..a\n  - 00001e0: b9dd b4e0 0f76 e01b 690d 5e58 7370 5e0e  .....v..i.^Xsp^.\n  - 00001f0: 2da1 7dff 20eb 9134 92ac 3872 2a1f 8e71  -.}. ..4..8r*..q\n  - 0000200: 2e6a f1af c727 70d9 c457 f7d2 3c1d b8f0  .j...'p..W..<...\n  - 0000210: f064 cfdc aebe a3cc 3e22 7d4e 6921 6317  .d......>\"}Ni!c.\n  - 0000220: ed03 0254 9a0f 504e 135a 35a1 22a4 df86  ...T..PN.Z5.\"...\n  - 0000230: c274 7916 b869 69a0 525d 1164 bd5b 93fc  .ty..ii.R].d.[..\n  - 0000240: 69a0 f413 d081 51dd fa0c 15c3 7ac9 627a  i.....Q.....z.bz\n  - 0000250: a91d c9e6 5ab3 5b97 023c 6422 123c 2290  ....Z.[..<d\".<\".\n  - 0000260: 642d 3054 4cb4 a122 0957 225e 8e38 2b02  d-0TL..\".W\"^.8+.\n  - 0000270: a8ae f6be 0d2b f203 adfa 1001 7177 2a30  .....+......qw*0\n  - 0000280: 0295 f600 3ed0 c48d 3419 5021 0abc 50da  ....>...4.P!..P.\n  - 0000290: 3c30 d63a 3194 8d3a feef 1457 9d4b 9300  <0.:1..:...W.K..\n  - 00002a0: 9624 0c6f fdbc 2376 026c eb52 7280 117e  .$.o..#v.l.Rr..~\n  - 00002b0: 803a 1312 381d 3849 9540 278a 447b e8dc  .:..8.8I.@'.D{..\n  - 00002c0: 6d8c 8c8e 3cb5 b318 0ef6 081a 8441 35ff  m...<........A5.\n  - 00002d0: 8bb8 9340 eae1 511d 89a5 8d42 6829 ea2f  ...@..Q....Bh)./\n  - 00002e0: c17a 52eb 905d 4dd6 80e3 d775 48ce edd3  .zR..]M....uH...\n  - 00002f0: 011c 8d5b a594 0d78 cff1 0613 2f98 02a4  ...[...x..../...\n  - 0000300: 6d2e 6cf2 d574 2989 4cf9 03f5 c718 ad7a  m.l..t).L......z\n  - 0000310: f068 f85c d659 876e d63f 06be 8620 e341  .h.\\.Y.n.?... .A\n  - 0000320: 9122 f36e 8bf0 681c 57a7 fcb0 7c9e 990b  .\".n..h.W...|...\n  - 0000330: 961a 895f e60d 7c08 51a0 a267 9a47 0093  ..._..|.Q..g.G..\n  - 0000340: 6bf9 28f0 68db 62f1 e065 2c53 33e0 a7ca  k.(.h.b..e,S3...\n  - 0000350: 1142 30f6 af01 c165 3d32 016f ab2e bed3  .B0....e=2.o....\n  - 0000360: 8bbe 14c3 ffec fbf0 f9c5 0c05 6f01 096b  ............o..k\n  - 0000370: e334 310c 1f66 a642 bc1a 8749 1616 8cb0  .41..f.B...I....\n  - 0000380: 900d 348c 0ae1 095e 10a4 6b56 ccf0 c9bb  ..4....^..kV....\n  - 0000390: dcb8 5cce f6cc 8d75 7eb3 0788 042f b45e  ..\\....u~..../.^\n  - 00003a0: c9e3 4a23 7319 626c 9a03 7644 869c 60fc  ..J#s.bl..vD..`.\n  - 00003b0: db72 8f27 a0dd b3c5 daff f9ec 6ab1 7bd3  .r.'........j.{.\n  - 00003c0: cf50 37c9 7a78 0ce4 3ab6 f5e6 f498 6e42  .P7.zx..:.....nB\n  - 00003d0: 7d35 738b 45c0 5697 cd6d cecf ad31 b3c3  }5s.E.V..m...1..\n  - 00003e0: 54fa efd5 c0f4 6a5f 54e7 493e 330a 3038  T.....j_T.I>3.08\n  - 00003f0: fdd9 05ff a53f 5746 14b5 9117 ca6b 9823  .....?WF.....k.#\n  - 0000400: 7a65 b36c 02b4 cc79 5d58 d8b3 d594 aef4  ze.l...y]X......\n  - 0000410: 6d75 65f7 92bf 7e47 4c3c eedb acf1 325d  mue...~GL<....2]\n  - 0000420: fb6f 411c 34c8 834f c258 01be 053e 6616  .oA.4..O.X...>f.\n  - 0000430: a604 6d5d 4f86 0927 8225 12cd 3acd ce6b  ..m]O..'.%..:..k\n  - 0000440: bcca ac28 9bee 6a25 869e 4570 c6d2 bd3b  ...(..j%..Ep...;\n  - 0000450: 7d42 e527 afc7 1df4 81c8 b376 8aa8 36a3  }B.'.......v..6.\n  - 0000460: ae2a e618 e136 22ad f625 72b0 398b 019a  .*...6\"..%r.9...\n  - 0000470: 227b 84c3 2d5f 72a4 98ac 1570 e7d4 18e2  \"{..-_r....p....\n  - 0000480: 7dd2 307c 3308 cdca c422 8588 7581 c64a  }.0|3....\"..u..J\n  - 0000490: 7458 8de0 e8ac c5ab 755a f428 12f0 1845  tX......uZ.(...E\n  - 00004a0: 52f2 97b2 9341 6f8d 7fdb 70fb a35d 1fa7  R....Ao...p..]..\n  - 00004b0: 8d98 202b 229f 3a01 b58b 1bd2 cb14 030e  .. +\".:.........\n  - 00004c0: 1414 d219 5a1f ce5e cd81 7915 01ca de73  ....Z..^..y....s\n  - 00004d0: 748c 5620 9f77 2d25 16f6 6151 1da4 8e9b  t.V .w-%..aQ....\n  - 00004e0: 98a5 c6ec a845 5782 5978 0d90 b4df 51b0  .....EW.Yx....Q.\n  - 00004f0: c382 94cc b353 0915 6d96 6c3a 4047 b74a  .....S..m.l:@G.J\n  - 0000500: 7a05 2fa1 1e8c 9da0 2088 fb52 b79f f3f3  z./..... ..R....\n  - 0000510: bb5f e78a 61a7 21b1 acfa 09aa a46c bc24  ._..a.!......l.$\n  - 0000520: 80ba 2ae9 65ff 70ff ccfa 6587 76f3 c515  ..*.e.p...e.v...\n  - 0000530: cecb e842 3100 0c91 57d9 e09d 3554 24ad  ...B1...W...5T$.\n  - 0000540: a4d8 f908 6763 c8cf 81dd 90a2 d7c4 074a  ....gc.........J\n  - 0000550: e610 6f67 e727 d423 5918 f2a8 9d5f d894  ..og.'.#Y...._..\n  - 0000560: 30aa 5486 4f87 9d82 b526 caa6 96bf cf55  0.T.O....&.....U\n  - 0000570: f99d 3701 1948 43c5 946c f374 9758 4c3c  ..7..HC..l.t.XL<\n  - 0000580: 9d08 e804 c258 3076 e1a0 f8ea e9c5 aecf  .....X0v........\n  - 0000590: 789e a90c acb3 4442 e0bc 5d1b 9c49 584a  x.....DB..]..IXJ\n  - 00005a0: 1c19 49c1 3aea f5eb 3b81 a94b 700c cc9e  ..I.:...;..Kp...\n  - 00005b0: 1ad3 2fb7 522f 203b eb64 511d a02d b23e  ../.R/ ;.dQ..-.>\n  - 00005c0: be13 8548 9232 2edb 5ca1 e78c 4591 3501  ...H.2..\\...E.5.\n  - 00005d0: 0a93 c2eb 09ce f3d2 2224 d08c cc1d 9d38  ........\"$.....8\n  - 00005e0: c84d e382 cc64 1506 2de7 012f abbb b504  .M...d..-../....\n  - 00005f0: 4c92 1c7a d63f e85f 3115 0cdc e431 b4c4  L..z.?._1....1..\n  - 0000600: 253e 2aaa 009e c8e5 217a 7f29 f1c0 af1d  %>*.....!z.)....\n  - 0000610: 5ee8 6339 adf8 7e6c c8c5 7fc2 a897 270a  ^.c9..~l......'.\n  - 0000620: d9f4 216a ea03 09fb f796 3b83 795f 7c4b  ..!j......;.y_|K\n  - 0000630: 309f 5635 deb4 73d4 95f0 14c3 742f 0da3  0.V5..s.....t/..\n  - 0000640: 1d4e 8d31 24b3 1a84 8562 5a7b 3c14 3917  .N.1$....bZ{<.9.\n  - 0000650: e66d eb37 c200 585b 0be3 3c8a 62e1 f835  .m.7..X[..<.b..5\n  - 0000660: 4b56 e287 608b bea7 3891 7754 a95a 2425  KV..`...8.wT.Z$%\n  - 0000670: 909f a542 77f3 5c39 dfff 7407 76a1 cd1f  ...Bw.\\9..t.v...\n  - 0000680: 620b 8181 68af 05c1 c07f 26ee c091 a36a  b...h.....&....j\n  - 0000690: 7d29 6145 27e5 5788 dc0d 9704 1a33 a944  })aE'.W......3.D\n  - 00006a0: 8ada 0210 453f 8e55 a676 8c4d e3f1 8983  ....E?.U.v.M....\n  - 00006b0: c8d0 f89b 5077 9f47 df4c 9c66 0daa 18b8  ....Pw.G.L.f....\n  - 00006c0: 5f4f c401 cedc 84ac 469e 69e1 7645 6b61  _O......F.i.vEka\n  - 00006d0: 89e4 5d94 bb11 839f 78d8 0ad2 f57e 5d43  ..].....x....~]C\n  - 00006e0: eabc 10f1 3ac9 e264 fb53 65d0 c7b4 a7fb  ....:..d.Se.....\n  - 00006f0: d405 5325 d0cd 2988 0056 2524 7d5d b4f3  ..S%..)..V%$}]..\n  - 0000700: 419f e9b5 f7ae 642c e3c9 6dd5 843a 7212  A.....d,..m..:r.\n  - 0000710: b87a d91b 09e8 38da 264f 04ce 0371 6e8a  .z....8.&O...qn.\n  - 0000720: 447b 5c81 599c d2e4 c3ba 59a6 e528 a78f  D{\\.Y.....Y..(..\n  - 0000730: 9ae4 d54e b9ca 7fcb 75b8 2b43 3eb3 1546  ...N....u.+C>..F\n  - 0000740: b1a5 bc9d 9e38 15f1 bd1b 21aa f182 0095  .....8....!.....\n  - 0000750: fca7 7747 39a7 3343 92d7 5240 4b06 818a  ..wG9.3C..R@K...\n  - 0000760: a0bd f16b 9984 425b e23b c55e 125c 284d  ...k..B[.;.^.\\(M\n  - 0000770: b60e 4ec8 5ce8 018a c5e7 e49d 42ee 5d9c  ..N.\\.......B.].\n  - 0000780: c4eb eb68 0927 9295 9a11 5473 c412 80fb  ...h.'....Ts....\n  - 0000790: 7dfe c508 607f 3641 e010 bad6 2b6c f1b4  }...`.6A....+l..\n  - 00007a0: 17fe 2634 e34b f8a8 e391 be4f 2afc da81  ..&4.K.....O*...\n  - 00007b0: b8e7 fed5 2650 47f3 1a65 3281 e005 b84f  ....&PG..e2....O\n  - 00007c0: 3231 2600 4a53 97c2 c30e 2ea1 2654 ab05  21&.JS......&T..\n  - 00007d0: 8e56 2f7d af22 8468 a58b 97f6 a4fd a8cc  .V/}.\".h........\n  - 00007e0: 7541 9686 fd27 3d29 868d 7f4c d48e 7341  uA...'=)...L..sA\n  - 00007f0: f41e e2dd 5827 97ce 9c94 cf7a 042f dced  ....X'.....z./..\n",
      "disassemble": "\nfloat_exprs.62.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n000043 func[0] <f64.kahan_sum>:\n 000044: 03 7c                      | local[2..4] type=f64\n 000046: 02 40                      | block\n 000048: 03 40                      |   loop\n 00004a: 20 03                      |     local.get 3\n 00004c: 20 00                      |     local.get 0\n 00004e: 2b 03 00                   |     f64.load 3 0\n 000051: 20 04                      |     local.get 4\n 000053: a1                         |     f64.sub\n 000054: 22 04                      |     local.tee 4\n 000056: a0                         |     f64.add\n 000057: 22 02                      |     local.tee 2\n 000059: 20 03                      |     local.get 3\n 00005b: a1                         |     f64.sub\n 00005c: 20 04                      |     local.get 4\n 00005e: a1                         |     f64.sub\n 00005f: 21 04                      |     local.set 4\n 000061: 20 00                      |     local.get 0\n 000063: 41 08                      |     i32.const 8\n 000065: 6a                         |     i32.add\n 000066: 21 00                      |     local.set 0\n 000068: 20 02                      |     local.get 2\n 00006a: 21 03                      |     local.set 3\n 00006c: 20 01                      |     local.get 1\n 00006e: 41 7f                      |     i32.const 4294967295\n 000070: 6a                         |     i32.add\n 000071: 22 01                      |     local.tee 1\n 000073: 0d 00                      |     br_if 0\n 000075: 0b                         |   end\n 000076: 0b                         | end\n 000077: 20 02                      | local.get 2\n 000079: 0b                         | end\n00007b func[1] <f64.plain_sum>:\n 00007c: 01 7c                      | local[2] type=f64\n 00007e: 02 40                      | block\n 000080: 03 40                      |   loop\n 000082: 20 02                      |     local.get 2\n 000084: 20 00                      |     local.get 0\n 000086: 2b 03 00                   |     f64.load 3 0\n 000089: a0                         |     f64.add\n 00008a: 21 02                      |     local.set 2\n 00008c: 20 00                      |     local.get 0\n 00008e: 41 08                      |     i32.const 8\n 000090: 6a                         |     i32.add\n 000091: 21 00                      |     local.set 0\n 000093: 20 01                      |     local.get 1\n 000095: 41 7f                      |     i32.const 4294967295\n 000097: 6a                         |     i32.add\n 000098: 21 01                      |     local.set 1\n 00009a: 20 01                      |     local.get 1\n 00009c: 0d 00                      |     br_if 0\n 00009e: 0b                         |   end\n 00009f: 0b                         | end\n 0000a0: 20 02                      | local.get 2\n 0000a2: 0b                         | end\n"
    },
    "float_exprs.63.wasm": {
      "header": "\nfloat_exprs.63.wasm:\tfile format wasm 0x1\n\nSections:\n\n     Type start=0x0000000a end=0x00000017 (size=0x0000000d) count: 2\n Function start=0x00000019 end=0x0000001c (size=0x00000003) count: 2\n   Export start=0x0000001e end=0x0000004b (size=0x0000002d) count: 2\n     Code start=0x0000004d end=0x00000060 (size=0x00000013) count: 2\n",
      "details": "\nfloat_exprs.63.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nType[2]:\n - type[0] (f32, f32) -> f32\n - type[1] (f64, f64) -> f64\nFunction[2]:\n - func[0] sig=0 <f32.no_fold_neg_sub>\n - func[1] sig=1 <f64.no_fold_neg_sub>\nExport[2]:\n - func[0] <f32.no_fold_neg_sub> -> \"f32.no_fold_neg_sub\"\n - func[1] <f64.no_fold_neg_sub> -> \"f64.no_fold_neg_sub\"\nCode[2]:\n - func[0] size=8 <f32.no_fold_neg_sub>\n - func[1] size=8 <f64.no_fold_neg_sub>\n",
      "disassemble": "\nfloat_exprs.63.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n00004f func[0] <f32.no_fold_neg_sub>:\n 000050: 20 00                      | local.get 0\n 000052: 20 01                      | local.get 1\n 000054: 93                         | f32.sub\n 000055: 8c                         | f32.neg\n 000056: 0b                         | end\n000058 func[1] <f64.no_fold_neg_sub>:\n 000059: 20 00                      | local.get 0\n 00005b: 20 01                      | local.get 1\n 00005d: a1                         | f64.sub\n 00005e: 9a                         | f64.neg\n 00005f: 0b                         | end\n"
    },
    "float_exprs.64.wasm": {
      "header": "\nfloat_exprs.64.wasm:\tfile format wasm 0x1\n\nSections:\n\n     Type start=0x0000000a end=0x00000017 (size=0x0000000d) count: 2\n Function start=0x00000019 end=0x0000001c (size=0x00000003) count: 2\n   Export start=0x0000001e end=0x0000004b (size=0x0000002d) count: 2\n     Code start=0x0000004d end=0x00000060 (size=0x00000013) count: 2\n",
      "details": "\nfloat_exprs.64.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nType[2]:\n - type[0] (f32, f32) -> f32\n - type[1] (f64, f64) -> f64\nFunction[2]:\n - func[0] sig=0 <f32.no_fold_neg_add>\n - func[1] sig=1 <f64.no_fold_neg_add>\nExport[2]:\n - func[0] <f32.no_fold_neg_add> -> \"f32.no_fold_neg_add\"\n - func[1] <f64.no_fold_neg_add> -> \"f64.no_fold_neg_add\"\nCode[2]:\n - func[0] size=8 <f32.no_fold_neg_add>\n - func[1] size=8 <f64.no_fold_neg_add>\n",
      "disassemble": "\nfloat_exprs.64.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n00004f func[0] <f32.no_fold_neg_add>:\n 000050: 20 00                      | local.get 0\n 000052: 20 01                      | local.get 1\n 000054: 92                         | f32.add\n 000055: 8c                         | f32.neg\n 000056: 0b                         | end\n000058 func[1] <f64.no_fold_neg_add>:\n 000059: 20 00                      | local.get 0\n 00005b: 20 01                      | local.get 1\n 00005d: a0                         | f64.add\n 00005e: 9a                         | f64.neg\n 00005f: 0b                         | end\n"
    },
    "float_exprs.65.wasm": {
      "header": "\nfloat_exprs.65.wasm:\tfile format wasm 0x1\n\nSections:\n\n     Type start=0x0000000a end=0x00000017 (size=0x0000000d) count: 2\n Function start=0x00000019 end=0x0000001c (size=0x00000003) count: 2\n   Export start=0x0000001e end=0x00000053 (size=0x00000035) count: 2\n     Code start=0x00000055 end=0x0000006a (size=0x00000015) count: 2\n",
      "details": "\nfloat_exprs.65.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nType[2]:\n - type[0] (f32, f32) -> f32\n - type[1] (f64, f64) -> f64\nFunction[2]:\n - func[0] sig=0 <f32.no_fold_add_neg_neg>\n - func[1] sig=1 <f64.no_fold_add_neg_neg>\nExport[2]:\n - func[0] <f32.no_fold_add_neg_neg> -> \"f32.no_fold_add_neg_neg\"\n - func[1] <f64.no_fold_add_neg_neg> -> \"f64.no_fold_add_neg_neg\"\nCode[2]:\n - func[0] size=9 <f32.no_fold_add_neg_neg>\n - func[1] size=9 <f64.no_fold_add_neg_neg>\n",
      "disassemble": "\nfloat_exprs.65.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n000057 func[0] <f32.no_fold_add_neg_neg>:\n 000058: 20 00                      | local.get 0\n 00005a: 8c                         | f32.neg\n 00005b: 20 01                      | local.get 1\n 00005d: 8c                         | f32.neg\n 00005e: 92                         | f32.add\n 00005f: 0b                         | end\n000061 func[1] <f64.no_fold_add_neg_neg>:\n 000062: 20 00                      | local.get 0\n 000064: 9a                         | f64.neg\n 000065: 20 01                      | local.get 1\n 000067: 9a                         | f64.neg\n 000068: a0                         | f64.add\n 000069: 0b                         | end\n"
    },
    "float_exprs.66.wasm": {
      "header": "\nfloat_exprs.66.wasm:\tfile format wasm 0x1\n\nSections:\n\n     Type start=0x0000000a end=0x00000015 (size=0x0000000b) count: 2\n Function start=0x00000017 end=0x0000001a (size=0x00000003) count: 2\n   Export start=0x0000001c end=0x00000049 (size=0x0000002d) count: 2\n     Code start=0x0000004b end=0x0000005e (size=0x00000013) count: 2\n",
      "details": "\nfloat_exprs.66.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nType[2]:\n - type[0] (f32) -> f32\n - type[1] (f64) -> f64\nFunction[2]:\n - func[0] sig=0 <f32.no_fold_add_neg>\n - func[1] sig=1 <f64.no_fold_add_neg>\nExport[2]:\n - func[0] <f32.no_fold_add_neg> -> \"f32.no_fold_add_neg\"\n - func[1] <f64.no_fold_add_neg> -> \"f64.no_fold_add_neg\"\nCode[2]:\n - func[0] size=8 <f32.no_fold_add_neg>\n - func[1] size=8 <f64.no_fold_add_neg>\n",
      "disassemble": "\nfloat_exprs.66.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n00004d func[0] <f32.no_fold_add_neg>:\n 00004e: 20 00                      | local.get 0\n 000050: 8c                         | f32.neg\n 000051: 20 00                      | local.get 0\n 000053: 92                         | f32.add\n 000054: 0b                         | end\n000056 func[1] <f64.no_fold_add_neg>:\n 000057: 20 00                      | local.get 0\n 000059: 9a                         | f64.neg\n 00005a: 20 00                      | local.get 0\n 00005c: a0                         | f64.add\n 00005d: 0b                         | end\n"
    },
    "float_exprs.67.wasm": {
      "header": "\nfloat_exprs.67.wasm:\tfile format wasm 0x1\n\nSections:\n\n     Type start=0x0000000a end=0x00000015 (size=0x0000000b) count: 2\n Function start=0x00000017 end=0x0000001a (size=0x00000003) count: 2\n   Export start=0x0000001c end=0x0000004f (size=0x00000033) count: 2\n     Code start=0x00000051 end=0x0000007a (size=0x00000029) count: 2\n",
      "details": "\nfloat_exprs.67.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nType[2]:\n - type[0] (f32) -> f32\n - type[1] (f64) -> f64\nFunction[2]:\n - func[0] sig=0 <f32.no_fold_6x_via_add>\n - func[1] sig=1 <f64.no_fold_6x_via_add>\nExport[2]:\n - func[0] <f32.no_fold_6x_via_add> -> \"f32.no_fold_6x_via_add\"\n - func[1] <f64.no_fold_6x_via_add> -> \"f64.no_fold_6x_via_add\"\nCode[2]:\n - func[0] size=19 <f32.no_fold_6x_via_add>\n - func[1] size=19 <f64.no_fold_6x_via_add>\n",
      "disassemble": "\nfloat_exprs.67.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n000053 func[0] <f32.no_fold_6x_via_add>:\n 000054: 20 00                      | local.get 0\n 000056: 20 00                      | local.get 0\n 000058: 92                         | f32.add\n 000059: 20 00                      | local.get 0\n 00005b: 92                         | f32.add\n 00005c: 20 00                      | local.get 0\n 00005e: 92                         | f32.add\n 00005f: 20 00                      | local.get 0\n 000061: 92                         | f32.add\n 000062: 20 00                      | local.get 0\n 000064: 92                         | f32.add\n 000065: 0b                         | end\n000067 func[1] <f64.no_fold_6x_via_add>:\n 000068: 20 00                      | local.get 0\n 00006a: 20 00                      | local.get 0\n 00006c: a0                         | f64.add\n 00006d: 20 00                      | local.get 0\n 00006f: a0                         | f64.add\n 000070: 20 00                      | local.get 0\n 000072: a0                         | f64.add\n 000073: 20 00                      | local.get 0\n 000075: a0                         | f64.add\n 000076: 20 00                      | local.get 0\n 000078: a0                         | f64.add\n 000079: 0b                         | end\n"
    },
    "float_exprs.68.wasm": {
      "header": "\nfloat_exprs.68.wasm:\tfile format wasm 0x1\n\nSections:\n\n     Type start=0x0000000a end=0x00000019 (size=0x0000000f) count: 2\n Function start=0x0000001b end=0x0000001e (size=0x00000003) count: 2\n   Export start=0x00000020 end=0x0000004d (size=0x0000002d) count: 2\n     Code start=0x0000004f end=0x00000066 (size=0x00000017) count: 2\n",
      "details": "\nfloat_exprs.68.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nType[2]:\n - type[0] (f32, f32, f32) -> f32\n - type[1] (f64, f64, f64) -> f64\nFunction[2]:\n - func[0] sig=0 <f32.no_fold_div_div>\n - func[1] sig=1 <f64.no_fold_div_div>\nExport[2]:\n - func[0] <f32.no_fold_div_div> -> \"f32.no_fold_div_div\"\n - func[1] <f64.no_fold_div_div> -> \"f64.no_fold_div_div\"\nCode[2]:\n - func[0] size=10 <f32.no_fold_div_div>\n - func[1] size=10 <f64.no_fold_div_div>\n",
      "disassemble": "\nfloat_exprs.68.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n000051 func[0] <f32.no_fold_div_div>:\n 000052: 20 00                      | local.get 0\n 000054: 20 01                      | local.get 1\n 000056: 95                         | f32.div\n 000057: 20 02                      | local.get 2\n 000059: 95                         | f32.div\n 00005a: 0b                         | end\n00005c func[1] <f64.no_fold_div_div>:\n 00005d: 20 00                      | local.get 0\n 00005f: 20 01                      | local.get 1\n 000061: a3                         | f64.div\n 000062: 20 02                      | local.get 2\n 000064: a3                         | f64.div\n 000065: 0b                         | end\n"
    },
    "float_exprs.69.wasm": {
      "header": "\nfloat_exprs.69.wasm:\tfile format wasm 0x1\n\nSections:\n\n     Type start=0x0000000a end=0x0000001b (size=0x00000011) count: 2\n Function start=0x0000001d end=0x00000020 (size=0x00000003) count: 2\n   Export start=0x00000022 end=0x00000051 (size=0x0000002f) count: 2\n     Code start=0x00000053 end=0x00000070 (size=0x0000001d) count: 2\n",
      "details": "\nfloat_exprs.69.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nType[2]:\n - type[0] (f32, f32, f32, f32) -> f32\n - type[1] (f64, f64, f64, f64) -> f64\nFunction[2]:\n - func[0] sig=0 <f32.no_fold_mul_divs>\n - func[1] sig=1 <f64.no_fold_mul_divs>\nExport[2]:\n - func[0] <f32.no_fold_mul_divs> -> \"f32.no_fold_mul_divs\"\n - func[1] <f64.no_fold_mul_divs> -> \"f64.no_fold_mul_divs\"\nCode[2]:\n - func[0] size=13 <f32.no_fold_mul_divs>\n - func[1] size=13 <f64.no_fold_mul_divs>\n",
      "disassemble": "\nfloat_exprs.69.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n000055 func[0] <f32.no_fold_mul_divs>:\n 000056: 20 00                      | local.get 0\n 000058: 20 01                      | local.get 1\n 00005a: 95                         | f32.div\n 00005b: 20 02                      | local.get 2\n 00005d: 20 03                      | local.get 3\n 00005f: 95                         | f32.div\n 000060: 94                         | f32.mul\n 000061: 0b                         | end\n000063 func[1] <f64.no_fold_mul_divs>:\n 000064: 20 00                      | local.get 0\n 000066: 20 01                      | local.get 1\n 000068: a3                         | f64.div\n 000069: 20 02                      | local.get 2\n 00006b: 20 03                      | local.get 3\n 00006d: a3                         | f64.div\n 00006e: a2                         | f64.mul\n 00006f: 0b                         | end\n"
    },
    "float_exprs.70.wasm": {
      "header": "\nfloat_exprs.70.wasm:\tfile format wasm 0x1\n\nSections:\n\n     Type start=0x0000000a end=0x00000019 (size=0x0000000f) count: 2\n Function start=0x0000001b end=0x0000001e (size=0x00000003) count: 2\n   Export start=0x00000020 end=0x0000004f (size=0x0000002f) count: 2\n     Code start=0x00000051 end=0x0000006e (size=0x0000001d) count: 2\n",
      "details": "\nfloat_exprs.70.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nType[2]:\n - type[0] (f32, f32, f32) -> f32\n - type[1] (f64, f64, f64) -> f64\nFunction[2]:\n - func[0] sig=0 <f32.no_fold_add_divs>\n - func[1] sig=1 <f64.no_fold_add_divs>\nExport[2]:\n - func[0] <f32.no_fold_add_divs> -> \"f32.no_fold_add_divs\"\n - func[1] <f64.no_fold_add_divs> -> \"f64.no_fold_add_divs\"\nCode[2]:\n - func[0] size=13 <f32.no_fold_add_divs>\n - func[1] size=13 <f64.no_fold_add_divs>\n",
      "disassemble": "\nfloat_exprs.70.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n000053 func[0] <f32.no_fold_add_divs>:\n 000054: 20 00                      | local.get 0\n 000056: 20 02                      | local.get 2\n 000058: 95                         | f32.div\n 000059: 20 01                      | local.get 1\n 00005b: 20 02                      | local.get 2\n 00005d: 95                         | f32.div\n 00005e: 92                         | f32.add\n 00005f: 0b                         | end\n000061 func[1] <f64.no_fold_add_divs>:\n 000062: 20 00                      | local.get 0\n 000064: 20 02                      | local.get 2\n 000066: a3                         | f64.div\n 000067: 20 01                      | local.get 1\n 000069: 20 02                      | local.get 2\n 00006b: a3                         | f64.div\n 00006c: a0                         | f64.add\n 00006d: 0b                         | end\n"
    },
    "float_exprs.71.wasm": {
      "header": "\nfloat_exprs.71.wasm:\tfile format wasm 0x1\n\nSections:\n\n     Type start=0x0000000a end=0x00000015 (size=0x0000000b) count: 2\n Function start=0x00000017 end=0x0000001a (size=0x00000003) count: 2\n   Export start=0x0000001c end=0x00000051 (size=0x00000035) count: 2\n     Code start=0x00000053 end=0x00000066 (size=0x00000013) count: 2\n",
      "details": "\nfloat_exprs.71.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nType[2]:\n - type[0] (f32) -> f32\n - type[1] (f64) -> f64\nFunction[2]:\n - func[0] sig=0 <f32.no_fold_sqrt_square>\n - func[1] sig=1 <f64.no_fold_sqrt_square>\nExport[2]:\n - func[0] <f32.no_fold_sqrt_square> -> \"f32.no_fold_sqrt_square\"\n - func[1] <f64.no_fold_sqrt_square> -> \"f64.no_fold_sqrt_square\"\nCode[2]:\n - func[0] size=8 <f32.no_fold_sqrt_square>\n - func[1] size=8 <f64.no_fold_sqrt_square>\n",
      "disassemble": "\nfloat_exprs.71.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n000055 func[0] <f32.no_fold_sqrt_square>:\n 000056: 20 00                      | local.get 0\n 000058: 20 00                      | local.get 0\n 00005a: 94                         | f32.mul\n 00005b: 91                         | f32.sqrt\n 00005c: 0b                         | end\n00005e func[1] <f64.no_fold_sqrt_square>:\n 00005f: 20 00                      | local.get 0\n 000061: 20 00                      | local.get 0\n 000063: a2                         | f64.mul\n 000064: 9f                         | f64.sqrt\n 000065: 0b                         | end\n"
    },
    "float_exprs.72.wasm": {
      "header": "\nfloat_exprs.72.wasm:\tfile format wasm 0x1\n\nSections:\n\n     Type start=0x0000000a end=0x00000017 (size=0x0000000d) count: 2\n Function start=0x00000019 end=0x0000001c (size=0x00000003) count: 2\n   Export start=0x0000001e end=0x0000004f (size=0x00000031) count: 2\n     Code start=0x00000051 end=0x00000066 (size=0x00000015) count: 2\n",
      "details": "\nfloat_exprs.72.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nType[2]:\n - type[0] (f32, f32) -> f32\n - type[1] (f64, f64) -> f64\nFunction[2]:\n - func[0] sig=0 <f32.no_fold_mul_sqrts>\n - func[1] sig=1 <f64.no_fold_mul_sqrts>\nExport[2]:\n - func[0] <f32.no_fold_mul_sqrts> -> \"f32.no_fold_mul_sqrts\"\n - func[1] <f64.no_fold_mul_sqrts> -> \"f64.no_fold_mul_sqrts\"\nCode[2]:\n - func[0] size=9 <f32.no_fold_mul_sqrts>\n - func[1] size=9 <f64.no_fold_mul_sqrts>\n",
      "disassemble": "\nfloat_exprs.72.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n000053 func[0] <f32.no_fold_mul_sqrts>:\n 000054: 20 00                      | local.get 0\n 000056: 91                         | f32.sqrt\n 000057: 20 01                      | local.get 1\n 000059: 91                         | f32.sqrt\n 00005a: 94                         | f32.mul\n 00005b: 0b                         | end\n00005d func[1] <f64.no_fold_mul_sqrts>:\n 00005e: 20 00                      | local.get 0\n 000060: 9f                         | f64.sqrt\n 000061: 20 01                      | local.get 1\n 000063: 9f                         | f64.sqrt\n 000064: a2                         | f64.mul\n 000065: 0b                         | end\n"
    },
    "float_exprs.73.wasm": {
      "header": "\nfloat_exprs.73.wasm:\tfile format wasm 0x1\n\nSections:\n\n     Type start=0x0000000a end=0x00000017 (size=0x0000000d) count: 2\n Function start=0x00000019 end=0x0000001c (size=0x00000003) count: 2\n   Export start=0x0000001e end=0x0000004f (size=0x00000031) count: 2\n     Code start=0x00000051 end=0x00000066 (size=0x00000015) count: 2\n",
      "details": "\nfloat_exprs.73.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nType[2]:\n - type[0] (f32, f32) -> f32\n - type[1] (f64, f64) -> f64\nFunction[2]:\n - func[0] sig=0 <f32.no_fold_div_sqrts>\n - func[1] sig=1 <f64.no_fold_div_sqrts>\nExport[2]:\n - func[0] <f32.no_fold_div_sqrts> -> \"f32.no_fold_div_sqrts\"\n - func[1] <f64.no_fold_div_sqrts> -> \"f64.no_fold_div_sqrts\"\nCode[2]:\n - func[0] size=9 <f32.no_fold_div_sqrts>\n - func[1] size=9 <f64.no_fold_div_sqrts>\n",
      "disassemble": "\nfloat_exprs.73.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n000053 func[0] <f32.no_fold_div_sqrts>:\n 000054: 20 00                      | local.get 0\n 000056: 91                         | f32.sqrt\n 000057: 20 01                      | local.get 1\n 000059: 91                         | f32.sqrt\n 00005a: 95                         | f32.div\n 00005b: 0b                         | end\n00005d func[1] <f64.no_fold_div_sqrts>:\n 00005e: 20 00                      | local.get 0\n 000060: 9f                         | f64.sqrt\n 000061: 20 01                      | local.get 1\n 000063: 9f                         | f64.sqrt\n 000064: a3                         | f64.div\n 000065: 0b                         | end\n"
    },
    "float_exprs.74.wasm": {
      "header": "\nfloat_exprs.74.wasm:\tfile format wasm 0x1\n\nSections:\n\n     Type start=0x0000000a end=0x00000017 (size=0x0000000d) count: 2\n Function start=0x00000019 end=0x0000001c (size=0x00000003) count: 2\n   Export start=0x0000001e end=0x00000055 (size=0x00000037) count: 2\n     Code start=0x00000057 end=0x00000070 (size=0x00000019) count: 2\n",
      "details": "\nfloat_exprs.74.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nType[2]:\n - type[0] (f32, f32) -> f32\n - type[1] (f64, f64) -> f64\nFunction[2]:\n - func[0] sig=0 <f32.no_fold_mul_sqrt_div>\n - func[1] sig=1 <f64.no_fold_mul_sqrt_div>\nExport[2]:\n - func[0] <f32.no_fold_mul_sqrt_div> -> \"f32.no_fold_mul_sqrt_div\"\n - func[1] <f64.no_fold_mul_sqrt_div> -> \"f64.no_fold_mul_sqrt_div\"\nCode[2]:\n - func[0] size=11 <f32.no_fold_mul_sqrt_div>\n - func[1] size=11 <f64.no_fold_mul_sqrt_div>\n",
      "disassemble": "\nfloat_exprs.74.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n000059 func[0] <f32.no_fold_mul_sqrt_div>:\n 00005a: 20 00                      | local.get 0\n 00005c: 20 01                      | local.get 1\n 00005e: 91                         | f32.sqrt\n 00005f: 94                         | f32.mul\n 000060: 20 01                      | local.get 1\n 000062: 95                         | f32.div\n 000063: 0b                         | end\n000065 func[1] <f64.no_fold_mul_sqrt_div>:\n 000066: 20 00                      | local.get 0\n 000068: 20 01                      | local.get 1\n 00006a: 9f                         | f64.sqrt\n 00006b: a2                         | f64.mul\n 00006c: 20 01                      | local.get 1\n 00006e: a3                         | f64.div\n 00006f: 0b                         | end\n"
    },
    "float_exprs.75.wasm": {
      "header": "\nfloat_exprs.75.wasm:\tfile format wasm 0x1\n\nSections:\n\n     Type start=0x0000000a end=0x00000019 (size=0x0000000f) count: 2\n Function start=0x0000001b end=0x0000001e (size=0x00000003) count: 2\n   Export start=0x00000020 end=0x0000006d (size=0x0000004d) count: 2\n     Code start=0x0000006f end=0x00000086 (size=0x00000017) count: 2\n",
      "details": "\nfloat_exprs.75.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nType[2]:\n - type[0] (f32, f32, f32) -> f32\n - type[1] (f64, f64, f64) -> f64\nFunction[2]:\n - func[0] sig=0 <f32.no_flush_intermediate_subnormal>\n - func[1] sig=1 <f64.no_flush_intermediate_subnormal>\nExport[2]:\n - func[0] <f32.no_flush_intermediate_subnormal> -> \"f32.no_flush_intermediate_subnormal\"\n - func[1] <f64.no_flush_intermediate_subnormal> -> \"f64.no_flush_intermediate_subnormal\"\nCode[2]:\n - func[0] size=10 <f32.no_flush_intermediate_subnormal>\n - func[1] size=10 <f64.no_flush_intermediate_subnormal>\n",
      "disassemble": "\nfloat_exprs.75.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n000071 func[0] <f32.no_flush_intermediate_subnormal>:\n 000072: 20 00                      | local.get 0\n 000074: 20 01                      | local.get 1\n 000076: 94                         | f32.mul\n 000077: 20 02                      | local.get 2\n 000079: 94                         | f32.mul\n 00007a: 0b                         | end\n00007c func[1] <f64.no_flush_intermediate_subnormal>:\n 00007d: 20 00                      | local.get 0\n 00007f: 20 01                      | local.get 1\n 000081: a2                         | f64.mul\n 000082: 20 02                      | local.get 2\n 000084: a2                         | f64.mul\n 000085: 0b                         | end\n"
    },
    "float_exprs.76.wasm": {
      "header": "\nfloat_exprs.76.wasm:\tfile format wasm 0x1\n\nSections:\n\n     Type start=0x0000000a end=0x0000001d (size=0x00000013) count: 3\n Function start=0x0000001f end=0x00000027 (size=0x00000008) count: 7\n   Export start=0x00000029 end=0x000000a8 (size=0x0000007f) count: 7\n     Code start=0x000000aa end=0x000000f6 (size=0x0000004c) count: 7\n",
      "details": "\nfloat_exprs.76.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nType[3]:\n - type[0] (f32, f32) -> i32\n - type[1] (f64, f64) -> i32\n - type[2] (f64, f32) -> f32\nFunction[7]:\n - func[0] sig=0 <f32.recoding_eq>\n - func[1] sig=0 <f32.recoding_le>\n - func[2] sig=0 <f32.recoding_lt>\n - func[3] sig=1 <f64.recoding_eq>\n - func[4] sig=1 <f64.recoding_le>\n - func[5] sig=1 <f64.recoding_lt>\n - func[6] sig=2 <recoding_demote>\nExport[7]:\n - func[0] <f32.recoding_eq> -> \"f32.recoding_eq\"\n - func[1] <f32.recoding_le> -> \"f32.recoding_le\"\n - func[2] <f32.recoding_lt> -> \"f32.recoding_lt\"\n - func[3] <f64.recoding_eq> -> \"f64.recoding_eq\"\n - func[4] <f64.recoding_le> -> \"f64.recoding_le\"\n - func[5] <f64.recoding_lt> -> \"f64.recoding_lt\"\n - func[6] <recoding_demote> -> \"recoding_demote\"\nCode[7]:\n - func[0] size=10 <f32.recoding_eq>\n - func[1] size=10 <f32.recoding_le>\n - func[2] size=10 <f32.recoding_lt>\n - func[3] size=10 <f64.recoding_eq>\n - func[4] size=10 <f64.recoding_le>\n - func[5] size=10 <f64.recoding_lt>\n - func[6] size=8 <recoding_demote>\n",
      "disassemble": "\nfloat_exprs.76.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n0000ac func[0] <f32.recoding_eq>:\n 0000ad: 20 00                      | local.get 0\n 0000af: 20 01                      | local.get 1\n 0000b1: 94                         | f32.mul\n 0000b2: 20 00                      | local.get 0\n 0000b4: 5b                         | f32.eq\n 0000b5: 0b                         | end\n0000b7 func[1] <f32.recoding_le>:\n 0000b8: 20 00                      | local.get 0\n 0000ba: 20 01                      | local.get 1\n 0000bc: 94                         | f32.mul\n 0000bd: 20 00                      | local.get 0\n 0000bf: 5f                         | f32.le\n 0000c0: 0b                         | end\n0000c2 func[2] <f32.recoding_lt>:\n 0000c3: 20 00                      | local.get 0\n 0000c5: 20 01                      | local.get 1\n 0000c7: 94                         | f32.mul\n 0000c8: 20 00                      | local.get 0\n 0000ca: 5d                         | f32.lt\n 0000cb: 0b                         | end\n0000cd func[3] <f64.recoding_eq>:\n 0000ce: 20 00                      | local.get 0\n 0000d0: 20 01                      | local.get 1\n 0000d2: a2                         | f64.mul\n 0000d3: 20 00                      | local.get 0\n 0000d5: 61                         | f64.eq\n 0000d6: 0b                         | end\n0000d8 func[4] <f64.recoding_le>:\n 0000d9: 20 00                      | local.get 0\n 0000db: 20 01                      | local.get 1\n 0000dd: a2                         | f64.mul\n 0000de: 20 00                      | local.get 0\n 0000e0: 65                         | f64.le\n 0000e1: 0b                         | end\n0000e3 func[5] <f64.recoding_lt>:\n 0000e4: 20 00                      | local.get 0\n 0000e6: 20 01                      | local.get 1\n 0000e8: a2                         | f64.mul\n 0000e9: 20 00                      | local.get 0\n 0000eb: 63                         | f64.lt\n 0000ec: 0b                         | end\n0000ee func[6] <recoding_demote>:\n 0000ef: 20 00                      | local.get 0\n 0000f1: b6                         | f32.demote_f64\n 0000f2: 20 01                      | local.get 1\n 0000f4: 94                         | f32.mul\n 0000f5: 0b                         | end\n"
    },
    "float_exprs.77.wasm": {
      "header": "\nfloat_exprs.77.wasm:\tfile format wasm 0x1\n\nSections:\n\n     Type start=0x0000000a end=0x00000019 (size=0x0000000f) count: 2\n Function start=0x0000001b end=0x0000001e (size=0x00000003) count: 2\n   Export start=0x00000020 end=0x00000061 (size=0x00000041) count: 2\n     Code start=0x00000063 end=0x0000007a (size=0x00000017) count: 2\n",
      "details": "\nfloat_exprs.77.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nType[2]:\n - type[0] (f32, f32, f32) -> i32\n - type[1] (f64, f64, f64) -> i32\nFunction[2]:\n - func[0] sig=0 <f32.no_extended_precision_div>\n - func[1] sig=1 <f64.no_extended_precision_div>\nExport[2]:\n - func[0] <f32.no_extended_precision_div> -> \"f32.no_extended_precision_div\"\n - func[1] <f64.no_extended_precision_div> -> \"f64.no_extended_precision_div\"\nCode[2]:\n - func[0] size=10 <f32.no_extended_precision_div>\n - func[1] size=10 <f64.no_extended_precision_div>\n",
      "disassemble": "\nfloat_exprs.77.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n000065 func[0] <f32.no_extended_precision_div>:\n 000066: 20 00                      | local.get 0\n 000068: 20 01                      | local.get 1\n 00006a: 95                         | f32.div\n 00006b: 20 02                      | local.get 2\n 00006d: 5b                         | f32.eq\n 00006e: 0b                         | end\n000070 func[1] <f64.no_extended_precision_div>:\n 000071: 20 00                      | local.get 0\n 000073: 20 01                      | local.get 1\n 000075: a3                         | f64.div\n 000076: 20 02                      | local.get 2\n 000078: 61                         | f64.eq\n 000079: 0b                         | end\n"
    },
    "float_exprs.78.wasm": {
      "header": "\nfloat_exprs.78.wasm:\tfile format wasm 0x1\n\nSections:\n\n     Type start=0x0000000a end=0x00000015 (size=0x0000000b) count: 2\n Function start=0x00000017 end=0x0000001a (size=0x00000003) count: 2\n   Export start=0x0000001c end=0x00000051 (size=0x00000035) count: 2\n     Code start=0x00000053 end=0x00000084 (size=0x00000031) count: 2\n",
      "details": "\nfloat_exprs.78.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nType[2]:\n - type[0] (f32) -> f32\n - type[1] (f64) -> f64\nFunction[2]:\n - func[0] sig=0 <f32.no_distribute_exact>\n - func[1] sig=1 <f64.no_distribute_exact>\nExport[2]:\n - func[0] <f32.no_distribute_exact> -> \"f32.no_distribute_exact\"\n - func[1] <f64.no_distribute_exact> -> \"f64.no_distribute_exact\"\nCode[2]:\n - func[0] size=19 <f32.no_distribute_exact>\n - func[1] size=27 <f64.no_distribute_exact>\n",
      "disassemble": "\nfloat_exprs.78.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n000055 func[0] <f32.no_distribute_exact>:\n 000056: 43 00 00 00 c1             | f32.const -0x1p+3\n 00005b: 20 00                      | local.get 0\n 00005d: 94                         | f32.mul\n 00005e: 43 00 00 00 41             | f32.const 0x1p+3\n 000063: 20 00                      | local.get 0\n 000065: 94                         | f32.mul\n 000066: 92                         | f32.add\n 000067: 0b                         | end\n000069 func[1] <f64.no_distribute_exact>:\n 00006a: 44 00 00 00 00 00 00 20 c0 | f64.const -0x1p+3\n 000073: 20 00                      | local.get 0\n 000075: a2                         | f64.mul\n 000076: 44 00 00 00 00 00 00 20 40 | f64.const 0x1p+3\n 00007f: 20 00                      | local.get 0\n 000081: a2                         | f64.mul\n 000082: a0                         | f64.add\n 000083: 0b                         | end\n"
    },
    "float_exprs.79.wasm": {
      "header": "\nfloat_exprs.79.wasm:\tfile format wasm 0x1\n\nSections:\n\n     Type start=0x0000000a end=0x00000033 (size=0x00000029) count: 6\n Function start=0x00000035 end=0x00000040 (size=0x0000000b) count: 10\n   Export start=0x00000043 end=0x000000f8 (size=0x000000b5) count: 10\n     Code start=0x000000fb end=0x00000184 (size=0x00000089) count: 10\n",
      "details": "\nfloat_exprs.79.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nType[6]:\n - type[0] (f32) -> f32\n - type[1] (f32, f32, f32, f32) -> f32\n - type[2] (f32, f32, f32) -> f32\n - type[3] (f64) -> f64\n - type[4] (f64, f64, f64, f64) -> f64\n - type[5] (f64, f64, f64) -> f64\nFunction[10]:\n - func[0] sig=0 <f32.sqrt>\n - func[1] sig=1 <f32.xkcd_sqrt_2>\n - func[2] sig=2 <f32.xkcd_sqrt_3>\n - func[3] sig=2 <f32.xkcd_sqrt_5>\n - func[4] sig=1 <f32.xkcd_better_sqrt_5>\n - func[5] sig=3 <f64.sqrt>\n - func[6] sig=4 <f64.xkcd_sqrt_2>\n - func[7] sig=5 <f64.xkcd_sqrt_3>\n - func[8] sig=5 <f64.xkcd_sqrt_5>\n - func[9] sig=4 <f64.xkcd_better_sqrt_5>\nExport[10]:\n - func[0] <f32.sqrt> -> \"f32.sqrt\"\n - func[1] <f32.xkcd_sqrt_2> -> \"f32.xkcd_sqrt_2\"\n - func[2] <f32.xkcd_sqrt_3> -> \"f32.xkcd_sqrt_3\"\n - func[3] <f32.xkcd_sqrt_5> -> \"f32.xkcd_sqrt_5\"\n - func[4] <f32.xkcd_better_sqrt_5> -> \"f32.xkcd_better_sqrt_5\"\n - func[5] <f64.sqrt> -> \"f64.sqrt\"\n - func[6] <f64.xkcd_sqrt_2> -> \"f64.xkcd_sqrt_2\"\n - func[7] <f64.xkcd_sqrt_3> -> \"f64.xkcd_sqrt_3\"\n - func[8] <f64.xkcd_sqrt_5> -> \"f64.xkcd_sqrt_5\"\n - func[9] <f64.xkcd_better_sqrt_5> -> \"f64.xkcd_better_sqrt_5\"\nCode[10]:\n - func[0] size=5 <f32.sqrt>\n - func[1] size=16 <f32.xkcd_sqrt_2>\n - func[2] size=10 <f32.xkcd_sqrt_3>\n - func[3] size=13 <f32.xkcd_sqrt_5>\n - func[4] size=19 <f32.xkcd_better_sqrt_5>\n - func[5] size=5 <f64.sqrt>\n - func[6] size=16 <f64.xkcd_sqrt_2>\n - func[7] size=10 <f64.xkcd_sqrt_3>\n - func[8] size=13 <f64.xkcd_sqrt_5>\n - func[9] size=19 <f64.xkcd_better_sqrt_5>\n",
      "disassemble": "\nfloat_exprs.79.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n0000fd func[0] <f32.sqrt>:\n 0000fe: 20 00                      | local.get 0\n 000100: 91                         | f32.sqrt\n 000101: 0b                         | end\n000103 func[1] <f32.xkcd_sqrt_2>:\n 000104: 20 00                      | local.get 0\n 000106: 20 01                      | local.get 1\n 000108: 95                         | f32.div\n 000109: 20 02                      | local.get 2\n 00010b: 20 03                      | local.get 3\n 00010d: 20 02                      | local.get 2\n 00010f: 93                         | f32.sub\n 000110: 95                         | f32.div\n 000111: 92                         | f32.add\n 000112: 0b                         | end\n000114 func[2] <f32.xkcd_sqrt_3>:\n 000115: 20 00                      | local.get 0\n 000117: 20 01                      | local.get 1\n 000119: 94                         | f32.mul\n 00011a: 20 02                      | local.get 2\n 00011c: 95                         | f32.div\n 00011d: 0b                         | end\n00011f func[3] <f32.xkcd_sqrt_5>:\n 000120: 20 00                      | local.get 0\n 000122: 20 01                      | local.get 1\n 000124: 95                         | f32.div\n 000125: 20 02                      | local.get 2\n 000127: 20 00                      | local.get 0\n 000129: 95                         | f32.div\n 00012a: 92                         | f32.add\n 00012b: 0b                         | end\n00012d func[4] <f32.xkcd_better_sqrt_5>:\n 00012e: 20 00                      | local.get 0\n 000130: 20 01                      | local.get 1\n 000132: 20 02                      | local.get 2\n 000134: 94                         | f32.mul\n 000135: 92                         | f32.add\n 000136: 20 03                      | local.get 3\n 000138: 20 01                      | local.get 1\n 00013a: 20 02                      | local.get 2\n 00013c: 94                         | f32.mul\n 00013d: 93                         | f32.sub\n 00013e: 95                         | f32.div\n 00013f: 0b                         | end\n000141 func[5] <f64.sqrt>:\n 000142: 20 00                      | local.get 0\n 000144: 9f                         | f64.sqrt\n 000145: 0b                         | end\n000147 func[6] <f64.xkcd_sqrt_2>:\n 000148: 20 00                      | local.get 0\n 00014a: 20 01                      | local.get 1\n 00014c: a3                         | f64.div\n 00014d: 20 02                      | local.get 2\n 00014f: 20 03                      | local.get 3\n 000151: 20 02                      | local.get 2\n 000153: a1                         | f64.sub\n 000154: a3                         | f64.div\n 000155: a0                         | f64.add\n 000156: 0b                         | end\n000158 func[7] <f64.xkcd_sqrt_3>:\n 000159: 20 00                      | local.get 0\n 00015b: 20 01                      | local.get 1\n 00015d: a2                         | f64.mul\n 00015e: 20 02                      | local.get 2\n 000160: a3                         | f64.div\n 000161: 0b                         | end\n000163 func[8] <f64.xkcd_sqrt_5>:\n 000164: 20 00                      | local.get 0\n 000166: 20 01                      | local.get 1\n 000168: a3                         | f64.div\n 000169: 20 02                      | local.get 2\n 00016b: 20 00                      | local.get 0\n 00016d: a3                         | f64.div\n 00016e: a0                         | f64.add\n 00016f: 0b                         | end\n000171 func[9] <f64.xkcd_better_sqrt_5>:\n 000172: 20 00                      | local.get 0\n 000174: 20 01                      | local.get 1\n 000176: 20 02                      | local.get 2\n 000178: a2                         | f64.mul\n 000179: a0                         | f64.add\n 00017a: 20 03                      | local.get 3\n 00017c: 20 01                      | local.get 1\n 00017e: 20 02                      | local.get 2\n 000180: a2                         | f64.mul\n 000181: a1                         | f64.sub\n 000182: a3                         | f64.div\n 000183: 0b                         | end\n"
    },
    "float_exprs.80.wasm": {
      "header": "\nfloat_exprs.80.wasm:\tfile format wasm 0x1\n\nSections:\n\n     Type start=0x0000000a end=0x00000017 (size=0x0000000d) count: 2\n Function start=0x00000019 end=0x0000001c (size=0x00000003) count: 2\n   Export start=0x0000001e end=0x00000047 (size=0x00000029) count: 2\n     Code start=0x0000004a end=0x000000e7 (size=0x0000009d) count: 2\n",
      "details": "\nfloat_exprs.80.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nType[2]:\n - type[0] (f32, f32) -> f32\n - type[1] (f64, f64) -> f64\nFunction[2]:\n - func[0] sig=0 <f32.compute_radix>\n - func[1] sig=1 <f64.compute_radix>\nExport[2]:\n - func[0] <f32.compute_radix> -> \"f32.compute_radix\"\n - func[1] <f64.compute_radix> -> \"f64.compute_radix\"\nCode[2]:\n - func[0] size=67 <f32.compute_radix>\n - func[1] size=87 <f64.compute_radix>\n",
      "disassemble": "\nfloat_exprs.80.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n00004c func[0] <f32.compute_radix>:\n 00004d: 03 40                      | loop\n 00004f: 20 00                      |   local.get 0\n 000051: 20 00                      |   local.get 0\n 000053: 92                         |   f32.add\n 000054: 22 00                      |   local.tee 0\n 000056: 43 00 00 80 3f             |   f32.const 0x1p+0\n 00005b: 92                         |   f32.add\n 00005c: 20 00                      |   local.get 0\n 00005e: 93                         |   f32.sub\n 00005f: 43 00 00 80 bf             |   f32.const -0x1p+0\n 000064: 92                         |   f32.add\n 000065: 43 00 00 00 00             |   f32.const 0x0p+0\n 00006a: 5b                         |   f32.eq\n 00006b: 0d 00                      |   br_if 0\n 00006d: 0b                         | end\n 00006e: 03 40                      | loop\n 000070: 20 00                      |   local.get 0\n 000072: 20 01                      |   local.get 1\n 000074: 43 00 00 80 3f             |   f32.const 0x1p+0\n 000079: 92                         |   f32.add\n 00007a: 22 01                      |   local.tee 1\n 00007c: 92                         |   f32.add\n 00007d: 20 00                      |   local.get 0\n 00007f: 93                         |   f32.sub\n 000080: 20 01                      |   local.get 1\n 000082: 93                         |   f32.sub\n 000083: 43 00 00 00 00             |   f32.const 0x0p+0\n 000088: 5c                         |   f32.ne\n 000089: 0d 00                      |   br_if 0\n 00008b: 0b                         | end\n 00008c: 20 01                      | local.get 1\n 00008e: 0b                         | end\n000090 func[1] <f64.compute_radix>:\n 000091: 03 40                      | loop\n 000093: 20 00                      |   local.get 0\n 000095: 20 00                      |   local.get 0\n 000097: a0                         |   f64.add\n 000098: 22 00                      |   local.tee 0\n 00009a: 44 00 00 00 00 00 00 f0 3f |   f64.const 0x1p+0\n 0000a3: a0                         |   f64.add\n 0000a4: 20 00                      |   local.get 0\n 0000a6: a1                         |   f64.sub\n 0000a7: 44 00 00 00 00 00 00 f0 bf |   f64.const -0x1p+0\n 0000b0: a0                         |   f64.add\n 0000b1: 44 00 00 00 00 00 00 00 00 |   f64.const 0x0p+0\n 0000ba: 61                         |   f64.eq\n 0000bb: 0d 00                      |   br_if 0\n 0000bd: 0b                         | end\n 0000be: 03 40                      | loop\n 0000c0: 20 00                      |   local.get 0\n 0000c2: 20 01                      |   local.get 1\n 0000c4: 44 00 00 00 00 00 00 f0 3f |   f64.const 0x1p+0\n 0000cd: a0                         |   f64.add\n 0000ce: 22 01                      |   local.tee 1\n 0000d0: a0                         |   f64.add\n 0000d1: 20 00                      |   local.get 0\n 0000d3: a1                         |   f64.sub\n 0000d4: 20 01                      |   local.get 1\n 0000d6: a1                         |   f64.sub\n 0000d7: 44 00 00 00 00 00 00 00 00 |   f64.const 0x0p+0\n 0000e0: 62                         |   f64.ne\n 0000e1: 0d 00                      |   br_if 0\n 0000e3: 0b                         | end\n 0000e4: 20 01                      | local.get 1\n 0000e6: 0b                         | end\n"
    },
    "float_exprs.81.wasm": {
      "header": "\nfloat_exprs.81.wasm:\tfile format wasm 0x1\n\nSections:\n\n     Type start=0x0000000a end=0x00000017 (size=0x0000000d) count: 2\n Function start=0x00000019 end=0x0000001c (size=0x00000003) count: 2\n   Export start=0x0000001e end=0x00000055 (size=0x00000037) count: 2\n     Code start=0x00000057 end=0x0000007e (size=0x00000027) count: 2\n",
      "details": "\nfloat_exprs.81.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nType[2]:\n - type[0] (f32, f32) -> f32\n - type[1] (f64, f64) -> f64\nFunction[2]:\n - func[0] sig=0 <f32.no_fold_sub1_mul_add>\n - func[1] sig=1 <f64.no_fold_sub1_mul_add>\nExport[2]:\n - func[0] <f32.no_fold_sub1_mul_add> -> \"f32.no_fold_sub1_mul_add\"\n - func[1] <f64.no_fold_sub1_mul_add> -> \"f64.no_fold_sub1_mul_add\"\nCode[2]:\n - func[0] size=16 <f32.no_fold_sub1_mul_add>\n - func[1] size=20 <f64.no_fold_sub1_mul_add>\n",
      "disassemble": "\nfloat_exprs.81.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n000059 func[0] <f32.no_fold_sub1_mul_add>:\n 00005a: 20 00                      | local.get 0\n 00005c: 43 00 00 80 3f             | f32.const 0x1p+0\n 000061: 93                         | f32.sub\n 000062: 20 01                      | local.get 1\n 000064: 94                         | f32.mul\n 000065: 20 01                      | local.get 1\n 000067: 92                         | f32.add\n 000068: 0b                         | end\n00006a func[1] <f64.no_fold_sub1_mul_add>:\n 00006b: 20 00                      | local.get 0\n 00006d: 44 00 00 00 00 00 00 f0 3f | f64.const 0x1p+0\n 000076: a1                         | f64.sub\n 000077: 20 01                      | local.get 1\n 000079: a2                         | f64.mul\n 00007a: 20 01                      | local.get 1\n 00007c: a0                         | f64.add\n 00007d: 0b                         | end\n"
    },
    "float_exprs.82.wasm": {
      "header": "\nfloat_exprs.82.wasm:\tfile format wasm 0x1\n\nSections:\n\n     Type start=0x0000000a end=0x00000019 (size=0x0000000f) count: 2\n Function start=0x0000001b end=0x00000020 (size=0x00000005) count: 4\n   Export start=0x00000023 end=0x000000ac (size=0x00000089) count: 4\n     Code start=0x000000ae end=0x000000e7 (size=0x00000039) count: 4\n",
      "details": "\nfloat_exprs.82.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nType[2]:\n - type[0] (f32, f32, f32) -> i32\n - type[1] (f64, f64, f64) -> i32\nFunction[4]:\n - func[0] sig=0 <f32.no_fold_add_le_monotonicity>\n - func[1] sig=0 <f32.no_fold_add_ge_monotonicity>\n - func[2] sig=1 <f64.no_fold_add_le_monotonicity>\n - func[3] sig=1 <f64.no_fold_add_ge_monotonicity>\nExport[4]:\n - func[0] <f32.no_fold_add_le_monotonicity> -> \"f32.no_fold_add_le_monotonicity\"\n - func[1] <f32.no_fold_add_ge_monotonicity> -> \"f32.no_fold_add_ge_monotonicity\"\n - func[2] <f64.no_fold_add_le_monotonicity> -> \"f64.no_fold_add_le_monotonicity\"\n - func[3] <f64.no_fold_add_ge_monotonicity> -> \"f64.no_fold_add_ge_monotonicity\"\nCode[4]:\n - func[0] size=13 <f32.no_fold_add_le_monotonicity>\n - func[1] size=13 <f32.no_fold_add_ge_monotonicity>\n - func[2] size=13 <f64.no_fold_add_le_monotonicity>\n - func[3] size=13 <f64.no_fold_add_ge_monotonicity>\n",
      "disassemble": "\nfloat_exprs.82.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n0000b0 func[0] <f32.no_fold_add_le_monotonicity>:\n 0000b1: 20 00                      | local.get 0\n 0000b3: 20 02                      | local.get 2\n 0000b5: 92                         | f32.add\n 0000b6: 20 01                      | local.get 1\n 0000b8: 20 02                      | local.get 2\n 0000ba: 92                         | f32.add\n 0000bb: 5f                         | f32.le\n 0000bc: 0b                         | end\n0000be func[1] <f32.no_fold_add_ge_monotonicity>:\n 0000bf: 20 00                      | local.get 0\n 0000c1: 20 02                      | local.get 2\n 0000c3: 92                         | f32.add\n 0000c4: 20 01                      | local.get 1\n 0000c6: 20 02                      | local.get 2\n 0000c8: 92                         | f32.add\n 0000c9: 60                         | f32.ge\n 0000ca: 0b                         | end\n0000cc func[2] <f64.no_fold_add_le_monotonicity>:\n 0000cd: 20 00                      | local.get 0\n 0000cf: 20 02                      | local.get 2\n 0000d1: a0                         | f64.add\n 0000d2: 20 01                      | local.get 1\n 0000d4: 20 02                      | local.get 2\n 0000d6: a0                         | f64.add\n 0000d7: 65                         | f64.le\n 0000d8: 0b                         | end\n0000da func[3] <f64.no_fold_add_ge_monotonicity>:\n 0000db: 20 00                      | local.get 0\n 0000dd: 20 02                      | local.get 2\n 0000df: a0                         | f64.add\n 0000e0: 20 01                      | local.get 1\n 0000e2: 20 02                      | local.get 2\n 0000e4: a0                         | f64.add\n 0000e5: 66                         | f64.ge\n 0000e6: 0b                         | end\n"
    },
    "float_exprs.83.wasm": {
      "header": "\nfloat_exprs.83.wasm:\tfile format wasm 0x1\n\nSections:\n\n     Type start=0x0000000a end=0x00000017 (size=0x0000000d) count: 2\n Function start=0x00000019 end=0x00000022 (size=0x00000009) count: 8\n   Export start=0x00000024 end=0x0000008d (size=0x00000069) count: 8\n     Code start=0x0000008f end=0x000000d8 (size=0x00000049) count: 8\n",
      "details": "\nfloat_exprs.83.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nType[2]:\n - type[0] (f32, f32) -> i32\n - type[1] (f64, f64) -> i32\nFunction[8]:\n - func[0] sig=0 <f32.not_lt>\n - func[1] sig=0 <f32.not_le>\n - func[2] sig=0 <f32.not_gt>\n - func[3] sig=0 <f32.not_ge>\n - func[4] sig=1 <f64.not_lt>\n - func[5] sig=1 <f64.not_le>\n - func[6] sig=1 <f64.not_gt>\n - func[7] sig=1 <f64.not_ge>\nExport[8]:\n - func[0] <f32.not_lt> -> \"f32.not_lt\"\n - func[1] <f32.not_le> -> \"f32.not_le\"\n - func[2] <f32.not_gt> -> \"f32.not_gt\"\n - func[3] <f32.not_ge> -> \"f32.not_ge\"\n - func[4] <f64.not_lt> -> \"f64.not_lt\"\n - func[5] <f64.not_le> -> \"f64.not_le\"\n - func[6] <f64.not_gt> -> \"f64.not_gt\"\n - func[7] <f64.not_ge> -> \"f64.not_ge\"\nCode[8]:\n - func[0] size=8 <f32.not_lt>\n - func[1] size=8 <f32.not_le>\n - func[2] size=8 <f32.not_gt>\n - func[3] size=8 <f32.not_ge>\n - func[4] size=8 <f64.not_lt>\n - func[5] size=8 <f64.not_le>\n - func[6] size=8 <f64.not_gt>\n - func[7] size=8 <f64.not_ge>\n",
      "disassemble": "\nfloat_exprs.83.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n000091 func[0] <f32.not_lt>:\n 000092: 20 00                      | local.get 0\n 000094: 20 01                      | local.get 1\n 000096: 5d                         | f32.lt\n 000097: 45                         | i32.eqz\n 000098: 0b                         | end\n00009a func[1] <f32.not_le>:\n 00009b: 20 00                      | local.get 0\n 00009d: 20 01                      | local.get 1\n 00009f: 5f                         | f32.le\n 0000a0: 45                         | i32.eqz\n 0000a1: 0b                         | end\n0000a3 func[2] <f32.not_gt>:\n 0000a4: 20 00                      | local.get 0\n 0000a6: 20 01                      | local.get 1\n 0000a8: 5e                         | f32.gt\n 0000a9: 45                         | i32.eqz\n 0000aa: 0b                         | end\n0000ac func[3] <f32.not_ge>:\n 0000ad: 20 00                      | local.get 0\n 0000af: 20 01                      | local.get 1\n 0000b1: 60                         | f32.ge\n 0000b2: 45                         | i32.eqz\n 0000b3: 0b                         | end\n0000b5 func[4] <f64.not_lt>:\n 0000b6: 20 00                      | local.get 0\n 0000b8: 20 01                      | local.get 1\n 0000ba: 63                         | f64.lt\n 0000bb: 45                         | i32.eqz\n 0000bc: 0b                         | end\n0000be func[5] <f64.not_le>:\n 0000bf: 20 00                      | local.get 0\n 0000c1: 20 01                      | local.get 1\n 0000c3: 65                         | f64.le\n 0000c4: 45                         | i32.eqz\n 0000c5: 0b                         | end\n0000c7 func[6] <f64.not_gt>:\n 0000c8: 20 00                      | local.get 0\n 0000ca: 20 01                      | local.get 1\n 0000cc: 64                         | f64.gt\n 0000cd: 45                         | i32.eqz\n 0000ce: 0b                         | end\n0000d0 func[7] <f64.not_ge>:\n 0000d1: 20 00                      | local.get 0\n 0000d3: 20 01                      | local.get 1\n 0000d5: 66                         | f64.ge\n 0000d6: 45                         | i32.eqz\n 0000d7: 0b                         | end\n"
    },
    "float_exprs.84.wasm": {
      "header": "\nfloat_exprs.84.wasm:\tfile format wasm 0x1\n\nSections:\n\n     Type start=0x0000000a end=0x00000013 (size=0x00000009) count: 2\n Function start=0x00000015 end=0x00000018 (size=0x00000003) count: 2\n   Export start=0x0000001a end=0x00000037 (size=0x0000001d) count: 2\n     Code start=0x00000039 end=0x0000008e (size=0x00000055) count: 2\n",
      "details": "\nfloat_exprs.84.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nType[2]:\n - type[0] () -> f32\n - type[1] () -> f64\nFunction[2]:\n - func[0] sig=0 <f32.epsilon>\n - func[1] sig=1 <f64.epsilon>\nExport[2]:\n - func[0] <f32.epsilon> -> \"f32.epsilon\"\n - func[1] <f64.epsilon> -> \"f64.epsilon\"\nCode[2]:\n - func[0] size=31 <f32.epsilon>\n - func[1] size=51 <f64.epsilon>\n",
      "disassemble": "\nfloat_exprs.84.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n00003b func[0] <f32.epsilon>:\n 00003c: 43 00 00 80 3f             | f32.const 0x1p+0\n 000041: 43 00 00 40 40             | f32.const 0x1.8p+1\n 000046: 43 00 00 80 40             | f32.const 0x1p+2\n 00004b: 43 00 00 40 40             | f32.const 0x1.8p+1\n 000050: 95                         | f32.div\n 000051: 43 00 00 80 3f             | f32.const 0x1p+0\n 000056: 93                         | f32.sub\n 000057: 94                         | f32.mul\n 000058: 93                         | f32.sub\n 000059: 0b                         | end\n00005b func[1] <f64.epsilon>:\n 00005c: 44 00 00 00 00 00 00 f0 3f | f64.const 0x1p+0\n 000065: 44 00 00 00 00 00 00 08 40 | f64.const 0x1.8p+1\n 00006e: 44 00 00 00 00 00 00 10 40 | f64.const 0x1p+2\n 000077: 44 00 00 00 00 00 00 08 40 | f64.const 0x1.8p+1\n 000080: a3                         | f64.div\n 000081: 44 00 00 00 00 00 00 f0 3f | f64.const 0x1p+0\n 00008a: a1                         | f64.sub\n 00008b: a2                         | f64.mul\n 00008c: a1                         | f64.sub\n 00008d: 0b                         | end\n"
    },
    "float_exprs.85.wasm": {
      "header": "\nfloat_exprs.85.wasm:\tfile format wasm 0x1\n\nSections:\n\n     Type start=0x0000000a end=0x00000013 (size=0x00000009) count: 2\n Function start=0x00000015 end=0x00000018 (size=0x00000003) count: 2\n   Export start=0x0000001a end=0x00000037 (size=0x0000001d) count: 2\n     Code start=0x00000039 end=0x000000a0 (size=0x00000067) count: 2\n",
      "details": "\nfloat_exprs.85.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nType[2]:\n - type[0] () -> f32\n - type[1] () -> f64\nFunction[2]:\n - func[0] sig=0 <f32.epsilon>\n - func[1] sig=1 <f64.epsilon>\nExport[2]:\n - func[0] <f32.epsilon> -> \"f32.epsilon\"\n - func[1] <f64.epsilon> -> \"f64.epsilon\"\nCode[2]:\n - func[0] size=42 <f32.epsilon>\n - func[1] size=58 <f64.epsilon>\n",
      "disassemble": "\nfloat_exprs.85.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n00003b func[0] <f32.epsilon>:\n 00003c: 02 7d                      | local[0..1] type=f32\n 00003e: 43 00 00 80 3f             | f32.const 0x1p+0\n 000043: 21 00                      | local.set 0\n 000045: 03 40                      | loop\n 000047: 20 00                      |   local.get 0\n 000049: 22 01                      |   local.tee 1\n 00004b: 43 00 00 00 3f             |   f32.const 0x1p-1\n 000050: 94                         |   f32.mul\n 000051: 22 00                      |   local.tee 0\n 000053: 43 00 00 80 3f             |   f32.const 0x1p+0\n 000058: 92                         |   f32.add\n 000059: 43 00 00 80 3f             |   f32.const 0x1p+0\n 00005e: 5e                         |   f32.gt\n 00005f: 0d 00                      |   br_if 0\n 000061: 0b                         | end\n 000062: 20 01                      | local.get 1\n 000064: 0b                         | end\n000066 func[1] <f64.epsilon>:\n 000067: 02 7c                      | local[0..1] type=f64\n 000069: 44 00 00 00 00 00 00 f0 3f | f64.const 0x1p+0\n 000072: 21 00                      | local.set 0\n 000074: 03 40                      | loop\n 000076: 20 00                      |   local.get 0\n 000078: 22 01                      |   local.tee 1\n 00007a: 44 00 00 00 00 00 00 e0 3f |   f64.const 0x1p-1\n 000083: a2                         |   f64.mul\n 000084: 22 00                      |   local.tee 0\n 000086: 44 00 00 00 00 00 00 f0 3f |   f64.const 0x1p+0\n 00008f: a0                         |   f64.add\n 000090: 44 00 00 00 00 00 00 f0 3f |   f64.const 0x1p+0\n 000099: 64                         |   f64.gt\n 00009a: 0d 00                      |   br_if 0\n 00009c: 0b                         | end\n 00009d: 20 01                      | local.get 1\n 00009f: 0b                         | end\n"
    },
    "float_exprs.86.wasm": {
      "header": "\nfloat_exprs.86.wasm:\tfile format wasm 0x1\n\nSections:\n\n     Type start=0x0000000a end=0x00000017 (size=0x0000000d) count: 2\n Function start=0x00000019 end=0x00000022 (size=0x00000009) count: 8\n   Export start=0x00000025 end=0x000000de (size=0x000000b9) count: 8\n     Code start=0x000000e0 end=0x00000151 (size=0x00000071) count: 8\n",
      "details": "\nfloat_exprs.86.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nType[2]:\n - type[0] (f32, f32) -> i32\n - type[1] (f64, f64) -> i32\nFunction[8]:\n - func[0] sig=0 <f32.no_trichotomy_lt>\n - func[1] sig=0 <f32.no_trichotomy_le>\n - func[2] sig=0 <f32.no_trichotomy_gt>\n - func[3] sig=0 <f32.no_trichotomy_ge>\n - func[4] sig=1 <f64.no_trichotomy_lt>\n - func[5] sig=1 <f64.no_trichotomy_le>\n - func[6] sig=1 <f64.no_trichotomy_gt>\n - func[7] sig=1 <f64.no_trichotomy_ge>\nExport[8]:\n - func[0] <f32.no_trichotomy_lt> -> \"f32.no_trichotomy_lt\"\n - func[1] <f32.no_trichotomy_le> -> \"f32.no_trichotomy_le\"\n - func[2] <f32.no_trichotomy_gt> -> \"f32.no_trichotomy_gt\"\n - func[3] <f32.no_trichotomy_ge> -> \"f32.no_trichotomy_ge\"\n - func[4] <f64.no_trichotomy_lt> -> \"f64.no_trichotomy_lt\"\n - func[5] <f64.no_trichotomy_le> -> \"f64.no_trichotomy_le\"\n - func[6] <f64.no_trichotomy_gt> -> \"f64.no_trichotomy_gt\"\n - func[7] <f64.no_trichotomy_ge> -> \"f64.no_trichotomy_ge\"\nCode[8]:\n - func[0] size=13 <f32.no_trichotomy_lt>\n - func[1] size=13 <f32.no_trichotomy_le>\n - func[2] size=13 <f32.no_trichotomy_gt>\n - func[3] size=13 <f32.no_trichotomy_ge>\n - func[4] size=13 <f64.no_trichotomy_lt>\n - func[5] size=13 <f64.no_trichotomy_le>\n - func[6] size=13 <f64.no_trichotomy_gt>\n - func[7] size=13 <f64.no_trichotomy_ge>\n",
      "disassemble": "\nfloat_exprs.86.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n0000e2 func[0] <f32.no_trichotomy_lt>:\n 0000e3: 20 00                      | local.get 0\n 0000e5: 20 01                      | local.get 1\n 0000e7: 5d                         | f32.lt\n 0000e8: 20 00                      | local.get 0\n 0000ea: 20 01                      | local.get 1\n 0000ec: 60                         | f32.ge\n 0000ed: 72                         | i32.or\n 0000ee: 0b                         | end\n0000f0 func[1] <f32.no_trichotomy_le>:\n 0000f1: 20 00                      | local.get 0\n 0000f3: 20 01                      | local.get 1\n 0000f5: 5f                         | f32.le\n 0000f6: 20 00                      | local.get 0\n 0000f8: 20 01                      | local.get 1\n 0000fa: 5e                         | f32.gt\n 0000fb: 72                         | i32.or\n 0000fc: 0b                         | end\n0000fe func[2] <f32.no_trichotomy_gt>:\n 0000ff: 20 00                      | local.get 0\n 000101: 20 01                      | local.get 1\n 000103: 5e                         | f32.gt\n 000104: 20 00                      | local.get 0\n 000106: 20 01                      | local.get 1\n 000108: 5f                         | f32.le\n 000109: 72                         | i32.or\n 00010a: 0b                         | end\n00010c func[3] <f32.no_trichotomy_ge>:\n 00010d: 20 00                      | local.get 0\n 00010f: 20 01                      | local.get 1\n 000111: 60                         | f32.ge\n 000112: 20 00                      | local.get 0\n 000114: 20 01                      | local.get 1\n 000116: 5d                         | f32.lt\n 000117: 72                         | i32.or\n 000118: 0b                         | end\n00011a func[4] <f64.no_trichotomy_lt>:\n 00011b: 20 00                      | local.get 0\n 00011d: 20 01                      | local.get 1\n 00011f: 63                         | f64.lt\n 000120: 20 00                      | local.get 0\n 000122: 20 01                      | local.get 1\n 000124: 66                         | f64.ge\n 000125: 72                         | i32.or\n 000126: 0b                         | end\n000128 func[5] <f64.no_trichotomy_le>:\n 000129: 20 00                      | local.get 0\n 00012b: 20 01                      | local.get 1\n 00012d: 65                         | f64.le\n 00012e: 20 00                      | local.get 0\n 000130: 20 01                      | local.get 1\n 000132: 64                         | f64.gt\n 000133: 72                         | i32.or\n 000134: 0b                         | end\n000136 func[6] <f64.no_trichotomy_gt>:\n 000137: 20 00                      | local.get 0\n 000139: 20 01                      | local.get 1\n 00013b: 64                         | f64.gt\n 00013c: 20 00                      | local.get 0\n 00013e: 20 01                      | local.get 1\n 000140: 65                         | f64.le\n 000141: 72                         | i32.or\n 000142: 0b                         | end\n000144 func[7] <f64.no_trichotomy_ge>:\n 000145: 20 00                      | local.get 0\n 000147: 20 01                      | local.get 1\n 000149: 66                         | f64.ge\n 00014a: 20 00                      | local.get 0\n 00014c: 20 01                      | local.get 1\n 00014e: 63                         | f64.lt\n 00014f: 72                         | i32.or\n 000150: 0b                         | end\n"
    },
    "float_exprs.87.wasm": {
      "header": "\nfloat_exprs.87.wasm:\tfile format wasm 0x1\n\nSections:\n\n     Type start=0x0000000a end=0x00000021 (size=0x00000017) count: 4\n Function start=0x00000023 end=0x00000037 (size=0x00000014) count: 19\n   Export start=0x0000003a end=0x00000228 (size=0x000001ee) count: 19\n     Code start=0x0000022b end=0x000003c4 (size=0x00000199) count: 19\n",
      "details": "\nfloat_exprs.87.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nType[4]:\n - type[0] (i32, i32) -> i32\n - type[1] (i32) -> i32\n - type[2] (i64, i64) -> i64\n - type[3] (i64) -> i64\nFunction[19]:\n - func[0] sig=0 <f32.arithmetic_nan_bitpattern>\n - func[1] sig=0 <f32.canonical_nan_bitpattern>\n - func[2] sig=1 <f32.nonarithmetic_nan_bitpattern>\n - func[3] sig=2 <f64.arithmetic_nan_bitpattern>\n - func[4] sig=2 <f64.canonical_nan_bitpattern>\n - func[5] sig=3 <f64.nonarithmetic_nan_bitpattern>\n - func[6] sig=1 <f32.no_fold_sub_zero>\n - func[7] sig=1 <f32.no_fold_neg0_sub>\n - func[8] sig=1 <f32.no_fold_mul_one>\n - func[9] sig=1 <f32.no_fold_neg1_mul>\n - func[10] sig=1 <f32.no_fold_div_one>\n - func[11] sig=1 <f32.no_fold_div_neg1>\n - func[12] sig=3 <f64.no_fold_sub_zero>\n - func[13] sig=3 <f64.no_fold_neg0_sub>\n - func[14] sig=3 <f64.no_fold_mul_one>\n - func[15] sig=3 <f64.no_fold_neg1_mul>\n - func[16] sig=3 <f64.no_fold_div_one>\n - func[17] sig=3 <f64.no_fold_div_neg1>\n - func[18] sig=1 <no_fold_promote_demote>\nExport[19]:\n - func[0] <f32.arithmetic_nan_bitpattern> -> \"f32.arithmetic_nan_bitpattern\"\n - func[1] <f32.canonical_nan_bitpattern> -> \"f32.canonical_nan_bitpattern\"\n - func[2] <f32.nonarithmetic_nan_bitpattern> -> \"f32.nonarithmetic_nan_bitpattern\"\n - func[3] <f64.arithmetic_nan_bitpattern> -> \"f64.arithmetic_nan_bitpattern\"\n - func[4] <f64.canonical_nan_bitpattern> -> \"f64.canonical_nan_bitpattern\"\n - func[5] <f64.nonarithmetic_nan_bitpattern> -> \"f64.nonarithmetic_nan_bitpattern\"\n - func[6] <f32.no_fold_sub_zero> -> \"f32.no_fold_sub_zero\"\n - func[7] <f32.no_fold_neg0_sub> -> \"f32.no_fold_neg0_sub\"\n - func[8] <f32.no_fold_mul_one> -> \"f32.no_fold_mul_one\"\n - func[9] <f32.no_fold_neg1_mul> -> \"f32.no_fold_neg1_mul\"\n - func[10] <f32.no_fold_div_one> -> \"f32.no_fold_div_one\"\n - func[11] <f32.no_fold_div_neg1> -> \"f32.no_fold_div_neg1\"\n - func[12] <f64.no_fold_sub_zero> -> \"f64.no_fold_sub_zero\"\n - func[13] <f64.no_fold_neg0_sub> -> \"f64.no_fold_neg0_sub\"\n - func[14] <f64.no_fold_mul_one> -> \"f64.no_fold_mul_one\"\n - func[15] <f64.no_fold_neg1_mul> -> \"f64.no_fold_neg1_mul\"\n - func[16] <f64.no_fold_div_one> -> \"f64.no_fold_div_one\"\n - func[17] <f64.no_fold_div_neg1> -> \"f64.no_fold_div_neg1\"\n - func[18] <no_fold_promote_demote> -> \"no_fold_promote_demote\"\nCode[19]:\n - func[0] size=17 <f32.arithmetic_nan_bitpattern>\n - func[1] size=17 <f32.canonical_nan_bitpattern>\n - func[2] size=7 <f32.nonarithmetic_nan_bitpattern>\n - func[3] size=22 <f64.arithmetic_nan_bitpattern>\n - func[4] size=22 <f64.canonical_nan_bitpattern>\n - func[5] size=7 <f64.nonarithmetic_nan_bitpattern>\n - func[6] size=19 <f32.no_fold_sub_zero>\n - func[7] size=19 <f32.no_fold_neg0_sub>\n - func[8] size=19 <f32.no_fold_mul_one>\n - func[9] size=19 <f32.no_fold_neg1_mul>\n - func[10] size=19 <f32.no_fold_div_one>\n - func[11] size=19 <f32.no_fold_div_neg1>\n - func[12] size=28 <f64.no_fold_sub_zero>\n - func[13] size=28 <f64.no_fold_neg0_sub>\n - func[14] size=28 <f64.no_fold_mul_one>\n - func[15] size=28 <f64.no_fold_neg1_mul>\n - func[16] size=28 <f64.no_fold_div_one>\n - func[17] size=28 <f64.no_fold_div_neg1>\n - func[18] size=15 <no_fold_promote_demote>\n",
      "disassemble": "\nfloat_exprs.87.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n00022d func[0] <f32.arithmetic_nan_bitpattern>:\n 00022e: 20 00                      | local.get 0\n 000230: be                         | f32.reinterpret_i32\n 000231: 20 01                      | local.get 1\n 000233: be                         | f32.reinterpret_i32\n 000234: 95                         | f32.div\n 000235: bc                         | i32.reinterpret_f32\n 000236: 41 80 80 80 fe 07          | i32.const 2143289344\n 00023c: 71                         | i32.and\n 00023d: 0b                         | end\n00023f func[1] <f32.canonical_nan_bitpattern>:\n 000240: 20 00                      | local.get 0\n 000242: be                         | f32.reinterpret_i32\n 000243: 20 01                      | local.get 1\n 000245: be                         | f32.reinterpret_i32\n 000246: 95                         | f32.div\n 000247: bc                         | i32.reinterpret_f32\n 000248: 41 ff ff ff ff 07          | i32.const 2147483647\n 00024e: 71                         | i32.and\n 00024f: 0b                         | end\n000251 func[2] <f32.nonarithmetic_nan_bitpattern>:\n 000252: 20 00                      | local.get 0\n 000254: be                         | f32.reinterpret_i32\n 000255: 8c                         | f32.neg\n 000256: bc                         | i32.reinterpret_f32\n 000257: 0b                         | end\n000259 func[3] <f64.arithmetic_nan_bitpattern>:\n 00025a: 20 00                      | local.get 0\n 00025c: bf                         | f64.reinterpret_i64\n 00025d: 20 01                      | local.get 1\n 00025f: bf                         | f64.reinterpret_i64\n 000260: a3                         | f64.div\n 000261: bd                         | i64.reinterpret_f64\n 000262: 42 80 80 80 80 80 80 80 fc | i64.const 9221120237041090560\n 00026b: ff 00                      | \n 00026d: 83                         | i64.and\n 00026e: 0b                         | end\n000270 func[4] <f64.canonical_nan_bitpattern>:\n 000271: 20 00                      | local.get 0\n 000273: bf                         | f64.reinterpret_i64\n 000274: 20 01                      | local.get 1\n 000276: bf                         | f64.reinterpret_i64\n 000277: a3                         | f64.div\n 000278: bd                         | i64.reinterpret_f64\n 000279: 42 ff ff ff ff ff ff ff ff | i64.const 9223372036854775807\n 000282: ff 00                      | \n 000284: 83                         | i64.and\n 000285: 0b                         | end\n000287 func[5] <f64.nonarithmetic_nan_bitpattern>:\n 000288: 20 00                      | local.get 0\n 00028a: bf                         | f64.reinterpret_i64\n 00028b: 9a                         | f64.neg\n 00028c: bd                         | i64.reinterpret_f64\n 00028d: 0b                         | end\n00028f func[6] <f32.no_fold_sub_zero>:\n 000290: 20 00                      | local.get 0\n 000292: be                         | f32.reinterpret_i32\n 000293: 43 00 00 00 00             | f32.const 0x0p+0\n 000298: 93                         | f32.sub\n 000299: bc                         | i32.reinterpret_f32\n 00029a: 41 80 80 80 fe 07          | i32.const 2143289344\n 0002a0: 71                         | i32.and\n 0002a1: 0b                         | end\n0002a3 func[7] <f32.no_fold_neg0_sub>:\n 0002a4: 43 00 00 00 80             | f32.const -0x0p+0\n 0002a9: 20 00                      | local.get 0\n 0002ab: be                         | f32.reinterpret_i32\n 0002ac: 93                         | f32.sub\n 0002ad: bc                         | i32.reinterpret_f32\n 0002ae: 41 80 80 80 fe 07          | i32.const 2143289344\n 0002b4: 71                         | i32.and\n 0002b5: 0b                         | end\n0002b7 func[8] <f32.no_fold_mul_one>:\n 0002b8: 20 00                      | local.get 0\n 0002ba: be                         | f32.reinterpret_i32\n 0002bb: 43 00 00 80 3f             | f32.const 0x1p+0\n 0002c0: 94                         | f32.mul\n 0002c1: bc                         | i32.reinterpret_f32\n 0002c2: 41 80 80 80 fe 07          | i32.const 2143289344\n 0002c8: 71                         | i32.and\n 0002c9: 0b                         | end\n0002cb func[9] <f32.no_fold_neg1_mul>:\n 0002cc: 43 00 00 80 bf             | f32.const -0x1p+0\n 0002d1: 20 00                      | local.get 0\n 0002d3: be                         | f32.reinterpret_i32\n 0002d4: 94                         | f32.mul\n 0002d5: bc                         | i32.reinterpret_f32\n 0002d6: 41 80 80 80 fe 07          | i32.const 2143289344\n 0002dc: 71                         | i32.and\n 0002dd: 0b                         | end\n0002df func[10] <f32.no_fold_div_one>:\n 0002e0: 20 00                      | local.get 0\n 0002e2: be                         | f32.reinterpret_i32\n 0002e3: 43 00 00 80 3f             | f32.const 0x1p+0\n 0002e8: 95                         | f32.div\n 0002e9: bc                         | i32.reinterpret_f32\n 0002ea: 41 80 80 80 fe 07          | i32.const 2143289344\n 0002f0: 71                         | i32.and\n 0002f1: 0b                         | end\n0002f3 func[11] <f32.no_fold_div_neg1>:\n 0002f4: 20 00                      | local.get 0\n 0002f6: be                         | f32.reinterpret_i32\n 0002f7: 43 00 00 80 bf             | f32.const -0x1p+0\n 0002fc: 95                         | f32.div\n 0002fd: bc                         | i32.reinterpret_f32\n 0002fe: 41 80 80 80 fe 07          | i32.const 2143289344\n 000304: 71                         | i32.and\n 000305: 0b                         | end\n000307 func[12] <f64.no_fold_sub_zero>:\n 000308: 20 00                      | local.get 0\n 00030a: bf                         | f64.reinterpret_i64\n 00030b: 44 00 00 00 00 00 00 00 00 | f64.const 0x0p+0\n 000314: a1                         | f64.sub\n 000315: bd                         | i64.reinterpret_f64\n 000316: 42 80 80 80 80 80 80 80 fc | i64.const 9221120237041090560\n 00031f: ff 00                      | \n 000321: 83                         | i64.and\n 000322: 0b                         | end\n000324 func[13] <f64.no_fold_neg0_sub>:\n 000325: 44 00 00 00 00 00 00 00 80 | f64.const -0x0p+0\n 00032e: 20 00                      | local.get 0\n 000330: bf                         | f64.reinterpret_i64\n 000331: a1                         | f64.sub\n 000332: bd                         | i64.reinterpret_f64\n 000333: 42 80 80 80 80 80 80 80 fc | i64.const 9221120237041090560\n 00033c: ff 00                      | \n 00033e: 83                         | i64.and\n 00033f: 0b                         | end\n000341 func[14] <f64.no_fold_mul_one>:\n 000342: 20 00                      | local.get 0\n 000344: bf                         | f64.reinterpret_i64\n 000345: 44 00 00 00 00 00 00 f0 3f | f64.const 0x1p+0\n 00034e: a2                         | f64.mul\n 00034f: bd                         | i64.reinterpret_f64\n 000350: 42 80 80 80 80 80 80 80 fc | i64.const 9221120237041090560\n 000359: ff 00                      | \n 00035b: 83                         | i64.and\n 00035c: 0b                         | end\n00035e func[15] <f64.no_fold_neg1_mul>:\n 00035f: 44 00 00 00 00 00 00 f0 bf | f64.const -0x1p+0\n 000368: 20 00                      | local.get 0\n 00036a: bf                         | f64.reinterpret_i64\n 00036b: a2                         | f64.mul\n 00036c: bd                         | i64.reinterpret_f64\n 00036d: 42 80 80 80 80 80 80 80 fc | i64.const 9221120237041090560\n 000376: ff 00                      | \n 000378: 83                         | i64.and\n 000379: 0b                         | end\n00037b func[16] <f64.no_fold_div_one>:\n 00037c: 20 00                      | local.get 0\n 00037e: bf                         | f64.reinterpret_i64\n 00037f: 44 00 00 00 00 00 00 f0 3f | f64.const 0x1p+0\n 000388: a3                         | f64.div\n 000389: bd                         | i64.reinterpret_f64\n 00038a: 42 80 80 80 80 80 80 80 fc | i64.const 9221120237041090560\n 000393: ff 00                      | \n 000395: 83                         | i64.and\n 000396: 0b                         | end\n000398 func[17] <f64.no_fold_div_neg1>:\n 000399: 20 00                      | local.get 0\n 00039b: bf                         | f64.reinterpret_i64\n 00039c: 44 00 00 00 00 00 00 f0 bf | f64.const -0x1p+0\n 0003a5: a3                         | f64.div\n 0003a6: bd                         | i64.reinterpret_f64\n 0003a7: 42 80 80 80 80 80 80 80 fc | i64.const 9221120237041090560\n 0003b0: ff 00                      | \n 0003b2: 83                         | i64.and\n 0003b3: 0b                         | end\n0003b5 func[18] <no_fold_promote_demote>:\n 0003b6: 20 00                      | local.get 0\n 0003b8: be                         | f32.reinterpret_i32\n 0003b9: bb                         | f64.promote_f32\n 0003ba: b6                         | f32.demote_f64\n 0003bb: bc                         | i32.reinterpret_f32\n 0003bc: 41 80 80 80 fe 07          | i32.const 2143289344\n 0003c2: 71                         | i32.and\n 0003c3: 0b                         | end\n"
    },
    "float_exprs.88.wasm": {
      "header": "\nfloat_exprs.88.wasm:\tfile format wasm 0x1\n\nSections:\n\n     Type start=0x0000000a end=0x00000017 (size=0x0000000d) count: 1\n Function start=0x00000019 end=0x0000001c (size=0x00000003) count: 2\n   Export start=0x0000001e end=0x00000050 (size=0x00000032) count: 2\n     Code start=0x00000052 end=0x00000087 (size=0x00000035) count: 2\n",
      "details": "\nfloat_exprs.88.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nType[1]:\n - type[0] (f64, f64, f64, f64, f64, f64, f64, f64) -> f64\nFunction[2]:\n - func[0] sig=0 <dot_product_example>\n - func[1] sig=0 <with_binary_sum_collapse>\nExport[2]:\n - func[0] <dot_product_example> -> \"dot_product_example\"\n - func[1] <with_binary_sum_collapse> -> \"with_binary_sum_collapse\"\nCode[2]:\n - func[0] size=25 <dot_product_example>\n - func[1] size=25 <with_binary_sum_collapse>\n",
      "disassemble": "\nfloat_exprs.88.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n000054 func[0] <dot_product_example>:\n 000055: 20 00                      | local.get 0\n 000057: 20 04                      | local.get 4\n 000059: a2                         | f64.mul\n 00005a: 20 01                      | local.get 1\n 00005c: 20 05                      | local.get 5\n 00005e: a2                         | f64.mul\n 00005f: a0                         | f64.add\n 000060: 20 02                      | local.get 2\n 000062: 20 06                      | local.get 6\n 000064: a2                         | f64.mul\n 000065: a0                         | f64.add\n 000066: 20 03                      | local.get 3\n 000068: 20 07                      | local.get 7\n 00006a: a2                         | f64.mul\n 00006b: a0                         | f64.add\n 00006c: 0b                         | end\n00006e func[1] <with_binary_sum_collapse>:\n 00006f: 20 00                      | local.get 0\n 000071: 20 04                      | local.get 4\n 000073: a2                         | f64.mul\n 000074: 20 01                      | local.get 1\n 000076: 20 05                      | local.get 5\n 000078: a2                         | f64.mul\n 000079: a0                         | f64.add\n 00007a: 20 02                      | local.get 2\n 00007c: 20 06                      | local.get 6\n 00007e: a2                         | f64.mul\n 00007f: 20 03                      | local.get 3\n 000081: 20 07                      | local.get 7\n 000083: a2                         | f64.mul\n 000084: a0                         | f64.add\n 000085: a0                         | f64.add\n 000086: 0b                         | end\n"
    },
    "float_exprs.89.wasm": {
      "header": "\nfloat_exprs.89.wasm:\tfile format wasm 0x1\n\nSections:\n\n     Type start=0x0000000a end=0x00000017 (size=0x0000000d) count: 2\n Function start=0x00000019 end=0x0000001c (size=0x00000003) count: 2\n   Export start=0x0000001e end=0x00000045 (size=0x00000027) count: 2\n     Code start=0x00000047 end=0x00000066 (size=0x0000001f) count: 2\n",
      "details": "\nfloat_exprs.89.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nType[2]:\n - type[0] (f32, f32) -> f32\n - type[1] (f64, f64) -> f64\nFunction[2]:\n - func[0] sig=0 <f32.contract2fma>\n - func[1] sig=1 <f64.contract2fma>\nExport[2]:\n - func[0] <f32.contract2fma> -> \"f32.contract2fma\"\n - func[1] <f64.contract2fma> -> \"f64.contract2fma\"\nCode[2]:\n - func[0] size=14 <f32.contract2fma>\n - func[1] size=14 <f64.contract2fma>\n",
      "disassemble": "\nfloat_exprs.89.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n000049 func[0] <f32.contract2fma>:\n 00004a: 20 00                      | local.get 0\n 00004c: 20 00                      | local.get 0\n 00004e: 94                         | f32.mul\n 00004f: 20 01                      | local.get 1\n 000051: 20 01                      | local.get 1\n 000053: 94                         | f32.mul\n 000054: 93                         | f32.sub\n 000055: 91                         | f32.sqrt\n 000056: 0b                         | end\n000058 func[1] <f64.contract2fma>:\n 000059: 20 00                      | local.get 0\n 00005b: 20 00                      | local.get 0\n 00005d: a2                         | f64.mul\n 00005e: 20 01                      | local.get 1\n 000060: 20 01                      | local.get 1\n 000062: a2                         | f64.mul\n 000063: a1                         | f64.sub\n 000064: 9f                         | f64.sqrt\n 000065: 0b                         | end\n"
    },
    "float_exprs.90.wasm": {
      "header": "\nfloat_exprs.90.wasm:\tfile format wasm 0x1\n\nSections:\n\n     Type start=0x0000000a end=0x00000019 (size=0x0000000f) count: 2\n Function start=0x0000001b end=0x0000001e (size=0x00000003) count: 2\n   Export start=0x00000020 end=0x0000005f (size=0x0000003f) count: 2\n     Code start=0x00000061 end=0x00000078 (size=0x00000017) count: 2\n",
      "details": "\nfloat_exprs.90.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nType[2]:\n - type[0] (f32, f32, f32) -> f32\n - type[1] (f64, f64, f64) -> f64\nFunction[2]:\n - func[0] sig=0 <f32.division_by_small_number>\n - func[1] sig=1 <f64.division_by_small_number>\nExport[2]:\n - func[0] <f32.division_by_small_number> -> \"f32.division_by_small_number\"\n - func[1] <f64.division_by_small_number> -> \"f64.division_by_small_number\"\nCode[2]:\n - func[0] size=10 <f32.division_by_small_number>\n - func[1] size=10 <f64.division_by_small_number>\n",
      "disassemble": "\nfloat_exprs.90.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n000063 func[0] <f32.division_by_small_number>:\n 000064: 20 00                      | local.get 0\n 000066: 20 01                      | local.get 1\n 000068: 20 02                      | local.get 2\n 00006a: 95                         | f32.div\n 00006b: 93                         | f32.sub\n 00006c: 0b                         | end\n00006e func[1] <f64.division_by_small_number>:\n 00006f: 20 00                      | local.get 0\n 000071: 20 01                      | local.get 1\n 000073: 20 02                      | local.get 2\n 000075: a3                         | f64.div\n 000076: a1                         | f64.sub\n 000077: 0b                         | end\n"
    },
    "float_exprs.91.wasm": {
      "header": "\nfloat_exprs.91.wasm:\tfile format wasm 0x1\n\nSections:\n\n     Type start=0x0000000a end=0x00000019 (size=0x0000000f) count: 2\n Function start=0x0000001b end=0x0000001e (size=0x00000003) count: 2\n   Export start=0x00000020 end=0x00000047 (size=0x00000027) count: 2\n     Code start=0x00000049 end=0x00000062 (size=0x00000019) count: 2\n",
      "details": "\nfloat_exprs.91.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nType[2]:\n - type[0] (f32, f32, f32) -> f32\n - type[1] (f64, f64, f64) -> f64\nFunction[2]:\n - func[0] sig=0 <f32.golden_ratio>\n - func[1] sig=1 <f64.golden_ratio>\nExport[2]:\n - func[0] <f32.golden_ratio> -> \"f32.golden_ratio\"\n - func[1] <f64.golden_ratio> -> \"f64.golden_ratio\"\nCode[2]:\n - func[0] size=11 <f32.golden_ratio>\n - func[1] size=11 <f64.golden_ratio>\n",
      "disassemble": "\nfloat_exprs.91.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n00004b func[0] <f32.golden_ratio>:\n 00004c: 20 00                      | local.get 0\n 00004e: 20 01                      | local.get 1\n 000050: 20 02                      | local.get 2\n 000052: 91                         | f32.sqrt\n 000053: 92                         | f32.add\n 000054: 94                         | f32.mul\n 000055: 0b                         | end\n000057 func[1] <f64.golden_ratio>:\n 000058: 20 00                      | local.get 0\n 00005a: 20 01                      | local.get 1\n 00005c: 20 02                      | local.get 2\n 00005e: 9f                         | f64.sqrt\n 00005f: a0                         | f64.add\n 000060: a2                         | f64.mul\n 000061: 0b                         | end\n"
    },
    "float_exprs.92.wasm": {
      "header": "\nfloat_exprs.92.wasm:\tfile format wasm 0x1\n\nSections:\n\n     Type start=0x0000000a end=0x00000015 (size=0x0000000b) count: 2\n Function start=0x00000017 end=0x0000001a (size=0x00000003) count: 2\n   Export start=0x0000001c end=0x00000043 (size=0x00000027) count: 2\n     Code start=0x00000045 end=0x0000007e (size=0x00000039) count: 2\n",
      "details": "\nfloat_exprs.92.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nType[2]:\n - type[0] (f32) -> f32\n - type[1] (f64) -> f64\nFunction[2]:\n - func[0] sig=0 <f32.silver_means>\n - func[1] sig=1 <f64.silver_means>\nExport[2]:\n - func[0] <f32.silver_means> -> \"f32.silver_means\"\n - func[1] <f64.silver_means> -> \"f64.silver_means\"\nCode[2]:\n - func[0] size=23 <f32.silver_means>\n - func[1] size=31 <f64.silver_means>\n",
      "disassemble": "\nfloat_exprs.92.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n000047 func[0] <f32.silver_means>:\n 000048: 43 00 00 00 3f             | f32.const 0x1p-1\n 00004d: 20 00                      | local.get 0\n 00004f: 20 00                      | local.get 0\n 000051: 20 00                      | local.get 0\n 000053: 94                         | f32.mul\n 000054: 43 00 00 80 40             | f32.const 0x1p+2\n 000059: 92                         | f32.add\n 00005a: 91                         | f32.sqrt\n 00005b: 92                         | f32.add\n 00005c: 94                         | f32.mul\n 00005d: 0b                         | end\n00005f func[1] <f64.silver_means>:\n 000060: 44 00 00 00 00 00 00 e0 3f | f64.const 0x1p-1\n 000069: 20 00                      | local.get 0\n 00006b: 20 00                      | local.get 0\n 00006d: 20 00                      | local.get 0\n 00006f: a2                         | f64.mul\n 000070: 44 00 00 00 00 00 00 10 40 | f64.const 0x1p+2\n 000079: a0                         | f64.add\n 00007a: 9f                         | f64.sqrt\n 00007b: a0                         | f64.add\n 00007c: a2                         | f64.mul\n 00007d: 0b                         | end\n"
    },
    "float_exprs.93.wasm": {
      "header": "\nfloat_exprs.93.wasm:\tfile format wasm 0x1\n\nSections:\n\n     Type start=0x0000000a end=0x00000011 (size=0x00000007) count: 1\n Function start=0x00000013 end=0x00000015 (size=0x00000002) count: 1\n   Export start=0x00000017 end=0x00000025 (size=0x0000000e) count: 1\n     Code start=0x00000027 end=0x0000003a (size=0x00000013) count: 1\n",
      "details": "\nfloat_exprs.93.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nType[1]:\n - type[0] (f64, f64) -> i32\nFunction[1]:\n - func[0] sig=0 <point_four>\nExport[1]:\n - func[0] <point_four> -> \"point_four\"\nCode[1]:\n - func[0] size=17 <point_four>\n",
      "disassemble": "\nfloat_exprs.93.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n000029 func[0] <point_four>:\n 00002a: 20 00                      | local.get 0\n 00002c: 20 01                      | local.get 1\n 00002e: a3                         | f64.div\n 00002f: 44 9a 99 99 99 99 99 d9 3f | f64.const 0x1.999999999999ap-2\n 000038: 63                         | f64.lt\n 000039: 0b                         | end\n"
    },
    "float_exprs.94.wasm": {
      "header": "\nfloat_exprs.94.wasm:\tfile format wasm 0x1\n\nSections:\n\n     Type start=0x0000000a end=0x00000010 (size=0x00000006) count: 1\n Function start=0x00000012 end=0x00000014 (size=0x00000002) count: 1\n   Export start=0x00000016 end=0x0000001d (size=0x00000007) count: 1\n     Code start=0x00000020 end=0x000000eb (size=0x000000cb) count: 1\n",
      "details": "\nfloat_exprs.94.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nType[1]:\n - type[0] (i32) -> f64\nFunction[1]:\n - func[0] sig=0 <tau>\nExport[1]:\n - func[0] <tau> -> \"tau\"\nCode[1]:\n - func[0] size=200 <tau>\n",
      "disassemble": "\nfloat_exprs.94.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n000023 func[0] <tau>:\n 000024: 04 7c                      | local[1..4] type=f64\n 000026: 44 00 00 00 00 00 00 00 00 | f64.const 0x0p+0\n 00002f: 21 01                      | local.set 1\n 000031: 02 40                      | block\n 000033: 20 00                      |   local.get 0\n 000035: 41 01                      |   i32.const 1\n 000037: 48                         |   i32.lt_s\n 000038: 0d 00                      |   br_if 0\n 00003a: 44 00 00 00 00 00 00 f0 3f |   f64.const 0x1p+0\n 000043: 21 02                      |   local.set 2\n 000045: 44 00 00 00 00 00 00 00 00 |   f64.const 0x0p+0\n 00004e: 21 03                      |   local.set 3\n 000050: 03 40                      |   loop\n 000052: 20 01                      |     local.get 1\n 000054: 20 02                      |     local.get 2\n 000056: 44 00 00 00 00 00 00 20 40 |     f64.const 0x1p+3\n 00005f: 20 03                      |     local.get 3\n 000061: 44 00 00 00 00 00 00 20 40 |     f64.const 0x1p+3\n 00006a: a2                         |     f64.mul\n 00006b: 22 04                      |     local.tee 4\n 00006d: 44 00 00 00 00 00 00 f0 3f |     f64.const 0x1p+0\n 000076: a0                         |     f64.add\n 000077: a3                         |     f64.div\n 000078: 44 00 00 00 00 00 00 10 40 |     f64.const 0x1p+2\n 000081: 20 04                      |     local.get 4\n 000083: 44 00 00 00 00 00 00 10 40 |     f64.const 0x1p+2\n 00008c: a0                         |     f64.add\n 00008d: a3                         |     f64.div\n 00008e: a1                         |     f64.sub\n 00008f: 44 00 00 00 00 00 00 00 40 |     f64.const 0x1p+1\n 000098: 20 04                      |     local.get 4\n 00009a: 44 00 00 00 00 00 00 14 40 |     f64.const 0x1.4p+2\n 0000a3: a0                         |     f64.add\n 0000a4: a3                         |     f64.div\n 0000a5: a1                         |     f64.sub\n 0000a6: 44 00 00 00 00 00 00 00 40 |     f64.const 0x1p+1\n 0000af: 20 04                      |     local.get 4\n 0000b1: 44 00 00 00 00 00 00 18 40 |     f64.const 0x1.8p+2\n 0000ba: a0                         |     f64.add\n 0000bb: a3                         |     f64.div\n 0000bc: a1                         |     f64.sub\n 0000bd: a2                         |     f64.mul\n 0000be: a0                         |     f64.add\n 0000bf: 21 01                      |     local.set 1\n 0000c1: 20 03                      |     local.get 3\n 0000c3: 44 00 00 00 00 00 00 f0 3f |     f64.const 0x1p+0\n 0000cc: a0                         |     f64.add\n 0000cd: 21 03                      |     local.set 3\n 0000cf: 20 02                      |     local.get 2\n 0000d1: 44 00 00 00 00 00 00 b0 3f |     f64.const 0x1p-4\n 0000da: a2                         |     f64.mul\n 0000db: 21 02                      |     local.set 2\n 0000dd: 20 00                      |     local.get 0\n 0000df: 41 7f                      |     i32.const 4294967295\n 0000e1: 6a                         |     i32.add\n 0000e2: 22 00                      |     local.tee 0\n 0000e4: 0d 00                      |     br_if 0\n 0000e6: 0b                         |   end\n 0000e7: 0b                         | end\n 0000e8: 20 01                      | local.get 1\n 0000ea: 0b                         | end\n"
    },
    "float_exprs.95.wasm": {
      "header": "\nfloat_exprs.95.wasm:\tfile format wasm 0x1\n\nSections:\n\n     Type start=0x0000000a end=0x00000017 (size=0x0000000d) count: 2\n Function start=0x00000019 end=0x0000001c (size=0x00000003) count: 2\n   Export start=0x0000001e end=0x0000005b (size=0x0000003d) count: 2\n     Code start=0x0000005d end=0x00000092 (size=0x00000035) count: 2\n",
      "details": "\nfloat_exprs.95.wasm:\tfile format wasm 0x1\n\nSection Details:\n\nType[2]:\n - type[0] (f32, f32) -> f32\n - type[1] (f64, f64) -> f64\nFunction[2]:\n - func[0] sig=0 <f32.no_fold_conditional_inc>\n - func[1] sig=1 <f64.no_fold_conditional_inc>\nExport[2]:\n - func[0] <f32.no_fold_conditional_inc> -> \"f32.no_fold_conditional_inc\"\n - func[1] <f64.no_fold_conditional_inc> -> \"f64.no_fold_conditional_inc\"\nCode[2]:\n - func[0] size=21 <f32.no_fold_conditional_inc>\n - func[1] size=29 <f64.no_fold_conditional_inc>\n",
      "disassemble": "\nfloat_exprs.95.wasm:\tfile format wasm 0x1\n\nCode Disassembly:\n\n00005f func[0] <f32.no_fold_conditional_inc>:\n 000060: 20 00                      | local.get 0\n 000062: 20 00                      | local.get 0\n 000064: 43 00 00 80 3f             | f32.const 0x1p+0\n 000069: 92                         | f32.add\n 00006a: 20 01                      | local.get 1\n 00006c: 43 00 00 00 00             | f32.const 0x0p+0\n 000071: 5d                         | f32.lt\n 000072: 1b                         | select\n 000073: 0b                         | end\n000075 func[1] <f64.no_fold_conditional_inc>:\n 000076: 20 00                      | local.get 0\n 000078: 20 00                      | local.get 0\n 00007a: 44 00 00 00 00 00 00 f0 3f | f64.const 0x1p+0\n 000083: a0                         | f64.add\n 000084: 20 01                      | local.get 1\n 000086: 44 00 00 00 00 00 00 00 00 | f64.const 0x0p+0\n 00008f: 63                         | f64.lt\n 000090: 1b                         | select\n 000091: 0b                         | end\n"
    }
  }
}
